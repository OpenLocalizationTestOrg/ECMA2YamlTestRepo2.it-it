### YamlMime:ManagedReference
items:
- uid: System.Web.Caching.CacheDependency
  id: CacheDependency
  children:
  - System.Web.Caching.CacheDependency.#ctor
  - System.Web.Caching.CacheDependency.#ctor(System.String)
  - System.Web.Caching.CacheDependency.#ctor(System.String[])
  - System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  - System.Web.Caching.CacheDependency.DependencyDispose
  - System.Web.Caching.CacheDependency.Dispose
  - System.Web.Caching.CacheDependency.FinishInit
  - System.Web.Caching.CacheDependency.GetFileDependencies
  - System.Web.Caching.CacheDependency.GetUniqueID
  - System.Web.Caching.CacheDependency.HasChanged
  - System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  - System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  - System.Web.Caching.CacheDependency.UtcLastModified
  langs:
  - csharp
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
  type: Class
  summary: "Stabilisce una relazione di dipendenza tra un elemento archiviato in un&quot;applicazione ASP.NET <xref href=&quot;System.Web.Caching.Cache&quot;> </xref> oggetto e un file, chiave di cache, una matrice di uno o un altro oggetto CacheDependency. La classe CacheDependency monitora le relazioni di dipendenza in modo che quando uno di essi viene modificato, l&quot;elemento memorizzato nella cache verrà rimossi automaticamente."
  remarks: "Se si aggiunge un elemento nella cache dipendente da un altro oggetto, ad esempio un file o una matrice di file, l&quot;elemento dipendente viene rimosso automaticamente dalla cache quando viene modificato l&quot;oggetto. Si supponga, ad esempio, creare un <xref:System.Data.DataSet>oggetto in base ai dati in un file XML.</xref:System.Data.DataSet> È possibile aggiungere il <xref:System.Data.DataSet>alla cache con un oggetto CacheDependency che rende il <xref:System.Data.DataSet>dipendente dal file XML.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Se il file XML viene modificato, il <xref:System.Data.DataSet>viene rimosso dalla cache.</xref:System.Data.DataSet>       È possibile aggiungere elementi con dipendenze da memorizzare nella cache dell&quot;applicazione con il <xref:System.Web.Caching.Cache.Add%2A>e <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName>metodi.</xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> </xref:System.Web.Caching.Cache.Add%2A> Non è possibile utilizzare il <xref:System.Web.Caching.Cache.Item%2A>proprietà per aggiungere elementi alla cache con dipendenze.</xref:System.Web.Caching.Cache.Item%2A>       Per impostare una dipendenza, creare un&quot;istanza della classe CacheDependency, specificando il file, chiavi o le directory in cui l&quot;elemento è dipendente e quindi passare la dipendenza di <xref:System.Web.Caching.Cache.Add%2A>o <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName>metodo.</xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> </xref:System.Web.Caching.Cache.Add%2A> L&quot;istanza CacheDependency può rappresentare un singolo file o directory, una matrice di file o directory o una matrice di file o directory insieme a una matrice delle chiavi della cache (che rappresentano gli altri elementi archiviati nel <xref:System.Web.Caching.Cache>oggetto).</xref:System.Web.Caching.Cache>"
  example:
  - "The following code example demonstrates using the <xref:System.Web.Caching.CacheDependency.HasChanged%2A> property to determine whether a CacheDependency changed since the previous request for an item in the <xref:System.Web.Caching.Cache>. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/t-system.web.caching.cac_3_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/t-system.web.caching.cac_3_1.aspx)]"
  syntax:
    content: 'public class CacheDependency : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor
  id: '#ctor'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency()
  nameWithType: CacheDependency.CacheDependency()
  fullName: System.Web.Caching.CacheDependency.CacheDependency()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe."
  remarks: "Se si desidera derivare la propria classe dal <xref:System.Web.Caching.CacheDependency>, implementare questa versione del costruttore CacheDependency.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example is a class that implements this version of the <xref:System.Web.Caching.CacheDependency> constructor as all classes that derive from <xref:System.Web.Caching.CacheDependency> are required to.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_2_1.vb)]"
  syntax:
    content: protected CacheDependency ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String)
  nameWithType: CacheDependency.CacheDependency(String)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe che consente di monitorare un file o directory per le modifiche."
  remarks: "If the directory or file specified in the `filename` parameter is not found in the file system, it will be treated as missing. If the directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when the directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code example creates an instance of the <xref:System.Web.Caching.CacheDependency> class with a dependency on an XML file. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method then adds an item to the <xref:System.Web.Caching.Cache> that is dependent upon that file.  \n  \n [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_5_1.vb)]\n [!code-cs[Classic CacheDependency.CacheDependency Example#1](~/add/codesnippet/csharp/m-system.web.caching.cac_5_1.cs)]  \n  \n You can also use the following technique to add an item to the <xref:System.Web.Caching.Cache> with a dependency on a file.  \n  \n [!code-cs[Single File Dependency Cache entry#1](~/add/codesnippet/csharp/m-system.web.caching.cac_5_2.aspx)]\n [!code-vb[Single File Dependency Cache entry#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_5_2.aspx)]"
  syntax:
    content: public CacheDependency (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "Il percorso di un file o directory quale dipende l&quot;oggetto memorizzato nella cache. Quando viene modificata la risorsa, l&quot;oggetto memorizzato nella cache diventa obsoleto e viene rimosso dalla cache."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[])
  nameWithType: CacheDependency.CacheDependency(String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[])
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe che esegue il monitoraggio di una matrice di percorsi (in file o directory) per le modifiche."
  remarks: "If any of the files or directories in the array changes or is removed from the array, the cached item becomes obsolete and is removed from the application's <xref:System.Web.Caching.Cache> object.  \n  \n Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  When you create the array that contains the file dependencies, you must define the number of files that the item you are adding to the <xref:System.Web.Caching.Cache> is dependent on."
  example:
  - "The following code example demonstrates how to use the <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method to add an item to the <xref:System.Web.Caching.Cache> with dependencies on an array of files. You can also make the item dependent on an array of directories.  \n  \n [!code-vb[Multiple file based dependency#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_12_1.aspx)]\n [!code-cs[Multiple file based dependency#1](~/add/codesnippet/csharp/m-system.web.caching.cac_12_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Una matrice di percorsi (file o directory) quale dipende l&quot;oggetto memorizzato nella cache. Quando una di queste modifiche alle risorse, l&quot;oggetto memorizzato nella cache diventa obsoleto e viene rimosso dalla cache."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  id: '#ctor(System.String,System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String,DateTime)
  nameWithType: CacheDependency.CacheDependency(String,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String,DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe che consente di monitorare un file o directory per le modifiche."
  remarks: "If the directory or file specified in the `filename` parameter is not found in the file system, it will be treated as missing. If the directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when the directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of the directory or file passed in the `filename` parameter. If the last modified date is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example uses this constructor to instantiate a <xref:System.Web.Caching.CacheDependency> object, then inserts an item into the <xref:System.Web.Caching.Cache> with that dependency. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_0_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/m-system.web.caching.cac_0_1.aspx)]"
  syntax:
    content: public CacheDependency (string filename, DateTime start);
    parameters:
    - id: filename
      type: System.String
      description: "Il percorso di un file o directory quale dipende l&quot;oggetto memorizzato nella cache. Quando viene modificata la risorsa, l&quot;oggetto memorizzato nella cache diventa obsoleto e viene rimosso dalla cache."
    - id: start
      type: System.DateTime
      description: "Ora in cui si desidera controllare la data ultima modifica della directory o file."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  id: '#ctor(System.String[],System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe che esegue il monitoraggio di una matrice di percorsi (in file o directory) per le modifiche e specifica un&quot;ora di inizio della verifica delle modifiche."
  remarks: "If any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of the array passed in the `filenames` parameter. If the last modified date of any object in the array is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example creates a <xref:System.Web.Caching.CacheDependency> object that passes two XML files and a <xref:System.DateTime.Now%2A?displayProperty=fullName> value when the object is included as a parameter argument in an <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method call.  \n  \n [!code-vb[CacheDependency Constructor4#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_10_1.aspx)]\n [!code-cs[CacheDependency Constructor4#1](~/add/codesnippet/csharp/m-system.web.caching.cac_10_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Una matrice di percorsi (file o directory) quale dipende l&quot;oggetto memorizzato nella cache. Quando una di queste modifiche alle risorse, l&quot;oggetto memorizzato nella cache diventa obsoleto e viene rimosso dalla cache."
    - id: start
      type: System.DateTime
      description: "Ora in cui si desidera controllare la data ultima modifica di oggetti nella matrice."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  id: '#ctor(System.String[],System.String[])'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[])
  nameWithType: CacheDependency.CacheDependency(String[],String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[])
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe che esegue il monitoraggio di una matrice di percorsi (in file o directory), una matrice delle chiavi della cache o di modifiche."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code fragment demonstrates how to insert an item into your application's <xref:System.Web.Caching.Cache> with a dependency on a key to another item placed in the cache. Since this method uses array syntax, you must define the number of keys on which the item you are adding to the <xref:System.Web.Caching.Cache> is dependent.  \n  \n [!code-vb[Key based dependency#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_11_1.aspx)]\n [!code-cs[Key based dependency#1](~/add/codesnippet/csharp/m-system.web.caching.cac_11_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Una matrice di percorsi (file o directory) quale dipende l&quot;oggetto memorizzato nella cache. Quando una di queste modifiche alle risorse, l&quot;oggetto memorizzato nella cache diventa obsoleto e viene rimosso dalla cache."
    - id: cachekeys
      type: System.String[]
      description: "Matrice delle chiavi della cache che il nuovo oggetto consente di monitorare le modifiche. Quando una di queste modifiche delle chiavi di cache, l&quot;oggetto associato all&quot;oggetto di dipendenza diventa obsoleto e viene rimosso dalla cache."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  id: '#ctor(System.String[],System.String[],System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe che esegue il monitoraggio di una matrice di percorsi (in file o directory), una matrice delle chiavi della cache o di modifiche."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of any object passed in the `filenames` or `cachekeys` parameters. If the last modified date of any of those objects is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example creates a `CreateDependency` method. When this method is called, it creates a <xref:System.DateTime> object and the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property is used to add an item to the cache with a `key` parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value of `key1` as well. This <xref:System.Web.Caching.CacheDependency> constructor then instantiates a <xref:System.Web.Caching.CacheDependency> object that passes `dependencyKey` and the <xref:System.DateTime> object as parameter arguments. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the <xref:System.Web.Caching.CacheDependency> object as a parameter. This makes the object added to the cache using the <xref:System.Web.Caching.Cache.Insert%2A> method dependent on the `key1` key.  \n  \n [!code-cs[CacheDependency Constructor6#1](~/add/codesnippet/csharp/8a673c60-cf9e-4171-bfff-_1.aspx)]\n [!code-vb[CacheDependency Constructor6#1](~/add/codesnippet/visualbasic/8a673c60-cf9e-4171-bfff-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Una matrice di percorsi (file o directory) quale dipende l&quot;oggetto memorizzato nella cache. Quando una di queste modifiche alle risorse, l&quot;oggetto memorizzato nella cache diventa obsoleto e viene rimosso dalla cache."
    - id: cachekeys
      type: System.String[]
      description: "Matrice delle chiavi della cache che il nuovo oggetto consente di monitorare le modifiche. Quando una di queste modifiche delle chiavi di cache, l&quot;oggetto associato all&quot;oggetto di dipendenza diventa obsoleto e viene rimosso dalla cache."
    - id: start
      type: System.DateTime
      description: "La data e ora in base a cui si desidera controllare la data ultima modifica degli oggetti passato il `filenames` e `cachekeys` matrici."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  id: '#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],CacheDependency)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe che esegue il monitoraggio di una matrice di percorsi (in file o directory), una matrice delle chiavi della cache o di modifiche. Si rende inoltre dipendente da un&quot;istanza separata del <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code example creates a `CreateDependency` method. When this method is called, it uses the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property to add an item to the cache with a `key` parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value of `key1` as well. The <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=fullName> constructor is used to create a <xref:System.Web.Caching.CacheDependency> object, `dep1`, which passes `dependencyKey` as a parameter argument. A second <xref:System.Web.Caching.CacheDependency> object, `dep2`, is created using this constructor, with `dep1` passed as the third parameter argument. This second dependency is dependent on the first. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the second <xref:System.Web.Caching.CacheDependency> object as a parameter. If the first dependency changes in any way, the cached item will be invalidated.  \n  \n [!code-vb[CacheDependency Constructor7#1](~/add/codesnippet/visualbasic/e6e24549-1cfa-4cc8-9d48-_1.aspx)]\n [!code-cs[CacheDependency Constructor7#1](~/add/codesnippet/csharp/e6e24549-1cfa-4cc8-9d48-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Una matrice di percorsi (file o directory) quale dipende l&quot;oggetto memorizzato nella cache. Quando una di queste modifiche alle risorse, l&quot;oggetto memorizzato nella cache diventa obsoleto e viene rimosso dalla cache."
    - id: cachekeys
      type: System.String[]
      description: "Matrice delle chiavi della cache che il nuovo oggetto consente di monitorare le modifiche. Quando una di queste modifiche delle chiavi di cache, l&quot;oggetto associato all&quot;oggetto di dipendenza diventa obsoleto e viene rimosso dalla cache."
    - id: dependency
      type: System.Web.Caching.CacheDependency
      description: "Un&quot;altra istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe cui dipende questa istanza."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  id: '#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],CacheDependency,DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe che esegue il monitoraggio di una matrice di percorsi (in file o directory), una matrice delle chiavi della cache o di modifiche. Si rende inoltre dipendente da un&quot;altra istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe e un&quot;ora di inizio della verifica delle modifiche."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of any of the objects passed in the `filenames`, `cachekeys`, or `dependency` parameters. If the last modified date for any of those objects is later than the date and time passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example shows a `CreateDependency` method. When this method is called, it creates a <xref:System.DateTime> object and the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property is used to add an item to the cache with a key parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value at its first (and only) index set to the value of `key1` as well. The <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=fullName> constructor is then used to create a <xref:System.Web.Caching.CacheDependency> object, `dep1`, which passes `dependencyKey` as a parameter argument. A second <xref:System.Web.Caching.CacheDependency> object, `dep2`, is then created using this constructor, with `dep1` and the <xref:System.DateTime> object passed as parameter arguments. This second dependency is dependent on the first, and dependency monitoring will begin 10 seconds after the `CreateDependency` method is called. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the second <xref:System.Web.Caching.CacheDependency> object as a parameter. If the first dependency changes in any way, the cached item will be invalidated.  \n  \n [!code-cs[CacheDependency Constructor8#1](~/add/codesnippet/csharp/b4a521ab-493f-41c7-94fa-_1.aspx)]\n [!code-vb[CacheDependency Constructor8#1](~/add/codesnippet/visualbasic/b4a521ab-493f-41c7-94fa-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Una matrice di percorsi (file o directory) quale dipende l&quot;oggetto memorizzato nella cache. Quando una di queste modifiche alle risorse, l&quot;oggetto memorizzato nella cache diventa obsoleto e viene rimosso dalla cache."
    - id: cachekeys
      type: System.String[]
      description: "Matrice delle chiavi della cache che il nuovo oggetto consente di monitorare le modifiche. Quando una di queste modifiche delle chiavi di cache, l&quot;oggetto associato all&quot;oggetto di dipendenza diventa obsoleto e viene rimosso dalla cache."
    - id: dependency
      type: System.Web.Caching.CacheDependency
      description: "Un&quot;altra istanza di <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe cui dipende questa istanza."
    - id: start
      type: System.DateTime
      description: "L&quot;ora in cui si desidera controllare la data ultima modifica di oggetti nelle matrici e <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> oggetto."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.DependencyDispose
  id: DependencyDispose
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: DependencyDispose()
  nameWithType: CacheDependency.DependencyDispose()
  fullName: System.Web.Caching.CacheDependency.DependencyDispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Rilascia le risorse usate dal <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe e le classi che derivano da <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref>."
  remarks: "Qualsiasi classe che deriva dalla <xref:System.Web.Caching.CacheDependency>classe è necessaria implementare questo metodo per pulire le risorse ha utilizzato la classe derivata.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class and overrides the DependencyDispose method. When this method is called, it sets a custom Boolean property named `Disposed` to `true`.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_7_1.vb)]"
  syntax:
    content: protected virtual void DependencyDispose ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.DependencyDispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.Dispose
  id: Dispose
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: Dispose()
  nameWithType: CacheDependency.Dispose()
  fullName: System.Web.Caching.CacheDependency.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Rilascia le risorse usate dal <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> oggetto."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.FinishInit
  id: FinishInit
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: FinishInit()
  nameWithType: CacheDependency.FinishInit()
  fullName: System.Web.Caching.CacheDependency.FinishInit()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Completa l&quot;inizializzazione del <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> oggetto."
  remarks: "Il metodo FinishInit completa l&quot;inizializzazione del <xref:System.Web.Caching.CacheDependency>oggetto.</xref:System.Web.Caching.CacheDependency> Questo metodo viene chiamato da tutti i <xref:System.Web.Caching.CacheDependency>costruttori.</xref:System.Web.Caching.CacheDependency>"
  syntax:
    content: protected void FinishInit ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.FinishInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.GetFileDependencies
  id: GetFileDependencies
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: GetFileDependencies()
  nameWithType: CacheDependency.GetFileDependencies()
  fullName: System.Web.Caching.CacheDependency.GetFileDependencies()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Ottiene le dipendenze del file."
  syntax:
    content: public virtual string[] GetFileDependencies ();
    parameters: []
    return:
      type: System.String[]
      description: "Dipendenze del file."
  overload: System.Web.Caching.CacheDependency.GetFileDependencies*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.GetUniqueID
  id: GetUniqueID
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: GetUniqueID()
  nameWithType: CacheDependency.GetUniqueID()
  fullName: System.Web.Caching.CacheDependency.GetUniqueID()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Recupera un identificatore univoco per un <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> oggetto."
  remarks: "Questo metodo può essere particolarmente utile per tenere traccia di più istanze di <xref:System.Web.Caching.CacheDependency>classe associata a un elemento o di un&quot;applicazione.</xref:System.Web.Caching.CacheDependency>       L&quot;identificatore è una combinazione di nome file (per una dipendenza di file) o il nome della chiave (per una relazione di chiave di cache) e una stringa che assegna da questo metodo per la dipendenza. Nelle classi che derivano dal <xref:System.Web.Caching.CacheDependency>(classe), è possibile eseguire l&quot;override del metodo per personalizzare come viene generato l&quot;identificatore univoco.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example creates an <xref:System.Web.Caching.AggregateCacheDependency> object, named `aggDep`, with two <xref:System.Web.Caching.CacheDependency> objects in its array. Once `aggDep` is instantiated, the code calls the GetUniqueID method to generate a unique identifier for both dependencies that `aggDep` contains and displays the identifiers to the containing page. An item is then added to the <xref:System.Web.Caching.Cache>, using the <xref:System.Web.Caching.Cache.Insert%2A> method, with `aggDep` as a dependency.  \n  \n [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/add/codesnippet/visualbasic/m-system.web.caching.cac_1_1.aspx)]"
  syntax:
    content: public virtual string GetUniqueID ();
    parameters: []
    return:
      type: System.String
      description: "Identificatore univoco per il <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> oggetto."
  overload: System.Web.Caching.CacheDependency.GetUniqueID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.HasChanged
  id: HasChanged
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
  fullName: System.Web.Caching.CacheDependency.HasChanged
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> oggetto è stato modificato."
  remarks: "È possibile aggiungere un elemento a <xref:System.Web.Caching.Cache>con un <xref:System.Web.Caching.CacheDependency>.</xref:System.Web.Caching.CacheDependency> un&quot;applicazione ASP.NET</xref:System.Web.Caching.Cache> Quando il <xref:System.Web.Caching.CacheDependency>Cambia, l&quot;elemento aggiunto al <xref:System.Web.Caching.Cache>viene invalidato e rimosso dalla cache.</xref:System.Web.Caching.Cache> </xref:System.Web.Caching.CacheDependency> È possibile utilizzare questa proprietà per determinare se un <xref:System.Web.Caching.CacheDependency>è stato modificato e ricreare l&quot;elemento nella <xref:System.Web.Caching.Cache>se che si è verificato.</xref:System.Web.Caching.Cache> </xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example demonstrates using the HasChanged property to determine whether a <xref:System.Web.Caching.CacheDependency> changed since the previous request for an item in the <xref:System.Web.Caching.Cache>. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/p-system.web.caching.cac_1_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/p-system.web.caching.cac_1_1.aspx)]"
  syntax:
    content: public bool HasChanged { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> oggetto è stato modificato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Caching.CacheDependency.HasChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  id: NotifyDependencyChanged(System.Object,System.EventArgs)
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: NotifyDependencyChanged(Object,EventArgs)
  nameWithType: CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  fullName: System.Web.Caching.CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Notifica la base <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> oggetto che la dipendenza è rappresentata da un oggetto derivato <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> classe è stata modificata."
  remarks: "Qualsiasi classe che deriva dalla <xref:System.Web.Caching.CacheDependency>classe deve implementare questo metodo.</xref:System.Web.Caching.CacheDependency>       Quando si deriva dal <xref:System.Web.Caching.CacheDependency>(classe), utilizzare la funzionalità di base di qualsiasi metodo o proprietà non sottoposti a override.</xref:System.Web.Caching.CacheDependency> Quando si crea un&quot;istanza della classe derivata, rappresenta i file, chiavi della cache, le tabelle del database o altri oggetti che si desidera impostare un elemento memorizzato nella cache dipendente da. Quando viene modificato un elemento dipendenza, questo metodo notifica la funzionalità di base del <xref:System.Web.Caching.CacheDependency>classe che l&quot;elemento è stato modificato, in modo che i valori del <xref:System.Web.Caching.CacheDependency.HasChanged%2A>e <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A>le proprietà possono essere aggiornate.</xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> </xref:System.Web.Caching.CacheDependency.HasChanged%2A> </xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class. It creates a public method, `ResetDependency`, that uses the <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> method to change the time at which the dependency was modified, and then calls the NotifyDependencyChanged method.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/0410edfc-9961-4a15-80eb-_1.vb)]"
  syntax:
    content: protected void NotifyDependencyChanged (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "L&quot;origine dell&quot;evento."
    - id: e
      type: System.EventArgs
      description: "Un &lt;xref:System.EventArgs?displayProperty=fullName&gt; oggetto che contiene i dati dell&quot;evento."
  overload: System.Web.Caching.CacheDependency.NotifyDependencyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  id: SetUtcLastModified(System.DateTime)
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: SetUtcLastModified(DateTime)
  nameWithType: CacheDependency.SetUtcLastModified(DateTime)
  fullName: System.Web.Caching.CacheDependency.SetUtcLastModified(DateTime)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Indica l&quot;ora dell&quot;ultima modifica una dipendenza."
  remarks: ''
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class. It creates a public method, `ResetDependency`, that uses the SetUtcLastModified method to change the time at which the dependency was modified, and then calls the <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> method.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_6_1.vb)]"
  syntax:
    content: protected void SetUtcLastModified (DateTime utcLastModified);
    parameters:
    - id: utcLastModified
      type: System.DateTime
      description: "Ora dell&quot;ultima modifica della dipendenza."
  overload: System.Web.Caching.CacheDependency.SetUtcLastModified*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.UtcLastModified
  id: UtcLastModified
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
  fullName: System.Web.Caching.CacheDependency.UtcLastModified
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Ottiene l&quot;ora dell&quot;ultima modifica quando la dipendenza."
  remarks: "Questa proprietà è misurata in Coordinated Universal Time (UTC) (noto anche come Greenwich Mean Time)."
  example:
  - "The following code example uses the <xref:System.Web.Caching.AggregateCacheDependency> class to add an item, with two <xref:System.Web.Caching.CacheDependency> object dependencies, to the <xref:System.Web.Caching.Cache>. When a request for the <xref:System.Web.Caching.Cache> item is made, the code checks whether the item is in the <xref:System.Web.Caching.Cache>. If it is, the UtcLastModified property is converted to a string and displayed on the page. If it is not, the item and its two dependencies are created and added to the <xref:System.Web.Caching.Cache>.  \n  \n [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/add/codesnippet/visualbasic/p-system.web.caching.cac_0_1.aspx)]"
  syntax:
    content: public DateTime UtcLastModified { get; }
    return:
      type: System.DateTime
      description: "L&quot;ora dell&quot;ultima modifica quando la dipendenza."
  overload: System.Web.Caching.CacheDependency.UtcLastModified*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Caching.CacheDependency.#ctor
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency()
  nameWithType: CacheDependency.CacheDependency()
  fullName: System.Web.Caching.CacheDependency.CacheDependency()
- uid: System.Web.Caching.CacheDependency.#ctor(System.String)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String)
  nameWithType: CacheDependency.CacheDependency(String)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[])
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[])
  nameWithType: CacheDependency.CacheDependency(String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String,DateTime)
  nameWithType: CacheDependency.CacheDependency(String,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String,DateTime)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],DateTime)
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[])
  nameWithType: CacheDependency.CacheDependency(String[],String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[])
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],DateTime)
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],CacheDependency)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency)
- uid: System.Web.Caching.CacheDependency
  parent: System.Web.Caching
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],CacheDependency,DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
- uid: System.Web.Caching.CacheDependency.DependencyDispose
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: DependencyDispose()
  nameWithType: CacheDependency.DependencyDispose()
  fullName: System.Web.Caching.CacheDependency.DependencyDispose()
- uid: System.Web.Caching.CacheDependency.Dispose
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: Dispose()
  nameWithType: CacheDependency.Dispose()
  fullName: System.Web.Caching.CacheDependency.Dispose()
- uid: System.Web.Caching.CacheDependency.FinishInit
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: FinishInit()
  nameWithType: CacheDependency.FinishInit()
  fullName: System.Web.Caching.CacheDependency.FinishInit()
- uid: System.Web.Caching.CacheDependency.GetFileDependencies
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetFileDependencies()
  nameWithType: CacheDependency.GetFileDependencies()
  fullName: System.Web.Caching.CacheDependency.GetFileDependencies()
- uid: System.Web.Caching.CacheDependency.GetUniqueID
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetUniqueID()
  nameWithType: CacheDependency.GetUniqueID()
  fullName: System.Web.Caching.CacheDependency.GetUniqueID()
- uid: System.Web.Caching.CacheDependency.HasChanged
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
  fullName: System.Web.Caching.CacheDependency.HasChanged
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: NotifyDependencyChanged(Object,EventArgs)
  nameWithType: CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  fullName: System.Web.Caching.CacheDependency.NotifyDependencyChanged(Object,EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetUtcLastModified(DateTime)
  nameWithType: CacheDependency.SetUtcLastModified(DateTime)
  fullName: System.Web.Caching.CacheDependency.SetUtcLastModified(DateTime)
- uid: System.Web.Caching.CacheDependency.UtcLastModified
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
  fullName: System.Web.Caching.CacheDependency.UtcLastModified
- uid: System.Web.Caching.CacheDependency.#ctor*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency.CacheDependency
- uid: System.Web.Caching.CacheDependency.DependencyDispose*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: DependencyDispose
  nameWithType: CacheDependency.DependencyDispose
- uid: System.Web.Caching.CacheDependency.Dispose*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: Dispose
  nameWithType: CacheDependency.Dispose
- uid: System.Web.Caching.CacheDependency.FinishInit*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: FinishInit
  nameWithType: CacheDependency.FinishInit
- uid: System.Web.Caching.CacheDependency.GetFileDependencies*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetFileDependencies
  nameWithType: CacheDependency.GetFileDependencies
- uid: System.Web.Caching.CacheDependency.GetUniqueID*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetUniqueID
  nameWithType: CacheDependency.GetUniqueID
- uid: System.Web.Caching.CacheDependency.HasChanged*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: NotifyDependencyChanged
  nameWithType: CacheDependency.NotifyDependencyChanged
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetUtcLastModified
  nameWithType: CacheDependency.SetUtcLastModified
- uid: System.Web.Caching.CacheDependency.UtcLastModified*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
