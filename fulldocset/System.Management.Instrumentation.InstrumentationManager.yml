### YamlMime:ManagedReference
items:
- uid: System.Management.Instrumentation.InstrumentationManager
  id: InstrumentationManager
  children:
  - System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  - System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  - System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  - System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  - System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  - System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  langs:
  - csharp
  name: InstrumentationManager
  nameWithType: InstrumentationManager
  fullName: System.Management.Instrumentation.InstrumentationManager
  type: Class
  summary: "Fornisce metodi che gestiscono il ciclo di vita e il modello utilizzato per i provider separati.       Nota: le librerie .NET di WMI sono ormai considerate in stato finale e nessuna ulteriore sviluppo, miglioramenti o gli aggiornamenti saranno disponibili per problemi correlati, non correlato alla sicurezza che interessano queste librerie. Il [API MI](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) deve essere utilizzato per lo sviluppo di nuovo."
  remarks: "Provider disaccoppiati sono ospitati da un&quot;applicazione. Due metodi sono utilizzabile dall&quot;applicazione per rendere disponibili le istanze delle classi WMI: pubblicare o revocare o il metodo di callback. Usa il metodo di callback di <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>e <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>metodi.</xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> </xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>       Nel modello di pubblicazione/revoca, nell&quot;infrastruttura WMI fornisce un comportamento predefinito per molti dei metodi che è necessario scrivere manualmente nel metodo di callback. Queste includono l&quot;enumerazione e associare i metodi. In questo modello, l&quot;applicazione crea istanze e li pubblica. L&quot;applicazione è responsabile di garantire che siano rispettate le proprietà chiave delle classi. L&quot;applicazione è inoltre responsabile per l&quot;eliminazione di istanze.       Nel modello di callback, l&quot;infrastruttura WMI prevede l&quot;applicazione di metodi che gestiscono l&quot;enumerazione, associazione e qualsiasi altro metodo necessario per implementare la funzionalità del provider. Chiama l&quot;applicazione per questa funzionalità e ha esito negativo se non esiste o non è implementata correttamente. L&quot;applicazione registra il tipo delle classi WMI con l&quot;infrastruttura chiamando <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>e indica che le classi WMI esposte chiamando <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> </xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>"
  example:
  - "The following example demonstrates how to use the publish/revoke model. Two instances of the router class are created and published. They are later revoked.  \n  \n```  \npublic class Sample_InstanceProvider  \n{  \npublic int Main (string[] args)   \n{  \nRouter r_one = new Router ();  \nr_one.Name = \"one\";  \nInstrumentationManager.Publish(r_one);  \nRouter r_two = new Router ();  \nr_two.Name = \"two\";  \nInstrumentationManager.Publish(r_two);  \n// ....  \nInstrumentationManager.Revoke(r_one);  \nInstrumentationManager.Revoke(r_two);  \nreturn 0;  \n}  \n}  \n```  \n  \n In the next example, the callback method of registration is used to expose the RouterNew class.  \n  \n```  \npublic int MainNew(string[] args)   \n{  \n    InstrumentationManager.RegisterType(typeof(RouterNew));  \n    // ....  \n    InstrumentationManager.UnRegisterType(typeof(RouterNew));  \n    return 0;  \n}  \n```"
  syntax:
    content: public static class InstrumentationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  id: Publish(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: Publish(Object)
  nameWithType: InstrumentationManager.Publish(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Publish(Object)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Crea un&quot;istanza di un provider disponibile all&quot;interno dell&quot;infrastruttura WMI."
  syntax:
    content: public static void Publish (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Un&quot;istanza della classe che implementa il provider da pubblicare."
  overload: System.Management.Instrumentation.InstrumentationManager.Publish*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  id: RegisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: RegisterAssembly(Assembly)
  nameWithType: InstrumentationManager.RegisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(Assembly)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Registra un assembly con l&quot;infrastruttura WMI."
  syntax:
    content: public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);
    parameters:
    - id: managementAssembly
      type: System.Reflection.Assembly
      description: "L&quot;assembly da registrare."
  overload: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  id: RegisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: RegisterType(Type)
  nameWithType: InstrumentationManager.RegisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterType(Type)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Registra una classe con l&quot;infrastruttura WMI."
  remarks: ''
  example:
  - "```  \nstatic int Main(string[] args)  \n{  \n   InstrumentationManager.RegisterType(typeof(MySampleProvider));  \n   return 0;  \n}  \n```"
  syntax:
    content: public static void RegisterType (Type managementType);
    parameters:
    - id: managementType
      type: System.Type
      description: "Il tipo della classe."
  overload: System.Management.Instrumentation.InstrumentationManager.RegisterType*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  id: Revoke(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: Revoke(Object)
  nameWithType: InstrumentationManager.Revoke(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Revoke(Object)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Accetta un&quot;istanza di un provider disponibile e lo rende disponibile all&quot;interno dell&quot;infrastruttura WMI."
  syntax:
    content: public static void Revoke (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Un&quot;istanza della classe che implementa il provider da revocare."
  overload: System.Management.Instrumentation.InstrumentationManager.Revoke*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  id: UnregisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: UnregisterAssembly(Assembly)
  nameWithType: InstrumentationManager.UnregisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(Assembly)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Annulla la registrazione di un assembly attualmente registrato con l&quot;infrastruttura WMI."
  syntax:
    content: public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);
    parameters:
    - id: managementAssembly
      type: System.Reflection.Assembly
      description: "Assembly registrato per annullare la registrazione."
  overload: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  id: UnregisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: UnregisterType(Type)
  nameWithType: InstrumentationManager.UnregisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterType(Type)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "Annulla la registrazione di una classe registrata con l&quot;infrastruttura WMI."
  syntax:
    content: public static void UnregisterType (Type managementType);
    parameters:
    - id: managementType
      type: System.Type
      description: "Il tipo registrato per annullare la registrazione."
  overload: System.Management.Instrumentation.InstrumentationManager.UnregisterType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Publish(Object)
  nameWithType: InstrumentationManager.Publish(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Publish(Object)
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterAssembly(Assembly)
  nameWithType: InstrumentationManager.RegisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterType(Type)
  nameWithType: InstrumentationManager.RegisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterType(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Revoke(Object)
  nameWithType: InstrumentationManager.Revoke(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Revoke(Object)
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterAssembly(Assembly)
  nameWithType: InstrumentationManager.UnregisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(Assembly)
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterType(Type)
  nameWithType: InstrumentationManager.UnregisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterType(Type)
- uid: System.Management.Instrumentation.InstrumentationManager.Publish*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Publish
  nameWithType: InstrumentationManager.Publish
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterAssembly
  nameWithType: InstrumentationManager.RegisterAssembly
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterType
  nameWithType: InstrumentationManager.RegisterType
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Revoke
  nameWithType: InstrumentationManager.Revoke
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterAssembly
  nameWithType: InstrumentationManager.UnregisterAssembly
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterType
  nameWithType: InstrumentationManager.UnregisterType
