### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ToBase64Transform
  id: ToBase64Transform
  children:
  - System.Security.Cryptography.ToBase64Transform.#ctor
  - System.Security.Cryptography.ToBase64Transform.CanReuseTransform
  - System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks
  - System.Security.Cryptography.ToBase64Transform.Clear
  - System.Security.Cryptography.ToBase64Transform.Dispose
  - System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)
  - System.Security.Cryptography.ToBase64Transform.Finalize
  - System.Security.Cryptography.ToBase64Transform.InputBlockSize
  - System.Security.Cryptography.ToBase64Transform.OutputBlockSize
  - System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: ToBase64Transform
  nameWithType: ToBase64Transform
  fullName: System.Security.Cryptography.ToBase64Transform
  type: Class
  summary: "Converte un <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> in base 64."
  remarks: "Content-Transfer-Encoding base 64 rappresenta sequenze di bit arbitrari in un formato che non è leggibile."
  example:
  - "The following code example demonstrates how to use members of the ToBase64Transform class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/csharp/t-system.security.crypto_103_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/visualbasic/t-system.security.crypto_103_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#1](~/add/codesnippet/cpp/t-system.security.crypto_103_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ToBase64Transform : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: ToBase64Transform()
  nameWithType: ToBase64Transform.ToBase64Transform()
  fullName: System.Security.Cryptography.ToBase64Transform.ToBase64Transform()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;> </xref> classe."
  syntax:
    content: public ToBase64Transform ();
    parameters: []
  overload: System.Security.Cryptography.ToBase64Transform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: ToBase64Transform.CanReuseTransform
  fullName: System.Security.Cryptography.ToBase64Transform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene un valore che indica se è possibile riutilizzare la trasformazione corrente."
  remarks: ''
  example:
  - "The following code example demonstrates how to call the CanReuseTransform property to determine if the current transform can be reused. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/csharp/p-system.security.crypto_75_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/visualbasic/p-system.security.crypto_75_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#3](~/add/codesnippet/cpp/p-system.security.crypto_75_1.cpp)]"
  syntax:
    content: public virtual bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ToBase64Transform.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: ToBase64Transform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene un valore che indica se è possano trasformare più blocchi."
  remarks: "Nell&quot;implementazione corrente, un solo blocco può essere trasformato contemporaneamente, pertanto questa proprietà è sempre `false`."
  example:
  - "The following code example demonstrates how to call the CanTransformMultipleBlocks method to verify that multiple blocks can be transformed. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/csharp/p-system.security.crypto_69_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/visualbasic/p-system.security.crypto_69_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#4](~/add/codesnippet/cpp/p-system.security.crypto_69_1.cpp)]"
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.Clear
  id: Clear
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: Clear()
  nameWithType: ToBase64Transform.Clear()
  fullName: System.Security.Cryptography.ToBase64Transform.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rilascia tutte le risorse usate dal <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;> </xref>."
  remarks: "Questo metodo è una semplice chiamata a <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>       La chiamata `Dispose` le risorse utilizzate da di <xref:System.Security.Cryptography.ToBase64Transform>riallocazione per altri scopi.</xref:System.Security.Cryptography.ToBase64Transform> Per ulteriori informazioni su `Dispose`, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to call the Clear method to free up unused resources by the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/csharp/m-system.security.crypto_100_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/visualbasic/m-system.security.crypto_100_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#7](~/add/codesnippet/cpp/m-system.security.crypto_100_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.ToBase64Transform.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.Dispose
  id: Dispose
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: Dispose()
  nameWithType: ToBase64Transform.Dispose()
  fullName: System.Security.Cryptography.ToBase64Transform.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rilascia tutte le risorse usate dall&quot;istanza corrente del <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;> </xref> classe."
  remarks: "Chiamare `Dispose` quando si è terminato di utilizzare <xref:System.Security.Cryptography.ToBase64Transform>.</xref:System.Security.Cryptography.ToBase64Transform> Il `Dispose` metodo lascia la <xref:System.Security.Cryptography.ToBase64Transform>in uno stato inutilizzabile.</xref:System.Security.Cryptography.ToBase64Transform> Dopo la chiamata `Dispose`, è necessario rilasciare tutti i riferimenti al <xref:System.Security.Cryptography.ToBase64Transform>in modo che il garbage collector può recuperare la memoria che di <xref:System.Security.Cryptography.ToBase64Transform>occupata.</xref:System.Security.Cryptography.ToBase64Transform> </xref:System.Security.Cryptography.ToBase64Transform>       Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md) e [implementazione di un metodo Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Chiamare sempre `Dispose` prima di rilasciare l&quot;ultimo riferimento a <xref:System.Security.Cryptography.ToBase64Transform>.</xref:System.Security.Cryptography.ToBase64Transform> In caso contrario, le risorse non vengono liberate finché il garbage collector chiama la <xref:System.Security.Cryptography.ToBase64Transform>dell&quot;oggetto `Finalize` metodo.</xref:System.Security.Cryptography.ToBase64Transform>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.ToBase64Transform.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ToBase64Transform.Dispose(Boolean)
  fullName: System.Security.Cryptography.ToBase64Transform.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico `Dispose()` (metodo) e `Finalize` metodo. `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il parametro disposing impostato su `true`. `Finalize`richiama `Dispose` con il parametro impostato su `false`.       Quando il `disposing` parametro `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Security.Cryptography.ToBase64Transform>riferimenti.</xref:System.Security.Cryptography.ToBase64Transform> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Security.Cryptography.ToBase64Transform.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.Finalize
  id: Finalize
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: Finalize()
  nameWithType: ToBase64Transform.Finalize()
  fullName: System.Security.Cryptography.ToBase64Transform.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;> </xref>."
  syntax:
    content: ~ToBase64Transform ();
    parameters: []
  overload: System.Security.Cryptography.ToBase64Transform.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: ToBase64Transform.InputBlockSize
  fullName: System.Security.Cryptography.ToBase64Transform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene le dimensioni del blocco di input."
  remarks: "Le dimensioni del blocco di input per questa trasformazione sono 3 byte."
  example:
  - "The following code example demonstrates how to call the InputBlockSize property to retrieve the input block size of the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/csharp/p-system.security.crypto_70_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/visualbasic/p-system.security.crypto_70_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#5](~/add/codesnippet/cpp/p-system.security.crypto_70_1.cpp)]"
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "Le dimensioni dei dati di input in byte del blocco."
  overload: System.Security.Cryptography.ToBase64Transform.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: ToBase64Transform.OutputBlockSize
  fullName: System.Security.Cryptography.ToBase64Transform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene la dimensione del blocco di output."
  remarks: "La dimensione del blocco di output per questa trasformazione è 4 byte."
  example:
  - "The following code example demonstrates how to call the OutputBlockSize property to create a new byte array with the size of the output block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/csharp/p-system.security.crypto_8_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/visualbasic/p-system.security.crypto_8_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#6](~/add/codesnippet/cpp/p-system.security.crypto_8_1.cpp)]"
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "Le dimensioni dei dati di output in byte del blocco."
  overload: System.Security.Cryptography.ToBase64Transform.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Converte l&quot;area specificata della matrice di byte di input in base 64 e copia il risultato nell&quot;area specificata della matrice di byte di output."
  remarks: "La <xref:System.Security.Cryptography.ToBase64Transform>classe è un algoritmo di blocco che elabora blocchi di 3 byte di input e crea i blocchi di output di 4 byte.</xref:System.Security.Cryptography.ToBase64Transform>  Il metodo TransformBlock Trasforma un blocco di input pari a 24 bit in 32 bit di dati di tipo carattere.  È necessario mantenere i limiti di input da 3 byte per i limiti di output a 4 byte per la corrispondenza con la trasformazione del blocco."
  example:
  - "The following code example demonstrates how to call the TransformBlock method to iterate through `inputBytes` transforming by `blockSize`. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/csharp/918bcb0d-40f9-46ec-886b-_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/visualbasic/918bcb0d-40f9-46ec-886b-_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#8](~/add/codesnippet/cpp/918bcb0d-40f9-46ec-886b-_1.cpp)]"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "Input da calcolare in base 64."
    - id: inputOffset
      type: System.Int32
      description: "Offset nella matrice di byte di input dal quale iniziare a utilizzare i dati."
    - id: inputCount
      type: System.Int32
      description: "Il numero di byte nella matrice di byte di input da utilizzare come dati."
    - id: outputBuffer
      type: System.Byte[]
      description: "L&quot;output in cui scrivere il risultato."
    - id: outputOffset
      type: System.Int32
      description: "Offset nella matrice di byte di output da cui iniziare la scrittura dei dati."
    return:
      type: System.Int32
      description: "Il numero di byte scritti."
  overload: System.Security.Cryptography.ToBase64Transform.TransformBlock*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Corrente <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;> </xref> oggetto è già stato eliminato."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Le dimensioni dei dati non sono valida."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> inputBuffer </code> parametro contiene una lunghezza di offset non valida.       - o - <code> inputCount </code> parametro contiene un valore non valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il <code> inputBuffer </code> parametro richiede un numero non negativo."
  platform:
  - net462
- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ToBase64Transform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Converte l&quot;area specificata della matrice di byte specificata in base 64."
  remarks: ''
  example:
  - "The following code example demonstrates how to call the TransformFinalBlock method to transform the final block of data. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/csharp/028d2418-e06c-423a-a777-_1.cs)]\n [!code-vb[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/visualbasic/028d2418-e06c-423a-a777-_1.vb)]\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#9](~/add/codesnippet/cpp/028d2418-e06c-423a-a777-_1.cpp)]"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "Input da convertire in base 64."
    - id: inputOffset
      type: System.Int32
      description: "Offset nella matrice di byte da cui iniziare a utilizzare i dati."
    - id: inputCount
      type: System.Int32
      description: "Il numero di byte nella matrice di byte da usare come dati."
    return:
      type: System.Byte[]
      description: "La conversione di 64 base calcolata."
  overload: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Corrente <xref href=&quot;System.Security.Cryptography.ToBase64Transform&quot;> </xref> oggetto è già stato eliminato."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> inputBuffer </code> parametro contiene una lunghezza di offset non valida.       - o - <code> inputCount </code> parametro contiene un valore non valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il <code> inputBuffer </code> parametro richiede un numero non negativo."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.ToBase64Transform.#ctor
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: ToBase64Transform()
  nameWithType: ToBase64Transform.ToBase64Transform()
  fullName: System.Security.Cryptography.ToBase64Transform.ToBase64Transform()
- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: CanReuseTransform
  nameWithType: ToBase64Transform.CanReuseTransform
  fullName: System.Security.Cryptography.ToBase64Transform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: ToBase64Transform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.ToBase64Transform.Clear
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Clear()
  nameWithType: ToBase64Transform.Clear()
  fullName: System.Security.Cryptography.ToBase64Transform.Clear()
- uid: System.Security.Cryptography.ToBase64Transform.Dispose
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Dispose()
  nameWithType: ToBase64Transform.Dispose()
  fullName: System.Security.Cryptography.ToBase64Transform.Dispose()
- uid: System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ToBase64Transform.Dispose(Boolean)
  fullName: System.Security.Cryptography.ToBase64Transform.Dispose(Boolean)
- uid: System.Security.Cryptography.ToBase64Transform.Finalize
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Finalize()
  nameWithType: ToBase64Transform.Finalize()
  fullName: System.Security.Cryptography.ToBase64Transform.Finalize()
- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: InputBlockSize
  nameWithType: ToBase64Transform.InputBlockSize
  fullName: System.Security.Cryptography.ToBase64Transform.InputBlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: OutputBlockSize
  nameWithType: ToBase64Transform.OutputBlockSize
  fullName: System.Security.Cryptography.ToBase64Transform.OutputBlockSize
- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.ToBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.ToBase64Transform.#ctor*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: ToBase64Transform
  nameWithType: ToBase64Transform.ToBase64Transform
- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: CanReuseTransform
  nameWithType: ToBase64Transform.CanReuseTransform
- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: ToBase64Transform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.ToBase64Transform.Clear*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Clear
  nameWithType: ToBase64Transform.Clear
- uid: System.Security.Cryptography.ToBase64Transform.Dispose*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Dispose
  nameWithType: ToBase64Transform.Dispose
- uid: System.Security.Cryptography.ToBase64Transform.Finalize*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: Finalize
  nameWithType: ToBase64Transform.Finalize
- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: InputBlockSize
  nameWithType: ToBase64Transform.InputBlockSize
- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: OutputBlockSize
  nameWithType: ToBase64Transform.OutputBlockSize
- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: TransformBlock
  nameWithType: ToBase64Transform.TransformBlock
- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock*
  parent: System.Security.Cryptography.ToBase64Transform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: ToBase64Transform.TransformFinalBlock
