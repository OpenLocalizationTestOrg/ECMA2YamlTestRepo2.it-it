### YamlMime:ManagedReference
items:
- uid: System.Web.Util.RequestValidator
  id: RequestValidator
  children:
  - System.Web.Util.RequestValidator.#ctor
  - System.Web.Util.RequestValidator.Current
  - System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  - System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  langs:
  - csharp
  name: RequestValidator
  nameWithType: RequestValidator
  fullName: System.Web.Util.RequestValidator
  type: Class
  summary: "Definisce i metodi di base per la convalida delle richieste personalizzata."
  remarks: "Per impostazione predefinita, ASP.NET non convalida le richieste finché non codice richiede in modo esplicito un valore dalla richiesta. Ad esempio, ASP.NET non convalida i valori di stringa di query fino a quando il codice accede il <xref:System.Web.HttpRequest.QueryString%2A>insieme.</xref:System.Web.HttpRequest.QueryString%2A> Per impostazione predefinita, ASP.NET non convalida alcuni tipi di dati della richiesta, ad esempio i valori del form, i cookie, i nomi dei file che sono stati caricati mediante HTTP e il valore di <xref:System.Web.HttpRequest.RawUrl%2A>proprietà.</xref:System.Web.HttpRequest.RawUrl%2A>       La classe RequestValidator è una classe di base che è possibile implementare per fornire la convalida delle richieste personalizzata. Implementando questa classe, è possibile determinare quando la convalida viene eseguita e il tipo di dati della richiesta per eseguire la convalida.       Per impostazione predefinita, ASP.NET fornisce controlli cross-site scripting (XSS). Tuttavia, è possibile integrare o sostituire la logica di convalida richiesta che viene fornita in ASP.NET tramite la creazione di un&quot;implementazione personalizzata di XSS. Ad esempio, è possibile scrivere un&quot;implementazione di convalida richiesta personalizzata che esegue l&quot;analisi per gli attacchi SQL injection oltre a controllare per attacchi XSS.       Per creare la convalida delle richieste personalizzata, scrivere una classe personalizzata che deriva dalla classe di base RequestValidator. È quindi possibile configurare ASP.NET per utilizzare il validator personalizzato richiesta nel file Web. config a livello di applicazione. È possibile inserire la classe personalizzata nella cartella App_Code, in una libreria di classi compilata nella cartella Bin, o in una libreria di classi compilata nella GAC.      > [!NOTE] > Un solo tipo di convalida personalizzata richiesta può essere configurato per un&quot;applicazione. Non è possibile configurare un tipo di convalida richiesta diverse per singoli percorsi virtuali o le pagine."
  example:
  - "The following example shows how to create a custom request validator that allows only a specific string to be used for query-string values.  \n  \n [!code-cs[System.Web.Util.RequestValidator#1](~/add/codesnippet/csharp/t-system.web.util.reques_1.cs)]\n [!code-vb[System.Web.Util.RequestValidator#1](~/add/codesnippet/visualbasic/t-system.web.util.reques_1.vb)]  \n  \n The following example shows how to configure ASP.NET to use the custom validator in the Web.config file for an application.  \n  \n```  \n<system.web>  \n  <httpRuntime requestValidationType=\"CustomRequestValidation\" />  \n</system.web>  \n```"
  syntax:
    content: public class RequestValidator
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Util.RequestValidator.#ctor
  id: '#ctor'
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: RequestValidator()
  nameWithType: RequestValidator.RequestValidator()
  fullName: System.Web.Util.RequestValidator.RequestValidator()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.Util.RequestValidator&quot;> </xref> classe."
  remarks: "La <xref:System.Web.Util.RequestValidator>classe ha un costruttore predefinito.</xref:System.Web.Util.RequestValidator> Quando viene inizializzata una nuova istanza della classe, un metodo interno recupera i dettagli di convalida personalizzati dalle informazioni di configurazione dell&quot;applicazione. Cui sono contenuti i dettagli di configurazione di <xref:System.Web.Configuration.HttpRuntimeSection>sezione.</xref:System.Web.Configuration.HttpRuntimeSection> Per ulteriori informazioni, vedere [elemento httpRuntime (Schema delle impostazioni ASP.NET)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369) e <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A>attributo.</xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A>       Durante l&quot;inizializzazione, una singola istanza del <xref:System.Web.Util.RequestValidator>classe viene creata e viene mantenuto un riferimento all&quot;istanza di <xref:System.Web.Util.RequestValidator.Current%2A>proprietà.</xref:System.Web.Util.RequestValidator.Current%2A> </xref:System.Web.Util.RequestValidator> ASP.NET non crea una nuova istanza di convalida richiesta per ogni richiesta. Pertanto, le implementazioni personalizzate della <xref:System.Web.Util.RequestValidator>classe deve essere thread-safe.</xref:System.Web.Util.RequestValidator>"
  syntax:
    content: public RequestValidator ();
    parameters: []
  overload: System.Web.Util.RequestValidator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Util.RequestValidator.Current
  id: Current
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: Current
  nameWithType: RequestValidator.Current
  fullName: System.Web.Util.RequestValidator.Current
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: "Ottiene o imposta un riferimento all&quot;oggetto corrente <xref href=&quot;System.Web.Util.RequestValidator&quot;> </xref> istanza che verrà utilizzato in un&quot;applicazione."
  remarks: "La proprietà corrente mantiene un riferimento all&quot;istanza singola consentito di <xref:System.Web.Util.RequestValidator>classe.</xref:System.Web.Util.RequestValidator> Se non esiste alcuna istanza, viene creato uno nuovo. Se esiste già un&quot;istanza, viene restituita l&quot;istanza corrente.       Durante l&quot;inizializzazione, una singola istanza di <xref:System.Web.Util.RequestValidator>viene creata una classe e un riferimento all&quot;istanza viene reso disponibile nella proprietà corrente.</xref:System.Web.Util.RequestValidator> ASP.NET non crea una nuova istanza di convalida richiesta per ogni richiesta. Pertanto, le implementazioni personalizzate della <xref:System.Web.Util.RequestValidator>classe deve essere thread-safe.</xref:System.Web.Util.RequestValidator>      > [!NOTE] > Corrente la proprietà non è thread-safe, mentre la proprietà è l&quot;impostazione di un riferimento alla classe corrente <xref:System.Web.Util.RequestValidator>classe.</xref:System.Web.Util.RequestValidator>"
  syntax:
    content: public static System.Web.Util.RequestValidator Current { get; set; }
    return:
      type: System.Web.Util.RequestValidator
      description: "Un&quot;istanza di <xref href=&quot;System.Web.Util.RequestValidator&quot;> </xref> classe."
  overload: System.Web.Util.RequestValidator.Current*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "La proprietà è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  id: InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  nameWithType: RequestValidator.InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  fullName: System.Web.Util.RequestValidator.InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: "Fornisce un metodo pubblico che chiama il metodo protetto <xref:System.Web.Util.RequestValidator.IsValidRequestString*>metodo per convalidare i dati della richiesta HTTP.</xref:System.Web.Util.RequestValidator.IsValidRequestString*>"
  remarks: "Il metodo InvokeIsValidRequestString fornisce l&quot;accesso pubblico alle protetto <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A>metodo.</xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> Ciò consente di creare una classe wrapper personalizzata per la <xref:System.Web.Util.RequestValidator>classe e chiamare il <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A>metodo senza dover ereditare dalla <xref:System.Web.Util.RequestValidator>classe.</xref:System.Web.Util.RequestValidator> </xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> </xref:System.Web.Util.RequestValidator>       Per informazioni sulla convalida della richiesta, vedere <xref:System.Web.UnvalidatedRequestValues>.</xref:System.Web.UnvalidatedRequestValues>"
  syntax:
    content: public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "Il contesto HTTP della richiesta."
    - id: value
      type: System.String
      description: "I dati della richiesta HTTP da convalidare."
    - id: requestValidationSource
      type: System.Web.Util.RequestValidationSource
      description: "Enumerazione che rappresenta l&quot;origine dei dati di richiesta in fase di convalida. Di seguito sono riportati i valori possibili per l&quot;enumerazione:-<xref uid=&quot;langword_csharp_QueryString&quot; name=&quot;QueryString&quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_Form &quot; name=&quot;Form &quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_Cookies&quot; name=&quot;Cookies&quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_Files&quot; name=&quot;Files&quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_Path&quot; name=&quot;Path&quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_PathInfo&quot; name=&quot;PathInfo&quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_Headers&quot; name=&quot;Headers&quot; href=&quot;&quot;></xref>"
    - id: collectionKey
      type: System.String
      description: "(Facoltativo) La chiave nell&quot;insieme di richieste dell&quot;elemento da convalidare. Questo parametro viene utilizzato se i dati da convalidare viene ottenuti da una raccolta. Se i dati da convalidare non sono disponibile da una raccolta, questo parametro può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: validationFailureIndex
      type: System.Int32
      description: "Quando termina, questo metodo indica il punto iniziale in base zero del testo problematico o non valido nella raccolta richiesta. Questo parametro viene passato non inizializzato."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la stringa da convalidare non contenga caratteri non codificati che può essere utilizzati in un attacco script dannoso. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Util.RequestValidator.InvokeIsValidRequestString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  id: IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  nameWithType: RequestValidator.IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  fullName: System.Web.Util.RequestValidator.IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: "Convalida una stringa che contiene i dati della richiesta HTTP."
  remarks: "Implementare questo metodo per eseguire una convalida personalizzata dei dati di richiesta. Il comportamento di base del metodo IsValidRequestString è simile a quello che ASP.NET implementa internamente per controllare le stringhe pericolose nella convalida di script tra siti. Per ulteriori informazioni, vedere [procedura: impedire Cross-Site Scripting in ASP.NET](http://go.microsoft.com/fwlink/?LinkID=178708).       Se la logica di convalida personalizzata rileva un errore, questo metodo deve restituire `false` e specificare un valore in `validationFailureIndex` per indicare il punto iniziale del testo che ha causato l&quot;errore. Il valore in `validationFailureIndex` deve essere 0 o un numero intero positivo.       La logica di un controllo di convalida richiesta procede nel modo seguente: - il <xref:System.Web.HttpRequest>classe esegue un controllo di rimozione di caratteri null ai dati in arrivo.</xref:System.Web.HttpRequest>      -La <xref:System.Web.HttpRequest>classe chiama il metodo IsValidRequestString (l&quot;implementazione predefinita del metodo di base) o una versione derivata del metodo chiamato.</xref:System.Web.HttpRequest>      -Se il metodo IsValidRequestString restituisce `false` per indicare un errore di convalida, ASP.NET costruisce una stringa di errore (se necessario) e genera un <xref:System.Web.HttpRequestValidationException>eccezione.</xref:System.Web.HttpRequestValidationException>"
  syntax:
    content: protected virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "Il contesto della richiesta corrente."
    - id: value
      type: System.String
      description: "I dati della richiesta HTTP da convalidare."
    - id: requestValidationSource
      type: System.Web.Util.RequestValidationSource
      description: "Enumerazione che rappresenta l&quot;origine dei dati di richiesta in fase di convalida. Di seguito sono indicati i valori possibili per l&quot;enumerazione:<xref uid=&quot;langword_csharp_QueryString&quot; name=&quot;QueryString&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_Form &quot; name=&quot;Form &quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_Cookies&quot; name=&quot;Cookies&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_Files&quot; name=&quot;Files&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_RawUrl&quot; name=&quot;RawUrl&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_Path&quot; name=&quot;Path&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_PathInfo&quot; name=&quot;PathInfo&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_Headers&quot; name=&quot;Headers&quot; href=&quot;&quot;></xref>"
    - id: collectionKey
      type: System.String
      description: "La chiave nell&quot;insieme di richieste dell&quot;elemento da convalidare. Questo parametro è facoltativo. Questo parametro viene utilizzato se i dati da convalidare viene ottenuti da una raccolta. Se i dati da convalidare non sono una raccolta, `collectionKey` può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: validationFailureIndex
      type: System.Int32
      description: "Quando termina, questo metodo indica il punto iniziale in base zero del testo problematico o non valido nella raccolta richiesta. Questo parametro viene passato non inizializzato."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la stringa da convalidare è valida. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Util.RequestValidator.IsValidRequestString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.Util.RequestValidator.#ctor
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: RequestValidator()
  nameWithType: RequestValidator.RequestValidator()
  fullName: System.Web.Util.RequestValidator.RequestValidator()
- uid: System.Web.Util.RequestValidator.Current
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: Current
  nameWithType: RequestValidator.Current
  fullName: System.Web.Util.RequestValidator.Current
- uid: System.Web.Util.RequestValidator
  parent: System.Web.Util
  isExternal: false
  name: RequestValidator
  nameWithType: RequestValidator
  fullName: System.Web.Util.RequestValidator
- uid: System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  nameWithType: RequestValidator.InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  fullName: System.Web.Util.RequestValidator.InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Util.RequestValidationSource
  parent: System.Web.Util
  isExternal: false
  name: RequestValidationSource
  nameWithType: RequestValidationSource
  fullName: System.Web.Util.RequestValidationSource
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  nameWithType: RequestValidator.IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  fullName: System.Web.Util.RequestValidator.IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
- uid: System.Web.Util.RequestValidator.#ctor*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: RequestValidator
  nameWithType: RequestValidator.RequestValidator
- uid: System.Web.Util.RequestValidator.Current*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: Current
  nameWithType: RequestValidator.Current
- uid: System.Web.Util.RequestValidator.InvokeIsValidRequestString*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: InvokeIsValidRequestString
  nameWithType: RequestValidator.InvokeIsValidRequestString
- uid: System.Web.Util.RequestValidator.IsValidRequestString*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: IsValidRequestString
  nameWithType: RequestValidator.IsValidRequestString
