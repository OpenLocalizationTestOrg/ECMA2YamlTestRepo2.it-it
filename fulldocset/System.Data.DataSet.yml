### YamlMime:ManagedReference
items:
- uid: System.Data.DataSet
  id: DataSet
  children:
  - System.Data.DataSet.#ctor
  - System.Data.DataSet.#ctor(System.String)
  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  - System.Data.DataSet.AcceptChanges
  - System.Data.DataSet.BeginInit
  - System.Data.DataSet.CaseSensitive
  - System.Data.DataSet.Clear
  - System.Data.DataSet.Clone
  - System.Data.DataSet.Copy
  - System.Data.DataSet.CreateDataReader
  - System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  - System.Data.DataSet.DataSetName
  - System.Data.DataSet.DefaultViewManager
  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  - System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.EndInit
  - System.Data.DataSet.EnforceConstraints
  - System.Data.DataSet.ExtendedProperties
  - System.Data.DataSet.GetChanges
  - System.Data.DataSet.GetChanges(System.Data.DataRowState)
  - System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  - System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.GetSchemaSerializable
  - System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.GetXml
  - System.Data.DataSet.GetXmlSchema
  - System.Data.DataSet.HasChanges
  - System.Data.DataSet.HasChanges(System.Data.DataRowState)
  - System.Data.DataSet.HasErrors
  - System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  - System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  - System.Data.DataSet.Initialized
  - System.Data.DataSet.InitializeDerivedDataSet
  - System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataSet.IsInitialized
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  - System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  - System.Data.DataSet.Locale
  - System.Data.DataSet.Merge(System.Data.DataRow[])
  - System.Data.DataSet.Merge(System.Data.DataSet)
  - System.Data.DataSet.Merge(System.Data.DataTable)
  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  - System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataSet.MergeFailed
  - System.Data.DataSet.Namespace
  - System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  - System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  - System.Data.DataSet.Prefix
  - System.Data.DataSet.RaisePropertyChanging(System.String)
  - System.Data.DataSet.ReadXml(System.IO.Stream)
  - System.Data.DataSet.ReadXml(System.IO.TextReader)
  - System.Data.DataSet.ReadXml(System.String)
  - System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  - System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  - System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  - System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  - System.Data.DataSet.ReadXmlSchema(System.String)
  - System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  - System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  - System.Data.DataSet.RejectChanges
  - System.Data.DataSet.Relations
  - System.Data.DataSet.RemotingFormat
  - System.Data.DataSet.Reset
  - System.Data.DataSet.SchemaSerializationMode
  - System.Data.DataSet.ShouldSerializeRelations
  - System.Data.DataSet.ShouldSerializeTables
  - System.Data.DataSet.Site
  - System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  - System.Data.DataSet.System#ComponentModel#IListSource#GetList
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - System.Data.DataSet.Tables
  - System.Data.DataSet.WriteXml(System.IO.Stream)
  - System.Data.DataSet.WriteXml(System.IO.TextWriter)
  - System.Data.DataSet.WriteXml(System.String)
  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  - System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  - System.Data.DataSet.WriteXmlSchema(System.String)
  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  - System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  - System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  langs:
  - csharp
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
  type: Class
  summary: "Rappresenta una cache in memoria dei dati."
  remarks: "Il set di dati, ovvero una cache in memoria dei dati recuperati da un&quot;origine dati, è un componente fondamentale dell&quot;architettura ADO.NET. Il set di dati è costituita da una raccolta di <xref:System.Data.DataTable>gli oggetti che è possibile correlare reciprocamente con <xref:System.Data.DataRelation>oggetti.</xref:System.Data.DataRelation> </xref:System.Data.DataTable> È inoltre possibile applicare l&quot;integrità dei dati nel set di dati utilizzando il <xref:System.Data.UniqueConstraint>e <xref:System.Data.ForeignKeyConstraint>oggetti.</xref:System.Data.ForeignKeyConstraint> </xref:System.Data.UniqueConstraint> Per ulteriori informazioni sull&quot;utilizzo di oggetti set di dati, vedere [DataSet, DataTable e DataView](~/add/includes/ajax-current-ext-md.md).       Mentre <xref:System.Data.DataTable>gli oggetti contengono i dati, il <xref:System.Data.DataRelationCollection>consente di spostarsi la gerarchia delle tabelle.</xref:System.Data.DataRelationCollection> </xref:System.Data.DataTable> Le tabelle sono contenute in un <xref:System.Data.DataTableCollection>si accede tramite il <xref:System.Data.DataSet.Tables%2A>proprietà.</xref:System.Data.DataSet.Tables%2A> </xref:System.Data.DataTableCollection> Quando si accede a <xref:System.Data.DataTable>oggetti, si noti che sono prevedono la distinzione tra maiuscole e minuscole in modo condizionale.</xref:System.Data.DataTable> Ad esempio, se un <xref:System.Data.DataTable>viene denominato &quot;mydatatable&quot; e un altro denominato &quot;Mydatatable&quot;, stringa utilizzata per cercare una delle tabelle verrà applicata la distinzione tra maiuscole e minuscole.</xref:System.Data.DataTable> Tuttavia, se presente &quot;mydatatable&quot; e non &quot;Mydatatable&quot;, la stringa di ricerca viene considerata tra maiuscole e minuscole. Per ulteriori informazioni sull&quot;utilizzo di <xref:System.Data.DataTable>degli oggetti, vedere [creazione di un oggetto DataTable](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataTable>       Un set di dati può leggere e scrivere dati e dello schema come documenti XML. I dati e schema possono essere trasferiti tramite HTTP e utilizzati da qualsiasi applicazione, in qualsiasi piattaforma che è abilitata per XML. È possibile salvare lo schema come schema XML con il <xref:System.Data.DataSet.WriteXmlSchema%2A>(metodo) e di schemi e i dati possono essere salvati utilizzando il <xref:System.Data.DataSet.WriteXml%2A>metodo.</xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.WriteXmlSchema%2A> Per leggere un documento XML che include sia dello schema e dati, utilizzare il <xref:System.Data.DataSet.ReadXml%2A>metodo.</xref:System.Data.DataSet.ReadXml%2A>       In un&quot;implementazione tipica a più livelli, i passaggi per la creazione e aggiornamento di un set di dati e, di conseguenza, l&quot;aggiornamento dei dati originali devono: 1.  Creare e riempire ogni <xref:System.Data.DataTable>in un set di dati con dati provenienti da un&quot;origine dati tramite un <xref:System.Data.Common.DataAdapter>.</xref:System.Data.Common.DataAdapter> </xref:System.Data.DataTable>      2.  Modificare i dati in singoli <xref:System.Data.DataTable>oggetti mediante aggiunta, aggiornamento o eliminazione <xref:System.Data.DataRow>oggetti.</xref:System.Data.DataRow> </xref:System.Data.DataTable>      3.  Richiamare il <xref:System.Data.DataSet.GetChanges%2A>metodo per creare un secondo set di dati che sono presenti solo le modifiche ai dati.</xref:System.Data.DataSet.GetChanges%2A>      4.  Chiamare il <xref:System.Data.Common.DataAdapter.Update%2A>metodo il <xref:System.Data.Common.DataAdapter>, passando il secondo set di dati come argomento.</xref:System.Data.Common.DataAdapter> </xref:System.Data.Common.DataAdapter.Update%2A>      5.  Richiamare il <xref:System.Data.DataSet.Merge%2A>metodo per unire le modifiche del secondo set di dati al primo.</xref:System.Data.DataSet.Merge%2A>      6.  Richiamare il <xref:System.Data.DataSet.AcceptChanges%2A>sul set di dati.</xref:System.Data.DataSet.AcceptChanges%2A> In alternativa, richiamare <xref:System.Data.DataSet.RejectChanges%2A>per annullare le modifiche.</xref:System.Data.DataSet.RejectChanges%2A>      > [!NOTE] > Il set di dati e <xref:System.Data.DataTable>oggetti ereditano <xref:System.ComponentModel.MarshalByValueComponent>e supportano il <xref:System.Runtime.Serialization.ISerializable>interfaccia per la comunicazione remota.</xref:System.Runtime.Serialization.ISerializable> </xref:System.ComponentModel.MarshalByValueComponent> </xref:System.Data.DataTable> Questi sono gli unici oggetti ADO.NET che possono essere eseguita in modalità remota.      > [!NOTE] > Le classi ereditate da set di dati non vengono finalizzate dal garbage collector, perché il finalizzatore è stato eliminato nel set di dati. La classe derivata può chiamare il <xref:System.GC.ReRegisterForFinalize%2A>metodo nel relativo costruttore per consentire la classe di essere finalizzati dal garbage collector.</xref:System.GC.ReRegisterForFinalize%2A>"
  example:
  - "The following example consists of several methods that, combined, create and fill a DataSet from the **Northwind** database.  \n  \n [!code-cs[Classic WebData DataSet Example#1](~/add/codesnippet/csharp/t-system.data.dataset_1.cs)]\n [!code-vb[Classic WebData DataSet Example#1](~/add/codesnippet/visualbasic/t-system.data.dataset_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("DataSetName")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Xml.Serialization.XmlRoot("DataSet")]

      [System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")]

      public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements:
  - System.ComponentModel.IListSource
  - System.ComponentModel.ISupportInitializeNotification
  - System.Runtime.Serialization.ISerializable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.ToString
  platform:
  - net462
- uid: System.Data.DataSet.#ctor
  id: '#ctor'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet()
  nameWithType: DataSet.DataSet()
  fullName: System.Data.DataSet.DataSet()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DataSet&quot;> </xref> classe."
  remarks: "Questa implementazione del <xref:System.Data.DataSet>costruttore non accetta parametri e crea un nome predefinito, &quot;NewDataSet&quot;, per la nuova istanza.</xref:System.Data.DataSet>       Un nome per il <xref:System.Data.DataSet>è necessario per garantire che la rappresentazione XML del <xref:System.Data.DataSet>ha sempre un nome per l&quot;elemento del documento, che è l&quot;elemento di livello più alto di una definizione dello schema.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.  \n  \n [!code-vb[Classic WebData DataSet.DataSet Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_1_1.vb)]"
  syntax:
    content: public DataSet ();
    parameters: []
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(String)
  nameWithType: DataSet.DataSet(String)
  fullName: System.Data.DataSet.DataSet(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di un <xref href=&quot;System.Data.DataSet&quot;> </xref> classe con il nome specificato."
  remarks: "Un nome per il <xref:System.Data.DataSet>è necessario per garantire che la rappresentazione XML del <xref:System.Data.DataSet>ha sempre un nome per l&quot;elemento del documento, che è l&quot;elemento di livello più alto di una definizione di schema.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.  \n  \n [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_0_1.vb)]"
  syntax:
    content: public DataSet (string dataSetName);
    parameters:
    - id: dataSetName
      type: System.String
      description: "Il nome del <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di un <xref href=&quot;System.Data.DataSet&quot;> </xref> classe che dispone di informazioni di serializzazione specificato e il contesto."
  syntax:
    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "I dati necessari per serializzare o deserializzare un oggetto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "L&quot;origine e destinazione di un flusso serializzato specificato."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)'
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSet(SerializationInfo,StreamingContext,Boolean)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DataSet&quot;> </xref> classe."
  syntax:
    content: protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Il <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> oggetto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Il <xref:System.Runtime.Serialization.StreamingContext>oggetto.</xref:System.Runtime.Serialization.StreamingContext>"
    - id: ConstructSchema
      type: System.Boolean
      description: "Valore booleano."
  overload: System.Data.DataSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.AcceptChanges
  id: AcceptChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: AcceptChanges()
  nameWithType: DataSet.AcceptChanges()
  fullName: System.Data.DataSet.AcceptChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Esegue il commit di tutte le modifiche apportate a questo <xref href=&quot;System.Data.DataSet&quot;> </xref> dopo il caricamento o dall&quot;ultima chiamata di AcceptChanges."
  remarks: "Sia il <xref:System.Data.DataRow>e <xref:System.Data.DataTable>classi dispongono di metodi AcceptChanges.</xref:System.Data.DataTable> </xref:System.Data.DataRow> La chiamata <xref:System.Data.DataTable.AcceptChanges%2A>nel <xref:System.Data.DataTable>cause a livello di <xref:System.Data.DataRow.AcceptChanges%2A>metodo per ogni <xref:System.Data.DataRow>da chiamare.</xref:System.Data.DataRow> </xref:System.Data.DataRow.AcceptChanges%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A> Analogamente, la chiamata di AcceptChanges sulle <xref:System.Data.DataSet>fa sì che <xref:System.Data.DataTable.AcceptChanges%2A>venga chiamata per ogni tabella all&quot;interno di <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable.AcceptChanges%2A> </xref:System.Data.DataSet> In questo modo, si dispone di più livelli in cui il metodo può essere richiamato. La chiamata di AcceptChanges del <xref:System.Data.DataSet>consente di richiamare il metodo su tutti gli oggetti subordinati (ad esempio tabelle e righe) con un&quot;unica chiamata.</xref:System.Data.DataSet>       Quando si chiama `AcceptChanges` sul `DataSet`, qualsiasi <xref:System.Data.DataRow>oggetti ancora in modalità di modifica vengono completate correttamente le modifiche apportate.</xref:System.Data.DataRow> Cambia anche la proprietà <xref:System.Data.DataRow.RowState%2A>di ogni <xref:System.Data.DataRow>; `Added` e `Modified` righe diventare `Unchanged`, e `Deleted` le righe vengono rimosse.</xref:System.Data.DataRow> </xref:System.Data.DataRow.RowState%2A>       Se il `DataSet` contiene <xref:System.Data.ForeignKeyConstraint>oggetti, il richiamo di `AcceptChanges` metodo comporta il <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A>da applicare.</xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> </xref:System.Data.ForeignKeyConstraint>      > [!NOTE]  >   `AcceptChanges` e `RejectChanges` si applicano solo a `DataRow` relative modifiche (vale a dire Add, Remove, Delete e modifica). Non sono applicabili allo schema o modifiche strutturali.   >> Chiamare AcceptChanges non verranno replicate le modifiche all&quot;origine dati se il set di dati è stato compilato utilizzando un DataAdapter. In tal caso, chiamare <xref:System.Data.Common.DataAdapter.Update%2A>invece.</xref:System.Data.Common.DataAdapter.Update%2A> Vedere [l&quot;aggiornamento di origini dati con DataAdapter](http://msdn.microsoft.com/library/33y2221y.aspx) per ulteriori informazioni."
  example:
  - "The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>. The AcceptChanges method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.  \n  \n [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ac_1.vb)]\n [!code-cs[Classic WebData DataSet.AcceptChanges#1](~/add/codesnippet/csharp/m-system.data.dataset.ac_1.cs)]"
  syntax:
    content: public void AcceptChanges ();
    parameters: []
  overload: System.Data.DataSet.AcceptChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.BeginInit
  id: BeginInit
  parent: System.Data.DataSet
  langs:
  - csharp
  name: BeginInit()
  nameWithType: DataSet.BeginInit()
  fullName: System.Data.DataSet.BeginInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Avvia l&quot;inizializzazione di un <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzato in un form o da un altro componente. L&quot;inizializzazione avviene in fase di esecuzione."
  remarks: "L&quot;ambiente di progettazione di Visual Studio .NET utilizza questo metodo per avviare l&quot;inizializzazione di un componente utilizzato in un form o da un altro componente. Il <xref:System.Data.DataSet.EndInit%2A>metodo termina l&quot;inizializzazione.</xref:System.Data.DataSet.EndInit%2A> Utilizzo di BeginInit e <xref:System.Data.DataSet.EndInit%2A>metodi impedisce il controllo venga utilizzato prima che il completamento dell&quot;inizializzazione.</xref:System.Data.DataSet.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Data.DataSet.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CaseSensitive
  id: CaseSensitive
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
  fullName: System.Data.DataSet.CaseSensitive
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta un valore che indica se stringa confronto all&quot;interno di <xref href=&quot;System.Data.DataTable&quot;> </xref> oggetti tra maiuscole e minuscole."
  remarks: "La proprietà CaseSensitive influisce sulla modalità di ordinamento, ricerca e operazioni di filtro in ogni <xref:System.Data.DataTable>oggetti contenuti un <xref:System.Data.DataSet>quando si utilizza il <xref:System.Data.DataTable.Select%2A>metodo.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable>       Per impostazione predefinita, l&quot;impostazione della proprietà CaseSensitive per un <xref:System.Data.DataSet>Imposta inoltre il <xref:System.Data.DataTable.CaseSensitive%2A>proprietà di ciascun oggetto associato <xref:System.Data.DataTable>sullo stesso valore.</xref:System.Data.DataTable> </xref:System.Data.DataTable.CaseSensitive%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example toggles the CaseSensitive property.  \n  \n [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ca_1.vb)]"
  syntax:
    content: public bool CaseSensitive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se i confronti di stringhe tra maiuscole e minuscole; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.CaseSensitive*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Clear
  id: Clear
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Clear()
  nameWithType: DataSet.Clear()
  fullName: System.Data.DataSet.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Cancella il <xref href=&quot;System.Data.DataSet&quot;> </xref> di tutti i dati tramite la rimozione di tutte le righe in tutte le tabelle."
  remarks: "Se <xref:System.Data.DataSet>è associato a un oggetto <xref:System.Xml.XmlDataDocument>la chiamata di cancellazione o <xref:System.Data.DataTable.Clear%2A?displayProperty=fullName>Genera <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.DataTable.Clear%2A?displayProperty=fullName> </xref:System.Xml.XmlDataDocument> </xref:System.Data.DataSet> Per evitare questa situazione, scorrere ogni tabella rimuovendo una riga alla volta."
  example:
  - "The following example clears the <xref:System.Data.DataSet> of all rows in all tables.  \n  \n [!code-vb[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_1_1.vb)]\n [!code-cs[Classic WebData DataSet.Clear Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_1_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataSet.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Clone
  id: Clone
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Clone()
  nameWithType: DataSet.Clone()
  fullName: System.Data.DataSet.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copia la struttura del <xref href=&quot;System.Data.DataSet&quot;> </xref>, inclusi tutti <xref href=&quot;System.Data.DataTable&quot;> </xref> schemi, relazioni e vincoli. Non copiare i dati."
  remarks: >-
    > [!NOTE]

    >  If these classes have been subclassed, the clone will also be of the same subclasses.
  example:
  - "The following example creates a clone of a <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/csharp/m-system.data.dataset.cl_0_1.cs)]\n [!code-vb[Classic WebData DataSet.Clone Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cl_0_1.vb)]"
  syntax:
    content: public virtual System.Data.DataSet Clone ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "Un nuovo <xref href=&quot;System.Data.DataSet&quot;> </xref> con lo stesso schema corrente <xref href=&quot;System.Data.DataSet&quot;> </xref>, ma nessuno dei dati."
  overload: System.Data.DataSet.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Copy
  id: Copy
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Copy()
  nameWithType: DataSet.Copy()
  fullName: System.Data.DataSet.Copy()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copia la struttura e i dati per questa <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: ''
  example:
  - "The following example uses the Copy method to create a copy of the original <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/csharp/m-system.data.dataset.copy_1.cs)]\n [!code-vb[Classic WebData DataSet.Copy Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.copy_1.vb)]"
  syntax:
    content: public System.Data.DataSet Copy ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "Un nuovo <xref href=&quot;System.Data.DataSet&quot;> </xref> con la stessa struttura (schemi di tabelle, relazioni e vincoli) e dati dell&quot;oggetto corrente <xref href=&quot;System.Data.DataSet&quot;> </xref>.       <div class=&quot;alert NOTE&quot;>    Se queste classi sono state suddivise in sottoclassi, la copia verrà anche essere delle stesse sottoclassi.      </div>"
  overload: System.Data.DataSet.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CreateDataReader
  id: CreateDataReader
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CreateDataReader()
  nameWithType: DataSet.CreateDataReader()
  fullName: System.Data.DataSet.CreateDataReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Restituisce un <xref href=&quot;System.Data.DataTableReader&quot;> </xref> con un gruppo di risultati per <xref href=&quot;System.Data.DataTable&quot;> </xref>, nella stessa sequenza in cui le tabelle vengono visualizzate nel <xref:System.Data.DataSet.Tables*>insieme.</xref:System.Data.DataSet.Tables*>"
  remarks: "Per garantire l&quot;ordine dei set di risultati all&quot;interno di restituito <xref:System.Data.DataTableReader>, se un <xref:System.Data.DataTable>all&quot;interno di <xref:System.Data.DataSet>è vuota, viene rappresentata da un risultato vuoto impostata nel restituito `DataTableReader`.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTableReader>"
  example:
  - "The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>. The example then passes the filled `DataSet` to a procedure that calls the CreateDataReader method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>. The example displays the results in the Console window.  \n  \n [!code-vb[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_0_1.vb)]\n [!code-cs[DataWorks DataSet.DataTableReader#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_0_1.cs)]"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader ();
    parameters: []
    return:
      type: System.Data.DataTableReader
      description: "Oggetto <xref href=&quot;System.Data.DataTableReader&quot;> </xref> contenente uno o più set di risultati, corrispondente al <xref href=&quot;System.Data.DataTable&quot;> </xref> istanze contenute all&quot;interno dell&quot;origine <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  id: CreateDataReader(System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: CreateDataReader(DataTable[])
  nameWithType: DataSet.CreateDataReader(DataTable[])
  fullName: System.Data.DataSet.CreateDataReader(DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Restituisce un <xref href=&quot;System.Data.DataTableReader&quot;> </xref> con un gruppo di risultati per <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Per assicurare che l&quot;ordine del risultato gruppi all&quot;interno di restituito <xref:System.Data.DataTableReader>, se un <xref:System.Data.DataTable>all&quot;interno di <xref:System.Data.DataSet>è vuota, viene rappresentata da un risultato vuoto impostata nel restituito `DataTableReader`.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTableReader> Poiché questa versione di overload, è possibile fornire un elenco di `DataTable` istanze come parametri, è possibile specificare l&quot;ordine in cui vengono visualizzati i set di risultati all&quot;interno di restituito `DataTableReader`."
  example:
  - "This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>. The example calls the CreateDataReader method and displays the contents of the returned <xref:System.Data.DataTableReader>. Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters. The example displays the results in the Console window.  \n  \n [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/visualbasic/m-system.data.dataset.cr_1_1.vb)]\n [!code-cs[DataWorks DataSet.DataTableReaderTables#1](~/add/codesnippet/csharp/m-system.data.dataset.cr_1_1.cs)]"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader (System.Data.DataTable[] dataTables);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "Imposta una matrice di oggetti DataTable che fornisce l&quot;ordine del risultato da restituire nel <xref href=&quot;System.Data.DataTableReader&quot;> </xref>."
    return:
      type: System.Data.DataTableReader
      description: "Oggetto <xref href=&quot;System.Data.DataTableReader&quot;> </xref> contenente uno o più set di risultati, corrispondente al <xref href=&quot;System.Data.DataTable&quot;> </xref> istanze contenute all&quot;interno dell&quot;origine <xref href=&quot;System.Data.DataSet&quot;> </xref>. Il set di risultati restituiti sono nell&quot;ordine specificato per il <code> dataTables </code> parametro."
  overload: System.Data.DataSet.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DataSetName
  id: DataSetName
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DataSetName
  nameWithType: DataSet.DataSetName
  fullName: System.Data.DataSet.DataSetName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta il nome dell&quot;oggetto corrente <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataSet> with the given DataSetName.  \n  \n [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.da_1.vb)]\n [!code-cs[Classic WebData DataSet.DataSetName Example#1](~/add/codesnippet/csharp/p-system.data.dataset.da_1.cs)]"
  syntax:
    content: public string DataSetName { get; set; }
    return:
      type: System.String
      description: "Il nome del <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.DataSetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DefaultViewManager
  id: DefaultViewManager
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
  fullName: System.Data.DataSet.DefaultViewManager
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una visualizzazione personalizzata dei dati contenuti nel <xref href=&quot;System.Data.DataSet&quot;> </xref> per consentire di filtrare, ricerca ed esplorazione tramite un oggetto personalizzato <xref href=&quot;System.Data.DataViewManager&quot;> </xref>."
  remarks: "<xref:System.Data.DataViewManager>Come risultato la DefaultViewManager proprietà consente di creare impostazioni personalizzate per ogni <xref:System.Data.DataTable> <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataViewManager>       Quando si ottiene un <xref:System.Data.DataView>da un <xref:System.Data.DataTable>, l&quot;ordinamento, applicazione di filtri e <xref:System.Data.DataViewRowState>sono configurati in base alle impostazioni nella proprietà DefaultViewManager.</xref:System.Data.DataViewRowState> </xref:System.Data.DataTable> </xref:System.Data.DataView>"
  example:
  - "The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.  \n  \n [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.de_1.vb)]"
  syntax:
    content: public System.Data.DataViewManager DefaultViewManager { get; }
    return:
      type: System.Data.DataViewManager
      description: "A <xref href=&quot;System.Data.DataViewManager&quot;></xref> object."
  overload: System.Data.DataSet.DefaultViewManager*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  id: DetermineSchemaSerializationMode(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DetermineSchemaSerializationMode(XmlReader)
  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Determina il <xref:System.Data.DataSet.SchemaSerializationMode*>per un <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.DataSet.SchemaSerializationMode*>"
  remarks: "Questo metodo può essere chiamato durante la deserializzazione di un tipizzato <xref:System.Data.DataSet>per determinare la <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</xref:System.Data.DataSet.SchemaSerializationMode%2A> </xref:System.Data.DataSet>"
  syntax:
    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Il <xref:System.Xml.XmlReader>istanza che viene passato durante la deserializzazione del <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
    return:
      type: System.Data.SchemaSerializationMode
      description: "Un <xref href=&quot;System.Data.SchemaSerializationMode&quot;> </xref> enumerazione che indica se le informazioni sullo schema sono stato omesso dal payload."
  overload: System.Data.DataSet.DetermineSchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Determina il <xref:System.Data.DataSet.SchemaSerializationMode*>per un <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.DataSet.SchemaSerializationMode*>"
  remarks: "Questo metodo può essere chiamato durante la deserializzazione di un tipizzato <xref:System.Data.DataSet>per determinare la <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</xref:System.Data.DataSet.SchemaSerializationMode%2A> </xref:System.Data.DataSet>"
  syntax:
    content: protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Il <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> che un <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>del costruttore protetto &lt;xref:System.Data.DataSet.%23ctor%2A&gt; viene richiamato con durante la deserializzazione in scenari remoti."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Il <xref:System.Runtime.Serialization.StreamingContext>che un <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>del costruttore protetto &lt;xref:System.Data.DataSet.%23ctor%2A&gt; viene richiamato con durante la deserializzazione in scenari remoti.</xref:System.Runtime.Serialization.StreamingContext>"
    return:
      type: System.Data.SchemaSerializationMode
      description: "Un <xref href=&quot;System.Data.SchemaSerializationMode&quot;> </xref> enumerazione che indica se le informazioni sullo schema sono stato omesso dal payload."
  overload: System.Data.DataSet.DetermineSchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.EndInit
  id: EndInit
  parent: System.Data.DataSet
  langs:
  - csharp
  name: EndInit()
  nameWithType: DataSet.EndInit()
  fullName: System.Data.DataSet.EndInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Termina l&quot;inizializzazione di un <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzato in un form o da un altro componente. L&quot;inizializzazione avviene in fase di esecuzione."
  remarks: "L&quot;ambiente di progettazione di Visual Studio .NET utilizza questo metodo per terminare l&quot;inizializzazione di un componente utilizzato in un form o da un altro componente. Il <xref:System.Data.DataSet.BeginInit%2A>metodo avvia l&quot;inizializzazione.</xref:System.Data.DataSet.BeginInit%2A> Utilizzo di <xref:System.Data.DataSet.BeginInit%2A>EndInit metodi e impedisce il controllo venga utilizzato prima che il completamento dell&quot;inizializzazione.</xref:System.Data.DataSet.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Data.DataSet.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.EnforceConstraints
  id: EnforceConstraints
  parent: System.Data.DataSet
  langs:
  - csharp
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
  fullName: System.Data.DataSet.EnforceConstraints
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta un valore che indica se vengono seguite le regole di vincolo durante il tentativo di qualsiasi operazione di aggiornamento."
  remarks: "I vincoli sono impostati al <xref:System.Data.DataTable>livello (<xref:System.Data.DataTable.Constraints%2A> proprietà).</xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable> Per ulteriori informazioni sulla creazione di vincoli, vedere [vincoli DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>. The EnforceConstraints property is set to `false` and the values of each row are set to the same value. When the EnforceConstraints property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.  \n  \n [!code-cs[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/csharp/p-system.data.dataset.en_1.cs)]\n [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.en_1.vb)]"
  syntax:
    content: public bool EnforceConstraints { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se le regole vengono applicate; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.EnforceConstraints*
  exceptions:
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Uno o più vincoli non possono essere applicati."
  platform:
  - net462
- uid: System.Data.DataSet.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
  fullName: System.Data.DataSet.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene la raccolta di informazioni utente personalizzate associate con il <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "La proprietà ExtendedProperties consente di archiviare le informazioni personalizzate con il `DataSet`. Ad esempio, è possibile archiviare un tempo quando i dati devono essere aggiornati.       Proprietà estese devono essere di tipo <xref:System.String>Se si desidera persistenti quando il <xref:System.Data.DataSet>è scritto in formato XML.</xref:System.Data.DataSet> </xref:System.String>"
  example:
  - "The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property. The second example retrieves the custom property.  \n  \n [!code-cs[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ex_1.cs)]\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ex_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "Oggetto <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> con tutte le informazioni utente personalizzate."
  overload: System.Data.DataSet.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetChanges
  id: GetChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetChanges()
  nameWithType: DataSet.GetChanges()
  fullName: System.Data.DataSet.GetChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una copia del <xref href=&quot;System.Data.DataSet&quot;> </xref> che contiene tutte le modifiche apportate dal momento che è stato caricato o dal <xref:System.Data.DataSet.AcceptChanges*>dall&quot;ultima chiamata a.</xref:System.Data.DataSet.AcceptChanges*>"
  remarks: "Crea un nuovo <xref:System.Data.DataSet>che contiene una copia di tutte le righe nell&quot;originale <xref:System.Data.DataSet>che con modifiche in sospeso.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Vincoli della relazione possono comportare ulteriori righe invariate da aggiungere al nuovo <xref:System.Data.DataSet>se tali righe contengono chiavi primarie corrispondenti a chiavi esterne in righe modificate.</xref:System.Data.DataSet> Il metodo restituisce `null` se non sono presenti righe nell&quot;originale <xref:System.Data.DataSet>che con modifiche in sospeso.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the GetChanges method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_0_1.cs)]\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_0_1.vb)]"
  syntax:
    content: public System.Data.DataSet GetChanges ();
    parameters: []
    return:
      type: System.Data.DataSet
      description: "Una copia delle modifiche da questo <xref href=&quot;System.Data.DataSet&quot;> </xref> che può essere nuovamente unita tramite <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*> avere azioni eseguite su di esso e versioni successive Se viene trovata alcuna riga modificata, il metodo restituisce <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)
  id: GetChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetChanges(DataRowState)
  nameWithType: DataSet.GetChanges(DataRowState)
  fullName: System.Data.DataSet.GetChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una copia del <xref href=&quot;System.Data.DataSet&quot;> </xref> contenente tutte le modifiche apportate dall&quot;ultimo caricamento o dal <xref:System.Data.DataSet.AcceptChanges*>è stato chiamato, filtrati in base <xref href=&quot;System.Data.DataRowState&quot;> </xref>.</xref:System.Data.DataSet.AcceptChanges*>"
  remarks: "Il <xref:System.Data.DataSet.GetChanges%2A>metodo viene utilizzato per produrre un secondo <xref:System.Data.DataSet>oggetto che contiene solo le modifiche apportate all&quot;originale.</xref:System.Data.DataSet> </xref:System.Data.DataSet.GetChanges%2A> Utilizzare il `rowStates` argomento per specificare il tipo di modifiche deve includere il nuovo oggetto.       Questa copia è progettata per essere unita di nuovo a questa proprietà restituita originale <xref:System.Data.DataSet>.</xref:System.Data.DataSet> I vincoli di relazione possono impedire le righe padre contrassegnate `Unchanged` da includere. Se nessuna riga dell&quot;oggetto desiderato <xref:System.Data.DataRowState>vengono rilevati, il <xref:System.Data.DataSet.GetChanges%2A>restituisce `null`.</xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataRowState>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_2_1.vb)]\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_2_1.cs)]"
  syntax:
    content: public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "Uno del <xref href=&quot;System.Data.DataRowState&quot;> </xref> valori."
    return:
      type: System.Data.DataSet
      description: "Una copia del filtrata la <xref href=&quot;System.Data.DataSet&quot;> </xref> che può eseguire azioni su di esso e, successivamente essere nuovamente unita tramite <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*> Se nessuna riga dell&quot;oggetto desiderato <xref href=&quot;System.Data.DataRowState&quot;> </xref> trovato, il metodo restituisce <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  id: GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetDataSetSchema(XmlSchemaSet)
  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)
  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una copia di <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> per il set di dati."
  syntax:
    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);
    parameters:
    - id: schemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: "Set di schemi specificato."
    return:
      type: System.Xml.Schema.XmlSchemaComplexType
      description: "A copy of <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>."
  overload: System.Data.DataSet.GetDataSetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Popola un oggetto di informazioni di serializzazione con i dati necessari per serializzare il <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Oggetto <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> che contiene i dati serializzati associati il <xref href=&quot;System.Data.DataSet&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Oggetto <xref:System.Runtime.Serialization.StreamingContext>contenente l&quot;origine e la destinazione del flusso serializzato associato il <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Data.DataSet.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>info</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.GetSchemaSerializable
  id: GetSchemaSerializable
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetSchemaSerializable()
  nameWithType: DataSet.GetSchemaSerializable()
  fullName: System.Data.DataSet.GetSchemaSerializable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Restituisce un tipo serializzabile <xref:System.Xml.Schema.XMLSchema>istanza.</xref:System.Xml.Schema.XMLSchema>"
  syntax:
    content: protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "Il <xref:System.Xml.Schema.XMLSchema>istanza.</xref:System.Xml.Schema.XMLSchema>"
  overload: System.Data.DataSet.GetSchemaSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetSerializationData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Deserializza i dati della tabella dal flusso XML o binary."
  syntax:
    content: protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Il <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> istanza."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Il contesto di flusso."
  overload: System.Data.DataSet.GetSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetXml
  id: GetXml
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetXml()
  nameWithType: DataSet.GetXml()
  fullName: System.Data.DataSet.GetXml()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Restituisce la rappresentazione XML dei dati archiviati nel <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Chiamata di questo metodo è identica alla chiamata <xref:System.Data.DataSet.WriteXml%2A>con <xref:System.Data.XmlWriteMode>impostata su <xref:System.Data.XmlWriteMode>.</xref:System.Data.XmlWriteMode> </xref:System.Data.XmlWriteMode> </xref:System.Data.DataSet.WriteXml%2A>       GetXml restituisce codice XML come stringa e pertanto richiede l&quot;overhead maggiore rispetto alla <xref:System.Data.DataSet.WriteXml%2A>per scrivere il XML in un file.</xref:System.Data.DataSet.WriteXml%2A>       Se si compila un <xref:System.Data.DataSet>utilizza l&quot;inferenza dello schema e serializzare utilizzando servizi Web o XML, l&quot;ordinamento delle colonne potrebbe cambiare.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.  \n  \n [!code-cs[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_1_1.cs)]\n [!code-vb[Classic WebData DataSet.GetXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_1_1.vb)]  \n  \n This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML. This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.  \n  \n Before you compile and run the sample, you need to create four XML files in the sample directory. First, create ElementsWithAttributes.xml:  \n  \n```  \n<MySchool>  \n  <Course CourseID=\"C1045\" Year=\"2012\"  Title=\"Calculus\" Credits=\"4\" DepartmentID=\"7\">New</Course>  \n  <Course CourseID=\"C1061\" Year=\"2012\"  Title=\"Physics\" Credits=\"4\" DepartmentID=\"1\" />  \n  <Department DepartmentID=\"1\" Name=\"Engineering\" Budget=\"350000\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"2\" />  \n  <Department DepartmentID=\"7\" Name=\"Mathematics\" Budget=\"250024\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"3\">Cancelled</Department>  \n</MySchool>  \n```  \n  \n Next, create ElementsWithChildElementsxml.xml:  \n  \n```  \n<MySchool>  \n  <Course>  \n    <CourseID>C1045</CourseID>  \n    <Year>2012</Year>  \n    <Title>Calculus</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>7</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C1061</CourseID>  \n    <Year>2012</Year>  \n    <Title>Physics</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>1</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C2021</CourseID>  \n    <Year>2012</Year>  \n    <Title>Composition</Title>  \n    <Credits>3</Credits>  \n    <DepartmentID>2</DepartmentID>  \n  </Course>  \n  <Course>  \n    <CourseID>C2042</CourseID>  \n    <Year>2012</Year>  \n    <Title>Literature</Title>  \n    <Credits>4</Credits>  \n    <DepartmentID>2</DepartmentID>  \n  </Course>  \n  <Department>  \n    <DepartmentID>1</DepartmentID>  \n    <Name>Engineering</Name>  \n    <Budget>350000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>2</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>2</DepartmentID>  \n    <Name>English</Name>  \n    <Budget>120000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>6</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>4</DepartmentID>  \n    <Name>Economics</Name>  \n    <Budget>200000</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>4</Administrator>  \n  </Department>  \n  <Department>  \n    <DepartmentID>7</DepartmentID>  \n    <Name>Mathematics</Name>  \n    <Budget>250024</Budget>  \n    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  \n    <Administrator>3</Administrator>  \n  </Department>  \n</MySchool>  \n```  \n  \n Now create ElementsWithOnlyAttributes.xml:  \n  \n```  \n<MySchool>  \n  <Course CourseID=\"C1045\" Year=\"2012\"  Title=\"Calculus\" Credits=\"4\" DepartmentID=\"7\" />  \n  <Course CourseID=\"C1061\" Year=\"2012\"  Title=\"Physics\" Credits=\"4\" DepartmentID=\"1\" />  \n  <Department DepartmentID=\"1\" Name=\"Engineering\" Budget=\"350000\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"2\" />  \n  <Department DepartmentID=\"7\" Name=\"Mathematics\" Budget=\"250024\" StartDate=\"2007-09-01T00:00:00+08:00\" Administrator=\"3\" />  \n</MySchool>  \n```  \n  \n And finally, create RepeatingElements.xml:  \n  \n```  \n<MySchool>  \n  <Course>C1045</Course>  \n  <Course>C1061</Course>  \n  <Department>Engineering</Department>   \n  <Department>Mathematics</Department>  \n</MySchool>  \n```  \n  \n Now you can compile and run the following source code.  [How to Store Data of DataSet into XML File](http://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.IO;  \nusing System.Text;  \nusing System.Xml;  \n  \n// Use WriteXml method to export the dataset.  \nstatic class DataTableHelper {  \n   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  \n      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  \n         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  \n            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  \n            Console.WriteLine(\"Write {0} to the File {1}.\", dataset.DataSetName, xmlFileName);  \n            Console.WriteLine();  \n         }  \n      }  \n   }  \n  \n   // Use GetXml method to get the XML data of the dataset and then export to the file.  \n   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  \n      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  \n         writer.WriteLine(dataset.GetXml());  \n         Console.WriteLine(\"Get Xml data from {0} and write to the File {1}.\", dataset.DataSetName, xmlFileName);  \n         Console.WriteLine();  \n      }  \n   }  \n  \n   // Use ReadXml method to import the dataset from the dataset.  \n   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  \n      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  \n         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  \n            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  \n         }  \n      }  \n   }  \n  \n   // Display the columns and value of DataSet.  \n   public static void ShowDataSet(DataSet dataset) {  \n      foreach (DataTable table in dataset.Tables) {  \n         Console.WriteLine(\"Table {0}:\", table.TableName);  \n         ShowDataTable(table);  \n      }  \n   }  \n  \n   // Display the columns and value of DataTable.  \n   private static void ShowDataTable(DataTable table) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(\"{0,-14}\", col.ColumnName);  \n      }  \n      Console.WriteLine(\"{0,-14}\", \"\");  \n  \n      foreach (DataRow row in table.Rows) {  \n         if (row.RowState == DataRowState.Deleted) {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(\"{0,-14:d}\", row[col, DataRowVersion.Original]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(\"{0,-14:C}\", row[col, DataRowVersion.Original]);  \n               }  \n               else {  \n                  Console.Write(\"{0,-14}\", row[col, DataRowVersion.Original]);  \n               }  \n            }  \n         }  \n         else {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime))) {  \n                  Console.Write(\"{0,-14:d}\", row[col]);  \n               }  \n               else if (col.DataType.Equals(typeof(Decimal))) {  \n                  Console.Write(\"{0,-14:C}\", row[col]);  \n               }  \n               else {  \n                  Console.Write(\"{0,-14}\", row[col]);  \n               }  \n            }  \n         }  \n         Console.WriteLine(\"{0,-14}\", \"\");  \n      }  \n   }  \n  \n   // Display the columns of DataSet.  \n   public static void ShowDataSetSchema(DataSet dataSet) {  \n      Console.WriteLine(\"{0} contains the following tables:\", dataSet.DataSetName);  \n      foreach (DataTable table in dataSet.Tables) {  \n         Console.WriteLine(\"   Table {0} contains the following columns:\", table.TableName);  \n         ShowDataTableSchema(table);  \n      }  \n   }  \n  \n   // Display the columns of DataTable  \n   private static void ShowDataTableSchema(DataTable table) {  \n      String columnString = \"\";  \n      foreach (DataColumn col in table.Columns) {  \n         columnString += col.ColumnName + \"   \";  \n      }  \n      Console.WriteLine(columnString);  \n   }  \n}  \n  \nclass Program {  \n   static void Main(string[] args) {  \n      // Create the DataSet  \n      DataSet school = new DataSet(\"MySchool\");  \n      DataTable course = CreateCourse();  \n      DataTable department = CreateDepartment();  \n      school.Tables.Add(course);  \n      school.Tables.Add(department);  \n  \n      // Define the constraint between the tables.  \n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\"CourseDepartFK\", department.Columns[\"DepartmentID\"], course.Columns[\"DepartmentID\"]);  \n      courseDepartFK.DeleteRule = Rule.Cascade;  \n      courseDepartFK.UpdateRule = Rule.Cascade;  \n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \n      course.Constraints.Add(courseDepartFK);  \n  \n      InsertDepartments(department);  \n      InsertCourses(course);  \n  \n      // Export the dataset to the XML file.  \n      Console.WriteLine(\"Data of the whole DataSet {0}\", school.DataSetName);  \n      DataTableHelper.ShowDataSet(school);  \n  \n      String xmlWithSchemaFileName = \"WriterXMLWithSchema.xml\";  \n      String xmlGetDataFileName = \"GetXML.xml\";  \n  \n      // Use two ways to export the dataset to the Xml file.  \n      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  \n      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  \n  \n      // Import the dataset from the XML file.  \n      // Use two ways to import the dataset from the Xml file.  \n      Console.WriteLine(\"Read Xml document into a new DataSet:\");  \n      DataSet newSchool = new DataSet(\"NewSchool\");  \n      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  \n      DataTableHelper.ShowDataSetSchema(newSchool);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Infer a schema for a DataSet from an XML document:\");  \n      InferDataSetSchemaFromXml();  \n  \n      Console.WriteLine(\"Press any key to exit.\");  \n      Console.ReadKey();  \n   }  \n  \n   static DataTable CreateCourse() {  \n      DataTable course = new DataTable(\"Course\");  \n      DataColumn[] cols ={  \n                              new DataColumn(\"CourseID\",typeof(String)),  \n                              new DataColumn(\"Year\",typeof(Int32)),  \n                              new DataColumn(\"Title\",typeof(String)),  \n                              new DataColumn(\"Credits\",typeof(Int32)),  \n                              new DataColumn(\"DepartmentID\",typeof(Int32))};  \n      course.Columns.AddRange(cols);  \n  \n      course.PrimaryKey = new DataColumn[] { course.Columns[\"CourseID\"], course.Columns[\"Year\"] };  \n  \n      return course;  \n   }  \n  \n   static DataTable CreateDepartment() {  \n      DataTable department = new DataTable(\"Department\");  \n      DataColumn[] cols = {   \n                                new DataColumn(\"DepartmentID\", typeof(Int32)),  \n                                new DataColumn(\"Name\",typeof(String)),  \n                                new DataColumn(\"Budget\",typeof(Decimal)),  \n                                new DataColumn(\"StartDate\",typeof(DateTime)),  \n                                new DataColumn(\"Administrator\",typeof(Int32))};  \n      department.Columns.AddRange(cols);  \n  \n      department.PrimaryKey = new DataColumn[] { department.Columns[\"DepartmentID\"] };  \n  \n      return department;  \n   }  \n  \n   static void InsertDepartments(DataTable department) {  \n      Object[] rows = {   \n                            new Object[]{1,\"Engineering\",350000.00,new DateTime(2007,9,1),2},  \n                            new Object[]{2,\"English\",120000.00,new DateTime(2007,9,1),6},  \n                            new Object[]{4,\"Economics\",200000.00,new DateTime(2007,9,1),4},  \n                            new Object[]{7,\"Mathematics\",250024.00,new DateTime(2007,9,1),3}};  \n  \n      foreach (Object[] row in rows) {  \n         department.Rows.Add(row);  \n      }  \n   }  \n  \n   static void InsertCourses(DataTable course) {  \n      Object[] rows ={  \n                               new Object[]{\"C1045\",2012,\"Calculus\",4,7},  \n                               new Object[]{\"C1061\",2012,\"Physics\",4,1},  \n                               new Object[]{\"C2021\",2012,\"Composition\",3,2},  \n                               new Object[]{\"C2042\",2012,\"Literature\",4,2}};  \n  \n      foreach (Object[] row in rows) {  \n         course.Rows.Add(row);  \n      }  \n   }  \n  \n   // Display the results of inferring schema from four types of XML structures  \n   private static void InferDataSetSchemaFromXml() {  \n      String[] xmlFileNames = {   \n  \n                                    @\"ElementsWithOnlyAttributes.xml\",   \n                                    @\"ElementsWithAttributes.xml\",  \n                                    @\"RepeatingElements.xml\",   \n                                    @\"ElementsWithChildElements.xml\" };  \n  \n      foreach (String xmlFileName in xmlFileNames) {  \n         Console.WriteLine(\"Result of {0}\", Path.GetFileNameWithoutExtension(xmlFileName));  \n         DataSet newSchool = new DataSet();  \n         newSchool.InferXmlSchema(xmlFileName, null);  \n         DataTableHelper.ShowDataSetSchema(newSchool);  \n         Console.WriteLine();  \n      }  \n   }  \n}  \n```"
  syntax:
    content: public string GetXml ();
    parameters: []
    return:
      type: System.String
      description: "Stringa che rappresenta una rappresentazione dei dati archiviati nel <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.GetXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.GetXmlSchema
  id: GetXmlSchema
  parent: System.Data.DataSet
  langs:
  - csharp
  name: GetXmlSchema()
  nameWithType: DataSet.GetXmlSchema()
  fullName: System.Data.DataSet.GetXmlSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Restituisce lo Schema XML per la rappresentazione XML dei dati archiviati nel <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Chiamare questo metodo è identica alla chiamata al metodo <xref:System.Data.DataSet.WriteXmlSchema%2A>, ad eccezione del fatto che viene scritto solo lo schema principale.</xref:System.Data.DataSet.WriteXmlSchema%2A>       GetXmlSchema restituisce codice XML come stringa e pertanto richiede l&quot;overhead maggiore rispetto alla <xref:System.Data.DataSet.WriteXmlSchema%2A>per scrivere il XML in un file.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Se si compila un <xref:System.Data.DataSet>utilizza l&quot;inferenza dello schema e serializzare utilizzando servizi Web o XML, l&quot;ordinamento delle colonne potrebbe cambiare.</xref:System.Data.DataSet>"
  example:
  - "The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.  \n  \n [!code-cs[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ge_3_1.cs)]\n [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ge_3_1.vb)]"
  syntax:
    content: public string GetXmlSchema ();
    parameters: []
    return:
      type: System.String
      description: "Stringa che rappresenta lo Schema XML per la rappresentazione XML dei dati archiviati nel <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.GetXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasChanges
  id: HasChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasChanges()
  nameWithType: DataSet.HasChanges()
  fullName: System.Data.DataSet.HasChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Data.DataSet&quot;> </xref> presenta delle modifiche, incluse le righe di nuovi, eliminate o modificate."
  remarks: ''
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_0_1.vb)]\n [!code-cs[Classic WebData DataSet.HasChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_0_1.cs)]"
  syntax:
    content: public bool HasChanges ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Data.DataSet&quot;> </xref> contiene modifiche; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)
  id: HasChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasChanges(DataRowState)
  nameWithType: DataSet.HasChanges(DataRowState)
  fullName: System.Data.DataSet.HasChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Data.DataSet&quot;> </xref> presenta delle modifiche, incluse le righe di nuovi, eliminate o modificate, filtrate in base <xref href=&quot;System.Data.DataRowState&quot;> </xref>."
  remarks: "Esaminare il <xref:System.Data.DataSet.HasChanges%2A>proprietà del `DataSet` prima di richiamare il <xref:System.Data.DataSet.GetChanges%2A>metodo.</xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataSet.HasChanges%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.  \n  \n [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.ha_1_1.vb)]\n [!code-cs[Classic WebData DataSet.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.ha_1_1.cs)]"
  syntax:
    content: public bool HasChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "Uno del <xref href=&quot;System.Data.DataRowState&quot;> </xref> valori."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Data.DataSet&quot;> </xref> contiene modifiche; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.HasErrors
  id: HasErrors
  parent: System.Data.DataSet
  langs:
  - csharp
  name: HasErrors
  nameWithType: DataSet.HasErrors
  fullName: System.Data.DataSet.HasErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene un valore che indica se sono presenti errori in uno del <xref href=&quot;System.Data.DataTable&quot;> </xref> oggetti all&quot;interno di questa <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Ogni <xref:System.Data.DataTable>in un <xref:System.Data.DataSet>dispone anche di un <xref:System.Data.DataTable.HasErrors%2A>proprietà.</xref:System.Data.DataTable.HasErrors%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable> Utilizzare il `HasErrors` proprietà del `DataSet` prima, per determinare se una tabella qualsiasi ha errori, prima di archiviare singoli <xref:System.Data.DataTable>oggetti.</xref:System.Data.DataTable> Se un `DataTable` presenta errori, il <xref:System.Data.DataTable.GetErrors%2A>metodo restituisce una matrice di <xref:System.Data.DataRow>oggetti contenente gli errori.</xref:System.Data.DataRow> </xref:System.Data.DataTable.GetErrors%2A>"
  example:
  - "The following example uses the HasErrors property to determine whether a <xref:System.Data.DataSet> object contains errors. If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.  \n  \n [!code-cs[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ha_1.cs)]\n [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ha_1.vb)]"
  syntax:
    content: public bool HasErrors { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se una tabella contiene un errore; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.HasErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  id: InferXmlSchema(System.IO.Stream,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(Stream,String[])
  nameWithType: DataSet.InferXmlSchema(Stream,String[])
  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si applica lo schema XML dall&quot;oggetto specificato <xref:System.IO.Stream>per il <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.Stream>"
  syntax:
    content: public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Il <xref uid=&quot;langword_csharp_Stream&quot; name=&quot;Stream&quot; href=&quot;&quot;> </xref> da cui leggere lo schema."
    - id: nsArray
      type: System.String[]
      description: "Una matrice di stringhe di risorsa URI (Uniform Identifier) dello spazio dei nomi da escludere dall&quot;inferenza dello schema."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  id: InferXmlSchema(System.IO.TextReader,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(TextReader,String[])
  nameWithType: DataSet.InferXmlSchema(TextReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si applica lo schema XML dall&quot;oggetto specificato <xref:System.IO.TextReader>per il <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.TextReader>"
  syntax:
    content: public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Il <xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> da cui leggere lo schema."
    - id: nsArray
      type: System.String[]
      description: "Una matrice di stringhe di risorsa URI (Uniform Identifier) dello spazio dei nomi da escludere dall&quot;inferenza dello schema."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  id: InferXmlSchema(System.String,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(String,String[])
  nameWithType: DataSet.InferXmlSchema(String,String[])
  fullName: System.Data.DataSet.InferXmlSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si applica lo schema XML dal file specificato per il <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  syntax:
    content: public void InferXmlSchema (string fileName, string[] nsArray);
    parameters:
    - id: fileName
      type: System.String
      description: "Il nome del file (incluso il percorso) da cui leggere lo schema."
    - id: nsArray
      type: System.String[]
      description: "Una matrice di stringhe di risorsa URI (Uniform Identifier) dello spazio dei nomi da escludere dall&quot;inferenza dello schema."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>non è impostata su <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  id: InferXmlSchema(System.Xml.XmlReader,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InferXmlSchema(XmlReader,String[])
  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si applica lo schema XML dall&quot;oggetto specificato <xref:System.Xml.XmlReader>per il <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
  syntax:
    content: public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Il <xref uid=&quot;langword_csharp_XMLReader&quot; name=&quot;XMLReader&quot; href=&quot;&quot;> </xref> da cui leggere lo schema."
    - id: nsArray
      type: System.String[]
      description: "Una matrice di stringhe di risorsa URI (Uniform Identifier) dello spazio dei nomi da escludere dall&quot;inferenza dello schema."
  overload: System.Data.DataSet.InferXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Initialized
  id: Initialized
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Initialized
  nameWithType: DataSet.Initialized
  fullName: System.Data.DataSet.Initialized
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica dopo il <xref href=&quot;System.Data.DataSet&quot;> </xref> viene inizializzato."
  remarks: "Per ulteriori informazioni, vedere <xref:System.Data.DataSet.IsInitialized%2A>.</xref:System.Data.DataSet.IsInitialized%2A>"
  syntax:
    content: public event EventHandler Initialized;
    return:
      type: System.EventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.InitializeDerivedDataSet
  id: InitializeDerivedDataSet
  parent: System.Data.DataSet
  langs:
  - csharp
  name: InitializeDerivedDataSet()
  nameWithType: DataSet.InitializeDerivedDataSet()
  fullName: System.Data.DataSet.InitializeDerivedDataSet()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Deserializzare tutti i dati di tabelle del set di dati dal flusso XML o binary."
  syntax:
    content: protected virtual void InitializeDerivedDataSet ();
    parameters: []
  overload: System.Data.DataSet.InitializeDerivedDataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: IsBinarySerialized(SerializationInfo,StreamingContext)
  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Esamina il formato della rappresentazione serializzata del <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "Questo membro supporta l&quot;infrastruttura .NET Framework e non deve essere utilizzato direttamente dal codice."
  syntax:
    content: protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Il <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> oggetto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Il <xref:System.Runtime.Serialization.StreamingContext>oggetto.</xref:System.Runtime.Serialization.StreamingContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;oggetto specificato <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> rappresenta un <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> serializzato in formato binario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> in caso contrario."
  overload: System.Data.DataSet.IsBinarySerialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.IsInitialized
  id: IsInitialized
  parent: System.Data.DataSet
  langs:
  - csharp
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
  fullName: System.Data.DataSet.IsInitialized
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Data.DataSet&quot;> </xref> viene inizializzato."
  remarks: "Restituisce lo stato di <xref:System.Data.DataSet>mentre viene costruita, ad esempio da Visual Studio.</xref:System.Data.DataSet> Il <xref:System.Data.DataSet.BeginInit%2A>metodo lo imposta su `false` e <xref:System.Data.DataSet.EndInit%2A>metodo lo imposta su `true`.</xref:System.Data.DataSet.EndInit%2A> </xref:System.Data.DataSet.BeginInit%2A>"
  syntax:
    content: public bool IsInitialized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per indicare il componente ha completato l&quot;inizializzazione. in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.IsInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Riempie una <xref href=&quot;System.Data.DataSet&quot;> </xref> con i valori da un&quot;origine dati utilizzando l&quot;interfaccia fornita <xref href=&quot;System.Data.IDataReader&quot;> </xref>, utilizzando una matrice di <xref href=&quot;System.Data.DataTable&quot;> </xref> le istanze di fornire le informazioni dello schema e spazio dei nomi."
  remarks: "Il <xref:System.Data.DataTable.Load%2A>metodo fornisce una tecnica per la compilazione di un singolo <xref:System.Data.DataTable>con dati, recuperati da un <xref:System.Data.IDataReader>istanza.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Questo metodo fornisce la stessa funzionalità, ma consente di caricare più set di risultati da un&quot;istruzione <xref:System.Data.IDataReader>in più tabelle all&quot;interno di un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.IDataReader>      > [!NOTE] > L&quot;operazione di caricamento avrà esito negativo con un <xref:System.InvalidOperationException>Se una qualsiasi delle colonne di origine dati in ingresso `reader` sono colonne calcolate.</xref:System.InvalidOperationException>       Il `loadOption` parametro consente di specificare come si desidera che i dati importati per interagire con i dati esistenti e può essere uno dei valori di <xref:System.Data.LoadOption>enumerazione.</xref:System.Data.LoadOption> Vedere la documentazione per il <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>metodo per ulteriori informazioni sull&quot;utilizzo di questo parametro.</xref:System.Data.DataTable.Load%2A></xref:System.Data.DataTable>       Il `tables` parametro consente di specificare una matrice di <xref:System.Data.DataTable>istanze, che indica l&quot;ordine delle tabelle corrispondenti a ogni gruppo di risultati caricato dal lettore.</xref:System.Data.DataTable> Le Loadmethod informazioni vengono immesse ogni fornite <xref:System.Data.DataTable>istanza con dati da un singolo set di risultati da lettore dati di origine.</xref:System.Data.DataTable> Dopo ogni set di risultati, il Loadmethod sposta il gruppo di risultati successivo all&quot;interno del lettore, fino a quando non sono presenti set di risultati non sono più presenti.       Lo schema di risoluzione del nome per questo metodo è uguale a quello seguito dal <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo di <xref:System.Data.Common.DbDataAdapter>classe.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the Load method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets. Finally, the example displays the contents of the tables in the console window.  \n  \n [!code-vb[DataWorks DataSet.LoadTables#1](~/add/codesnippet/visualbasic/54dbea54-b320-4c41-9f97-_1.vb)]\n [!code-cs[DataWorks DataSet.LoadTables#1](~/add/codesnippet/csharp/54dbea54-b320-4c41-9f97-_1.cs)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.DataTable[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Un <xref href=&quot;System.Data.IDataReader&quot;> </xref> che fornisce uno o più set di risultati."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Un valore compreso il <xref href=&quot;System.Data.LoadOption&quot;> </xref> enumerazione che indica come righe già nel <xref href=&quot;System.Data.DataTable&quot;> </xref> istanze all&quot;interno di <xref href=&quot;System.Data.DataSet&quot;> </xref> verranno combinati con le righe in ingresso che condividono la stessa chiave primaria."
    - id: tables
      type: System.Data.DataTable[]
      description: "Matrice di <xref href=&quot;System.Data.DataTable&quot;> </xref> istanze, da cui il metodo Load recupera le informazioni di nome e spazio dei nomi. Ognuna di queste tabelle deve essere un membro del <xref href=&quot;System.Data.DataTableCollection&quot;> </xref> contenute da questo <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,String[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Riempie una <xref href=&quot;System.Data.DataSet&quot;> </xref> con i valori da un&quot;origine dati utilizzando l&quot;interfaccia fornita <xref href=&quot;System.Data.IDataReader&quot;> </xref>, l&quot;utilizzo di una matrice di stringhe per fornire i nomi per le tabelle all&quot;interno di <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.Load%2A>metodo fornisce una tecnica per la compilazione di un singolo <xref:System.Data.DataTable>con dati, recuperati da un <xref:System.Data.IDataReader>istanza.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Questo metodo fornisce la stessa funzionalità, ma consente di caricare più set di risultati da un `IDataReader` in più tabelle all&quot;interno di un `DataSet`.      > [!NOTE] > L&quot;operazione di caricamento avrà esito negativo con un <xref:System.InvalidOperationException>Se una qualsiasi delle colonne di origine dati in ingresso `reader` sono colonne calcolate.</xref:System.InvalidOperationException>       Il `loadOption` parametro consente di specificare come si desidera che i dati importati per interagire con i dati esistenti e può essere uno dei valori di <xref:System.Data.LoadOption>enumerazione.</xref:System.Data.LoadOption> Vedere la documentazione per il <xref:System.Data.DataTable.Load%2A>metodo per ulteriori informazioni sull&quot;utilizzo di questo parametro.</xref:System.Data.DataTable.Load%2A>       Il `tables` parametro consente di specificare una matrice di nomi di tabella, che indica l&quot;ordine delle tabelle corrispondenti a ogni gruppo di risultati caricato dal lettore. Il `Load` metodo tenta di trovare una tabella all&quot;interno di `DataSet` corrispondente al nome trovato nella matrice di nomi di tabella, in ordine. Se viene trovata una tabella corrispondente, tale tabella viene caricata con il contenuto del set di risultati corrente. Se non viene trovata nessuna tabella corrispondente, viene creata una tabella utilizzando il nome specificato nella matrice di nomi di tabella e il nuovo schema della tabella viene dedotto dal set di risultati. Dopo ogni set di risultati, il `Load` metodo passa al risultato successivo impostato all&quot;interno del lettore, fino a quando non sono presenti set di risultati non sono più presenti.       Spazio dei nomi predefinito associato `DataSet`, se presente, vengono associati a ogni nuovo `DataTable`. Lo schema di risoluzione del nome per questo metodo è uguale a quello seguito dal <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo di <xref:System.Data.Common.DbDataAdapter>classe.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method. The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>. In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter. Once the data has been loaded, the example displays the contents of all its tables in the Console window.  \n  \n [!code-vb[DataWorks DataSet.LoadString#1](~/add/codesnippet/visualbasic/f903cc41-1885-430a-b43a-_1.vb)]\n [!code-cs[DataWorks DataSet.LoadString#1](~/add/codesnippet/csharp/f903cc41-1885-430a-b43a-_1.cs)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, string[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Un <xref href=&quot;System.Data.IDataReader&quot;> </xref> che fornisce uno o più set di risultati."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Un valore compreso il <xref href=&quot;System.Data.LoadOption&quot;> </xref> enumerazione che indica come righe già nel <xref href=&quot;System.Data.DataTable&quot;> </xref> istanze all&quot;interno di <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> verranno combinati con le righe in ingresso che condividono la stessa chiave primaria."
    - id: tables
      type: System.String[]
      description: "Una matrice di stringhe, da cui il <xref uid=&quot;langword_csharp_Load&quot; name=&quot;Load&quot; href=&quot;&quot;> </xref> che consente di recuperare informazioni sul nome di tabella."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Riempie una <xref href=&quot;System.Data.DataSet&quot;> </xref> con i valori da un&quot;origine dati utilizzando l&quot;interfaccia fornita <xref href=&quot;System.Data.IDataReader&quot;> </xref>, utilizzando una matrice di <xref href=&quot;System.Data.DataTable&quot;> </xref> le istanze di fornire le informazioni dello schema e spazio dei nomi."
  remarks: "Il <xref:System.Data.DataTable.Load%2A>metodo fornisce una tecnica per la compilazione di un singolo <xref:System.Data.DataTable>con dati, recuperati da un <xref:System.Data.IDataReader>istanza.</xref:System.Data.IDataReader> </xref:System.Data.DataTable> </xref:System.Data.DataTable.Load%2A> Questo metodo fornisce la stessa funzionalità, ma consente di caricare più set di risultati da un&quot;istruzione <xref:System.Data.IDataReader>in più tabelle all&quot;interno di un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.IDataReader>      > [!NOTE] > L&quot;operazione di caricamento avrà esito negativo con un <xref:System.InvalidOperationException>Se una qualsiasi delle colonne di origine dati in ingresso `reader` sono colonne calcolate.</xref:System.InvalidOperationException>       Il `loadOption` parametro consente di specificare come si desidera che i dati importati per interagire con i dati esistenti e può essere uno dei valori di <xref:System.Data.LoadOption>enumerazione.</xref:System.Data.LoadOption> Vedere la documentazione per il <xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A>metodo per ulteriori informazioni sull&quot;utilizzo di questo parametro.</xref:System.Data.DataTable.Load%2A></xref:System.Data.DataTable>       Il `errorHandler` parametro è un <xref:System.Data.FillErrorEventHandler>delegato che fa riferimento a una routine che viene chiamata quando si verifica un errore durante il caricamento di dati.</xref:System.Data.FillErrorEventHandler> Il <xref:System.Data.FillErrorEventArgs>parametro passato alla procedura fornisce le proprietà che consentono di recuperare informazioni sull&quot;errore che si sono verificati, la riga corrente di dati, e <xref:System.Data.DataTable>riempito.</xref:System.Data.DataTable> </xref:System.Data.FillErrorEventArgs> Tramite questo meccanismo di delegato, anziché un semplice blocco try/catch, consente di determinare l&quot;errore, gestire la situazione e continuare l&quot;elaborazione se lo si desidera. Il <xref:System.Data.FillErrorEventArgs>parametro fornisce un <xref:System.Data.FillErrorEventArgs.Continue%2A>proprietà: impostare questa proprietà su `true` per indicare che è stato gestito l&quot;errore e si desidera continuare l&quot;elaborazione; impostare la proprietà su `false` per indicare che si desidera interrompere l&quot;elaborazione.</xref:System.Data.FillErrorEventArgs.Continue%2A> </xref:System.Data.FillErrorEventArgs> Tenere presente che l&quot;impostazione della proprietà su `false` , il codice che ha generato il problema di generare un&quot;eccezione.       Il `tables` parametro consente di specificare una matrice di <xref:System.Data.DataTable>istanze, che indica l&quot;ordine delle tabelle corrispondenti a ogni gruppo di risultati caricato dal lettore.</xref:System.Data.DataTable> Le Loadmethod informazioni vengono immesse ogni fornite <xref:System.Data.DataTable>istanza con dati da un singolo set di risultati da lettore dati di origine.</xref:System.Data.DataTable> Dopo ogni set di risultati, il Loadmethod sposta il gruppo di risultati successivo all&quot;interno del lettore, fino a quando non sono presenti set di risultati non sono più presenti.       Lo schema di risoluzione del nome per questo metodo è uguale a quello seguito dal <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo di <xref:System.Data.Common.DbDataAdapter>classe.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the Load method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema. Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error. The output is displayed in the console window.  \n  \n [!code-vb[DataWorks DataSet.Load#1](~/add/codesnippet/visualbasic/a22aaabc-2cbb-4c1f-aa4e-_1.vb)]\n [!code-cs[DataWorks DataSet.Load#1](~/add/codesnippet/csharp/a22aaabc-2cbb-4c1f-aa4e-_1.cs)]"
  syntax:
    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, System.Data.DataTable[] tables);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Un <xref href=&quot;System.Data.IDataReader&quot;> </xref> che fornisce uno o più set di risultati."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Un valore compreso il <xref href=&quot;System.Data.LoadOption&quot;> </xref> enumerazione che indica come righe già nel <xref href=&quot;System.Data.DataTable&quot;> </xref> istanze all&quot;interno di <xref href=&quot;System.Data.DataSet&quot;> </xref> verranno combinati con le righe in ingresso che condividono la stessa chiave primaria."
    - id: errorHandler
      type: System.Data.FillErrorEventHandler
      description: "Oggetto <xref href=&quot;System.Data.FillErrorEventHandler&quot;> </xref> delegato da chiamare quando si verifica un errore durante il caricamento di dati."
    - id: tables
      type: System.Data.DataTable[]
      description: "Matrice di <xref href=&quot;System.Data.DataTable&quot;> </xref> istanze, da cui il metodo Load recupera le informazioni di nome e spazio dei nomi."
  overload: System.Data.DataSet.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Locale
  id: Locale
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Locale
  nameWithType: DataSet.Locale
  fullName: System.Data.DataSet.Locale
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta le informazioni delle impostazioni locali utilizzate per confrontare le stringhe all&quot;interno della tabella."
  remarks: "La proprietà Locale specifica le impostazioni locali per l&quot;ordinamento di cui si applica.       Per impostazione predefinita, le impostazioni internazionali per un <xref:System.Data.DataSet>Imposta inoltre le impostazioni locali per ogni <xref:System.Data.DataTable>oggetto in cui `DataSet` sullo stesso valore.</xref:System.Data.DataTable> </xref:System.Data.DataSet>      > [!NOTE] > Nelle colonne che contengono espressioni, il <xref:System.StringComparison>viene utilizzato.</xref:System.StringComparison> Il <xref:System.StringComparison>viene ignorato.</xref:System.StringComparison>"
  example:
  - "The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.  \n  \n [!code-vb[Classic WebData DataSet.Locale Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.lo_1.vb)]"
  syntax:
    content: public System.Globalization.CultureInfo Locale { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "Oggetto <xref:System.Globalization.CultureInfo>che contiene i dati sulle impostazioni locali di computer dell&quot;utente.</xref:System.Globalization.CultureInfo> Il valore predefinito è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Locale*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataRow[])
  id: Merge(System.Data.DataRow[])
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataRow[])
  nameWithType: DataSet.Merge(DataRow[])
  fullName: System.Data.DataSet.Merge(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Unisce una matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti in corrente <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataSet.Merge%2A>metodo viene utilizzato per unire due <xref:System.Data.DataSet>gli oggetti che contengono schemi molto simili.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Un&quot;unione è in genere utilizzata in un&quot;applicazione client per rendere effettive le modifiche più recenti da un&quot;origine dati in un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente In questo modo l&quot;applicazione client per un aggiornamento <xref:System.Data.DataSet>con i dati più recenti dall&quot;origine dati.</xref:System.Data.DataSet>       Il <xref:System.Data.DataSet.Merge%2A>metodo viene in genere chiamato alla fine di una serie di procedure che implicano la convalida delle modifiche, la risoluzione degli errori, aggiornare l&quot;origine dati con le modifiche e infine l&quot;aggiornamento di <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente</xref:System.Data.DataSet.Merge%2A>       In un&quot;applicazione client, è comune disporre di un singolo pulsante che l&quot;utente può fare clic per raccoglie i dati modificati e convalidarli prima di inviarlo a un componente di livello intermedio. In questo scenario, il <xref:System.Data.DataSet.GetChanges%2A>metodo viene richiamato prima.</xref:System.Data.DataSet.GetChanges%2A> Questo metodo restituisce un secondo <xref:System.Data.DataSet>con ottimizzazione per la convalida e l&quot;unione.</xref:System.Data.DataSet> Il secondo <xref:System.Data.DataSet>oggetto contiene solo gli <xref:System.Data.DataTable> <xref:System.Data.DataRow>oggetti che sono stati modificati, rappresenta un sottoinsieme dell&quot;originale <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> Questo subset è in genere più piccoli e di conseguenza in modo più efficiente passato a un componente di livello intermedio. Il componente di livello intermedio quindi aggiorna l&quot;origine dei dati con le modifiche mediante le stored procedure. Il livello intermedio possa quindi inviare un nuovo oggetto <xref:System.Data.DataSet>che include i dati originali e i dati più recenti dall&quot;origine dati (per eseguire nuovamente la query originale) oppure può inviare nuovamente il subset con eventuali modifiche apportate all&quot;origine dati.</xref:System.Data.DataSet> (Ad esempio, se l&quot;origine dati crea automaticamente i valori di chiave primaria univoci, questi valori possono essere propagati all&quot;applicazione client.) In entrambi i casi, l&quot;oggetto restituito <xref:System.Data.DataSet>possono essere reinseriti nell&quot;originale dell&quot;applicazione client <xref:System.Data.DataSet>con il <xref:System.Data.DataSet.Merge%2A>metodo.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando il <xref:System.Data.DataSet.Merge%2A>metodo viene chiamato, gli schemi dei due <xref:System.Data.DataSet>gli oggetti confrontati perché è possibile che gli schemi sia stati modificati.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Ad esempio, in uno scenario business-to-business, potrebbero sono state aggiunte nuove colonne a uno schema XML da un processo automatizzato. Se l&quot;origine <xref:System.Data.DataSet>contiene gli elementi dello schema (aggiunto <xref:System.Data.DataColumn>oggetti) che non sono presenti nel database di destinazione, è possono aggiungere gli elementi dello schema di destinazione impostando il `missingSchemaAction` argomento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> In questo caso, l&quot;oggetto unito <xref:System.Data.DataSet>contiene lo schema e aggiunti dati.</xref:System.Data.DataSet>       Dopo l&quot;unione di schemi, i dati vengono uniti.       Quando si uniscono una nuova origine <xref:System.Data.DataSet>nella destinazione, qualsiasi origine righe con un <xref:System.Data.DataRowState>valore `Unchanged`, `Modified`, o `Deleted` corrispondenti alle righe di destinazione con gli stessi valori di chiave primari.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Le righe di origine un <xref:System.Data.DataRowState>valore `Added` corrispondenti alle nuove righe di destinazione con gli stessi valori di chiave primari delle nuove righe di origine.</xref:System.Data.DataRowState>       Durante un&quot;operazione di unione, i vincoli sono disabilitati. Se non è possibile abilitare tutti i vincoli alla fine dell&quot;unione, un <xref:System.Data.ConstraintException>viene generato e i dati uniti verranno mantenuti, mentre i vincoli sono disabilitati.</xref:System.Data.ConstraintException> In questo caso, il <xref:System.Data.DataSet.EnforceConstraints%2A>è impostata su `false`, e tutte le righe che non sono validi sono segnalate come errori.</xref:System.Data.DataSet.EnforceConstraints%2A> È necessario risolvere gli errori prima di tentare di reimpostare il <xref:System.Data.DataSet.EnforceConstraints%2A>proprietà `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  syntax:
    content: public void Merge (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Matrice di <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> oggetti da unire il <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet)
  id: Merge(System.Data.DataSet)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet)
  nameWithType: DataSet.Merge(DataSet)
  fullName: System.Data.DataSet.Merge(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Unisce un oggetto <xref href=&quot;System.Data.DataSet&quot;> </xref> e il relativo schema nell&quot;oggetto corrente <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
  remarks: "Il metodo di tipo Merge viene utilizzato per unire due <xref:System.Data.DataSet>gli oggetti che contengono schemi molto simili.</xref:System.Data.DataSet> Un&quot;unione è in genere utilizzata in un&quot;applicazione client per rendere effettive le modifiche più recenti da un&quot;origine dati in un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente In questo modo l&quot;applicazione client per un aggiornamento <xref:System.Data.DataSet>con i dati più recenti dall&quot;origine dati.</xref:System.Data.DataSet>       In genere viene chiamato il metodo di tipo Merge alla fine di una serie di procedure che comportano la convalida delle modifiche, la risoluzione degli errori, aggiornare l&quot;origine dati con le modifiche e infine l&quot;aggiornamento di <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente       In un&quot;applicazione client, è comune disporre di un singolo pulsante che l&quot;utente può fare clic per raccoglie i dati modificati e convalidarli prima di inviarlo a un componente di livello intermedio. In questo scenario, il <xref:System.Data.DataSet.GetChanges%2A>metodo viene richiamato prima.</xref:System.Data.DataSet.GetChanges%2A> Questo metodo restituisce un secondo <xref:System.Data.DataSet>con ottimizzazione per la convalida e l&quot;unione.</xref:System.Data.DataSet> Il secondo <xref:System.Data.DataSet>oggetto contiene solo gli <xref:System.Data.DataTable> <xref:System.Data.DataRow>oggetti che sono stati modificati, rappresenta un sottoinsieme dell&quot;originale <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> Questo subset è generalmente di dimensioni ridotte e pertanto più efficiente passare a un componente di livello intermedio. Il componente di livello intermedio quindi aggiorna l&quot;origine dei dati con le modifiche mediante le stored procedure. Il livello intermedio possa quindi inviare un nuovo oggetto <xref:System.Data.DataSet>che include i dati originali e i dati più recenti dall&quot;origine dati (per eseguire nuovamente la query originale) oppure può inviare nuovamente il subset con eventuali modifiche apportate all&quot;origine dati.</xref:System.Data.DataSet> (Ad esempio, se l&quot;origine dati crea automaticamente i valori di chiave primaria univoci, questi valori possono essere propagati all&quot;applicazione client.) In entrambi i casi, l&quot;oggetto restituito <xref:System.Data.DataSet>possono essere reinseriti nell&quot;originale dell&quot;applicazione client <xref:System.Data.DataSet>con il metodo di tipo Merge.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando viene chiamato il metodo di tipo Merge, gli schemi dei due <xref:System.Data.DataSet>gli oggetti confrontati perché è possibile che gli schemi sia stati modificati.</xref:System.Data.DataSet> Ad esempio, in uno scenario business-to-business, potrebbero sono state aggiunte nuove colonne a uno schema XML da un processo automatizzato. Se l&quot;origine <xref:System.Data.DataSet>contiene gli elementi dello schema (aggiunto <xref:System.Data.DataColumn>oggetti) che non sono presenti nel database di destinazione, è possono aggiungere gli elementi dello schema di destinazione impostando il `missingSchemaAction` argomento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> In questo caso, l&quot;oggetto unito <xref:System.Data.DataSet>contiene lo schema e aggiunti dati.</xref:System.Data.DataSet>       Dopo l&quot;unione di schemi, i dati vengono uniti.       Quando si uniscono una nuova origine <xref:System.Data.DataSet>nella destinazione, qualsiasi origine righe con un <xref:System.Data.DataRowState>valore `Unchanged`, `Modified`, o `Deleted` corrispondenti alle righe di destinazione con gli stessi valori di chiave primari.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Le righe di origine un `DataRowState` valore `Added` corrispondenti alle nuove righe di destinazione con gli stessi valori di chiave primari delle nuove righe di origine.       Durante un&quot;operazione di unione, i vincoli sono disabilitati. Se non è possibile abilitare tutti i vincoli alla fine dell&quot;unione, un <xref:System.Data.ConstraintException>viene generato e i dati uniti verranno mantenuti, mentre i vincoli sono disabilitati.</xref:System.Data.ConstraintException> In questo caso, il <xref:System.Data.DataSet.EnforceConstraints%2A>è impostata su `false`, e tutte le righe che non sono validi sono segnalate come errori.</xref:System.Data.DataSet.EnforceConstraints%2A> È necessario risolvere gli errori prima di tentare di reimpostare il <xref:System.Data.DataSet.EnforceConstraints%2A>proprietà `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and Merge methods on a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_2_1.vb)]\n [!code-cs[Classic WebData DataSet.Merge Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_2_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Il <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> verranno uniti i cui dati e dello schema."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Impossibile abilitare uno o più vincoli."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataTable)
  id: Merge(System.Data.DataTable)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataTable)
  nameWithType: DataSet.Merge(DataTable)
  fullName: System.Data.DataSet.Merge(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Unisce un oggetto <xref href=&quot;System.Data.DataTable&quot;> </xref> e il relativo schema nell&quot;oggetto corrente <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataSet.Merge%2A>metodo viene utilizzato per unire due <xref:System.Data.DataSet>gli oggetti che contengono schemi molto simili.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Un&quot;unione è in genere utilizzata in un&quot;applicazione client per rendere effettive le modifiche più recenti da un&quot;origine dati in un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente In questo modo l&quot;applicazione client per un aggiornamento <xref:System.Data.DataSet>con i dati più recenti dall&quot;origine dati.</xref:System.Data.DataSet>       Il <xref:System.Data.DataSet.Merge%2A>metodo viene in genere chiamato alla fine di una serie di procedure che implicano la convalida delle modifiche, la risoluzione degli errori, aggiornare l&quot;origine dati con le modifiche e infine l&quot;aggiornamento di <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente</xref:System.Data.DataSet.Merge%2A>       In un&quot;applicazione client, è comune disporre di un singolo pulsante che l&quot;utente può fare clic per raccoglie i dati modificati e convalidarli prima di inviarlo a un componente di livello intermedio. In questo scenario, il <xref:System.Data.DataSet.GetChanges%2A>metodo viene richiamato prima.</xref:System.Data.DataSet.GetChanges%2A> Questo metodo restituisce un secondo <xref:System.Data.DataSet>con ottimizzazione per la convalida e l&quot;unione.</xref:System.Data.DataSet> Il secondo <xref:System.Data.DataSet>oggetto contiene solo gli <xref:System.Data.DataTable> <xref:System.Data.DataRow>oggetti che sono stati modificati, rappresenta un sottoinsieme dell&quot;originale <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> Questo subset è generalmente di dimensioni ridotte e pertanto più efficiente passare a un componente di livello intermedio. Il componente di livello intermedio quindi aggiorna l&quot;origine dei dati con le modifiche mediante le stored procedure. Il livello intermedio possa quindi inviare un nuovo oggetto <xref:System.Data.DataSet>che include i dati originali e i dati più recenti dall&quot;origine dati (per eseguire nuovamente la query originale) oppure può inviare nuovamente il subset con eventuali modifiche apportate all&quot;origine dati.</xref:System.Data.DataSet> (Ad esempio, se l&quot;origine dati crea automaticamente i valori di chiave primaria univoci, questi valori possono essere propagati all&quot;applicazione client.) In entrambi i casi, l&quot;oggetto restituito <xref:System.Data.DataSet>possono essere reinseriti nell&quot;originale dell&quot;applicazione client <xref:System.Data.DataSet>con il <xref:System.Data.DataSet.Merge%2A>metodo.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando il <xref:System.Data.DataSet.Merge%2A>metodo viene chiamato, gli schemi dei due <xref:System.Data.DataSet>gli oggetti confrontati perché è possibile che gli schemi sia stati modificati.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Ad esempio, in uno scenario business-to-business, potrebbero sono state aggiunte nuove colonne a uno schema XML da un processo automatizzato. Se l&quot;origine <xref:System.Data.DataSet>contiene gli elementi dello schema (aggiunto <xref:System.Data.DataColumn>oggetti) che non sono presenti nel database di destinazione, è possono aggiungere gli elementi dello schema di destinazione impostando il `missingSchemaAction` argomento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> In questo caso, l&quot;oggetto unito <xref:System.Data.DataSet>contiene lo schema e aggiunti dati.</xref:System.Data.DataSet>       Dopo l&quot;unione di schemi, i dati vengono uniti.       Quando si uniscono una nuova origine <xref:System.Data.DataSet>nella destinazione, qualsiasi origine righe con un <xref:System.Data.DataRowState>valore `Unchanged`, `Modified`, o `Deleted` corrispondenti alle righe di destinazione con gli stessi valori di chiave primari.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Le righe di origine un `DataRowState` valore `Added` corrispondenti alle nuove righe di destinazione con gli stessi valori di chiave primari delle nuove righe di origine.       Durante un&quot;operazione di unione, i vincoli sono disabilitati. Se non è possibile abilitare tutti i vincoli alla fine dell&quot;unione, un <xref:System.Data.ConstraintException>viene generato e i dati uniti verranno mantenuti, mentre i vincoli sono disabilitati.</xref:System.Data.ConstraintException> In questo caso, il <xref:System.Data.DataSet.EnforceConstraints%2A>è impostata su `false`, e tutte le righe che non sono validi sono segnalate come errori.</xref:System.Data.DataSet.EnforceConstraints%2A> È necessario risolvere gli errori prima di tentare di reimpostare il <xref:System.Data.DataSet.EnforceConstraints%2A>proprietà `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is identical to the first. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_1_1.vb)]\n [!code-cs[Classic WebData DataSet.Merge3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_1_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Il <xref href=&quot;System.Data.DataTable&quot;> </xref> verranno uniti i cui dati e dello schema."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>table</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  id: Merge(System.Data.DataSet,System.Boolean)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet,Boolean)
  nameWithType: DataSet.Merge(DataSet,Boolean)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Unisce un oggetto <xref href=&quot;System.Data.DataSet&quot;> </xref> e il relativo schema nell&quot;oggetto corrente <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, mantenendo o ignorando eventuali modifiche apportate in questa <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> in base all&quot;argomento specificato."
  remarks: "Il <xref:System.Data.DataSet.Merge%2A>metodo viene utilizzato per unire due <xref:System.Data.DataSet>gli oggetti che contengono schemi molto simili.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Un&quot;unione è in genere utilizzata in un&quot;applicazione client per rendere effettive le modifiche più recenti da un&quot;origine dati in un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente In questo modo l&quot;applicazione client per un aggiornamento <xref:System.Data.DataSet>con i dati più recenti dall&quot;origine dati.</xref:System.Data.DataSet>       Il <xref:System.Data.DataSet.Merge%2A>metodo viene in genere chiamato alla fine di una serie di procedure che implicano la convalida delle modifiche, la risoluzione degli errori, aggiornare l&quot;origine dati con le modifiche e infine l&quot;aggiornamento di <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente</xref:System.Data.DataSet.Merge%2A>       In un&quot;applicazione client, è comune disporre di un singolo pulsante che l&quot;utente può fare clic per raccoglie i dati modificati e convalidarli prima di inviarlo a un componente di livello intermedio. In questo scenario, il <xref:System.Data.DataSet.GetChanges%2A>metodo viene richiamato prima.</xref:System.Data.DataSet.GetChanges%2A> Questo metodo restituisce un secondo <xref:System.Data.DataSet>con ottimizzazione per la convalida e l&quot;unione.</xref:System.Data.DataSet> Il secondo <xref:System.Data.DataSet>oggetto contiene solo gli <xref:System.Data.DataTable> <xref:System.Data.DataRow>oggetti che sono stati modificati, rappresenta un sottoinsieme dell&quot;originale <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> Questo subset è generalmente di dimensioni ridotte e pertanto più efficiente passare a un componente di livello intermedio. Il componente di livello intermedio quindi aggiorna l&quot;origine dei dati con le modifiche mediante le stored procedure. Il livello intermedio possa quindi inviare un nuovo oggetto <xref:System.Data.DataSet>che include i dati originali e i dati più recenti dall&quot;origine dati (per eseguire nuovamente la query originale) oppure può inviare nuovamente il subset con eventuali modifiche apportate all&quot;origine dati.</xref:System.Data.DataSet> (Ad esempio, se l&quot;origine dati crea automaticamente i valori di chiave primaria univoci, questi valori possono essere propagati all&quot;applicazione client.) In entrambi i casi, l&quot;oggetto restituito <xref:System.Data.DataSet>possono essere reinseriti nell&quot;originale dell&quot;applicazione client <xref:System.Data.DataSet>con il <xref:System.Data.DataSet.Merge%2A>metodo.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando il <xref:System.Data.DataSet.Merge%2A>metodo viene chiamato, gli schemi dei due <xref:System.Data.DataSet>gli oggetti confrontati perché è possibile che gli schemi sia stati modificati.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Ad esempio, in uno scenario business-to-business, potrebbero sono state aggiunte nuove colonne a uno schema XML da un processo automatizzato. Se l&quot;origine <xref:System.Data.DataSet>contiene gli elementi dello schema (aggiunto <xref:System.Data.DataColumn>oggetti) che non sono presenti nel database di destinazione, è possono aggiungere gli elementi dello schema di destinazione impostando il `missingSchemaAction` argomento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> In questo caso, l&quot;oggetto unito <xref:System.Data.DataSet>contiene lo schema e aggiunti dati.</xref:System.Data.DataSet>       Dopo l&quot;unione di schemi, i dati vengono uniti.       Quando si uniscono una nuova origine <xref:System.Data.DataSet>nella destinazione, qualsiasi origine righe con un <xref:System.Data.DataRowState>valore `Unchanged`, `Modified`, o `Deleted` corrispondenti alle righe di destinazione con gli stessi valori di chiave primari.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Le righe di origine un `DataRowState` valore `Added` corrispondenti alle nuove righe di destinazione con gli stessi valori di chiave primari delle nuove righe di origine.       Durante un&quot;operazione di unione, i vincoli sono disabilitati. Se non è possibile abilitare tutti i vincoli alla fine dell&quot;unione, un <xref:System.Data.ConstraintException>viene generato e i dati uniti verranno mantenuti, mentre i vincoli sono disabilitati.</xref:System.Data.ConstraintException> In questo caso, il <xref:System.Data.DataSet.EnforceConstraints%2A>è impostata su `false`, e tutte le righe che non sono validi sono segnalate come errori.</xref:System.Data.DataSet.EnforceConstraints%2A> È necessario risolvere gli errori prima di tentare di reimpostare il <xref:System.Data.DataSet.EnforceConstraints%2A>proprietà `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. After adding ten rows, two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.me_0_1.cs)]\n [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.me_0_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Il <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> verranno uniti i cui dati e dello schema."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per mantenere le modifiche nell&quot;oggetto <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataRow[],Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Unisce una matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti in corrente <xref href=&quot;System.Data.DataSet&quot;> </xref>, mantenendo o ignorando eventuali modifiche apportate il <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> e la gestione di uno schema incompatibile in base agli argomenti specificati."
  remarks: "Il <xref:System.Data.DataSet.Merge%2A>metodo viene utilizzato per unire due <xref:System.Data.DataSet>gli oggetti che contengono schemi molto simili.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Un&quot;unione è in genere utilizzata in un&quot;applicazione client per rendere effettive le modifiche più recenti da un&quot;origine dati in un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente In questo modo l&quot;applicazione client per un aggiornamento <xref:System.Data.DataSet>con i dati più recenti dall&quot;origine dati.</xref:System.Data.DataSet>       Il <xref:System.Data.DataSet.Merge%2A>metodo viene in genere chiamato alla fine di una serie di procedure che implicano la convalida delle modifiche, la risoluzione degli errori, aggiornare l&quot;origine dati con le modifiche e infine l&quot;aggiornamento di <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente</xref:System.Data.DataSet.Merge%2A>       In un&quot;applicazione client, è comune disporre di un singolo pulsante che l&quot;utente può fare clic per raccoglie i dati modificati e convalidarli prima di inviarlo a un componente di livello intermedio. In questo scenario, il <xref:System.Data.DataSet.GetChanges%2A>metodo viene richiamato prima.</xref:System.Data.DataSet.GetChanges%2A> Questo metodo restituisce un secondo <xref:System.Data.DataSet>con ottimizzazione per la convalida e l&quot;unione.</xref:System.Data.DataSet> Il secondo <xref:System.Data.DataSet>oggetto contiene solo gli <xref:System.Data.DataTable> <xref:System.Data.DataRow>oggetti che sono stati modificati, rappresenta un sottoinsieme dell&quot;originale <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> Questo subset è generalmente di dimensioni ridotte e pertanto più efficiente passare a un componente di livello intermedio. Il componente di livello intermedio quindi aggiorna l&quot;origine dei dati con le modifiche mediante le stored procedure. Il livello intermedio possa quindi inviare un nuovo oggetto <xref:System.Data.DataSet>che include i dati originali e i dati più recenti dall&quot;origine dati (per eseguire nuovamente la query originale) oppure può inviare nuovamente il subset con eventuali modifiche apportate all&quot;origine dati.</xref:System.Data.DataSet> (Ad esempio, se l&quot;origine dati crea automaticamente i valori di chiave primaria univoci, questi valori possono essere propagati all&quot;applicazione client.) In entrambi i casi, l&quot;oggetto restituito <xref:System.Data.DataSet>possono essere reinseriti nell&quot;originale dell&quot;applicazione client <xref:System.Data.DataSet>con il <xref:System.Data.DataSet.Merge%2A>metodo.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Per semplificare la descrizione del <xref:System.Data.DataSet.Merge%2A>, abbiamo utilizzato &quot;target&quot; per indicare corrente <xref:System.Data.DataSet>e &quot;source&quot; per indicare il secondo (parametro) <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> La destinazione <xref:System.Data.DataSet>tale nome perché si tratta dell&quot;oggetto su cui si verifica un&quot;azione (unione).</xref:System.Data.DataSet> Il secondo <xref:System.Data.DataSet>viene chiamato &quot;origine&quot; perché le informazioni in esso contenute non cambiano, ma vengono unite in <xref:System.Data.DataSet>.</xref:System.Data.DataSet> corrente</xref:System.Data.DataSet>       Quando il <xref:System.Data.DataSet.Merge%2A>metodo viene chiamato, gli schemi dei due <xref:System.Data.DataSet>gli oggetti confrontati perché è possibile che gli schemi sia stati modificati.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Ad esempio, in uno scenario business-to-business, potrebbero sono state aggiunte nuove colonne a uno schema XML da un processo automatizzato. Se l&quot;origine <xref:System.Data.DataSet>contiene gli elementi dello schema (aggiunto <xref:System.Data.DataColumn>oggetti) che non sono presenti nel database di destinazione, è possono aggiungere gli elementi dello schema di destinazione impostando il `missingSchemaAction` argomento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> In questo caso, l&quot;oggetto unito <xref:System.Data.DataSet>contiene lo schema e aggiunti dati.</xref:System.Data.DataSet>       Dopo l&quot;unione di schemi, i dati vengono uniti.       Quando si uniscono una nuova origine <xref:System.Data.DataSet>nella destinazione, qualsiasi origine righe con un <xref:System.Data.DataRowState>valore `Unchanged`, `Modified`, o `Deleted` corrispondenti alle righe di destinazione con gli stessi valori di chiave primari.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Le righe di origine un `DataRowState` valore `Added` corrispondenti alle nuove righe di destinazione con gli stessi valori di chiave primari delle nuove righe di origine.       Durante un&quot;operazione di unione, i vincoli sono disabilitati. Se non è possibile abilitare tutti i vincoli alla fine dell&quot;unione, un <xref:System.Data.ConstraintException>viene generato e i dati uniti verranno mantenuti, mentre i vincoli sono disabilitati.</xref:System.Data.ConstraintException> In questo caso, il <xref:System.Data.DataSet.EnforceConstraints%2A>è impostata su `false`, e tutte le righe che non sono validi sono segnalate come errori.</xref:System.Data.DataSet.EnforceConstraints%2A> È necessario risolvere gli errori prima di tentare di reimpostare il <xref:System.Data.DataSet.EnforceConstraints%2A>proprietà `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  syntax:
    content: public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti da unire il <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per mantenere le modifiche nel <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "Uno del <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> valori."
  overload: System.Data.DataSet.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataSet,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Unisce un oggetto <xref href=&quot;System.Data.DataSet&quot;> </xref> e il relativo schema corrente <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, mantenendo o annullamento di modifiche nell&quot;oggetto <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> e la gestione di uno schema incompatibile in base agli argomenti specificati."
  remarks: "Il <xref:System.Data.DataSet.Merge%2A>metodo viene utilizzato per unire due <xref:System.Data.DataSet>gli oggetti che contengono schemi molto simili.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Un&quot;unione è in genere utilizzata in un&quot;applicazione client per rendere effettive le modifiche più recenti da un&quot;origine dati in un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente In questo modo l&quot;applicazione client per un aggiornamento <xref:System.Data.DataSet>con i dati più recenti dall&quot;origine dati.</xref:System.Data.DataSet>       Il <xref:System.Data.DataSet.Merge%2A>metodo viene in genere chiamato alla fine di una serie di procedure che implicano la convalida delle modifiche, la risoluzione degli errori, aggiornare l&quot;origine dati con le modifiche e infine l&quot;aggiornamento di <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente</xref:System.Data.DataSet.Merge%2A>       In un&quot;applicazione client, è comune disporre di un singolo pulsante che l&quot;utente può fare clic per raccoglie i dati modificati e convalidarli prima di inviarlo a un componente di livello intermedio. In questo scenario, il <xref:System.Data.DataSet.GetChanges%2A>metodo viene richiamato prima.</xref:System.Data.DataSet.GetChanges%2A> Questo metodo restituisce un secondo <xref:System.Data.DataSet>con ottimizzazione per la convalida e l&quot;unione.</xref:System.Data.DataSet> Il secondo <xref:System.Data.DataSet>oggetto contiene solo gli <xref:System.Data.DataTable> <xref:System.Data.DataRow>oggetti che sono stati modificati, rappresenta un sottoinsieme dell&quot;originale <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> Questo subset è generalmente di dimensioni ridotte e pertanto più efficiente passare a un componente di livello intermedio. Il componente di livello intermedio quindi aggiorna l&quot;origine dei dati con le modifiche mediante le stored procedure. Il livello intermedio possa quindi inviare un nuovo oggetto <xref:System.Data.DataSet>che include i dati originali e i dati più recenti dall&quot;origine dati (per eseguire nuovamente la query originale) oppure può inviare nuovamente il subset con eventuali modifiche apportate all&quot;origine dati.</xref:System.Data.DataSet> (Ad esempio, se l&quot;origine dati crea automaticamente i valori di chiave primaria univoci, questi valori possono essere propagati all&quot;applicazione client.) In entrambi i casi, l&quot;oggetto restituito <xref:System.Data.DataSet>possono essere reinseriti nell&quot;originale dell&quot;applicazione client <xref:System.Data.DataSet>con il <xref:System.Data.DataSet.Merge%2A>metodo.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Per semplificare la descrizione del <xref:System.Data.DataSet.Merge%2A>, abbiamo utilizzato &quot;target&quot; per indicare corrente <xref:System.Data.DataSet>e &quot;source&quot; per indicare il secondo (parametro) <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> La destinazione <xref:System.Data.DataSet>tale nome perché si tratta dell&quot;oggetto su cui si verifica un&quot;azione (unione).</xref:System.Data.DataSet> Il secondo <xref:System.Data.DataSet>viene chiamato &quot;origine&quot; perché le informazioni in esso contenute non cambiano, ma vengono unite in <xref:System.Data.DataSet>.</xref:System.Data.DataSet> corrente</xref:System.Data.DataSet>       Quando il <xref:System.Data.DataSet.Merge%2A>metodo viene chiamato, gli schemi dei due <xref:System.Data.DataSet>gli oggetti confrontati perché è possibile che gli schemi sia stati modificati.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Ad esempio, in uno scenario business-to-business, potrebbero sono state aggiunte nuove colonne a uno schema XML da un processo automatizzato. Se l&quot;origine <xref:System.Data.DataSet>contiene gli elementi dello schema (aggiunto <xref:System.Data.DataColumn>oggetti) che non sono presenti nel database di destinazione, è possono aggiungere gli elementi dello schema di destinazione impostando il `missingSchemaAction` argomento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> In questo caso, l&quot;oggetto unito <xref:System.Data.DataSet>contiene lo schema e aggiunti dati.</xref:System.Data.DataSet>       Dopo l&quot;unione di schemi, i dati vengono uniti.       Quando si uniscono una nuova origine <xref:System.Data.DataSet>nella destinazione, qualsiasi origine righe con un <xref:System.Data.DataRowState>valore `Unchanged`, `Modified`, o `Deleted` corrispondenti alle righe di destinazione con gli stessi valori di chiave primari.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Le righe di origine un `DataRowState` valore `Added` corrispondenti alle nuove righe di destinazione con gli stessi valori di chiave primari delle nuove righe di origine.       Durante un&quot;operazione di unione, i vincoli sono disabilitati. Se non è possibile abilitare tutti i vincoli alla fine dell&quot;unione, un <xref:System.Data.ConstraintException>viene generato e i dati uniti verranno mantenuti, mentre i vincoli sono disabilitati.</xref:System.Data.ConstraintException> In questo caso, il <xref:System.Data.DataSet.EnforceConstraints%2A>è impostata su `false`, e tutte le righe che non sono validi sono segnalate come errori.</xref:System.Data.DataSet.EnforceConstraints%2A> È necessario risolvere gli errori prima di tentare di reimpostare il <xref:System.Data.DataSet.EnforceConstraints%2A>proprietà `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. Two values are changed, and one row is added. A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method. After reconciling errors, a new column is added to the subset, changing the schema. When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.  \n  \n [!code-cs[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/csharp/e5f91548-401c-49b5-ab4b-_1.cs)]\n [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/add/codesnippet/visualbasic/e5f91548-401c-49b5-ab4b-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Il <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> verranno uniti i cui dati e dello schema."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per mantenere le modifiche nell&quot;oggetto <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "Uno del <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> valori."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Unisce un oggetto <xref href=&quot;System.Data.DataTable&quot;> </xref> e il relativo schema nell&quot;oggetto corrente <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>, mantenendo o ignorando eventuali modifiche apportate il <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> e la gestione di uno schema incompatibile in base agli argomenti specificati."
  remarks: "Il <xref:System.Data.DataSet.Merge%2A>metodo viene utilizzato per unire due <xref:System.Data.DataSet>gli oggetti che contengono schemi molto simili.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Un&quot;unione è in genere utilizzata in un&quot;applicazione client per rendere effettive le modifiche più recenti da un&quot;origine dati in un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente In questo modo l&quot;applicazione client per un aggiornamento <xref:System.Data.DataSet>con i dati più recenti dall&quot;origine dati.</xref:System.Data.DataSet>       Il <xref:System.Data.DataSet.Merge%2A>metodo viene in genere chiamato alla fine di una serie di procedure che implicano la convalida delle modifiche, la risoluzione degli errori, aggiornare l&quot;origine dati con le modifiche e infine l&quot;aggiornamento di <xref:System.Data.DataSet>.</xref:System.Data.DataSet> esistente</xref:System.Data.DataSet.Merge%2A>       Applicazione client è comune disporre di un singolo pulsante che l&quot;utente può fare clic per raccoglie i dati modificati e convalidarli prima di inviarlo a un componente di livello intermedio. In questo scenario, il <xref:System.Data.DataSet.GetChanges%2A>metodo viene richiamato prima.</xref:System.Data.DataSet.GetChanges%2A> Questo metodo restituisce un secondo <xref:System.Data.DataSet>con ottimizzazione per la convalida e l&quot;unione.</xref:System.Data.DataSet> Il secondo <xref:System.Data.DataSet>oggetto contiene solo gli <xref:System.Data.DataTable> <xref:System.Data.DataRow>oggetti che sono stati modificati, rappresenta un sottoinsieme dell&quot;originale <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataSet> Questo subset è generalmente di dimensioni ridotte e pertanto più efficiente passare a un componente di livello intermedio. Il componente di livello intermedio quindi aggiorna l&quot;origine dei dati con le modifiche mediante le stored procedure. Il livello intermedio possa quindi inviare un nuovo oggetto <xref:System.Data.DataSet>che include i dati originali e i dati più recenti dall&quot;origine dati (per eseguire nuovamente la query originale) oppure può inviare nuovamente il subset con eventuali modifiche apportate all&quot;origine dati.</xref:System.Data.DataSet> (Ad esempio, se l&quot;origine dati crea automaticamente i valori di chiave primaria univoci, questi valori possono essere propagati all&quot;applicazione client.) In entrambi i casi, l&quot;oggetto restituito <xref:System.Data.DataSet>possono essere reinseriti nell&quot;originale dell&quot;applicazione client <xref:System.Data.DataSet>con il <xref:System.Data.DataSet.Merge%2A>metodo.</xref:System.Data.DataSet.Merge%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando il <xref:System.Data.DataSet.Merge%2A>metodo viene chiamato, gli schemi dei due <xref:System.Data.DataSet>gli oggetti confrontati perché è possibile che gli schemi sia stati modificati.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Merge%2A> Ad esempio, in uno scenario business-to-business, potrebbero sono state aggiunte nuove colonne a uno schema XML da un processo automatizzato. Se l&quot;origine <xref:System.Data.DataSet>contiene gli elementi dello schema (aggiunto <xref:System.Data.DataColumn>oggetti) che non sono presenti nel database di destinazione, è possono aggiungere gli elementi dello schema di destinazione impostando il `missingSchemaAction` argomento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataSet> In questo caso, l&quot;oggetto unito <xref:System.Data.DataSet>contiene lo schema e aggiunti dati.</xref:System.Data.DataSet>       Dopo l&quot;unione di schemi, i dati vengono uniti.       Quando si uniscono una nuova origine <xref:System.Data.DataSet>nella destinazione, qualsiasi origine righe con un <xref:System.Data.DataRowState>valore `Unchanged`, `Modified`, o `Deleted` corrispondenti alle righe di destinazione con gli stessi valori di chiave primari.</xref:System.Data.DataRowState> </xref:System.Data.DataSet> Le righe di origine un `DataRowState` valore `Added` corrispondenti alle nuove righe di destinazione con gli stessi valori di chiave primari delle nuove righe di origine.       Durante un&quot;operazione di unione, i vincoli sono disabilitati. Se non è possibile abilitare tutti i vincoli alla fine dell&quot;unione, un <xref:System.Data.ConstraintException>viene generato e i dati uniti verranno mantenuti, mentre i vincoli sono disabilitati.</xref:System.Data.ConstraintException> In questo caso, il <xref:System.Data.DataSet.EnforceConstraints%2A>è impostata su `false`, e tutte le righe che non sono validi sono segnalate come errori.</xref:System.Data.DataSet.EnforceConstraints%2A> È necessario risolvere gli errori prima di tentare di reimpostare il <xref:System.Data.DataSet.EnforceConstraints%2A>proprietà `true`.</xref:System.Data.DataSet.EnforceConstraints%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows. A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table. Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.  \n  \n [!code-cs[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/csharp/a63745f5-1a9e-4fc7-9c61-_1.cs)]\n [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/add/codesnippet/visualbasic/a63745f5-1a9e-4fc7-9c61-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Il <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref> verranno uniti i cui dati e dello schema."
    - id: preserveChanges
      type: System.Boolean
      description: "Uno del <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> valori."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per mantenere le modifiche nel <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref>; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.Merge*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dataSet</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Data.DataSet.MergeFailed
  id: MergeFailed
  parent: System.Data.DataSet
  langs:
  - csharp
  name: MergeFailed
  nameWithType: DataSet.MergeFailed
  fullName: System.Data.DataSet.MergeFailed
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica quando l&quot;origine e destinazione <xref href=&quot;System.Data.DataRow&quot;> </xref> hanno la stessa chiave primaria e <xref:System.Data.DataSet.EnforceConstraints*>è impostata su true.</xref:System.Data.DataSet.EnforceConstraints*>"
  remarks: 'Per ulteriori informazioni sulla gestione degli eventi, vedere [NIB: utilizzo degli eventi](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - "The following example demonstrates the use of the MergeFailed event.  \n  \n [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/visualbasic/e-system.data.dataset.me_1.vb)]\n [!code-cs[Classic WebData DataSet.MergeFailed Example#1](~/add/codesnippet/csharp/e-system.data.dataset.me_1.cs)]"
  syntax:
    content: public event System.Data.MergeFailedEventHandler MergeFailed;
    return:
      type: System.Data.MergeFailedEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Namespace
  id: Namespace
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Namespace
  nameWithType: DataSet.Namespace
  fullName: System.Data.DataSet.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta lo spazio dei nomi di <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "La proprietà Namespace viene utilizzata durante la lettura e scrittura di un XML documento nel <xref:System.Data.DataSet>utilizzando il <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, o <xref:System.Data.DataSet.WriteXmlSchema%2A>metodi.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet>       Lo spazio dei nomi di un documento XML viene utilizzato per definire l&quot;ambito di attributi ed elementi durante la lettura in un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> XML Ad esempio, se un <xref:System.Data.DataSet>contiene uno schema che è stato letto da un documento con lo spazio dei nomi &quot;myCompany&quot; e viene effettuato un tentativo di leggere i dati solo da un documento con uno spazio dei nomi diversi, tutti i dati che non corrispondano allo schema esistente viene ignorati.</xref:System.Data.DataSet>"
  example:
  - "The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \n  \n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.na_1.vb)]\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.na_1.cs)]"
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "Lo spazio dei nomi di <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.DataSet.Namespace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Lo spazio dei nomi contiene già dei dati."
  platform:
  - net462
- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genera l&quot;evento OnPropertyChanging."
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "Oggetto <xref:System.ComponentModel.PropertyChangedEventArgs>che contiene i dati dell&quot;evento.</xref:System.ComponentModel.PropertyChangedEventArgs>"
  overload: System.Data.DataSet.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  id: OnRemoveRelation(System.Data.DataRelation)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnRemoveRelation(DataRelation)
  nameWithType: DataSet.OnRemoveRelation(DataRelation)
  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica quando un <xref href=&quot;System.Data.DataRelation&quot;> </xref> oggetto viene rimosso da un <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Questo metodo deve essere sottoposto a override dalle sottoclassi per limitare la rimozione di tabelle"
  syntax:
    content: protected virtual void OnRemoveRelation (System.Data.DataRelation relation);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "Il <xref href=&quot;System.Data.DataRelation&quot;> </xref> da rimuovere."
  overload: System.Data.DataSet.OnRemoveRelation*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  id: OnRemoveTable(System.Data.DataTable)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: OnRemoveTable(DataTable)
  nameWithType: DataSet.OnRemoveTable(DataTable)
  fullName: System.Data.DataSet.OnRemoveTable(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica quando un <xref href=&quot;System.Data.DataTable&quot;> </xref> viene rimosso da un <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Questo metodo può essere sottoposto a override per limitare le tabelle da viene rimosso il."
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> with the OnRemoveTable method overridden.  \n  \n [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.on_1.vb)]\n [!code-cs[Classic WebData DataSet.OnRemoveTable Example#1](~/add/codesnippet/csharp/m-system.data.dataset.on_1.cs)]"
  syntax:
    content: protected virtual void OnRemoveTable (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Il <xref href=&quot;System.Data.DataTable&quot;> </xref> da rimuovere."
  overload: System.Data.DataSet.OnRemoveTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Prefix
  id: Prefix
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Prefix
  nameWithType: DataSet.Prefix
  fullName: System.Data.DataSet.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta un prefisso XML che rappresenta l&quot;alias lo spazio dei nomi di <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "La proprietà Prefix è utilizzata in un documento XML per identificare gli elementi appartenenti allo spazio dei nomi di <xref:System.Data.DataSet>oggetto (secondo l&quot;impostazione di <xref:System.Data.DataSet.Namespace%2A>proprietà).</xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example sets the Prefix before calling the <xref:System.Data.DataSet.ReadXml%2A> method.  \n  \n [!code-vb[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.pr_1.vb)]\n [!code-cs[Classic WebData DataSet.Namespace Example#1](~/add/codesnippet/csharp/p-system.data.dataset.pr_1.cs)]"
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "Il prefisso XML per il <xref href=&quot;System.Data.DataSet&quot;> </xref> dello spazio dei nomi."
  overload: System.Data.DataSet.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataSet.RaisePropertyChanging(String)
  fullName: System.Data.DataSet.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Invia una notifica che l&quot;oggetto specificato <xref href=&quot;System.Data.DataSet&quot;> </xref> proprietà sta per essere modificata."
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "Il nome della proprietà che sta per essere modificata."
  overload: System.Data.DataSet.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.Stream)
  id: ReadXml(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(Stream)
  nameWithType: DataSet.ReadXml(Stream)
  fullName: System.Data.DataSet.ReadXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema e dati di <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzando l&quot;oggetto specificato &lt;xref:System.IO.Stream?displayProperty=fullName&gt;."
  remarks: "Il <xref:System.Data.DataSet.ReadXml%2A>metodo fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataSet>da un documento XML, mentre il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati e schema, utilizzare uno del `ReadXML` overload che include il `mode` parametro e impostarne il valore su `ReadSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataSet`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione.       Se lo Schema XML per un <xref:System.Data.DataSet>include `targetNamespace`, non è possibile leggere i dati e che vengano generate eccezioni quando si chiama <xref:System.Data.DataSet.ReadXml%2A>per caricare il <xref:System.Data.DataSet>con XML che contiene gli elementi senza spazio dei nomi validi.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Per leggere elementi non qualificati, impostare `elementFormDefault` uguale a &quot;qualified&quot; nello Schema XML, come illustrato nell&quot;esempio seguente.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con <xref:System.Data.DataSet.ReadXml%2A>specificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_7_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_7_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Oggetto che deriva da <xref:System.IO.Stream>.</xref:System.IO.Stream>"
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)
  id: ReadXml(System.IO.TextReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(TextReader)
  nameWithType: DataSet.ReadXml(TextReader)
  fullName: System.Data.DataSet.ReadXml(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema e dati di <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzando l&quot;oggetto specificato &lt;xref:System.IO.TextReader?displayProperty=fullName&gt;."
  remarks: "Il <xref:System.Data.DataSet.ReadXml%2A>metodo fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataSet>da un documento XML, mentre il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati e schema, utilizzare uno del `ReadXML` overload che include il `mode` parametro e impostarne il valore su `ReadSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataSet`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione.       Se lo Schema XML per un <xref:System.Data.DataSet>include `targetNamespace`, non è possibile leggere i dati e che vengano generate eccezioni quando si chiama <xref:System.Data.DataSet.ReadXml%2A>per caricare il <xref:System.Data.DataSet>con XML che contiene gli elementi senza spazio dei nomi validi.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Per leggere elementi non qualificati, impostare `elementFormDefault` uguale a &quot;qualified&quot; nello Schema XML come illustrato nell&quot;esempio seguente.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```Le classi che ereditano dalla <xref:System.IO.TextReader>classe include il <xref:System.IO.StreamReader>e <xref:System.IO.StringReader>classi.</xref:System.IO.StringReader> </xref:System.IO.StreamReader> </xref:System.IO.TextReader>      > [!NOTE] > Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con <xref:System.Data.DataSet.ReadXml%2A>specificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_3_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_3_1.cs)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Il <xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> da cui leggere lo schema e i dati."
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.String)
  id: ReadXml(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(String)
  nameWithType: DataSet.ReadXml(String)
  fullName: System.Data.DataSet.ReadXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema e dati di <xref href=&quot;System.Data.DataSet&quot;> </xref> usando il file specificato."
  remarks: "Il <xref:System.Data.DataSet.ReadXml%2A>metodo fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataSet>da un documento XML, mentre il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati e schema, utilizzare uno del `ReadXML` overload che include il `mode` parametro e impostarne il valore su `ReadSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataSet`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione.       Se lo Schema XML per un <xref:System.Data.DataSet>include un `targetNamespace`, non è possibile leggere i dati e che vengano generate eccezioni quando si chiama <xref:System.Data.DataSet.ReadXml%2A>per caricare il <xref:System.Data.DataSet>con XML che contiene gli elementi senza spazio dei nomi validi.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Per leggere elementi non qualificati, impostare `elementFormDefault` uguale a &quot;qualified&quot; nello Schema XML come illustrato nell&quot;esempio seguente.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con <xref:System.Data.DataSet.ReadXml%2A>specificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_1_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_1_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Il nome del file (incluso il percorso) da cui leggere."
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataSet.ReadXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>non è impostata su <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(XmlReader)
  nameWithType: DataSet.ReadXml(XmlReader)
  fullName: System.Data.DataSet.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema e dati di <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzando l&quot;oggetto specificato &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt;."
  remarks: "Il metodo ReadXml fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataSet>da un documento XML, mentre il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> Per leggere i dati e schema, utilizzare uno del `ReadXML` overload che include il `mode` parametro e impostarne il valore su `ReadSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataSet`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione.       Se lo Schema XML per un <xref:System.Data.DataSet>include un `targetNamespace`, non è possibile leggere i dati e che vengano generate eccezioni quando si chiama ReadXml per caricare il <xref:System.Data.DataSet>con XML che contiene gli elementi senza spazio dei nomi validi.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Per leggere elementi non qualificati, impostare `elementFormDefault` uguale a &quot;qualified&quot; nello Schema XML come illustrato nell&quot;esempio seguente.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```       <xref:System.Xml.XmlTextReader?displayProperty=fullName>eredita da <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader></xref:System.Xml.XmlTextReader?displayProperty=fullName>      > [!NOTE] > Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con ReadXml specificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the ReadXml method is used to fill it with schema and data.  \n  \n [!code-cs[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_2_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_2_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Il <xref:System.Xml.XmlReader>da cui leggere.</xref:System.Xml.XmlReader>"
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  id: ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(Stream,XmlReadMode)
  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema e dati di <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzando l&quot;oggetto specificato &lt;xref:System.IO.Stream?displayProperty=fullName&gt; e <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataSet.ReadXml%2A>metodo fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataSet>da un documento XML, mentre il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati e schema, utilizzare uno del `ReadXML` overload che include il `mode` parametro e impostarne il valore su `ReadSchema`.       Lo stesso vale per il <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataSet`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Quando si utilizza ReadXml e si imposta <xref:System.Data.XmlReadMode>a `Diffgram`, il contenuto della destinazione `DataSet` originale e `DataSet` possono variare a causa delle modalità di generazione ed elaborazione diffgram.</xref:System.Data.XmlReadMode> Per ulteriori informazioni sui DiffGram, vedere [DiffGram](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione.       Se lo Schema XML per un <xref:System.Data.DataSet>include `targetNamespace`, non è possibile leggere i dati e che vengano generate eccezioni quando si chiama <xref:System.Data.DataSet.ReadXml%2A>per caricare il <xref:System.Data.DataSet>con XML che contiene gli elementi senza spazio dei nomi validi.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Per leggere elementi non qualificati, impostare `elementFormDefault` uguale a &quot;qualified&quot; nello Schema XML come illustrato nell&quot;esempio seguente.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con <xref:System.Data.DataSet.ReadXml%2A>specificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Il <xref:System.IO.Stream>da cui leggere.</xref:System.IO.Stream>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "Uno del <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> valori."
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  id: ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(TextReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema e dati di <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzando l&quot;oggetto specificato &lt;xref:System.IO.TextReader?displayProperty=fullName&gt; e <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataSet.ReadXml%2A>metodo fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataSet>da un documento XML, mentre il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati e schema, utilizzare uno del `ReadXML` overload che include il `mode` parametro e impostarne il valore su `ReadSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataSet`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione.       Se lo Schema XML per un <xref:System.Data.DataSet>include `targetNamespace`, non è possibile leggere i dati e che vengano generate eccezioni quando si chiama <xref:System.Data.DataSet.ReadXml%2A>per caricare il <xref:System.Data.DataSet>con XML che contiene gli elementi senza spazio dei nomi validi.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Per leggere elementi non qualificati, impostare `elementFormDefault` uguale a &quot;qualified&quot; nello Schema XML come illustrato nell&quot;esempio seguente.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con <xref:System.Data.DataSet.ReadXml%2A>specificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Il <xref:System.IO.TextReader>da cui leggere.</xref:System.IO.TextReader>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "Uno del <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> valori."
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  id: ReadXml(System.String,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(String,XmlReadMode)
  nameWithType: DataSet.ReadXml(String,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema e dati di <xref href=&quot;System.Data.DataSet&quot;> </xref> usando il file specificato e <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataSet.ReadXml%2A>metodo fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataSet>da un documento XML, mentre il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati e schema, utilizzare uno del `ReadXML` overload che include il `mode` parametro e impostarne il valore su `ReadSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataSet`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione.       Se lo Schema XML per un <xref:System.Data.DataSet>include un `targetNamespace`, non è possibile leggere i dati e che vengano generate eccezioni quando si chiama <xref:System.Data.DataSet.ReadXml%2A>per caricare il <xref:System.Data.DataSet>con XML che contiene gli elementi senza spazio dei nomi validi.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Per leggere elementi non qualificati, impostare `elementFormDefault` uguale a &quot;qualified&quot; nello Schema XML come illustrato nell&quot;esempio seguente.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con <xref:System.Data.DataSet.ReadXml%2A>specificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "Il nome del file (incluso il percorso) da cui leggere."
    - id: mode
      type: System.Data.XmlReadMode
      description: "Uno del <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> valori."
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataSet.ReadXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>non è impostata su <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  id: ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXml(XmlReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema e dati di <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzando l&quot;oggetto specificato &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt; e <xref href=&quot;System.Data.XmlReadMode&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataSet.ReadXml%2A>metodo fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataSet>da un documento XML, mentre il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati e schema, utilizzare uno del `ReadXML` overload che include il `mode` parametro e impostarne il valore su `ReadSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.WriteXml%2A>e <xref:System.Data.DataSet.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataSet`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione.       Se lo Schema XML per un <xref:System.Data.DataSet>include un `targetNamespace`, non è possibile leggere i dati e che vengano generate eccezioni quando si chiama <xref:System.Data.DataSet.ReadXml%2A>per caricare il <xref:System.Data.DataSet>con XML che contiene gli elementi senza spazio dei nomi validi.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Per leggere elementi non qualificati, impostare `elementFormDefault` uguale a &quot;qualified&quot; nello Schema XML come illustrato nell&quot;esempio seguente.      ```   <xsd:schema id=&quot;MyDataSet&quot;       elementFormDefault=&quot;qualified&quot;       targetNamespace=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns=&quot;http://www.tempuri.org/MyDataSet.xsd&quot;       xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;       xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;>   </xsd:schema>   ```      > [!NOTE]> Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con <xref:System.Data.DataSet.ReadXml%2A>specificando `XmlReadMode.ReadSchema`.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Il <xref:System.Xml.XmlReader>da cui leggere.</xref:System.Xml.XmlReader>"
    - id: mode
      type: System.Data.XmlReadMode
      description: "Uno del <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> valori."
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref uid=&quot;langword_csharp_XmlReadMode&quot; name=&quot;XmlReadMode&quot; href=&quot;&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataSet.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  id: ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(Stream)
  nameWithType: DataSet.ReadXmlSchema(Stream)
  fullName: System.Data.DataSet.ReadXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema da specificato <xref:System.IO.Stream>nel <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.Stream>"
  remarks: "Utilizzare il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo per creare lo schema per un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli. Per scrivere uno schema di un documento XML, utilizzare il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Lo schema XML viene scritto utilizzando lo standard XSD.      > [!NOTE] > Il danneggiamento dei dati può verificarsi se il DataType e i tipi xs: Type non corrispondono. Verrà generata alcuna eccezione.       Il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo viene in genere chiamato prima di richiamare il <xref:System.Data.DataSet.ReadXml%2A>metodo che viene utilizzato per riempire la <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>       Le classi che derivano dalla <xref:System.IO.Stream>classe includono <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>e <xref:System.Net.Sockets.NetworkStream>.</xref:System.Net.Sockets.NetworkStream> </xref:System.IO.MemoryStream> </xref:System.IO.FileStream> </xref:System.IO.BufferedStream> </xref:System.IO.Stream>      > [!NOTE] > Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  example:
  - "The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \n  \n [!code-cs[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_5_1.cs)]\n [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_5_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Il <xref:System.IO.Stream>da cui leggere.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  id: ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(TextReader)
  nameWithType: DataSet.ReadXmlSchema(TextReader)
  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema da specificato <xref:System.IO.TextReader>nel <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.IO.TextReader>"
  remarks: "Utilizzare il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo per creare lo schema per un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli. Per scrivere uno schema di un documento XML, utilizzare il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Lo schema XML viene scritto utilizzando lo standard XSD.      > [!NOTE] > Il danneggiamento dei dati può verificarsi se il DataType e i tipi xs: Type non corrispondono. Verrà generata alcuna eccezione.       Il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo viene in genere chiamato prima di richiamare il <xref:System.Data.DataSet.ReadXml%2A>metodo che viene utilizzato per riempire la <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>       Le classi che ereditano dalla <xref:System.IO.TextReader>classe include il <xref:System.IO.StreamReader>e <xref:System.IO.StringReader>classi.</xref:System.IO.StringReader> </xref:System.IO.StreamReader> </xref:System.IO.TextReader>      > [!NOTE] > Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  example:
  - "The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.  \n  \n [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_8_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_8_1.cs)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Il <xref:System.IO.TextReader>da cui leggere.</xref:System.IO.TextReader>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.String)
  id: ReadXmlSchema(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(String)
  nameWithType: DataSet.ReadXmlSchema(String)
  fullName: System.Data.DataSet.ReadXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema dal file specificato nel <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Utilizzare il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo per creare lo schema per un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli. Per scrivere uno schema di un documento XML, utilizzare il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Lo schema XML viene scritto utilizzando lo standard XSD.      > [!NOTE] > Il danneggiamento dei dati può verificarsi se il DataType e i tipi xs: Type non corrispondono. Verrà generata alcuna eccezione.       Il <xref:System.Data.DataSet.ReadXmlSchema%2A>metodo viene in genere chiamato prima di richiamare il <xref:System.Data.DataSet.ReadXml%2A>metodo che viene utilizzato per riempire la <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A>      > [!NOTE] > Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con <xref:System.Data.DataSet.ReadXmlSchema%2A>.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  example:
  - >-
    [!code-cs[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_0_1.cs)]
     [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_0_1.vb)]
  syntax:
    content: public void ReadXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Il file di nome, incluso il percorso, da cui leggere."
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>non è impostata su <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  id: ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataSet.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema da specificato <xref:System.Xml.XmlReader>nel <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Xml.XmlReader>"
  remarks: "Utilizzare il metodo ReadXmlSchema per creare lo schema per un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Lo schema include le definizioni di tabella, relazioni e vincoli.       Lo schema XML viene scritto utilizzando lo standard XSD.      > [!NOTE] > Il danneggiamento dei dati può verificarsi se il DataType e i tipi xs: Type non corrispondono. Verrà generata alcuna eccezione.       In genere viene richiamato il metodo di ReadXmlSchema prima di richiamare il <xref:System.Data.DataSet.ReadXml%2A>metodo che viene utilizzato per riempire la <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.ReadXml%2A>       La <xref:System.Xml.XmlReader?displayProperty=fullName>classe è astratta.</xref:System.Xml.XmlReader?displayProperty=fullName> Una classe che eredita il `XmlReader` è la <xref:System.Xml.XmlTextReader?displayProperty=fullName>classe.</xref:System.Xml.XmlTextReader?displayProperty=fullName>      > [!NOTE] > Se lo schema per il <xref:System.Data.DataSet>contiene elementi con lo stesso nome ma di tipo diverso, nello stesso spazio dei nomi, viene generata un&quot;eccezione quando si tenta di leggere lo schema nel <xref:System.Data.DataSet>con ReadXmlSchema.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Questa eccezione non viene eseguito se si utilizza .NET Framework versione 1.0."
  example:
  - "The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=fullName> object. The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=fullName> that is passed as an argument to the ReadXmlSchema method.  \n  \n [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_4_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_4_1.cs)]"
  syntax:
    content: public void ReadXmlSchema (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Il <xref:System.Xml.XmlReader>da cui leggere.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataSet.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  id: ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataSet.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ignora gli attributi e restituisce un set di dati vuoto."
  syntax:
    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Il lettore XML specificato."
  overload: System.Data.DataSet.ReadXmlSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RejectChanges
  id: RejectChanges
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RejectChanges()
  nameWithType: DataSet.RejectChanges()
  fullName: System.Data.DataSet.RejectChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Il rollback di tutte le modifiche apportate al <xref href=&quot;System.Data.DataSet&quot;> </xref> dopo la creazione o dall&quot;ultima volta &lt;xref:System.Data.DataSet.AcceptChanges%2A?displayProperty=fullName&gt; è stato chiamato."
  remarks: "Richiamare il RejectChanges per chiamare il <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>metodo su tutti <xref:System.Data.DataTable>gli oggetti contenuti da <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>       <xref:System.Data.DataRow>gli oggetti contenuti il <xref:System.Data.DataSet>è possibile portare in modalità di modifica richiamando il <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName>metodo.</xref:System.Data.DataRow.BeginEdit%2A?displayProperty=fullName> </xref:System.Data.DataSet></xref:System.Data.DataRow> Dopo la chiamata il <xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName>(metodo), possono rifiutare le modifiche chiamando il <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>sul <xref:System.Data.DataTable>a cui il <xref:System.Data.DataRow>appartengono gli oggetti.</xref:System.Data.DataRow> </xref:System.Data.DataTable> </xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> </xref:System.Data.DataRow.EndEdit%2A?displayProperty=fullName>       Quando il <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName>metodo viene chiamato, le righe ancora in modalità di modifica annullate le modifiche apportate.</xref:System.Data.DataTable.RejectChanges%2A?displayProperty=fullName> Le nuove righe vengono rimosse. Righe modificate ed eliminate viene ripristinato lo stato originale (`DataRowState.Unchanged`).       AcceptChanges e RejectChanges si applicano solo a <xref:System.Data.DataRow>modifiche correlate (vale a dire `Add`, `Remove`, `Delete`, e `Modify`).</xref:System.Data.DataRow> Non sono applicabili allo schema o modifiche strutturali."
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> class. The RejectChanges event is invoked from within a function.  \n  \n [!code-cs[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/csharp/m-system.data.dataset.re_6_1.cs)]\n [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.re_6_1.vb)]"
  syntax:
    content: public virtual void RejectChanges ();
    parameters: []
  overload: System.Data.DataSet.RejectChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Relations
  id: Relations
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Relations
  nameWithType: DataSet.Relations
  fullName: System.Data.DataSet.Relations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene la raccolta di relazioni che collegano le tabelle e consentire la navigazione da padre tabelle alle tabelle figlio."
  remarks: ''
  example:
  - "The following example prints the column name of all child tables through the Relations property.  \n  \n [!code-vb[Classic WebData DataSet.Relations Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.re_1.vb)]"
  syntax:
    content: public System.Data.DataRelationCollection Relations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "Oggetto <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref> che contiene una raccolta di <xref href=&quot;System.Data.DataRelation&quot;> </xref> oggetti. Viene restituita una raccolta vuota se non <xref href=&quot;System.Data.DataRelation&quot;> </xref> presenti oggetti."
  overload: System.Data.DataSet.Relations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.RemotingFormat
  id: RemotingFormat
  parent: System.Data.DataSet
  langs:
  - csharp
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
  fullName: System.Data.DataSet.RemotingFormat
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta un <xref href=&quot;System.Data.SerializationFormat&quot;> </xref> per il <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzato durante la comunicazione remota."
  syntax:
    content: public System.Data.SerializationFormat RemotingFormat { get; set; }
    return:
      type: System.Data.SerializationFormat
      description: "A <xref href=&quot;System.Data.SerializationFormat&quot;></xref> object."
  overload: System.Data.DataSet.RemotingFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Reset
  id: Reset
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Reset()
  nameWithType: DataSet.Reset()
  fullName: System.Data.DataSet.Reset()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Cancella tutte le tabelle e rimuove tutte le relazioni esterne e tabelle dal <xref href=&quot;System.Data.DataSet&quot;> </xref>. Le sottoclassi devono eseguire l&quot;override di ripristino per ripristinare un <xref href=&quot;System.Data.DataSet&quot;> </xref> allo stato originale."
  syntax:
    content: public virtual void Reset ();
    parameters: []
  overload: System.Data.DataSet.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.SchemaSerializationMode
  id: SchemaSerializationMode
  parent: System.Data.DataSet
  langs:
  - csharp
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
  fullName: System.Data.DataSet.SchemaSerializationMode
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Gets or sets a <xref href=&quot;System.Data.SchemaSerializationMode&quot;></xref> for a <xref href=&quot;System.Data.DataSet&quot;></xref>."
  remarks: "Oggetto <xref:System.Data.DataSet>serializza i dati dello schema e di istanza per impostazione predefinita in scenari di comunicazione remota di servizi Web e.</xref:System.Data.DataSet> Impostazione della proprietà SchemaSerializationMode di un oggetto tipizzato `DataSet` a <xref:System.Data.SchemaSerializationMode>fa sì che le informazioni sullo schema da escludere dal payload di serializzazione.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>è supportato solo per una classe tipizzata `DataSet`.</xref:System.Data.SchemaSerializationMode> Per una classe non tipizzata `DataSet` questa proprietà può essere impostata solo su <xref:System.Data.SchemaSerializationMode>.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>deve essere utilizzato solo nei casi in cui le informazioni sullo schema dell&quot;oggetto sottostante digitate `DataTables`, `DataRelations` e `Constraints` non è stato modificato.</xref:System.Data.SchemaSerializationMode> Se le modifiche hanno dello schema, tutte le informazioni devono essere serializzate con <xref:System.Data.SchemaSerializationMode>.</xref:System.Data.SchemaSerializationMode>       <xref:System.Data.SchemaSerializationMode>è supportato nella versione 2.0 di .NET Framework o in un secondo momento.</xref:System.Data.SchemaSerializationMode>       Quando <xref:System.Data.SchemaSerializationMode>è impostata, solo le proprietà di runtime di livello superiore presenti il <xref:System.Data.DataSet>vengono serializzati.</xref:System.Data.DataSet> </xref:System.Data.SchemaSerializationMode> Inoltre, vengono serializzate solo se si verificano può essere diverso dai valori predefiniti. Nessuno del `Tables`, `Relations` o `Constraints` vengono serializzati. Le proprietà di runtime serializzati includono <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>e <xref:System.Data.DataSet.CaseSensitive%2A>.</xref:System.Data.DataSet.CaseSensitive%2A> </xref:System.Data.DataSet.EnforceConstraints%2A> </xref:System.Data.DataSet.Locale%2A> </xref:System.Data.DataSet.Prefix%2A> </xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet.DataSetName%2A> Queste proprietà vengono serializzate per assicurarsi che l&quot;integrità dei dati di runtime complessivo viene mantenuto."
  syntax:
    content: public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }
    return:
      type: System.Data.SchemaSerializationMode
      description: "Gets or sets a <xref href=&quot;System.Data.SchemaSerializationMode&quot;></xref> for a <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.DataSet.SchemaSerializationMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ShouldSerializeRelations
  id: ShouldSerializeRelations
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ShouldSerializeRelations()
  nameWithType: DataSet.ShouldSerializeRelations()
  fullName: System.Data.DataSet.ShouldSerializeRelations()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene un valore che indica se <xref:System.Data.DataSet.Relations*>proprietà deve essere mantenuta.</xref:System.Data.DataSet.Relations*>"
  remarks: "Utilizzare questo metodo in genere se si crea una finestra di progettazione per il <xref:System.Data.DataSet>, o la creazione di un controllo che includa il <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following examples show a class derived from the <xref:System.Data.DataSet> class. The <xref:System.Data.DataSet.Reset%2A> and ShouldSerializeRelations methods are invoked from within functions in the derived class.  \n  \n [!code-cs[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_3_1.cs)]\n [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_3_1.vb)]"
  syntax:
    content: protected virtual bool ShouldSerializeRelations ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il valore della proprietà è stato modificato rispetto all&quot;impostazione predefinita; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.ShouldSerializeRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.ShouldSerializeTables
  id: ShouldSerializeTables
  parent: System.Data.DataSet
  langs:
  - csharp
  name: ShouldSerializeTables()
  nameWithType: DataSet.ShouldSerializeTables()
  fullName: System.Data.DataSet.ShouldSerializeTables()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene un valore che indica se <xref:System.Data.DataSet.Tables*>proprietà deve essere mantenuta.</xref:System.Data.DataSet.Tables*>"
  remarks: "Utilizzare questo metodo in genere solo se si crea una finestra di progettazione per il <xref:System.Data.DataSet>, o la creazione di un controllo che includa il <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>"
  example:
  - "The following example shows a class derived from the <xref:System.Data.DataSet> class. The ShouldSerializeTables method is called from within functions in the derived class.  \n  \n [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.sh_2_1.vb)]\n [!code-cs[Classic WebData DataSet.ShouldSerializeTables Example#1](~/add/codesnippet/csharp/m-system.data.dataset.sh_2_1.cs)]"
  syntax:
    content: protected virtual bool ShouldSerializeTables ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il valore della proprietà è stato modificato rispetto all&quot;impostazione predefinita; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataSet.ShouldSerializeTables*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Site
  id: Site
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Site
  nameWithType: DataSet.Site
  fullName: System.Data.DataSet.Site
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta un <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> per il <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Siti associano un <xref:System.ComponentModel.Component>per un <xref:System.ComponentModel.Container>e abilitare la comunicazione tra di essi, nonché fornire un modo per il contenitore gestire i relativi componenti.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.Data.DataSet&quot;></xref>."
  overload: System.Data.DataSet.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Per una descrizione di questo membro, vedere &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.DataSet>esegue il cast dell&quot;istanza di un <xref:System.ComponentModel.IListSource>interfaccia.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataSet>"
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "Per una descrizione di questo membro, vedere &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Per una descrizione di questo membro, vedere &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.DataSet>esegue il cast dell&quot;istanza di un <xref:System.ComponentModel.IListSource>interfaccia.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataSet>"
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Per una descrizione di questo membro, vedere &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Per una descrizione di questo membro, vedere &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.DataSet>esegue il cast dell&quot;istanza di un <xref:System.Xml.Serialization.IXmlSerializable>interfaccia.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "Per una descrizione di questo membro, vedere &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Per una descrizione di questo membro, vedere &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.DataSet>esegue il cast dell&quot;istanza di un <xref:System.Xml.Serialization.IXmlSerializable>interfaccia.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "A <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: System.Data.DataSet
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Per una descrizione di questo membro, vedere &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.DataSet>esegue il cast dell&quot;istanza di un <xref:System.Xml.Serialization.IXmlSerializable>interfaccia.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "A <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.Tables
  id: Tables
  parent: System.Data.DataSet
  langs:
  - csharp
  name: Tables
  nameWithType: DataSet.Tables
  fullName: System.Data.DataSet.Tables
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene la raccolta di tabelle contenute nel <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Per aggiungere tabelle alla raccolta, utilizzare il <xref:System.Data.DataTableCollection.Add%2A>metodo <xref:System.Data.DataTableCollection>.</xref:System.Data.DataTableCollection> </xref:System.Data.DataTableCollection.Add%2A> Per rimuovere tabelle, utilizzare il <xref:System.Data.DataTableCollection.Remove%2A>metodo.</xref:System.Data.DataTableCollection.Remove%2A>"
  example:
  - "The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.  \n  \n [!code-vb[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/visualbasic/p-system.data.dataset.ta_1.vb)]\n [!code-cs[Classic WebData DataSet.Tables Example#1](~/add/codesnippet/csharp/p-system.data.dataset.ta_1.cs)]"
  syntax:
    content: public System.Data.DataTableCollection Tables { get; }
    return:
      type: System.Data.DataTableCollection
      description: "Il <xref href=&quot;System.Data.DataTableCollection&quot;> </xref> contenute da questo <xref href=&quot;System.Data.DataSet&quot;> </xref>. Viene restituita una raccolta vuota se non <xref href=&quot;System.Data.DataTable&quot;> </xref> presenti oggetti."
  overload: System.Data.DataSet.Tables*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.Stream)
  id: WriteXml(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(Stream)
  nameWithType: DataSet.WriteXml(Stream)
  fullName: System.Data.DataSet.WriteXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti per il <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzando l&quot;oggetto specificato &lt;xref:System.IO.Stream?displayProperty=fullName&gt;."
  remarks: "Il `WriteXml` metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataSet>in un documento XML, mentre il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Per scrivere dati e schema, utilizzare uno degli overload che include il `mode` parametro e impostarne il valore su `WriteSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataSet`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object. The object is then used with the WriteXml method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_2_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_2_1.vb)]"
  syntax:
    content: public void WriteXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Oggetto <xref:System.IO.Stream>oggetto utilizzato per scrivere in un file.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)
  id: WriteXml(System.IO.TextWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(TextWriter)
  nameWithType: DataSet.WriteXml(TextWriter)
  fullName: System.Data.DataSet.WriteXml(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti per il <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzando specificata <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "Il `WriteXml` metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataSet>in un documento XML, mentre il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Per scrivere dati e schema, utilizzare uno degli overload che include il `mode` parametro e impostarne il valore su `WriteSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataSet`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Il <xref:System.IO.TextWriter>oggetto con cui scrivere.</xref:System.IO.TextWriter>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.String)
  id: WriteXml(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(String)
  nameWithType: DataSet.WriteXml(String)
  fullName: System.Data.DataSet.WriteXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti per il <xref href=&quot;System.Data.DataSet&quot;> </xref> nel file specificato."
  remarks: "Il `WriteXml` metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataSet>in un documento XML, mentre il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Per scrivere dati e schema, utilizzare uno degli overload che include il `mode` parametro e impostarne il valore su `WriteSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataSet`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Il file di nome, incluso il percorso, in cui scrivere."
  overload: System.Data.DataSet.WriteXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>non è impostata su <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(XmlWriter)
  nameWithType: DataSet.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti per il <xref href=&quot;System.Data.DataSet&quot;> </xref> al <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> specificato"
  remarks: "Il `WriteXml` metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataSet>in un documento XML, mentre il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Per scrivere dati e schema, utilizzare uno degli overload che include il `mode` parametro e impostarne il valore su `WriteSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataSet`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Il <xref:System.Xml.XmlWriter>con cui scrivere.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzando l&quot;oggetto specificato &lt;xref:System.IO.Stream?displayProperty=fullName&gt; e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Il `WriteXml` metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataSet>in un documento XML, mentre il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Per scrivere dati e schema, impostare il `mode` parametro `WriteSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataSet`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Oggetto <xref:System.IO.Stream>oggetto utilizzato per scrivere in un file.</xref:System.IO.Stream>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzando l&quot;oggetto specificato <xref:System.IO.TextWriter>e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.IO.TextWriter> Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Il `WriteXml` metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataSet>in un documento XML, mentre il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Per scrivere dati e schema, impostare il `mode` parametro `WriteSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataSet`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows. The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method. A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.  \n  \n [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_7_1.vb)]\n [!code-cs[Classic WebData DataSet.ReadXml2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_7_1.cs)]"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Oggetto &lt;xref:System.IO.TextWriter?displayProperty=fullName&gt; oggetto utilizzato per scrivere il documento."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  id: WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataSet.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataSet&quot;> </xref> nel file specificato utilizzando l&quot;oggetto specificato <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Il `WriteXml` metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataSet>in un documento XML, mentre il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Per scrivere dati e schema, impostare il `mode` parametro `WriteSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataSet`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_3_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_3_1.vb)]"
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "Il file di nome, incluso il percorso, in cui scrivere."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
  overload: System.Data.DataSet.WriteXml*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>non è impostata su <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzando l&quot;oggetto specificato <xref:System.Xml.XmlWriter>e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.Xml.XmlWriter> Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Il `WriteXml` metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataSet>in un documento XML, mentre il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet> Per scrivere dati e schema, impostare il `mode` parametro `WriteSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataSet.ReadXml%2A>e <xref:System.Data.DataSet.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataSet`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following example creates a <xref:System.IO.FileStream?displayProperty=fullName> object that is used to create a new <xref:System.Xml.XmlTextWriter?displayProperty=fullName>. The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.  \n  \n [!code-cs[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_1_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_1_1.vb)]"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Il <xref:System.Xml.XmlWriter>con cui scrivere.</xref:System.Xml.XmlWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
  overload: System.Data.DataSet.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  id: WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(Stream)
  nameWithType: DataSet.WriteXmlSchema(Stream)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il <xref href=&quot;System.Data.DataSet&quot;> </xref> struttura come schema XML per l&quot;oggetto specificato &lt;xref:System.IO.Stream?displayProperty=fullName&gt; oggetto."
  remarks: "Utilizzare il metodo WriteXmlSchema per scrivere lo schema per un <xref:System.Data.DataSet>a un documento XML.</xref:System.Data.DataSet> Lo schema include le definizioni di tabella, relazioni e vincoli. Per scrivere uno schema in un documento XML, utilizzare il metodo WriteXmlSchema.       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataSet.WriteXml%2A>metodo.</xref:System.Data.DataSet.WriteXml%2A>       Le classi che derivano dalla <xref:System.IO.Stream>classe includono <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>e <xref:System.Net.Sockets.NetworkStream>.</xref:System.Net.Sockets.NetworkStream> </xref:System.IO.MemoryStream> </xref:System.IO.FileStream> </xref:System.IO.BufferedStream> </xref:System.IO.Stream>"
  example:
  - "The following example creates a new <xref:System.IO.FileStream> object that is passed to the WriteXmlSchema method to write the schema to disk.  \n  \n [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_6_1.vb)]\n [!code-cs[Classic WebData DataSet.WriteXmlSchema Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_6_1.cs)]"
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Oggetto <xref:System.IO.Stream>oggetto utilizzato per scrivere in un file.</xref:System.IO.Stream>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  id: WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataSet.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il <xref href=&quot;System.Data.DataSet&quot;> </xref> struttura come schema XML per l&quot;oggetto specificato <xref:System.IO.TextWriter>oggetto.</xref:System.IO.TextWriter>"
  remarks: "Utilizzare il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataSet>a un documento XML.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli. Per scrivere uno schema di un documento XML, utilizzare il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataSet.WriteXml%2A>metodo.</xref:System.Data.DataSet.WriteXml%2A>       Le classi derivate dalla <xref:System.IO.TextWriter?displayProperty=fullName>classe include il <xref:System.Web.HttpWriter?displayProperty=fullName>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName>, <xref:System.IO.StreamWriter?displayProperty=fullName>e <xref:System.IO.StringWriter?displayProperty=fullName>.</xref:System.IO.StringWriter?displayProperty=fullName> </xref:System.IO.StreamWriter?displayProperty=fullName> </xref:System.Web.UI.HtmlTextWriter?displayProperty=fullName> </xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=fullName> </xref:System.Web.HttpWriter?displayProperty=fullName> </xref:System.IO.TextWriter?displayProperty=fullName>"
  example:
  - "The following example creates a <xref:System.Text.StringBuilder?displayProperty=fullName> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=fullName>. The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.  \n  \n [!code-cs[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_0_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_0_1.vb)]"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Il <xref:System.IO.TextWriter>oggetto con cui scrivere.</xref:System.IO.TextWriter>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.String)
  id: WriteXmlSchema(System.String)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(String)
  nameWithType: DataSet.WriteXmlSchema(String)
  fullName: System.Data.DataSet.WriteXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il <xref href=&quot;System.Data.DataSet&quot;> </xref> struttura come schema XML in un file."
  remarks: "Utilizzare il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataSet>a un documento XML.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli. Per scrivere uno schema di un documento XML, utilizzare il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataSet.WriteXml%2A>metodo.</xref:System.Data.DataSet.WriteXml%2A>"
  example:
  - >-
    [!code-cs[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_4_1.cs)]
     [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_4_1.vb)]
  syntax:
    content: public void WriteXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Il file di nome, incluso il percorso, in cui scrivere."
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>non è impostata su <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  id: WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il <xref href=&quot;System.Data.DataSet&quot;> </xref> struttura come schema XML per un <xref:System.Xml.XmlWriter>oggetto.</xref:System.Xml.XmlWriter>"
  remarks: "Utilizzare il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataSet>a un documento XML.</xref:System.Data.DataSet> </xref:System.Data.DataSet.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli. Per scrivere uno schema di un documento XML, utilizzare il <xref:System.Data.DataSet.WriteXmlSchema%2A>metodo.</xref:System.Data.DataSet.WriteXmlSchema%2A>       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataSet.WriteXml%2A>metodo.</xref:System.Data.DataSet.WriteXml%2A>       Una classe che eredita dalla <xref:System.Xml.XmlWriter?displayProperty=fullName>classe è la <xref:System.Xml.XmlTextWriter?displayProperty=fullName>classe.</xref:System.Xml.XmlTextWriter?displayProperty=fullName> </xref:System.Xml.XmlWriter?displayProperty=fullName>"
  example:
  - "The following example creates a new <xref:System.IO.FileStream?displayProperty=fullName> object with the specified path. The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XMLTextWriter?displayProperty=fullName> object. The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.  \n  \n [!code-cs[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/csharp/m-system.data.dataset.wr_5_1.cs)]\n [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/add/codesnippet/visualbasic/m-system.data.dataset.wr_5_1.vb)]"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Il <xref:System.Xml.XmlWriter>in cui scrivere.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(Stream,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il <xref href=&quot;System.Data.DataSet&quot;> </xref> struttura come schema XML per l&quot;oggetto specificato &lt;xref:System.IO.Stream?displayProperty=fullName&gt; oggetto."
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Oggetto &lt;xref:System.IO.Stream?displayProperty=fullName&gt; oggetto da scrivere."
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Delegato utilizzato per convertire <xref:System.Type>in stringa.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il <xref href=&quot;System.Data.DataSet&quot;> </xref> struttura come schema XML al <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> specificato"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Oggetto <xref:System.IO.TextWriter>oggetto da scrivere.</xref:System.IO.TextWriter>"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Delegato utilizzato per convertire <xref:System.Type>in stringa.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(String,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il <xref href=&quot;System.Data.DataSet&quot;> </xref> struttura come schema XML in un file."
  syntax:
    content: public void WriteXmlSchema (string fileName, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: fileName
      type: System.String
      description: "Il nome del file da scrivere."
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Delegato utilizzato per convertire <xref:System.Type>in stringa.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  id: WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il <xref href=&quot;System.Data.DataSet&quot;> </xref> struttura come schema XML al <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> specificato"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter<Type,string> multipleTargetConverter);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Oggetto <xref:System.Xml.XmlWriter>oggetto da scrivere.</xref:System.Xml.XmlWriter>"
    - id: multipleTargetConverter
      type: System.Converter{System.Type,System.String}
      description: "Delegato utilizzato per convertire <xref:System.Type>in stringa.</xref:System.Type>"
  overload: System.Data.DataSet.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DataSet.#ctor
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet()
  nameWithType: DataSet.DataSet()
  fullName: System.Data.DataSet.DataSet()
- uid: System.Data.DataSet.#ctor(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(String)
  nameWithType: DataSet.DataSet(String)
  fullName: System.Data.DataSet.DataSet(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet(SerializationInfo,StreamingContext,Boolean)
  nameWithType: DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
  fullName: System.Data.DataSet.DataSet(SerializationInfo,StreamingContext,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataSet.AcceptChanges
  parent: System.Data.DataSet
  isExternal: false
  name: AcceptChanges()
  nameWithType: DataSet.AcceptChanges()
  fullName: System.Data.DataSet.AcceptChanges()
- uid: System.Data.DataSet.BeginInit
  parent: System.Data.DataSet
  isExternal: false
  name: BeginInit()
  nameWithType: DataSet.BeginInit()
  fullName: System.Data.DataSet.BeginInit()
- uid: System.Data.DataSet.CaseSensitive
  parent: System.Data.DataSet
  isExternal: false
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
  fullName: System.Data.DataSet.CaseSensitive
- uid: System.Data.DataSet.Clear
  parent: System.Data.DataSet
  isExternal: false
  name: Clear()
  nameWithType: DataSet.Clear()
  fullName: System.Data.DataSet.Clear()
- uid: System.Data.DataSet.Clone
  parent: System.Data.DataSet
  isExternal: false
  name: Clone()
  nameWithType: DataSet.Clone()
  fullName: System.Data.DataSet.Clone()
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.DataSet.Copy
  parent: System.Data.DataSet
  isExternal: false
  name: Copy()
  nameWithType: DataSet.Copy()
  fullName: System.Data.DataSet.Copy()
- uid: System.Data.DataSet.CreateDataReader
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader()
  nameWithType: DataSet.CreateDataReader()
  fullName: System.Data.DataSet.CreateDataReader()
- uid: System.Data.DataTableReader
  parent: System.Data
  isExternal: false
  name: DataTableReader
  nameWithType: DataTableReader
  fullName: System.Data.DataTableReader
- uid: System.Data.DataSet.CreateDataReader(System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader(DataTable[])
  nameWithType: DataSet.CreateDataReader(DataTable[])
  fullName: System.Data.DataSet.CreateDataReader(DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.DataSetName
  parent: System.Data.DataSet
  isExternal: false
  name: DataSetName
  nameWithType: DataSet.DataSetName
  fullName: System.Data.DataSet.DataSetName
- uid: System.Data.DataSet.DefaultViewManager
  parent: System.Data.DataSet
  isExternal: false
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
  fullName: System.Data.DataSet.DefaultViewManager
- uid: System.Data.DataViewManager
  parent: System.Data
  isExternal: false
  name: DataViewManager
  nameWithType: DataViewManager
  fullName: System.Data.DataViewManager
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode(XmlReader)
  nameWithType: DataSet.DetermineSchemaSerializationMode(XmlReader)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(XmlReader)
- uid: System.Data.SchemaSerializationMode
  parent: System.Data
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: SchemaSerializationMode
  fullName: System.Data.SchemaSerializationMode
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  nameWithType: DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.DetermineSchemaSerializationMode(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.EndInit
  parent: System.Data.DataSet
  isExternal: false
  name: EndInit()
  nameWithType: DataSet.EndInit()
  fullName: System.Data.DataSet.EndInit()
- uid: System.Data.DataSet.EnforceConstraints
  parent: System.Data.DataSet
  isExternal: false
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
  fullName: System.Data.DataSet.EnforceConstraints
- uid: System.Data.DataSet.ExtendedProperties
  parent: System.Data.DataSet
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
  fullName: System.Data.DataSet.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataSet.GetChanges
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges()
  nameWithType: DataSet.GetChanges()
  fullName: System.Data.DataSet.GetChanges()
- uid: System.Data.DataSet.GetChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges(DataRowState)
  nameWithType: DataSet.GetChanges(DataRowState)
  fullName: System.Data.DataSet.GetChanges(DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataSet
  isExternal: false
  name: GetDataSetSchema(XmlSchemaSet)
  nameWithType: DataSet.GetDataSetSchema(XmlSchemaSet)
  fullName: System.Data.DataSet.GetDataSetSchema(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaComplexType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaComplexType
  nameWithType: XmlSchemaComplexType
  fullName: System.Xml.Schema.XmlSchemaComplexType
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.GetSchemaSerializable
  parent: System.Data.DataSet
  isExternal: false
  name: GetSchemaSerializable()
  nameWithType: DataSet.GetSchemaSerializable()
  fullName: System.Data.DataSet.GetSchemaSerializable()
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: GetSerializationData(SerializationInfo,StreamingContext)
  nameWithType: DataSet.GetSerializationData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.GetSerializationData(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.GetXml
  parent: System.Data.DataSet
  isExternal: false
  name: GetXml()
  nameWithType: DataSet.GetXml()
  fullName: System.Data.DataSet.GetXml()
- uid: System.Data.DataSet.GetXmlSchema
  parent: System.Data.DataSet
  isExternal: false
  name: GetXmlSchema()
  nameWithType: DataSet.GetXmlSchema()
  fullName: System.Data.DataSet.GetXmlSchema()
- uid: System.Data.DataSet.HasChanges
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges()
  nameWithType: DataSet.HasChanges()
  fullName: System.Data.DataSet.HasChanges()
- uid: System.Data.DataSet.HasChanges(System.Data.DataRowState)
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges(DataRowState)
  nameWithType: DataSet.HasChanges(DataRowState)
  fullName: System.Data.DataSet.HasChanges(DataRowState)
- uid: System.Data.DataSet.HasErrors
  parent: System.Data.DataSet
  isExternal: false
  name: HasErrors
  nameWithType: DataSet.HasErrors
  fullName: System.Data.DataSet.HasErrors
- uid: System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(Stream,String[])
  nameWithType: DataSet.InferXmlSchema(Stream,String[])
  fullName: System.Data.DataSet.InferXmlSchema(Stream,String[])
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(TextReader,String[])
  nameWithType: DataSet.InferXmlSchema(TextReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(TextReader,String[])
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.DataSet.InferXmlSchema(System.String,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(String,String[])
  nameWithType: DataSet.InferXmlSchema(String,String[])
  fullName: System.Data.DataSet.InferXmlSchema(String,String[])
- uid: System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema(XmlReader,String[])
  nameWithType: DataSet.InferXmlSchema(XmlReader,String[])
  fullName: System.Data.DataSet.InferXmlSchema(XmlReader,String[])
- uid: System.Data.DataSet.Initialized
  parent: System.Data.DataSet
  isExternal: false
  name: Initialized
  nameWithType: DataSet.Initialized
  fullName: System.Data.DataSet.Initialized
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Data.DataSet.InitializeDerivedDataSet
  parent: System.Data.DataSet
  isExternal: false
  name: InitializeDerivedDataSet()
  nameWithType: DataSet.InitializeDerivedDataSet()
  fullName: System.Data.DataSet.InitializeDerivedDataSet()
- uid: System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataSet
  isExternal: false
  name: IsBinarySerialized(SerializationInfo,StreamingContext)
  nameWithType: DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
  fullName: System.Data.DataSet.IsBinarySerialized(SerializationInfo,StreamingContext)
- uid: System.Data.DataSet.IsInitialized
  parent: System.Data.DataSet
  isExternal: false
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
  fullName: System.Data.DataSet.IsInitialized
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,DataTable[])
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,String[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,String[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,String[])
- uid: System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])
  parent: System.Data.DataSet
  isExternal: false
  name: Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  nameWithType: DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
  fullName: System.Data.DataSet.Load(IDataReader,LoadOption,FillErrorEventHandler,DataTable[])
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.DataSet.Locale
  parent: System.Data.DataSet
  isExternal: false
  name: Locale
  nameWithType: DataSet.Locale
  fullName: System.Data.DataSet.Locale
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Data.DataSet.Merge(System.Data.DataRow[])
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataRow[])
  nameWithType: DataSet.Merge(DataRow[])
  fullName: System.Data.DataSet.Merge(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataSet.Merge(System.Data.DataSet)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet)
  nameWithType: DataSet.Merge(DataSet)
  fullName: System.Data.DataSet.Merge(DataSet)
- uid: System.Data.DataSet.Merge(System.Data.DataTable)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataTable)
  nameWithType: DataSet.Merge(DataTable)
  fullName: System.Data.DataSet.Merge(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet,Boolean)
  nameWithType: DataSet.Merge(DataSet,Boolean)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean)
- uid: System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataRow[],Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataRow[],Boolean,MissingSchemaAction)
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataSet,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataSet,Boolean,MissingSchemaAction)
- uid: System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataSet
  isExternal: false
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataSet.Merge(DataTable,Boolean,MissingSchemaAction)
- uid: System.Data.DataSet.MergeFailed
  parent: System.Data.DataSet
  isExternal: false
  name: MergeFailed
  nameWithType: DataSet.MergeFailed
  fullName: System.Data.DataSet.MergeFailed
- uid: System.Data.MergeFailedEventHandler
  parent: System.Data
  isExternal: false
  name: MergeFailedEventHandler
  nameWithType: MergeFailedEventHandler
  fullName: System.Data.MergeFailedEventHandler
- uid: System.Data.DataSet.Namespace
  parent: System.Data.DataSet
  isExternal: false
  name: Namespace
  nameWithType: DataSet.Namespace
  fullName: System.Data.DataSet.Namespace
- uid: System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataSet
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataSet.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataSet.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveRelation(DataRelation)
  nameWithType: DataSet.OnRemoveRelation(DataRelation)
  fullName: System.Data.DataSet.OnRemoveRelation(DataRelation)
- uid: System.Data.DataRelation
  parent: System.Data
  isExternal: false
  name: DataRelation
  nameWithType: DataRelation
  fullName: System.Data.DataRelation
- uid: System.Data.DataSet.OnRemoveTable(System.Data.DataTable)
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveTable(DataTable)
  nameWithType: DataSet.OnRemoveTable(DataTable)
  fullName: System.Data.DataSet.OnRemoveTable(DataTable)
- uid: System.Data.DataSet.Prefix
  parent: System.Data.DataSet
  isExternal: false
  name: Prefix
  nameWithType: DataSet.Prefix
  fullName: System.Data.DataSet.Prefix
- uid: System.Data.DataSet.RaisePropertyChanging(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataSet.RaisePropertyChanging(String)
  fullName: System.Data.DataSet.RaisePropertyChanging(String)
- uid: System.Data.DataSet.ReadXml(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(Stream)
  nameWithType: DataSet.ReadXml(Stream)
  fullName: System.Data.DataSet.ReadXml(Stream)
- uid: System.Data.XmlReadMode
  parent: System.Data
  isExternal: false
  name: XmlReadMode
  nameWithType: XmlReadMode
  fullName: System.Data.XmlReadMode
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(TextReader)
  nameWithType: DataSet.ReadXml(TextReader)
  fullName: System.Data.DataSet.ReadXml(TextReader)
- uid: System.Data.DataSet.ReadXml(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(String)
  nameWithType: DataSet.ReadXml(String)
  fullName: System.Data.DataSet.ReadXml(String)
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(XmlReader)
  nameWithType: DataSet.ReadXml(XmlReader)
  fullName: System.Data.DataSet.ReadXml(XmlReader)
- uid: System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(Stream,XmlReadMode)
  nameWithType: DataSet.ReadXml(Stream,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(Stream,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(TextReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(TextReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(TextReader,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(String,XmlReadMode)
  nameWithType: DataSet.ReadXml(String,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(String,XmlReadMode)
- uid: System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml(XmlReader,XmlReadMode)
  nameWithType: DataSet.ReadXml(XmlReader,XmlReadMode)
  fullName: System.Data.DataSet.ReadXml(XmlReader,XmlReadMode)
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(Stream)
  nameWithType: DataSet.ReadXmlSchema(Stream)
  fullName: System.Data.DataSet.ReadXmlSchema(Stream)
- uid: System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(TextReader)
  nameWithType: DataSet.ReadXmlSchema(TextReader)
  fullName: System.Data.DataSet.ReadXmlSchema(TextReader)
- uid: System.Data.DataSet.ReadXmlSchema(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(String)
  nameWithType: DataSet.ReadXmlSchema(String)
  fullName: System.Data.DataSet.ReadXmlSchema(String)
- uid: System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataSet.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSchema(XmlReader)
- uid: System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataSet.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataSet.ReadXmlSerializable(XmlReader)
- uid: System.Data.DataSet.RejectChanges
  parent: System.Data.DataSet
  isExternal: false
  name: RejectChanges()
  nameWithType: DataSet.RejectChanges()
  fullName: System.Data.DataSet.RejectChanges()
- uid: System.Data.DataSet.Relations
  parent: System.Data.DataSet
  isExternal: false
  name: Relations
  nameWithType: DataSet.Relations
  fullName: System.Data.DataSet.Relations
- uid: System.Data.DataRelationCollection
  parent: System.Data
  isExternal: false
  name: DataRelationCollection
  nameWithType: DataRelationCollection
  fullName: System.Data.DataRelationCollection
- uid: System.Data.DataSet.RemotingFormat
  parent: System.Data.DataSet
  isExternal: false
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
  fullName: System.Data.DataSet.RemotingFormat
- uid: System.Data.SerializationFormat
  parent: System.Data
  isExternal: false
  name: SerializationFormat
  nameWithType: SerializationFormat
  fullName: System.Data.SerializationFormat
- uid: System.Data.DataSet.Reset
  parent: System.Data.DataSet
  isExternal: false
  name: Reset()
  nameWithType: DataSet.Reset()
  fullName: System.Data.DataSet.Reset()
- uid: System.Data.DataSet.SchemaSerializationMode
  parent: System.Data.DataSet
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
  fullName: System.Data.DataSet.SchemaSerializationMode
- uid: System.Data.DataSet.ShouldSerializeRelations
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeRelations()
  nameWithType: DataSet.ShouldSerializeRelations()
  fullName: System.Data.DataSet.ShouldSerializeRelations()
- uid: System.Data.DataSet.ShouldSerializeTables
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeTables()
  nameWithType: DataSet.ShouldSerializeTables()
  fullName: System.Data.DataSet.ShouldSerializeTables()
- uid: System.Data.DataSet.Site
  parent: System.Data.DataSet
  isExternal: false
  name: Site
  nameWithType: DataSet.Site
  fullName: System.Data.DataSet.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataSet.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Data.DataSet.Tables
  parent: System.Data.DataSet
  isExternal: false
  name: Tables
  nameWithType: DataSet.Tables
  fullName: System.Data.DataSet.Tables
- uid: System.Data.DataTableCollection
  parent: System.Data
  isExternal: false
  name: DataTableCollection
  nameWithType: DataTableCollection
  fullName: System.Data.DataTableCollection
- uid: System.Data.DataSet.WriteXml(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(Stream)
  nameWithType: DataSet.WriteXml(Stream)
  fullName: System.Data.DataSet.WriteXml(Stream)
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(TextWriter)
  nameWithType: DataSet.WriteXml(TextWriter)
  fullName: System.Data.DataSet.WriteXml(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.DataSet.WriteXml(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(String)
  nameWithType: DataSet.WriteXml(String)
  fullName: System.Data.DataSet.WriteXml(String)
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(XmlWriter)
  nameWithType: DataSet.WriteXml(XmlWriter)
  fullName: System.Data.DataSet.WriteXml(XmlWriter)
- uid: System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataSet.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(Stream,XmlWriteMode)
- uid: System.Data.XmlWriteMode
  parent: System.Data
  isExternal: false
  name: XmlWriteMode
  nameWithType: XmlWriteMode
  fullName: System.Data.XmlWriteMode
- uid: System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(TextWriter,XmlWriteMode)
- uid: System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataSet.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(String,XmlWriteMode)
- uid: System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataSet.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataSet.WriteXml(XmlWriter,XmlWriteMode)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(Stream)
  nameWithType: DataSet.WriteXmlSchema(Stream)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataSet.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter)
- uid: System.Data.DataSet.WriteXmlSchema(System.String)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(String)
  nameWithType: DataSet.WriteXmlSchema(String)
  fullName: System.Data.DataSet.WriteXmlSchema(String)
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter)
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(Stream,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(Stream,Converter<Type,String>)
- uid: System.Converter{System.Type,System.String}
  parent: System
  isExternal: false
  name: Converter<Type,String>
  nameWithType: Converter<Type,String>
  fullName: System.Converter<System.Type,System.String>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: Converter<System.Type,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(TextWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(TextWriter,Converter<Type,String>)
- uid: System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(String,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(String,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(String,Converter<Type,String>)
- uid: System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema(XmlWriter,Converter<Type,String>)
  nameWithType: DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
  fullName: System.Data.DataSet.WriteXmlSchema(XmlWriter,Converter<Type,String>)
- uid: System.Data.DataSet.#ctor*
  parent: System.Data.DataSet
  isExternal: false
  name: DataSet
  nameWithType: DataSet.DataSet
- uid: System.Data.DataSet.AcceptChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: AcceptChanges
  nameWithType: DataSet.AcceptChanges
- uid: System.Data.DataSet.BeginInit*
  parent: System.Data.DataSet
  isExternal: false
  name: BeginInit
  nameWithType: DataSet.BeginInit
- uid: System.Data.DataSet.CaseSensitive*
  parent: System.Data.DataSet
  isExternal: false
  name: CaseSensitive
  nameWithType: DataSet.CaseSensitive
- uid: System.Data.DataSet.Clear*
  parent: System.Data.DataSet
  isExternal: false
  name: Clear
  nameWithType: DataSet.Clear
- uid: System.Data.DataSet.Clone*
  parent: System.Data.DataSet
  isExternal: false
  name: Clone
  nameWithType: DataSet.Clone
- uid: System.Data.DataSet.Copy*
  parent: System.Data.DataSet
  isExternal: false
  name: Copy
  nameWithType: DataSet.Copy
- uid: System.Data.DataSet.CreateDataReader*
  parent: System.Data.DataSet
  isExternal: false
  name: CreateDataReader
  nameWithType: DataSet.CreateDataReader
- uid: System.Data.DataSet.DataSetName*
  parent: System.Data.DataSet
  isExternal: false
  name: DataSetName
  nameWithType: DataSet.DataSetName
- uid: System.Data.DataSet.DefaultViewManager*
  parent: System.Data.DataSet
  isExternal: false
  name: DefaultViewManager
  nameWithType: DataSet.DefaultViewManager
- uid: System.Data.DataSet.DetermineSchemaSerializationMode*
  parent: System.Data.DataSet
  isExternal: false
  name: DetermineSchemaSerializationMode
  nameWithType: DataSet.DetermineSchemaSerializationMode
- uid: System.Data.DataSet.EndInit*
  parent: System.Data.DataSet
  isExternal: false
  name: EndInit
  nameWithType: DataSet.EndInit
- uid: System.Data.DataSet.EnforceConstraints*
  parent: System.Data.DataSet
  isExternal: false
  name: EnforceConstraints
  nameWithType: DataSet.EnforceConstraints
- uid: System.Data.DataSet.ExtendedProperties*
  parent: System.Data.DataSet
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataSet.ExtendedProperties
- uid: System.Data.DataSet.GetChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: GetChanges
  nameWithType: DataSet.GetChanges
- uid: System.Data.DataSet.GetDataSetSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: GetDataSetSchema
  nameWithType: DataSet.GetDataSetSchema
- uid: System.Data.DataSet.GetObjectData*
  parent: System.Data.DataSet
  isExternal: false
  name: GetObjectData
  nameWithType: DataSet.GetObjectData
- uid: System.Data.DataSet.GetSchemaSerializable*
  parent: System.Data.DataSet
  isExternal: false
  name: GetSchemaSerializable
  nameWithType: DataSet.GetSchemaSerializable
- uid: System.Data.DataSet.GetSerializationData*
  parent: System.Data.DataSet
  isExternal: false
  name: GetSerializationData
  nameWithType: DataSet.GetSerializationData
- uid: System.Data.DataSet.GetXml*
  parent: System.Data.DataSet
  isExternal: false
  name: GetXml
  nameWithType: DataSet.GetXml
- uid: System.Data.DataSet.GetXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: GetXmlSchema
  nameWithType: DataSet.GetXmlSchema
- uid: System.Data.DataSet.HasChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: HasChanges
  nameWithType: DataSet.HasChanges
- uid: System.Data.DataSet.HasErrors*
  parent: System.Data.DataSet
  isExternal: false
  name: HasErrors
  nameWithType: DataSet.HasErrors
- uid: System.Data.DataSet.InferXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: InferXmlSchema
  nameWithType: DataSet.InferXmlSchema
- uid: System.Data.DataSet.InitializeDerivedDataSet*
  parent: System.Data.DataSet
  isExternal: false
  name: InitializeDerivedDataSet
  nameWithType: DataSet.InitializeDerivedDataSet
- uid: System.Data.DataSet.IsBinarySerialized*
  parent: System.Data.DataSet
  isExternal: false
  name: IsBinarySerialized
  nameWithType: DataSet.IsBinarySerialized
- uid: System.Data.DataSet.IsInitialized*
  parent: System.Data.DataSet
  isExternal: false
  name: IsInitialized
  nameWithType: DataSet.IsInitialized
- uid: System.Data.DataSet.Load*
  parent: System.Data.DataSet
  isExternal: false
  name: Load
  nameWithType: DataSet.Load
- uid: System.Data.DataSet.Locale*
  parent: System.Data.DataSet
  isExternal: false
  name: Locale
  nameWithType: DataSet.Locale
- uid: System.Data.DataSet.Merge*
  parent: System.Data.DataSet
  isExternal: false
  name: Merge
  nameWithType: DataSet.Merge
- uid: System.Data.DataSet.Namespace*
  parent: System.Data.DataSet
  isExternal: false
  name: Namespace
  nameWithType: DataSet.Namespace
- uid: System.Data.DataSet.OnPropertyChanging*
  parent: System.Data.DataSet
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataSet.OnPropertyChanging
- uid: System.Data.DataSet.OnRemoveRelation*
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveRelation
  nameWithType: DataSet.OnRemoveRelation
- uid: System.Data.DataSet.OnRemoveTable*
  parent: System.Data.DataSet
  isExternal: false
  name: OnRemoveTable
  nameWithType: DataSet.OnRemoveTable
- uid: System.Data.DataSet.Prefix*
  parent: System.Data.DataSet
  isExternal: false
  name: Prefix
  nameWithType: DataSet.Prefix
- uid: System.Data.DataSet.RaisePropertyChanging*
  parent: System.Data.DataSet
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataSet.RaisePropertyChanging
- uid: System.Data.DataSet.ReadXml*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXml
  nameWithType: DataSet.ReadXml
- uid: System.Data.DataSet.ReadXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSchema
  nameWithType: DataSet.ReadXmlSchema
- uid: System.Data.DataSet.ReadXmlSerializable*
  parent: System.Data.DataSet
  isExternal: false
  name: ReadXmlSerializable
  nameWithType: DataSet.ReadXmlSerializable
- uid: System.Data.DataSet.RejectChanges*
  parent: System.Data.DataSet
  isExternal: false
  name: RejectChanges
  nameWithType: DataSet.RejectChanges
- uid: System.Data.DataSet.Relations*
  parent: System.Data.DataSet
  isExternal: false
  name: Relations
  nameWithType: DataSet.Relations
- uid: System.Data.DataSet.RemotingFormat*
  parent: System.Data.DataSet
  isExternal: false
  name: RemotingFormat
  nameWithType: DataSet.RemotingFormat
- uid: System.Data.DataSet.Reset*
  parent: System.Data.DataSet
  isExternal: false
  name: Reset
  nameWithType: DataSet.Reset
- uid: System.Data.DataSet.SchemaSerializationMode*
  parent: System.Data.DataSet
  isExternal: false
  name: SchemaSerializationMode
  nameWithType: DataSet.SchemaSerializationMode
- uid: System.Data.DataSet.ShouldSerializeRelations*
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeRelations
  nameWithType: DataSet.ShouldSerializeRelations
- uid: System.Data.DataSet.ShouldSerializeTables*
  parent: System.Data.DataSet
  isExternal: false
  name: ShouldSerializeTables
  nameWithType: DataSet.ShouldSerializeTables
- uid: System.Data.DataSet.Site*
  parent: System.Data.DataSet
  isExternal: false
  name: Site
  nameWithType: DataSet.Site
- uid: System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataSet.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataSet.System#ComponentModel#IListSource#GetList*
  parent: System.Data.DataSet
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: DataSet.System.ComponentModel.IListSource.GetList
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml*
  parent: System.Data.DataSet
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType: DataSet.System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Data.DataSet.Tables*
  parent: System.Data.DataSet
  isExternal: false
  name: Tables
  nameWithType: DataSet.Tables
- uid: System.Data.DataSet.WriteXml*
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXml
  nameWithType: DataSet.WriteXml
- uid: System.Data.DataSet.WriteXmlSchema*
  parent: System.Data.DataSet
  isExternal: false
  name: WriteXmlSchema
  nameWithType: DataSet.WriteXmlSchema
