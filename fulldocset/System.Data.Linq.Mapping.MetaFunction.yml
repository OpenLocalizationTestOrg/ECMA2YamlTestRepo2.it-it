### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.Mapping.MetaFunction
  id: MetaFunction
  children:
  - System.Data.Linq.Mapping.MetaFunction.#ctor
  - System.Data.Linq.Mapping.MetaFunction.HasMultipleResults
  - System.Data.Linq.Mapping.MetaFunction.IsComposable
  - System.Data.Linq.Mapping.MetaFunction.MappedName
  - System.Data.Linq.Mapping.MetaFunction.Method
  - System.Data.Linq.Mapping.MetaFunction.Model
  - System.Data.Linq.Mapping.MetaFunction.Name
  - System.Data.Linq.Mapping.MetaFunction.Parameters
  - System.Data.Linq.Mapping.MetaFunction.ResultRowTypes
  - System.Data.Linq.Mapping.MetaFunction.ReturnParameter
  langs:
  - csharp
  name: MetaFunction
  nameWithType: MetaFunction
  fullName: System.Data.Linq.Mapping.MetaFunction
  type: Class
  summary: "Rappresenta il mapping tra un metodo di contesto e una funzione di database."
  syntax:
    content: public abstract class MetaFunction
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaFunction.#ctor
  id: '#ctor'
  parent: System.Data.Linq.Mapping.MetaFunction
  langs:
  - csharp
  name: MetaFunction()
  nameWithType: MetaFunction.MetaFunction()
  fullName: System.Data.Linq.Mapping.MetaFunction.MetaFunction()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.Linq.Mapping.MetaFunction&quot;> </xref> classe."
  syntax:
    content: protected MetaFunction ();
    parameters: []
  overload: System.Data.Linq.Mapping.MetaFunction.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults
  id: HasMultipleResults
  parent: System.Data.Linq.Mapping.MetaFunction
  langs:
  - csharp
  name: HasMultipleResults
  nameWithType: MetaFunction.HasMultipleResults
  fullName: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Indica se la stored procedure con più tipi di risultati o meno."
  syntax:
    content: public abstract bool HasMultipleResults { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la stored procedure dispone di più tipi di risultati."
  overload: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaFunction.IsComposable
  id: IsComposable
  parent: System.Data.Linq.Mapping.MetaFunction
  langs:
  - csharp
  name: IsComposable
  nameWithType: MetaFunction.IsComposable
  fullName: System.Data.Linq.Mapping.MetaFunction.IsComposable
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Indica se la funzione può essere composto all&quot;interno di una query."
  remarks: "Non può essere composta da una stored procedure all&quot;interno di una query. I metodi che rappresentano le stored procedure restituiscono `false`."
  syntax:
    content: public abstract bool IsComposable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la funzione può essere composta all&quot;interno di una query."
  overload: System.Data.Linq.Mapping.MetaFunction.IsComposable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaFunction.MappedName
  id: MappedName
  parent: System.Data.Linq.Mapping.MetaFunction
  langs:
  - csharp
  name: MappedName
  nameWithType: MetaFunction.MappedName
  fullName: System.Data.Linq.Mapping.MetaFunction.MappedName
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Ottiene il nome della funzione di database o stored procedure."
  syntax:
    content: public abstract string MappedName { get; }
    return:
      type: System.String
      description: "Stringa che rappresenta il nome della funzione di database o stored procedure."
  overload: System.Data.Linq.Mapping.MetaFunction.MappedName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaFunction.Method
  id: Method
  parent: System.Data.Linq.Mapping.MetaFunction
  langs:
  - csharp
  name: Method
  nameWithType: MetaFunction.Method
  fullName: System.Data.Linq.Mapping.MetaFunction.Method
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Ottiene il metodo contesto sottostante."
  syntax:
    content: public abstract System.Reflection.MethodInfo Method { get; }
    return:
      type: System.Reflection.MethodInfo
      description: "Oggetto <xref:System.Reflection.MethodInfo>che corrisponde al metodo del contesto sottostante.</xref:System.Reflection.MethodInfo>"
  overload: System.Data.Linq.Mapping.MetaFunction.Method*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaFunction.Model
  id: Model
  parent: System.Data.Linq.Mapping.MetaFunction
  langs:
  - csharp
  name: Model
  nameWithType: MetaFunction.Model
  fullName: System.Data.Linq.Mapping.MetaFunction.Model
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Ottiene il <xref href=&quot;System.Data.Linq.Mapping.MetaModel&quot;> </xref> che contiene questa funzione."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaModel Model { get; }
    return:
      type: System.Data.Linq.Mapping.MetaModel
      description: "Il <xref href=&quot;System.Data.Linq.Mapping.MetaModel&quot;> </xref> oggetto che contiene questa funzione."
  overload: System.Data.Linq.Mapping.MetaFunction.Model*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaFunction.Name
  id: Name
  parent: System.Data.Linq.Mapping.MetaFunction
  langs:
  - csharp
  name: Name
  nameWithType: MetaFunction.Name
  fullName: System.Data.Linq.Mapping.MetaFunction.Name
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Ottiene il nome del metodo."
  remarks: "Questo è lo stesso nome di <xref:System.Reflection.MethodInfo>nome.</xref:System.Reflection.MethodInfo>"
  syntax:
    content: public abstract string Name { get; }
    return:
      type: System.String
      description: "Oggetto <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> che rappresenta il nome del metodo."
  overload: System.Data.Linq.Mapping.MetaFunction.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaFunction.Parameters
  id: Parameters
  parent: System.Data.Linq.Mapping.MetaFunction
  langs:
  - csharp
  name: Parameters
  nameWithType: MetaFunction.Parameters
  fullName: System.Data.Linq.Mapping.MetaFunction.Parameters
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Ottiene un&quot;enumerazione dei parametri della funzione."
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaParameter> Parameters { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaParameter}
      description: "Raccolta di parametri."
  overload: System.Data.Linq.Mapping.MetaFunction.Parameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes
  id: ResultRowTypes
  parent: System.Data.Linq.Mapping.MetaFunction
  langs:
  - csharp
  name: ResultRowTypes
  nameWithType: MetaFunction.ResultRowTypes
  fullName: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Ottiene l&quot;enumerazione di risultato possibili tipi di riga."
  syntax:
    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaType> ResultRowTypes { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaType}
      description: "Raccolta di tipi possibili."
  overload: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.MetaFunction.ReturnParameter
  id: ReturnParameter
  parent: System.Data.Linq.Mapping.MetaFunction
  langs:
  - csharp
  name: ReturnParameter
  nameWithType: MetaFunction.ReturnParameter
  fullName: System.Data.Linq.Mapping.MetaFunction.ReturnParameter
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Ottiene il parametro restituito."
  syntax:
    content: public abstract System.Data.Linq.Mapping.MetaParameter ReturnParameter { get; }
    return:
      type: System.Data.Linq.Mapping.MetaParameter
      description: "Il <xref href=&quot;System.Data.Linq.Mapping.MetaParameter&quot;> </xref> che corrisponde al parametro restituito."
  overload: System.Data.Linq.Mapping.MetaFunction.ReturnParameter*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.Mapping.MetaFunction.#ctor
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: MetaFunction()
  nameWithType: MetaFunction.MetaFunction()
  fullName: System.Data.Linq.Mapping.MetaFunction.MetaFunction()
- uid: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: HasMultipleResults
  nameWithType: MetaFunction.HasMultipleResults
  fullName: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.Mapping.MetaFunction.IsComposable
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: IsComposable
  nameWithType: MetaFunction.IsComposable
  fullName: System.Data.Linq.Mapping.MetaFunction.IsComposable
- uid: System.Data.Linq.Mapping.MetaFunction.MappedName
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: MappedName
  nameWithType: MetaFunction.MappedName
  fullName: System.Data.Linq.Mapping.MetaFunction.MappedName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Linq.Mapping.MetaFunction.Method
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: Method
  nameWithType: MetaFunction.Method
  fullName: System.Data.Linq.Mapping.MetaFunction.Method
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Data.Linq.Mapping.MetaFunction.Model
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: Model
  nameWithType: MetaFunction.Model
  fullName: System.Data.Linq.Mapping.MetaFunction.Model
- uid: System.Data.Linq.Mapping.MetaModel
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaModel
  nameWithType: MetaModel
  fullName: System.Data.Linq.Mapping.MetaModel
- uid: System.Data.Linq.Mapping.MetaFunction.Name
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: Name
  nameWithType: MetaFunction.Name
  fullName: System.Data.Linq.Mapping.MetaFunction.Name
- uid: System.Data.Linq.Mapping.MetaFunction.Parameters
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: Parameters
  nameWithType: MetaFunction.Parameters
  fullName: System.Data.Linq.Mapping.MetaFunction.Parameters
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaParameter}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<MetaParameter>
  nameWithType: ReadOnlyCollection<MetaParameter>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaParameter>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Data.Linq.Mapping.MetaParameter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Linq.Mapping.MetaParameter
    name: MetaParameter
    nameWithType: MetaParameter
    fullName: MetaParameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: ResultRowTypes
  nameWithType: MetaFunction.ResultRowTypes
  fullName: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaType}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<MetaType>
  nameWithType: ReadOnlyCollection<MetaType>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Data.Linq.Mapping.MetaType>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Data.Linq.Mapping.MetaType>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Linq.Mapping.MetaType
    name: MetaType
    nameWithType: MetaType
    fullName: MetaType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.Mapping.MetaFunction.ReturnParameter
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: ReturnParameter
  nameWithType: MetaFunction.ReturnParameter
  fullName: System.Data.Linq.Mapping.MetaFunction.ReturnParameter
- uid: System.Data.Linq.Mapping.MetaParameter
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaParameter
  nameWithType: MetaParameter
  fullName: System.Data.Linq.Mapping.MetaParameter
- uid: System.Data.Linq.Mapping.MetaFunction.#ctor*
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: MetaFunction
  nameWithType: MetaFunction.MetaFunction
- uid: System.Data.Linq.Mapping.MetaFunction.HasMultipleResults*
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: HasMultipleResults
  nameWithType: MetaFunction.HasMultipleResults
- uid: System.Data.Linq.Mapping.MetaFunction.IsComposable*
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: IsComposable
  nameWithType: MetaFunction.IsComposable
- uid: System.Data.Linq.Mapping.MetaFunction.MappedName*
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: MappedName
  nameWithType: MetaFunction.MappedName
- uid: System.Data.Linq.Mapping.MetaFunction.Method*
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: Method
  nameWithType: MetaFunction.Method
- uid: System.Data.Linq.Mapping.MetaFunction.Model*
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: Model
  nameWithType: MetaFunction.Model
- uid: System.Data.Linq.Mapping.MetaFunction.Name*
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: Name
  nameWithType: MetaFunction.Name
- uid: System.Data.Linq.Mapping.MetaFunction.Parameters*
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: Parameters
  nameWithType: MetaFunction.Parameters
- uid: System.Data.Linq.Mapping.MetaFunction.ResultRowTypes*
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: ResultRowTypes
  nameWithType: MetaFunction.ResultRowTypes
- uid: System.Data.Linq.Mapping.MetaFunction.ReturnParameter*
  parent: System.Data.Linq.Mapping.MetaFunction
  isExternal: false
  name: ReturnParameter
  nameWithType: MetaFunction.ReturnParameter
