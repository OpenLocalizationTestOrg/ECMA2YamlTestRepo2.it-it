### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.DispatcherObject
  id: DispatcherObject
  children:
  - System.Windows.Threading.DispatcherObject.#ctor
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  langs:
  - csharp
  name: DispatcherObject
  nameWithType: DispatcherObject
  fullName: System.Windows.Threading.DispatcherObject
  type: Class
  summary: "Rappresenta un oggetto che è associato un <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  remarks: "Solo il thread che il <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>è stato creato in può accedere il DispatcherObject direttamente.</xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>  Per accedere a una classe DispatcherObject da un thread diverso da quello in cui è stato creato il DispatcherObject, chiamare <xref:System.Windows.Threading.Dispatcher.Invoke%2A>o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>sul <xref:System.Windows.Threading.Dispatcher>è associato il DispatcherObject.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>       Le sottoclassi di DispatcherObject che devono applicare la protezione dei thread possono eseguire una chiamata <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>su tutti i metodi pubblici.</xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>  In questo modo il thread in cui è stato creato il DispatcherObject il thread chiamante.       Una classe DispatcherObject non è possibile crearne un&quot;istanza in modo indipendente. vale a dire tutti i costruttori sono protetti.       Gli oggetti che derivano da DispatcherObject presentano affinità di thread.       Gli oggetti che derivano da <xref:System.Windows.Freezable>sono a thread libero quando sono bloccati.</xref:System.Windows.Freezable>  Per ulteriori informazioni, vedere il [panoramica sugli oggetti Freezable](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public abstract class DispatcherObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.#ctor
  id: '#ctor'
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref> classe."
  syntax:
    content: protected DispatcherObject ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  id: CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Determina se il thread chiamante ha accesso a questo <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  remarks: "Solo il thread di <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>è stato creato sarà accessibile <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       Qualsiasi thread può verificare se dispone di accesso a questo <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject>       La differenza tra CheckAccess e <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>CheckAccess restituisce un valore booleano che specifica se il thread chiamante dispone dell&quot;accesso a questo <xref:System.Windows.Threading.DispatcherObject>e <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>genera un&quot;eccezione se il thread chiamante non ha accesso a questa <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>       Chiamare questo metodo è identica alla chiamata al metodo <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>sull&quot;oggetto associato <xref:System.Windows.Threading.Dispatcher>oggetto.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>"
  example:
  - "The following example uses CheckAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  The CheckAccess method on the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  If the calling thread has access, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is posted onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]"
  syntax:
    content: public bool CheckAccess ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il thread chiamante ha accesso a questo oggetto. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Threading.DispatcherObject.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  id: Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Ottiene il <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> questo <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref> è associato."
  remarks: "Solo il thread che è stato creato il Dispatcher può accedere il <xref:System.Windows.Threading.DispatcherObject>direttamente.</xref:System.Windows.Threading.DispatcherObject>  Per accedere a un <xref:System.Windows.Threading.DispatcherObject>da un thread diverso da quello del <xref:System.Windows.Threading.DispatcherObject>è stato creato, chiamare <xref:System.Windows.Threading.Dispatcher.Invoke%2A>e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>sul <xref:System.Windows.Threading.Dispatcher>il <xref:System.Windows.Threading.DispatcherObject>è associato.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject>"
  syntax:
    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "Il dispatcher."
  overload: System.Windows.Threading.DispatcherObject.Dispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  id: VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Impone che il thread chiamante abbia accesso a questo <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  remarks: "Solo il thread di <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>è stato creato sarà accessibile <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       Qualsiasi thread può verificare se dispone di accesso a questo <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject>       La differenza tra <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>e VerifyAccess che <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>restituisce un valore booleano che specifica se il thread chiamante dispone dell&quot;accesso a questo <xref:System.Windows.Threading.DispatcherObject>e VerifyAccess genera un&quot;eccezione se il thread chiamante non ha accesso a questa <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>"
  example:
  - "The following example uses VerifyAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]"
  syntax:
    content: public void VerifyAccess ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.VerifyAccess*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "il thread chiamante non ha accesso a <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Threading.DispatcherObject.#ctor
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
- uid: System.Windows.Threading.DispatcherObject.#ctor*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject
  nameWithType: DispatcherObject.DispatcherObject
- uid: System.Windows.Threading.DispatcherObject.CheckAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess
  nameWithType: DispatcherObject.CheckAccess
- uid: System.Windows.Threading.DispatcherObject.Dispatcher*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess
  nameWithType: DispatcherObject.VerifyAccess
