### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogInstaller
  id: EventLogInstaller
  children:
  - System.Diagnostics.EventLogInstaller.#ctor
  - System.Diagnostics.EventLogInstaller.CategoryCount
  - System.Diagnostics.EventLogInstaller.CategoryResourceFile
  - System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.Diagnostics.EventLogInstaller.Log
  - System.Diagnostics.EventLogInstaller.MessageResourceFile
  - System.Diagnostics.EventLogInstaller.ParameterResourceFile
  - System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.Source
  - System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.UninstallAction
  langs:
  - csharp
  name: EventLogInstaller
  nameWithType: EventLogInstaller
  fullName: System.Diagnostics.EventLogInstaller
  type: Class
  summary: "Consente di installare e configurare un log eventi che l&quot;applicazione legge o scrive durante l&quot;esecuzione."
  remarks: "The EventLogInstaller is used by the [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md) when installing an event log. The EventLogInstaller class can install event logs only on the local computer.  \n  \n Use the EventLogInstaller class when your application writes to an event log; it is not necessary to use an event log installer for your application to read from an event log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \n  \n> [!NOTE]\n>  The Security log is read-only.  \n  \n The installer creates the event source that you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property and registers it for the event log specified in <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. This behavior is similar to calling <xref:System.Diagnostics.EventLog.CreateEventSource%2A> on the <xref:System.Diagnostics.EventLog> component.  \n  \n Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configurations. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an EventLogInstaller, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n To install an event log, create a project installer class that inherits from <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> for the class to `true`. Within your project, create an EventLogInstaller for each event log that your application will write to and add the instance to your project installer class.  \n  \n When the [Installutil.exe (Installer Tool)](../Topic/Installutil.exe%20\\(Installer%20Tool\\).md) is called, it looks at the <xref:System.ComponentModel.RunInstallerAttribute>. If it is `true`, the tool installs all the items in the <xref:System.Configuration.Install.Installer.Installers%2A> collection that are associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the tool ignores the project installer.  \n  \n You modify other properties of an EventLogInstaller either before or after adding the instance to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer, but before the installer tool runs. You must set the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property if your application will be writing to the event log.  \n  \n Use EventLogInstaller to register a new source for a new or existing event log; do not use EventLogInstaller to change an existing source. The EventLogInstaller class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \n  \n You can register the event source with localized resource files for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log. If your application writes strings values directly to the event log, you do not need to set these properties.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Create a different source without resource files and then use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n Typically, you do not call the methods of the EventLogInstaller class from within your code; they are generally called only by Installutil.exe. The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process. It backs out failures, if necessary, by calling the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method for the object that generated the exception."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the source name and the event log name, and adds the EventLogInstaller to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n [!code-cpp[EventLogInstaller#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_5_1.cpp)]\n [!code-cs[EventLogInstaller#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_5_1.cs)]\n [!code-vb[EventLogInstaller#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_5_1.vb)]"
  syntax:
    content: 'public class EventLogInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.HelpText
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: EventLogInstaller()
  nameWithType: EventLogInstaller.EventLogInstaller()
  fullName: System.Diagnostics.EventLogInstaller.EventLogInstaller()
  type: Constructor
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.EventLogInstaller&quot;> </xref> classe."
  syntax:
    content: public EventLogInstaller ();
    parameters: []
  overload: System.Diagnostics.EventLogInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CategoryCount
  id: CategoryCount
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
  fullName: System.Diagnostics.EventLogInstaller.CategoryCount
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Ottiene o imposta il numero di categorie nel file di risorse di categoria."
  remarks: "Utilizzare il CategoryCount e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>categoria stringhe localizzate per le proprietà per scrivere eventi con.</xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> Il Visualizzatore eventi consente di visualizzare la categoria per una voce di evento, se si specifica una categoria quando si scrittura l&quot;evento. Categorie del registro eventi sono stringhe definite dall&quot;applicazione che consentono di filtrare gli eventi, o forniscono informazioni su un evento. Ad esempio, l&quot;applicazione è possibile definire categorie separate per i diversi componenti o diverse operazioni.       Categorie di eventi sono facoltative. Se l&quot;applicazione non utilizza le categorie, non impostare il CategoryCount e <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>proprietà.</xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>       Per ulteriori informazioni sulla definizione dei messaggi di evento e sulla creazione di file di risorse di eventi, vedere l&quot;argomento &quot;Compilatore di messaggi&quot; nella documentazione di Platform SDK al [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_14_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_14_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_14_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryCount { get; set; }
    return:
      type: System.Int32
      description: "Il numero di categorie nel file di risorse di categoria. Il valore predefinito è zero."
  overload: System.Diagnostics.EventLogInstaller.CategoryCount*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  id: CategoryResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
  fullName: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Ottiene o imposta il percorso del file di risorse che contiene le stringhe di categoria per l&quot;origine."
  remarks: "Utilizzare il <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>e categoria stringhe localizzate per scrivere eventi con le proprietà CategoryResourceFile.</xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> Consente di visualizzare la categoria per una voce di evento nel Visualizzatore eventi se si specifica una categoria quando si scrittura l&quot;evento. Categorie del registro eventi sono stringhe definite dall&quot;applicazione che consentono di filtrare gli eventi, o di ottenere informazioni su un evento. Ad esempio, l&quot;applicazione potrebbe essere categorie separate per i diversi componenti o diverse operazioni.       Categorie di eventi sono facoltative. Se l&quot;applicazione non utilizza le categorie, non impostare il <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>e le proprietà CategoryResourceFile.</xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>       Per ulteriori informazioni sulla definizione dei messaggi di evento e sulla creazione di file di risorse di eventi, vedere l&quot;argomento &quot;Compilatore di messaggi&quot; nella documentazione di Platform SDK al [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_22_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_22_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_22_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string CategoryResourceFile { get; set; }
    return:
      type: System.String
      description: "Il percorso del file di risorse di categoria. Il valore predefinito è una stringa vuota (&quot;&quot;)."
  overload: System.Diagnostics.EventLogInstaller.CategoryResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: EventLogInstaller.CopyFromComponent(IComponent)
  fullName: System.Diagnostics.EventLogInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Copia i valori delle proprietà di un <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> componente che sono necessari in fase di installazione per un log eventi."
  remarks: "Il componente specificato per il `component` parametro deve essere un <xref:System.Diagnostics.EventLog>; in caso contrario, viene generata un&quot;eccezione.</xref:System.Diagnostics.EventLog>       In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller>dall&quot;interno del codice; di solito vengono chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/add/includes/ajax-current-ext-md.md).</xref:System.Diagnostics.EventLogInstaller> CopyFromComponent è utilizzata da Installutil.exe per impostare i valori delle proprietà per i <xref:System.Diagnostics.EventLogInstaller>valori di un <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> esistente</xref:System.Diagnostics.EventLogInstaller>       Se il <xref:System.Diagnostics.EventLog.Log%2A>del <xref:System.Diagnostics.EventLog>che è passato è una stringa vuota (&quot;&quot;), è necessario impostare il <xref:System.Diagnostics.EventLog.Log%2A>proprietà su un valore valido prima dell&quot;esecuzione il programma di installazione.</xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A>"
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "Un <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> da utilizzare come modello per il <xref href=&quot;System.Diagnostics.EventLogInstaller&quot;> </xref>."
  overload: System.Diagnostics.EventLogInstaller.CopyFromComponent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il componente specificato non è un <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>.       - o - <> </> *> o <> </> *> la proprietà del componente specificato <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o vuoto."
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: EventLogInstaller.Install(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Esegue l&quot;installazione e scrive informazioni del registro eventi nel Registro di sistema."
  remarks: "Il metodo di installazione scrive informazioni del registro eventi nel Registro di sistema e associa il registro eventi a un log specificato da di <xref:System.Diagnostics.EventLogInstaller.Log%2A>proprietà.</xref:System.Diagnostics.EventLogInstaller.Log%2A> Se il log esiste già e viene specificata un&quot;origine, installare crea un log e associa la nuova origine.       In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller>dall&quot;interno del codice; di solito vengono chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/add/includes/ajax-current-ext-md.md).</xref:System.Diagnostics.EventLogInstaller> Lo strumento chiama automaticamente il metodo di installazione durante il processo di installazione per scrivere le informazioni del Registro di sistema associate al log eventi da installare. L&quot;installazione è transazionale, quindi se si verifica un errore di qualsiasi componente di progetto di installazione durante l&quot;installazione, vengono ripristinati allo stato pre-installazione di tutti i componenti installati in precedenza. Questa operazione viene eseguita chiamando ogni componente <xref:System.Diagnostics.EventLogInstaller.Rollback%2A>metodo.</xref:System.Diagnostics.EventLogInstaller.Rollback%2A>       Utilizzare <xref:System.Diagnostics.EventLogInstaller>per registrare una nuova origine per un registro eventi di nuovo o esistente; non utilizzare <xref:System.Diagnostics.EventLogInstaller>per modificare un&quot;origine esistente.</xref:System.Diagnostics.EventLogInstaller> </xref:System.Diagnostics.EventLogInstaller> La <xref:System.Diagnostics.EventLogInstaller>classe non modifica le proprietà di configurazione di un&quot;origine esistente a cui corrispondono alle proprietà di installazione specificato.</xref:System.Diagnostics.EventLogInstaller> Il metodo di installazione genera un&quot;eccezione se il <xref:System.Diagnostics.EventLogInstaller.Source%2A>proprietà corrisponde a un nome di origine che è registrato per un altro log eventi nel computer.</xref:System.Diagnostics.EventLogInstaller.Source%2A> Il metodo di installazione ignora la registrazione dell&quot;origine se il <xref:System.Diagnostics.EventLogInstaller.Source%2A>proprietà corrisponde a un nome di origine che è già registrato per lo stesso log eventi specificato nella <xref:System.Diagnostics.EventLogInstaller.Log%2A>proprietà.</xref:System.Diagnostics.EventLogInstaller.Log%2A> </xref:System.Diagnostics.EventLogInstaller.Source%2A>       Routine di installazione di un&quot;applicazione utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>proprietà per gestire automaticamente le informazioni sui componenti che sono già stati installati.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Queste informazioni sullo stato, che viene passate per l&quot;installazione come il `stateSaver` parametro, viene continuamente aggiornato mentre lo strumento installa ogni <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> In genere, non è necessario che il codice modificare in modo esplicito queste informazioni sullo stato."
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "Un <xref:System.Collections.IDictionary>utilizzato per salvare le informazioni necessarie per eseguire un&quot;operazione di rollback o la disinstallazione.</xref:System.Collections.IDictionary>"
  overload: System.Diagnostics.EventLogInstaller.Install*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "La piattaforma che tenta di utilizzare il programma di installazione non è Windows NT 4.0 o versione successiva."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il nome specificato nella <xref:System.Diagnostics.EventLogInstaller.Source*>proprietà è già registrata per un registro eventi diverso.</xref:System.Diagnostics.EventLogInstaller.Source*>"
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Determina se un programma di installazione e un altro programma di installazione specificato si riferiscono alla stessa origine."
  remarks: "In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller>dall&quot;interno del codice; di solito vengono chiamati solo dallo strumento programma di installazione (Installutil.exe).</xref:System.Diagnostics.EventLogInstaller>"
  syntax:
    content: public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);
    parameters:
    - id: otherInstaller
      type: System.Configuration.Install.ComponentInstaller
      description: "Il programma di installazione da confrontare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il programma di installazione e il programma di installazione specificato per il <code> otherInstaller </code> parametro installano o disinstallano la stessa origine; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Log
  id: Log
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Log
  nameWithType: EventLogInstaller.Log
  fullName: System.Diagnostics.EventLogInstaller.Log
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Ottiene o imposta il nome del log per impostare l&quot;origine."
  remarks: "You can use the Log property to associate the source you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property with either an existing log or a new log on the local computer. The [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md) uses this information to map the source to the log in the computer's registry. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \n  \n To write entries to an event log, you must create a source and register it with an event log. An event source can only write to one log at a time. The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify a new source and an existing log, the installer creates a new event source and associates it with the log you specify. If you specify both a new source and a new log, the installer associates the new source with the new log in the registry, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the Log property with the \".evt\" file name extension.  \n  \n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the Log property.  \n  \n For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties."
  syntax:
    content: public string Log { get; set; }
    return:
      type: System.String
      description: "Il nome del log. Può trattarsi di applicazione, sistema o un nome di log personalizzato. Il valore predefinito è una stringa vuota (&quot;&quot;)."
  overload: System.Diagnostics.EventLogInstaller.Log*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile
  id: MessageResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
  fullName: System.Diagnostics.EventLogInstaller.MessageResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Ottiene o imposta il percorso del file di risorse che contiene le stringhe per l&quot;origine di formattazione dei messaggi."
  remarks: "Use the MessageResourceFile property to configure an event log source to write localized event messages. Event messages are application-defined strings that describe the event to the user.  \n  \n Your application can write event log entries using resource identifiers. A resource identifier indexes a message located in the MessageResourceFile. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.  \n  \n The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.  \n  \n If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the MessageResourceFile property.  \n  \n If the <xref:System.Diagnostics.EventLog.MachineName%2A> property is not the local computer identifier (\".\"), the .NET Framework assumes that the resource file is on a remote computer. If the MessageResourceFile property value contains a drive letter, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\\\<drive\\>$ share (for example, \\\\\\server\\c$). If the value contains the string %systemroot%, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\admin$ share (for example, \\\\\\server\\admin$).  \n  \n For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_9_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_9_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_9_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string MessageResourceFile { get; set; }
    return:
      type: System.String
      description: "Il percorso del file di risorse di messaggio. Il valore predefinito è una stringa vuota (&quot;&quot;)."
  overload: System.Diagnostics.EventLogInstaller.MessageResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  id: ParameterResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
  fullName: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Ottiene o imposta il percorso del file di risorse che contiene le stringhe di parametri di messaggio per l&quot;origine."
  remarks: "Utilizzare la proprietà ParameterResourceFile per configurare un&quot;origine di log eventi per scrivere messaggi di evento localizzati con le stringhe di parametri inseriti. Ogni messaggio di evento localizzata specificato nella <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>proprietà può contenere i segnaposto per le stringhe di inserimento.</xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> Questi segnaposto vengono utilizzati per specificare la posizione e l&quot;identificatore di risorsa per una stringa indipendente dal linguaggio all&quot;interno del messaggio di evento. Il Visualizzatore eventi sostituisce i segnaposto con le stringhe corrispondenti dal ParameterResourceFile e formatta il messaggio registro eventi per la voce di evento localizzata.       Ad esempio, la sezione seguente di un file di testo del messaggio definisce una stringa con un segnaposto per il parametro: ```      MessageId = 1501   Severity = Success   Facility = Application   SymbolicName = COMPONENT_STARTING   Language=English   Component %%6050 is starting.   .   ``` all&quot;interno del file di risorse di parametro, la stringa di inserimento deve essere definita con l&quot;identificatore di risorsa che corrisponde al segnaposto, come illustrato di seguito: ```   MessageId = 6050   Severity = Success   Facility = Application   SymbolicName = COMPONENT_NAME_MSGID   Language=English   TRIGGER.EXE   .   ``` l&quot;origine evento deve essere configurato per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci localizzate per un&quot;origine configurata con un file di risorse del messaggio.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se l&quot;applicazione scrive le stringhe di messaggio di evento direttamente nel registro eventi o se il <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>non contiene messaggi di inserimento dei segnaposto di parametri, non impostare la proprietà ParameterResourceFile.</xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>       Per ulteriori informazioni sulla definizione dei messaggi di evento e sulla creazione di file di risorse di eventi, vedere l&quot;argomento &quot;Compilatore di messaggi&quot; nella documentazione di Platform SDK al [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_26_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_26_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_26_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string ParameterResourceFile { get; set; }
    return:
      type: System.String
      description: "Il percorso del file di risorse di parametro di messaggio. Il valore predefinito è una stringa vuota (&quot;&quot;)."
  overload: System.Diagnostics.EventLogInstaller.ParameterResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: EventLogInstaller.Rollback(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Ripristina il computer di stato a cui che si trovava prima dell&quot;installazione eseguendo il rollback delle informazioni del log eventi che la procedura di installazione ha scritto nel Registro di sistema."
  remarks: "Il metodo Rollback Annulla gli effetti del <xref:System.Diagnostics.EventLogInstaller.Install%2A>metodo.</xref:System.Diagnostics.EventLogInstaller.Install%2A> Eseguire il rollback viene chiamato se l&quot;installazione di qualsiasi componente del progetto di installazione non riesce. Il <xref:System.Diagnostics.EventLogInstaller.Install%2A>metodo crea o imposta le proprietà per un log eventi e l&quot;origine evento.</xref:System.Diagnostics.EventLogInstaller.Install%2A> Eseguire il rollback consente di eliminare il registro eventi e l&quot;origine o Reimposta le proprietà di un&quot;origine di pre-installazione valori.       In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller>dall&quot;interno del codice; di solito vengono chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/add/includes/ajax-current-ext-md.md).</xref:System.Diagnostics.EventLogInstaller> Lo strumento chiama il metodo di ripristino, quando non è riuscita o in un altro componente per l&quot;installazione, per annullare le modifiche già effettuate il processo di installazione.       Routine di installazione di un&quot;applicazione utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>proprietà per gestire automaticamente le informazioni sui componenti che sono già stati installati.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Queste informazioni sullo stato, che viene passate per eseguire il Rollback come il `savedState` parametro, viene continuamente aggiornato mentre lo strumento esegue il rollback di ogni <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> In genere, non è necessario che il codice modificare in modo esplicito queste informazioni sullo stato."
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "Un <xref:System.Collections.IDictionary>che contiene lo stato di pre-installazione del computer.</xref:System.Collections.IDictionary>"
  overload: System.Diagnostics.EventLogInstaller.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Source
  id: Source
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Source
  nameWithType: EventLogInstaller.Source
  fullName: System.Diagnostics.EventLogInstaller.Source
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Ottiene o imposta il nome di origine da registrare nel log."
  remarks: "L&quot;origine eventi indica ciò che registra l&quot;evento. È spesso il nome dell&quot;applicazione o il nome di un componente all&quot;interno di un&quot;applicazione di grandi dimensioni.       Il programma di installazione utilizza il valore della proprietà di origine per registrare l&quot;applicazione con il log eventi come origine valida delle voci. Un nuovo nome di origine non può corrispondere un nome di origine esistente o un nome registro eventi esistente. Ogni origine solo è possibile scrivere in un log eventi alla volta. Tuttavia, l&quot;applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l&quot;applicazione potrebbe richiedere più origini configurate per diversi log eventi o file di risorse diversi.       Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema. Se non si specifica un nome di log prima dell&quot;esecuzione del programma di installazione, il programma di installazione registra l&quot;origine nel registro applicazioni. Se si specifica il nome di un log che non esiste, il sistema registra l&quot;origine in tale registro, ma il log non viene creato finché non viene scritta la prima voce a esso.       Utilizzare <xref:System.Diagnostics.EventLogInstaller>per registrare una nuova origine per un registro eventi di nuovo o esistente; non utilizzare <xref:System.Diagnostics.EventLogInstaller>per modificare un&quot;origine esistente.</xref:System.Diagnostics.EventLogInstaller> </xref:System.Diagnostics.EventLogInstaller> La <xref:System.Diagnostics.EventLogInstaller>classe non modifica le proprietà di configurazione di un&quot;origine esistente a cui corrispondono alle proprietà di installazione specificato.</xref:System.Diagnostics.EventLogInstaller> Il <xref:System.Diagnostics.EventLogInstaller.Install%2A>metodo genera un&quot;eccezione se la proprietà di origine corrisponde a un nome di origine che è registrato per un altro log eventi nel computer.</xref:System.Diagnostics.EventLogInstaller.Install%2A> Il <xref:System.Diagnostics.EventLogInstaller.Install%2A>(metodo) non registra l&quot;origine se la proprietà di origine corrisponde a un nome di origine che è già registrato per lo stesso log eventi specificato nella <xref:System.Diagnostics.EventLogInstaller.Log%2A>proprietà.</xref:System.Diagnostics.EventLogInstaller.Log%2A> </xref:System.Diagnostics.EventLogInstaller.Install%2A>       Per ulteriori informazioni sui comportamenti di origini e i registri eventi, vedere il <xref:System.Diagnostics.EventLog>documentazione per la classe di <xref:System.Diagnostics.EventLog.Log%2A>e <xref:System.Diagnostics.EventLog.Source%2A>proprietà.</xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog>"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "Il nome da registrare con il log eventi come origine delle voci. Il valore predefinito è una stringa vuota (&quot;&quot;)."
  overload: System.Diagnostics.EventLogInstaller.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  id: Uninstall(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Uninstall(IDictionary)
  nameWithType: EventLogInstaller.Uninstall(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Uninstall(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Rimuove un&quot;installazione tramite la rimozione delle informazioni del registro eventi dal Registro di sistema."
  remarks: "Se il <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A>valore della proprietà è `Remove`, il metodo di disinstallazione Elimina l&quot;origine e di log associato che il programma di installazione creato se il <xref:System.Diagnostics.EventLogInstaller.Log%2A>e <xref:System.Diagnostics.EventLogInstaller.Source%2A>la creazione di un nuovo registro eventi e un&quot;origine di specificare le proprietà.</xref:System.Diagnostics.EventLogInstaller.Source%2A> </xref:System.Diagnostics.EventLogInstaller.Log%2A> </xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A>       In genere, non si chiama i metodi del <xref:System.Diagnostics.EventLogInstaller>dall&quot;interno del codice; di solito vengono chiamati solo dal [Installutil.exe (strumento programma di installazione)](~/add/includes/ajax-current-ext-md.md) in modalità di disinstallazione.</xref:System.Diagnostics.EventLogInstaller> Lo strumento chiama automaticamente il metodo di disinstallazione per ripristinare le parti del sistema che sono state interessate dall&quot;installazione allo stato pre-installazione. Ciò include le informazioni del Registro di sistema associate al log eventi disinstallazione in corso l&quot;eliminazione.       Un&quot;applicazione la disinstallazione di routine utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>proprietà per gestire automaticamente le informazioni sui componenti che sono già stati disinstallati.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Queste informazioni sullo stato, che viene passate per la disinstallazione, come il `savedState` parametro, viene continuamente aggiornato mentre lo strumento Disinstalla ogni <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> In genere, non è necessario che il codice modificare in modo esplicito queste informazioni sullo stato."
  syntax:
    content: public override void Uninstall (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "Un <xref:System.Collections.IDictionary>che contiene lo stato di pre-installazione del computer.</xref:System.Collections.IDictionary>"
  overload: System.Diagnostics.EventLogInstaller.Uninstall*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.UninstallAction
  id: UninstallAction
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
  fullName: System.Diagnostics.EventLogInstaller.UninstallAction
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Ottiene o imposta un valore che indica se il [Installutil.exe (strumento programma di installazione)](~/add/includes/ajax-current-ext-md.md) deve rimuovere il log eventi o lasciarlo installata al momento della disinstallazione."
  remarks: "Quando si installa un registro eventi, è facoltativamente possibile collegarlo a un log esistente. Se si esegue questa operazione, è necessario decidere se il registro deve restituire lo stato di pre-installazione o rimanere nello stato corrente, dopo l&quot;installazione. Se si sceglie di ripristinare lo stato pre-installazione nel registro eventi, le modifiche alle voci registro eventi in fase di installazione non vengono ripristinate. È possibile reimpostare solo le proprietà del registro eventi che sono associate le <xref:System.Diagnostics.EventLogInstaller>in base ai valori di pre-installazione.</xref:System.Diagnostics.EventLogInstaller>"
  syntax:
    content: public System.Configuration.Install.UninstallAction UninstallAction { get; set; }
    return:
      type: System.Configuration.Install.UninstallAction
      description: "Uno del <xref href=&quot;System.Configuration.Install.UninstallAction&quot;> </xref> valori che indica lo stato di lasciare il registro eventi quando il <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> viene disinstallato. Il valore predefinito è <xref uid=&quot;langword_csharp_Remove&quot; name=&quot;Remove&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLogInstaller.UninstallAction*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "UninstallAction contiene un valore non valido. Gli unici valori validi per questa proprietà sono <xref uid=&quot;langword_csharp_Remove&quot; name=&quot;Remove&quot; href=&quot;&quot;> </xref> e <xref uid=&quot;langword_csharp_NoAction&quot; name=&quot;NoAction&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Diagnostics.EventLogInstaller.#ctor
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: EventLogInstaller()
  nameWithType: EventLogInstaller.EventLogInstaller()
  fullName: System.Diagnostics.EventLogInstaller.EventLogInstaller()
- uid: System.Diagnostics.EventLogInstaller.CategoryCount
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
  fullName: System.Diagnostics.EventLogInstaller.CategoryCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
  fullName: System.Diagnostics.EventLogInstaller.CategoryResourceFile
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: EventLogInstaller.CopyFromComponent(IComponent)
  fullName: System.Diagnostics.EventLogInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: EventLogInstaller.Install(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogInstaller.Log
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Log
  nameWithType: EventLogInstaller.Log
  fullName: System.Diagnostics.EventLogInstaller.Log
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
  fullName: System.Diagnostics.EventLogInstaller.MessageResourceFile
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
  fullName: System.Diagnostics.EventLogInstaller.ParameterResourceFile
- uid: System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: EventLogInstaller.Rollback(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Rollback(IDictionary)
- uid: System.Diagnostics.EventLogInstaller.Source
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Source
  nameWithType: EventLogInstaller.Source
  fullName: System.Diagnostics.EventLogInstaller.Source
- uid: System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Uninstall(IDictionary)
  nameWithType: EventLogInstaller.Uninstall(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Uninstall(IDictionary)
- uid: System.Diagnostics.EventLogInstaller.UninstallAction
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
  fullName: System.Diagnostics.EventLogInstaller.UninstallAction
- uid: System.Configuration.Install.UninstallAction
  parent: System.Configuration.Install
  isExternal: false
  name: UninstallAction
  nameWithType: UninstallAction
  fullName: System.Configuration.Install.UninstallAction
- uid: System.Diagnostics.EventLogInstaller.#ctor*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: EventLogInstaller
  nameWithType: EventLogInstaller.EventLogInstaller
- uid: System.Diagnostics.EventLogInstaller.CategoryCount*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: EventLogInstaller.CopyFromComponent
- uid: System.Diagnostics.EventLogInstaller.Install*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Install
  nameWithType: EventLogInstaller.Install
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: IsEquivalentInstaller
  nameWithType: EventLogInstaller.IsEquivalentInstaller
- uid: System.Diagnostics.EventLogInstaller.Log*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Log
  nameWithType: EventLogInstaller.Log
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
- uid: System.Diagnostics.EventLogInstaller.Rollback*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Rollback
  nameWithType: EventLogInstaller.Rollback
- uid: System.Diagnostics.EventLogInstaller.Source*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Source
  nameWithType: EventLogInstaller.Source
- uid: System.Diagnostics.EventLogInstaller.Uninstall*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Uninstall
  nameWithType: EventLogInstaller.Uninstall
- uid: System.Diagnostics.EventLogInstaller.UninstallAction*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
