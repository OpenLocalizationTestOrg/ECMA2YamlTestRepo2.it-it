### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Strings
  id: Strings
  children:
  - Microsoft.VisualBasic.Strings.Asc(System.Char)
  - Microsoft.VisualBasic.Strings.Asc(System.String)
  - Microsoft.VisualBasic.Strings.AscW(System.Char)
  - Microsoft.VisualBasic.Strings.AscW(System.String)
  - Microsoft.VisualBasic.Strings.Chr(System.Int32)
  - Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  - Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  - Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  - Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  - Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  - Microsoft.VisualBasic.Strings.LCase(System.Char)
  - Microsoft.VisualBasic.Strings.LCase(System.String)
  - Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Boolean)
  - Microsoft.VisualBasic.Strings.Len(System.Byte)
  - Microsoft.VisualBasic.Strings.Len(System.Char)
  - Microsoft.VisualBasic.Strings.Len(System.DateTime)
  - Microsoft.VisualBasic.Strings.Len(System.Decimal)
  - Microsoft.VisualBasic.Strings.Len(System.Double)
  - Microsoft.VisualBasic.Strings.Len(System.Int16)
  - Microsoft.VisualBasic.Strings.Len(System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Int64)
  - Microsoft.VisualBasic.Strings.Len(System.Object)
  - Microsoft.VisualBasic.Strings.Len(System.SByte)
  - Microsoft.VisualBasic.Strings.Len(System.Single)
  - Microsoft.VisualBasic.Strings.Len(System.String)
  - Microsoft.VisualBasic.Strings.Len(System.UInt16)
  - Microsoft.VisualBasic.Strings.Len(System.UInt32)
  - Microsoft.VisualBasic.Strings.Len(System.UInt64)
  - Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.LTrim(System.String)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RTrim(System.String)
  - Microsoft.VisualBasic.Strings.Space(System.Int32)
  - Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  - Microsoft.VisualBasic.Strings.StrReverse(System.String)
  - Microsoft.VisualBasic.Strings.Trim(System.String)
  - Microsoft.VisualBasic.Strings.UCase(System.Char)
  - Microsoft.VisualBasic.Strings.UCase(System.String)
  langs:
  - csharp
  name: Strings
  nameWithType: Strings
  fullName: Microsoft.VisualBasic.Strings
  type: Class
  summary: "Il <xref uid=&quot;langword_csharp_Strings&quot; name=&quot;Strings&quot; href=&quot;&quot;> </xref> modulo contiene procedure utilizzate per eseguire operazioni sulle stringhe."
  remarks: "Questo modulo supporta i membri di librerie di runtime che consentono di modificare le stringhe e parole chiave del linguaggio Visual Basic."
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._6_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Strings
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  id: Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> che rappresenta il codice carattere corrispondente a un carattere."
  remarks: "`Asc`Restituisce il *punto di codice*, o codice di carattere, per il carattere di input. Può essere 0 e 255 per i valori di carattere a byte singolo SBCS (set) e tra -32768 e 32767 per i valori double byte character set (DBCS).       `AscW`Restituisce il punto di codice Unicode del carattere di input. Può essere 0 e 65535. Il valore restituito è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente.      > [!NOTE] > Il `AscB` funzione delle versioni precedenti di Visual Basic restituisce un codice per un byte, anziché un carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `AscB` non è più supportata."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._55_1.vb)]"
  syntax:
    content: public static int Asc (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione. Se `String` è un <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione, solo il primo carattere della stringa viene utilizzata per l&quot;input. Se `String` è <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> o non contiene caratteri, un <xref:System.ArgumentException>si verifica l&quot;errore.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Restituisce un <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> che rappresenta il codice carattere corrispondente a un carattere."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  id: Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> che rappresenta il codice carattere corrispondente a un carattere."
  remarks: "`Asc`Restituisce il *punto di codice*, o codice di carattere, per il carattere di input. Può essere 0 e 255 per i valori di carattere a byte singolo SBCS (set) e tra -32768 e 32767 per i valori double byte character set (DBCS).       `AscW`Restituisce il punto di codice Unicode del carattere di input. Può essere 0 e 65535. Il valore restituito è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente.      > [!NOTE] > Il `AscB` funzione delle versioni precedenti di Visual Basic restituisce un codice per un byte, anziché un carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `AscB` non è più supportata."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._249_1.vb)]"
  syntax:
    content: public static int Asc (string String);
    parameters:
    - id: String
      type: System.String
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione. Se `String` è un <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione, solo il primo carattere della stringa viene utilizzata per l&quot;input. Se `String` è <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> o non contiene caratteri, un <xref:System.ArgumentException>si verifica l&quot;errore.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Restituisce un <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> che rappresenta il codice carattere corrispondente a un carattere."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  id: AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> che rappresenta il codice carattere corrispondente a un carattere."
  remarks: "`Asc`Restituisce il *punto di codice*, o codice di carattere, per il carattere di input. Può essere 0 e 255 per i valori di carattere a byte singolo SBCS (set) e tra -32768 e 32767 per i valori double byte character set (DBCS).       `AscW`Restituisce il punto di codice Unicode del carattere di input. Può essere 0 e 65535. Il valore restituito è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente.      > [!NOTE] > Il `AscB` funzione delle versioni precedenti di Visual Basic restituisce un codice per un byte, anziché un carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `AscB` non è più supportata."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._18_1.vb)]"
  syntax:
    content: public static int AscW (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione. Se `String` è un <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione, solo il primo carattere della stringa viene utilizzata per l&quot;input. Se `String` è <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> o non contiene caratteri, un <xref:System.ArgumentException>si verifica l&quot;errore.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Restituisce un <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> che rappresenta il codice carattere corrispondente a un carattere."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  id: AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> che rappresenta il codice carattere corrispondente a un carattere."
  remarks: "`Asc`Restituisce il *punto di codice*, o codice di carattere, per il carattere di input. Può essere 0 e 255 per i valori di carattere a byte singolo SBCS (set) e tra -32768 e 32767 per i valori double byte character set (DBCS).       `AscW`Restituisce il punto di codice Unicode del carattere di input. Può essere 0 e 65535. Il valore restituito è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente.      > [!NOTE] > Il `AscB` funzione delle versioni precedenti di Visual Basic restituisce un codice per un byte, anziché un carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `AscB` non è più supportata."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._205_1.vb)]"
  syntax:
    content: public static int AscW (string String);
    parameters:
    - id: String
      type: System.String
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione. Se `String` è un <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione, solo il primo carattere della stringa viene utilizzata per l&quot;input. Se `String` è <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> o non contiene caratteri, un <xref:System.ArgumentException>si verifica l&quot;errore.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Restituisce un <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> che rappresenta il codice carattere corrispondente a un carattere."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  id: Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce il carattere associato al codice di carattere specificato."
  remarks: "L&quot;intervallo asimmetrica accettato per `CharCode` consente di compensare le differenze di memorizzazione tra il `Short` e `Integer`. Ad esempio, -29183 è un `Short` ma&36353; è un `Integer`. Questo facilita inoltre la compatibilità con Visual Basic 6.0.       `Chr`Usa il <xref:System.Text.Encoding>classe il <xref:System.Text?displayProperty=fullName>dello spazio dei nomi per determinare se il thread corrente sta utilizzando un set di caratteri a byte singolo (SBCS) o un double byte character set (DBCS).</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Accetta quindi `CharCode` come punto di codice del set appropriato. L&quot;intervallo può essere 0 e 255 caratteri SBCS e tra -32768 e 65535 per i caratteri DBCS.       Il valore restituito dipende dalla tabella codici per il thread corrente, contenute nel <xref:System.Globalization.TextInfo.ANSICodePage%2A>proprietà del <xref:System.Globalization.TextInfo>classe il <xref:System.Globalization>dello spazio dei nomi.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> È possibile ottenere <xref:System.Globalization.TextInfo.ANSICodePage%2A>specificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`accetta `CharCode` come Unicode punto di codice. L&quot;intervallo è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente. I valori compresi tra -32768 e-1 vengono trattati come valori nell&quot;intervallo +&32768; e +&65535;.       I numeri da 0 a 31 sono le stesse codici ASCII non stampabili standard. Ad esempio, `Chr(10)` restituisce avanzamento riga.      > [!NOTE] > Il `ChrB` funzione nelle versioni precedenti di Visual Basic restituisce un singolo byte. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe in Visual Basic e .NET Framework sono in formato Unicode, e `ChrB` non è più supportata."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._105_1.vb)]"
  syntax:
    content: public static char Chr (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Obbligatorio. Un <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> espressione che rappresenta il `code point`, o codice di carattere, per il carattere."
    return:
      type: System.Char
      description: "Restituisce il carattere associato al codice di carattere specificato."
  overload: Microsoft.VisualBasic.Strings.Chr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; 0 or &gt; 255 for <xref uid=&quot;langword_csharp_Chr&quot; name=&quot;Chr&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  id: ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce il carattere associato al codice di carattere specificato."
  remarks: "L&quot;intervallo asimmetrica accettato per `CharCode` consente di compensare le differenze di memorizzazione tra il `Short` e `Integer`. Ad esempio, -29183 è un `Short` ma&36353; è un `Integer`. Questo facilita inoltre la compatibilità con Visual Basic 6.0.       `Chr`Usa il <xref:System.Text.Encoding>classe il <xref:System.Text?displayProperty=fullName>dello spazio dei nomi per determinare se il thread corrente sta utilizzando un set di caratteri a byte singolo (SBCS) o un double byte character set (DBCS).</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Accetta quindi `CharCode` come punto di codice del set appropriato. L&quot;intervallo può essere 0 e 255 caratteri SBCS e tra -32768 e 65535 per i caratteri DBCS.       Il valore restituito dipende dalla tabella codici per il thread corrente, contenute nel <xref:System.Globalization.TextInfo.ANSICodePage%2A>proprietà del <xref:System.Globalization.TextInfo>classe il <xref:System.Globalization>dello spazio dei nomi.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> È possibile ottenere <xref:System.Globalization.TextInfo.ANSICodePage%2A>specificando `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`accetta `CharCode` come Unicode punto di codice. L&quot;intervallo è indipendente dalle impostazioni di pagina delle impostazioni cultura e il codice per il thread corrente. I valori compresi tra -32768 e-1 vengono trattati come valori nell&quot;intervallo +&32768; e +&65535;.       I numeri da 0 a 31 sono le stesse codici ASCII non stampabili standard. Ad esempio, `Chr(10)` restituisce avanzamento riga.      > [!NOTE] > Il `ChrB` funzione nelle versioni precedenti di Visual Basic restituisce un singolo byte. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe in Visual Basic e .NET Framework sono in formato Unicode, e `ChrB` non è più supportata."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._45_1.vb)]"
  syntax:
    content: public static char ChrW (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Obbligatorio. Un <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> espressione che rappresenta il `code point`, o codice di carattere, per il carattere."
    return:
      type: System.Char
      description: "Restituisce il carattere associato al codice di carattere specificato."
  overload: Microsoft.VisualBasic.Strings.ChrW*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; -32768 or &gt; 65535 for <xref uid=&quot;langword_csharp_ChrW&quot; name=&quot;ChrW&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una matrice in base zero contenente un subset di un <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matrice in base ai criteri di filtro specificati."
  remarks: "Se nessuna corrispondenza di `Match` si trovano all&quot;interno di `Source`, `Filter` funzione restituisce una matrice vuota. Si verifica un errore se `Source` è impostato su `Nothing` o non è una matrice unidimensionale.       La matrice restituita dal `Filter` funzione contiene solo il numero di elementi sufficienti per contenere il numero di elementi corrispondenti.       Il `Compare` argomento può avere i valori seguenti.      |||   |-|-|   | Costante | Descrizione |   | `CompareMethod.Binary`| Esegue un confronto binario |   | `CompareMethod.Text`| Esegue un confronto testuale |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/bfb6d7a4-ec2d-49ca-96ad-_1.vb)]"
  syntax:
    content: public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.Object[]
      description: "Obbligatorio. Matrice unidimensionale di stringhe da cercare."
    - id: Match
      type: System.String
      description: "Obbligatorio. Stringa da cercare."
    - id: Include
      type: System.Boolean
      description: "Facoltativa. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>valore che indica se restituire sottostringhe che includono o esclude `Match`. Se `Include` è <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funzione restituisce il subset di matrice che contiene `Match` come sottostringa. Se `Include` è <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funzione restituisce il subset della matrice non contiene `Match` come sottostringa."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Facoltativa. Valore numerico che indica il tipo di confronto di stringhe da utilizzare. Per i valori, vedere &quot;Impostazioni&quot;."
    return:
      type: System.String[]
      description: "Restituisce una matrice in base zero contenente un subset di un <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matrice in base ai criteri di filtro specificati."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>è <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> o non è una matrice unidimensionale."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una matrice in base zero contenente un subset di un <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matrice in base ai criteri di filtro specificati."
  remarks: "Se nessuna corrispondenza di `Match` si trovano all&quot;interno di `Source`, `Filter` funzione restituisce una matrice vuota. Si verifica un errore se `Source` è impostato su `Nothing` o non è una matrice unidimensionale.       La matrice restituita dal `Filter` funzione contiene solo il numero di elementi sufficienti per contenere il numero di elementi corrispondenti.       Il `Compare` argomento può avere i valori seguenti.      |||   |-|-|   | Costante | Descrizione |   | `CompareMethod.Binary`| Esegue un confronto binario |   | `CompareMethod.Text`| Esegue un confronto testuale |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/a4b278ef-f791-4808-8a23-_1.vb)]"
  syntax:
    content: public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.String[]
      description: "Obbligatorio. Matrice unidimensionale di stringhe da cercare."
    - id: Match
      type: System.String
      description: "Obbligatorio. Stringa da cercare."
    - id: Include
      type: System.Boolean
      description: "Facoltativa. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>valore che indica se restituire sottostringhe che includono o esclude `Match`. Se `Include` è <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funzione restituisce il subset di matrice che contiene `Match` come sottostringa. Se `Include` è <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> funzione restituisce il subset della matrice non contiene `Match` come sottostringa."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Facoltativa. Valore numerico che indica il tipo di confronto di stringhe da utilizzare. Per i valori, vedere &quot;Impostazioni&quot;."
    return:
      type: System.String[]
      description: "Restituisce una matrice in base zero contenente un subset di un <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matrice in base ai criteri di filtro specificati."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>è <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> o non è una matrice unidimensionale."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  id: Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa formattata in base alle istruzioni contenute in un formato <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione."
  remarks: "The <xref:System.String.Format%2A?displayProperty=fullName> method also provides similar functionality.  \n  \n If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.  \n  \n If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware. However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.  \n  \n## Different Formats for Different Numeric Values  \n A user-defined format expression for numbers can have from one to three sections separated by semicolons. If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.  \n  \n|||  \n|-|-|  \n|If you use|This is the result|  \n|One section only|The format expression applies to all values.|  \n|Two sections|The first section applies to positive values and zeros; the second applies to negative values.|  \n|Three sections|The first section applies to positive values, the second applies to negative values, and the third applies to zeros.|  \n  \n The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values. Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.  \n  \n [!code-vb[VbVbalrStrings#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_1.vb)]  \n  \n If you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.  \n  \n [!code-vb[VbVbalrStrings#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_2.vb)]  \n  \n## Predefined Numeric Formats  \n The following table identifies the predefined numeric format names. These may be used by name as the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format name|Description|  \n|`General Number`, `G`, or `g`|Displays number with no thousand separator.<br /><br /> For example, `Format(&H3FA, \"g\")` returns `1018`.|  \n|`Currency`, `C`, or `c`|Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator. Output is based on system locale settings.<br /><br /> For example, `Format(1234567, \"c\")` returns `$1,234,567.00`.|  \n|`Fixed`, `F`, or `f`|Displays at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"f\")` returns `1234567.00`.|  \n|`Standard`, `N`, or `n`|Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"n\")` returns `1,234,567.00`.|  \n|`Percent`|Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.4744, \"Percent\")` returns `47.44%`.|  \n|`P`, or `p`|Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.80345, \"p\")` returns `80.35 %`.|  \n|`Scientific`|Uses standard scientific notation, providing two significant digits.<br /><br /> For example, `Format(1234567, \"Scientific\")` returns `1.23E+06`.|  \n|`E`, or `e`|Uses standard scientific notation, providing six significant digits.<br /><br /> For example, `Format(1234567, \"e\")` returns `1.234567e+006`.|  \n|`D`, or `d`|Displays number as a string that contains the value of the number in Decimal (base 10) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(&H7F, \"d\")` returns `127`.|  \n|`X`, or `x`|Displays number as a string that contains the value of the number in Hexadecimal (base 16) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(127, \"x\")` returns `7f`.|  \n|`Yes/No`|Displays `No` if number is 0; otherwise, displays `Yes`.<br /><br /> For example, `Format(0, \"Yes/No\")` returns `No`.|  \n|`True/False`|Displays `False` if number is 0; otherwise, displays `True`.<br /><br /> For example, `Format(1, \"True/False\")` returns `True`.|  \n|`On/Off`|Displays `Off` if number is 0; otherwise, displays `On`.<br /><br /> For example, `Format(1, \"On/Off\")` returns `On`.|  \n  \n### Smart Device Developer Notes  \n The `Yes/No`, `True/False`, and `On/Off` formats are not supported.  \n  \n## User-Defined Numeric Formats  \n The following table identifies characters you can use to create user-defined number formats. These may be used to build the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|None|Displays the number with no formatting.|  \n|(`0`)|Digit placeholder. Displays a digit or a zero. If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.<br /><br /> If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros. If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros. If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.|  \n|(`#`)|Digit placeholder. Displays a digit or nothing. If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.<br /><br /> This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.|  \n|(`.`)|Decimal placeholder. The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator. If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator. To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator. In some locales, a comma is used as the decimal separator. The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system. Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder. The formatted string will appear in the format correct for the locale.|  \n|(`%`)|Percent placeholder. Multiplies the expression by 100. The percent character (`%`) is inserted in the position where it appears in the format string.|  \n|(`,`)|Thousand separator. The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).<br /><br /> A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means \"scale the number by dividing it by 1,000, rounding as needed.\" Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`. Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.<br /><br /> Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator. In some locales, a period is used as a thousand separator. The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system. Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator. The formatted string will appear in the format correct for the locale.<br /><br /> For example, consider the three following format strings:<br /><br /> -   `\"#,0.\"`, which uses the thousands separator to format the number 100 million as the string \"100,000,000\".<br />-   `\"#0,.\"`, which uses scaling by a factor of one thousand to format the number 100 million as the string \"100000\".<br />-   `\"#,0,.\"`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string \"100,000\".|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character used as the time separator in formatted output is determined by your system settings.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character used as the date separator in formatted output is determined by your system settings.|  \n|(`E-``E+``e-``e+`)|Scientific format. If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent. The number of digit placeholders to the left determines the number of digits in the exponent. Use `E-` or `e-` to place a minus sign next to negative exponents. Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents. You must also include digit placeholders to the right of this symbol to get correct formatting.|  \n|`-` `+` `$` ( )|Literal characters. These characters are displayed exactly as typed in the format string. To display a character other than one of those listed, precede it with a backslash (`\\`) or enclose it in double quotation marks (\" \").|  \n|(`\\`)|Displays the next character in the format string. To display a character that has special meaning as a literal character, precede it with a backslash (`\\`). The backslash itself isn't displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (`\\\\`).<br /><br /> Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).|  \n|(`\"``ABC``\"`)|Displays the string inside the double quotation marks (\" \"). To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (\")).|  \n  \n### Legacy Code Example  \n The following table contains some sample format expressions for numbers. (These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.  \n  \n|||||  \n|-|-|-|-|  \n|Format (`Style`)|\"5\" formatted as|\"-5\" formatted as|\"0.5\" formatted as|  \n|`Zero-length string (\"\")`|`5`|`-5`|`0.5`|  \n|`0`|`5`|`-5`|`1`|  \n|`0.00`|`5.00`|`-5.00`|`0.50`|  \n|`#,##0`|`5`|`-5`|`1`|  \n|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  \n|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  \n|`0%`|`500%`|`-500%`|`50%`|  \n|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  \n|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  \n|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  \n  \n## Predefined Date/Time Formats  \n The following table identifies the predefined date and time format names. These may be used by name as the style argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format Name|Description|  \n|`General Date`, or `G`|Displays a date and/or time. For example, `3/12/2008 11:07:31 AM`. Date display is determined by your application's current culture value.|  \n|`Long Date`, `Medium Date`, or `D`|Displays a date according to your current culture's long date format. For example, `Wednesday, March 12, 2008`.|  \n|`Short Date`, or `d`|Displays a date using your current culture's short date format. For example, `3/12/2008`.<br /><br /> The `d` character displays the day in a user-defined date format.|  \n|`Long Time`, `Medium Time`, or `T`|Displays a time using your current culture's long time format; typically includes hours, minutes, seconds. For example, `11:07:31 AM`.|  \n|`Short Time` or `t`|Displays a time using your current culture's short time format. For example, `11:07 AM`.<br /><br /> The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.|  \n|`f`|Displays the long date and short time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07 AM`.|  \n|`F`|Displays the long date and long time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07:31 AM`.|  \n|`g`|Displays the short date and short time according to your current culture's format. For example, `3/12/2008 11:07 AM`.|  \n|`M`, `m`|Displays the month and the day of a date. For example, `March 12`.<br /><br /> The `M` character displays the month in a user-defined date format. The `m` character displays the minutes in a user-defined time format.|  \n|`R`, `r`|Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property. For example, `Wed, 12 Mar 2008 11:07:31 GMT`. The formatted date does not adjust the value of the date and time. You must adjust the Date/Time value to GMT before calling the `Format` function.|  \n|`s`|Formats the date and time as a sortable index. For example, `2008-03-12T11:07:31`.<br /><br /> The `s` character displays the seconds in a user-defined time format.|  \n|`u`|Formats the date and time as a GMT sortable index. For example, `2008-03-12 11:07:31Z`.|  \n|`U`|Formats the date and time with the long date and long time as GMT. For example, `Wednesday, March 12, 2008 6:07:31 PM`.|  \n|`Y`, `y`|Formats the date as the year and month. For example, `March, 2008`.<br /><br /> The `Y` and `y` characters display the year in a user-defined date format.|  \n  \n For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \n  \n## User-Defined Date/Time Formats  \n The following table shows characters you can use to create user-defined date/time formats. Unlike in earlier versions of [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], these format characters are case-sensitive.  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character that is used as the time separator in formatted output is determined by your application's current culture value.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character that is used as the date separator in formatted output is determined by your application's current culture.|  \n|(`%`)|Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters. Also used to indicate that a single-letter format is read as a user-defined format. See what follows for additional details.|  \n|`d`|Displays the day as a number without a leading zero (for example, `1`). Use `%d` if this is the only character in your user-defined numeric format.|  \n|`dd`|Displays the day as a number with a leading zero (for example, `01`).|  \n|`ddd`|Displays the day as an abbreviation (for example, `Sun`).|  \n|`dddd`|Displays the day as a full name (for example, `Sunday`).|  \n|`M`|Displays the month as a number without a leading zero (for example, January is represented as `1`). Use `%M` if this is the only character in your user-defined numeric format.|  \n|`MM`|Displays the month as a number with a leading zero (for example, `01/12/01`).|  \n|`MMM`|Displays the month as an abbreviation (for example, `Jan`).|  \n|`MMMM`|Displays the month as a full month name (for example, `January`).|  \n|`gg`|Displays the period/era string (for example, `A.D.`).|  \n|`h`|Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`). Use `%h` if this is the only character in your user-defined numeric format.|  \n|`hh`|Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).|  \n|`H`|Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`). Use `%H` if this is the only character in your user-defined numeric format.|  \n|`HH`|Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).|  \n|`m`|Displays the minute as a number without leading zeros (for example, `12:1:15`). Use `%m` if this is the only character in your user-defined numeric format.|  \n|`mm`|Displays the minute as a number with leading zeros (for example, `12:01:15`).|  \n|`s`|Displays the second as a number without leading zeros (for example, `12:15:5`). Use `%s` if this is the only character in your user-defined numeric format.|  \n|`ss`|Displays the second as a number with leading zeros (for example, `12:15:05`).|  \n|`f`|Displays fractions of seconds. For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds. You may use up to seven `f` symbols in your user-defined format. Use `%f` if this is the only character in your user-defined numeric format.|  \n|`t`|Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M. Use `%t` if this is the only character in your user-defined numeric format.|  \n|`tt`|For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.<br /><br /> For locales that use a 24-hour clock, displays nothing.|  \n|`y`|Displays the year number (0-9) without leading zeros. Use `%y` if this is the only character in your user-defined numeric format.|  \n|`yy`|Displays the year in two-digit numeric format with a leading zero, if applicable.|  \n|`yyy`|Displays the year in four-digit numeric format.|  \n|`yyyy`|Displays the year in four-digit numeric format.|  \n|`z`|Displays the timezone offset without a leading zero (for example, `-8`). Use `%z` if this is the only character in your user-defined numeric format.|  \n|`zz`|Displays the timezone offset with a leading zero (for example, `-08`)|  \n|`zzz`|Displays the full timezone offset (for example, `-08:00`)|  \n  \n### Legacy Code Example  \n The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:  \n  \n|||  \n|-|-|  \n|Format|Displays|  \n|`M/d/yy`|`12/7/58`|  \n|`d-MMM`|`7-Dec`|  \n|`d-MMMM-yy`|`7-December-58`|  \n|`d MMMM`|`7 December`|  \n|`MMMM yy`|`December 58`|  \n|`hh:mm tt`|`08:50 PM`|  \n|`h:mm:ss t`|`8:50:35 P`|  \n|`H:mm`|`20:50`|  \n|`H:mm:ss`|`20:50:35`|  \n|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  \n  \n### Smart Device Developer Notes  \n The minimum time resolution for a device is determined by the manufacturer of the device. If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device."
  example:
  - "This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats. For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.  \n  \n> [!NOTE]\n>  For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.  \n  \n [!code-vb[VbVbalrStrings#27](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_3.vb)]"
  syntax:
    content: public static string Format (object Expression, string Style = "");
    parameters:
    - id: Expression
      type: System.Object
      description: "Obbligatorio. Qualsiasi espressione valida."
    - id: Style
      type: System.String
      description: "Facoltativa. Un formato denominato o definito dall&quot;utente valido <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione."
    return:
      type: System.String
      description: "Restituisce una stringa formattata in base alle istruzioni contenute in un formato <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione."
  overload: Microsoft.VisualBasic.Strings.Format*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un&quot;espressione formattata come un valore di valuta utilizzando il simbolo di valuta definito nel Pannello di controllo del sistema."
  remarks: "Quando uno o più argomenti facoltativi vengono omessi, vengono utilizzati invece i corrispondenti valori delle impostazioni internazionali del computer.       La posizione del simbolo di valuta rispetto al valore di valuta è determinata dalle impostazioni internazionali del sistema.      > [!NOTE] > Tutte le informazioni provengono dalle impostazioni locali dell&quot;applicazione. Per impostazione predefinita, sono impostazioni locali configurate nel Pannello di controllo. Tuttavia, può essere modificato a livello di programmazione utilizzando .NET Framework, tranne uno zero iniziale, che deriva dal `Number` scheda.       Il `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` accettano i seguenti valori di enumerazione TriState.      |||   |-|-|   | Valore | Descrizione |   | `TriState.True`| True |   | `TriState.False`| False |   | `TriState.UseDefault`| Impostazioni internazionali del computer |"
  example:
  - "The following example illustrates the use of the `FormatCurrency` function.  \n  \n [!code-vb[VbVbalrStrings#32](~/add/codesnippet/visualbasic/c6b3af93-c0fc-4dd7-8b87-_1.vb)]"
  syntax:
    content: public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Obbligatorio. Espressione da formattare."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Facoltativa. Valore numerico che indica il numero di decimali viene visualizzato a destra del separatore decimale. Valore predefinito è -1, che indica che vengono utilizzate le impostazioni internazionali del computer."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Facoltativa. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>enumerazione che indica se viene visualizzato uno zero iniziale per i valori frazionari. Per i valori, vedere &quot;la sezione Osservazioni&quot;."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Facoltativa. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>enumerazione che indica se visualizzare o meno i valori negativi all&quot;interno delle parentesi. Per i valori, vedere &quot;la sezione Osservazioni&quot;."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Facoltativa. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>enumerazione che indica se i numeri sono raggruppati utilizzando il delimitatore di gruppo specificato nelle impostazioni internazionali del computer. Per i valori, vedere &quot;la sezione Osservazioni&quot;."
    return:
      type: System.String
      description: "Restituisce un&quot;espressione formattata come un valore di valuta utilizzando il simbolo di valuta definito nel Pannello di controllo del sistema."
  overload: Microsoft.VisualBasic.Strings.FormatCurrency*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Numero di cifre dopo il separatore decimale è maggiore di 99."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Tipo non è numerico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  id: FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un&quot;espressione stringa che rappresenta un valore data/ora."
  remarks: "Il `Date` tipo di dati contiene sempre le informazioni sia data e ora. Ai fini della conversione del tipo, Visual Basic considera 1/1/1 (1 ° gennaio dell&quot;anno 1) come valore neutro per la data e 00:00:00 (mezzanotte) come valore neutro per l&quot;ora. Se si formatta un `Date` valore come stringa di data/ora, `FormatDateTime` non include valori neutri nella stringa risultante. Ad esempio, se si converte #1/1/0001 9:30:&#00; in una stringa, il risultato è &quot;9:30:00 AM&quot;. le informazioni sulla data viene eliminate. Tuttavia, le informazioni sulla data è ancora presente nell&quot;originale `Date` valore e possono essere recuperate con funzioni, ad esempio `DatePart`.      > [!NOTE] > Se si passa il `Expression` argomento come una `String` letterale, `FormatDateTime` interpreta in base al <xref:System.Globalization.CultureInfo.CurrentCulture%2A>l&quot;impostazione dell&quot;applicazione.</xref:System.Globalization.CultureInfo.CurrentCulture%2A> Tuttavia, se viene passato come un `Date` letterale, utilizzare il formato #mm/gg/aaaa #, perché `FormatDateTime` interpreta sempre un `Date` letterale in base alle impostazioni cultura inglese (Stati Uniti). Questa operazione è necessaria perché, se un&quot;applicazione viene sviluppata utilizzando `Date` valori letterali da una delle impostazioni cultura, ma viene quindi eseguita su una piattaforma con una lingua diversa, il `Date` valori letterali potrebbero essere analizzati in modo non corretto.       Il `NamedFormat` presenta le seguenti impostazioni.      |||   |-|-|   | Costante | Descrizione |   | `DateFormat.GeneralDate`| Visualizzare una data o ora. Visualizzare una parte della data come data breve. Se è parte dell&quot;ora, è possibile visualizzarlo come molto tempo. Se presente, vengono visualizzate entrambe le parti. |   | `DateFormat.LongDate`| Visualizzare una data utilizzando il formato di data estesa specificato nelle impostazioni internazionali del computer. |   | `DateFormat.ShortDate`| Visualizzare una data utilizzando il formato di data breve specificato nelle impostazioni internazionali del computer. |   | `DateFormat.LongTime`| Visualizza l&quot;ora utilizzando il formato di ora specificato nelle impostazioni internazionali del computer. |   | `DateFormat.ShortTime`| Visualizza l&quot;ora nel formato 24 ore (hh: mm). |"
  example:
  - "This example demonstrates the use of the `FormatDateTime` function.  \n  \n [!code-vb[VbVbalrStrings#3](~/add/codesnippet/visualbasic/12ae27ca-4a0f-4ea2-855e-_1.vb)]"
  syntax:
    content: public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>espressione da formattare."
    - id: NamedFormat
      type: Microsoft.VisualBasic.DateFormat
      description: "Facoltativa. Valore numerico che indica il formato di data/ora utilizzato. Se omesso, <xref uid=&quot;langword_csharp_DateFormat.GeneralDate&quot; name=&quot;DateFormat.GeneralDate&quot; href=&quot;&quot;> </xref> viene utilizzato."
    return:
      type: System.String
      description: "Restituisce un&quot;espressione stringa che rappresenta un valore data/ora."
  overload: Microsoft.VisualBasic.Strings.FormatDateTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NamedFormat</code>impostazione non è valido."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un&quot;espressione formattata come un numero."
  remarks: "Quando uno o più argomenti facoltativi vengono omessi i valori degli argomenti omessi vengono forniti dalle impostazioni locali.      > [!NOTE] > Tutte le informazioni provengono dalle impostazioni locali dell&quot;applicazione. Per impostazione predefinita, sono impostazioni locali configurate nel Pannello di controllo. Tuttavia, informazioni possono essere modificate a livello di codice utilizzando .NET Framework.       Il `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` sono disponibili le seguenti impostazioni.      |||   |-|-|   | Costante | Descrizione |   | `TriState.True`| True |   | `TriState.False`| False |   | `TriState.UseDefault`| Impostazioni internazionali del computer |"
  example:
  - "This example demonstrates the `FormatNumber` function.  \n  \n [!code-vb[VbVbalrStrings#15](~/add/codesnippet/visualbasic/4c7d3c11-69f8-405b-a033-_1.vb)]"
  syntax:
    content: public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Obbligatorio. Espressione da formattare."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Facoltativa. Valore numerico che indica il numero di decimali viene visualizzato a destra del separatore decimale. Il valore predefinito è -1, che indica che vengono utilizzate le impostazioni internazionali del computer."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Facoltativa. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Costante che indica se uno 0 viene visualizzato per i valori frazionari. Per i valori, vedere &quot;Impostazioni&quot;."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Facoltativa. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Costante che indica se i valori negativi all&quot;interno delle parentesi. Per i valori, vedere &quot;Impostazioni&quot;."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Facoltativa. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Costante che indica se i numeri sono raggruppati utilizzando il delimitatore di gruppo specificato nelle impostazioni locali. Per i valori, vedere &quot;Impostazioni&quot;."
    return:
      type: System.String
      description: "Restituisce un&quot;espressione formattata come un numero."
  overload: Microsoft.VisualBasic.Strings.FormatNumber*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Tipo non è numerico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un&quot;espressione formattata come una percentuale (ovvero moltiplicata per 100) con un carattere % finale."
  remarks: "Quando uno o più argomenti facoltativi vengono omessi, vengono forniti i valori degli argomenti omessi dalle impostazioni locali.      > [!NOTE] > Tutte le informazioni provengono dalle impostazioni locali dell&quot;applicazione. Per impostazione predefinita, sono impostazioni locali configurate nel Pannello di controllo. Tuttavia, informazioni possono essere modificate a livello di codice utilizzando .NET Framework.       Il `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, e `GroupDigits` sono disponibili le seguenti impostazioni.      |||   |-|-|   | Costante | Descrizione |   | `TriState.True`| True |   | `TriState.False`| False |   | `TriState.Default`| Impostazioni internazionali del computer |"
  example:
  - "This example illustrates the use of the `FormatPercent` function.  \n  \n [!code-vb[VbVbalrStrings#28](~/add/codesnippet/visualbasic/699b6dbf-5eeb-4a3e-a4b1-_1.vb)]"
  syntax:
    content: public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Obbligatorio. Espressione da formattare."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Facoltativa. Valore numerico che indica quante cifre a destra del separatore decimale vengono visualizzati. Valore predefinito è -1, che indica che vengono utilizzate le impostazioni locali."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Facoltativa. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Costante che indica se consentire o meno visualizzato uno zero iniziale per i valori frazionari. Per i valori, vedere &quot;Impostazioni&quot;."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Facoltativa. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Costante che indica se visualizzare o meno i valori negativi all&quot;interno delle parentesi. Per i valori, vedere &quot;Impostazioni&quot;."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Facoltativa. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>Costante che indica se i numeri sono raggruppati utilizzando il delimitatore di gruppo specificato nelle impostazioni locali. Per i valori, vedere &quot;Impostazioni&quot;."
    return:
      type: System.String
      description: "Restituisce un&quot;espressione formattata come una percentuale (ovvero moltiplicata per 100) con un carattere % finale."
  overload: Microsoft.VisualBasic.Strings.FormatPercent*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Tipo non è numerico."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  id: GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> valore che rappresenta il carattere dell&quot;indice specificato nella stringa fornita."
  remarks: "Se `Index` è minore di 1 o maggiore dell&quot;indice dell&quot;ultimo carattere nel `str`, un `ArgumentException` viene generata un&quot;eccezione."
  example:
  - "This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.  \n  \n [!code-vb[VbVbalrStrings#23](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: public static char GetChar (string str, int Index);
    parameters:
    - id: str
      type: System.String
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione."
    - id: Index
      type: System.Int32
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>espressione. L&quot;indice (in base&1;) del carattere in `str` da restituire."
    return:
      type: System.Char
      description: "<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>valore che rappresenta il carattere dell&quot;indice specificato nella stringa fornita."
  overload: Microsoft.VisualBasic.Strings.GetChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>str</code>è <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <code>Index</code> &lt; 1, o <code>Index</code> è maggiore dell&quot;indice dell&quot;ultimo carattere di <code>str</code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un intero che specifica la posizione iniziale della prima occorrenza di una stringa all&quot;interno di altra."
  remarks: "In genere, il `InStr` funzione viene utilizzata durante l&quot;analisi di stringhe.      > [!NOTE] > Il `InStrB` funzione nelle versioni precedenti di Visual Basic restituisce un numero di byte anziché in una posizione di carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `InStrB` non è più supportata.       Il `Compare` impostazioni degli argomenti sono: | | |   |-|-|-|   | Costante | Valore | Descrizione |   | `Binary`|0| Esegue un confronto binario |   | `Text`|1| Esegue un confronto di testo |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/f1b47808-d5f4-408b-b1fc-_1.vb)]"
  syntax:
    content: public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione da cercare."
    - id: String2
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>Espressione cercata."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Facoltativa. Specifica il tipo di confronto di stringhe. Se `Compare` viene omesso, il <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> impostazione determina il tipo di confronto."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Se       </td><td> InStr restituisce       </td></tr><tr><td>           <code>String1</code>è di lunghezza zero o<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>è di lunghezza zero o<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> Posizione iniziale della ricerca, che per impostazione predefinita la prima posizione del carattere.       </td></tr><tr><td>           <code>String2</code>non è stato trovato       </td><td> 0       </td></tr><tr><td>           <code>String2</code>si trova all&quot;interno<code>String1</code></td><td> Posizione in cui ha inizio la corrispondenza       </td></tr><tr><td></td><td></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un intero che specifica la posizione iniziale della prima occorrenza di una stringa all&quot;interno di altra."
  remarks: "In genere, il `InStr` funzione viene utilizzata durante l&quot;analisi di stringhe.      > [!NOTE] > Il `InStrB` funzione nelle versioni precedenti di Visual Basic restituisce un numero di byte anziché in una posizione di carattere. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic 2005 sono in formato Unicode, e `InStrB` non è più supportata.       Il `Compare` impostazioni degli argomenti sono: | | |   |-|-|-|   | Costante | Valore | Descrizione |   | `Binary`|0| Esegue un confronto binario |   | `Text`|1| Esegue un confronto di testo |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/087e182b-78be-4d9a-be91-_1.vb)]"
  syntax:
    content: public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Start
      type: System.Int32
      description: "Facoltativa. Espressione numerica che imposta la posizione iniziale per ogni ricerca. Se omesso, ricerca inizia nella posizione del primo carattere. L&quot;indice iniziale è basato su 1."
    - id: String1
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione da cercare."
    - id: String2
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>Espressione cercata."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Facoltativa. Specifica il tipo di confronto di stringhe. Se `Compare` viene omesso, il <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> impostazione determina il tipo di confronto."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Se       </td><td> InStr restituisce       </td></tr><tr><td>           <code>String1</code>è di lunghezza zero o<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>è di lunghezza zero o<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td>           <code>start</code>         </td></tr><tr><td>           <code>String2</code>non è stato trovato       </td><td> 0       </td></tr><tr><td>           <code>String2</code>si trova all&quot;interno<code>String1</code></td><td> Posizione in cui ha inizio la corrispondenza       </td></tr><tr><td>           <code>Start</code>&gt; lunghezza<code>String1</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce la posizione della prima occorrenza di una stringa all&quot;interno di un&quot;altra, a partire dal lato destro della stringa."
  remarks: "Si noti che la sintassi per la `InStrRev` funzione non è uguale alla sintassi per il `InStr` (funzione).       Il `Compare` argomento può avere i valori seguenti.      |||   |-|-|   | Costante | Descrizione |   | `Binary`| Esegue un confronto binario. |   | `Text`| Esegue un confronto testuale. |"
  example:
  - "This example demonstrates the use of the `InStrRev` function.  \n  \n [!code-vb[VbVbalrStrings#26](~/add/codesnippet/visualbasic/ee8ba742-f981-4eca-b754-_1.vb)]"
  syntax:
    content: public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: StringCheck
      type: System.String
      description: "Obbligatorio. Espressione stringa da cercare."
    - id: StringMatch
      type: System.String
      description: "Obbligatorio. Espressione stringa da cercare."
    - id: Start
      type: System.Int32
      description: "Facoltativa. Espressione numerica che imposta la posizione iniziale in base uno per ogni ricerca, a partire dal lato sinistro della stringa. Se `Start` viene omesso, viene utilizzato –&1;, a indicare che la ricerca inizia dalla posizione dell&quot;ultimo carattere. La ricerca viene eseguita da destra a sinistra."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Facoltativa. Valore numerico che indica il tipo di confronto da utilizzare durante la valutazione delle sottostringhe. Se omesso, viene eseguito un confronto binario. Vedere le impostazioni per i valori."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Se       </td><td> Restituisce la funzione InStrRev       </td></tr><tr><td>           <code>StringCheck</code>è di lunghezza zero       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>è di lunghezza zero       </td><td>           <code>Start</code>         </td></tr><tr><td>           <code>StringMatch</code>non è stato trovato       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>si trova all&quot;interno<code>StringCheck</code></td><td> Posizione in cui viene trovata la prima corrispondenza, a partire da destra della stringa.       </td></tr><tr><td>           <code>Start</code>è maggiore della lunghezza di<code>StringMatch</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStrRev*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>= 0 or <code>Start</code> &lt; -1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  id: Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa creata unendo in join un numero di sottostringhe contenute in una matrice."
  remarks: "Vi è una parità tra il `Join` e `Split` funzioni. Il `Join` funzione accetta una matrice di stringhe e le unisce con una stringa di delimitazione per restituire una singola stringa. Il `Split` funzione accetta una stringa e la separa in corrispondenza del delimitatore per restituire una matrice di stringhe. Tuttavia, una differenza fondamentale è che `Join` può concatenare stringhe con qualsiasi stringa delimitatore, `Split` può separare stringhe utilizzando un delimitatore carattere singolo."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._160_1.vb)]"
  syntax:
    content: public static string Join (object[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.Object[]
      description: "Obbligatorio. Matrice unidimensionale che contiene le sottostringhe da unire."
    - id: Delimiter
      type: System.String
      description: "Facoltativa. Qualsiasi stringa, utilizzato per separare le sottostringhe nella stringa restituita. Se omesso, il carattere spazio (&quot;&quot;) viene utilizzato. Se `Delimiter` è una stringa di lunghezza zero (&quot;&quot;) o <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, tutti gli elementi nell&quot;elenco vengono concatenati senza delimitatori."
    return:
      type: System.String
      description: "Restituisce una stringa creata unendo in join un numero di sottostringhe contenute in una matrice."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>non è unidimensionale."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  id: Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa creata unendo in join un numero di sottostringhe contenute in una matrice."
  remarks: "Vi è una parità tra il `Join` e `Split` funzioni. Il `Join` funzione accetta una matrice di stringhe e le unisce con una stringa di delimitazione per restituire una singola stringa. Il `Split` funzione accetta una stringa e la separa in corrispondenza del delimitatore per restituire una matrice di stringhe. Tuttavia, una differenza fondamentale è che `Join` può concatenare stringhe con qualsiasi stringa delimitatore, `Split` può separare stringhe utilizzando un delimitatore carattere singolo."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._124_1.vb)]"
  syntax:
    content: public static string Join (string[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.String[]
      description: "Obbligatorio. Matrice unidimensionale che contiene le sottostringhe da unire."
    - id: Delimiter
      type: System.String
      description: "Facoltativa. Qualsiasi stringa, utilizzato per separare le sottostringhe nella stringa restituita. Se omesso, il carattere spazio (&quot;&quot;) viene utilizzato. Se `Delimiter` è una stringa di lunghezza zero (&quot;&quot;) o <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, tutti gli elementi nell&quot;elenco vengono concatenati senza delimitatori."
    return:
      type: System.String
      description: "Restituisce una stringa creata unendo in join un numero di sottostringhe contenute in una matrice."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>non è unidimensionale."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  id: LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa o un carattere convertito in caratteri minuscoli."
  remarks: "Solo le lettere maiuscole vengono convertite in minuscolo; le lettere minuscole e i caratteri rimangono invariati.       Questa funzione utilizza informazioni relative alla lingua dell&quot;applicazione durante la modifica della stringa in modo che le modifiche siano appropriate per le impostazioni locali in cui viene utilizzata l&quot;applicazione.      > [!IMPORTANT] > Se l&quot;applicazione prende decisioni di sicurezza in base al risultato di un&quot;operazione di modifica di maiuscole o il confronto, quindi l&quot;operazione deve utilizzare il <xref:System.String.Compare%2A?displayProperty=fullName>(metodo) e passare <xref:System.StringComparison>o <xref:System.StringComparison>per il `comparisonType` argomento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Per ulteriori informazioni, vedere [come impostazioni cultura influisce sulle stringhe in Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._236_1.vb)]"
  syntax:
    content: public static char LCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> espressione."
    return:
      type: System.Char
      description: "Restituisce una stringa o un carattere convertito in caratteri minuscoli."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  id: LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa o un carattere convertito in caratteri minuscoli."
  remarks: "Solo le lettere maiuscole vengono convertite in minuscolo; le lettere minuscole e i caratteri rimangono invariati.       Questa funzione utilizza informazioni relative alla lingua dell&quot;applicazione durante la modifica della stringa in modo che le modifiche siano appropriate per le impostazioni locali in cui viene utilizzata l&quot;applicazione.      > [!IMPORTANT] > Se l&quot;applicazione prende decisioni di sicurezza in base al risultato di un&quot;operazione di modifica di maiuscole o il confronto, quindi l&quot;operazione deve utilizzare il <xref:System.String.Compare%2A?displayProperty=fullName>(metodo) e passare <xref:System.StringComparison>o <xref:System.StringComparison>per il `comparisonType` argomento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Per ulteriori informazioni, vedere [come impostazioni cultura influisce sulle stringhe in Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._214_1.vb)]"
  syntax:
    content: public static string LCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> espressione."
    return:
      type: System.String
      description: "Restituisce una stringa o un carattere convertito in caratteri minuscoli."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  id: Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa contenente un numero specificato di caratteri dal lato sinistro di una stringa."
  remarks: "Per determinare il numero di caratteri in `str`, utilizzare il `Len` (funzione). Se utilizzata in un&quot;applicazione Windows Forms o qualsiasi altra classe che ha un `Left` proprietà, è necessario qualificare completamente la funzione con `Microsoft.VisualBasic.Left`.      > [!NOTE] > Il `LeftB` funzione nelle versioni precedenti di Visual Basic restituisce una stringa in byte anziché in caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LeftB` non è più supportata."
  example:
  - "This example demonstrates the use of the `Left` function to return a substring of a given `String`. In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.  \n  \n [!code-vb[VbVbalrStrings#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._139_1.vb)]"
  syntax:
    content: public static string Left (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione da cui vengono restituiti i caratteri più a sinistra."
    - id: Length
      type: System.Int32
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>espressione. Espressione numerica che indica il numero di caratteri da restituire. Se è 0, una stringa di lunghezza zero (&quot;&quot;) viene restituito. Se è maggiore o uguale al numero di caratteri in `str`, viene restituita la stringa intera."
    return:
      type: System.String
      description: "Restituisce una stringa contenente un numero specificato di caratteri dal lato sinistro di una stringa."
  overload: Microsoft.VisualBasic.Strings.Left*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  id: Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._155_1.vb)]"
  syntax:
    content: public static int Len (bool Expression);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  id: Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._157_1.vb)]"
  syntax:
    content: public static int Len (byte Expression);
    parameters:
    - id: Expression
      type: System.Byte
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  id: Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._159_1.vb)]"
  syntax:
    content: public static int Len (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  id: Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._5_1.vb)]"
  syntax:
    content: public static int Len (DateTime Expression);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  id: Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._30_1.vb)]"
  syntax:
    content: public static int Len (decimal Expression);
    parameters:
    - id: Expression
      type: System.Decimal
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  id: Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._173_1.vb)]"
  syntax:
    content: public static int Len (double Expression);
    parameters:
    - id: Expression
      type: System.Double
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  id: Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._198_1.vb)]"
  syntax:
    content: public static int Len (short Expression);
    parameters:
    - id: Expression
      type: System.Int16
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  id: Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._99_1.vb)]"
  syntax:
    content: public static int Len (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  id: Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._162_1.vb)]"
  syntax:
    content: public static int Len (long Expression);
    parameters:
    - id: Expression
      type: System.Int64
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  id: Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._193_1.vb)]"
  syntax:
    content: public static int Len (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  id: Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._171_1.vb)]"
  syntax:
    content: public static int Len (sbyte Expression);
    parameters:
    - id: Expression
      type: System.SByte
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  id: Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._21_1.vb)]"
  syntax:
    content: public static int Len (float Expression);
    parameters:
    - id: Expression
      type: System.Single
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  id: Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._72_1.vb)]"
  syntax:
    content: public static int Len (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  id: Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._211_1.vb)]"
  syntax:
    content: public static int Len (ushort Expression);
    parameters:
    - id: Expression
      type: System.UInt16
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  id: Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._150_1.vb)]"
  syntax:
    content: public static int Len (uint Expression);
    parameters:
    - id: Expression
      type: System.UInt32
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  id: Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  remarks: "Tipi definiti dall&quot;utente e `Object` variabili, il `Len` funzione restituisce le stesse dimensioni verrà scritto il file con il `FilePut` (funzione). Se un `Object` contiene un `String`, verrà restituito la lunghezza della stringa. Se un `Object` contiene qualsiasi altro tipo, verrà restituito le dimensioni dell&quot;oggetto come verrà scritto il file dal `FilePut` (funzione).       Il `VBFixedString` attributo può essere applicato ai campi stringa in oggetti per indicare le dimensioni della stringa, in byte, quando viene scritta su disco. Il `Len` funzione Usa il `VBFixedString` attributo, se disponibile, per determinare la dimensione di `Object` variabili.      > [!NOTE] > Il `Len` funzione potrebbe non essere in grado di determinare il numero effettivo di byte per l&quot;archiviazione necessari quando viene utilizzata con le stringhe a lunghezza variabile in tipi di dati definito dall&quot;utente.      > [!NOTE] > Il `LenB` funzione nelle versioni precedenti di Visual Basic restituisce il numero di byte in una stringa anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `LenB` non è più supportata.      ## Note per gli sviluppatori di dispositivo di smart il `Len` funzione accetta solo `String` e `Object` variabili come parametri. Se un `Object` contiene un `String`, verrà restituito il numero di `String`. Se un valore NULL è un parametro `Object` riferimento, la funzione restituisce zero. Se un `Object` contiene qualsiasi altro tipo, viene generata un&quot;eccezione."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._37_1.vb)]"
  syntax:
    content: public static int Len (ulong Expression);
    parameters:
    - id: Expression
      type: System.UInt64
      description: "Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> nome di variabile o espressione. Se `Expression` è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> funzione restituisce le stesse dimensioni verrà scritto il file con il <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> (funzione)."
    return:
      type: System.Int32
      description: "Restituisce un valore integer contenente il numero di caratteri in una stringa o il numero di byte necessari per archiviare una variabile nominale."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  id: LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa allineata a sinistra contenente la stringa specificata adattata alla lunghezza specificata."
  remarks: "Se la stringa specificata è maggiore della lunghezza specificata, la stringa restituita viene accorciata alla lunghezza specificata. Se la stringa specificata è inferiore alla lunghezza specificata, vengono aggiunti spazi all&quot;estremità destra della stringa restituita per ottenere la lunghezza appropriata."
  example:
  - "This example demonstrates the use of the `LSet` function.  \n  \n [!code-vb[VbVbalrStrings#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._168_1.vb)]"
  syntax:
    content: public static string LSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione. Nome della variabile di tipo stringa."
    - id: Length
      type: System.Int32
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>espressione. Lunghezza della stringa restituita."
    return:
      type: System.String
      description: "Restituisce una stringa allineata a sinistra contenente la stringa specificata adattata alla lunghezza specificata."
  overload: Microsoft.VisualBasic.Strings.LSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  id: LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), senza spazi finali (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), o nessun spazi iniziali o finali (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "Il `LTrim`, `RTrim`, e `Trim` funzioni rimuovono gli spazi alla fine delle stringhe."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._110_1.vb)]"
  syntax:
    content: public static string LTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione."
    return:
      type: System.String
      description: "Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), senza spazi finali (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), o nessun spazi iniziali o finali (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.LTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  id: Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa che contiene tutti i caratteri a partire da una posizione specificata in una stringa."
  remarks: "Per determinare il numero di caratteri in `str`, utilizzare il `Len` (funzione).       Visual Basic è disponibile un `Mid` (funzione) e un `Mid` istruzione. Questi elementi entrambi funzionano su un numero specificato di caratteri in una stringa, ma la `Mid` funzione restituisce i caratteri, mentre il `Mid` istruzione sostituisce i caratteri. Per ulteriori informazioni, vedere [Mid (istruzione)](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Il `MidB` funzione nelle versioni precedenti di Visual Basic restituisce una stringa in byte anziché in caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic sono in formato Unicode, e `MidB` non è più supportata."
  example:
  - "The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._67_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start);
    parameters:
    - id: str
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione da cui vengono restituiti i caratteri."
    - id: Start
      type: System.Int32
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>espressione. Posizione iniziale di caratteri da restituire. Se `Start` è maggiore del numero di caratteri in `str`, <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> funzione restituisce una stringa di lunghezza zero (&quot;&quot;). `Start`è in base uno."
    return:
      type: System.String
      description: "Stringa costituita da tutti i caratteri a partire dalla posizione specificata nella stringa."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  id: Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa che contiene un numero specificato di caratteri a partire da una posizione specificata in una stringa."
  remarks: "Per determinare il numero di caratteri in `str`, utilizzare il `Len` (funzione).       Visual Basic è disponibile un `Mid` (funzione) e un `Mid` istruzione. Questi elementi entrambi funzionano su un numero specificato di caratteri in una stringa, ma la `Mid` funzione restituisce i caratteri, mentre il `Mid` istruzione sostituisce i caratteri. Per ulteriori informazioni, vedere [Mid (istruzione)](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Il `MidB` funzione nelle versioni precedenti di Visual Basic restituisce una stringa in byte anziché in caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic sono in formato Unicode, e `MidB` non è più supportata."
  example:
  - "The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions. (The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione da cui vengono restituiti i caratteri."
    - id: Start
      type: System.Int32
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>espressione. Posizione iniziale di caratteri da restituire. Se `Start` è maggiore del numero di caratteri in `str`, <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> funzione restituisce una stringa di lunghezza zero (&quot;&quot;). `Start`è in base&1;."
    - id: Length
      type: System.Int32
      description: "Facoltativa. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>espressione. Numero di caratteri da restituire. Se omesso o se ci sono meno di `Length` caratteri del testo (incluso il carattere alla posizione `Start`), vengono restituiti tutti i caratteri dalla posizione iniziale alla fine della stringa."
    return:
      type: System.String
      description: "Stringa che include il numero specificato di caratteri a partire dalla posizione specificata nella stringa."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa in cui una sottostringa specificata è stata sostituita con un&quot;altra sottostringa per il numero di volte."
  remarks: "Il valore restituito del `Replace` funzione è una stringa che inizia in corrispondenza della posizione specificata da `Start` e termina alla fine del `Expression` stringa, con le sostituzioni effettuate come specificato da di `Find` e `Replace` valori.       Il `Compare` argomento può avere i valori seguenti.      |||   |-|-|   | Costante | Descrizione |   | `Binary`| Esegue un confronto binario |   | `Text`| Esegue un confronto testuale |"
  example:
  - "This example demonstrates the `Replace` function.  \n  \n```vb#  \nDim TestString As String = \"Shopping List\"  \n' Returns \"Shipping List\".  \nDim aString As String = Replace(TestString, \"o\", \"i\")  \n```"
  syntax:
    content: public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Obbligatorio. Espressione stringa contenente la sottostringa da sostituire."
    - id: Find
      type: System.String
      description: "Obbligatorio. La sottostringa da cercare."
    - id: Replacement
      type: System.String
      description: "Obbligatorio. Sottostringa da sostituire."
    - id: Start
      type: System.Int32
      description: "Facoltativa. Posizione all&quot;interno di `Expression` che inizia una sottostringa utilizzata per la sostituzione. Il valore restituito di <xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;> </xref> è una stringa che inizia in corrispondenza `Start`, con sostituzioni appropriate. Se omesso, viene utilizzato il valore 1."
    - id: Count
      type: System.Int32
      description: "Facoltativa. Numero di sostituzioni di sottostringa da eseguire. Se omesso, il valore predefinito è -1, ossia &quot;verificare tutte le sostituzioni possibili&quot;."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Facoltativa. Valore numerico che indica il tipo di confronto da utilizzare durante la valutazione delle sottostringhe. Vedere le impostazioni per i valori."
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>Restituisce i valori seguenti.       <table><tbody><tr><td> Se       </td><td> Replace restituisce       </td></tr><tr><td><code>Find</code>è di lunghezza zero o<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> Copia di<code>Expression</code></td></tr><tr><td><code>Replace</code>è di lunghezza zero       </td><td> Copia di <code> Expression </code> senza occorrenze di<code>Find</code></td></tr><tr><td><code>Expression</code>è di lunghezza zero o <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, o <code> Start </code> è maggiore della lunghezza di<code>Expression</code></td><td><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td></tr><tr><td><code>Count</code>è uguale a 0       </td><td> Copia di<code>Expression</code></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Count</code>&lt; -1 or <code>Start</code> &lt;= 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  id: Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa contenente un numero specificato di caratteri dal lato destro di una stringa."
  remarks: "Per determinare il numero di caratteri in `str`, utilizzare il `Len` (funzione). Se utilizzata in un Windows Form o qualsiasi altra classe che ha un `Right` proprietà, è necessario qualificare completamente la funzione con `Microsoft.VisualBasic.Strings.Right`.      > [!NOTE] > Il `RightB` funzione nelle versioni precedenti di Visual Basic restituisce una stringa in byte, anziché come caratteri. Viene utilizzato principalmente per la conversione di stringhe nelle applicazioni di double byte character set (DBCS). Tutte le stringhe di Visual Basic corrente sono in formato Unicode, e `RightB` non è più supportata."
  example:
  - "This example demonstrates the use of the `Right` function to return a substring of a given `String`. In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.  \n  \n [!code-vb[VbVbalrStrings#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._221_1.vb)]"
  syntax:
    content: public static string Right (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione da cui vengono restituiti i caratteri più a destra."
    - id: Length
      type: System.Int32
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. Espressione numerica che indica il numero di caratteri da restituire. Se è 0, una stringa di lunghezza zero (&quot;&quot;) viene restituito. Se è maggiore o uguale al numero di caratteri in `str`, viene restituita la stringa intera."
    return:
      type: System.String
      description: "Restituisce una stringa contenente un numero specificato di caratteri dal lato destro di una stringa."
  overload: Microsoft.VisualBasic.Strings.Right*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  id: RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa allineata a destra contenente la stringa specificata adattata alla lunghezza specificata."
  remarks: "Se `Source` è più lungo di `Length`, `RSet` inserisce solo i caratteri all&quot;estrema sinistra fino alla lunghezza di `Source`, nella stringa restituita. Se la stringa specificata è inferiore alla lunghezza specificata, vengono aggiunti spazi all&quot;estremità sinistra della stringa per ottenere la lunghezza appropriata. Se la stringa specificata è maggiore della lunghezza specificata, viene accorciata alla lunghezza specificata."
  example:
  - "This example demonstrates the use of the `RSet` function.  \n  \n [!code-vb[VbVbalrStrings#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._218_1.vb)]"
  syntax:
    content: public static string RSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione. Nome della variabile di tipo stringa."
    - id: Length
      type: System.Int32
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>espressione. Lunghezza della stringa restituita."
    return:
      type: System.String
      description: "Restituisce una stringa allineata a destra contenente la stringa specificata adattata alla lunghezza specificata."
  overload: Microsoft.VisualBasic.Strings.RSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  id: RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), senza spazi finali (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), o nessun spazi iniziali o finali (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "Il `LTrim`, `RTrim`, e `Trim` funzioni rimuovono gli spazi alla fine delle stringhe."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._143_1.vb)]"
  syntax:
    content: public static string RTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione."
    return:
      type: System.String
      description: "Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), senza spazi finali (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), o nessun spazi iniziali o finali (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.RTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  id: Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa costituita dal numero specificato di spazi."
  remarks: "Il `Space` funzione è utile per la formattazione dell&quot;output e cancellare i dati in stringhe a lunghezza fissa."
  example:
  - "This example uses the `Space` function to return a string consisting of a specified number of spaces.  \n  \n [!code-vb[VbVbalrStrings#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._154_1.vb)]"
  syntax:
    content: public static string Space (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>espressione. Il numero di spazi che nella stringa di cui si desidera."
    return:
      type: System.String
      description: "Restituisce una stringa costituita dal numero specificato di spazi."
  overload: Microsoft.VisualBasic.Strings.Space*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una matrice unidimensionale in base zero contenente un numero specificato di sottostringhe."
  remarks: "Per impostazione predefinita, oppure quando `Limit` è uguale a -1, il `Split` funzione divide la stringa di input ogni occorrenza della stringa di delimitazione e restituisce le sottostringhe in una matrice. Quando il `Limit` parametro è maggiore di zero, il `Split` funzione divide la stringa del primo `Limit`-1 occorrenze del delimitatore e restituisce una matrice con le sottostringhe risultanti. Ad esempio, `Split(&quot;a:b:c&quot;, &quot;:&quot;)` restituisce la matrice `{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}`, mentre `Split(&quot;a:b:c&quot;, &quot;:&quot;, 2)` restituisce la matrice `{&quot;a&quot;, &quot;b:c&quot;}`.       Quando il `Split` funzione rileva due delimitatori in una riga o un delimitatore all&quot;inizio o alla fine della stringa, li interpreta come delimitatori di una stringa vuota (&quot;&quot;). Ad esempio, `Split(&quot;xx&quot;, &quot;x&quot;)` restituisce la matrice contenente tre stringhe vuote: uno tra l&quot;inizio della stringa e la prima &quot;x&quot;, una tra le due &quot;stringhe x&quot; e uno tra l&quot;ultima &quot;x&quot; e la fine della stringa.       Questa tabella viene illustrato come facoltativo `Delimiter`, `Limit`, e `Compare` parametri è possono modificare il comportamento del `Split` (funzione).      |||   |-|-|   | Chiamata di Split | Valore restituito |   | `Split(&quot;42, 12, 19&quot;)`| {&quot;42&quot;,&quot;,&quot;12&quot;,&quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;)`| {&quot;42&quot;, &quot;12&quot;, &quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;, 2)`| {&quot;42&quot;, &quot;12, 19&quot;} |   | `Split(&quot;192.168.0.1&quot;, &quot;.&quot;)`| {&quot;192&quot;, &quot;168&quot;, &quot;0&quot;, &quot;1&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;)`| {&quot;Alice e Bob&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;, ,CompareMethod.Text)`| {&quot;Alice&quot;, &quot;Maria&quot;} |   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,1)`| {&quot;someone@example.com&quot;}|   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,2)`| {&quot;prova&quot;, &quot;example.com&quot;}|       Il `Compare` argomento può avere i valori seguenti.      ||||   |-|-|-|   | Costante | Descrizione | Valore |   | `CompareMethod.Binary`| Esegue un confronto binario |&0; |   | `CompareMethod.Text`| Esegue un confronto testuale |&1; |"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_1.vb)]  \n  \n The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.  \n  \n [!code-vb[VbVbalrStrings#14](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_2.vb)]"
  syntax:
    content: public static string[] Split (string Expression, string Delimiter = " ", int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente le sottostringhe e delimitatori."
    - id: Delimiter
      type: System.String
      description: "Facoltativa. Qualsiasi singolo carattere utilizzato per identificare i limiti della sottostringa. Se `Delimiter` viene omesso, il carattere spazio (&quot;&quot;) si presuppone che sia il delimitatore."
    - id: Limit
      type: System.Int32
      description: "Facoltativa. Numero massimo di sottostringhe in cui è necessario suddividere la stringa di input. Il valore predefinito, -1, indica che la stringa di input deve essere suddiviso in tutte le occorrenze del `Delimiter` stringa."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Facoltativa. Valore numerico che indica il confronto da utilizzare durante la valutazione delle sottostringhe. Per i valori, vedere &quot;Impostazioni&quot;."
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>matrice. Se <code> Expression </code> è una stringa di lunghezza zero (&quot;&quot;), <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> restituisce una matrice a elemento singolo contenente una stringa di lunghezza zero. Se <code> Delimiter </code> è una stringa di lunghezza zero, o se non viene visualizzato in un punto qualsiasi <code> Expression </code>, <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> restituisce una matrice a elemento singolo contenente l&quot;intero <code> Expression </code> stringa."
  overload: Microsoft.VisualBasic.Strings.Split*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce -1, 0 o 1, in base al risultato di un confronto tra stringhe."
  remarks: "Le stringhe vengono confrontate in valori di ordinamento alfanumerici a partire dal primo carattere. Per ulteriori informazioni sui confronti binari e testuali e ordinamento, vedere [istruzione Option Compare](~/add/includes/ajax-current-ext-md.md).       Il `Compare` impostazioni degli argomenti sono: | | |   |-|-|   | Costante | Descrizione |   | `Binary`| Esegue un confronto binario, in base a un tipo di ordinamento derivato dalle rappresentazioni binarie interne dei caratteri. |   | `Text`| Esegue un confronto di testo, in base a un criterio di ordinamento senza distinzione tra maiuscole varia a seconda del sistema `LocaleID` valore. |"
  example:
  - "This example uses the `StrComp` function to return the results of a string comparison.  \n  \n [!code-vb[VbVbalrStrings#22](~/add/codesnippet/visualbasic/40cb6ac0-98a9-4acc-9cbf-_1.vb)]"
  syntax:
    content: public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione."
    - id: String2
      type: System.String
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Facoltativa. Specifica il tipo di confronto di stringhe. Se `Compare` viene omesso, il <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> impostazione determina il tipo di confronto."
    return:
      type: System.Int32
      description: "Il <xref uid=&quot;langword_csharp_StrComp&quot; name=&quot;StrComp&quot; href=&quot;&quot;> </xref> funzione presenta i seguenti valori restituiti.       <table><tbody><tr><td> Se       </td><td> Restituisce StrComp       </td></tr><tr><td><code>String1</code>Ordina avanti rispetto<code>String2</code></td><td> -1       </td></tr><tr><td><code>String1</code>è uguale a<code>String2</code></td><td> 0       </td></tr><tr><td><code>String1</code>Ordina dopo<code>String2</code></td><td> 1       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.StrComp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Compare</code>valore non è valido."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  id: StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa convertita nel modo specificato."
  remarks: "Le costanti `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, e `VbStrConv.Hiragana` possono causare errori di runtime quando utilizzato in impostazioni locali in cui non si applicano, ma non sempre: le costanti `VbStrConv.Katakana` e `VbStrConv.Hiragana` può essere utilizzato in un sistema non giapponese con installato il Language Pack giapponese. Inoltre, l&quot;utilizzo delle costanti `VbStrConv.Wide` e `VbStrConv.Narrow` è supportato in qualsiasi sistema con una lingua dell&quot;Asia installata.       Questa funzione utilizza informazioni relative alla lingua dell&quot;applicazione durante la modifica della stringa in modo che le modifiche siano appropriate per le impostazioni locali in cui viene utilizzata l&quot;applicazione.      > [!IMPORTANT] > Se l&quot;applicazione prende decisioni di sicurezza in base al risultato di un&quot;operazione di modifica di maiuscole o il confronto, quindi l&quot;operazione deve utilizzare il <xref:System.String.Compare%2A?displayProperty=fullName>(metodo) e passare <xref:System.StringComparison>o <xref:System.StringComparison>per il `comparisonType` argomento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Per ulteriori informazioni, vedere [come impostazioni cultura influisce sulle stringhe in Visual Basic](~/add/includes/ajax-current-ext-md.md).       Il `Conversion` impostazioni degli argomenti sono: | | |   |-|-|   | Membro di enumerazione | Descrizione |   | `VbStrConv.None`| Nessuna conversione |   | `VbStrConv.LinguisticCasing`| Utilizza regole per le maiuscole e minuscole, invece del File System (impostazione predefinita). Valido con `VbStrConv.UpperCase` e `VbStrConv.LowerCase` solo. |   | `VbStrConv.UpperCase`| Converte la stringa di caratteri maiuscoli. |   | `VbStrConv.LowerCase`| Converte la stringa di caratteri minuscoli. |   | `VbStrConv.ProperCase`| Converte la prima lettera di ogni parola nella stringa in lettere maiuscole. |   | `VbStrConv.Wide` <sup>*</sup>| Converte i caratteri stretti (metà larghezza) caratteri nella stringa di caratteri wide (larghezza intera). |   | `VbStrConv.Narrow` <sup>*</sup>| Converte i caratteri &quot;wide&quot; (larghezza intera) nella stringa di caratteri stretti (metà larghezza). |   | `VbStrConv.Katakana` <sup>**</sup>| Converte la stringa di caratteri Hiragana in caratteri Katakana. |   | `VbStrConv.Hiragana` <sup>**</sup>| Converte la stringa di caratteri Katakana in caratteri Hiragana. |   | `VbStrConv.SimplifiedChinese` <sup>*</sup>| Converte i caratteri in cinese tradizionale in cinese semplificato. |   | `VbStrConv.TraditionalChinese` <sup>*</sup>| Converte i caratteri in cinese semplificato in cinese tradizionale. |       <sup> * </sup> Si applica alle impostazioni internazionali dell&quot;Asia.       <sup>**</sup>Si applica solo a Giappone.      > [!NOTE] > Queste costanti vengono specificate in .NET Framework common language runtime. Di conseguenza, possono essere utilizzati in qualsiasi punto nel codice al posto dei valori effettivi. La maggior parte possono essere combinata (ad esempio, `UpperCase + Wide`), tranne quando sono si escludono a vicenda (ad esempio, `VbStrConv.Wide + VbStrConv.Narrow`).       Di seguito sono riportati i separatori di parola valido per la conversione: Null (`Chr$(0)`), tabulazione orizzontale (`Chr$(9)`), avanzamento riga (`Chr$(10)`), tabulazione verticale (`Chr$(11)`), avanzamento modulo (`Chr$(12)`), ritorno a capo (`Chr$(13)`), spazio (single byte character set) (`Chr$(32)`). Il valore effettivo di uno spazio, che può essere full o metà larghezza, varia in base al paese/area geografica per le lingue dell&quot;Asia orientale."
  example:
  - "This example converts text into all lowercase letters.  \n  \n [!code-vb[VbVbalrStrings#6](~/add/codesnippet/visualbasic/834dd6b9-b57e-4455-8085-_1.vb)]"
  syntax:
    content: public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);
    parameters:
    - id: str
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione da convertire."
    - id: Conversion
      type: Microsoft.VisualBasic.VbStrConv
      description: "Obbligatorio. <xref href=&quot;Microsoft.VisualBasic.VbStrConv&quot;></xref>membro. Il valore di enumerazione che specifica il tipo di conversione da eseguire."
    - id: LocaleID
      type: System.Int32
      description: "Facoltativa. Il <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> valore, se diverso dal sistema <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> valore. (Il sistema <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> è il valore predefinito.)"
    return:
      type: System.String
      description: "Restituisce una stringa convertita nel modo specificato."
  overload: Microsoft.VisualBasic.Strings.StrConv*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Non supportato <code> LocaleID </code>, <code> Conversion </code> &lt; 0 o &gt; conversione 2048 oppure non è supportata per le impostazioni locali specificate."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  id: StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa o oggetto costituito dal carattere specificato ripetuto il numero di volte specificato."
  remarks: "Questa funzione restituisce un `String` costituito da caratteri ripetuti. Il carattere che costituisce la stringa è il primo carattere il `Character` argomento e viene duplicato `Number` numero di volte."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._197_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, char Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>espressione. La lunghezza della stringa da restituire."
    - id: Character
      type: System.Char
      description: "Obbligatorio. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Da utilizzare solo il primo carattere dell&quot;espressione. Se il carattere è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, deve contenere un <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>valore."
    return:
      type: System.String
      description: "Restituisce una stringa o oggetto costituito dal carattere specificato ripetuto il numero di volte specificato."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>è minore di 0 o <code>Character</code> tipo non è valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  id: StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa o oggetto costituito dal carattere specificato ripetuto il numero di volte specificato."
  remarks: "Questa funzione restituisce un `String` costituito da caratteri ripetuti. Il carattere che costituisce la stringa è il primo carattere il `Character` argomento e viene duplicato `Number` numero di volte."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._63_1.vb)]"
  syntax:
    content: public static object StrDup (int Number, object Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>espressione. La lunghezza della stringa da restituire."
    - id: Character
      type: System.Object
      description: "Obbligatorio. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Da utilizzare solo il primo carattere dell&quot;espressione. Se il carattere è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, deve contenere un <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>valore."
    return:
      type: System.Object
      description: "Restituisce una stringa o oggetto costituito dal carattere specificato ripetuto il numero di volte specificato."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>è minore di 0 o <code>Character</code> tipo non è valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  id: StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa o oggetto costituito dal carattere specificato ripetuto il numero di volte specificato."
  remarks: "Questa funzione restituisce un `String` costituito da caratteri ripetuti. Il carattere che costituisce la stringa è il primo carattere il `Character` argomento e viene duplicato `Number` numero di volte."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._148_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, string Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>espressione. La lunghezza della stringa da restituire."
    - id: Character
      type: System.String
      description: "Obbligatorio. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Da utilizzare solo il primo carattere dell&quot;espressione. Se il carattere è di tipo <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, deve contenere un <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>valore."
    return:
      type: System.String
      description: "Restituisce una stringa o oggetto costituito dal carattere specificato ripetuto il numero di volte specificato."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>è minore di 0 o <code>Character</code> tipo non è valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  id: StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa in cui viene invertito l&quot;ordine dei caratteri di una stringa specificata."
  remarks: "Il `StrReverse` funzione restituisce una stringa che contiene gli stessi caratteri `Expression`, ma in ordine inverso."
  example:
  - '[!code-vb[VbVbalrStrings#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._7_1.vb)]'
  syntax:
    content: public static string StrReverse (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Obbligatorio. Espressione stringa i cui caratteri devono essere invertiti. Se `Expression` è una stringa di lunghezza zero (&quot;&quot;), viene restituita una stringa di lunghezza zero."
    return:
      type: System.String
      description: "Restituisce una stringa in cui viene invertito l&quot;ordine dei caratteri di una stringa specificata."
  overload: Microsoft.VisualBasic.Strings.StrReverse*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  id: Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), senza spazi finali (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), o nessun spazi iniziali o finali (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "Il `LTrim`, `RTrim`, e `Trim` funzioni rimuovono gli spazi alla fine delle stringhe."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._87_1.vb)]"
  syntax:
    content: public static string Trim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione."
    return:
      type: System.String
      description: "Restituisce una stringa contenente una copia di una stringa specificata senza spazi iniziali (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), senza spazi finali (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), o nessun spazi iniziali o finali (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.Trim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  id: UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa o carattere contenente la stringa specificata convertita in caratteri maiuscoli."
  remarks: "Solo le lettere minuscole vengono convertite in maiuscole. le lettere maiuscole e i caratteri rimangono invariati.       Questa funzione utilizza informazioni relative alla lingua dell&quot;applicazione durante la modifica della stringa in modo che le modifiche siano appropriate per le impostazioni locali in cui viene utilizzata l&quot;applicazione.      > [!IMPORTANT] > Se l&quot;applicazione prende decisioni di sicurezza in base al risultato di un&quot;operazione di modifica di maiuscole o il confronto, quindi l&quot;operazione deve utilizzare il <xref:System.String.Compare%2A?displayProperty=fullName>(metodo) e passare <xref:System.StringComparison>o <xref:System.StringComparison>per il `comparisonType` argomento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Per ulteriori informazioni, vedere [come impostazioni cultura influisce sulle stringhe in Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._201_1.vb)]"
  syntax:
    content: public static char UCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> espressione."
    return:
      type: System.Char
      description: "Restituisce una stringa o carattere contenente la stringa specificata convertita in caratteri maiuscoli."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  id: UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa o carattere contenente la stringa specificata convertita in caratteri maiuscoli."
  remarks: "Solo le lettere minuscole vengono convertite in maiuscole. le lettere maiuscole e i caratteri rimangono invariati.       Questa funzione utilizza informazioni relative alla lingua dell&quot;applicazione durante la modifica della stringa in modo che le modifiche siano appropriate per le impostazioni locali in cui viene utilizzata l&quot;applicazione.      > [!IMPORTANT] > Se l&quot;applicazione prende decisioni di sicurezza in base al risultato di un&quot;operazione di modifica di maiuscole o il confronto, quindi l&quot;operazione deve utilizzare il <xref:System.String.Compare%2A?displayProperty=fullName>(metodo) e passare <xref:System.StringComparison>o <xref:System.StringComparison>per il `comparisonType` argomento.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Per ulteriori informazioni, vedere [come impostazioni cultura influisce sulle stringhe in Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._23_1.vb)]"
  syntax:
    content: public static string UCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Obbligatorio. Qualsiasi <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> espressione."
    return:
      type: System.String
      description: "Restituisce una stringa o carattere contenente la stringa specificata convertita in caratteri maiuscoli."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.CompareMethod
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CompareMethod
  nameWithType: CompareMethod
  fullName: Microsoft.VisualBasic.CompareMethod
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.TriState
  parent: Microsoft.VisualBasic
  isExternal: false
  name: TriState
  nameWithType: TriState
  fullName: Microsoft.VisualBasic.TriState
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateFormat
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateFormat
  nameWithType: DateFormat
  fullName: Microsoft.VisualBasic.DateFormat
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
- uid: Microsoft.VisualBasic.VbStrConv
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VbStrConv
  nameWithType: VbStrConv
  fullName: Microsoft.VisualBasic.VbStrConv
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
- uid: Microsoft.VisualBasic.Strings.Asc*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc
  nameWithType: Strings.Asc
- uid: Microsoft.VisualBasic.Strings.AscW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW
  nameWithType: Strings.AscW
- uid: Microsoft.VisualBasic.Strings.Chr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr
  nameWithType: Strings.Chr
- uid: Microsoft.VisualBasic.Strings.ChrW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW
  nameWithType: Strings.ChrW
- uid: Microsoft.VisualBasic.Strings.Filter*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter
  nameWithType: Strings.Filter
- uid: Microsoft.VisualBasic.Strings.Format*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format
  nameWithType: Strings.Format
- uid: Microsoft.VisualBasic.Strings.FormatCurrency*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency
  nameWithType: Strings.FormatCurrency
- uid: Microsoft.VisualBasic.Strings.FormatDateTime*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime
  nameWithType: Strings.FormatDateTime
- uid: Microsoft.VisualBasic.Strings.FormatNumber*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber
  nameWithType: Strings.FormatNumber
- uid: Microsoft.VisualBasic.Strings.FormatPercent*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent
  nameWithType: Strings.FormatPercent
- uid: Microsoft.VisualBasic.Strings.GetChar*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar
  nameWithType: Strings.GetChar
- uid: Microsoft.VisualBasic.Strings.InStr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr
  nameWithType: Strings.InStr
- uid: Microsoft.VisualBasic.Strings.InStrRev*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev
  nameWithType: Strings.InStrRev
- uid: Microsoft.VisualBasic.Strings.Join*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join
  nameWithType: Strings.Join
- uid: Microsoft.VisualBasic.Strings.LCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase
  nameWithType: Strings.LCase
- uid: Microsoft.VisualBasic.Strings.Left*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left
  nameWithType: Strings.Left
- uid: Microsoft.VisualBasic.Strings.Len*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len
  nameWithType: Strings.Len
- uid: Microsoft.VisualBasic.Strings.LSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet
  nameWithType: Strings.LSet
- uid: Microsoft.VisualBasic.Strings.LTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim
  nameWithType: Strings.LTrim
- uid: Microsoft.VisualBasic.Strings.Mid*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid
  nameWithType: Strings.Mid
- uid: Microsoft.VisualBasic.Strings.Replace*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace
  nameWithType: Strings.Replace
- uid: Microsoft.VisualBasic.Strings.Right*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right
  nameWithType: Strings.Right
- uid: Microsoft.VisualBasic.Strings.RSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet
  nameWithType: Strings.RSet
- uid: Microsoft.VisualBasic.Strings.RTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim
  nameWithType: Strings.RTrim
- uid: Microsoft.VisualBasic.Strings.Space*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space
  nameWithType: Strings.Space
- uid: Microsoft.VisualBasic.Strings.Split*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split
  nameWithType: Strings.Split
- uid: Microsoft.VisualBasic.Strings.StrComp*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp
  nameWithType: Strings.StrComp
- uid: Microsoft.VisualBasic.Strings.StrConv*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv
  nameWithType: Strings.StrConv
- uid: Microsoft.VisualBasic.Strings.StrDup*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup
  nameWithType: Strings.StrDup
- uid: Microsoft.VisualBasic.Strings.StrReverse*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse
  nameWithType: Strings.StrReverse
- uid: Microsoft.VisualBasic.Strings.Trim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim
  nameWithType: Strings.Trim
- uid: Microsoft.VisualBasic.Strings.UCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase
  nameWithType: Strings.UCase
