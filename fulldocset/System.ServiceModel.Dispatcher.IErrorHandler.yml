### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IErrorHandler
  id: IErrorHandler
  children:
  - System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  - System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  langs:
  - csharp
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: System.ServiceModel.Dispatcher.IErrorHandler
  type: Interface
  summary: "Consente a un implementatore di controllare il messaggio di errore restituito al chiamante e facoltativamente di eseguire l&quot;elaborazione, ad esempio la registrazione di errori personalizzata."
  remarks: "Per controllare in modo esplicito il comportamento dell&quot;applicazione quando viene generata un&quot;eccezione, implementare l&quot;interfaccia di IErrorHandler e aggiungerlo al <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>del <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>proprietà.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> IErrorHandler consente di controllare l&quot;errore SOAP generato in modo esplicito, decidere se restituirlo al client ed eseguire attività associate, ad esempio la registrazione. I gestori degli errori vengono chiamati nell&quot;ordine in cui sono stati aggiunti per il <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>proprietà.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Implementare il <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>metodo per controllare il messaggio di errore viene restituito al client.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>       Implementare il <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>per assicurare comportamenti relativi agli errori, inclusi registrazione dell&quot;errore, esecuzione di un veloce, chiusura dell&quot;applicazione e così via.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>      > [!NOTE] > Perché il <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metodo può essere chiamato da posizioni diverse non vi è alcun modo di sapere su quale thread viene chiamato il metodo.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> Non basarsi sul <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>metodo chiamato sul thread dell&quot;operazione.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Tutti <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementazioni vengono chiamate prima di inviare un messaggio di risposta.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Quando tutti <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementazioni sono state chiamate e restituire e se `fault` è non`null`, che viene inviato al client in base al contratto di operazione.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Se `fault` è `null` dopo aver chiamate tutte le implementazioni, il messaggio di risposta è controllato dal <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>valore della proprietà.</xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>      > [!NOTE] > Possono verificarsi eccezioni dopo che tutti <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>implementazioni sono denominate e un messaggio di risposta viene passato al canale.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Se si verifica un&quot;eccezione di canale (ad esempio, la serializzazione del messaggio difficoltà) gli oggetti di IErrorHandler vengono inviata una notifica. In questo caso, deve ancora assicurarsi che l&quot;ambiente di sviluppo memorizza nella cache e visualizza tali eccezioni o si avvalgono di analisi per individuare il problema. Per ulteriori informazioni sulla traccia, vedere [utilizzando opzioni di traccia per risolvere i problemi dell&quot;applicazione](~/add/includes/ajax-current-ext-md.md).       Dopo il messaggio di risposta è stato inviato, tutti <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>implementazioni vengono chiamate nello stesso ordine.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       In genere, un&quot;implementazione di IErrorHandler viene aggiunto per il <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>proprietà del servizio (e il client nel caso di comunicazione duplex).</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       È possibile aggiungere l&quot;oggetto IErrorHandler a runtime implementando un comportamento (entrambi un <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>, o <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName>oggetto) e utilizzare il comportamento a livello di codice da un file di configurazione o con un attributo personalizzato per collegare l&quot;oggetto IErrorHandler.</xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>       Per ulteriori informazioni sull&quot;utilizzo dei comportamenti per modificare il runtime, vedere [la configurazione e l&quot;estensione del Runtime con i comportamenti](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a service that implements IErrorHandler that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the IErrorHandler implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n```  \n  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metaAndErrors\">  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/SampleService\"/>  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"\"  \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n         />  \n        <endpoint  \n          address=\"mex\"  \n          binding=\"mexHttpBinding\"  \n          contract=\"IMetadataExchange\"  \n         />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"metaAndErrors\">  \n          <serviceDebug includeExceptionDetailInFaults=\"true\"/>  \n          <serviceMetadata httpGetEnabled=\"true\"/>  \n          <enforceGreetingFaults />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"enforceGreetingFaults\"   \n          type=\"Microsoft.WCF.Documentation.EnforceGreetingFaultBehavior, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```"
  syntax:
    content: public interface IErrorHandler
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  id: HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Abilita l&quot;elaborazione relativa agli errori e restituisce un valore che indica se il dispatcher interrompe la sessione e il contesto dell&quot;istanza in alcuni casi."
  remarks: "Utilizzare il metodo HandleError per implementare i comportamenti relativi agli errori, ad esempio la registrazione, le notifiche di sistema, arrestare l&quot;applicazione e così via, errori e restituire un valore che specifica se l&quot;eccezione è stata gestita in modo appropriato.      > [!NOTE] > Perché il metodo HandleError può essere chiamato da posizioni diverse non vi è alcun modo di sapere su quale thread viene chiamato il metodo. Non basarsi sul metodo HandleError chiamato sul thread dell&quot;operazione.       Tutti <xref:System.ServiceModel.Dispatcher.IErrorHandler>implementazioni vengono chiamate.</xref:System.ServiceModel.Dispatcher.IErrorHandler> Per impostazione predefinita (quando il valore restituito è `false`), se si verifica un&quot;eccezione, il dispatcher interrompe qualsiasi sessione e il <xref:System.ServiceModel.InstanceContext>Se <xref:System.ServiceModel.InstanceContextMode>è diverso da <xref:System.ServiceModel.InstanceContextMode>.</xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContext>  L&quot;eccezione viene considerata non gestita e qualsiasi stato viene considerato danneggiato.       Restituire `true` da HandleError per evitare questo comportamento predefinito. Se un gestore di errori restituisce `true` indica [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] che è possibile continuare a utilizzare lo stato associato alla richiesta non riuscita.       Se nessun gestore di errori restituisce `true` dal metodo HandleError metodo l&quot;eccezione viene considerata non gestita e si applica la risposta predefinita, il risultato di un&quot;interruzione <xref:System.ServiceModel.InstanceContext?displayProperty=fullName>e canale durante la comunicazione su un canale di sessione o la <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>proprietà non è impostata su <xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName>.</xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext?displayProperty=fullName>       Il `error` parametro non è mai `null` e contiene l&quot;oggetto eccezione che è stata generata."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool HandleError (Exception error);
    parameters:
    - id: error
      type: System.Exception
      description: "Eccezione generata durante l&quot;elaborazione."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] non deve interrompere la sessione (se presente) e il contesto dell&quot;istanza se il contesto dell&quot;istanza non <xref href=&quot;System.ServiceModel.InstanceContextMode&quot;> </xref>; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  id: ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Consente di creare un oggetto personalizzato &lt;xref:System.ServiceModel.FaultException%601&gt; restituito da un&quot;eccezione nel corso di un metodo del servizio."
  remarks: "Implementare il metodo ProvideFault per creare un messaggio di errore personalizzato che viene restituito al client.  Il metodo ProvideFault sarà sempre chiamato per le eccezioni che lasciano operazioni, tranne quando il runtime WCF riconosce l&quot;eccezione come particolarmente irreversibile e rigenera l&quot;eccezione stessa. Quando tutte le implementazioni di ProvideFault sono state chiamate, il messaggio di errore viene inviato al client (se `fault` è non`null`). Se il `fault` parametro `null` il messaggio di errore predefinito viene inviato al client.      > [!NOTE] > Il messaggio in ingresso che ha causato l&quot;errore di elaborazione è disponibile durante questo metodo dal <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>proprietà.</xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>      > [!NOTE] > Perché può essere chiamato il metodo ProvideFault da posizioni diverse non vi è alcun modo di sapere su quale thread viene chiamato il metodo. Non basarsi sul metodo ProvideFault chiamato sul thread dell&quot;operazione."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    parameters:
    - id: error
      type: System.Exception
      description: "Il <xref:System.Exception>oggetto durante l&quot;operazione del servizio generata.</xref:System.Exception>"
    - id: version
      type: System.ServiceModel.Channels.MessageVersion
      description: "La versione SOAP del messaggio."
    - id: fault
      type: System.ServiceModel.Channels.Message
      description: "Il &lt;xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt; oggetto restituito al client o al servizio, nel caso duplex."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageVersion
  nameWithType: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError
  nameWithType: IErrorHandler.HandleError
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault
  nameWithType: IErrorHandler.ProvideFault
