### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.DataLoadOptions
  id: DataLoadOptions
  children:
  - System.Data.Linq.DataLoadOptions.#ctor
  - System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  - System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  - System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  langs:
  - csharp
  name: DataLoadOptions
  nameWithType: DataLoadOptions
  fullName: System.Data.Linq.DataLoadOptions
  type: Class
  summary: "Vengono fornite per il caricamento immediato e il filtro di dati correlati."
  remarks: "##Quando generale è eseguire una query per un oggetto, si recupera in effetti solo l&quot;oggetto richiesto. Il *correlati* oggetti non vengono recuperati contemporaneamente. (Per ulteriori informazioni, vedere [l&quot;esecuzione di query tra relazioni](~/add/includes/ajax-current-ext-md.md).)       La classe di valori DataLoadOptions fornisce due metodi per ottenere il caricamento immediato dei dati correlati specificati. Il <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>metodo consente il caricamento immediato dei dati correlati alla destinazione principale.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> Il <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>metodo consente il filtraggio degli oggetti correlati.</xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>      ## Le regole di tenere presenti le seguenti regole riguardanti l&quot;utilizzo di valori DataLoadOptions:-l&quot;assegnazione di un valori DataLoadOptions per un <xref:System.Data.Linq.DataContext>dopo che è stata eseguita la prima query genera un&quot;eccezione.</xref:System.Data.Linq.DataContext>      -La modifica di un valori DataLoadOptions dopo che è stato assegnato a un <xref:System.Data.Linq.DataContext>genera un&quot;eccezione di # # la gestione del ciclo di <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>e <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>direttive non devono creare cicli.</xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> </xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> </xref:System.Data.Linq.DataContext> Le operazioni seguenti rappresentano esempi di tali oggetti grafici:-esempio 1: Self ricorsiva - `dlo.LoadWith<Employee>(e => e.Reports);` -esempio 2: puntatori di Back - `dlo.LoadWith <Customer>(c => C.Orders);`           -    `dlo.LoadWith <Order>(o => o.Customer);` -esempio 3: più cicli anche se questo non deve verificarsi in un modello ben normalizzato, è possibile.          - `dlo.LoadWith <A>(a => a.Bs);`           -    `dlo.LoadWith <B>(b => b.Cs);`           -    `dlo.LoadWith <C>(c => c.As);` -Esempio 4: Self sottoquery ricorsiva - `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));` -esempio 5: sottoquery autoricorsive più lunghe - `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`           -    `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));` di seguito sono riportate alcune regole generali che consentono di capire ciò che accade in questi scenari.       **LoadWith** ogni chiamata a <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>Controlla se sono stati introdotti cicli nel grafico.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> Se sono presenti, come illustrato negli esempi 1, 2 e 3, viene generata un&quot;eccezione.       **AssociateWith** il motore in fase di esecuzione non applica le clausole SubQuery esistenti per la relazione all&quot;interno dell&quot;espressione.      -Nell&quot;esempio 4, il `Where` clausola viene eseguita su tutti `A`, non solo quelli secondari filtrati in base l&quot;espressione di sottoquery (perché sarebbe ricorsiva), nell&quot;esempio 5, il primo `Where` clausola viene applicata a tutti i `B`s, anche se sono presenti sottoquery in `B`. Il secondo `Where` clausola viene applicata a tutti i `A`s anche se esistono sottoquery su `A`."
  example:
  - When you retrieve `Customers` from the Northwind sample database, you can use DataLoadOptions to specify that `Orders` is also to be retrieved. You can even specify which subset of `Orders` to retrieve.
  syntax:
    content: public sealed class DataLoadOptions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.#ctor
  id: '#ctor'
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: DataLoadOptions()
  nameWithType: DataLoadOptions.DataLoadOptions()
  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.Linq.DataLoadOptions&quot;> </xref> classe."
  syntax:
    content: public DataLoadOptions ();
    parameters: []
  overload: System.Data.Linq.DataLoadOptions.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  id: AssociateWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: AssociateWith(LambdaExpression)
  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Filtra gli oggetti recuperati per una determinata relazione."
  remarks: "Nell&quot;esempio seguente, il ciclo interno scorre solo quelli `Orders` che non sono state spedite oggi."
  example:
  - >-
    [!code-vb[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/visualbasic/snip/module1.vb#1)]
     [!code-cs[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/csharp/testmakenew/program.cs#1)]
  syntax:
    content: public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: "Identifica la query da utilizzare in un determinato campo di uno-a-molti o una proprietà. Si noti quanto segue: se l&quot;espressione non inizia con un campo o proprietà che rappresenta una relazione uno-a-molti, viene generata un&quot;eccezione.       Se un operatore diverso da un operatore valido visualizzato nell&quot;espressione, viene generata un&quot;eccezione. Gli operatori validi sono i seguenti: dove OrderBy ThenBy OrderByDescending ThenByDescending richiedere"
  overload: System.Data.Linq.DataLoadOptions.AssociateWith*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: AssociateWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public void AssociateWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "Da aggiungere."
  overload: System.Data.Linq.DataLoadOptions.AssociateWith<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  id: LoadWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: LoadWith(LambdaExpression)
  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Recupera i dati correlati alla destinazione principale tramite un&quot;espressione lambda specificati."
  remarks: "Nell&quot;esempio seguente, tutti il `Orders` per tutti i `Customers` residenti nell&quot;area londinese vengono recuperati quando viene eseguita la query. Di conseguenza, accesso successivo al `Orders` proprietà in un `Customer` oggetto non è attiva una nuova query di database."
  example:
  - >-
    [!code-vb[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/visualbasic/snip/module1.vb#2)]
     [!code-cs[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/csharp/testmakenew/program.cs#2)]
  syntax:
    content: public void LoadWith (System.Linq.Expressions.LambdaExpression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: "Un&quot;espressione lambda che identifica il materiale correlato."
  overload: System.Data.Linq.DataLoadOptions.LoadWith*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: LoadWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public void LoadWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "Da aggiungere."
  overload: System.Data.Linq.DataLoadOptions.LoadWith<T>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.DataLoadOptions.#ctor
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: DataLoadOptions()
  nameWithType: DataLoadOptions.DataLoadOptions()
  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()
- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith(LambdaExpression)
  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
- uid: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression<Func<T,Object>>
  nameWithType: Expression<Func<T,Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T,System.Object>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<T,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<T,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith(LambdaExpression)
  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)
- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
- uid: System.Data.Linq.DataLoadOptions.#ctor*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: DataLoadOptions
  nameWithType: DataLoadOptions.DataLoadOptions
- uid: System.Data.Linq.DataLoadOptions.AssociateWith*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith
  nameWithType: DataLoadOptions.AssociateWith
- uid: System.Data.Linq.DataLoadOptions.AssociateWith<T>*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith<T>
  nameWithType: DataLoadOptions.AssociateWith<T>
- uid: System.Data.Linq.DataLoadOptions.LoadWith*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith
  nameWithType: DataLoadOptions.LoadWith
- uid: System.Data.Linq.DataLoadOptions.LoadWith<T>*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith<T>
  nameWithType: DataLoadOptions.LoadWith<T>
