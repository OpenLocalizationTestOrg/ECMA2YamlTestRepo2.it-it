### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbConnection
  id: DbConnection
  children:
  - System.Data.Common.DbConnection.#ctor
  - System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.BeginTransaction
  - System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.ChangeDatabase(System.String)
  - System.Data.Common.DbConnection.Close
  - System.Data.Common.DbConnection.ConnectionString
  - System.Data.Common.DbConnection.ConnectionTimeout
  - System.Data.Common.DbConnection.CreateCommand
  - System.Data.Common.DbConnection.CreateDbCommand
  - System.Data.Common.DbConnection.Database
  - System.Data.Common.DbConnection.DataSource
  - System.Data.Common.DbConnection.DbProviderFactory
  - System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.Common.DbConnection.GetSchema
  - System.Data.Common.DbConnection.GetSchema(System.String)
  - System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.Open
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.ServerVersion
  - System.Data.Common.DbConnection.State
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  langs:
  - csharp
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
  type: Class
  summary: "Rappresenta una connessione a un database."
  syntax:
    content: 'public abstract class DbConnection : System.ComponentModel.Component, IDisposable, System.Data.IDbConnection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.Data.IDbConnection
  - System.IDisposable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbConnection.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: DbConnection()
  nameWithType: DbConnection.DbConnection()
  fullName: System.Data.Common.DbConnection.DbConnection()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.Common.DbConnection&quot;> </xref> classe."
  syntax:
    content: protected DbConnection ();
    parameters: []
  overload: System.Data.Common.DbConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Avvia una transazione di database."
  remarks: "Se si sta creando un tipo di connessione, eseguire l&quot;override di questo metodo per implementare il codice necessario per avviare una transazione."
  syntax:
    content: protected abstract System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "Specifica il livello di isolamento della transazione."
    return:
      type: System.Data.Common.DbTransaction
      description: "Oggetto che rappresenta la nuova transazione."
  overload: System.Data.Common.DbConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: DbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Avvia una transazione di database."
  remarks: "Se non si specifica un livello di isolamento, viene utilizzato il livello di isolamento predefinito per il tipo specifico della connessione."
  syntax:
    content: public System.Data.Common.DbTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.Common.DbTransaction
      description: "Oggetto che rappresenta la nuova transazione."
  overload: System.Data.Common.DbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Avvia una transazione di database con il livello di isolamento specificato."
  syntax:
    content: public System.Data.Common.DbTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "Specifica il livello di isolamento della transazione."
    return:
      type: System.Data.Common.DbTransaction
      description: "Oggetto che rappresenta la nuova transazione."
  overload: System.Data.Common.DbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: DbConnection.ChangeDatabase(String)
  fullName: System.Data.Common.DbConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Modifica il database corrente per una connessione aperta."
  remarks: "Il valore fornito nel `databaseName` parametro deve essere un nome di database valido per l&quot;istanza corrente."
  syntax:
    content: public abstract void ChangeDatabase (string databaseName);
    parameters:
    - id: databaseName
      type: System.String
      description: "Specifica il nome del database per la connessione da utilizzare."
  overload: System.Data.Common.DbConnection.ChangeDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.Close
  id: Close
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: Close()
  nameWithType: DbConnection.Close()
  fullName: System.Data.Common.DbConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Chiude la connessione al database. Questo è il metodo preferito di chiusura di una connessione aperta."
  remarks: "Il metodo Close esegue il rollback di tutte le transazioni in sospeso. È quindi rilascia la connessione al pool di connessioni o chiude la connessione se il pool di connessioni è disabilitato.       Un&quot;applicazione può chiamare Close più di una volta. Viene generata alcuna eccezione.       Se il <xref:System.Data.Common.DbConnection>esula dall&quot;ambito preposto, non viene chiuso.</xref:System.Data.Common.DbConnection> Pertanto, è necessario chiudere esplicitamente la connessione, chiamando `Close` o `Dispose`, che sono funzionalmente equivalenti. Se il pool di connessioni valore `Pooling` è impostato su `true` o `yes`, viene rilasciata anche la connessione fisica.      > [!CAUTION] > Non chiamare `Close` o `Dispose` su un **connessione**, **DataReader**, o qualsiasi altro oggetto gestito nel `Finalize` metodo della classe. In un finalizzatore, è necessario rilasciare solo le risorse non gestite che la classe controlla direttamente. Se la classe non dispone di risorse non gestite, non includere un `Finalize` metodo nella definizione della classe. Per ulteriori informazioni, vedere [Garbage Collection](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public abstract void Close ();
    parameters: []
  overload: System.Data.Common.DbConnection.Close*
  exceptions:
  - type: System.Data.Common.DbException
    commentId: T:System.Data.Common.DbException
    description: "Errore a livello di connessione che si è verificato durante l&quot;apertura della connessione."
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: DbConnection.ConnectionString
  fullName: System.Data.Common.DbConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene o imposta la stringa utilizzata per aprire la connessione."
  remarks: "Il contenuto esatto della stringa di connessione dipende dall&quot;origine dati specifica per questa connessione. Per determinare quali impostazioni sono valide, vedere la documentazione per il tipo specifico della connessione che si sta utilizzando."
  syntax:
    content: public abstract string ConnectionString { get; set; }
    return:
      type: System.String
      description: "Stringa di connessione utilizzata per stabilire la connessione iniziale. Il contenuto esatto della stringa di connessione dipende dall&quot;origine dati specifica per questa connessione. Il valore predefinito è una stringa vuota."
  overload: System.Data.Common.DbConnection.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: DbConnection.ConnectionTimeout
  fullName: System.Data.Common.DbConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene il tempo di attesa durante il tentativo di stabilire una connessione prima di terminare il tentativo e generare un errore."
  syntax:
    content: public virtual int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "Il tempo (in secondi) di attesa per una connessione per aprirla. Il valore predefinito è determinato dal tipo specifico della connessione che si sta utilizzando."
  overload: System.Data.Common.DbConnection.ConnectionTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: DbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Crea e restituisce un <xref href=&quot;System.Data.Common.DbCommand&quot;> </xref> oggetto associato alla connessione corrente."
  syntax:
    content: public System.Data.Common.DbCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.Common.DbCommand&quot;></xref> object."
  overload: System.Data.Common.DbConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: DbConnection.CreateDbCommand()
  fullName: System.Data.Common.DbConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Crea e restituisce un <xref href=&quot;System.Data.Common.DbCommand&quot;> </xref> oggetto associato alla connessione corrente."
  remarks: "Se si implementa un tipo di connessione, eseguire l&quot;override di questo metodo per implementare il codice necessario per creare e restituire un <xref:System.Data.Common.DbCommand>oggetto.</xref:System.Data.Common.DbCommand>"
  syntax:
    content: protected abstract System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.Common.DbCommand&quot;></xref> object."
  overload: System.Data.Common.DbConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.Database
  id: Database
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: Database
  nameWithType: DbConnection.Database
  fullName: System.Data.Common.DbConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene il nome del database corrente dopo l&quot;apertura di una connessione o il nome del database specificato nella stringa di connessione prima dell&quot;apertura della connessione."
  remarks: "Una connessione in genere gli aggiornamenti questa proprietà in modo dinamico quando viene modificato il database corrente."
  syntax:
    content: public abstract string Database { get; }
    return:
      type: System.String
      description: "Il nome del database corrente o il nome del database da utilizzare dopo l&quot;apertura di una connessione. Il valore predefinito è una stringa vuota."
  overload: System.Data.Common.DbConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.DataSource
  id: DataSource
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: DbConnection.DataSource
  fullName: System.Data.Common.DbConnection.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene il nome del server di database a cui connettersi."
  remarks: "Se la connessione al database è chiuso, l&quot;origine dati restituisce tutti i valori contenuti nel <xref:System.Data.Common.DbConnection.ConnectionString%2A>per il `DataSource` (parola chiave).</xref:System.Data.Common.DbConnection.ConnectionString%2A> Se la connessione è aperta e <xref:System.Data.Common.DbConnection.ConnectionString%2A>il valore della parola chiave di dati origine inizia con &quot;|`datadirectory`|&quot;, la proprietà restituisce tutti i valori contenuti nel <xref:System.Data.Common.DbConnection.ConnectionString%2A>per il `DataSource` sola parola chiave.</xref:System.Data.Common.DbConnection.ConnectionString%2A> </xref:System.Data.Common.DbConnection.ConnectionString%2A> Se la connessione al database è aperta, la proprietà restituirà i provider nativo per il `DBPROP_INIT_DATASOURCE`, e se è vuoto, il provider nativo `DBPROP_DATASOURCENAME` viene restituito."
  syntax:
    content: public abstract string DataSource { get; }
    return:
      type: System.String
      description: "Il nome del server di database a cui connettersi. Il valore predefinito è una stringa vuota."
  overload: System.Data.Common.DbConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.DbProviderFactory
  id: DbProviderFactory
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: DbProviderFactory
  nameWithType: DbConnection.DbProviderFactory
  fullName: System.Data.Common.DbConnection.DbProviderFactory
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Gets the <xref href=&quot;System.Data.Common.DbProviderFactory&quot;></xref> for this <xref href=&quot;System.Data.Common.DbConnection&quot;></xref>."
  syntax:
    content: protected virtual System.Data.Common.DbProviderFactory DbProviderFactory { get; }
    return:
      type: System.Data.Common.DbProviderFactory
      description: "Un set di metodi per la creazione di istanze dell&quot;implementazione di un provider delle classi di origine dati."
  overload: System.Data.Common.DbConnection.DbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: DbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.Common.DbConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Permette l&quot;integrazione nella transazione specificata."
  remarks: "Novità in ADO.NET 2.0 è il supporto per l&quot;utilizzo di `EnlistTransaction` metodo di integrazione in una transazione distribuita. Poiché inserisce una connessione in un <xref:System.Transactions.Transaction>istanza, `EnlistTransaction` consente di sfruttare le funzionalità disponibili nel <xref:System.Transactions>dello spazio dei nomi per la gestione transazioni distribuite.</xref:System.Transactions> </xref:System.Transactions.Transaction> Quando una connessione in modo esplicito è integrata in una transazione, non può essere rimosso o integrata in un&quot;altra transazione fino al completamento della prima transazione."
  syntax:
    content: public virtual void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "Un riferimento a un oggetto esistente <xref href=&quot;System.Transactions.Transaction&quot;> </xref> in cui si desidera integrare."
  overload: System.Data.Common.DbConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.GetSchema
  id: GetSchema
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: DbConnection.GetSchema()
  fullName: System.Data.Common.DbConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Restituisce informazioni sullo schema per l&quot;origine dati di questo <xref href=&quot;System.Data.Common.DbConnection&quot;> </xref>."
  remarks: "Se la connessione è associata a una transazione, l&quot;esecuzione `GetSchema` chiamate è possono che alcuni provider generare un&quot;eccezione."
  syntax:
    content: public virtual System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "Oggetto <xref href=&quot;System.Data.DataTable&quot;> </xref> che contiene informazioni sullo schema."
  overload: System.Data.Common.DbConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: DbConnection.GetSchema(String)
  fullName: System.Data.Common.DbConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Restituisce informazioni sullo schema per l&quot;origine dati di questo <xref href=&quot;System.Data.Common.DbConnection&quot;> </xref> usando la stringa specificata per il nome dello schema."
  remarks: "Se la connessione è associata a una transazione, l&quot;esecuzione `GetSchema` chiamate è possono che alcuni provider generare un&quot;eccezione."
  syntax:
    content: public virtual System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "Specifica il nome dello schema da restituire."
    return:
      type: System.Data.DataTable
      description: "Oggetto <xref href=&quot;System.Data.DataTable&quot;> </xref> che contiene informazioni sullo schema."
  overload: System.Data.Common.DbConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>viene specificato come null."
  platform:
  - net462
- uid: System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: DbConnection.GetSchema(String,String[])
  fullName: System.Data.Common.DbConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Restituisce informazioni sullo schema per l&quot;origine dati di questo <xref href=&quot;System.Data.Common.DbConnection&quot;> </xref> usando la stringa specificata per il nome dello schema e la matrice di stringa specificata per i valori di restrizione."
  remarks: "Il `restrictionValues` parametro può fornire *n* profondità di valori specificati dall&quot;insieme di restrizioni per una raccolta specifica. Per impostare i valori per una determinata restrizione e non impostare i valori di altre restrizioni, è necessario impostare le restrizioni precedenti su null e quindi inserire il valore appropriato per la restrizione che si desidera specificare un valore per.       Un esempio di questa è la raccolta &quot;Tabelle&quot;. Se la raccolta &quot;Tables&quot; presenta tre restrizioni (database, proprietario e nome di tabella) e si desidera vengano restituite solo le tabelle associate al proprietario &quot;Carlo&quot;, è necessario almeno passare i valori seguenti: null, &quot;Carlo&quot;. Se un valore di restrizione non viene passato, i valori predefiniti vengono utilizzati per la restrizione. Questo è lo stesso mapping passare null, che è diverso dal passaggio di una stringa vuota per il valore del parametro. In questo caso, la stringa vuota (&quot;&quot;) viene considerato come valore per il parametro specificato.       Se la connessione è associata a una transazione, l&quot;esecuzione `GetSchema` chiamate è possono che alcuni provider generare un&quot;eccezione."
  syntax:
    content: public virtual System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "Specifica il nome dello schema da restituire."
    - id: restrictionValues
      type: System.String[]
      description: "Specifica un set di valori di restrizione per lo schema richiesto."
    return:
      type: System.Data.DataTable
      description: "Oggetto <xref href=&quot;System.Data.DataTable&quot;> </xref> che contiene informazioni sullo schema."
  overload: System.Data.Common.DbConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>viene specificato come null."
  platform:
  - net462
- uid: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  id: OnStateChange(System.Data.StateChangeEventArgs)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: OnStateChange(StateChangeEventArgs)
  nameWithType: DbConnection.OnStateChange(StateChangeEventArgs)
  fullName: System.Data.Common.DbConnection.OnStateChange(StateChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Genera il <xref href=&quot;System.Data.Common.DbConnection.StateChange&quot;> </xref> evento."
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnStateChange (System.Data.StateChangeEventArgs stateChange);
    parameters:
    - id: stateChange
      type: System.Data.StateChangeEventArgs
      description: "Oggetto <xref href=&quot;System.Data.StateChangeEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.Common.DbConnection.OnStateChange*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.Open
  id: Open
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: Open()
  nameWithType: DbConnection.Open()
  fullName: System.Data.Common.DbConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Apre una connessione di database con le impostazioni specificate da <xref:System.Data.Common.DbConnection.ConnectionString*>.</xref:System.Data.Common.DbConnection.ConnectionString*>"
  remarks: "Questo metodo deve essere sostituito con il comportamento definito dall&quot;utente. <xref:System.Data.SqlClient.SqlConnection.Open%2A?displayProperty=fullName>verrà generata un&quot;eccezione se viene chiamato di nuovo senza prima della chiusura.</xref:System.Data.SqlClient.SqlConnection.Open%2A?displayProperty=fullName>"
  syntax:
    content: public abstract void Open ();
    parameters: []
  overload: System.Data.Common.DbConnection.Open*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.OpenAsync
  id: OpenAsync
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: OpenAsync()
  nameWithType: DbConnection.OpenAsync()
  fullName: System.Data.Common.DbConnection.OpenAsync()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Versione asincrona di <> </> *>, che apre una connessione di database con le impostazioni specificate per il <> </> *>. Questo metodo richiama il metodo virtuale <xref:System.Data.Common.DbConnection.OpenAsync*>con proprietà CancellationToken. None.</xref:System.Data.Common.DbConnection.OpenAsync*>"
  remarks: "Dopo la chiamata <xref:System.Data.Common.DbConnection.OpenAsync%2A>, <xref:System.Data.Common.DbConnection.State%2A>deve restituire <xref:System.Data.ConnectionState>fino a quando l&quot;oggetto restituito <xref:System.Threading.Tasks.Task>viene completata.</xref:System.Threading.Tasks.Task> </xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A> </xref:System.Data.Common.DbConnection.OpenAsync%2A> Quindi, se la connessione ha esito positivo, <xref:System.Data.Common.DbConnection.State%2A>deve restituire <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A> Se la connessione non riesce, <xref:System.Data.Common.DbConnection.State%2A>deve restituire <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A>       Una chiamata a <xref:System.Data.Common.DbConnection.Close%2A>tenterà di annullare o chiudere corrispondente <xref:System.Data.Common.DbConnection.OpenAsync%2A>chiamare.</xref:System.Data.Common.DbConnection.OpenAsync%2A> </xref:System.Data.Common.DbConnection.Close%2A>       Per ulteriori informazioni sulla programmazione asincrona nel [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Provider di dati per [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], vedere [programmazione asincrona](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task OpenAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Attività che rappresenta l&quot;operazione asincrona."
  overload: System.Data.Common.DbConnection.OpenAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: OpenAsync(CancellationToken)
  nameWithType: DbConnection.OpenAsync(CancellationToken)
  fullName: System.Data.Common.DbConnection.OpenAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Si tratta della versione asincrona di <> </> *>. I provider devono eseguire l&quot;override con un&quot;implementazione appropriata. Il token di annullamento può facoltativamente essere rispettato.       L&quot;implementazione predefinita richiama sincroni <> </> *> chiamare e restituisce un&quot;attività completata. L&quot;implementazione predefinita restituisce un&quot;attività annullata se passato un oggetto già annullata cancellationToken. Le eccezioni generate da aprire verranno comunicate tramite la proprietà di eccezione dell&quot;attività restituita.       Non richiamare altri metodi e le proprietà di <xref uid=&quot;langword_csharp_DbConnection&quot; name=&quot;DbConnection&quot; href=&quot;&quot;> </xref> oggetto fino al completamento dell&quot;attività restituita."
  remarks: "Dopo la chiamata <xref:System.Data.Common.DbConnection.OpenAsync%2A>, <xref:System.Data.Common.DbConnection.State%2A>deve restituire <xref:System.Data.ConnectionState>fino a quando l&quot;oggetto restituito <xref:System.Threading.Tasks.Task>viene completata.</xref:System.Threading.Tasks.Task> </xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A> </xref:System.Data.Common.DbConnection.OpenAsync%2A> Quindi, se la connessione ha esito positivo, <xref:System.Data.Common.DbConnection.State%2A>deve restituire <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A> Se la connessione non riesce, <xref:System.Data.Common.DbConnection.State%2A>deve restituire <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.Common.DbConnection.State%2A>       Una chiamata a <xref:System.Data.Common.DbConnection.Close%2A>tenterà di annullare o chiudere corrispondente <xref:System.Data.Common.DbConnection.OpenAsync%2A>chiamare.</xref:System.Data.Common.DbConnection.OpenAsync%2A> </xref:System.Data.Common.DbConnection.Close%2A>       Per ulteriori informazioni sulla programmazione asincrona nel [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Provider di dati per [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], vedere [programmazione asincrona](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "L&quot;istruzione di annullamento."
    return:
      type: System.Threading.Tasks.Task
      description: "Attività che rappresenta l&quot;operazione asincrona."
  overload: System.Data.Common.DbConnection.OpenAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: DbConnection.ServerVersion
  fullName: System.Data.Common.DbConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene una stringa che rappresenta la versione del server a cui è connesso l&quot;oggetto."
  syntax:
    content: public abstract string ServerVersion { get; }
    return:
      type: System.String
      description: "La versione del database. Il formato della stringa restituita dipende dal tipo specifico della connessione in uso."
  overload: System.Data.Common.DbConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "È stato chiamato ServerVersion durante l&quot;attività restituita non è stata completata e la connessione non è stata aperta dopo una chiamata a <xref:System.Data.Common.DbConnection.OpenAsync*>.</xref:System.Data.Common.DbConnection.OpenAsync*>"
  platform:
  - net462
- uid: System.Data.Common.DbConnection.State
  id: State
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: State
  nameWithType: DbConnection.State
  fullName: System.Data.Common.DbConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene una stringa che descrive lo stato della connessione."
  syntax:
    content: public abstract System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "Lo stato della connessione. Il formato della stringa restituita dipende dal tipo specifico della connessione in uso."
  overload: System.Data.Common.DbConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.StateChange
  id: StateChange
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: StateChange
  nameWithType: DbConnection.StateChange
  fullName: System.Data.Common.DbConnection.StateChange
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Si verifica quando cambia lo stato dell&quot;evento."
  remarks: "L&quot;evento StateChange si verifica quando lo stato dell&quot;evento cambia da chiuso ad aperto o aperto a chiuso."
  syntax:
    content: public virtual event System.Data.StateChangeEventHandler StateChange;
    return:
      type: System.Data.StateChangeEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  id: System#Data#IDbConnection#BeginTransaction
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: System.Data.IDbConnection.BeginTransaction()
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Avvia una transazione di database."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.Common.DbConnection>esegue il cast dell&quot;istanza di un <xref:System.Data.IDbConnection>interfaccia.</xref:System.Data.IDbConnection> </xref:System.Data.Common.DbConnection>       Per ulteriori informazioni, vedere <xref:System.Data.IDbConnection.BeginTransaction%2A>.</xref:System.Data.IDbConnection.BeginTransaction%2A>"
  syntax:
    content: System.Data.IDbTransaction IDbConnection.BeginTransaction ();
    parameters: []
    return:
      type: System.Data.IDbTransaction
      description: "Oggetto che rappresenta la nuova transazione."
  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  id: System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inizia una transazione di database con l&quot;oggetto specificato <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> valore."
  remarks: "Per ulteriori informazioni, vedere <xref:System.Data.IDbConnection.BeginTransaction%2A>.</xref:System.Data.IDbConnection.BeginTransaction%2A>"
  syntax:
    content: System.Data.IDbTransaction IDbConnection.BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "Uno del <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> valori."
    return:
      type: System.Data.IDbTransaction
      description: "Oggetto che rappresenta la nuova transazione."
  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  id: System#Data#IDbConnection#CreateCommand
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  name: System.Data.IDbConnection.CreateCommand()
  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Crea e restituisce un <xref href=&quot;System.Data.Common.DbCommand&quot;> </xref> oggetto associato alla connessione corrente."
  remarks: "Per ulteriori informazioni, vedere [comandi e parametri](~/add/includes/ajax-current-ext-md.md) e <xref:System.Data.IDbConnection.CreateCommand%2A>.</xref:System.Data.IDbConnection.CreateCommand%2A>"
  syntax:
    content: System.Data.IDbCommand IDbConnection.CreateCommand ();
    parameters: []
    return:
      type: System.Data.IDbCommand
      description: "Oggetto <xref href=&quot;System.Data.Common.DbCommand&quot;> </xref> oggetto associato alla connessione."
  overload: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.Data.Common.DbException
  parent: System.Data.Common
  isExternal: false
  name: DbException
  nameWithType: DbException
  fullName: System.Data.Common.DbException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.Common.DbConnection.#ctor
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbConnection()
  nameWithType: DbConnection.DbConnection()
  fullName: System.Data.Common.DbConnection.DbConnection()
- uid: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.Common.DbConnection.BeginTransaction
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: DbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.BeginTransaction()
- uid: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.Common.DbConnection.ChangeDatabase(System.String)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: DbConnection.ChangeDatabase(String)
  fullName: System.Data.Common.DbConnection.ChangeDatabase(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbConnection.Close
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Close()
  nameWithType: DbConnection.Close()
  fullName: System.Data.Common.DbConnection.Close()
- uid: System.Data.Common.DbConnection.ConnectionString
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: DbConnection.ConnectionString
  fullName: System.Data.Common.DbConnection.ConnectionString
- uid: System.Data.Common.DbConnection.ConnectionTimeout
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: DbConnection.ConnectionTimeout
  fullName: System.Data.Common.DbConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Common.DbConnection.CreateCommand
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: DbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.CreateCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbConnection.CreateDbCommand
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: DbConnection.CreateDbCommand()
  fullName: System.Data.Common.DbConnection.CreateDbCommand()
- uid: System.Data.Common.DbConnection.Database
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Database
  nameWithType: DbConnection.Database
  fullName: System.Data.Common.DbConnection.Database
- uid: System.Data.Common.DbConnection.DataSource
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DataSource
  nameWithType: DbConnection.DataSource
  fullName: System.Data.Common.DbConnection.DataSource
- uid: System.Data.Common.DbConnection.DbProviderFactory
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbConnection.DbProviderFactory
  fullName: System.Data.Common.DbConnection.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: DbConnection.EnlistTransaction(Transaction)
  fullName: System.Data.Common.DbConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.Common.DbConnection.GetSchema
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema()
  nameWithType: DbConnection.GetSchema()
  fullName: System.Data.Common.DbConnection.GetSchema()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbConnection.GetSchema(System.String)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: DbConnection.GetSchema(String)
  fullName: System.Data.Common.DbConnection.GetSchema(String)
- uid: System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: DbConnection.GetSchema(String,String[])
  fullName: System.Data.Common.DbConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OnStateChange(StateChangeEventArgs)
  nameWithType: DbConnection.OnStateChange(StateChangeEventArgs)
  fullName: System.Data.Common.DbConnection.OnStateChange(StateChangeEventArgs)
- uid: System.Data.StateChangeEventArgs
  parent: System.Data
  isExternal: false
  name: StateChangeEventArgs
  nameWithType: StateChangeEventArgs
  fullName: System.Data.StateChangeEventArgs
- uid: System.Data.Common.DbConnection.Open
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Open()
  nameWithType: DbConnection.Open()
  fullName: System.Data.Common.DbConnection.Open()
- uid: System.Data.Common.DbConnection.OpenAsync
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OpenAsync()
  nameWithType: DbConnection.OpenAsync()
  fullName: System.Data.Common.DbConnection.OpenAsync()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OpenAsync(CancellationToken)
  nameWithType: DbConnection.OpenAsync(CancellationToken)
  fullName: System.Data.Common.DbConnection.OpenAsync(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.Common.DbConnection.ServerVersion
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: DbConnection.ServerVersion
  fullName: System.Data.Common.DbConnection.ServerVersion
- uid: System.Data.Common.DbConnection.State
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: State
  nameWithType: DbConnection.State
  fullName: System.Data.Common.DbConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.Common.DbConnection.StateChange
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: StateChange
  nameWithType: DbConnection.StateChange
  fullName: System.Data.Common.DbConnection.StateChange
- uid: System.Data.StateChangeEventHandler
  parent: System.Data
  isExternal: false
  name: StateChangeEventHandler
  nameWithType: StateChangeEventHandler
  fullName: System.Data.StateChangeEventHandler
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.BeginTransaction()
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction()
- uid: System.Data.IDbTransaction
  parent: System.Data
  isExternal: false
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.CreateCommand()
  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand()
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.Common.DbConnection.#ctor*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection.DbConnection
- uid: System.Data.Common.DbConnection.BeginDbTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: DbConnection.BeginDbTransaction
- uid: System.Data.Common.DbConnection.BeginTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: DbConnection.BeginTransaction
- uid: System.Data.Common.DbConnection.ChangeDatabase*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: DbConnection.ChangeDatabase
- uid: System.Data.Common.DbConnection.Close*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Close
  nameWithType: DbConnection.Close
- uid: System.Data.Common.DbConnection.ConnectionString*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: DbConnection.ConnectionString
- uid: System.Data.Common.DbConnection.ConnectionTimeout*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: DbConnection.ConnectionTimeout
- uid: System.Data.Common.DbConnection.CreateCommand*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateCommand
  nameWithType: DbConnection.CreateCommand
- uid: System.Data.Common.DbConnection.CreateDbCommand*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: DbConnection.CreateDbCommand
- uid: System.Data.Common.DbConnection.Database*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Database
  nameWithType: DbConnection.Database
- uid: System.Data.Common.DbConnection.DataSource*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DataSource
  nameWithType: DbConnection.DataSource
- uid: System.Data.Common.DbConnection.DbProviderFactory*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbConnection.DbProviderFactory
- uid: System.Data.Common.DbConnection.EnlistTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: DbConnection.EnlistTransaction
- uid: System.Data.Common.DbConnection.GetSchema*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: GetSchema
  nameWithType: DbConnection.GetSchema
- uid: System.Data.Common.DbConnection.OnStateChange*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OnStateChange
  nameWithType: DbConnection.OnStateChange
- uid: System.Data.Common.DbConnection.Open*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: Open
  nameWithType: DbConnection.Open
- uid: System.Data.Common.DbConnection.OpenAsync*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: OpenAsync
  nameWithType: DbConnection.OpenAsync
- uid: System.Data.Common.DbConnection.ServerVersion*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: ServerVersion
  nameWithType: DbConnection.ServerVersion
- uid: System.Data.Common.DbConnection.State*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: State
  nameWithType: DbConnection.State
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.BeginTransaction
  nameWithType: DbConnection.System.Data.IDbConnection.BeginTransaction
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand*
  parent: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.IDbConnection.CreateCommand
  nameWithType: DbConnection.System.Data.IDbConnection.CreateCommand
