### YamlMime:ManagedReference
items:
- uid: System.Threading.ParameterizedThreadStart
  id: ParameterizedThreadStart
  langs:
  - csharp
  name: ParameterizedThreadStart
  nameWithType: ParameterizedThreadStart
  fullName: System.Threading.ParameterizedThreadStart
  type: Delegate
  summary: "Rappresenta il metodo che viene eseguito in un <xref href=&quot;System.Threading.Thread&quot;> </xref>."
  remarks: "Quando viene creato un thread gestito, il metodo che viene eseguita sul thread è rappresentato da: - il <xref:System.Threading.ThreadStart>delegato che viene passato per il <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName>costruttore.</xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> </xref:System.Threading.ThreadStart>  Qualsiasi metodo che non ha parametri e restituisce `void` in c# o un `Sub` routine in Visual Basic può rappresentare il delegato.      -Un delegato ParameterizedThreadStart che viene passato per il <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName>costruttore.</xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> Qualsiasi metodo che presenta un singolo parametro di tipo <xref:System.Object>e che restituisce void in c# o una routine Sub in Visual Basic può rappresentare il delegato.</xref:System.Object>       Il thread non avviato l&quot;esecuzione fino a quando il <xref:System.Threading.Thread.Start%2A?displayProperty=fullName>metodo viene chiamato.</xref:System.Threading.Thread.Start%2A?displayProperty=fullName> Il <xref:System.Threading.ThreadStart>o ParameterizedThreadStart delegato viene richiamato sul thread e l&quot;esecuzione inizia dalla prima riga del metodo rappresentato dal delegato.</xref:System.Threading.ThreadStart> Nel caso l&quot;oggetto passato al delegato ParameterizedThreadStart il <xref:System.Threading.Thread.Start%28System.Object%29>viene passato al delegato.</xref:System.Threading.Thread.Start%28System.Object%29>      > [!NOTE] > Agli utenti di Visual Basic e c# è possono omettere il <xref:System.Threading.ThreadStart>o costruttore di delegato ParameterizedThreadStart durante la creazione di un thread.</xref:System.Threading.ThreadStart> In Visual Basic, usare il `AddressOf` operatore quando si passa il metodo per il <xref:System.Threading.Thread.%23ctor%2A>costruttore, ad esempio `Dim t As New Thread(AddressOf ThreadProc)`.</xref:System.Threading.Thread.%23ctor%2A> In c#, è sufficiente specificare il nome della routine del thread. Il compilatore seleziona il costruttore di delegato corretto.      > [!NOTE] > Quando si crea un delegato ParameterizedThreadStart per un metodo di istanza in C++, il primo parametro del costruttore è la variabile di istanza. Per un metodo statico, il primo parametro del costruttore è zero. Per un metodo statico, il costruttore di delegato richiede un solo parametro: l&quot;indirizzo del metodo di callback, qualificato dal nome della classe.       Il delegato ParameterizedThreadStart e <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>assicurarsi di overload del metodo è più facile passare i dati per una procedura thread, ma questa tecnica è non type-safe, perché qualsiasi oggetto può essere passato a <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>.</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> </xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> Un modo più efficiente per passare dati a una procedura thread è inserire sia la procedura del thread e i campi dati in un oggetto di lavoro. Per ulteriori informazioni, vedere [la creazione di thread e passaggio di dati in fase di avvio](~/add/includes/ajax-current-ext-md.md).       Il delegato ParameterizedThreadStart supporta solo un singolo parametro. È possibile passare più elementi di dati per il ParameterizedThreadStart rendendo tale parametro di uno dei seguenti: - una matrice.      -Un tipo di raccolta, se tutti gli elementi di dati sono dello stesso tipo.      -Un tipo di tupla, ad esempio <xref:System.Tuple%602>o <xref:System.Tuple%604>.</xref:System.Tuple%604> </xref:System.Tuple%602>"
  example:
  - "The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \n  \n> [!NOTE]\n>  The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \n  \n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/t-system.threading.param_1.cpp)]\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/t-system.threading.param_1.vb)]\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/t-system.threading.param_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public delegate void ParameterizedThreadStart(object obj);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
