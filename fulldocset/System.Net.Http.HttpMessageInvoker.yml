### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpMessageInvoker
  id: HttpMessageInvoker
  children:
  - System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  - System.Net.Http.HttpMessageInvoker.Dispose
  - System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
  - System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: HttpMessageInvoker
  nameWithType: HttpMessageInvoker
  fullName: System.Net.Http.HttpMessageInvoker
  type: Class
  summary: "Una classe speciale che consente alle applicazioni di chiamare il <xref:System.Net.Http.HttpMessageInvoker.SendAsync*>metodo in una catena di gestore Http.</xref:System.Net.Http.HttpMessageInvoker.SendAsync*>"
  remarks: "Questa classe è il tipo base per <xref:System.Net.Http.HttpClient>e altri creatori dei messaggi.</xref:System.Net.Http.HttpClient>       La maggior parte delle applicazioni che si connettono a un sito web verranno utilizzato uno dei <xref:System.Net.Http.HttpClient.SendAsync%2A>metodi nella <xref:System.Net.Http.HttpClient>classe.</xref:System.Net.Http.HttpClient> </xref:System.Net.Http.HttpClient.SendAsync%2A>"
  syntax:
    content: 'public class HttpMessageInvoker : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.HttpMessageInvoker
  langs:
  - csharp
  name: HttpMessageInvoker(HttpMessageHandler)
  nameWithType: HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler)
  fullName: System.Net.Http.HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inizializza un&quot;istanza di un <xref href=&quot;System.Net.Http.HttpMessageInvoker&quot;> </xref> classe con uno specifico <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref>."
  syntax:
    content: public HttpMessageInvoker (System.Net.Http.HttpMessageHandler handler);
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "Il <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> responsabile dell&quot;elaborazione dei messaggi di risposta HTTP."
  overload: System.Net.Http.HttpMessageInvoker.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  id: '#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)'
  parent: System.Net.Http.HttpMessageInvoker
  langs:
  - csharp
  name: HttpMessageInvoker(HttpMessageHandler,Boolean)
  nameWithType: HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler,Boolean)
  fullName: System.Net.Http.HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler,Boolean)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inizializza un&quot;istanza di un <xref href=&quot;System.Net.Http.HttpMessageInvoker&quot;> </xref> classe con uno specifico <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref>."
  syntax:
    content: public HttpMessageInvoker (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "Il <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref> responsabile dell&quot;elaborazione dei messaggi di risposta HTTP."
    - id: disposeHandler
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il gestore interno deve essere eliminato da Dispose (),<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se si prevede di riutilizzare il gestore interno."
  overload: System.Net.Http.HttpMessageInvoker.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageInvoker.Dispose
  id: Dispose
  parent: System.Net.Http.HttpMessageInvoker
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpMessageInvoker.Dispose()
  fullName: System.Net.Http.HttpMessageInvoker.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Rilascia le risorse non gestite ed Elimina le risorse gestite utilizzate da di <xref href=&quot;System.Net.Http.HttpMessageInvoker&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpMessageInvoker.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageInvoker
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpMessageInvoker.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageInvoker.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Rilascia le risorse non gestite usate da di <xref href=&quot;System.Net.Http.HttpMessageInvoker&quot;> </xref> e, facoltativamente, Elimina le risorse gestite."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Net.Http.HttpMessageInvoker.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageInvoker
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageInvoker.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageInvoker.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inviare una richiesta HTTP come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che l&quot;intera risposta, incluso il contenuto viene letto.</xref:System.Threading.Tasks.Task%601>       La maggior parte delle applicazioni che si connettono a un sito web verranno utilizzato uno dei <xref:System.Net.Http.HttpClient.SendAsync%2A>metodi nella <xref:System.Net.Http.HttpClient>classe.</xref:System.Net.Http.HttpClient> </xref:System.Net.Http.HttpClient.SendAsync%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "Il messaggio di richiesta HTTP da inviare."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Il token di annullamento per annullare l&quot;operazione."
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.HttpMessageInvoker.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: HttpMessageInvoker(HttpMessageHandler)
  nameWithType: HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler)
  fullName: System.Net.Http.HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler)
- uid: System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: HttpMessageInvoker(HttpMessageHandler,Boolean)
  nameWithType: HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler,Boolean)
  fullName: System.Net.Http.HttpMessageInvoker.HttpMessageInvoker(HttpMessageHandler,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpMessageInvoker.Dispose
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: Dispose()
  nameWithType: HttpMessageInvoker.Dispose()
  fullName: System.Net.Http.HttpMessageInvoker.Dispose()
- uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpMessageInvoker.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageInvoker.Dispose(Boolean)
- uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageInvoker.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageInvoker.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.HttpMessageInvoker.#ctor*
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: HttpMessageInvoker
  nameWithType: HttpMessageInvoker.HttpMessageInvoker
- uid: System.Net.Http.HttpMessageInvoker.Dispose*
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: Dispose
  nameWithType: HttpMessageInvoker.Dispose
- uid: System.Net.Http.HttpMessageInvoker.SendAsync*
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: SendAsync
  nameWithType: HttpMessageInvoker.SendAsync
