### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.VoiceInfo
  id: VoiceInfo
  children:
  - System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  - System.Speech.Synthesis.VoiceInfo.Age
  - System.Speech.Synthesis.VoiceInfo.Culture
  - System.Speech.Synthesis.VoiceInfo.Description
  - System.Speech.Synthesis.VoiceInfo.Equals(System.Object)
  - System.Speech.Synthesis.VoiceInfo.Gender
  - System.Speech.Synthesis.VoiceInfo.GetHashCode
  - System.Speech.Synthesis.VoiceInfo.Id
  - System.Speech.Synthesis.VoiceInfo.Name
  - System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  langs:
  - csharp
  name: VoiceInfo
  nameWithType: VoiceInfo
  fullName: System.Speech.Synthesis.VoiceInfo
  type: Class
  summary: "Rappresenta un motore di sintesi vocale installata."
  remarks: "Una voce è un motore di sintesi vocale installata, note anche come un motore di sintesi vocale o di un motore di sintesi vocale. Il <xref:System.Speech.Synthesis.SpeechSynthesizer>oggetto utilizza una voce per generare il riconoscimento vocale da testo.</xref:System.Speech.Synthesis.SpeechSynthesizer> Le proprietà dell&quot;oggetto VoiceInfo una voce di identificare e descrivono le caratteristiche. La caratteristica più la definizione di una voce è relativo <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>, che definisce il linguaggio che può supportare una voce.</xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>       La <xref:System.Speech.Synthesis.SpeechSynthesizer.Voice%2A>proprietà restituisce un oggetto VoiceInfo che contiene informazioni sulla voce corrente in uso da <xref:System.Speech.Synthesis.SpeechSynthesizer>.</xref:System.Speech.Synthesis.SpeechSynthesizer> </xref:System.Speech.Synthesis.SpeechSynthesizer.Voice%2A> È inoltre possibile utilizzare un oggetto VoiceInfo per ottenere informazioni su una qualsiasi delle voci che vengono installate nel sistema, come restituito dal <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices>metodo.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices> Vedere <xref:System.Speech.Synthesis.InstalledVoice>Per ulteriori informazioni.</xref:System.Speech.Synthesis.InstalledVoice>"
  example:
  - "The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices (engines for speech synthesis) and demonstrates the information that is available for each voice.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \nusing System.Speech.AudioFormat;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Output information about all of the installed voices.   \n        Console.WriteLine(\"Installed voices -\");  \n        foreach (InstalledVoice voice in synth.GetInstalledVoices())  \n        {  \n          VoiceInfo info = voice.VoiceInfo;  \n          string AudioFormats = \"\";  \n          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  \n          {  \n            AudioFormats += String.Format(\"{0}\\n\",  \n            fmt.EncodingFormat.ToString());  \n          }  \n  \n          Console.WriteLine(\" Name:          \" + info.Name);  \n          Console.WriteLine(\" Culture:       \" + info.Culture);  \n          Console.WriteLine(\" Age:           \" + info.Age);  \n          Console.WriteLine(\" Gender:        \" + info.Gender);  \n          Console.WriteLine(\" Description:   \" + info.Description);  \n          Console.WriteLine(\" ID:            \" + info.Id);  \n          Console.WriteLine(\" Enabled:       \" + voice.Enabled);  \n          if (info.SupportedAudioFormats.Count != 0)  \n          {  \n            Console.WriteLine( \" Audio formats: \" + AudioFormats);  \n          }  \n          else  \n          {  \n            Console.WriteLine(\" No supported audio formats found\");  \n          }  \n  \n          string AdditionalInfo = \"\";  \n          foreach (string key in info.AdditionalInfo.Keys)  \n          {  \n            AdditionalInfo += String.Format(\"  {0}: {1}\\n\", key, info.AdditionalInfo[key]);  \n          }  \n  \n          Console.WriteLine(\" Additional Info - \" + AdditionalInfo);  \n          Console.WriteLine();  \n        }  \n      }  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{(_name != null ? "'" + _name + "' " : "") +  (_culture != null ? " '" + _culture.ToString () + "' " : "") + (_gender != VoiceGender.NotSet ? " '" + _gender.ToString () + "' " : "") + (_age != VoiceAge.NotSet ? " '" + _age.ToString () + "' " : "") + (_variant > 0 ? " " + _variant.ToString () : "")}")]

      public class VoiceInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  id: AdditionalInfo
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: AdditionalInfo
  nameWithType: VoiceInfo.AdditionalInfo
  fullName: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Ottiene informazioni aggiuntive sulla voce."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> AdditionalInfo { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Restituisce una raccolta di coppie nome/valore che descrivono e identificare la voce."
  overload: System.Speech.Synthesis.VoiceInfo.AdditionalInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Age
  id: Age
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Age
  nameWithType: VoiceInfo.Age
  fullName: System.Speech.Synthesis.VoiceInfo.Age
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Ottiene l&quot;età della voce."
  remarks: "La proprietà Age Ottiene un membro del <xref:System.Speech.Synthesis.VoiceAge>enumerazione che indica l&quot;età della voce.</xref:System.Speech.Synthesis.VoiceAge>"
  syntax:
    content: public System.Speech.Synthesis.VoiceAge Age { get; }
    return:
      type: System.Speech.Synthesis.VoiceAge
      description: "Restituisce l&quot;età della voce."
  overload: System.Speech.Synthesis.VoiceInfo.Age*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Culture
  id: Culture
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Culture
  nameWithType: VoiceInfo.Culture
  fullName: System.Speech.Synthesis.VoiceInfo.Culture
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Ottiene le impostazioni cultura della voce."
  remarks: "La <xref:System.Globalization.CultureInfo>classe specifica un nome univoco per ogni lingua.</xref:System.Globalization.CultureInfo> Il nome è una combinazione di un codice di due lettere minuscole ISO 639 associata a una lingua e un codice di secondarie a due lettere maiuscole ISO 3166 associata a un paese o area geografica. Esempi di nomi di impostazioni cultura sono &quot;es-US&quot; per lo spagnolo parlato in Stati Uniti, o &quot;fr-CA&quot; per il francese parlato in Canada. È possibile specificare una lingua usando solo il codice di lingua a due lettere minuscole. Ad esempio, &quot;fr&quot; Specifica impostazioni cultura di sistema per il francese e &quot;de&quot; Specifica impostazioni cultura di sistema per il tedesco."
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; }
    return:
      type: System.Globalization.CultureInfo
      description: "Restituisce un <xref:System.Globalization.CultureInfo>oggetto che fornisce informazioni sulle impostazioni cultura specifiche, ad esempio i nomi delle impostazioni cultura, il sistema di scrittura, calendario usato e come formattare le date e ordinamento delle stringhe.</xref:System.Globalization.CultureInfo>"
  overload: System.Speech.Synthesis.VoiceInfo.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Description
  id: Description
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Description
  nameWithType: VoiceInfo.Description
  fullName: System.Speech.Synthesis.VoiceInfo.Description
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Ottiene la descrizione della voce."
  syntax:
    content: public string Description { get; }
    return:
      type: System.String
      description: "Restituisce la descrizione della voce."
  overload: System.Speech.Synthesis.VoiceInfo.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: VoiceInfo.Equals(Object)
  fullName: System.Speech.Synthesis.VoiceInfo.Equals(Object)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Confronta i campi della voce con la proprietà specificata <xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;> </xref> oggetto per determinare se contengono gli stessi valori."
  remarks: "Il metodo Equals accetta un <xref:System.Object>tipo come parametro.</xref:System.Object> Se l&quot;oggetto non è il <xref:System.Speech.Synthesis.VoiceInfo>tipo, il metodo restituisce `False`.</xref:System.Speech.Synthesis.VoiceInfo>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Specificato <xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;> </xref> oggetto."
    return:
      type: System.Boolean
      description: "Restituisce <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> se i campi dei due <xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;> </xref> oggetti sono uguali; in caso contrario restituisce <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
  overload: System.Speech.Synthesis.VoiceInfo.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Gender
  id: Gender
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Gender
  nameWithType: VoiceInfo.Gender
  fullName: System.Speech.Synthesis.VoiceInfo.Gender
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Ottiene il genere della voce."
  remarks: "La proprietà relativa al sesso Ottiene un membro del <xref:System.Speech.Synthesis.VoiceGender>enumerazione che indica il genere della voce.</xref:System.Speech.Synthesis.VoiceGender>"
  syntax:
    content: public System.Speech.Synthesis.VoiceGender Gender { get; }
    return:
      type: System.Speech.Synthesis.VoiceGender
      description: "Restituisce il genere della voce."
  overload: System.Speech.Synthesis.VoiceInfo.Gender*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode
  id: GetHashCode
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: VoiceInfo.GetHashCode()
  fullName: System.Speech.Synthesis.VoiceInfo.GetHashCode()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Fornisce un codice hash per un `VoiceInfo` oggetto."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Codice hash per l&quot;oggetto corrente <xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;> </xref> oggetto."
  overload: System.Speech.Synthesis.VoiceInfo.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Id
  id: Id
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Id
  nameWithType: VoiceInfo.Id
  fullName: System.Speech.Synthesis.VoiceInfo.Id
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Ottiene l&quot;ID della voce."
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: "Restituisce l&quot;identificatore per la voce."
  overload: System.Speech.Synthesis.VoiceInfo.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Name
  id: Name
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Name
  nameWithType: VoiceInfo.Name
  fullName: System.Speech.Synthesis.VoiceInfo.Name
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Ottiene il nome della voce."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "Restituisce il nome della voce."
  overload: System.Speech.Synthesis.VoiceInfo.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  id: SupportedAudioFormats
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: SupportedAudioFormats
  nameWithType: VoiceInfo.SupportedAudioFormats
  fullName: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Ottiene la raccolta di formati audio che supporta la voce."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo> SupportedAudioFormats { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.AudioFormat.SpeechAudioFormatInfo}
      description: "Restituisce una raccolta di formati audio che supporta la voce."
  overload: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: AdditionalInfo
  nameWithType: VoiceInfo.AdditionalInfo
  fullName: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.VoiceInfo.Age
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Age
  nameWithType: VoiceInfo.Age
  fullName: System.Speech.Synthesis.VoiceInfo.Age
- uid: System.Speech.Synthesis.VoiceAge
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceAge
  nameWithType: VoiceAge
  fullName: System.Speech.Synthesis.VoiceAge
- uid: System.Speech.Synthesis.VoiceInfo.Culture
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Culture
  nameWithType: VoiceInfo.Culture
  fullName: System.Speech.Synthesis.VoiceInfo.Culture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Synthesis.VoiceInfo.Description
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Description
  nameWithType: VoiceInfo.Description
  fullName: System.Speech.Synthesis.VoiceInfo.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.VoiceInfo.Equals(System.Object)
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: VoiceInfo.Equals(Object)
  fullName: System.Speech.Synthesis.VoiceInfo.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Synthesis.VoiceInfo.Gender
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Gender
  nameWithType: VoiceInfo.Gender
  fullName: System.Speech.Synthesis.VoiceInfo.Gender
- uid: System.Speech.Synthesis.VoiceGender
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceGender
  nameWithType: VoiceGender
  fullName: System.Speech.Synthesis.VoiceGender
- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: VoiceInfo.GetHashCode()
  fullName: System.Speech.Synthesis.VoiceInfo.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.VoiceInfo.Id
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Id
  nameWithType: VoiceInfo.Id
  fullName: System.Speech.Synthesis.VoiceInfo.Id
- uid: System.Speech.Synthesis.VoiceInfo.Name
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Name
  nameWithType: VoiceInfo.Name
  fullName: System.Speech.Synthesis.VoiceInfo.Name
- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: SupportedAudioFormats
  nameWithType: VoiceInfo.SupportedAudioFormats
  fullName: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.AudioFormat.SpeechAudioFormatInfo}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<SpeechAudioFormatInfo>
  nameWithType: ReadOnlyCollection<SpeechAudioFormatInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.AudioFormat.SpeechAudioFormatInfo
    name: SpeechAudioFormatInfo
    nameWithType: SpeechAudioFormatInfo
    fullName: SpeechAudioFormatInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: AdditionalInfo
  nameWithType: VoiceInfo.AdditionalInfo
- uid: System.Speech.Synthesis.VoiceInfo.Age*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Age
  nameWithType: VoiceInfo.Age
- uid: System.Speech.Synthesis.VoiceInfo.Culture*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Culture
  nameWithType: VoiceInfo.Culture
- uid: System.Speech.Synthesis.VoiceInfo.Description*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Description
  nameWithType: VoiceInfo.Description
- uid: System.Speech.Synthesis.VoiceInfo.Equals*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Equals
  nameWithType: VoiceInfo.Equals
- uid: System.Speech.Synthesis.VoiceInfo.Gender*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Gender
  nameWithType: VoiceInfo.Gender
- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: GetHashCode
  nameWithType: VoiceInfo.GetHashCode
- uid: System.Speech.Synthesis.VoiceInfo.Id*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Id
  nameWithType: VoiceInfo.Id
- uid: System.Speech.Synthesis.VoiceInfo.Name*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Name
  nameWithType: VoiceInfo.Name
- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: SupportedAudioFormats
  nameWithType: VoiceInfo.SupportedAudioFormats
