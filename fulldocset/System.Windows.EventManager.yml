### YamlMime:ManagedReference
items:
- uid: System.Windows.EventManager
  id: EventManager
  children:
  - System.Windows.EventManager.GetRoutedEvents
  - System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  langs:
  - csharp
  name: EventManager
  nameWithType: EventManager
  fullName: System.Windows.EventManager
  type: Class
  summary: "Fornisce metodi di utilità correlati agli eventi che registrano gli eventi indirizzati per i proprietari delle classi e aggiungere i gestori di classi."
  remarks: "Questa classe viene in genere utilizzata per registrare un nuovo evento indirizzato con <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A>       Il secondo più frequente [!INCLUDE[TLA2#tla_api](~/add/includes/tla2sharptla-api-md.md)] utilizzo è <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A> Utilizzare questo metodo per abilitare la gestione di classi di un evento indirizzato alla classe o un evento associato. Per informazioni dettagliate, vedere [contrassegnare gli eventi indirizzati come Handled e la gestione della classe](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example show how to use this class to register a new routed event as a class member, along with the routed event \"wrapper\" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] event.  \n  \n [!code-cs[DPCustom#EventManagerClass](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#eventmanagerclass)]\n [!code-vb[DPCustom#EventManagerClass](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#eventmanagerclass)]"
  syntax:
    content: public static class EventManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.EventManager.GetRoutedEvents
  id: GetRoutedEvents
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: System.Windows.EventManager.GetRoutedEvents()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Restituisce gli identificatori per gli eventi indirizzati che sono stati registrati per il sistema di eventi."
  remarks: "Ulteriori <xref:System.Windows.RoutedEvent>oggetti possono essere registrati in un secondo momento.</xref:System.Windows.RoutedEvent> Questo metodo ottiene uno snapshot e la raccolta degli eventi indirizzati è scrivibile per tutta la durata di un&quot;applicazione. La raccolta restituita può essere notevole. Contando anche solo gli eventi che fanno parte di [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)], il numero di raccolte è più di cento."
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEvents ();
    parameters: []
    return:
      type: System.Windows.RoutedEvent[]
      description: "Matrice di tipo <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref> che contiene gli oggetti registrati."
  overload: System.Windows.EventManager.GetRoutedEvents*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  id: GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Trova tutti gli identificatori dell&quot;evento indirizzato per gli eventi registrati con il tipo di proprietario specificato."
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);
    parameters:
    - id: ownerType
      type: System.Type
      description: "Il tipo per avviare la ricerca con. Classi base sono inclusi nella ricerca."
    return:
      type: System.Windows.RoutedEvent[]
      description: "Matrice di identificatori dell&quot;evento indirizzato di corrispondenza se qualsiasi corrispondenza; in caso contrario, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.EventManager.GetRoutedEventsForOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type,RoutedEvent,Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Registra un gestore di classe per un evento indirizzato specifico."
  remarks: "La gestione di classi è una funzionalità disponibile per gli eventi indirizzati, inclusi gli eventi associati che vengono implementati con backup dell&quot;evento indirizzato. Un gestore di classe è simile a un gestore statico esistente per tutte le istanze della classe. Poiché il gestore è statico, non è possibile modificare le proprietà dell&quot;istanza direttamente con un gestore di classe, ma è possibile accedere alle istanze tramite il `sender` parametro e/o i dati dell&quot;evento.       Gestori di classi vengono richiamati prima dei gestori di istanza. È possibile implementare un gestore di classe con il comportamento di contrassegnare l&quot;evento come gestito. Di conseguenza, i gestori di istanze per un evento gestito dalla classe non vengono richiamati a meno che non registra i gestori di istanza in particolare per gli eventi gestiti.       Molti di [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] gli eventi di elemento di base forniscono la gestione di metodi virtuali della classe. Eseguendo l&quot;override di questi metodi nelle classi che ereditano le classi di base, è possibile implementare la gestione senza chiamare RegisterClassHandler nei costruttori statici della classe. In genere, questi metodi di gestione della classe esistono per gli eventi di input e hanno nomi che iniziano con &quot;On&quot; e terminano con il nome dell&quot;evento è una classe gestita.       Per ulteriori informazioni sulla gestione delle classi, vedere [contrassegnare gli eventi indirizzati come Handled e la gestione della classe](~/add/includes/ajax-current-ext-md.md).       Utilizzando questa firma, gestori di classi verranno registrati per richiamare solo in risposta a eventi non gestiti. È inoltre possibile registrare gestori di classi per richiamare anche se gli argomenti dell&quot;evento sono contrassegnati come gestiti, utilizzando il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>firma, con `handledEventsToo` impostato su `true`.</xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>"
  example:
  - "The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling RegisterClassHandler.  \n  \n [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/visualbasic/ClassHandling.sdksamplelibrary/class1.vb#staticandregisterclasshandler)]\n [!code-cs[ClassHandling#StaticAndRegisterClassHandler](~/add/codesnippet/csharp/ClassHandling/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]"
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: classType
      type: System.Type
      description: "Il tipo della classe che dichiara la gestione di classi."
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Identificatore dell&quot;evento indirizzato dell&quot;evento da gestire."
    - id: handler
      type: System.Delegate
      description: "Un riferimento all&quot;implementazione del gestore di classe."
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Registra un gestore di classe per un evento indirizzato specifico, con l&quot;opzione per gestire gli eventi gestiti in cui sono già contrassegnati come dati dell&quot;evento."
  remarks: "La gestione di classi è una funzionalità disponibile per gli eventi indirizzati, inclusi gli eventi associati che vengono implementati con backup dell&quot;evento indirizzato. Un gestore di classe è simile a un gestore statico esistente per tutte le istanze della classe. Poiché il gestore è statico, non è possibile modificare le proprietà dell&quot;istanza direttamente con un gestore di classe, ma è possibile accedere alle istanze tramite il `sender` parametro e/o i dati dell&quot;evento.       Gestori di classi vengono richiamati prima dei gestori di istanza. È possibile implementare un gestore di classe con il comportamento di contrassegnare l&quot;evento come gestito. Di conseguenza, i gestori di istanze per un evento gestito dalla classe non vengono richiamati a meno che non registra i gestori di istanza in particolare per gli eventi gestiti.       Molti di [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] gli eventi di elemento di base forniscono la gestione di metodi virtuali della classe. Eseguendo l&quot;override di questi metodi nelle classi che ereditano le classi di base, è possibile implementare la gestione senza chiamare il metodo della classe <xref:System.Windows.EventManager.RegisterClassHandler%2A>nei costruttori statici.</xref:System.Windows.EventManager.RegisterClassHandler%2A> In genere, questi metodi di gestione della classe esistono per gli eventi di input e hanno nomi che iniziano con &quot;On&quot; e terminano con il nome dell&quot;evento è una classe gestita.       Per ulteriori informazioni sulla gestione delle classi, vedere [contrassegnare gli eventi indirizzati come Handled e la gestione della classe](~/add/includes/ajax-current-ext-md.md).       Utilizzando questa firma, gestori di classi possono essere richiamati per eventi gestiti, impostando `handledEventsToo` impostato su `true`. In genere, eseguire questa operazione solo se si verifica un problema noto di gestione che si sta tentando di risolvere, ad esempio la gestione degli eventi del mouse o tastiera sistema di input."
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: classType
      type: System.Type
      description: "Il tipo della classe che dichiara la gestione di classi."
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Identificatore dell&quot;evento indirizzato dell&quot;evento da gestire."
    - id: handler
      type: System.Delegate
      description: "Un riferimento all&quot;implementazione del gestore di classe."
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per richiamare questo gestore di classe anche se gli argomenti dell&quot;evento indirizzato sono stati contrassegnati come gestiti; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per mantenere il comportamento predefinito di non richiamare il gestore eventi in qualsiasi evento contrassegnato come gestito."
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  id: RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Registra un nuovo evento indirizzato il [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] sistema di eventi."
  remarks: "Utilizzare il valore restituito di questo metodo per creare la dichiarazione statica per univoco <xref:System.Windows.RoutedEvent>campo dell&quot;identificatore.</xref:System.Windows.RoutedEvent> Questo campo deve essere archiviato all&quot;interno del tipo di proprietario.       Esistono un numero considerevole di convenzioni e procedure consigliate associate a eventi indirizzati come devono essere denominate, registrate ed esposte in una classe. Per ulteriori informazioni, vedere [indirizzato Cenni preliminari sugli eventi](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "Il nome dell&quot;evento indirizzato. Il nome deve essere univoco all&quot;interno del tipo di proprietario e non può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o una stringa vuota."
    - id: routingStrategy
      type: System.Windows.RoutingStrategy
      description: "La strategia di routing dell&quot;evento come valore dell&quot;enumerazione."
    - id: handlerType
      type: System.Type
      description: "Il tipo del gestore dell&quot;evento. Deve trattarsi di un tipo delegato e non può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: ownerType
      type: System.Type
      description: "Tipo di classe proprietario dell&quot;evento indirizzato. Non può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Windows.RoutedEvent
      description: "Identificatore dell&quot;evento indirizzato appena registrato. Questo oggetto identificatore può ora essere archiviato come campo statico in una classe e poi usato come parametro per i metodi che associano i gestori all&quot;evento. L&quot;identificatore dell&quot;evento indirizzato è usato anche per un altro sistema di eventi [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]."
  overload: System.Windows.EventManager.RegisterRoutedEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.EventManager.GetRoutedEvents
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: System.Windows.EventManager.GetRoutedEvents()
- uid: System.Windows.RoutedEvent[]
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent[]
  spec.csharp:
  - uid: System.Windows.RoutedEvent
    name: RoutedEvent
    nameWithType: RoutedEvent
    fullName: RoutedEvent[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: System.Windows.EventManager.GetRoutedEventsForOwner(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type,RoutedEvent,Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.EventManager.RegisterClassHandler(Type,RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  nameWithType: EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
  fullName: System.Windows.EventManager.RegisterRoutedEvent(String,RoutingStrategy,Type,Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.RoutingStrategy
  parent: System.Windows
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutingStrategy
  fullName: System.Windows.RoutingStrategy
- uid: System.Windows.EventManager.GetRoutedEvents*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents
  nameWithType: EventManager.GetRoutedEvents
- uid: System.Windows.EventManager.GetRoutedEventsForOwner*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner
  nameWithType: EventManager.GetRoutedEventsForOwner
- uid: System.Windows.EventManager.RegisterClassHandler*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler
  nameWithType: EventManager.RegisterClassHandler
- uid: System.Windows.EventManager.RegisterRoutedEvent*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent
  nameWithType: EventManager.RegisterRoutedEvent
