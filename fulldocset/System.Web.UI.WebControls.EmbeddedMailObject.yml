### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.EmbeddedMailObject
  id: EmbeddedMailObject
  children:
  - System.Web.UI.WebControls.EmbeddedMailObject.#ctor
  - System.Web.UI.WebControls.EmbeddedMailObject.#ctor(System.String,System.String)
  - System.Web.UI.WebControls.EmbeddedMailObject.Name
  - System.Web.UI.WebControls.EmbeddedMailObject.Path
  langs:
  - csharp
  name: EmbeddedMailObject
  nameWithType: EmbeddedMailObject
  fullName: System.Web.UI.WebControls.EmbeddedMailObject
  type: Class
  summary: "Rappresenta un elemento da incorporare in un messaggio di posta elettronica costruito utilizzando il <xref href=&quot;System.Web.UI.WebControls.MailDefinition&quot;> </xref> classe."
  remarks: "Il EmbeddedMailObject rappresenta un elemento da incorporare in un messaggio di posta elettronica. Questi elementi incorporati possono essere file di immagine, ad esempio il logo della società. Ogni elemento incorporato viene specificato da un identificatore e un percorso.       Per garantire che un oggetto incorporato venga visualizzato correttamente all&quot;interno del file di messaggio di posta elettronica, devono essere soddisfatte le condizioni seguenti:-il messaggio di posta elettronica è in formato HTML.      -L&quot;elemento è un file di immagine (con estensione jpg, GIF, bmp e così via).      -Il file in formato HTML corpo specificato nel <xref:System.Web.UI.WebControls.MailDefinition.BodyFileName%2A>proprietà contiene un riferimento al file di immagine utilizzando la sintassi seguente: ```       <img src=&quot;cid:identifier&quot; alt=&quot;Alternate Text&quot; />.       ``` se un EmbeddedMailObject viene aggiunto a un messaggio di posta elettronica e non soddisfa tutti i requisiti specificati in precedenza, verrà probabilmente visualizzato come allegato nel messaggio di posta elettronica.</xref:System.Web.UI.WebControls.MailDefinition.BodyFileName%2A> Se un elemento fa riferimento un identificatore nel messaggio di posta elettronica, ma non è incluso come un elemento incorporato, verrà visualizzato come un allegato danneggiato quando viene visualizzato il messaggio.       Il <xref:System.Web.UI.WebControls.EmbeddedMailObjectsCollection>Archivia una raccolta di oggetti EmbeddedMailObject per un singolo messaggio di posta.</xref:System.Web.UI.WebControls.EmbeddedMailObjectsCollection> Il <xref:System.Web.UI.WebControls.EmbeddedMailObjectsCollection>viene utilizzato il <xref:System.Web.UI.WebControls.MailDefinition.EmbeddedObjects%2A>proprietà del <xref:System.Web.UI.WebControls.MailDefinition>oggetto per creare il messaggio di posta elettronica.</xref:System.Web.UI.WebControls.MailDefinition> </xref:System.Web.UI.WebControls.MailDefinition.EmbeddedObjects%2A> </xref:System.Web.UI.WebControls.EmbeddedMailObjectsCollection>       Messaggi di posta elettronica che supportano gli oggetti incorporati possono essere configurati nei seguenti controlli Web impostando i relativi <xref:System.Web.UI.WebControls.MailDefinition>proprietà in modo dichiarativo:- <xref:System.Web.UI.WebControls.CreateUserWizard>- <xref:System.Web.UI.WebControls.ChangePassword>- <xref:System.Web.UI.WebControls.PasswordRecovery>> [!NOTE] > i valori di EmbeddedMailObject e <xref:System.Web.UI.WebControls.EmbeddedMailObjectsCollection>oggetti non vengono archiviati nello stato di visualizzazione.</xref:System.Web.UI.WebControls.EmbeddedMailObjectsCollection> </xref:System.Web.UI.WebControls.PasswordRecovery> </xref:System.Web.UI.WebControls.ChangePassword> </xref:System.Web.UI.WebControls.CreateUserWizard> </xref:System.Web.UI.WebControls.MailDefinition> Ciò consente di proteggere gli utenti malintenzionati di individuazione delle informazioni sul percorso per il server."
  example:
  - "The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendingMail> event named `SendingMail`. The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  \n  \n If the password change succeeds, the code in the `SendingMail` event handler attempts to send an e-mail message to the user to confirm the change. SMTP must already be configured on the server in order for this code example to work. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  \n  \n If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  \n  \n [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_262_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_262_1.aspx)]  \n  \n Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  \n  \n [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_262_2.vb)]\n [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_262_2.cs)]  \n  \n The following example code can be used as the ChangePasswordMail.htm file for the preceding example code.  \n  \n> [!IMPORTANT]\n>  Sending user account names or passwords in e-mail is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network \"sniffing\" applications.  To improve security, use the mitigations that are described in [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  \n  \n```  \n<html>  \n<head><title></title></head>  \n<body>  \n<form>  \n  \n  <h1>Your password for the account named \"<%Username%>\" has changed.</h1>  \n  \n  <p>  \n  If you did not initiate this change, please call 1-206-555-0100.  \n  </p>  \n  \n  <p>  \n  <a href=\"http://www.contoso.com/login.aspx\">  \n    <img src=\"cid:LoginGif\" alt=\"Log In\" />  \n  </a>   \n  </p>  \n  \n  <p>  \n  Please read our attached Privacy Notice.  \n  </p>  \n  \n</form>  \n</body>  \n</html>  \n  \n```"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.EmbeddedMailObject/EmbeddedMailObjectTypeConverter))]

      public sealed class EmbeddedMailObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.EmbeddedMailObject.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.EmbeddedMailObject
  langs:
  - csharp
  name: EmbeddedMailObject()
  nameWithType: EmbeddedMailObject.EmbeddedMailObject()
  fullName: System.Web.UI.WebControls.EmbeddedMailObject.EmbeddedMailObject()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.UI.WebControls.EmbeddedMailObject&quot;> </xref> classe."
  remarks: "Per ottenere o impostare l&quot;identificatore dell&quot;elemento incorporato, utilizzare il <xref:System.Web.UI.WebControls.EmbeddedMailObject.Name%2A>proprietà.</xref:System.Web.UI.WebControls.EmbeddedMailObject.Name%2A> Per ottenere o impostare il percorso dell&quot;elemento incorporato, utilizzare il <xref:System.Web.UI.WebControls.EmbeddedMailObject.Path%2A>proprietà.</xref:System.Web.UI.WebControls.EmbeddedMailObject.Path%2A> Per incorporare correttamente l&quot;elemento nel messaggio di posta elettronica, è necessario impostare entrambe le proprietà."
  syntax:
    content: public EmbeddedMailObject ();
    parameters: []
  overload: System.Web.UI.WebControls.EmbeddedMailObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.EmbeddedMailObject.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Web.UI.WebControls.EmbeddedMailObject
  langs:
  - csharp
  name: EmbeddedMailObject(String,String)
  nameWithType: EmbeddedMailObject.EmbeddedMailObject(String,String)
  fullName: System.Web.UI.WebControls.EmbeddedMailObject.EmbeddedMailObject(String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.UI.WebControls.EmbeddedMailObject&quot;> </xref> classe, utilizzando il nome dell&quot;identificatore specificato e il percorso per il popolamento dell&quot;oggetto."
  remarks: ''
  example:
  - "The following code example shows a code-behind example of an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendingMail> event named `SendingMail`. This code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  \n  \n If the password change succeeds, the code in the `SendingMail` event handler attempts to send an e-mail message to the user to confirm the change. SMTP must already be configured on the server in order for this code example to work. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  \n  \n If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  \n  \n The following code example demonstrates using an .aspx page.  \n  \n [!code-cs[System.Web.UI.WebControls.ChangePassword#1](~/add/codesnippet/csharp/8f3c61bf-418b-4557-b797-_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ChangePassword#1](~/add/codesnippet/visualbasic/8f3c61bf-418b-4557-b797-_1.aspx)]  \n  \n The following code example demonstrates using a code-behind file.  \n  \n [!code-cs[System.Web.UI.WebControls.ChangePassword#2](~/add/codesnippet/csharp/8f3c61bf-418b-4557-b797-_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ChangePassword#2](~/add/codesnippet/visualbasic/8f3c61bf-418b-4557-b797-_2.vb)]  \n  \n Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  \n  \n [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/8f3c61bf-418b-4557-b797-_3.vb)]\n [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/8f3c61bf-418b-4557-b797-_3.cs)]  \n  \n The following example code can be used as the ChangePasswordMail.htm file for the preceding example code.  \n  \n> [!IMPORTANT]\n>  Sending user account names or passwords in an e-mail message is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network \"sniffing\" applications.  To improve security, use the mitigations that are described in [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  \n  \n```  \n<html>  \n<head><title></title></head>  \n<body>  \n<form>  \n  \n  <h1>Your password for the account named \"<%Username%>\" has changed.</h1>  \n  \n  <p>  \n  If you did not initiate this change, please call 1-206-555-0100.  \n  </p>  \n  \n  <p>  \n  <a href=\"http://www.contoso.com/login.aspx\">  \n    <img src=\"cid:LoginGif\" alt=\"Log In\" />  \n  </a>   \n  </p>  \n  \n  <p>  \n  Please read our attached Privacy Notice.  \n  </p>  \n  \n</form>  \n</body>  \n</html>  \n```"
  syntax:
    content: public EmbeddedMailObject (string name, string path);
    parameters:
    - id: name
      type: System.String
      description: "Il nome utilizzato come identificatore dell&quot;elemento da incorporare nel messaggio di posta elettronica. Per ulteriori informazioni, vedere <xref:System.Web.UI.WebControls.EmbeddedMailObject.Name*>.</xref:System.Web.UI.WebControls.EmbeddedMailObject.Name*>"
    - id: path
      type: System.String
      description: "Il percorso utilizzato per recuperare un elemento da incorporare nel messaggio di posta elettronica. Per ulteriori informazioni, vedere <xref:System.Web.UI.WebControls.EmbeddedMailObject.Path*>.</xref:System.Web.UI.WebControls.EmbeddedMailObject.Path*>"
  overload: System.Web.UI.WebControls.EmbeddedMailObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.EmbeddedMailObject.Name
  id: Name
  parent: System.Web.UI.WebControls.EmbeddedMailObject
  langs:
  - csharp
  name: Name
  nameWithType: EmbeddedMailObject.Name
  fullName: System.Web.UI.WebControls.EmbeddedMailObject.Name
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta il nome utilizzato come identificatore dell&quot;elemento da incorporare in un messaggio di posta elettronica costruito con la <xref href=&quot;System.Web.UI.WebControls.MailDefinition&quot;> </xref> classe."
  remarks: "La proprietà nome specifica un identificatore per un elemento da incorporare in un messaggio di posta elettronica costruito in modo dichiarativo con la <xref:System.Web.UI.WebControls.MailDefinition>classe.</xref:System.Web.UI.WebControls.MailDefinition> L&quot;identificatore viene usato per eseguire il mapping dell&quot;elemento contenuto nella <xref:System.Web.UI.WebControls.EmbeddedMailObject.Path%2A>proprietà nella posizione appropriata nel corpo del file specificato nella <xref:System.Web.UI.WebControls.MailDefinition.BodyFileName%2A>proprietà, utilizzando la sintassi seguente: ```   <img src=&quot;cid:identifier&quot; alt=&quot;Alternate Text&quot; />   ``` in genere, l&quot;elemento è un file di immagine.</xref:System.Web.UI.WebControls.MailDefinition.BodyFileName%2A> </xref:System.Web.UI.WebControls.EmbeddedMailObject.Path%2A> Il valore predefinito per la proprietà Name è una stringa vuota.       È una procedura consigliata per la progettazione di accessibilità impostare la proprietà di testo alternativo nel messaggio di posta elettronica per tutte le immagini incorporate."
  example:
  - "The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendingMail> event named `SendingMail`. The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  \n  \n If the password change succeeds, the code in the `SendingMail` event handler attempts to send an e-mail message to the user to confirm the change. SMTP must already be configured on the server in order for this code example to work. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  \n  \n If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  \n  \n [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_266_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_266_1.aspx)]  \n  \n Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  \n  \n [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_266_2.vb)]\n [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_266_2.cs)]  \n  \n The following example code can be used as the ChangePasswordMail.htm file for the preceding example code.  \n  \n> [!IMPORTANT]\n>  Sending user account names or passwords in an e-mail message is a potential security threat. E-mail messages are sent in plain text and can be read by special network \"sniffing\" applications.  To improve security, use the mitigations that are described in [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  \n  \n```  \n<html>  \n<head><title></title></head>  \n<body>  \n<form>  \n  \n  <h1>Your password for the account named \"<%Username%>\" has changed.</h1>  \n  \n  <p>  \n  If you did not initiate this change, please call 1-206-555-0100.  \n  </p>  \n  \n  <p>  \n  <a href=\"http://www.contoso.com/login.aspx\">  \n    <img src=\"cid:LoginGif\" alt=\"Log In\" />  \n  </a>   \n  </p>  \n  \n  <p>  \n  Please read our attached Privacy Notice.  \n  </p>  \n  \n</form>  \n</body>  \n</html>  \n```"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "Restituisce l&quot;identificatore dell&quot;elemento da incorporare in un messaggio di posta elettronica."
  overload: System.Web.UI.WebControls.EmbeddedMailObject.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.EmbeddedMailObject.Path
  id: Path
  parent: System.Web.UI.WebControls.EmbeddedMailObject
  langs:
  - csharp
  name: Path
  nameWithType: EmbeddedMailObject.Path
  fullName: System.Web.UI.WebControls.EmbeddedMailObject.Path
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta il percorso utilizzato per recuperare un elemento da incorporare in un messaggio di posta elettronica costruito con la <xref href=&quot;System.Web.UI.WebControls.MailDefinition&quot;> </xref> classe."
  remarks: "The Path property specifies the path to the item you want to embed in the mail message constructed declaratively with the <xref:System.Web.UI.WebControls.MailDefinition> object. The file path in Path must be a path such as C:\\MyServer\\Banner.gif. Typically, the embedded item is an image file. If an image file is referenced by its identifier in the mail message but not included in the message, the image appears as a broken attachment when the e-mail message is viewed.  \n  \n It is a best practice for accessibility design to set the alternate text property in your mail message for any embedded images."
  example:
  - "The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendingMail> event named `SendingMail`. The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  \n  \n If the password change succeeds, the code in the `SendingMail` event handler attempts to send an e-mail message to the user to confirm the change. SMTP must already be configured on the server in order for this code example to work. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  \n  \n If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](~/add/includes/ajax-current-ext-md.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  \n  \n [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_255_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_255_1.aspx)]  \n  \n Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  \n  \n [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_255_2.vb)]\n [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_255_2.cs)]  \n  \n The following example code can be used as the ChangePasswordMail.htm file for the preceding example code.  \n  \n> [!IMPORTANT]\n>  Sending user account names or passwords in an e-mail message is a potential security threat. E-mail messages are typically sent in plain text and can be read by special network \"sniffing\" applications.  To improve security, use the mitigations that are described in [Securing Login Controls](~/add/includes/ajax-current-ext-md.md).  \n  \n```  \n<html>  \n<head><title></title></head>  \n<body>  \n<form>  \n  \n  <h1>Your password for the account named \"<%Username%>\" has changed.</h1>  \n  \n  <p>  \n  If you did not initiate this change, please call 1-206-555-0100.  \n  </p>  \n  \n  <p>  \n  <a href=\"http://www.contoso.com/login.aspx\">  \n    <img src=\"cid:LoginGif\" alt=\"Log In\" />  \n  </a>   \n  </p>  \n  \n  <p>  \n  Please read our attached Privacy Notice.  \n  </p>  \n  \n</form>  \n</body>  \n</html>  \n```"
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "Restituisce il percorso dell&quot;elemento da incorporare in un messaggio di posta elettronica."
  overload: System.Web.UI.WebControls.EmbeddedMailObject.Path*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.WebControls.EmbeddedMailObject.#ctor
  parent: System.Web.UI.WebControls.EmbeddedMailObject
  isExternal: false
  name: EmbeddedMailObject()
  nameWithType: EmbeddedMailObject.EmbeddedMailObject()
  fullName: System.Web.UI.WebControls.EmbeddedMailObject.EmbeddedMailObject()
- uid: System.Web.UI.WebControls.EmbeddedMailObject.#ctor(System.String,System.String)
  parent: System.Web.UI.WebControls.EmbeddedMailObject
  isExternal: false
  name: EmbeddedMailObject(String,String)
  nameWithType: EmbeddedMailObject.EmbeddedMailObject(String,String)
  fullName: System.Web.UI.WebControls.EmbeddedMailObject.EmbeddedMailObject(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.EmbeddedMailObject.Name
  parent: System.Web.UI.WebControls.EmbeddedMailObject
  isExternal: false
  name: Name
  nameWithType: EmbeddedMailObject.Name
  fullName: System.Web.UI.WebControls.EmbeddedMailObject.Name
- uid: System.Web.UI.WebControls.EmbeddedMailObject.Path
  parent: System.Web.UI.WebControls.EmbeddedMailObject
  isExternal: false
  name: Path
  nameWithType: EmbeddedMailObject.Path
  fullName: System.Web.UI.WebControls.EmbeddedMailObject.Path
- uid: System.Web.UI.WebControls.EmbeddedMailObject.#ctor*
  parent: System.Web.UI.WebControls.EmbeddedMailObject
  isExternal: false
  name: EmbeddedMailObject
  nameWithType: EmbeddedMailObject.EmbeddedMailObject
- uid: System.Web.UI.WebControls.EmbeddedMailObject.Name*
  parent: System.Web.UI.WebControls.EmbeddedMailObject
  isExternal: false
  name: Name
  nameWithType: EmbeddedMailObject.Name
- uid: System.Web.UI.WebControls.EmbeddedMailObject.Path*
  parent: System.Web.UI.WebControls.EmbeddedMailObject
  isExternal: false
  name: Path
  nameWithType: EmbeddedMailObject.Path
