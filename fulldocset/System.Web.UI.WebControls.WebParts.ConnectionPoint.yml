### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  id: ConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  langs:
  - csharp
  name: ConnectionPoint
  nameWithType: ConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint
  type: Class
  summary: "Funge da classe base per la definizione di connessione punto gli oggetti che consentono il controllo consumer e il controllo provider in una connessione Web part per condividere i dati."
  remarks: "Ogni connessione Web part è costituita da due controlli server la condivisione dei dati: un controllo è il consumer, ovvero il provider. Per una descrizione dei componenti principali di una connessione Web part e l&quot;oggetto di connessione, vedere il <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>Cenni preliminari sulla classe.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Ogni connessione Web part richiede punti di connessione. Il provider e il controllo consumer devono disporre di almeno un ConnectionPoint oggetto definito (ognuno di essi può disporre di più punti di connessione) che contiene i dettagli per la modalità di connessione a un altro controllo e il tipo di dati che è possibile condividere un controllo. In una connessione effettiva, il provider ha un proprio tipo di oggetto punto di connessione (derivato dalla classe di base ConnectionPoint), un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>istanza e il consumer ha un proprio oggetto, un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>istanza.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Per creare un punto di connessione del provider, gli sviluppatori devono aggiungere un metodo di callback al provider che verrà restituita un&quot;istanza di interfaccia implementata da un consumer. È necessario contrassegnare il metodo di callback nel codice sorgente con un `ConnectionProvider` attributo code (vedere la <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>classe).</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Analogamente, per creare un punto di connessione consumer, gli sviluppatori devono aggiungere un metodo per il consumer che riceve un&quot;istanza di interfaccia e deve essere contrassegnato tale metodo con un `ConnectionConsumer` attributo (vedere la <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>classe).</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>       Quando gli sviluppatori creano le connessioni in una pagina Web, possono essere creati come statico o dinamico. Connessioni statiche vengono dichiarate nel markup della pagina Web. Quando una connessione statica viene dichiarata, gli sviluppatori possono designare i punti di connessione vengono utilizzati per il consumer e provider quando si assegnano valori al `ProviderConnectionPointID` e `ConsumerConnectionPointID` attributi all&quot;interno di `<asp:webpartconnection>` tag dell&quot;elemento. Questo approccio è particolarmente utile se sono presenti più punti di connessione definiti all&quot;interno dei controlli consumer e provider, perché consente la connessione statica identificare i punti di connessione da utilizzare per la connessione.       Le connessioni dinamiche vengono create a livello di codice dal codice di uno sviluppatore o dagli utenti tramite l&quot;interfaccia utente (UI) forniti dal <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controllo.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Per creare una connessione nel codice, è necessario ottenere un&quot;istanza di un <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>oggetto chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metodo il <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controllo.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Prima di chiamare questo metodo, gli sviluppatori devono disporre di riferimenti per il consumer e i controlli server provider e i relativi oggetti punto di connessione corrispondente. Per ottenere i riferimenti ai punti di connessione per un provider e consumer, è innanzitutto necessario chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>e <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>metodi di <xref:System.Web.UI.WebControls.WebParts.WebPartManager>controllo.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Questi metodi restituiscono la connessione appropriata oggetti point, che a sua volta possono essere passati al metodo per la creazione di una connessione.       Quando il provider e il consumer oggetti punto di connessione che utilizzano lo stesso tipo di interfaccia, sono compatibili e possono creare una connessione diretta per condividere i dati. Se non funzionano con lo stesso tipo di interfaccia, un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>oggetto deve essere utilizzato per convertire l&quot;istanza dell&quot;interfaccia del provider in un tipo che il consumer può funzionare con.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       La classe astratta ConnectionPoint fornisce i dettagli di base dei punti di connessione che vengono condivisi dai controlli consumer e provider. Diverse proprietà contengono questi dettagli. Il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>proprietà indica se un punto di connessione può partecipare a più di una connessione alla volta.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Per impostazione predefinita, i punti di connessione provider possono partecipare a più connessioni, e non può essere di punti di connessione consumer. Il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>proprietà indica il tipo del controllo del server associato a un punto di connessione.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> Si noti che solo <xref:System.Web.UI.WebControls.WebParts.WebPart>controlli possono formare delle connessioni; qualsiasi controllo server, se un controllo ASP.NET, un controllo personalizzato o un controllo utente, può essere abilitato per partecipare alle connessioni se inserito un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>fuso.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>proprietà fornisce un nome descrittivo per il punto di connessione che può essere visualizzato nell&quot;interfaccia utente per assistere gli utenti che creano le connessioni.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>proprietà viene utilizzata come identificatore di stringa per l&quot;oggetto punto di connessione.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>proprietà indica il tipo di istanza dell&quot;interfaccia in grado di riconoscere il punto di connessione.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Se un punto di connessione fornisce o utilizza un&quot;istanza di tale interfaccia viene determinato in base a un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>o <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>oggetto.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       La classe ConnectionPoint dispone di un metodo. Il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>metodo restituisce un valore booleano che indica se un punto di connessione è attualmente in grado di far parte di connessioni.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>       La classe di ConnectionPoint include inoltre un campo pubblico, <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Questo campo contiene un valore utilizzato per identificare il punto di connessione predefinito in una connessione.      > [!NOTE] > Gli attributi per specificare il punto di connessione metodi hanno un solo parametro obbligatorio, `displayName`, pertanto è possibile creare l&quot;attributo del punto di connessione predefinito senza specificare un ID. In questi casi, il <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>campo fornisce un valore di base da utilizzare.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example demonstrates the creation of a Web Parts connection that includes the required ConnectionPoint objects. Because the ConnectionPoint class is an abstract base class, instances of its child classes--<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>--are the actual objects used to form a connection.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. You can also create the connection programmatically; the code for doing that is contained in the `Button1_Click` method. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the ConnectionPoint objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. Click the **Disconnect** button to terminate the existing connection. Use the **Display Mode** control to return the page to browse mode. Next, click the **Dynamic Connection** button to create a connection programmatically. Click the **Connection Point Details** button again, to indicate details about the two connection point objects."
  syntax:
    content: public abstract class ConnectionPoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  id: AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ottiene un valore che indica se un punto di connessione supporta più connessioni simultanee."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>gli oggetti hanno AllowsMultipleConnections proprietà valore impostato in `true` (per la <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>classe), in quanto i controlli Web part per impostazione predefinita consente ai punti di connessione provider di creare connessioni a più consumer.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Al contrario, <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>gli oggetti hanno il valore della proprietà AllowsMultipleConnections impostato su `false` (dal <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>classe) perché il controllo di Web part impostato per impostazione predefinita consente di connessione consumer punti per stabilire una connessione a un solo provider alla volta.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       È possibile modificare il comportamento predefinito relativo alle connessioni multiple assegnando valori diversi per la <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>proprietà (per i provider) o <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>proprietà (per i consumer) dei due <xref:System.Attribute>classi utilizzate per gli attributi di connessione.</xref:System.Attribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> Se si abilitano i punti di connessione consumer per la connessione a più provider nello stesso momento, il codice deve gestire i problemi di sincronizzazione risultante."
  example:
  - "The following code example demonstrates the use of the AllowsMultipleConnections property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the AllowsMultipleConnections property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1358_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1358_1.aspx)]"
  syntax:
    content: public bool AllowsMultipleConnections { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il punto di connessione supporta più connessioni. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  id: ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ottiene il <xref:System.Type>del controllo server a cui è associato un punto di connessione.</xref:System.Type>"
  remarks: "Il valore della proprietà ControlType è spesso il <xref:System.Web.UI.WebControls.WebParts.WebPart>tipo.</xref:System.Web.UI.WebControls.WebParts.WebPart> Tuttavia, poiché qualsiasi tipo di controllo utente o un controllo server può prendere parte connessioni se correttamente abilitato e inserito in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona, la proprietà ControlType può restituire uno di questi altri tipi di controllo server nonché.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       Quando i controlli che non sono server <xref:System.Web.UI.WebControls.WebParts.WebPart>i controlli vengono disposti un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona, essi vengono inclusi in un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>oggetto in fase di esecuzione in modo che funzioni come <xref:System.Web.UI.WebControls.WebParts.WebPart>Controlla e partecipare alle connessioni.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Ma quando tali controlli sono coinvolti nelle connessioni, il valore della proprietà ControlType non restituisce il <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>digitare; restituisce il tipo del <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>controllo figlio dell&quot;oggetto, ovvero il tipo del controllo server o utente.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates the use of the ControlType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ControlType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_622_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_622_1.aspx)]"
  syntax:
    content: public Type ControlType { get; }
    return:
      type: System.Type
      description: "Oggetto <xref:System.Type>che rappresenta il tipo di controllo.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  id: DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Rappresenta una stringa utilizzata per identificare il punto di connessione predefinito all&quot;interno di una raccolta di punti di connessione associata a un controllo server."
  remarks: "Quando viene creato un punto di connessione, è possibile specificare un ID per il punto di connessione nel codice sorgente di un provider o consumer <xref:System.Web.UI.WebControls.WebParts.WebPart>controllare, tramite un <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>o <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>attributo.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.WebPart> Tuttavia, quando un attributo viene aggiunto a un punto di connessione nel codice sorgente, la `ID` parametro è facoltativo. Se l&quot;ID non è specificato nell&quot;attributo, il campo DefaultID fornisce una stringa che viene utilizzata per identificare il punto di connessione predefinito.       Se più punti di connessione sono definiti in un controllo consumer o provider, è necessario specificare un ID per ogni punto di connessione, in modo che sia possono distinguere i punti di connessione durante la creazione di connessioni."
  syntax:
    content: public static readonly string DefaultID;
    return:
      type: System.String
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  id: DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ottiene una stringa che funge da un nome descrittivo visualizzato per rappresentare un punto di connessione nell&quot;interfaccia utente (UI)."
  remarks: "Per creare una connessione Web part, i controlli di provider e consumer per la connessione devono ognuno dei quali specifica almeno un punto di connessione, un metodo che consente loro di comunicare e condividere i dati. Per identificare questi metodi di punto di connessione, lo sviluppatore specifica un attributo nei metodi selezionati. Nel provider, un `ConnectionProvider` attributo è impostato sul metodo di callback selezionato e il consumer, un `ConnectionConsumer` attributo è impostato sul metodo che riceve un&quot;istanza di un&quot;interfaccia che contiene i dati dal provider. Per entrambi gli attributi, è l&quot;unico parametro che è sempre necessario indipendentemente dal quale eseguire l&quot;overload dichiarato per creare l&quot;attributo, il `displayName` parametro. Lo sviluppatore deve assegnare una stringa da utilizzare come un nome descrittivo visualizzato per il punto di connessione e tale stringa diventa il valore della proprietà DisplayName.       Il valore della proprietà DisplayName viene visualizzato nell&quot;interfaccia utente di una pagina Web quando gli utenti creano le connessioni. Ad esempio, quando il <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controllo viene aggiunto alla pagina, viene creata un&quot;interfaccia utente per gli utenti di creare connessioni tra i controlli.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Dopo che un utente passa a una pagina in modalità di connessione e sceglie un verbo di connessione in un <xref:System.Web.UI.WebControls.WebParts.WebPart>di controllo, viene visualizzata l&quot;interfaccia utente di connessione.</xref:System.Web.UI.WebControls.WebParts.WebPart> Ogni controllo che può partecipare a una connessione è elencato nell&quot;interfaccia utente e accanto a ogni controllo è un controllo elenco a discesa che visualizza i nomi descrittivi dei suoi punti di connessione disponibili. Gli utenti devono selezionare almeno un punto di connessione per stabilire una connessione. I valori visualizzati nell&quot;elenco dei punti di connessione vengono ottenuti dalla proprietà DisplayName. Se gli sviluppatori di compilare un&quot;interfaccia utente personalizzata per la creazione di connessioni, è possibile utilizzare la proprietà DisplayName in modo analogo a fornire un nome descrittivo che rappresenta un punto di connessione."
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: "Stringa che contiene un nome descrittivo visualizzato per un <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> oggetto."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  id: GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Restituisce un valore che indica se un punto di connessione può partecipare alle connessioni."
  remarks: "Il metodo GetEnabled nella base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe sempre restituisce `true`, ma le classi derivate possono eseguire l&quot;override del metodo per restituire `true` o `false` in momenti diversi, in base allo stato di `control`.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>"
  example:
  - "The following code example demonstrates the use of the GetEnabled method on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the GetEnabled method on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/a42b3e8f-70fc-455c-a13a-_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/a42b3e8f-70fc-455c-a13a-_1.aspx)]"
  syntax:
    content: public virtual bool GetEnabled (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Oggetto <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> o un altro controllo server associato a un punto di connessione."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il controllo può creare un punto di connessione per partecipare a una connessione. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ottiene una stringa che contiene l&quot;identificatore per un punto di connessione."
  remarks: "Quando uno sviluppatore dichiara un <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>o <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>attributo su un metodo nel codice sorgente di un controllo, in modo che il metodo può essere utilizzato come punto di connessione, non è necessario dichiarare il `ID` parametro per l&quot;attributo del punto di connessione.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> L&quot;attributo obbligatorio solo il `displayName` parametro. Per il punto di connessione, viene assegnato un ID predefinito utilizzando il valore di <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>campo.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Se è presente un solo metodo in un controllo viene utilizzato come un punto di connessione, non è necessario specificare un ID per il punto di connessione. Se sono presenti più metodi specificati come punti di connessione, è necessario specificare un ID per ognuno di essi. in caso contrario, verrà generata un&quot;eccezione. Assegnando un ID a ciascun punto di connessione, inoltre consentono di specificare il punto di connessione da utilizzare quando si dichiarano connessioni nelle pagine Web o crearli nel codice."
  example:
  - "The following code example demonstrates the use of the ID property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ID property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1125_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1125_1.aspx)]"
  syntax:
    content: public string ID { get; }
    return:
      type: System.String
      description: "Stringa che contiene l&quot;identificatore per un punto di connessione."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  id: InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ottiene il tipo di interfaccia utilizzata da un punto di connessione."
  remarks: "La proprietà InterfaceType indica il tipo di interfaccia utilizzato da un punto di connessione. Questo può aiutare a determinare se due controlli sono compatibili e in grado di creare una connessione. Se InterfaceType del punto di connessione provider è diverso da InterfaceType del punto di connessione consumer, quindi i due controlli non sono compatibili, ovvero non possono essere connessi direttamente senza un trasformatore e un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>oggetto deve essere utilizzato per stabilire una connessione.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  example:
  - "The following code example demonstrates the use of the InterfaceType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the InterfaceType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_359_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_359_1.aspx)]"
  syntax:
    content: public Type InterfaceType { get; }
    return:
      type: System.Type
      description: "Oggetto <xref:System.Type>che corrisponde al tipo di interfaccia fornita o utilizzata da un controllo.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled
  nameWithType: ConnectionPoint.GetEnabled
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
