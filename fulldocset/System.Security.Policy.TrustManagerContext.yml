### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.TrustManagerContext
  id: TrustManagerContext
  children:
  - System.Security.Policy.TrustManagerContext.#ctor
  - System.Security.Policy.TrustManagerContext.#ctor(System.Security.Policy.TrustManagerUIContext)
  - System.Security.Policy.TrustManagerContext.IgnorePersistedDecision
  - System.Security.Policy.TrustManagerContext.KeepAlive
  - System.Security.Policy.TrustManagerContext.NoPrompt
  - System.Security.Policy.TrustManagerContext.Persist
  - System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity
  - System.Security.Policy.TrustManagerContext.UIContext
  langs:
  - csharp
  name: TrustManagerContext
  nameWithType: TrustManagerContext
  fullName: System.Security.Policy.TrustManagerContext
  type: Class
  summary: "Rappresenta il contesto per il gestore di attendibilità da considerare quando si decide di eseguire un&quot;applicazione e quando si imposta la sicurezza in un nuovo <xref href=&quot;System.AppDomain&quot;> </xref> in cui si desidera eseguire un&quot;applicazione."
  remarks: "Per un elenco di valori di proprietà iniziali per un&quot;istanza della classe TrustManagerContext, vedere il <xref:System.Security.Policy.TrustManagerContext.%23ctor>costruttore.</xref:System.Security.Policy.TrustManagerContext.%23ctor>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class TrustManagerContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.#ctor
  id: '#ctor'
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: TrustManagerContext()
  nameWithType: TrustManagerContext.TrustManagerContext()
  fullName: System.Security.Policy.TrustManagerContext.TrustManagerContext()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Policy.TrustManagerContext&quot;> </xref> classe."
  remarks: "Nella tabella seguente vengono illustrati i valori di proprietà iniziali per una nuova istanza della <xref:System.Security.Policy.TrustManagerContext>classe.</xref:System.Security.Policy.TrustManagerContext>      | Proprietà | Il valore iniziale |   |--------------|-------------------|   | <xref:System.Security.Policy.TrustManagerContext.IgnorePersistedDecision%2A>| `false`|   | <xref:System.Security.Policy.TrustManagerContext.KeepAlive%2A>| `false`|   | <xref:System.Security.Policy.TrustManagerContext.NoPrompt%2A>| `false`|   | <xref:System.Security.Policy.TrustManagerContext.Persist%2A>| `true`|   | <xref:System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity%2A>| `null`|   | <xref:System.Security.Policy.TrustManagerContext.UIContext%2A>| <xref:System.Security.Policy.TrustManagerUIContext>|</xref:System.Security.Policy.TrustManagerUIContext></xref:System.Security.Policy.TrustManagerContext.UIContext%2A></xref:System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity%2A></xref:System.Security.Policy.TrustManagerContext.Persist%2A></xref:System.Security.Policy.TrustManagerContext.NoPrompt%2A></xref:System.Security.Policy.TrustManagerContext.KeepAlive%2A></xref:System.Security.Policy.TrustManagerContext.IgnorePersistedDecision%2A>"
  syntax:
    content: public TrustManagerContext ();
    parameters: []
  overload: System.Security.Policy.TrustManagerContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.#ctor(System.Security.Policy.TrustManagerUIContext)
  id: '#ctor(System.Security.Policy.TrustManagerUIContext)'
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: TrustManagerContext(TrustManagerUIContext)
  nameWithType: TrustManagerContext.TrustManagerContext(TrustManagerUIContext)
  fullName: System.Security.Policy.TrustManagerContext.TrustManagerContext(TrustManagerUIContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Policy.TrustManagerContext&quot;> </xref> classe utilizzando l&quot;oggetto specificato <xref href=&quot;System.Security.Policy.TrustManagerUIContext&quot;> </xref> oggetto."
  remarks: "Questo costruttore inizializza le proprietà con le stesse impostazioni il costruttore predefinito, fatta eccezione per la <xref:System.Security.Policy.TrustManagerContext.UIContext%2A>proprietà, che è impostato sul valore che viene passato.</xref:System.Security.Policy.TrustManagerContext.UIContext%2A>"
  syntax:
    content: public TrustManagerContext (System.Security.Policy.TrustManagerUIContext uiContext);
    parameters:
    - id: uiContext
      type: System.Security.Policy.TrustManagerUIContext
      description: "Uno del <xref href=&quot;System.Security.Policy.TrustManagerUIContext&quot;> </xref> valori che specifica il tipo di interfaccia utente di gestione trust da utilizzare."
  overload: System.Security.Policy.TrustManagerContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision
  id: IgnorePersistedDecision
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: IgnorePersistedDecision
  nameWithType: TrustManagerContext.IgnorePersistedDecision
  fullName: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Ottiene o imposta un valore che indica se il gestore di sicurezza dell&quot;applicazione deve ignorare le decisioni memorizzate e chiamare la relazione di trust manager."
  remarks: "Se `true`, <xref:System.Security.Policy.ApplicationSecurityManager>Ignora le decisioni persistente per l&quot;applicazione e chiama la relazione di trust di gestione.</xref:System.Security.Policy.ApplicationSecurityManager> Se `false`, <xref:System.Security.Policy.ApplicationSecurityManager>utilizza la cache decisioni, se disponibile.</xref:System.Security.Policy.ApplicationSecurityManager>"
  syntax:
    content: public virtual bool IgnorePersistedDecision { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per chiamare la relazione di trust di gestione. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.KeepAlive
  id: KeepAlive
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: KeepAlive
  nameWithType: TrustManagerContext.KeepAlive
  fullName: System.Security.Policy.TrustManagerContext.KeepAlive
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Ottiene o imposta un valore che indica se il gestore di attendibilità deve memorizzare nella cache di stato per questa applicazione, per semplificare le future richieste per stabilire l&quot;attendibilità dell&quot;applicazione."
  remarks: "Questo flag è impostato su `true` se l&quot;host può chiamare la relazione di trust gestore più volte le decisioni di attendibilità per l&quot;applicazione. Se `true`, il gestore di attendibilità deve memorizzare nella cache qualsiasi stato che potrebbe migliorare la velocità di future chiamate per il <xref:System.Security.Policy.IApplicationTrustManager.DetermineApplicationTrust%2A>metodo.</xref:System.Security.Policy.IApplicationTrustManager.DetermineApplicationTrust%2A> Questa proprietà è impostata su `false` se l&quot;host prevede di richiamare il gestore di attendibilità per l&quot;oggetto corrente <xref:System.AppDomain>.</xref:System.AppDomain>"
  syntax:
    content: public virtual bool KeepAlive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per memorizzare i dati di stato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Policy.TrustManagerContext.KeepAlive*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.NoPrompt
  id: NoPrompt
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: NoPrompt
  nameWithType: TrustManagerContext.NoPrompt
  fullName: System.Security.Policy.TrustManagerContext.NoPrompt
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Ottiene o imposta un valore che indica se il gestore di attendibilità deve richiedere all&quot;utente di prendere decisioni sull&quot;attendibilità."
  remarks: "Se `false`, il gestore di attendibilità determina la finestra di dialogo utente appropriato per ottenere una decisione di attendibilità."
  syntax:
    content: public virtual bool NoPrompt { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per non richiedere all&quot;utente. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per richiedere all&quot;utente. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Policy.TrustManagerContext.NoPrompt*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.Persist
  id: Persist
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: Persist
  nameWithType: TrustManagerContext.Persist
  fullName: System.Security.Policy.TrustManagerContext.Persist
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Ottiene o imposta un valore che indica se la risposta dell&quot;utente per la finestra di dialogo di consenso deve essere mantenuta."
  remarks: "Questa proprietà è `true` se la risposta dell&quot;utente per la finestra di dialogo di consenso deve essere mantenuta per evitare ulteriori chiedere conferma all&quot;utente a ogni nuova richiesta di attivazione. Questa proprietà è `false` se la risposta dell&quot;utente non deve essere persistente."
  syntax:
    content: public virtual bool Persist { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per memorizzare i dati di stato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Policy.TrustManagerContext.Persist*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity
  id: PreviousApplicationIdentity
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: PreviousApplicationIdentity
  nameWithType: TrustManagerContext.PreviousApplicationIdentity
  fullName: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Ottiene o imposta l&quot;identità dell&quot;identità di applicazione precedente."
  syntax:
    content: public virtual ApplicationIdentity PreviousApplicationIdentity { get; set; }
    return:
      type: System.ApplicationIdentity
      description: "Un <xref href=&quot;System.ApplicationIdentity&quot;> </xref> oggetto che rappresenta il precedente <xref href=&quot;System.ApplicationIdentity&quot;> </xref>."
  overload: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.TrustManagerContext.UIContext
  id: UIContext
  parent: System.Security.Policy.TrustManagerContext
  langs:
  - csharp
  name: UIContext
  nameWithType: TrustManagerContext.UIContext
  fullName: System.Security.Policy.TrustManagerContext.UIContext
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "Ottiene o imposta il tipo dell&quot;interfaccia utente che deve essere visualizzato il gestore di attendibilità."
  remarks: "La proprietà è destinata a consiglia l&quot;interfaccia utente il gestore di attendibilità di UIContext deve fornire per la decisione di attendibilità. Un gestore di attendibilità può decidere di utilizzare un&quot;interfaccia diversa."
  syntax:
    content: public virtual System.Security.Policy.TrustManagerUIContext UIContext { get; set; }
    return:
      type: System.Security.Policy.TrustManagerUIContext
      description: "Uno del <xref href=&quot;System.Security.Policy.TrustManagerUIContext&quot;> </xref> valori. Il valore predefinito è <xref href=&quot;System.Security.Policy.TrustManagerUIContext&quot;> </xref>."
  overload: System.Security.Policy.TrustManagerContext.UIContext*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Policy.TrustManagerContext.#ctor
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: TrustManagerContext()
  nameWithType: TrustManagerContext.TrustManagerContext()
  fullName: System.Security.Policy.TrustManagerContext.TrustManagerContext()
- uid: System.Security.Policy.TrustManagerContext.#ctor(System.Security.Policy.TrustManagerUIContext)
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: TrustManagerContext(TrustManagerUIContext)
  nameWithType: TrustManagerContext.TrustManagerContext(TrustManagerUIContext)
  fullName: System.Security.Policy.TrustManagerContext.TrustManagerContext(TrustManagerUIContext)
- uid: System.Security.Policy.TrustManagerUIContext
  parent: System.Security.Policy
  isExternal: false
  name: TrustManagerUIContext
  nameWithType: TrustManagerUIContext
  fullName: System.Security.Policy.TrustManagerUIContext
- uid: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: IgnorePersistedDecision
  nameWithType: TrustManagerContext.IgnorePersistedDecision
  fullName: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Policy.TrustManagerContext.KeepAlive
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: KeepAlive
  nameWithType: TrustManagerContext.KeepAlive
  fullName: System.Security.Policy.TrustManagerContext.KeepAlive
- uid: System.Security.Policy.TrustManagerContext.NoPrompt
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: NoPrompt
  nameWithType: TrustManagerContext.NoPrompt
  fullName: System.Security.Policy.TrustManagerContext.NoPrompt
- uid: System.Security.Policy.TrustManagerContext.Persist
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: Persist
  nameWithType: TrustManagerContext.Persist
  fullName: System.Security.Policy.TrustManagerContext.Persist
- uid: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: PreviousApplicationIdentity
  nameWithType: TrustManagerContext.PreviousApplicationIdentity
  fullName: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity
- uid: System.ApplicationIdentity
  parent: System
  isExternal: false
  name: ApplicationIdentity
  nameWithType: ApplicationIdentity
  fullName: System.ApplicationIdentity
- uid: System.Security.Policy.TrustManagerContext.UIContext
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: UIContext
  nameWithType: TrustManagerContext.UIContext
  fullName: System.Security.Policy.TrustManagerContext.UIContext
- uid: System.Security.Policy.TrustManagerContext.#ctor*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: TrustManagerContext
  nameWithType: TrustManagerContext.TrustManagerContext
- uid: System.Security.Policy.TrustManagerContext.IgnorePersistedDecision*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: IgnorePersistedDecision
  nameWithType: TrustManagerContext.IgnorePersistedDecision
- uid: System.Security.Policy.TrustManagerContext.KeepAlive*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: KeepAlive
  nameWithType: TrustManagerContext.KeepAlive
- uid: System.Security.Policy.TrustManagerContext.NoPrompt*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: NoPrompt
  nameWithType: TrustManagerContext.NoPrompt
- uid: System.Security.Policy.TrustManagerContext.Persist*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: Persist
  nameWithType: TrustManagerContext.Persist
- uid: System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: PreviousApplicationIdentity
  nameWithType: TrustManagerContext.PreviousApplicationIdentity
- uid: System.Security.Policy.TrustManagerContext.UIContext*
  parent: System.Security.Policy.TrustManagerContext
  isExternal: false
  name: UIContext
  nameWithType: TrustManagerContext.UIContext
