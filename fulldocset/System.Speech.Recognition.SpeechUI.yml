### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SpeechUI
  id: SpeechUI
  children:
  - System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)
  langs:
  - csharp
  name: SpeechUI
  nameWithType: SpeechUI
  fullName: System.Speech.Recognition.SpeechUI
  type: Class
  summary: "Fornisce informazioni di stato e testo sulle operazioni di riconoscimento da visualizzare nell&quot;interfaccia utente di piattaforma di riconoscimento vocale."
  remarks: "I membri della classe SpeechUI possono essere utilizzati per indicare l&quot;esatta commenti e suggerimenti per l&quot;utente finale attraverso l&quot;interfaccia utente di riconoscimento vocale. Un&quot;applicazione può restituire testo arbitrario e le informazioni di esito positivo o negativo utilizzando questa classe."
  example:
  - "The following example is a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event. This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input in the form \"My password is …\".  \n  \n If a password is not present, or not valid, <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> sends error information to the Speech platform user interface.  \n  \n```  \n  \ngrammar.SpeechRecognized +=   \ndelegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n{  \n  SemanticValue semantics = eventArgs.Result.Semantics;  \n  RecognitionResult result=eventArgs.Result;  \n  \n  if (!semantics.ContainsKey(\"Password\"))   \n  {  \n    SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n  }  \n  else   \n  {  \n    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \n                  result.Words[3],  \n                  result.Words[result.Words.Count - 1]);  \n    MemoryStream pwdMemoryStream = new MemoryStream();  \n    pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n    if (!IsValidPwd(pwdMemoryStream))   \n    {  \n      string badPwd = System.IO.Path.GetTempPath() +   \n              \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \n      pwdAudio.WriteToWaveStream(waveStream);  \n      waveStream.Flush();  \n      waveStream.Close();  \n      SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);  \n    }  \n  }  \n};  \n```"
  syntax:
    content: public class SpeechUI
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)
  id: SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)
  parent: System.Speech.Recognition.SpeechUI
  langs:
  - csharp
  name: SendTextFeedback(RecognitionResult,String,Boolean)
  nameWithType: SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)
  fullName: System.Speech.Recognition.SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Invia lo stato e testo descrittivo per l&quot;interfaccia utente della piattaforma vocale sullo stato di un&quot;operazione di riconoscimento."
  remarks: "SendTextFeedback può essere utilizzato per indicare che un&quot;operazione di riconoscimento non soddisfa determinati criteri, anche se l&quot;input è stato riconosciuto.       Un esempio è la verifica delle informazioni sul codice di sicurezza in cui è stato completamente riconoscere l&quot;input, ma le informazioni di verifica non erano corretto."
  example:
  - "The following example is a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event. This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input of the form, \"My password is …\".  \n  \n If a password is not present, or not valid, **SendTextFeedback** is used to send error information to the Speech platform user interface.  \n  \n```  \n  \ngrammar.SpeechRecognized +=  \ndelegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n{  \n  SemanticValue semantics = eventArgs.Result.Semantics;  \n  RecognitionResult result=eventArgs.Result;  \n  \n  if (!semantics.ContainsKey(\"Password\"))   \n  {  \n    SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n  }  \n  else  \n  {  \n    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \n              result.Words[3],  \n              result.Words[result.Words.Count - 1]);  \n    MemoryStream pwdMemoryStream = new MemoryStream();  \n    pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n    if (!IsValidPwd(pwdMemoryStream))   \n    {  \n      string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" +   \n               (new Random()).Next().ToString() + \".wav\";  \n      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \n      pwdAudio.WriteToWaveStream(waveStream);  \n      waveStream.Flush();  \n      waveStream.Close();  \n      SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);  \n    }  \n  }  \n};  \n```"
  syntax:
    content: public static bool SendTextFeedback (System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction);
    parameters:
    - id: result
      type: System.Speech.Recognition.RecognitionResult
      description: "Un valido <xref href=&quot;System.Speech.Recognition.RecognitionResult&quot;> </xref> istanza."
    - id: feedback
      type: System.String
      description: "Oggetto <xref:System.String>contenente un commento sull&quot;operazione di riconoscimento che ha generato il <xref href=&quot;System.Speech.Recognition.RecognitionResult&quot;> </xref> `result`.</xref:System.String>"
    - id: isSuccessfulAction
      type: System.Boolean
      description: "Oggetto <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;> </xref> che indica se l&quot;applicazione ha considerato l&quot;operazione di riconoscimento esito positivo."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se le informazioni fornite al metodo (<code>Feedback</code>, e <code> isSuccessfulAction </code>) è stato reso disponibile per l&quot;interfaccia utente della piattaforma vocale e <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se l&quot;operazione non riuscita."
  overload: System.Speech.Recognition.SpeechUI.SendTextFeedback*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)
  parent: System.Speech.Recognition.SpeechUI
  isExternal: false
  name: SendTextFeedback(RecognitionResult,String,Boolean)
  nameWithType: SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)
  fullName: System.Speech.Recognition.SpeechUI.SendTextFeedback(RecognitionResult,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Recognition.RecognitionResult
  parent: System.Speech.Recognition
  isExternal: false
  name: RecognitionResult
  nameWithType: RecognitionResult
  fullName: System.Speech.Recognition.RecognitionResult
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.SpeechUI.SendTextFeedback*
  parent: System.Speech.Recognition.SpeechUI
  isExternal: false
  name: SendTextFeedback
  nameWithType: SpeechUI.SendTextFeedback
