### YamlMime:ManagedReference
items:
- uid: System.Timers.ElapsedEventArgs
  id: ElapsedEventArgs
  children:
  - System.Timers.ElapsedEventArgs.SignalTime
  langs:
  - csharp
  name: ElapsedEventArgs
  nameWithType: ElapsedEventArgs
  fullName: System.Timers.ElapsedEventArgs
  type: Class
  summary: "Fornisce dati per il <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> evento."
  remarks: ''
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/t-system.timers.elapsede_1_1.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/t-system.timers.elapsede_1_1.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/t-system.timers.elapsede_1_1.vb)]"
  syntax:
    content: 'public class ElapsedEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Timers.ElapsedEventArgs.SignalTime
  id: SignalTime
  parent: System.Timers.ElapsedEventArgs
  langs:
  - csharp
  name: SignalTime
  nameWithType: ElapsedEventArgs.SignalTime
  fullName: System.Timers.ElapsedEventArgs.SignalTime
  type: Property
  assemblies:
  - System
  namespace: System.Timers
  summary: "Ottiene la data/ora quando il <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> è stato generato l&quot;evento."
  remarks: "Il <xref:System.Timers.Timer.Elapsed?displayProperty=fullName>evento viene generato in un <xref:System.Threading.ThreadPool>thread, pertanto il metodo di gestione degli eventi può essere eseguito in un solo thread con lo stesso momento in cui una chiamata al <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName>metodo viene eseguito in un altro thread.</xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> </xref:System.Threading.ThreadPool> </xref:System.Timers.Timer.Elapsed?displayProperty=fullName> Ciò potrebbe comportare il <xref:System.Timers.Timer.Elapsed>evento generato dopo il <xref:System.Timers.Timer.Stop%2A>metodo viene chiamato.</xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Elapsed> Tale race condition non può essere evitata semplicemente confrontando la proprietà SignalTime con l&quot;ora di quando il <xref:System.Timers.Timer.Stop%2A>metodo viene chiamato, poiché il metodo di gestione degli eventi potrebbe già essere in esecuzione quando il <xref:System.Timers.Timer.Stop%2A>metodo viene chiamato, o potrebbe iniziare tra il momento in esecuzione quando il <xref:System.Timers.Timer.Stop%2A>metodo viene chiamato e il momento in cui viene salvato l&quot;ora di arresto.</xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Stop%2A> </xref:System.Timers.Timer.Stop%2A> Se è fondamentale per impedire al thread che chiama il <xref:System.Timers.Timer.Stop%2A>metodo di proseguire mentre il metodo di gestione degli eventi è ancora in esecuzione, utilizzare un meccanismo di sincronizzazione più affidabile, ad esempio la <xref:System.Threading.Monitor>classe o <xref:System.Threading.Interlocked.CompareExchange%2A>metodo.</xref:System.Threading.Interlocked.CompareExchange%2A> </xref:System.Threading.Monitor> </xref:System.Timers.Timer.Stop%2A> Codice che usa il <xref:System.Threading.Interlocked.CompareExchange%2A>metodo, vedere l&quot;esempio per il <xref:System.Timers.Timer.Stop%2A?displayProperty=fullName>metodo.</xref:System.Timers.Timer.Stop%2A?displayProperty=fullName> </xref:System.Threading.Interlocked.CompareExchange%2A>"
  example:
  - "The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the SignalTime property each time it is raised.  \n  \n [!code-cpp[System.Timers.Timer#1](~/add/codesnippet/cpp/p-system.timers.elapsede_1.cpp)]\n [!code-cs[System.Timers.Timer#1](~/add/codesnippet/csharp/p-system.timers.elapsede_1.cs)]\n [!code-vb[System.Timers.Timer#1](~/add/codesnippet/visualbasic/p-system.timers.elapsede_1.vb)]"
  syntax:
    content: public DateTime SignalTime { get; }
    return:
      type: System.DateTime
      description: "Il tempo di <xref href=&quot;System.Timers.Timer.Elapsed&quot;> </xref> è stato generato l&quot;evento."
  overload: System.Timers.ElapsedEventArgs.SignalTime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Timers.ElapsedEventArgs.SignalTime
  parent: System.Timers.ElapsedEventArgs
  isExternal: false
  name: SignalTime
  nameWithType: ElapsedEventArgs.SignalTime
  fullName: System.Timers.ElapsedEventArgs.SignalTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Timers.ElapsedEventArgs.SignalTime*
  parent: System.Timers.ElapsedEventArgs
  isExternal: false
  name: SignalTime
  nameWithType: ElapsedEventArgs.SignalTime
