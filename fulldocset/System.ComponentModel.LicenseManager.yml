### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseManager
  id: LicenseManager
  children:
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  - System.ComponentModel.LicenseManager.CurrentContext
  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  - System.ComponentModel.LicenseManager.LockContext(System.Object)
  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  - System.ComponentModel.LicenseManager.UsageMode
  - System.ComponentModel.LicenseManager.Validate(System.Type)
  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  langs:
  - csharp
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: System.ComponentModel.LicenseManager
  type: Class
  summary: "Fornisce proprietà e metodi per aggiungere una licenza a un componente e per gestire un <xref href=&quot;System.ComponentModel.LicenseProvider&quot;> </xref>. Questa classe non può essere ereditata."
  remarks: "La classe LicenseManager offre quanto segue `static` proprietà: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>e <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</xref:System.ComponentModel.LicenseManager.UsageMode%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> La classe fornisce anche le seguenti `static` metodi: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>e <xref:System.ComponentModel.LicenseManager.Validate%2A>.</xref:System.ComponentModel.LicenseManager.Validate%2A> </xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>       Quando si crea un componente che si desidera concedere una licenza, è necessario eseguire le operazioni seguenti: 1.  Specificare la <xref:System.ComponentModel.LicenseProvider>contrassegnando il componente con un <xref:System.ComponentModel.LicenseProviderAttribute>.</xref:System.ComponentModel.LicenseProviderAttribute> </xref:System.ComponentModel.LicenseProvider>      2.  Chiamare <xref:System.ComponentModel.LicenseManager.Validate%2A>o <xref:System.ComponentModel.LicenseManager.IsValid%2A>nel costruttore del componente.</xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.Validate%2A>Genera un <xref:System.ComponentModel.LicenseException>quando tenta di creare un&quot;istanza senza una licenza valida.</xref:System.ComponentModel.LicenseException></xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.IsValid%2A>non genera un&quot;eccezione.</xref:System.ComponentModel.LicenseManager.IsValid%2A>      3.  Chiamare <xref:System.ComponentModel.License.Dispose%2A>per tutte le licenze concesse quando il componente viene eliminato o finalizzato.</xref:System.ComponentModel.License.Dispose%2A>       Per ulteriori informazioni sulle licenze, vedere [come: licenza componenti e controlli](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._63_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._63_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._63_1.cpp)]"
  syntax:
    content: public sealed class LicenseManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Crea un&quot;istanza del tipo specificato, dato il contesto in cui è possibile utilizzare l&quot;istanza con licenza."
  remarks: "Il <xref:System.ComponentModel.LicenseContext>specificare come il `creationContext` parametro viene utilizzato come <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>per la durata di questo <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> Il metodo CreateWithContext impedisce a tutti gli altri thread di <xref:System.AppDomain>di modificare il <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, consentendo CreateWithContext si comporti come operazione atomica.</xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);
    parameters:
    - id: type
      type: System.Type
      description: "Oggetto <xref:System.Type>che rappresenta il tipo da creare.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "Oggetto <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> che specifica quando è possibile utilizzare l&quot;istanza con licenza."
    return:
      type: System.Object
      description: "Un&quot;istanza del tipo specificato."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Crea un&quot;istanza del tipo specificato con gli argomenti specificati, dato il contesto in cui è possibile utilizzare l&quot;istanza con licenza."
  remarks: "Il <xref:System.ComponentModel.LicenseContext>specificare come il `creationContext` parametro viene utilizzato come <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>per la durata di questo <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> Questo metodo blocca tutti gli altri thread <xref:System.AppDomain>di modificare il <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>consentendo <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>si comporti come operazione atomica.</xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: "Oggetto <xref:System.Type>che rappresenta il tipo da creare.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "Oggetto <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> che specifica quando è possibile utilizzare l&quot;istanza con licenza."
    - id: args
      type: System.Object[]
      description: "Matrice di tipo <xref:System.Object>che rappresenta gli argomenti per il tipo.</xref:System.Object>"
    return:
      type: System.Object
      description: "Un&quot;istanza del tipo specificato con la matrice di argomenti."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CurrentContext
  id: CurrentContext
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Ottiene o imposta l&quot;oggetto corrente <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>, che specifica quando è possibile utilizzare l&quot;oggetto concesso in licenza."
  remarks: "Quando l&quot;utente richiede un valore valido <xref:System.ComponentModel.License>, l&quot;utente deve fornire il contesto in cui il <xref:System.ComponentModel.License>è valido per il <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName>metodo.</xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> </xref:System.ComponentModel.License> </xref:System.ComponentModel.License> Il <xref:System.ComponentModel.LicenseContext>restituita da questa proprietà deve essere passato a tutti i <xref:System.ComponentModel.LicenseProvider>classi.</xref:System.ComponentModel.LicenseProvider> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }
    return:
      type: System.ComponentModel.LicenseContext
      description: "Oggetto <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> che specifica quando è possibile utilizzare l&quot;oggetto concesso in licenza."
  overload: System.ComponentModel.LicenseManager.CurrentContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La proprietà CurrentContext attualmente è bloccata e non può essere modificata."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  id: IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Restituisce se il tipo specificato dispone di una licenza valida."
  syntax:
    content: public static bool IsLicensed (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Per trovare for licenza valida.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il tipo specificato è concesso in licenza; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsLicensed*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  id: IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se può essere concessa una licenza valida per il tipo specificato."
  remarks: "Restituisce il metodo IsValid `true` quando il tipo non è autorizzato o è concesso in licenza e la licenza è valida.       Questo metodo non genera un <xref:System.ComponentModel.LicenseException>quando non è possibile concedere un <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> valido</xref:System.ComponentModel.LicenseException> Il <xref:System.ComponentModel.LicenseManager.Validate%2A>metodo genera eccezioni.</xref:System.ComponentModel.LicenseManager.Validate%2A>"
  syntax:
    content: public static bool IsValid (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Oggetto <xref:System.Type>che rappresenta il tipo di oggetto che richiede il <xref href=&quot;System.ComponentModel.License&quot;> </xref>.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se è possibile concedere una licenza valida; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se può essere concessa una licenza valida per l&quot;istanza del tipo specificato. Questo metodo crea un oggetto valido <xref href=&quot;System.ComponentModel.License&quot;> </xref>."
  remarks: "Il <xref:System.ComponentModel.LicenseManager.IsValid%2A>restituisce `true` quando il `type` parametro non è concesso in licenza o se dispone di licenza e `license` parametro è valido.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Questo metodo non genera un <xref:System.ComponentModel.LicenseException>quando non è possibile concedere un <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> valido</xref:System.ComponentModel.LicenseException> Il <xref:System.ComponentModel.LicenseManager.Validate%2A>metodo genera eccezioni.</xref:System.ComponentModel.LicenseManager.Validate%2A>       Se il `license` parametro non è `null` dopo questa chiamata, l&quot;oggetto che richiede un <xref:System.ComponentModel.License>deve eliminare la licenza chiamando il <xref:System.ComponentModel.License.Dispose%2A>metodo quando l&quot;oggetto viene eliminato o finalizzato.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);
    parameters:
    - id: type
      type: System.Type
      description: "Oggetto <xref:System.Type>che rappresenta il tipo di oggetto che richiede la licenza.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "Un oggetto del tipo specificato o un tipo derivato dal tipo specificato."
    - id: license
      type: System.ComponentModel.License
      description: "Oggetto <xref href=&quot;System.ComponentModel.License&quot;> </xref> che rappresenta una licenza valida o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se non è possibile concedere una licenza valida."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se un oggetto valido <xref href=&quot;System.ComponentModel.License&quot;> </xref> può essere concesso; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  id: LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Impedisce le modifiche apportate all&quot;oggetto corrente <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> dell&quot;oggetto specificato."
  remarks: "Utilizzare il <xref:System.ComponentModel.LicenseContext>per ottenere il <xref:System.ComponentModel.License>di un oggetto.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Questo metodo blocca il <xref:System.ComponentModel.LicenseContext>, impedendo il <xref:System.ComponentModel.License>vengano recuperate.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void LockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "Oggetto il cui contesto corrente si desidera bloccare."
  overload: System.ComponentModel.LicenseManager.LockContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il contesto è già bloccato."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  id: UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Consente di apportare modifiche da apportare ai corrente <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> dell&quot;oggetto specificato."
  remarks: "Utilizzare il <xref:System.ComponentModel.LicenseContext>per ottenere il <xref:System.ComponentModel.License>di un oggetto.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Questo metodo consente di sbloccare il <xref:System.ComponentModel.LicenseContext>, consentendo di <xref:System.ComponentModel.License>da recuperare.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void UnlockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "Oggetto il cui contesto corrente si desidera sbloccare."
  overload: System.ComponentModel.LicenseManager.UnlockContext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contextUser</code>rappresenta un utente diverso da quello specificato in una chiamata precedente a <xref:System.ComponentModel.LicenseManager.LockContext*>."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UsageMode
  id: UsageMode
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Ottiene il <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> che specifica quando è possibile utilizzare l&quot;oggetto concesso in licenza per <xref:System.ComponentModel.LicenseManager.CurrentContext*>.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  remarks: "Se questa proprietà non è stato trovato un <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>valore, viene restituito <xref:System.ComponentModel.LicenseUsageMode>.</xref:System.ComponentModel.LicenseUsageMode> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A>"
  syntax:
    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }
    return:
      type: System.ComponentModel.LicenseUsageMode
      description: "Uno del <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> valori, come specificato nella <xref:System.ComponentModel.LicenseManager.CurrentContext*>proprietà.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  overload: System.ComponentModel.LicenseManager.UsageMode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  id: Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se può essere concessa una licenza per il tipo specificato."
  remarks: "Questo metodo genera un <xref:System.ComponentModel.LicenseException>quando un oggetto valido <xref:System.ComponentModel.License>non può essere concessa.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> Il <xref:System.ComponentModel.LicenseManager.IsValid%2A>metodo non genera un&quot;eccezione.</xref:System.ComponentModel.LicenseManager.IsValid%2A>"
  syntax:
    content: public static void Validate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Oggetto <xref:System.Type>che rappresenta il tipo di oggetto che richiede la licenza.</xref:System.Type>"
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "Oggetto <xref href=&quot;System.ComponentModel.License&quot;> </xref> non può essere concessa."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  id: Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Determina se può essere concessa una licenza per l&quot;istanza del tipo specificato."
  remarks: "Questo metodo genera un <xref:System.ComponentModel.LicenseException>quando un oggetto valido <xref:System.ComponentModel.License>non può essere concessa.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> Il <xref:System.ComponentModel.LicenseManager.IsValid%2A>metodo non genera un&quot;eccezione.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Tutti gli oggetti che richiede un <xref:System.ComponentModel.License>deve eliminare la licenza chiamando il <xref:System.ComponentModel.License.Dispose%2A>metodo quando l&quot;oggetto viene eliminato o finalizzato.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static System.ComponentModel.License Validate (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "Oggetto <xref:System.Type>che rappresenta il tipo di oggetto che richiede la licenza.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "Un <xref:System.Object>del tipo specificato o un tipo derivato dal tipo specificato.</xref:System.Object>"
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "Il tipo è concesso in licenza, ma un <xref href=&quot;System.ComponentModel.License&quot;> </xref> non può essere concessa."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.LicenseException
  parent: System.ComponentModel
  isExternal: false
  name: LicenseException
  nameWithType: LicenseException
  fullName: System.ComponentModel.LicenseException
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.LicenseManager.CurrentContext
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
- uid: System.ComponentModel.LicenseManager.UsageMode
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseUsageMode
  parent: System.ComponentModel
  isExternal: false
  name: LicenseUsageMode
  nameWithType: LicenseUsageMode
  fullName: System.ComponentModel.LicenseUsageMode
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
- uid: System.ComponentModel.LicenseManager.CreateWithContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext
  nameWithType: LicenseManager.CreateWithContext
- uid: System.ComponentModel.LicenseManager.CurrentContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed
  nameWithType: LicenseManager.IsLicensed
- uid: System.ComponentModel.LicenseManager.IsValid*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid
  nameWithType: LicenseManager.IsValid
- uid: System.ComponentModel.LicenseManager.LockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext
  nameWithType: LicenseManager.LockContext
- uid: System.ComponentModel.LicenseManager.UnlockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext
  nameWithType: LicenseManager.UnlockContext
- uid: System.ComponentModel.LicenseManager.UsageMode*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseManager.Validate*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate
  nameWithType: LicenseManager.Validate
