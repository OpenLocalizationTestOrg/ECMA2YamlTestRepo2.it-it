### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionInterop
  id: TransactionInterop
  children:
  - System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)
  - System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])
  - System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  - System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])
  - System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])
  - System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)
  - System.Transactions.TransactionInterop.GetWhereabouts
  - System.Transactions.TransactionInterop.PromoterTypeDtc
  langs:
  - csharp
  name: TransactionInterop
  nameWithType: TransactionInterop
  fullName: System.Transactions.TransactionInterop
  type: Class
  summary: "Facilita l&quot;interazione tra <xref href=&quot;System.Transactions&quot;> </xref> e componenti che sono stati precedentemente scritti per interagire con MSDTC, COM+, o <xref href=&quot;System.EnterpriseServices&quot;> </xref>. Questa classe non può essere ereditata."
  remarks: "Questa classe fornisce metodi per la propagazione della transazione. Per ulteriori informazioni sul funzionamento di questo processo, vedere [la propagazione della transazione](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/b09541e6-4baf-4e37-b879-62884fbb0969.asp).       Usando i metodi forniti da questa classe, è possibile utilizzare due tipi propagazioni delle transazioni: importazione/esportazione (modello push) e tipo trasmettitore/ricevitore (modello pull).       La propagazione di esportazione/importazione (modello push) implica questi passaggi: 1.  Nel computer remoto, ottenere il &quot;whereabouts&quot; della gestione delle transazioni della macchina in questione chiamando il <xref:System.Transactions.TransactionInterop.GetWhereabouts%2A>metodo.</xref:System.Transactions.TransactionInterop.GetWhereabouts%2A> È quindi possibile memorizzare nella cache questa informazione sul computer client per l&quot;utilizzo futuro.      2.  Inviare i dati contenenti il whereabouts del servizio nel computer client utilizzando il metodo desiderato 3.  Nel computer client, utilizzare l&quot;oggetto whereabouts per &quot;Esporta&quot; della transazione al computer remoto e genera una transazione &quot;cookie&quot;.  Questa operazione viene eseguita chiamando <xref:System.Transactions.TransactionInterop.GetExportCookie%2A>e passando il whereabouts del computer remoto.</xref:System.Transactions.TransactionInterop.GetExportCookie%2A>      4.  Inviare i dati che contiene la transazione &quot;cookie&quot; nel computer remoto utilizzando il metodo desiderato 5.  Nel computer remoto, utilizzare la transazione &quot;cookie&quot; per ottenere un duplicato della transazione del client mediante la chiamata di <xref:System.Transactions.TransactionInterop.GetTransactionFromExportCookie%2A>metodo.</xref:System.Transactions.TransactionInterop.GetTransactionFromExportCookie%2A>      6.  Nel computer remoto, utilizzare la transazione duplicata per integrare la gestione di risorse utilizzando <xref:System.Transactions.Transaction.EnlistVolatile%2A>o <xref:System.Transactions.Transaction.EnlistDurable%2A>i metodi della <xref:System.Transactions.Transaction>classe.</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.EnlistDurable%2A> </xref:System.Transactions.Transaction.EnlistVolatile%2A>       La propagazione di tipo trasmettitore/ricevitore (modello pull) implica questi passaggi, - nel computer client, utilizzando la transazione genera un corrispondente &quot;token di propagazione&quot; chiamando <xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A>- inviare i dati che contiene il &quot;token di propagazione&quot; della transazione al computer remoto utilizzando il metodo desiderato - nel computer remoto, utilizzare il token di propagazione&quot;&quot; per ottenere un duplicato del client transazione chiamando il modello di tipo trasmettitore/ricevitore <xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A>offre prestazioni migliori in scenari in cui il token di transazione viene inviato a un computer remoto , ma il computer remoto potrebbe non usarlo per ottenere la transazione.</xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A> </xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A>  In questo modo la transazione non è propagata fino a quando <xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A>viene chiamato.</xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A> Un altro vantaggio è che sia possibile inviare il token di propagazione a qualsiasi computer remoto, mentre il cookie di esportazione può essere utilizzato solo nel computer che ha fornito il whereabouts del servizio.       Tuttavia, notare inoltre che l&quot;oggetto whereabouts dei gestori delle transazioni remoto vengono incapsulati in tutti i token di propagazione, rendendoli maggiore i cookie della transazione corrispondente dal modello di esportazione/importazione.       **Nota** questo tipo utilizza <xref:System.Security.Permissions.SecurityAction>per evitare che venga chiamato da codice non attendibile; tuttavia, solo il chiamante immediato è necessario disporre di `FullTrust` set di autorizzazioni.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static class TransactionInterop
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)
  id: GetDtcTransaction(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetDtcTransaction(Transaction)
  nameWithType: TransactionInterop.GetDtcTransaction(Transaction)
  fullName: System.Transactions.TransactionInterop.GetDtcTransaction(Transaction)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Ottiene un <xref href=&quot;System.Transactions.IDtcTransaction&quot;> </xref> istanza che rappresenta un <xref href=&quot;System.Transactions.Transaction&quot;> </xref>."
  syntax:
    content: public static System.Transactions.IDtcTransaction GetDtcTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "Oggetto <xref href=&quot;System.Transactions.Transaction&quot;> </xref> istanza deve essere sottoposto a marshalling."
    return:
      type: System.Transactions.IDtcTransaction
      description: "Un <xref href=&quot;System.Transactions.IDtcTransaction&quot;> </xref> istanza che rappresenta un <xref href=&quot;System.Transactions.Transaction&quot;> </xref>.  Il <xref href=&quot;System.Transactions.IDtcTransaction&quot;> </xref> istanza è compatibile con la forma non gestita di [ITransaction](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/d40264be-f9b2-4044-aac6-84b43e5be666.asp) utilizzato da MSDTC e con il modulo gestito di <xref href=&quot;System.EnterpriseServices.ITransaction&quot;> </xref> utilizzato da <xref href=&quot;System.EnterpriseServices&quot;> </xref>."
  overload: System.Transactions.TransactionInterop.GetDtcTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])
  id: GetExportCookie(System.Transactions.Transaction,System.Byte[])
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetExportCookie(Transaction,Byte[])
  nameWithType: TransactionInterop.GetExportCookie(Transaction,Byte[])
  fullName: System.Transactions.TransactionInterop.GetExportCookie(Transaction,Byte[])
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Trasforma un oggetto di transazione in un cookie della transazione di esportazione."
  remarks: "Chiamare questo metodo se si desidera esportare una transazione. Il `transaction` passato viene sottoposta a marshalling in un cookie della transazione. È quindi possibile inviare il cookie della transazione per il processo di destinazione. Ciò è detto propagazione della transazione tra processi o sistemi. La propagazione è considerata un modello push in cui la transazione locale viene inserita nella destinazione.  Pertanto, le informazioni contenute in `whereabouts` deve descrivere il gestore delle transazioni di destinazione.       Per ulteriori informazioni su diversi modelli di propagazione, vedere la sezione Note della <xref:System.Transactions.TransactionInterop>classe.</xref:System.Transactions.TransactionInterop>"
  syntax:
    content: public static byte[] GetExportCookie (System.Transactions.Transaction transaction, byte[] whereabouts);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "Il <xref href=&quot;System.Transactions.Transaction&quot;> </xref> oggetto deve essere sottoposto a marshalling."
    - id: whereabouts
      type: System.Byte[]
      description: "Un indirizzo che descrive il percorso di destinazione del gestore delle transazioni. In tal modo due gestori delle transazioni per comunicare tra loro e propagare una transazione da un sistema a altro."
    return:
      type: System.Byte[]
      description: "Un cookie della transazione di esportazione che rappresenta il parametro <xref href=&quot;System.Transactions.Transaction&quot;> </xref> oggetto."
  overload: System.Transactions.TransactionInterop.GetExportCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  id: GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransactionFromDtcTransaction(IDtcTransaction)
  nameWithType: TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
  fullName: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Genera un <xref href=&quot;System.Transactions.Transaction&quot;> </xref> da un oggetto specificato <xref href=&quot;System.Transactions.IDtcTransaction&quot;> </xref>."
  remarks: "Il `transactionNative` è compatibile con la forma non gestita di [ITransaction](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/d40264be-f9b2-4044-aac6-84b43e5be666.asp) utilizzato da MSDTC e con il modulo gestito di <xref:System.EnterpriseServices.ITransaction>utilizzata da <xref:System.EnterpriseServices>.</xref:System.EnterpriseServices> </xref:System.EnterpriseServices.ITransaction>"
  syntax:
    content: public static System.Transactions.Transaction GetTransactionFromDtcTransaction (System.Transactions.IDtcTransaction transactionNative);
    parameters:
    - id: transactionNative
      type: System.Transactions.IDtcTransaction
      description: "Il <xref href=&quot;System.Transactions.IDtcTransaction&quot;> </xref> oggetto deve essere sottoposto a marshalling."
    return:
      type: System.Transactions.Transaction
      description: "Oggetto <xref href=&quot;System.Transactions.Transaction&quot;> </xref> istanza che rappresenta il dato <xref href=&quot;System.Transactions.IDtcTransaction&quot;> </xref>."
  overload: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])
  id: GetTransactionFromExportCookie(System.Byte[])
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransactionFromExportCookie(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromExportCookie(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(Byte[])
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Genera un <xref href=&quot;System.Transactions.Transaction&quot;> </xref> dall&quot;oggetto specificato un cookie di esportazione."
  remarks: "Per ulteriori informazioni su diversi modelli di propagazione, vedere la sezione Note della <xref:System.Transactions.TransactionInterop>classe.</xref:System.Transactions.TransactionInterop>"
  syntax:
    content: public static System.Transactions.Transaction GetTransactionFromExportCookie (byte[] cookie);
    parameters:
    - id: cookie
      type: System.Byte[]
      description: "Un modulo viene eseguito il marshalling dell&quot;oggetto transazione."
    return:
      type: System.Transactions.Transaction
      description: "Oggetto <xref href=&quot;System.Transactions.Transaction&quot;> </xref> dal cookie di esportazione specificato."
  overload: System.Transactions.TransactionInterop.GetTransactionFromExportCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])
  id: GetTransactionFromTransmitterPropagationToken(System.Byte[])
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransactionFromTransmitterPropagationToken(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Genera un <xref href=&quot;System.Transactions.Transaction&quot;> </xref> istanza dal token di propagazione del trasmettitore specificato."
  remarks: "Questo metodo, insieme con il <xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A>metodo, fornisce funzionalità per la propagazione di &quot;pull&quot;, in cui la transazione è &quot;pull&quot; dal computer remoto quando viene chiamato questo metodo per effettuarne l&quot;unmarshalling.</xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A>       Per ulteriori informazioni su diversi modelli di propagazione, vedere la sezione Note della <xref:System.Transactions.TransactionInterop>classe.</xref:System.Transactions.TransactionInterop>"
  syntax:
    content: public static System.Transactions.Transaction GetTransactionFromTransmitterPropagationToken (byte[] propagationToken);
    parameters:
    - id: propagationToken
      type: System.Byte[]
      description: "Un token di propagazione che rappresenta una transazione."
    return:
      type: System.Transactions.Transaction
      description: "Oggetto <xref href=&quot;System.Transactions.Transaction&quot;> </xref> dal token di propagazione del trasmettitore specificato."
  overload: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken*
  exceptions:
  - type: System.Transactions.TransactionManagerCommunicationException
    commentId: T:System.Transactions.TransactionManagerCommunicationException
    description: "La deserializzazione di una transazione non riesce perché non è possibile contattare il gestore delle transazioni. Potrebbe dipendere dalle impostazioni di firewall o di sicurezza di rete."
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)
  id: GetTransmitterPropagationToken(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransmitterPropagationToken(Transaction)
  nameWithType: TransactionInterop.GetTransmitterPropagationToken(Transaction)
  fullName: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(Transaction)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Genera un token di propagazione per l&quot;oggetto specificato <xref href=&quot;System.Transactions.Transaction&quot;> </xref>."
  syntax:
    content: public static byte[] GetTransmitterPropagationToken (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "Una transazione di cui effettuare il marshalling in un token di propagazione."
    return:
      type: System.Byte[]
      description: "Questo metodo, insieme con il <xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken*>(metodo), forniscono funzionalità per la propagazione di tipo trasmettitore/ricevitore in cui la transazione è &quot;pull&quot; dal computer remoto quando viene chiamato il secondo metodo per effettuarne l&quot;unmarshalling.</xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken*>       Per ulteriori informazioni su diversi modelli di propagazione, vedere la sezione Note del <xref href=&quot;System.Transactions.TransactionInterop&quot;> </xref> classe."
  overload: System.Transactions.TransactionInterop.GetTransmitterPropagationToken*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetWhereabouts
  id: GetWhereabouts
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetWhereabouts()
  nameWithType: TransactionInterop.GetWhereabouts()
  fullName: System.Transactions.TransactionInterop.GetWhereabouts()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Ottiene il whereabouts del servizio di gestione transazioni distribuite che <xref href=&quot;System.Transactions&quot;> </xref> utilizza."
  remarks: "Whereabouts del servizio contiene un indirizzo che descrive il percorso di un gestore delle transazioni. In tal modo due gestori delle transazioni per comunicare tra loro e propagare una transazione da un sistema a altro. Le informazioni restituite da questo metodo possono essere utilizzate per fornire informazioni sul percorso per la propagazione della transazione modello push con il <xref:System.Transactions.TransactionInterop.GetExportCookie%2A>metodo.</xref:System.Transactions.TransactionInterop.GetExportCookie%2A>       Per ulteriori informazioni su diversi modelli di propagazione, vedere la sezione Note della <xref:System.Transactions.TransactionInterop>classe.</xref:System.Transactions.TransactionInterop>"
  syntax:
    content: public static byte[] GetWhereabouts ();
    parameters: []
    return:
      type: System.Byte[]
      description: "Whereabouts del servizio di gestione transazioni distribuite che <xref href=&quot;System.Transactions&quot;> </xref> utilizza."
  overload: System.Transactions.TransactionInterop.GetWhereabouts*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.PromoterTypeDtc
  id: PromoterTypeDtc
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: PromoterTypeDtc
  nameWithType: TransactionInterop.PromoterTypeDtc
  fullName: System.Transactions.TransactionInterop.PromoterTypeDtc
  type: Field
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Tipo di elaborazione delle transazioni distribuite."
  remarks: "Questo valore viene utilizzato per il `Transaction.PromoterType` proprietà se la transazione viene o verrà alzata di livello a MSDTC e `Transaction.GetPromotedToken` metodo verrà restituito un token di propagazione della transazione MSDTC per il `byte[]` risultato."
  syntax:
    content: public static readonly Guid PromoterTypeDtc;
    return:
      type: System.Guid
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Transactions.TransactionManagerCommunicationException
  parent: System.Transactions
  isExternal: false
  name: TransactionManagerCommunicationException
  nameWithType: TransactionManagerCommunicationException
  fullName: System.Transactions.TransactionManagerCommunicationException
- uid: System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetDtcTransaction(Transaction)
  nameWithType: TransactionInterop.GetDtcTransaction(Transaction)
  fullName: System.Transactions.TransactionInterop.GetDtcTransaction(Transaction)
- uid: System.Transactions.IDtcTransaction
  parent: System.Transactions
  isExternal: false
  name: IDtcTransaction
  nameWithType: IDtcTransaction
  fullName: System.Transactions.IDtcTransaction
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetExportCookie(Transaction,Byte[])
  nameWithType: TransactionInterop.GetExportCookie(Transaction,Byte[])
  fullName: System.Transactions.TransactionInterop.GetExportCookie(Transaction,Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromDtcTransaction(IDtcTransaction)
  nameWithType: TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
  fullName: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
- uid: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromExportCookie(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromExportCookie(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(Byte[])
- uid: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromTransmitterPropagationToken(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
- uid: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransmitterPropagationToken(Transaction)
  nameWithType: TransactionInterop.GetTransmitterPropagationToken(Transaction)
  fullName: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(Transaction)
- uid: System.Transactions.TransactionInterop.GetWhereabouts
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetWhereabouts()
  nameWithType: TransactionInterop.GetWhereabouts()
  fullName: System.Transactions.TransactionInterop.GetWhereabouts()
- uid: System.Transactions.TransactionInterop.PromoterTypeDtc
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: PromoterTypeDtc
  nameWithType: TransactionInterop.PromoterTypeDtc
  fullName: System.Transactions.TransactionInterop.PromoterTypeDtc
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Transactions.TransactionInterop.GetDtcTransaction*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetDtcTransaction
  nameWithType: TransactionInterop.GetDtcTransaction
- uid: System.Transactions.TransactionInterop.GetExportCookie*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetExportCookie
  nameWithType: TransactionInterop.GetExportCookie
- uid: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromDtcTransaction
  nameWithType: TransactionInterop.GetTransactionFromDtcTransaction
- uid: System.Transactions.TransactionInterop.GetTransactionFromExportCookie*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromExportCookie
  nameWithType: TransactionInterop.GetTransactionFromExportCookie
- uid: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromTransmitterPropagationToken
  nameWithType: TransactionInterop.GetTransactionFromTransmitterPropagationToken
- uid: System.Transactions.TransactionInterop.GetTransmitterPropagationToken*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransmitterPropagationToken
  nameWithType: TransactionInterop.GetTransmitterPropagationToken
- uid: System.Transactions.TransactionInterop.GetWhereabouts*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetWhereabouts
  nameWithType: TransactionInterop.GetWhereabouts
