### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.FileSecurity
  id: FileSecurity
  children:
  - System.Security.AccessControl.FileSecurity.#ctor
  - System.Security.AccessControl.FileSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  langs:
  - csharp
  name: FileSecurity
  nameWithType: FileSecurity
  fullName: System.Security.AccessControl.FileSecurity
  type: Class
  summary: "Rappresenta il controllo di accesso e sicurezza per un file di controllo. Questa classe non può essere ereditata."
  remarks: "La classe FileSecurity specifica i diritti di accesso per un file di sistema e come controllare i tentativi di accesso.  Questa classe rappresenta i diritti di accesso e controllo come un set di regole. Ogni regola di accesso è rappresentato da un <xref:System.Security.AccessControl.FileSystemAccessRule>dell&quot;oggetto, mentre ogni regola è rappresentata da un <xref:System.Security.AccessControl.FileSystemAuditRule>oggetto.</xref:System.Security.AccessControl.FileSystemAuditRule> </xref:System.Security.AccessControl.FileSystemAccessRule>       La classe FileSecurity è un&quot;astrazione del sistema di sicurezza file di Microsoft Windows sottostante. In questo sistema, ogni file include un elenco di controllo di accesso discrezionale (DACL), che controlla l&quot;accesso al file e un elenco di controllo di accesso di sistema (SACL), che specifica i tentativi di accesso da controllare.  Il <xref:System.Security.AccessControl.FileSystemAccessRule>e <xref:System.Security.AccessControl.FileSystemAuditRule>classi sono astrazioni delle voci di controllo di accesso (ACE) che comprendono DACL e SACL.</xref:System.Security.AccessControl.FileSystemAuditRule> </xref:System.Security.AccessControl.FileSystemAccessRule>       La classe FileSecurity nasconde molti dettagli degli elenchi DACL e SACL; non è necessario preoccuparsi ACE ordinamento o DACL null.       Utilizzare la classe FileSecurity per recuperare, aggiungere o modificare le regole di accesso che rappresentano gli elenchi DACL e SACL di un file.       Per mantenere l&quot;accesso a nuova o modificata o le regole in un file di controllo, utilizzare il <xref:System.IO.FileInfo.SetAccessControl%2A>metodo.</xref:System.IO.FileInfo.SetAccessControl%2A> Per recuperare l&quot;accesso o controllare le regole da un file esistente, utilizzare il <xref:System.IO.FileInfo.GetAccessControl%2A>metodo.</xref:System.IO.FileInfo.GetAccessControl%2A>"
  example:
  - "The following code example uses the FileSecurity class to add and then remove an access control list (ACL) entry from a file.  You must supply a valid user or group account to run this example.  \n  \n [!code-cs[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/t-system.security.access_2_1.cs)]\n [!code-vb[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/t-system.security.access_2_1.vb)]\n [!code-cpp[IO.File.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/t-system.security.access_2_1.cpp)]"
  syntax:
    content: 'public sealed class FileSecurity : System.Security.AccessControl.FileSystemSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  - System.Security.AccessControl.FileSystemSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.FileSystemSecurity.AccessRightType
  - System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.FileSystemSecurity.AccessRuleType
  - System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.FileSystemSecurity.AuditRuleType
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.FileSecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.FileSecurity
  langs:
  - csharp
  name: FileSecurity()
  nameWithType: FileSecurity.FileSecurity()
  fullName: System.Security.AccessControl.FileSecurity.FileSecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref> classe."
  remarks: "Utilizzare questo costruttore quando si desidera creare un oggetto vuoto <xref:System.Security.AccessControl.FileSecurity>oggetto che non si basa su un file esistente.</xref:System.Security.AccessControl.FileSecurity>  È quindi possibile popolare l&quot;oggetto con informazioni sul controllo di accesso e applicarlo a un file.       È possibile aggiungere l&quot;accesso o regole di controllo di <xref:System.Security.AccessControl.FileSecurity>utilizzando il <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A>metodo.</xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A> </xref:System.Security.AccessControl.FileSecurity> È possibile rimuovere l&quot;accesso o utilizzando le regole di controllo di <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A>metodo.</xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A>       Per mantenere l&quot;accesso a nuova o modificata o le regole in un file di controllo, utilizzare il <xref:System.IO.File.SetAccessControl%2A>o <xref:System.IO.FileInfo.SetAccessControl%2A>metodo.</xref:System.IO.FileInfo.SetAccessControl%2A> </xref:System.IO.File.SetAccessControl%2A>  Per recuperare l&quot;accesso o controllare le regole da un file esistente, utilizzare il <xref:System.IO.File.GetAccessControl%2A>o <xref:System.IO.FileInfo.GetAccessControl%2A>metodo.</xref:System.IO.FileInfo.GetAccessControl%2A> </xref:System.IO.File.GetAccessControl%2A>"
  syntax:
    content: public FileSecurity ();
    parameters: []
  overload: System.Security.AccessControl.FileSecurity.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Il sistema operativo corrente non è Microsoft Windows 2000 o versioni successive."
  platform:
  - net462
- uid: System.Security.AccessControl.FileSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'
  parent: System.Security.AccessControl.FileSecurity
  langs:
  - csharp
  name: FileSecurity(String,AccessControlSections)
  nameWithType: FileSecurity.FileSecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.FileSecurity.FileSecurity(String,AccessControlSections)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref> classe da un file specificato utilizzando i valori specificati del <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> enumerazione."
  remarks: "Questo costruttore consente di recuperare le informazioni sul controllo di accesso per il file specificato e crea quindi un <xref:System.Security.AccessControl.FileSecurity>oggetto che incapsula le informazioni.</xref:System.Security.AccessControl.FileSecurity>  È quindi possibile controllare, aggiungere o eliminare le informazioni di controllo di accesso per il file specificato.       È possibile aggiungere l&quot;accesso o regole di controllo di <xref:System.Security.AccessControl.FileSecurity>utilizzando il <xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A>metodo.</xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A> </xref:System.Security.AccessControl.FileSecurity> È possibile rimuovere l&quot;accesso o utilizzando le regole di controllo di <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A>metodo.</xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A>       Per mantenere l&quot;accesso a nuova o modificata o le regole in un file di controllo, utilizzare il <xref:System.IO.File.SetAccessControl%2A>o <xref:System.IO.FileInfo.SetAccessControl%2A>metodo.</xref:System.IO.FileInfo.SetAccessControl%2A> </xref:System.IO.File.SetAccessControl%2A>  Per recuperare l&quot;accesso o controllare le regole da un file esistente, utilizzare il <xref:System.IO.File.GetAccessControl%2A>o <xref:System.IO.FileInfo.GetAccessControl%2A>metodo.</xref:System.IO.FileInfo.GetAccessControl%2A> </xref:System.IO.File.GetAccessControl%2A>"
  syntax:
    content: public FileSecurity (string fileName, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: fileName
      type: System.String
      description: "Il percorso di un file per creare un <xref href=&quot;System.Security.AccessControl.FileSecurity&quot;> </xref> dall&quot;oggetto."
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "Uno del <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> valori che specifica il tipo di accesso controllo informazioni elenco (ACL) da recuperare."
  overload: System.Security.AccessControl.FileSecurity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> fileName </code> parametro è una stringa di lunghezza zero, contiene solo spazi vuoti o contiene uno o più caratteri non validi definiti da <xref:System.IO.Path.InvalidPathChars>.</xref:System.IO.Path.InvalidPathChars>"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Il percorso specificato è valido (ad esempio, si trova in un&quot;unità non mappata)."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Il file specificato nella <code> fileName </code> parametro non è stato trovato."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Si è verificato un errore dei / o durante l&quot;apertura del file."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>è in formato non valido."
  - type: System.Runtime.InteropServices.SEHException
    commentId: T:System.Runtime.InteropServices.SEHException
    description: "The <code>fileName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Il sistema operativo corrente non è Microsoft Windows 2000 o versioni successive."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Il percorso specificato, nome del file o entrambi superano la lunghezza massima definita dal sistema. Ad esempio, nelle piattaforme basate su Windows, i percorsi devono contenere meno di 248 caratteri e i nomi di file devono essere meno di 260 caratteri."
  - type: System.Security.AccessControl.PrivilegeNotHeldException
    commentId: T:System.Security.AccessControl.PrivilegeNotHeldException
    description: "L&quot;account di sistema corrente non dispone di privilegi amministrativi."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Non è stato possibile trovare il file."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Il <code> fileName </code> parametro specifica un file è di sola lettura.       - oppure - questa operazione non è supportata sulla piattaforma corrente.       - o - <code> fileName </code> parametro ha specificato una directory.       oppure il chiamante non dispone dell&quot;autorizzazione richiesta."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.FileSystemSecurity
  isExternal: false
  name: System.Security.AccessControl.FileSystemSecurity
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Runtime.InteropServices.SEHException
  isExternal: true
  name: System.Runtime.InteropServices.SEHException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.Security.AccessControl.PrivilegeNotHeldException
  parent: System.Security.AccessControl
  isExternal: false
  name: PrivilegeNotHeldException
  nameWithType: PrivilegeNotHeldException
  fullName: System.Security.AccessControl.PrivilegeNotHeldException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.Security.AccessControl.FileSecurity.#ctor
  parent: System.Security.AccessControl.FileSecurity
  isExternal: false
  name: FileSecurity()
  nameWithType: FileSecurity.FileSecurity()
  fullName: System.Security.AccessControl.FileSecurity.FileSecurity()
- uid: System.Security.AccessControl.FileSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.FileSecurity
  isExternal: false
  name: FileSecurity(String,AccessControlSections)
  nameWithType: FileSecurity.FileSecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.FileSecurity.FileSecurity(String,AccessControlSections)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.Security.AccessControl.FileSecurity.#ctor*
  parent: System.Security.AccessControl.FileSecurity
  isExternal: false
  name: FileSecurity
  nameWithType: FileSecurity.FileSecurity
