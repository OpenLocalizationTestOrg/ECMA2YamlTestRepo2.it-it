### YamlMime:ManagedReference
items:
- uid: System.Collections.SortedList
  id: SortedList
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
  type: Class
  summary: "Rappresenta una raccolta di coppie chiave/valore sono ordinate per chiave e accessibili per chiave e per indice."
  remarks: "Per la versione generica di questa raccolta, vedere <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>.</xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>       Un elemento SortedList è possibile accedere tramite la relativa chiave, ad esempio un elemento in qualsiasi <xref:System.Collections.IDictionary>implementazione, o dal relativo indice, ad esempio un elemento in qualsiasi <xref:System.Collections.IList>implementazione.</xref:System.Collections.IList> </xref:System.Collections.IDictionary>       Un oggetto SortedList gestisce internamente due matrici per archiviare gli elementi dell&quot;elenco. vale a dire, una singola matrice per le chiavi e un&quot;altra matrice per i valori associati. Ogni elemento è una coppia chiave/valore che è possibile accedere come un <xref:System.Collections.DictionaryEntry>oggetto.</xref:System.Collections.DictionaryEntry> Non può essere una chiave `null`, ma può essere un valore.       La capacità di un oggetto SortedList è il numero di elementi che di SortedList può contenere. Se gli elementi vengono aggiunti a una SortedList, la capacità viene aumentata automaticamente in base alle necessità, tramite riallocazione. È possibile diminuire la capacità chiamando <xref:System.Collections.SortedList.TrimToSize%2A>o impostando la <xref:System.Collections.SortedList.Capacity%2A>proprietà in modo esplicito.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A>       Per gli oggetti SortedList molto grandi, è possibile aumentare la capacità massima a 2 miliardi di elementi in un sistema a 64 bit impostando il `enabled` attributo dell&quot;elemento di configurazione per `true` nell&quot;ambiente di runtime.       Vengono ordinati gli elementi di un oggetto SortedList alle chiavi secondo un&quot; <xref:System.Collections.IComparer>specificata quando viene creata il SortedList o in base all&quot;implementazione di <xref:System.IComparable>implementazione fornita dalle chiavi stesse.</xref:System.IComparable> </xref:System.Collections.IComparer> In entrambi i casi, una SortedList non consentono chiavi duplicate.       La sequenza di indice si basa sulla sequenza di ordinamento. Quando si aggiunge un elemento, viene inserito nella SortedList nell&quot;ordinamento corretto e l&quot;indicizzazione si adegua di conseguenza. Quando un elemento viene rimosso, l&quot;indicizzazione anche si adegua di conseguenza. Pertanto, l&quot;indice di una coppia chiave/valore specifica potrebbe cambiare come gli elementi vengono aggiunti o rimossi dall&quot;oggetto SortedList.       Operazioni su un oggetto SortedList tendono a essere più lente delle operazioni su un <xref:System.Collections.Hashtable>oggetto a causa dell&quot;ordinamento.</xref:System.Collections.Hashtable> Tuttavia, la classe SortedList offre maggiore flessibilità consentendo l&quot;accesso ai valori delle chiavi associate o mediante gli indici.       Elementi nella raccolta è accessibile tramite un indice intero.  Gli indici in questa raccolta sono in base zero.       Il `foreach` istruzione del linguaggio c# (`for each` in Visual Basic) restituisce un oggetto di tipo degli elementi nella raccolta. Poiché ogni elemento dell&quot;oggetto SortedList è una coppia chiave/valore, il tipo di elemento non è il tipo della chiave o il tipo del valore. Invece, il tipo di elemento è <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Ad esempio: [!code-cpp [classico SortedList esempio n.&2;](~/add/codesnippet/cpp/t-system.collections.sor_1.cpp)][!code-cs[classico SortedList esempio n.&2;](~/add/codesnippet/csharp/t-system.collections.sor_1.cs)][!code-vb[classico SortedList esempio n.&2;](~/add/codesnippet/visualbasic/t-system.collections.sor_1.vb) ] il `foreach` istruzione è un wrapper per l&quot;enumeratore, che consente solo di leggere da, non la scrittura, la raccolta.    "
  example:
  - "The following code example shows how to create and initialize a SortedList object and how to print out its keys and values.  \n  \n [!code-cpp[Classic SortedList Example#1](~/add/codesnippet/cpp/t-system.collections.sor_2.cpp)]\n [!code-cs[Classic SortedList Example#1](~/add/codesnippet/csharp/t-system.collections.sor_2.cs)]\n [!code-vb[Classic SortedList Example#1](~/add/codesnippet/visualbasic/t-system.collections.sor_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortedList : ICloneable, System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza del <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe che è vuota, ha la capacità iniziale predefinita ed è ordinata in base al <xref:System.IComparable>interfaccia implementata da ciascuna chiave aggiunta al <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.</xref:System.IComparable>"
  remarks: "Ogni chiave deve implementare il <xref:System.IComparable>interfaccia devono essere in grado di eseguire confronti con ogni altra chiave di <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList> </xref:System.IComparable> Gli elementi vengono ordinati in base all&quot; <xref:System.IComparable>implementazione di ciascuna chiave aggiunta a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       La capacità di un <xref:System.Collections.SortedList>oggetto è il numero di elementi che la <xref:System.Collections.SortedList>può contenere.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Quando gli elementi vengono aggiunti a un <xref:System.Collections.SortedList>, incrementata automaticamente come richiesto tramite la riallocazione della matrice interna.</xref:System.Collections.SortedList>       Se è possibile stimare le dimensioni della raccolta, specificando la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       Questo costruttore è un&quot;operazione o (1)."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_7_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_7_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_7_1.cpp)]"
  syntax:
    content: public SortedList ();
    parameters: []
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe che è vuota, ha la capacità iniziale predefinita ed è ordinata in base alle specificato <xref:System.Collections.IComparer>interfaccia.</xref:System.Collections.IComparer>"
  remarks: "Gli elementi vengono ordinati in base alle specificato <xref:System.Collections.IComparer>implementazione.</xref:System.Collections.IComparer> Se il `comparer` parametro è `null`, <xref:System.IComparable>l&quot;implementazione di ogni chiave è utilizzato; pertanto, ogni chiave deve implementare il <xref:System.IComparable>interfaccia devono essere in grado di eseguire confronti con ogni altra chiave il <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       La capacità di un <xref:System.Collections.SortedList>oggetto è il numero di elementi che la <xref:System.Collections.SortedList>può contenere.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Quando gli elementi vengono aggiunti a un <xref:System.Collections.SortedList>, incrementata automaticamente come richiesto tramite la riallocazione della matrice interna.</xref:System.Collections.SortedList>       Se è possibile stimare le dimensioni della raccolta, specificando la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       Questo costruttore è un&quot;operazione o (1)."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_18_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_18_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_18_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>implementazione da usare quando si confrontano le chiavi.</xref:System.Collections.IComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare il <xref:System.IComparable>implementazione di ciascuna chiave.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe che contiene gli elementi copiati dal dizionario specificato, ha la stessa capacità iniziale come numero di elementi copiati ed è ordinata in base al <xref:System.IComparable>interfaccia implementata da ciascuna chiave.</xref:System.IComparable>"
  remarks: "Ogni chiave deve implementare il <xref:System.IComparable>interfaccia devono essere in grado di eseguire confronti con ogni altra chiave di <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList> </xref:System.IComparable> Gli elementi vengono ordinati in base all&quot; <xref:System.IComparable>implementazione di ciascuna chiave aggiunta a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       Oggetto <xref:System.Collections.Hashtable>oggetto è un esempio di un <xref:System.Collections.IDictionary>implementazione che può essere passato al costruttore.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> Il nuovo <xref:System.Collections.SortedList>oggetto contiene una copia delle chiavi e valori archiviati in <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.SortedList>       La capacità di un <xref:System.Collections.SortedList>oggetto è il numero di elementi che la <xref:System.Collections.SortedList>può contenere.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Quando gli elementi vengono aggiunti a un <xref:System.Collections.SortedList>, incrementata automaticamente come richiesto tramite la riallocazione della matrice interna.</xref:System.Collections.SortedList>       Se è possibile stimare le dimensioni della raccolta, specificando la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi in `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.sor_9_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.sor_9_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.sor_9_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "Il <xref:System.Collections.IDictionary>implementazione da copiare in un nuovo <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.</xref:System.Collections.IDictionary>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Uno o più elementi in <code> d </code> non implementano il <xref:System.IComparable>interfaccia.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza del <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe che è vuota, ha la capacità iniziale specificata ed è ordinata in base al <xref:System.IComparable>interfaccia implementata da ciascuna chiave aggiunta al <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.</xref:System.IComparable>"
  remarks: "Ogni chiave deve implementare il <xref:System.IComparable>interfaccia devono essere in grado di eseguire confronti con ogni altra chiave di <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList> </xref:System.IComparable> Gli elementi vengono ordinati in base all&quot; <xref:System.IComparable>implementazione di ciascuna chiave aggiunta a <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       La capacità di un <xref:System.Collections.SortedList>oggetto è il numero di elementi che la <xref:System.Collections.SortedList>può contenere.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Quando gli elementi vengono aggiunti a un <xref:System.Collections.SortedList>, incrementata automaticamente come richiesto tramite la riallocazione della matrice interna.</xref:System.Collections.SortedList>       Se è possibile stimare le dimensioni della raccolta, specificando la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è `initialCapacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.sor_15_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.sor_15_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.sor_15_1.cpp)]"
  syntax:
    content: public SortedList (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "Il numero iniziale di elementi che la <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto può contenere."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>initialCapacity</code>è minore di zero."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Non è disponibile memoria sufficiente per creare un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto con l&quot;oggetto specificato <code> initialCapacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe che è vuota, ha la capacità iniziale specificata ed è ordinata in base alle specificato <xref:System.Collections.IComparer>interfaccia.</xref:System.Collections.IComparer>"
  remarks: "Gli elementi vengono ordinati in base alle specificato <xref:System.Collections.IComparer>implementazione.</xref:System.Collections.IComparer> Se il `comparer` parametro è `null`, <xref:System.IComparable>l&quot;implementazione di ogni chiave è utilizzato; pertanto, ogni chiave deve implementare il <xref:System.IComparable>interfaccia devono essere in grado di eseguire confronti con ogni altra chiave il <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       La capacità di un <xref:System.Collections.SortedList>oggetto è il numero di elementi che la <xref:System.Collections.SortedList>può contenere.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Quando gli elementi vengono aggiunti a un <xref:System.Collections.SortedList>, incrementata automaticamente come richiesto tramite la riallocazione della matrice interna.</xref:System.Collections.SortedList>       Se è possibile stimare le dimensioni della raccolta, specificando la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è `capacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/1806b376-56fc-45e2-aff7-_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/1806b376-56fc-45e2-aff7-_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/1806b376-56fc-45e2-aff7-_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer, int capacity);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>implementazione da usare quando si confrontano le chiavi.</xref:System.Collections.IComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare il <xref:System.IComparable>implementazione di ciascuna chiave.</xref:System.IComparable>"
    - id: capacity
      type: System.Int32
      description: "Il numero iniziale di elementi che la <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto può contenere."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>è minore di zero."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Non è disponibile memoria sufficiente per creare un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto con l&quot;oggetto specificato <code> capacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.SortedList&quot;> </xref> classe che contiene gli elementi copiati dal dizionario specificato, ha la stessa capacità iniziale come numero di elementi copiati ed è ordinata in base alle specificato <xref:System.Collections.IComparer>interfaccia.</xref:System.Collections.IComparer>"
  remarks: "Gli elementi vengono ordinati in base alle specificato <xref:System.Collections.IComparer>implementazione.</xref:System.Collections.IComparer> Se il `comparer` parametro è `null`, <xref:System.IComparable>l&quot;implementazione di ogni chiave è utilizzato; pertanto, ogni chiave deve implementare il <xref:System.IComparable>interfaccia devono essere in grado di eseguire confronti con ogni altra chiave il <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       Oggetto <xref:System.Collections.Hashtable>oggetto è un esempio di un <xref:System.Collections.IDictionary>implementazione che può essere passato al costruttore.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> Il nuovo <xref:System.Collections.SortedList>oggetto contiene una copia delle chiavi e valori archiviati in <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.SortedList>       La capacità di un <xref:System.Collections.SortedList>oggetto è il numero di elementi che la <xref:System.Collections.SortedList>può contenere.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Quando gli elementi vengono aggiunti a un <xref:System.Collections.SortedList>, incrementata automaticamente come richiesto tramite la riallocazione della matrice interna.</xref:System.Collections.SortedList>       Se è possibile stimare le dimensioni della raccolta, specificando la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi in `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/653e16d8-524e-4544-8674-_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/653e16d8-524e-4544-8674-_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/653e16d8-524e-4544-8674-_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "Il <xref:System.Collections.IDictionary>implementazione da copiare in un nuovo <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.</xref:System.Collections.IDictionary>"
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>implementazione da usare quando si confrontano le chiavi.</xref:System.Collections.IComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare il <xref:System.IComparable>implementazione di ciascuna chiave.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>comparer</code>è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>e uno o più elementi in <code>d</code> non implementano il <xref:System.IComparable> interfaccia."
  platform:
  - net462
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aggiunge un elemento con la chiave specificata e il valore un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "Il punto di inserimento viene determinato in base all&quot;operatore di confronto selezionato, in modo esplicito o per impostazione predefinita, quando il <xref:System.Collections.SortedList>oggetto è stato creato.</xref:System.Collections.SortedList>       Se <xref:System.Collections.SortedList.Count%2A>è già uguale <xref:System.Collections.SortedList.Capacity%2A>, la capacità del <xref:System.Collections.SortedList>oggetto viene aumentato automaticamente la riallocazione della matrice interna e gli elementi esistenti vengono copiati nella nuova matrice prima che venga aggiunto il nuovo elemento.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.Count%2A>       È inoltre possibile utilizzare il <xref:System.Collections.SortedList.Item%2A>proprietà per aggiungere nuovi elementi impostando il valore di una chiave che non esiste nel <xref:System.Collections.SortedList>oggetto (ad esempio, `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Item%2A> Tuttavia, se la chiave specificata esiste già nel <xref:System.Collections.SortedList>, impostando il <xref:System.Collections.SortedList.Item%2A>proprietà sovrascrive il vecchio valore.</xref:System.Collections.SortedList.Item%2A> </xref:System.Collections.SortedList> Al contrario, il metodo Add di non modificare gli elementi esistenti.       Gli elementi di un <xref:System.Collections.SortedList>oggetto sono ordinate per chiave in uno specifico <xref:System.Collections.IComparer>implementazione specificato al momento il <xref:System.Collections.SortedList>viene creato o in base al <xref:System.IComparable>implementazione fornita dalle chiavi stesse.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Non può essere una chiave `null`, ma può essere un valore.       Questo metodo è un&quot;operazione O (`n`) per dati non ordinati, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> È un&quot;operazione O (log `n`) operazione se il nuovo elemento viene aggiunto alla fine dell&quot;elenco. Se l&quot;inserimento comporta un ridimensionamento, l&quot;operazione è O (`n`)."
  example:
  - "The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.sor_4_1.cpp)]\n [!code-vb[Classic SortedList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_4_1.vb)]\n [!code-cs[Classic SortedList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.sor_4_1.cs)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "Chiave dell&quot;elemento da aggiungere."
    - id: value
      type: System.Object
      description: "Il valore dell&quot;elemento da aggiungere. Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Un elemento con la proprietà specificata <code> key </code> contiene già il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.       - o - <xref href=&quot;System.Collections.SortedList&quot;> </xref> è impostato per utilizzare il <xref:System.IComparable>interfaccia e <code> key </code> non implementa il <xref:System.IComparable>interfaccia.</xref:System.IComparable> </xref:System.IComparable>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.SortedList&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.SortedList&quot;> </xref> ha dimensioni fisse."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Non è disponibile memoria sufficiente per aggiungere l&quot;elemento per il <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "L&quot;operatore di confronto genera un&quot;eccezione."
  platform:
  - net462
- uid: System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene o imposta la capacità di un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "Capacità è il numero di elementi che la <xref:System.Collections.SortedList>può archiviare l&quot;oggetto.</xref:System.Collections.SortedList> <xref:System.Collections.SortedList.Count%2A>è il numero di elementi effettivamente contenuti nella <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Count%2A>       Capacità è sempre maggiore di o uguale a <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Se <xref:System.Collections.SortedList.Count%2A>supera la capacità durante l&quot;aggiunta di elementi, la capacità viene aumentata automaticamente tramite la riallocazione della matrice interna prima di copiare gli elementi e aggiunta di nuovi elementi.</xref:System.Collections.SortedList.Count%2A>       È possibile diminuire la capacità chiamando <xref:System.Collections.SortedList.TrimToSize%2A>o impostando la proprietà di capacità in modo esplicito.</xref:System.Collections.SortedList.TrimToSize%2A> Quando il valore di capacità è impostato in modo esplicito, la matrice interna viene riallocata anche per consentire la capacità specificata.       Il recupero del valore di questa proprietà è un&quot;operazione o (1). l&quot;impostazione della proprietà è un&quot;operazione O (`n`) operazione, in cui `n` è la nuova capacità."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Il numero di elementi che la <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto può contenere."
  overload: System.Collections.SortedList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il valore assegnato è inferiore al numero corrente di elementi di <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Non c&quot;è sufficiente memoria disponibile nel sistema."
  platform:
  - net462
- uid: System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove tutti gli elementi da un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "<xref:System.Collections.SortedList.Count%2A>è impostato su zero e vengono rilasciati anche i riferimenti ad altri oggetti da elementi della raccolta.</xref:System.Collections.SortedList.Count%2A>       <xref:System.Collections.SortedList.Capacity%2A>rimane invariato.</xref:System.Collections.SortedList.Capacity%2A> Per reimpostare la capacità del <xref:System.Collections.SortedList>dell&quot;oggetto, chiamare <xref:System.Collections.SortedList.TrimToSize%2A>o impostare il <xref:System.Collections.SortedList.Capacity%2A>proprietà direttamente.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A> </xref:System.Collections.SortedList> L&quot;eliminazione di un oggetto vuoto <xref:System.Collections.SortedList>Imposta la capacità del <xref:System.Collections.SortedList>per la capacità predefinita.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_14_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_14_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_14_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.SortedList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto è di sola lettura.       - o - <xref href=&quot;System.Collections.SortedList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Crea una copia superficiale di un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "Una copia superficiale di un insieme di copia solo gli elementi della raccolta, se sono tipi di riferimento o tipi di valore, ma non copia gli oggetti che fanno riferimento i riferimenti. I riferimenti nella nuova raccolta puntano agli stessi oggetti che puntano i riferimenti nella raccolta originale.       Al contrario, una copia completa di una raccolta copia gli elementi e tutti gli elementi direttamente o indirettamente a cui fa riferimento gli elementi.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Una copia dei riferimenti di <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  overload: System.Collections.SortedList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto contiene una chiave specifica."
  remarks: "Gli elementi di un <xref:System.Collections.SortedList>oggetto sono ordinate per chiave in uno specifico <xref:System.Collections.IComparer>implementazione specificato al momento il <xref:System.Collections.SortedList>viene creato o in base al <xref:System.IComparable>implementazione fornita dalle chiavi stesse.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Contiene implementa <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> Si comporta esattamente come <xref:System.Collections.SortedList.ContainsKey%2A>.</xref:System.Collections.SortedList.ContainsKey%2A>       Questo metodo utilizza un algoritmo di ricerca binario; Pertanto, questo metodo è un&quot;operazione O (log `n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_12_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_12_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Chiave da individuare nel <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto contiene un elemento con la proprietà specificata <code> key </code>; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "L&quot;operatore di confronto genera un&quot;eccezione."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto contiene una chiave specifica."
  remarks: "Gli elementi di un <xref:System.Collections.SortedList>oggetto sono ordinate per chiave in uno specifico <xref:System.Collections.IComparer>implementazione specificato al momento il <xref:System.Collections.SortedList>viene creato o in base al <xref:System.IComparable>implementazione fornita dalle chiavi stesse.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Questo metodo funziona esattamente come il <xref:System.Collections.SortedList.Contains%2A>metodo.</xref:System.Collections.SortedList.Contains%2A>       Questo metodo utilizza un algoritmo di ricerca binario; Pertanto, questo metodo è un&quot;operazione O (log `n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_16_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_16_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_16_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Chiave da individuare nel <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto contiene un elemento con la proprietà specificata <code> key </code>; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "L&quot;operatore di confronto genera un&quot;eccezione."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto contiene un valore specifico."
  remarks: "I valori degli elementi del <xref:System.Collections.SortedList>oggetto vengono confrontati con il valore specificato utilizzando il <xref:System.Object.Equals%2A>metodo.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Questo metodo esegue una ricerca lineare. Pertanto, il tempo medio di esecuzione è proporzionale al <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_0_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_0_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_0_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Il valore da individuare nella <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto. Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto contiene un elemento con la proprietà specificata <code> value </code>; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copie <xref href=&quot;System.Collections.SortedList&quot;> </xref> elementi in un oggetto unidimensionale <xref:System.Array>oggetto, a partire dall&quot;indice specificato della matrice.</xref:System.Array>"
  remarks: "Le coppie chiave/valore vengono copiate il <xref:System.Array>oggetto nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList> </xref:System.Array>       Per copiare solo le chiavi di <xref:System.Collections.SortedList>, utilizzare `SortedList.Keys.CopyTo`.</xref:System.Collections.SortedList>       Per copiare solo i valori di <xref:System.Collections.SortedList>, utilizzare `SortedList.Values.CopyTo`.</xref:System.Collections.SortedList>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.  \n  \n [!code-cs[Classic SortedList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sor_20_1.cs)]\n [!code-cpp[Classic SortedList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sor_20_1.cpp)]\n [!code-vb[Classic SortedList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_20_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "Oggetto unidimensionale <xref:System.Array>oggetto che rappresenta la destinazione del <xref:System.Collections.DictionaryEntry>oggetti copiati dal <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> Il <xref:System.Array>deve avere un&quot;indicizzazione in base zero.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "Indice in base zero `array` da cui avviare la copia."
  overload: System.Collections.SortedList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>è multidimensionale.       - oppure - il numero di elementi nell&quot;origine <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto è maggiore dello spazio disponibile da <code>arrayIndex</code> alla fine della destinazione <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Il tipo di origine <xref href=&quot;System.Collections.SortedList&quot;> </xref> non può essere eseguire automaticamente il cast al tipo della destinazione <code> array </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene il numero di elementi contenuti un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "Ogni elemento è una coppia chiave/valore che è possibile accedere come un <xref:System.Collections.DictionaryEntry>oggetto.</xref:System.Collections.DictionaryEntry>       <xref:System.Collections.SortedList.Capacity%2A>è il numero di elementi che la <xref:System.Collections.SortedList>può archiviare l&quot;oggetto.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Capacity%2A> Conteggio indica il numero di elementi effettivamente contenuti nella <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>       <xref:System.Collections.SortedList.Capacity%2A>è sempre maggiore di o uguale al numero specificato.</xref:System.Collections.SortedList.Capacity%2A> Se il conteggio supera <xref:System.Collections.SortedList.Capacity%2A>durante l&quot;aggiunta di elementi, la capacità viene aumentata automaticamente tramite la riallocazione della matrice interna prima di copiare gli elementi e aggiunta di nuovi elementi.</xref:System.Collections.SortedList.Capacity%2A>       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Il numero di elementi contenuti nella <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  overload: System.Collections.SortedList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene il valore in corrispondenza dell&quot;indice specificato di un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "La sequenza di indice si basa sulla sequenza di ordinamento. Quando viene aggiunto un elemento, viene inserito nella <xref:System.Collections.SortedList>nell&quot;ordinamento corretto ordine e l&quot;indicizzazione si adegua di conseguenza.</xref:System.Collections.SortedList> Quando un elemento viene rimosso, l&quot;indicizzazione anche si adegua di conseguenza. Pertanto, l&quot;indice di una coppia chiave/valore specifica potrebbe cambiare come gli elementi vengono aggiunti o rimossi dal <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_8_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_8_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_8_1.vb)]"
  syntax:
    content: public virtual object GetByIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero del valore da ottenere."
    return:
      type: System.Object
      description: "Il valore in corrispondenza dell&quot;indice specificato del <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  overload: System.Collections.SortedList.GetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è compreso nell&quot;intervallo di indici validi per il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  platform:
  - net462
- uid: System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un <xref:System.Collections.IDictionaryEnumerator>oggetto che scorre una <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "Il `foreach` istruzione del linguaggio c# (`for each` in Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, l&quot;utilizzo `foreach` è consigliabile, anziché la modifica diretta dell&quot;enumeratore.       È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non possono essere utilizzati per modificare la raccolta sottostante.       Inizialmente l&quot;enumeratore è posizionato prima del primo elemento nella raccolta. <xref:System.Collections.IEnumerator.Reset%2A>riporta l&quot;enumeratore in questa posizione.</xref:System.Collections.IEnumerator.Reset%2A>  In questa posizione, <xref:System.Collections.IEnumerator.Current%2A>è definito.</xref:System.Collections.IEnumerator.Current%2A> Pertanto, è necessario chiamare <xref:System.Collections.IEnumerator.MoveNext%2A>per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Restituisce lo stesso oggetto finché non <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>viene chiamato.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>imposta <xref:System.Collections.IEnumerator.Current%2A>all&quot;elemento successivo.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>raggiunge la fine della raccolta, l&quot;enumeratore è posizionato dopo l&quot;ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A>restituisce `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando l&quot;enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A>restituire anche `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se l&quot;ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>restituito `false`, <xref:System.Collections.IEnumerator.Current%2A>è definito.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Per impostare <xref:System.Collections.IEnumerator.Current%2A>il primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A>seguito dal <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l&quot;enumeratore viene invalidato e il relativo comportamento sarà indefinito.       L&quot;enumeratore non dispone di accesso esclusivo alla raccolta. Pertanto, l&quot;enumerazione di una raccolta non è quindi una procedura thread-safe.  Per garantire la protezione dei thread durante l&quot;enumerazione, è possibile bloccare la raccolta per l&quot;intera enumerazione.  Per consentire la raccolta a cui accedere da più thread per la lettura e scrittura, è necessario implementare la propria sincronizzazione.       Questo metodo è un&quot;operazione o (1)."
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "Un <xref:System.Collections.IDictionaryEnumerator>dell&quot;oggetto per il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.SortedList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene la chiave in corrispondenza dell&quot;indice specificato di un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "La sequenza di indice si basa sulla sequenza di ordinamento. Quando viene aggiunto un elemento, viene inserito nella <xref:System.Collections.SortedList>nell&quot;ordinamento corretto ordine e l&quot;indicizzazione si adegua di conseguenza.</xref:System.Collections.SortedList> Quando un elemento viene rimosso, l&quot;indicizzazione anche si adegua di conseguenza. Pertanto, l&quot;indice di una coppia chiave/valore specifica potrebbe cambiare come gli elementi vengono aggiunti o rimossi dal <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_19_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_19_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_19_1.vb)]"
  syntax:
    content: public virtual object GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero della chiave da ottenere."
    return:
      type: System.Object
      description: "La chiave in corrispondenza dell&quot;indice specificato del <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  overload: System.Collections.SortedList.GetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è compreso nell&quot;intervallo di indici validi per il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  platform:
  - net462
- uid: System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene le chiavi un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "L&quot;oggetto restituito <xref:System.Collections.IList>è una visualizzazione di sola lettura delle chiavi del <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Modifiche apportate alle sottostante <xref:System.Collections.SortedList>vengono immediatamente riflessi nel <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList>       Gli elementi di restituiti <xref:System.Collections.IList>vengono ordinati nello stesso ordine delle chiavi di <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.IList>       Questo metodo è simile al <xref:System.Collections.SortedList.Keys%2A>proprietà, ma restituisce un <xref:System.Collections.IList>oggetto anziché un <xref:System.Collections.ICollection>oggetto.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Keys%2A>       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_1_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetKeyList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Un <xref:System.Collections.IList>oggetto contenente le chiavi di <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetKeyList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene i valori un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "L&quot;oggetto restituito <xref:System.Collections.IList>è una visualizzazione di sola lettura dei valori del <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Modifiche apportate alle sottostante <xref:System.Collections.SortedList>vengono immediatamente riflessi nel <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList>       Gli elementi di restituiti <xref:System.Collections.IList>vengono ordinati nello stesso ordine dei valori di <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.IList>       Questo metodo è simile al <xref:System.Collections.SortedList.Values%2A>proprietà, ma restituisce un <xref:System.Collections.IList>oggetto anziché un <xref:System.Collections.ICollection>oggetto.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Values%2A>       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_11_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_11_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_11_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetValueList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Un <xref:System.Collections.IList>oggetto contenente i valori di <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetValueList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce l&quot;indice in base zero della chiave specificata in un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "Gli elementi di un <xref:System.Collections.SortedList>oggetto sono ordinate per chiave in uno specifico <xref:System.Collections.IComparer>implementazione specificato al momento il <xref:System.Collections.SortedList>viene creato o in base al <xref:System.IComparable>implementazione fornita dalle chiavi stesse.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       La sequenza di indice si basa sulla sequenza di ordinamento. Quando viene aggiunto un elemento, viene inserito nella <xref:System.Collections.SortedList>nell&quot;ordinamento corretto ordine e l&quot;indicizzazione si adegua di conseguenza.</xref:System.Collections.SortedList> Quando un elemento viene rimosso, l&quot;indicizzazione anche si adegua di conseguenza. Pertanto, l&quot;indice di una coppia chiave/valore specifica potrebbe cambiare quando gli elementi vengono aggiunti o rimossi da <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>       Questo metodo utilizza un algoritmo di ricerca binario; Pertanto, questo metodo è un&quot;operazione O (log `n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_2_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_2_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_2_1.cs)]"
  syntax:
    content: public virtual int IndexOfKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Chiave da individuare nel <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
    return:
      type: System.Int32
      description: "L&quot;indice in base zero del <code> key </code> parametro, se <code> key </code> è presente nel <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto; in caso contrario, -1."
  overload: System.Collections.SortedList.IndexOfKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "L&quot;operatore di confronto genera un&quot;eccezione."
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce l&quot;indice in base zero della prima occorrenza del valore specificato in un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "La sequenza di indice si basa sulla sequenza di ordinamento. Quando viene aggiunto un elemento, viene inserito nella <xref:System.Collections.SortedList>nell&quot;ordinamento corretto ordine e l&quot;indicizzazione si adegua di conseguenza.</xref:System.Collections.SortedList> Quando un elemento viene rimosso, l&quot;indicizzazione anche si adegua di conseguenza. Pertanto, l&quot;indice di una coppia chiave/valore specifica potrebbe cambiare come gli elementi vengono aggiunti o rimossi dal <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       I valori degli elementi del <xref:System.Collections.SortedList>vengono confrontati con il valore specificato utilizzando il <xref:System.Object.Equals%2A>metodo.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Questo metodo utilizza una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_5_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_5_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_5_1.cs)]"
  syntax:
    content: public virtual int IndexOfValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Il valore da individuare nella <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto. Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "L&quot;indice in base zero della prima occorrenza del <code> value </code> parametro, se <code> value </code> è presente nel <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto; in caso contrario, -1."
  overload: System.Collections.SortedList.IndexOfValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto ha dimensioni fisse."
  remarks: "Una raccolta con dimensioni fisse non consente l&quot;aggiunta o la rimozione di elementi dopo la raccolta viene creata, ma consente la modifica degli elementi esistenti.       Una raccolta con una dimensione fissa è semplicemente una raccolta con un wrapper che impedisce l&quot;aggiunta e rimozione di elementi. Pertanto, se vengono apportate modifiche alla raccolta sottostante, incluse l&quot;aggiunta o la rimozione di elementi, la raccolta a dimensione fissa riflette le modifiche.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto è fisse dimensioni; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto è di sola lettura."
  remarks: "Una raccolta di sola lettura non consente l&quot;aggiunta, rimozione o modifica di elementi dopo la sua creazione.       Una raccolta di sola lettura è semplicemente una raccolta con un wrapper che impedisce la modifica. Pertanto, se vengono apportate modifiche alla raccolta sottostante, la raccolta di sola lettura riflette le modifiche.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto è di sola lettura; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se l&quot;accesso a un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto è sincronizzato (thread-safe)."
  remarks: "Per garantire la protezione del thread di un <xref:System.Collections.SortedList>dell&quot;oggetto, tutte le operazioni devono essere eseguite tramite il wrapper restituito dal <xref:System.Collections.SortedList.Synchronized%2A>metodo.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread."
  example:
  - "The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sor_1_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sor_1_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sor_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;accesso al <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto è sincronizzato (thread-safe); in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene e imposta il valore associato a una determinata chiave in un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "È possibile utilizzare la proprietà dell&quot;elemento per accedere a un elemento specifico in una raccolta, specificando la sintassi seguente: `myCollection[key]`.       È inoltre possibile utilizzare questa proprietà per aggiungere nuovi elementi impostando il valore di una chiave che non esiste nel <xref:System.Collections.SortedList>oggetto (ad esempio, `myCollection[&quot;myNonexistentKey&quot;] = myValue)`.</xref:System.Collections.SortedList> Tuttavia, se la chiave specificata esiste già nel <xref:System.Collections.SortedList>, impostando la proprietà dell&quot;elemento sovrascrive il vecchio valore.</xref:System.Collections.SortedList> Al contrario, il <xref:System.Collections.SortedList.Add%2A>metodo non modifica gli elementi esistenti.</xref:System.Collections.SortedList.Add%2A>       Non può essere una chiave `null`, ma può essere un valore. Per distinguere tra `null` restituito perché non è stata trovata la chiave specificata e `null` restituito perché il valore della chiave specificata è `null`, utilizzare il <xref:System.Collections.SortedList.Contains%2A>metodo o <xref:System.Collections.SortedList.ContainsKey%2A>per determinare se la chiave è presente nell&quot;elenco.</xref:System.Collections.SortedList.ContainsKey%2A> </xref:System.Collections.SortedList.Contains%2A>       Gli elementi di un <xref:System.Collections.SortedList>sono ordinate per chiave in uno specifico <xref:System.Collections.IComparer>implementazione specificato al momento il <xref:System.Collections.SortedList>viene creato o in base al <xref:System.IComparable>implementazione fornita dalle chiavi stesse.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Nel linguaggio c# viene utilizzata la parola chiave per definire gli indicizzatori anziché implementare la <xref:System.Collections.SortedList.Keys%2A>proprietà.</xref:System.Collections.SortedList.Keys%2A> Visual Basic implementa elemento come una proprietà predefinita, che fornisce la stessa funzionalità di indicizzazione.       Il recupero del valore di questa proprietà è un&quot;operazione O (log `n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> L&quot;impostazione della proprietà è un&quot;operazione O (log `n`) se la chiave è già in <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> Se la chiave non è presente nell&quot;elenco, l&quot;impostazione della proprietà è un&quot;operazione O (`n`) operazione per i dati non ordinati oppure O (log `n`) se il nuovo elemento viene aggiunto alla fine dell&quot;elenco. Se l&quot;inserimento comporta un ridimensionamento, l&quot;operazione è O (`n`)."
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "La chiave associata al valore da ottenere o impostare."
    return:
      type: System.Object
      description: "Il valore associato di <code> key </code> parametro il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto, se <code> key </code> è stato trovato; in caso contrario, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "La proprietà è impostata e <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto è di sola lettura.       - oppure - la proprietà è impostata, <code> key </code> non esiste nella raccolta e <xref href=&quot;System.Collections.SortedList&quot;> </xref> ha dimensioni fisse."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Non è disponibile memoria sufficiente per aggiungere l&quot;elemento per il <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "L&quot;operatore di confronto genera un&quot;eccezione."
  platform:
  - net462
- uid: System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene le chiavi un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "Il <xref:System.Collections.ICollection>è una visualizzazione di sola lettura delle chiavi del <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Modifiche apportate alle sottostante <xref:System.Collections.SortedList>vengono immediatamente riflessi nel <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList>       Gli elementi di <xref:System.Collections.ICollection>sono ordinati nello stesso ordine delle chiavi di <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection>       Questa proprietà è simile al <xref:System.Collections.SortedList.GetKeyList%2A>(metodo), ma restituisce un <xref:System.Collections.ICollection>oggetto anziché un <xref:System.Collections.IList>oggetto.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetKeyList%2A>       Questo metodo è un&quot;operazione o (1)."
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Un <xref:System.Collections.ICollection>oggetto contenente le chiavi di <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove l&quot;elemento con la chiave specificata da un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "Se il <xref:System.Collections.SortedList>oggetto non contiene un elemento con la chiave specificata, il <xref:System.Collections.SortedList>rimane invariato.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Viene generata alcuna eccezione.       In raccolte di elementi adiacenti, quali gli elenchi, gli elementi che seguono l&quot;elemento rimosso Sposta su per occupare la posizione rimasta vuota. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente in bucket, come una tabella hash.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_6_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_6_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_6_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Chiave dell&quot;elemento da rimuovere."
  overload: System.Collections.SortedList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto è di sola lettura.       - o - <xref href=&quot;System.Collections.SortedList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove l&quot;elemento in corrispondenza dell&quot;indice specificato di un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "La sequenza di indice si basa sulla sequenza di ordinamento. Quando viene aggiunto un elemento, viene inserito nella <xref:System.Collections.SortedList>nell&quot;ordinamento corretto ordine e l&quot;indicizzazione si adegua di conseguenza.</xref:System.Collections.SortedList> Quando un elemento viene rimosso, l&quot;indicizzazione anche si adegua di conseguenza. Pertanto, l&quot;indice di una coppia chiave/valore specifica potrebbe cambiare come gli elementi vengono aggiunti o rimossi dal <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       In raccolte di elementi adiacenti, quali gli elenchi, gli elementi che seguono l&quot;elemento rimosso Sposta su per occupare la posizione rimasta vuota. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente in bucket, come una tabella hash.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_17_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_17_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_17_1.vb)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero dell&quot;elemento da rimuovere."
  overload: System.Collections.SortedList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è compreso nell&quot;intervallo di indici validi per il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.SortedList&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.SortedList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Sostituisce il valore in un indice specifico in un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "La sequenza di indice si basa sulla sequenza di ordinamento. Quando viene aggiunto un elemento, viene inserito nella <xref:System.Collections.SortedList>nell&quot;ordinamento corretto ordine e l&quot;indicizzazione si adegua di conseguenza.</xref:System.Collections.SortedList> Quando un elemento viene rimosso, l&quot;indicizzazione anche si adegua di conseguenza. Pertanto, l&quot;indice di una coppia chiave/valore specifica potrebbe cambiare come gli elementi vengono aggiunti o rimossi dal <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.  \n  \n [!code-vb[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_13_1.vb)]\n [!code-cs[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_13_1.cs)]\n [!code-cpp[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_13_1.cpp)]"
  syntax:
    content: public virtual void SetByIndex (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "L&quot;indice in base zero nel quale salvare `value`."
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>per salvare nel <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.SetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è compreso nell&quot;intervallo di indici validi per il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  platform:
  - net462
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un wrapper sincronizzato (thread-safe) per un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "Per garantire la protezione del thread di un <xref:System.Collections.SortedList>dell&quot;oggetto, tutte le operazioni devono essere eseguite solo tramite questo wrapper.</xref:System.Collections.SortedList>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sor_10_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sor_10_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sor_10_1.vb)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sor_10_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sor_10_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_10_2.vb)]"
  syntax:
    content: public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);
    parameters:
    - id: list
      type: System.Collections.SortedList
      description: "Il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto da sincronizzare."
    return:
      type: System.Collections.SortedList
      description: "Sincronizzato (thread-safe) wrapper per il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  overload: System.Collections.SortedList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un oggetto che può essere utilizzato per sincronizzare l&quot;accesso a un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "Per creare una versione sincronizzata del <xref:System.Collections.SortedList>oggetto, usare il <xref:System.Collections.SortedList.Synchronized%2A>metodo.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList> Tuttavia, le classi derivate possono fornire una propria versione sincronizzata del <xref:System.Collections.SortedList>utilizzando la proprietà SyncRoot.</xref:System.Collections.SortedList> Il codice di sincronizzazione deve essere eseguite nella radice di sincronizzazione del <xref:System.Collections.SortedList>, non direttamente sulla <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> In questo modo si garantisce il corretto funzionamento delle raccolte derivate da altri oggetti. In particolare, viene mantenuta la sincronizzazione con altri thread che potrebbero modificare contemporaneamente il <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_0_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_0_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_0_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Oggetto che può essere utilizzato per sincronizzare l&quot;accesso al <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  overload: System.Collections.SortedList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un <xref:System.Collections.IEnumerator>che scorre la <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic, c#]       Il `foreach` istruzione del linguaggio c# (`for each` in Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, l&quot;utilizzo `foreach` è consigliabile, anziché la modifica diretta dell&quot;enumeratore.       È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non possono essere utilizzati per modificare la raccolta sottostante.       Inizialmente l&quot;enumeratore è posizionato prima del primo elemento nella raccolta. <xref:System.Collections.IEnumerator.Reset%2A>riporta l&quot;enumeratore in questa posizione.</xref:System.Collections.IEnumerator.Reset%2A> In questa posizione, la chiamata <xref:System.Collections.IEnumerator.Current%2A>genera un&quot;eccezione.</xref:System.Collections.IEnumerator.Current%2A> Pertanto, è necessario chiamare <xref:System.Collections.IEnumerator.MoveNext%2A>per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Restituisce lo stesso oggetto finché non <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>viene chiamato.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>imposta <xref:System.Collections.IEnumerator.Current%2A>all&quot;elemento successivo.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>raggiunge la fine della raccolta, l&quot;enumeratore è posizionato dopo l&quot;ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A>restituisce `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando l&quot;enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A>restituire anche `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se l&quot;ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>restituito `false`, la chiamata <xref:System.Collections.IEnumerator.Current%2A>genera un&quot;eccezione.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Per impostare <xref:System.Collections.IEnumerator.Current%2A>il primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A>seguito dal <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l&quot;enumeratore viene invalidato e la successiva chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>Genera un <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Se la raccolta viene modificata tra <xref:System.Collections.IEnumerator.MoveNext%2A>e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>restituisce l&quot;elemento su cui è stata impostata, anche se l&quot;enumeratore risulta già invalidato.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       L&quot;enumeratore non dispone di accesso esclusivo alla raccolta. Pertanto, l&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.       Questo metodo è un&quot;operazione o (1)."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.SortedList&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Imposta la capacità sul numero effettivo di elementi in un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "Questo metodo può essere utilizzato per ridurre il sovraccarico della memoria di una raccolta se nessun nuovo elemento verrà aggiunto alla raccolta.       Per reimpostare un <xref:System.Collections.SortedList>oggetto allo stato iniziale, chiamata di <xref:System.Collections.SortedList.Clear%2A>prima del metodo TrimToSize.</xref:System.Collections.SortedList.Clear%2A> </xref:System.Collections.SortedList> L&quot;eliminazione di un oggetto vuoto <xref:System.Collections.SortedList>Imposta la capacità del <xref:System.Collections.SortedList>per la capacità predefinita.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_3_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_3_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_3_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.SortedList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto è di sola lettura.       - o - <xref href=&quot;System.Collections.SortedList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene i valori un <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto."
  remarks: "Il <xref:System.Collections.ICollection>è una visualizzazione di sola lettura dei valori del <xref:System.Collections.SortedList>oggetto.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Modifiche apportate alle sottostante <xref:System.Collections.SortedList>vengono immediatamente riflessi nel <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList>       Gli elementi di <xref:System.Collections.ICollection>sono ordinati nello stesso ordine dei valori di <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection>       Questa proprietà è simile al <xref:System.Collections.SortedList.GetValueList%2A>(metodo), ma restituisce un <xref:System.Collections.ICollection>oggetto anziché un <xref:System.Collections.IList>oggetto.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetValueList%2A>       Questo metodo è un&quot;operazione o (1)."
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Un <xref:System.Collections.ICollection>oggetto contenente i valori di <xref href=&quot;System.Collections.SortedList&quot;> </xref> oggetto.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.SortedList.#ctor
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.SortedList.#ctor(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
- uid: System.Collections.SortedList.Capacity
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
- uid: System.Collections.SortedList.Clear
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
- uid: System.Collections.SortedList.Clone
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
- uid: System.Collections.SortedList.Contains(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.SortedList.Count
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
- uid: System.Collections.SortedList.GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.SortedList.GetKey(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
- uid: System.Collections.SortedList.GetKeyList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.SortedList.GetValueList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
- uid: System.Collections.SortedList.IsFixedSize
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
- uid: System.Collections.SortedList.Keys
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.SortedList.Remove(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
- uid: System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.SortedList.SyncRoot
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.SortedList.TrimToSize
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
- uid: System.Collections.SortedList.Values
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
- uid: System.Collections.SortedList.#ctor*
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList
  nameWithType: SortedList.SortedList
- uid: System.Collections.SortedList.Add*
  parent: System.Collections.SortedList
  isExternal: false
  name: Add
  nameWithType: SortedList.Add
- uid: System.Collections.SortedList.Capacity*
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
- uid: System.Collections.SortedList.Clear*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear
  nameWithType: SortedList.Clear
- uid: System.Collections.SortedList.Clone*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone
  nameWithType: SortedList.Clone
- uid: System.Collections.SortedList.Contains*
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains
  nameWithType: SortedList.Contains
- uid: System.Collections.SortedList.ContainsKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey
  nameWithType: SortedList.ContainsKey
- uid: System.Collections.SortedList.ContainsValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue
  nameWithType: SortedList.ContainsValue
- uid: System.Collections.SortedList.CopyTo*
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo
  nameWithType: SortedList.CopyTo
- uid: System.Collections.SortedList.Count*
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
- uid: System.Collections.SortedList.GetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex
  nameWithType: SortedList.GetByIndex
- uid: System.Collections.SortedList.GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedList.GetEnumerator
- uid: System.Collections.SortedList.GetKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey
  nameWithType: SortedList.GetKey
- uid: System.Collections.SortedList.GetKeyList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList
  nameWithType: SortedList.GetKeyList
- uid: System.Collections.SortedList.GetValueList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList
  nameWithType: SortedList.GetValueList
- uid: System.Collections.SortedList.IndexOfKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey
  nameWithType: SortedList.IndexOfKey
- uid: System.Collections.SortedList.IndexOfValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue
  nameWithType: SortedList.IndexOfValue
- uid: System.Collections.SortedList.IsFixedSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item*
  parent: System.Collections.SortedList
  isExternal: false
  name: Item
  nameWithType: SortedList.Item
- uid: System.Collections.SortedList.Keys*
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
- uid: System.Collections.SortedList.Remove*
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove
  nameWithType: SortedList.Remove
- uid: System.Collections.SortedList.RemoveAt*
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt
  nameWithType: SortedList.RemoveAt
- uid: System.Collections.SortedList.SetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex
  nameWithType: SortedList.SetByIndex
- uid: System.Collections.SortedList.Synchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized
  nameWithType: SortedList.Synchronized
- uid: System.Collections.SortedList.SyncRoot*
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.SortedList.TrimToSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize
  nameWithType: SortedList.TrimToSize
- uid: System.Collections.SortedList.Values*
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
