### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.EventWaitHandleSecurity
  id: EventWaitHandleSecurity
  children:
  - System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  - System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  - System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  langs:
  - csharp
  name: EventWaitHandleSecurity
  nameWithType: EventWaitHandleSecurity
  fullName: System.Security.AccessControl.EventWaitHandleSecurity
  type: Class
  summary: "Rappresenta la sicurezza di controllo di accesso Windows applicata a un handle di attesa di sistema denominato. Questa classe non può essere ereditata."
  remarks: "Un oggetto EventWaitHandleSecurity specifica i diritti di accesso per un handle di attesa di sistema denominato e specifica inoltre il modo in cui vengono controllati i tentativi di accesso. Diritti di accesso per l&quot;handle di attesa sono espressi come regole, con ogni regola di accesso rappresentato da un <xref:System.Security.AccessControl.EventWaitHandleAccessRule>oggetto.</xref:System.Security.AccessControl.EventWaitHandleAccessRule> Ogni regola di controllo è rappresentato da un <xref:System.Security.AccessControl.EventWaitHandleAuditRule>oggetto.</xref:System.Security.AccessControl.EventWaitHandleAuditRule>       Questa situazione rispecchia il sistema di sicurezza di Windows sottostante, in cui ogni oggetto a protezione diretta dispone al massimo un controllo di accesso discrezionale elenco di controllo (DACL) che controlla l&quot;accesso per l&quot;oggetto protetto e al massimo di un elenco di controllo di accesso di sistema (SACL) che specifica quali tentativi di accesso vengono controllati. Gli elenchi DACL e SACL sono elenchi ordinati di voci di controllo di accesso (ACE) che specificano l&quot;accesso e controllo per utenti e gruppi. Un <xref:System.Security.AccessControl.EventWaitHandleAccessRule>o <xref:System.Security.AccessControl.EventWaitHandleAuditRule>oggetto potrebbe rappresentare più di una voce ACE.</xref:System.Security.AccessControl.EventWaitHandleAuditRule> </xref:System.Security.AccessControl.EventWaitHandleAccessRule>      > [!NOTE] > Un <xref:System.Threading.EventWaitHandle>oggetto può rappresentare un handle di attesa locale o l&quot;handle di attesa di un sistema denominato.</xref:System.Threading.EventWaitHandle> Controllo di accesso di Windows è significativo solo per gli handle di attesa di sistema denominato.       EventWaitHandleSecurity, <xref:System.Security.AccessControl.EventWaitHandleAccessRule>, e <xref:System.Security.AccessControl.EventWaitHandleAuditRule>classi nascondono i dettagli di implementazione degli elenchi ACL e ACE.</xref:System.Security.AccessControl.EventWaitHandleAuditRule> </xref:System.Security.AccessControl.EventWaitHandleAccessRule> Consentono di ignorare i diversi tipi ACE diciassette e la complessità del mantenimento correttamente l&quot;ereditarietà e propagazione di diritti di accesso. Questi oggetti sono progettati anche per evitare gli errori di controllo accesso comuni seguenti:-creazione di un descrittore di sicurezza con un elenco DACL. Un riferimento null a un elenco DACL consente agli utenti di aggiungere le regole di accesso a un oggetto, potenzialmente la creazione di un attacco denial of service. Un nuovo oggetto EventWaitHandleSecurity inizia sempre con un elenco DACL vuoto, con cui viene negato l&quot;accesso per tutti gli utenti.      -Violazione dell&quot;ordine canonico delle voci ACE. Se l&quot;elenco di voci ACE nell&quot;elenco DACL non viene mantenuta in ordine canonico, potrebbe essere inavvertitamente concesso l&quot;accesso all&quot;oggetto protetto. Ad esempio, i diritti di accesso negato devono trovarsi sempre prima diritti di accesso consentito. Oggetti EventWaitHandleSecurity mantengono l&quot;ordine corretto internamente.      -La manipolazione dei flag del descrittore di sicurezza, che deve essere controllata resource manager solo.      -Creazione di combinazioni di flag ACE non valide.      -La modifica di voci ACE ereditate. Ereditarietà e propagazione vengono gestiti dal gestore delle risorse, in risposta alle modifiche apportate alle regole di accesso e controllo.      -Inserimento di voci ACE non significative in ACL.       Le uniche funzionalità non supportate dagli oggetti di sicurezza .NET sono le attività pericolose che dovrebbero essere evitate dalla maggior parte degli sviluppatori di applicazioni, ad esempio le operazioni seguenti:-attività di basso livello che sono in genere eseguita dal gestore delle risorse.      -Aggiunta o rimozione di voci di controllo di accesso in modo che non manutenzione l&quot;ordinamento canonico.       Per modificare il controllo di accesso di Windows per un handle di attesa denominato, usare il <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>metodo per ottenere l&quot;oggetto EventWaitHandleSecurity.</xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> Modificare l&quot;oggetto di sicurezza aggiungendo e rimuovendo le regole e quindi utilizzare il <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>metodo di ricollegare tale</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>      > [!IMPORTANT] > Le modifiche apportate a un oggetto EventWaitHandleSecurity non influiscono sui livelli di accesso dell&quot;handle di attesa denominato finché non si chiama il <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>metodo a cui assegnare l&quot;oggetto di sicurezza modificato all&quot;handle di attesa denominato.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>       Per copiare del controllo di accesso da un handle di attesa in un altro, utilizzare il <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>per ottenere un oggetto EventWaitHandleSecurity che rappresenta le regole di accesso e controllo per l&quot;handle di attesa prima e quindi utilizzare il <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>metodo o un costruttore che accetta un oggetto EventWaitHandleSecurity, per assegnare tali regole per l&quot;attesa secondo handle.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>       Gli utenti con un investimento nel linguaggio di definizione descrittore di sicurezza (SDDL) possono usare il <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>per impostare le regole di accesso per un handle di attesa denominato e il <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>metodo per ottenere una stringa che rappresenta le regole di accesso in formato SDDL.</xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> Questa operazione è sconsigliata per i nuovi sviluppi."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates an EventWaitHandleSecurity object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in<xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_14_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_14_1.vb)]"
  syntax:
    content: 'public sealed class EventWaitHandleSecurity : System.Security.AccessControl.NativeObjectSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: EventWaitHandleSecurity()
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity()
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> classe con i valori predefiniti."
  remarks: "Un nuovo <xref:System.Security.AccessControl.EventWaitHandleSecurity>oggetto inizia sempre con un elenco vuoto di accesso discrezionale (DACL), che nega l&quot;accesso per tutti gli utenti.</xref:System.Security.AccessControl.EventWaitHandleSecurity>"
  syntax:
    content: public EventWaitHandleSecurity ();
    parameters: []
  overload: System.Security.AccessControl.EventWaitHandleSecurity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Questa classe non è supportata in Windows 98 o Windows Millennium Edition."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Ottiene il tipo di enumerazione di <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> classe viene utilizzato per rappresentare i diritti di accesso."
  remarks: "Le classi che derivano dalla <xref:System.Security.AccessControl.ObjectSecurity>classe sostituzione il <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>proprietà e restituiscono il tipo utilizzato per rappresentare i diritti di accesso.</xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Quando si utilizzano matrici o raccolte che contengono più tipi di oggetti di sicurezza, è possibile utilizzare questa proprietà per determinare il tipo di enumerazione appropriata da utilizzare con ogni oggetto di sicurezza."
  syntax:
    content: public override Type AccessRightType { get; }
    return:
      type: System.Type
      description: "Oggetto <xref:System.Type>oggetto che rappresenta il <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> enumerazione.</xref:System.Type>"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Crea una nuova regola di controllo di accesso per l&quot;utente specificato, con i diritti di accesso specificato, il controllo di accesso e i flag."
  remarks: "Il metodo consigliato per creare regole di controllo di accesso consiste nell&quot;utilizzare i costruttori di <xref:System.Security.AccessControl.EventWaitHandleAccessRule>classe.</xref:System.Security.AccessControl.EventWaitHandleAccessRule>      > [!NOTE] > Anche se i flag di ereditarietà e propagazione sono significativi per gli eventi denominati, è comunque possibile specificarli. Questa opzione non è consigliata perché complica inutilmente la gestione delle regole, ad esempio da interferire con la combinazione di regole che verrebbero altrimenti compatibili."
  syntax:
    content: public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "Un <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> che identifica l&quot;utente o gruppo, la regola viene applicata."
    - id: accessMask
      type: System.Int32
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> valori che specificano i diritti di accesso per consentire o negare, di cui è stato eseguito il cast a un numero intero."
    - id: isInherited
      type: System.Boolean
      description: "Non è significativa per gli handle di attesa denominato, perché non hanno gerarchia."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Non è significativa per gli handle di attesa denominato, perché non hanno gerarchia."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Non è significativa per gli handle di attesa denominato, perché non hanno gerarchia."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Uno del <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valori che specificano se i diritti sono concesse o negati."
    return:
      type: System.Security.AccessControl.AccessRule
      description: "Un <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> oggetto che rappresenta i diritti specificati per l&quot;utente specificato."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, o <code>type</code> specifica un valore non valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - <code>accessMask</code> è zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>non è di tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, né di un tipo, ad esempio <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> che può essere convertito nel tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Ottiene il tipo di <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> classe viene utilizzato per rappresentare le regole di accesso."
  remarks: "Le classi che derivano dalla <xref:System.Security.AccessControl.ObjectSecurity>classe sostituzione il <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>proprietà e restituiscono il tipo utilizzato per rappresentare le regole di accesso.</xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Quando si utilizzano matrici o raccolte che contengono più tipi di oggetti di sicurezza, è possibile utilizzare questa proprietà per determinare il tipo di regola di accesso corretto da utilizzare con ogni oggetto di sicurezza."
  syntax:
    content: public override Type AccessRuleType { get; }
    return:
      type: System.Type
      description: "Oggetto <xref:System.Type>oggetto che rappresenta il <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> classe</xref:System.Type>"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AddAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cerca una regola di controllo di accesso corrispondente con cui è possibile unire la nuova regola. Se non vengono rilevati, aggiunge la nuova regola."
  remarks: "Il metodo AddAccessRule cerca le regole con lo stesso utente o gruppo e lo stesso <xref:System.Security.AccessControl.AccessControlType>come `rule`.</xref:System.Security.AccessControl.AccessControlType> Se non vengono rilevati, `rule` viene aggiunto. Se una regola di corrispondenza viene trovato, i diritti in `rule` vengono unite con la regola esistente."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/729692a8-5e98-486a-9864-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/729692a8-5e98-486a-9864-_1.vb)]"
  syntax:
    content: public void AddAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "La regola di controllo di accesso da aggiungere."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AddAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cerca una regola di controllo con cui è possibile unire la nuova regola. Se non vengono rilevati, aggiunge la nuova regola."
  remarks: "Il metodo AddAuditRule cerca le regole con lo stesso utente o gruppo di `rule`. Se non vengono rilevati, `rule` viene aggiunto. Se una regola di corrispondenza viene trovato, il flag in `rule` vengono unite alla regola esistente."
  syntax:
    content: public void AddAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "Regola di controllo da aggiungere. L&quot;utente specificato da questa regola determina la ricerca."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Crea una nuova regola di controllo, specificando l&quot;utente che viene applicata la regola, controllare i diritti di accesso e il risultato che attiva la regola di controllo."
  remarks: "Il metodo consigliato per creare regole di controllo consiste nell&quot;utilizzare i costruttori di <xref:System.Security.AccessControl.EventWaitHandleAuditRule>classe.</xref:System.Security.AccessControl.EventWaitHandleAuditRule>      > [!NOTE] > Anche se i flag di ereditarietà e propagazione sono significativi per gli eventi denominati, è comunque possibile specificarli. Questa opzione non è consigliata perché complica inutilmente la gestione delle regole, ad esempio da interferire con la combinazione di regole che verrebbero altrimenti compatibili."
  syntax:
    content: public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "Un <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> che identifica l&quot;utente o gruppo, la regola viene applicata."
    - id: accessMask
      type: System.Int32
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> valori che specificano i diritti di accesso da controllare, eseguire il cast in un intero."
    - id: isInherited
      type: System.Boolean
      description: "Non è significativa per gli handle di attesa denominato, perché non hanno gerarchia."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Non è significativa per gli handle di attesa denominato, perché non hanno gerarchia."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Non è significativa per gli handle di attesa denominato, perché non hanno gerarchia."
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> valori che specificano se controllare l&quot;accesso riuscito, l&quot;accesso non riuscito o entrambi."
    return:
      type: System.Security.AccessControl.AuditRule
      description: "Un <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> oggetto che rappresenta la regola di controllo specificato per l&quot;utente specificato. Il tipo restituito del metodo è la classe base, <xref href=&quot;System.Security.AccessControl.AuditRule&quot;> </xref>, ma il valore restituito può essere cast alla classe derivata."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, o <code>flags</code> specifica un valore non valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - <code>accessMask</code> è zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>non è di tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, né di un tipo, ad esempio <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> che può essere convertito nel tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Ottiene il tipo di <xref href=&quot;System.Security.AccessControl.EventWaitHandleSecurity&quot;> </xref> classe viene utilizzato per rappresentare le regole di controllo."
  remarks: "Le classi che derivano dalla <xref:System.Security.AccessControl.ObjectSecurity>classe sostituzione il <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>proprietà e restituiscono il tipo utilizzato per rappresentare i diritti di controllo.</xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Quando si utilizzano matrici o raccolte che contengono più tipi di oggetti di sicurezza, è possibile utilizzare questa proprietà per determinare il tipo di regola di controllo appropriata da utilizzare con ogni oggetto di sicurezza."
  syntax:
    content: public override Type AuditRuleType { get; }
    return:
      type: System.Type
      description: "Oggetto <xref:System.Type>oggetto che rappresenta il <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> classe</xref:System.Type>"
  overload: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cerca una regola di controllo di accesso con lo stesso utente e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (Consenti o Nega) della regola di accesso specificato e con ereditarietà compatibile e il flag di propagazione; se viene trovata una regola, i diritti contenuti nella regola di accesso specificata vengono rimossi da esso."
  remarks: "Corrente <xref:System.Security.AccessControl.EventWaitHandleSecurity>viene cercata una regola con lo stesso utente e la stessa <xref:System.Security.AccessControl.AccessControlType>valore come `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.EventWaitHandleSecurity> Se non viene trovata alcuna tale regola viene eseguita alcuna azione e il metodo restituisce `false`. Se vengono rilevate le regole di corrispondenza, ereditarietà e compatibilità vengono controllati per garantire la compatibilità con i flag specificati in `rule`. Se viene trovata alcuna regola compatibile, viene eseguita alcuna azione e il metodo restituisce `false`. Se viene trovata una regola con flag compatibili, i diritti specificati `rule` vengono rimossi dalla regola compatibile, e il metodo restituisce `true`. Se `rule` specifica i diritti non contenuti nella regola compatibile, viene eseguita alcuna azione relativamente a tali diritti. Se tutti i diritti vengono rimossi dalla regola compatibile, l&quot;intera regola viene rimosso dall&quot;oggetto corrente <xref:System.Security.AccessControl.EventWaitHandleSecurity>oggetto.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!IMPORTANT] > Sebbene sia possibile specificare flag di ereditarietà e propagazione per le regole di accesso eventi creandoli con il <xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A>(metodo), questa operazione è sconsigliata.</xref:System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory%2A> Ereditarietà e propagazione non hanno alcun significato per eventi denominati e rendono più complessa la gestione delle regole di accesso."
  example:
  - "The following code example demonstrates the use of the RemoveAccessRule method to remove rights from an <xref:System.Security.AccessControl.AccessControlType> rule in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. It also shows that other rights in `rule` are ignored.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The rights allowed include <xref:System.Security.AccessControl.EventWaitHandleRights>, <xref:System.Security.AccessControl.EventWaitHandleRights>, and <xref:System.Security.AccessControl.EventWaitHandleRights>. The example then creates a new rule for the current user, including <xref:System.Security.AccessControl.EventWaitHandleRights> and <xref:System.Security.AccessControl.EventWaitHandleRights> rights, and uses that rule with the RemoveAccessRule method to remove <xref:System.Security.AccessControl.EventWaitHandleRights> from the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. The <xref:System.Security.AccessControl.EventWaitHandleRights> right in `rule` is ignored.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule#1](~/add/codesnippet/csharp/22dce09a-3e98-48e6-a61f-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule#1](~/add/codesnippet/visualbasic/22dce09a-3e98-48e6-a61f-_1.vb)]"
  syntax:
    content: public bool RemoveAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "Un <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> che specifica l&quot;utente e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> da cercare e un set di flag di ereditarietà e propagazione di una regola corrispondente, se trovato, devono essere compatibili con. Specifica i diritti da rimuovere dalla regola compatibile, se trovato."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se viene trovata una regola compatibile. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRuleAll(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cerca tutte le regole di controllo con lo stesso utente di accesso e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (Consenti o Nega) come specificato regola e, se lo trova, rimuove tali."
  remarks: "Corrente <xref:System.Security.AccessControl.EventWaitHandleSecurity>viene eseguita la ricerca per le regole che presentano lo stesso utente e lo stesso <xref:System.Security.AccessControl.AccessControlType>valore come `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.EventWaitHandleSecurity> Qualsiasi diritto specificato da `rule` vengono ignorati quando si esegue la ricerca. Tutte le regole corrispondenti vengono rimossi. Se non è stata trovata alcuna regola corrispondente, viene eseguita alcuna azione."
  example:
  - "The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> rule. The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref:System.Security.AccessControl.AccessControlType> rule from the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/visualbasic/a6ff73cc-4227-4079-abe7-_1.vb)]\n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/csharp/a6ff73cc-4227-4079-abe7-_1.cs)]"
  syntax:
    content: public void RemoveAccessRuleAll (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "Un <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> che specifica l&quot;utente e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> per la ricerca. Qualsiasi diritto specificato da questa regola viene ignorati."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cerca una regola di controllo di accesso che corrisponde esattamente al valore specificato regola e, se lo trova, rimuove il."
  remarks: "La regola viene rimosso solo se corrisponde esattamente a `rule` in tutti i dettagli, compresi i flag. Le altre regole con lo stesso utente e <xref:System.Security.AccessControl.AccessControlType>non sono interessate.</xref:System.Security.AccessControl.AccessControlType>      > [!IMPORTANT] > Una regola rappresenta uno o più sottostante voci controllo di accesso (ACE) e queste voci vengono suddivise o combinate necessarie quando si modificano le regole di sicurezza di accesso per un utente. Di conseguenza, una regola potrebbe non esistere più nel formato che aveva al momento dell&quot;aggiunta e in tal caso il metodo RemoveAccessRuleSpecific non è possibile rimuoverlo."
  example:
  - "The following code example shows that the RemoveAccessRuleSpecific method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> access rule. The example then passes the original <xref:System.Security.AccessControl.AccessControlType> rule to the RemoveAccessRuleSpecific method, and displays the results, showing that nothing is deleted. The example then constructs a rule that matches the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, and successfully uses the RemoveAccessRuleSpecific method to remove the rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/csharp/4b0413fe-85b1-4175-8dfd-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/visualbasic/4b0413fe-85b1-4175-8dfd-_1.vb)]"
  syntax:
    content: public void RemoveAccessRuleSpecific (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "Il <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> da rimuovere."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cerca una regola di controllo con lo stesso utente della regola specificata e con ereditarietà compatibile e il flag di propagazione. Se viene trovata una regola compatibile, i diritti contenuti nella regola specificata vengono rimossi da esso."
  remarks: "Corrente <xref:System.Security.AccessControl.EventWaitHandleSecurity>viene cercata una regola di controllo con lo stesso utente `rule`.</xref:System.Security.AccessControl.EventWaitHandleSecurity> Se non viene trovata alcuna tale regola viene eseguita alcuna azione e il metodo restituisce `false`. Se vengono rilevate le regole di corrispondenza, ereditarietà e compatibilità vengono controllati per garantire la compatibilità con i flag specificati in `rule`. Se viene trovata alcuna regola compatibile, viene eseguita alcuna azione e il metodo restituisce `false`. Se viene trovata una regola con flag compatibili, i diritti specificati `rule` vengono rimossi dalla regola compatibile, e il metodo restituisce `true`. Se `rule` specifica i diritti non contenuti nella regola compatibile, viene eseguita alcuna azione relativamente a tali diritti. Se tutti i diritti vengono rimossi dalla regola compatibile, l&quot;intera regola viene rimosso dall&quot;oggetto corrente <xref:System.Security.AccessControl.EventWaitHandleSecurity>oggetto.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!IMPORTANT] > Sebbene sia possibile specificare flag di ereditarietà e propagazione per le regole di controllo degli eventi creandoli con il <xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A>(metodo), questa operazione è sconsigliata.</xref:System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory%2A> Ereditarietà e propagazione non hanno alcun significato per eventi denominati e rendono più complessa la gestione delle regole di controllo."
  syntax:
    content: public bool RemoveAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "Un <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> che specifica l&quot;utente per la ricerca e un set di flag di ereditarietà e propagazione di una regola corrispondente, se trovato, devono essere compatibili con. Specifica i diritti da rimuovere dalla regola compatibile, se trovato."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se viene trovata una regola compatibile. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRuleAll(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cerca tutte le regole con lo stesso utente della regola specificata di controllo e, se trovato, vengono rimosse."
  remarks: "Corrente <xref:System.Security.AccessControl.EventWaitHandleSecurity>viene eseguita la ricerca per le regole di controllo con lo stesso utente `rule`.</xref:System.Security.AccessControl.EventWaitHandleSecurity> Qualsiasi diritto specificato da `rule` vengono ignorati quando si esegue la ricerca. Tutte le regole corrispondenti vengono rimossi. Se non è stata trovata alcuna regola corrispondente, viene eseguita alcuna azione."
  syntax:
    content: public void RemoveAuditRuleAll (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "Un <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> che specifica l&quot;utente per la ricerca. Qualsiasi diritto specificato da questa regola viene ignorati."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Cerca una regola di controllo che corrisponde esattamente al valore specificato regola e, se lo trova, rimuove il."
  remarks: "La regola viene rimosso solo se corrisponde esattamente a `rule` in tutti i dettagli, compresi i flag. Altre regole di controllo per lo stesso utente non sono interessate.      > [!IMPORTANT] > Una regola rappresenta uno o più sottostante voci controllo di accesso (ACE) e queste voci vengono suddivise o combinate necessarie quando si modificano le regole di sicurezza di controllo per un utente. Di conseguenza, una regola potrebbe non esistere più nel formato che aveva al momento dell&quot;aggiunta e in tal caso il metodo RemoveAuditRuleSpecific non è possibile rimuoverlo."
  syntax:
    content: public void RemoveAuditRuleSpecific (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "Il <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;> </xref> da rimuovere."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: ResetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Rimuove tutte le regole di controllo di accesso con lo stesso utente della regola specificata, indipendentemente dal valore <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>e quindi aggiunge la regola specificata."
  remarks: "Se non sono presenti regole di accesso il cui utente corrisponde a quello della regola specificata, `rule` viene aggiunto."
  example:
  - "The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the ResetAccessRule method to replace both of the existing rules with the new rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule#1](~/add/codesnippet/csharp/831b1f62-72fc-4f57-bcc7-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule#1](~/add/codesnippet/visualbasic/831b1f62-72fc-4f57-bcc7-_1.vb)]"
  syntax:
    content: public void ResetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;></xref> to add. L&quot;utente specificato da questa regola determina le regole da rimuovere prima di aggiungere questa regola."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  id: SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: SetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Rimuove tutte le regole di controllo di accesso con lo stesso utente e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (Consenti o Nega) della regola specificata e quindi aggiunge la regola specificata."
  remarks: "Se la regola specificata è <xref:System.Security.AccessControl.AccessControlType>, l&quot;effetto di questo metodo consiste nel rimuovere tutti <xref:System.Security.AccessControl.AccessControlType>regole per l&quot;utente specificato, sostituirli con la regola specificata.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType> Se la regola specificata dispone <xref:System.Security.AccessControl.AccessControlType>tutti <xref:System.Security.AccessControl.AccessControlType>vengono sostituite le regole per l&quot;utente specificato con la regola specificata.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType>       Se non esistono regole il cui utente e <xref:System.Security.AccessControl.AccessControlType>corrispondono alla regola specificata, `rule` viene aggiunto.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example shows how the SetAccessRule method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, replacing them with `rule`.  \n  \n The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the SetAccessRule method to replace the existing <xref:System.Security.AccessControl.AccessControlType> rule with the new rule. The rule that denies access is not affected.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule#1](~/add/codesnippet/visualbasic/2e843fc0-0bf3-426e-ae6b-_1.vb)]\n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule#1](~/add/codesnippet/csharp/2e843fc0-0bf3-426e-ae6b-_1.cs)]"
  syntax:
    content: public void SetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;></xref> to add. L&quot;utente e <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> di questa regola determinano le regole da rimuovere prima di aggiunta questa regola."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  id: SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  langs:
  - csharp
  name: SetAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Rimuove tutte le regole con lo stesso utente della regola specificata, indipendentemente di controllo di <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> valore e quindi aggiunge la regola specificata."
  remarks: "Se non sono presenti regole di controllo il cui utente corrisponde a quello della regola specificata, `rule` viene aggiunto."
  syntax:
    content: public void SetAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.EventWaitHandleAuditRule
      description: "The <xref href=&quot;System.Security.AccessControl.EventWaitHandleAuditRule&quot;></xref> to add. L&quot;utente specificato da questa regola determina le regole da rimuovere prima di aggiungere questa regola."
  overload: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.NativeObjectSecurity
  isExternal: false
  name: System.Security.AccessControl.NativeObjectSecurity
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: EventWaitHandleSecurity()
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity()
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity()
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  nameWithType: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleAuditRule
  nameWithType: EventWaitHandleAuditRule
  fullName: System.Security.AccessControl.EventWaitHandleAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  nameWithType: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleAll(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleAll(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: ResetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAccessRule(EventWaitHandleAccessRule)
  nameWithType: EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(EventWaitHandleAccessRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule)
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAuditRule(EventWaitHandleAuditRule)
  nameWithType: EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
  fullName: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(EventWaitHandleAuditRule)
- uid: System.Security.AccessControl.EventWaitHandleSecurity.#ctor*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: EventWaitHandleSecurity
  nameWithType: EventWaitHandleSecurity.EventWaitHandleSecurity
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRightType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: EventWaitHandleSecurity.AccessRightType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleFactory
  nameWithType: EventWaitHandleSecurity.AccessRuleFactory
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: EventWaitHandleSecurity.AccessRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAccessRule
  nameWithType: EventWaitHandleSecurity.AddAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AddAuditRule
  nameWithType: EventWaitHandleSecurity.AddAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleFactory
  nameWithType: EventWaitHandleSecurity.AuditRuleFactory
- uid: System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleType*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: EventWaitHandleSecurity.AuditRuleType
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRule
  nameWithType: EventWaitHandleSecurity.RemoveAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleAll
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleAll
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific
  nameWithType: EventWaitHandleSecurity.RemoveAccessRuleSpecific
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRule
  nameWithType: EventWaitHandleSecurity.RemoveAuditRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleAll
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleAll
- uid: System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific
  nameWithType: EventWaitHandleSecurity.RemoveAuditRuleSpecific
- uid: System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: ResetAccessRule
  nameWithType: EventWaitHandleSecurity.ResetAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAccessRule
  nameWithType: EventWaitHandleSecurity.SetAccessRule
- uid: System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule*
  parent: System.Security.AccessControl.EventWaitHandleSecurity
  isExternal: false
  name: SetAuditRule
  nameWithType: EventWaitHandleSecurity.SetAuditRule
