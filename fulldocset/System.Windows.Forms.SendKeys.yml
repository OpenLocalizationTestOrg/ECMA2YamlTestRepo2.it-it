### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.SendKeys
  id: SendKeys
  children:
  - System.Windows.Forms.SendKeys.Flush
  - System.Windows.Forms.SendKeys.Send(System.String)
  - System.Windows.Forms.SendKeys.SendWait(System.String)
  langs:
  - csharp
  name: SendKeys
  nameWithType: SendKeys
  fullName: System.Windows.Forms.SendKeys
  type: Class
  summary: "Fornisce metodi per l&quot;invio di sequenze di tasti a un&quot;applicazione."
  remarks: "Utilizzare SendKeys per inviare sequenze di tasti all&quot;applicazione attiva. Questa classe non può essere creata un&quot;istanza. Per inviare una sequenza di tasti a una classe e procedere immediatamente con il flusso di programma, utilizzare <xref:System.Windows.Forms.SendKeys.Send%2A>.</xref:System.Windows.Forms.SendKeys.Send%2A> Per attendere tutti i processi avviati dalla sequenza di tasti, utilizzare <xref:System.Windows.Forms.SendKeys.SendWait%2A>.</xref:System.Windows.Forms.SendKeys.SendWait%2A>       Ogni chiave è rappresentato da uno o più caratteri. Per specificare un singolo carattere della tastiera, usare il carattere stesso. Ad esempio, per rappresentare la lettera A, passare la stringa &quot;A&quot; al metodo. Per rappresentare più di un carattere, aggiungere ogni carattere aggiuntivo a quello precedente. Per rappresentare le lettere A, B e C, specificare il parametro come &quot;ABC&quot;.       Il segno più (+), accento circonflesso (^), segno di percentuale (%), tilde (~) e parentesi () hanno un significato speciale per SendKeys. Per specificare uno di questi caratteri, racchiuderlo tra parentesi graffe ({}). Ad esempio, per specificare il segno più, è possibile usare {+}&quot;. Per specificare i caratteri parentesi graffa, utilizzare &quot;{{} e {}}&quot;. Parentesi quadre ([]) non hanno alcun significato speciale per SendKeys, ma è necessario racchiuderle tra parentesi graffe. In altre applicazioni, le parentesi quadre hanno un significato speciale che potrebbe essere significativo quando si verifica dinamico dei dati (DDE).      > [!CAUTION] > Se l&quot;applicazione è destinata a livello internazionale con un&quot;ampia gamma di tastiere, l&quot;utilizzo di <xref:System.Windows.Forms.SendKeys.Send%2A>potrebbe generare risultati imprevedibili e deve essere evitata.</xref:System.Windows.Forms.SendKeys.Send%2A>       Per specificare i caratteri che non vengono visualizzati quando si preme un tasto, ad esempio l&quot;invio o TAB e chiavi che rappresentano azioni anziché i caratteri, utilizzare i codici nella tabella seguente.      | Chiave | Codice |   |---------|----------|   | BACKSPACE | {BACKSPACE}, {BS,} o {Backspace} |   | INTERROMPI | {INTERROMPI} |   | TASTO BLOC MAIUSC ATTIVO | {CAPSLOCK} |   | CANC o Cancella | {DELETE} o {CANC} |   | FRECCIA GIÙ | {VERSO IL BASSO} |   | FINE | {FINE} |   | IMMETTERE | {Immettere} o ~ |   | ESC | {ESC} |   | GUIDA | {GUIDA} |   | HOME | {CASA} |   | INS o Inserisci | {INSERIRE} o {aggiuntivi} |   | FRECCIA SINISTRA | {LEFT} |   | BLOC NUM | {BLOCNUM} |   | SPOSTARSI VERSO IL BASSO | {PGGIÙ} |   | SPOSTARSI VERSO L&quot;ALTO | {PGSU} |   | STAMP | {CONTRASSEGNATO DA PRTSCN} (riservato per utilizzi futuri) |   | FRECCIA DESTRA | {RIGHT} |   | BLOC SCORR | {BLOC SCORR} |   | SCHEDA | {SCHEDA} |   | FRECCIA IN SU | {FINO} |   | F1 | {F1} |   | F2 | {F2} |   | F3 | {F3} |   | F4 | {F4} |   | F5 | {F5} |   | F6 | {F6} |   | F7 | {F7} |   | F8 | {F8} |   | F9 | {F9} |   | F10 | {F10} |   | F11 | {F11} |   | F12 | {F12} |   | F13 | {F13} |   | F14 | {F14} |   | F15 | {F15} |   | F16 | {F16} |   | Aggiungere tastierino | {AGGIUNGERE} |   | Tasto sottrazione | {SOTTRARRE} |   | Tasto moltiplicazione | {MOLTIPLICARE} |   | Tasto divisione | {DIVIDERE} |       Per specificare tasti in combinazione con qualsiasi combinazione del MAIUSC, CTRL e ALT, anteporre il codice con uno o più dei seguenti codici.      | Chiave | Codice |   |---------|----------|   | MAIUSC | + |   | CTRL | ^ |   | ALT | % |       Per specificare che qualsiasi combinazione dei tasti MAIUSC, CTRL e ALT deve essere mantenuta verso il basso, mentre altri tasti vengono premuti, racchiudere il codice per le chiavi tra parentesi. Ad esempio, per specificare tenere premuto MAIUSC mentre viene premuto E e C, usare &quot;+ (CE)&quot;. Per specificare tenere premuto MAIUSC mentre viene premuto E, seguito da C senza MAIUSC, utilizzare &quot;+ EC&quot;.       Per specificare la ripetizione di tasti, utilizzare il modulo {numero chiave}. È necessario inserire uno spazio tra chiave e il numero. {LEFT 42} significa, ad esempio, premere il tasto freccia sinistra 42 volte; {h 10} significa premere che h 10 volte.      > [!NOTE] > Perché non è disponibile alcun metodo gestito per attivare un&quot;altra applicazione, è possibile utilizzare questa classe all&quot;interno dell&quot;applicazione corrente o utilizzare i metodi Windows nativi, ad esempio `FindWindow` e `SetForegroundWindow`, per forzare lo stato attivo su altre applicazioni.      > [!NOTE] > SendKeys la classe è stata aggiornata per .NET Framework 3.0 per consentirne l&quot;utilizzo nelle applicazioni eseguite in Windows Vista. La sicurezza avanzata di Windows Vista (noto come controllo dell&quot;Account utente o controllo dell&quot;account utente) impedisce la precedente implementazione di funzionare come previsto.   >> La classe SendKeys è soggetta a problemi di temporizzazione, che alcuni sviluppatori hanno dovuto risolvere. L&quot;implementazione aggiornata è ancora soggetta a problemi di temporizzazione, ma è leggermente più veloce e può richiedere modifiche alle soluzioni alternative. La classe SendKeys prima tenta di utilizzare l&quot;implementazione precedente e, se il problema persiste, Usa la nuova implementazione. Di conseguenza, la classe SendKeys può comportarsi in modo diverso in sistemi operativi diversi. Inoltre, quando la classe SendKeys utilizza la nuova implementazione di <xref:System.Windows.Forms.SendKeys.SendWait%2A>metodo non deve attendere i messaggi da elaborare quando vengono inviati a un altro processo.</xref:System.Windows.Forms.SendKeys.SendWait%2A>   >> Se l&quot;applicazione si basa su un comportamento coerente indipendentemente dal sistema operativo, è possibile forzare la classe SendKeys da usare la nuova implementazione aggiungendo la seguente impostazione applicazione al file app. config.   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Per forzare la classe SendKeys per usare l&quot;implementazione precedente, utilizzare il valore `&quot;JournalHook&quot;` invece."
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.SendKeys.Send%2A> method. To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/t-system.windows.forms.s_16_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/t-system.windows.forms.s_16_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/t-system.windows.forms.s_16_1.vb)]"
  syntax:
    content: public class SendKeys
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Flush
  id: Flush
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Elabora tutti i messaggi di Windows attualmente nella coda di messaggi."
  remarks: "Utilizzare lo scaricamento di attesa per l&quot;applicazione elaborare le sequenze di tasti e altri messaggi del sistema operativo presenti nella coda di messaggi. Questo è equivalente alla chiamata <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>fino a quando non sono presenti più chiavi per l&quot;elaborazione.</xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>      > [!NOTE] > Perché non è disponibile alcun metodo gestito per attivare un&quot;altra applicazione, è possibile utilizzare questa classe all&quot;interno dell&quot;applicazione corrente o utilizzare i metodi Windows nativi, ad esempio `FindWindow` e `SetForegroundWindow`, per forzare lo stato attivo su altre applicazioni."
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Windows.Forms.SendKeys.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  id: Send(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Invia sequenze di tasti all&quot;applicazione attiva."
  remarks: "Ogni chiave è rappresentato da uno o più caratteri. Per specificare un singolo carattere della tastiera, usare il carattere stesso. Ad esempio, per rappresentare la lettera A, passare la stringa &quot;A&quot; al metodo. Per rappresentare più di un carattere, aggiungere ogni carattere aggiuntivo a quello precedente. Per rappresentare le lettere A, B e C, specificare il parametro come &quot;ABC&quot;.       Il segno più (+), accento circonflesso (^), segno di percentuale (%), tilde (~) e parentesi () hanno un significato speciale per <xref:System.Windows.Forms.SendKeys>.</xref:System.Windows.Forms.SendKeys> Per specificare uno di questi caratteri, racchiuderlo tra parentesi graffe ({}). Ad esempio, per specificare il segno più, è possibile usare {+}&quot;. Per specificare i caratteri parentesi graffa, utilizzare &quot;{{} e {}}&quot;. Le parentesi quadre ([]) hanno un significato speciale per <xref:System.Windows.Forms.SendKeys>, ma è necessario racchiuderle tra parentesi graffe.</xref:System.Windows.Forms.SendKeys> In altre applicazioni, le parentesi quadre hanno un significato speciale che potrebbe essere significativo quando si verifica dinamico dei dati (DDE).      > [!CAUTION] > Se l&quot;applicazione è destinata a livello internazionale con un&quot;ampia gamma di tastiere, l&quot;utilizzo di trasmissione potrebbe generare risultati imprevedibili e deve essere evitato.       Per specificare i caratteri che non vengono visualizzati quando si preme un tasto, ad esempio l&quot;invio o TAB e chiavi che rappresentano azioni anziché i caratteri, utilizzare i codici nella tabella seguente.      | Chiave | Codice |   |---------|----------|   | BACKSPACE | {BACKSPACE}, {BS,} o {Backspace} |   | INTERROMPI | {INTERROMPI} |   | TASTO BLOC MAIUSC ATTIVO | {CAPSLOCK} |   | CANC o Cancella | {DELETE} o {CANC} |   | FRECCIA GIÙ | {VERSO IL BASSO} |   | FINE | {FINE} |   | IMMETTERE | {Immettere} o ~ |   | ESC | {ESC} |   | GUIDA | {GUIDA} |   | HOME | {CASA} |   | INS o Inserisci | {INSERIRE} o {aggiuntivi} |   | FRECCIA SINISTRA | {LEFT} |   | BLOC NUM | {BLOCNUM} |   | SPOSTARSI VERSO IL BASSO | {PGGIÙ} |   | SPOSTARSI VERSO L&quot;ALTO | {PGSU} |   | STAMP | {CONTRASSEGNATO DA PRTSCN} (riservato per utilizzi futuri) |   | FRECCIA DESTRA | {RIGHT} |   | BLOC SCORR | {BLOC SCORR} |   | SCHEDA | {SCHEDA} |   | FRECCIA IN SU | {FINO} |   | F1 | {F1} |   | F2 | {F2} |   | F3 | {F3} |   | F4 | {F4} |   | F5 | {F5} |   | F6 | {F6} |   | F7 | {F7} |   | F8 | {F8} |   | F9 | {F9} |   | F10 | {F10} |   | F11 | {F11} |   | F12 | {F12} |   | F13 | {F13} |   | F14 | {F14} |   | F15 | {F15} |   | F16 | {F16} |   | Aggiungere tastierino | {AGGIUNGERE} |   | Tasto sottrazione | {SOTTRARRE} |   | Tasto moltiplicazione | {MOLTIPLICARE} |   | Tasto divisione | {DIVIDERE} |       Per specificare tasti in combinazione con qualsiasi combinazione del MAIUSC, CTRL e ALT, anteporre il codice con uno o più dei seguenti codici.      | Chiave | Codice |   |---------|----------|   | MAIUSC | + |   | CTRL | ^ |   | ALT | % |       Per specificare che qualsiasi combinazione dei tasti MAIUSC, CTRL e ALT deve essere mantenuta verso il basso, mentre altri tasti vengono premuti, racchiudere il codice per le chiavi tra parentesi. Ad esempio, per specificare tenere premuto MAIUSC mentre viene premuto E e C, usare &quot;+ (CE)&quot;. Per specificare tenere premuto MAIUSC mentre viene premuto E, seguito da C senza MAIUSC, utilizzare &quot;+ EC&quot;.       Per specificare la ripetizione di tasti, utilizzare il modulo {numero chiave}. È necessario inserire uno spazio tra chiave e il numero. {LEFT 42} significa, ad esempio, premere il tasto freccia sinistra 42 volte; {h 10} significa premere che h 10 volte.      > [!NOTE] > Perché non è disponibile alcun metodo gestito per attivare un&quot;altra applicazione, è possibile utilizzare questa classe all&quot;interno dell&quot;applicazione corrente o utilizzare i metodi Windows nativi, ad esempio `FindWindow` e `SetForegroundWindow`, per forzare lo stato attivo su altre applicazioni.      > [!NOTE] > La <xref:System.Windows.Forms.SendKeys>classe è stata aggiornata per .NET Framework 3.0 per consentirne l&quot;utilizzo nelle applicazioni eseguite in Windows Vista.</xref:System.Windows.Forms.SendKeys> La sicurezza avanzata di Windows Vista (noto come controllo dell&quot;Account utente o controllo dell&quot;account utente) impedisce la precedente implementazione di funzionare come previsto.   >> Di <xref:System.Windows.Forms.SendKeys>classe è soggetta a problemi di temporizzazione, alcuni sviluppatori hanno dovuto risolvere.</xref:System.Windows.Forms.SendKeys> L&quot;implementazione aggiornata è ancora soggetta a problemi di temporizzazione, ma è leggermente più veloce e può richiedere modifiche alle soluzioni alternative. La <xref:System.Windows.Forms.SendKeys>classe prima tenta di utilizzare l&quot;implementazione precedente e, se il problema persiste, Usa la nuova implementazione.</xref:System.Windows.Forms.SendKeys> Di conseguenza, la <xref:System.Windows.Forms.SendKeys>classe può comportarsi in modo diverso in sistemi operativi diversi.</xref:System.Windows.Forms.SendKeys> Inoltre, quando la <xref:System.Windows.Forms.SendKeys>classe utilizza la nuova implementazione di <xref:System.Windows.Forms.SendKeys.SendWait%2A>metodo non deve attendere i messaggi da elaborare quando vengono inviati a un altro processo.</xref:System.Windows.Forms.SendKeys.SendWait%2A> </xref:System.Windows.Forms.SendKeys>   >> Se l&quot;applicazione si basa su un comportamento coerente indipendentemente dal sistema operativo, è possibile forzare la <xref:System.Windows.Forms.SendKeys>classe da usare la nuova implementazione aggiungendo la seguente impostazione applicazione al file app. config.</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Per forzare la <xref:System.Windows.Forms.SendKeys>classe per utilizzare l&quot;implementazione precedente, utilizzare il valore `&quot;JournalHook&quot;` invece.</xref:System.Windows.Forms.SendKeys>"
  example:
  - "The following code example demonstrates how to use the Send method.To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/m-system.windows.forms.s_9_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/m-system.windows.forms.s_9_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/m-system.windows.forms.s_9_1.vb)]"
  syntax:
    content: public static void Send (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "La stringa di sequenze di tasti da inviare."
  overload: System.Windows.Forms.SendKeys.Send*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Non è un&quot;applicazione attiva per l&quot;invio di sequenze di tasti."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keys</code>non rappresenta sequenze di tasti valide"
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  id: SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Invia i tasti indicati all&quot;applicazione attiva e attende quindi i messaggi da elaborare."
  remarks: "Utilizzare SendWait per inviare le sequenze di tasti o combinazioni di tasti all&quot;applicazione attiva e attendere i messaggi della sequenza di tasti da elaborare. È possibile utilizzare questo metodo per inviare sequenze di tasti a un&quot;applicazione e attendere i processi avviati da sequenze di tasti per il completamento. Questo può essere importante se l&quot;altra applicazione deve essere completata prima di continua l&quot;applicazione.      > [!NOTE] > Perché non è disponibile alcun metodo gestito per attivare un&quot;altra applicazione, è possibile utilizzare questa classe all&quot;interno dell&quot;applicazione corrente o utilizzare i metodi Windows nativi, ad esempio `FindWindow` e `SetForegroundWindow`, per forzare lo stato attivo su altre applicazioni.      > [!NOTE] > La <xref:System.Windows.Forms.SendKeys>classe è stata aggiornata per .NET Framework 3.0 per consentirne l&quot;utilizzo nelle applicazioni eseguite in Windows Vista.</xref:System.Windows.Forms.SendKeys> La sicurezza avanzata di Windows Vista (noto come controllo dell&quot;Account utente o controllo dell&quot;account utente) impedisce la precedente implementazione di funzionare come previsto.   >> Di <xref:System.Windows.Forms.SendKeys>classe è soggetta a problemi di temporizzazione, alcuni sviluppatori hanno dovuto risolvere.</xref:System.Windows.Forms.SendKeys> L&quot;implementazione aggiornata è ancora soggetta a problemi di temporizzazione, ma è leggermente più veloce e può richiedere modifiche alle soluzioni alternative. La <xref:System.Windows.Forms.SendKeys>classe prima tenta di utilizzare l&quot;implementazione precedente e, se il problema persiste, Usa la nuova implementazione.</xref:System.Windows.Forms.SendKeys> Di conseguenza, la <xref:System.Windows.Forms.SendKeys>classe può comportarsi in modo diverso in sistemi operativi diversi.</xref:System.Windows.Forms.SendKeys> Inoltre, quando la <xref:System.Windows.Forms.SendKeys>classe utilizza la nuova implementazione, il metodo SendWait non attenderà messaggi possono essere elaborati quando vengono inviati a un altro processo.</xref:System.Windows.Forms.SendKeys>   >> Se l&quot;applicazione si basa su un comportamento coerente indipendentemente dal sistema operativo, è possibile forzare la <xref:System.Windows.Forms.SendKeys>classe da usare la nuova implementazione aggiungendo la seguente impostazione applicazione al file app. config.</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> Per forzare la <xref:System.Windows.Forms.SendKeys>classe per utilizzare l&quot;implementazione precedente, utilizzare il valore `&quot;JournalHook&quot;` invece.</xref:System.Windows.Forms.SendKeys>"
  syntax:
    content: public static void SendWait (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "La stringa di sequenze di tasti da inviare."
  overload: System.Windows.Forms.SendKeys.SendWait*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.SendKeys.Flush
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
- uid: System.Windows.Forms.SendKeys.Flush*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush
  nameWithType: SendKeys.Flush
- uid: System.Windows.Forms.SendKeys.Send*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send
  nameWithType: SendKeys.Send
- uid: System.Windows.Forms.SendKeys.SendWait*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait
  nameWithType: SendKeys.SendWait
