### YamlMime:ManagedReference
items:
- uid: System.Configuration.SettingsProvider
  id: SettingsProvider
  children:
  - System.Configuration.SettingsProvider.#ctor
  - System.Configuration.SettingsProvider.ApplicationName
  - System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  - System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  langs:
  - csharp
  name: SettingsProvider
  nameWithType: SettingsProvider
  fullName: System.Configuration.SettingsProvider
  type: Class
  summary: "Funge da classe base per la derivazione di provider di impostazioni personalizzati nell&quot;architettura Impostazioni applicazione."
  remarks: "Un provider di impostazioni definisce il meccanismo per archiviare i dati di configurazione utilizzati nell&quot;architettura Impostazioni applicazione. .NET Framework contiene un solo impostazioni provider predefinito, <xref:System.Configuration.LocalFileSettingsProvider>, che archivia i dati di configurazione per il file system locale.</xref:System.Configuration.LocalFileSettingsProvider> Tuttavia, è possibile creare meccanismi di archiviazione alternativo derivandolo dalla classe astratta SettingsProvider. Il provider utilizzato da una classe wrapper viene determinato tramite la classe wrapper con <xref:System.Configuration.SettingsProviderAttribute>.</xref:System.Configuration.SettingsProviderAttribute> Se questo attributo viene omesso, il valore predefinito, <xref:System.Configuration.LocalFileSettingsProvider>, viene utilizzato.</xref:System.Configuration.LocalFileSettingsProvider>       Quando si crea un provider di impostazioni personalizzate, come minimo, è necessario fornire implementazioni per i tre metodi di questa classe: <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A> <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A>e <xref:System.Configuration.SettingsProvider.ApplicationName%2A>.</xref:System.Configuration.SettingsProvider.ApplicationName%2A> </xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> </xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>       Per le applicazioni client, è possibile aggiungere altre funzionalità standard per un provider personalizzato anche implementando il <xref:System.Configuration.IApplicationSettingsProvider>interfaccia.</xref:System.Configuration.IApplicationSettingsProvider> Mirroring dei metodi, vedere il <xref:System.Configuration.ApplicationSettingsBase>(classe), che consente principalmente di supporto delle versioni.</xref:System.Configuration.ApplicationSettingsBase>       In genere, è consigliabile progettare i provider di impostazioni di istanza singola per evitare conflitti di risorse di archiviazione. I provider devono inoltre essere thread-safe, perché può essere chiamati simultaneamente da più istanze di wrapper in un singolo dominio applicazione o da più applicazioni in domini diversi.       Come minimo, un provider di impostazioni deve riconoscere i tre attributi:<xref:System.Configuration.ApplicationScopedSettingAttribute>, <xref:System.Configuration.UserScopedSettingAttribute>e <xref:System.Configuration.DefaultSettingValueAttribute>.</xref:System.Configuration.DefaultSettingValueAttribute> </xref:System.Configuration.UserScopedSettingAttribute> </xref:System.Configuration.ApplicationScopedSettingAttribute> Per un elenco completo degli attributi che possono essere applicati alle impostazioni dell&quot;applicazione, vedere [gli attributi di impostazioni applicazione](~/add/includes/ajax-current-ext-md.md). Un provider di impostazioni personalizzato deve risolvere gli attributi applicati alle proprietà delle impostazioni nel modo seguente: 1.  Se il provider può soddisfare la richiesta in cui è inclusa l&quot;attributo, ovviamente, è necessario farlo.      2.  Se il provider non è possibile soddisfare la richiesta, è necessario ignorarla automaticamente.      3.  Se due o più proprietà in conflitto; ad esempio, una proprietà viene decorata con entrambi <xref:System.Configuration.ApplicationScopedSettingAttribute>e <xref:System.Configuration.UserScopedSettingAttribute>; il provider deve generare un <xref:System.Configuration.ConfigurationException>.</xref:System.Configuration.ConfigurationException> </xref:System.Configuration.UserScopedSettingAttribute> </xref:System.Configuration.ApplicationScopedSettingAttribute>"
  syntax:
    content: 'public abstract class SettingsProvider : System.Configuration.Provider.ProviderBase'
  inheritance:
  - System.Object
  - System.Configuration.Provider.ProviderBase
  implements: []
  inheritedMembers:
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.#ctor
  id: '#ctor'
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: SettingsProvider()
  nameWithType: SettingsProvider.SettingsProvider()
  fullName: System.Configuration.SettingsProvider.SettingsProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Inizializza un&quot;istanza di <xref href=&quot;System.Configuration.SettingsProvider&quot;> </xref> classe."
  remarks: "Questo è il costruttore protetto predefinito per questa classe astratta. I provider di impostazioni personalizzato derivato non è necessario fornire un costruttore esplicito perché il <xref:System.Configuration.Provider.ProviderBase.Initialize%2A>metodo esegue in genere l&quot;inizializzazione tutti.</xref:System.Configuration.Provider.ProviderBase.Initialize%2A>       Il codice client in genere non creino direttamente un provider di impostazioni. Utilizzare invece la procedura seguente per trovare un provider di impostazioni per una determinata proprietà delle impostazioni: 1.  Chiamare il <xref:System.ComponentModel.Component.GetService%2A>metodo corrente <xref:System.ComponentModel.Component>o <xref:System.ComponentModel.ISite>per restituire un riferimento all&quot;oggetto corrente <xref:System.Configuration.ISettingsProviderService>.</xref:System.Configuration.ISettingsProviderService> </xref:System.ComponentModel.ISite> </xref:System.ComponentModel.Component> </xref:System.ComponentModel.Component.GetService%2A>      2.  Chiamare il <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A>metodo il <xref:System.Configuration.ISettingsProviderService>recuperato nel primo passaggio per restituire il provider di impostazioni.</xref:System.Configuration.ISettingsProviderService> </xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A>"
  syntax:
    content: protected SettingsProvider ();
    parameters: []
  overload: System.Configuration.SettingsProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.ApplicationName
  id: ApplicationName
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
  fullName: System.Configuration.SettingsProvider.ApplicationName
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Ottiene o imposta il nome dell&quot;applicazione attualmente in esecuzione."
  remarks: "ApplicationName e <xref:System.Configuration.Provider.ProviderBase.Name%2A>consentono di risolvere l&quot;ambiguità in modo analogo denominata impostazione delle proprietà in applicazioni diverse.</xref:System.Configuration.Provider.ProviderBase.Name%2A>"
  syntax:
    content: public abstract string ApplicationName { get; set; }
    return:
      type: System.String
      description: "Oggetto <xref:System.String>che contiene nome abbreviato dell&quot;applicazione, che non contiene un percorso completo o l&quot;estensione, ad esempio, `SimpleAppSettings`.</xref:System.String>"
  overload: System.Configuration.SettingsProvider.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  id: GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Restituisce la raccolta di impostazioni di valori di proprietà per il gruppo di proprietà istanza e le impostazioni dell&quot;applicazione specificato."
  remarks: "Il metodo GetPropertyValues deve essere implementato per gestire le impostazioni speciali, quelli contrassegnati con <xref:System.Configuration.SpecialSettingAttribute>, nonché risolvere le differenze tra applicazioni e le impostazioni utente.</xref:System.Configuration.SpecialSettingAttribute>"
  syntax:
    content: public abstract System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection collection);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "Oggetto <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref> che descrive l&quot;utilizzo dell&quot;applicazione corrente."
    - id: collection
      type: System.Configuration.SettingsPropertyCollection
      description: "Oggetto <xref href=&quot;System.Configuration.SettingsPropertyCollection&quot;> </xref> contenente il gruppo di impostazioni di proprietà i cui valori devono essere recuperate."
    return:
      type: System.Configuration.SettingsPropertyValueCollection
      description: "Oggetto <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;> </xref> contenente i valori per il gruppo di proprietà delle impostazioni specificate."
  overload: System.Configuration.SettingsProvider.GetPropertyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  id: SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Imposta i valori delle impostazioni delle proprietà del gruppo specificato."
  remarks: "<xref:System.Configuration.ApplicationSettingsBase>contiene il <xref:System.Configuration.ApplicationSettingsBase.Save%2A>metodo, che viene chiamato per mantenere i valori di tutte le proprietà delle impostazioni.</xref:System.Configuration.ApplicationSettingsBase.Save%2A></xref:System.Configuration.ApplicationSettingsBase> Questo metodo enumera tutti i provider di impostazioni associati alle proprietà delle impostazioni e chiama il metodo SetPropertyValues per ogni <xref:System.Configuration.SettingsProvider>per eseguire l&quot;operazione di serializzazione effettiva.</xref:System.Configuration.SettingsProvider>       Il metodo SetPropertyValues deve essere implementato con particolare attenzione alla sicurezza: - solo completamente attendibili codice deve essere consentito per aggiornare le impostazioni dell&quot;applicazione. Codice parzialmente attendibile deve essere consentito l&quot;aggiornamento solo le impostazioni dell&quot;applicazione. Codice non attendibile non è in genere possibile aggiornare le impostazioni dell&quot;applicazione.      -Le quote di utilizzo devono essere considerati come salvaguardarsi da attacchi di risorse da applicazioni parzialmente attendibili."
  syntax:
    content: public abstract void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection collection);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "Oggetto <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref> che descrive l&quot;utilizzo dell&quot;applicazione corrente."
    - id: collection
      type: System.Configuration.SettingsPropertyValueCollection
      description: "Oggetto <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;> </xref> che rappresenta il gruppo di impostazioni delle proprietà da impostare."
  overload: System.Configuration.SettingsProvider.SetPropertyValues*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: System.Configuration.Provider.ProviderBase
- uid: System.Configuration.SettingsProvider.#ctor
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SettingsProvider()
  nameWithType: SettingsProvider.SettingsProvider()
  fullName: System.Configuration.SettingsProvider.SettingsProvider()
- uid: System.Configuration.SettingsProvider.ApplicationName
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
  fullName: System.Configuration.SettingsProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
- uid: System.Configuration.SettingsPropertyValueCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyValueCollection
  nameWithType: SettingsPropertyValueCollection
  fullName: System.Configuration.SettingsPropertyValueCollection
- uid: System.Configuration.SettingsContext
  parent: System.Configuration
  isExternal: false
  name: SettingsContext
  nameWithType: SettingsContext
  fullName: System.Configuration.SettingsContext
- uid: System.Configuration.SettingsPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyCollection
  nameWithType: SettingsPropertyCollection
  fullName: System.Configuration.SettingsPropertyCollection
- uid: System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
- uid: System.Configuration.SettingsProvider.#ctor*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SettingsProvider
  nameWithType: SettingsProvider.SettingsProvider
- uid: System.Configuration.SettingsProvider.ApplicationName*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
- uid: System.Configuration.SettingsProvider.GetPropertyValues*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: GetPropertyValues
  nameWithType: SettingsProvider.GetPropertyValues
- uid: System.Configuration.SettingsProvider.SetPropertyValues*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SetPropertyValues
  nameWithType: SettingsProvider.SetPropertyValues
