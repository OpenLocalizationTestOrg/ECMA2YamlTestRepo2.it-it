### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSource
  id: LinqDataSource
  children:
  - System.Web.UI.WebControls.LinqDataSource.#ctor
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  - System.Web.UI.WebControls.LinqDataSource.AutoPage
  - System.Web.UI.WebControls.LinqDataSource.AutoSort
  - System.Web.UI.WebControls.LinqDataSource.ContextCreated
  - System.Web.UI.WebControls.LinqDataSource.ContextCreating
  - System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  - System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  - System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  - System.Web.UI.WebControls.LinqDataSource.CreateView
  - System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Deleted
  - System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  - System.Web.UI.WebControls.LinqDataSource.Deleting
  - System.Web.UI.WebControls.LinqDataSource.EnableDelete
  - System.Web.UI.WebControls.LinqDataSource.EnableInsert
  - System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  - System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  - System.Web.UI.WebControls.LinqDataSource.GroupBy
  - System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  - System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Inserted
  - System.Web.UI.WebControls.LinqDataSource.Inserting
  - System.Web.UI.WebControls.LinqDataSource.InsertParameters
  - System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OrderBy
  - System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  - System.Web.UI.WebControls.LinqDataSource.Select
  - System.Web.UI.WebControls.LinqDataSource.Selected
  - System.Web.UI.WebControls.LinqDataSource.Selecting
  - System.Web.UI.WebControls.LinqDataSource.SelectParameters
  - System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  - System.Web.UI.WebControls.LinqDataSource.TableName
  - System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Updated
  - System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  - System.Web.UI.WebControls.LinqDataSource.Updating
  - System.Web.UI.WebControls.LinqDataSource.Where
  - System.Web.UI.WebControls.LinqDataSource.WhereParameters
  langs:
  - csharp
  name: LinqDataSource
  nameWithType: LinqDataSource
  fullName: System.Web.UI.WebControls.LinqDataSource
  type: Class
  summary: "Consente l&quot;utilizzo di Language-Integrated Query (LINQ) in una pagina Web ASP.NET tramite testo di markup per recuperare e modificare i dati da un oggetto dati."
  remarks: "In questo argomento:- [Introduzione](#introduction)      -   [ordine delle operazioni](#order_of_operations)      -   [dati di ordinamento](#ordering_data)      -   [raggruppamento di dati](#grouping_data)      -   [le modifiche dei dati](#data_modifications)      -   [la valutazione di valori in fase di esecuzione](#evaluating_value_at_run_time)      -   [utilizzo di Stored procedure](#working_with_stored_procedures)      -   [sintassi dichiarativa](#declarative_syntax) <a name=&quot;introduction&quot;> </a> # # Introduction Language-Integrated Query (LINQ) è una sintassi di query che definisce un set di operatori di query che consentono di esprimere in modo dichiarativo in qualsiasi operazioni di attraversamento, filtro e proiezione. Linguaggio di programmazione basato su NET.       L&quot;oggetto dati può essere una raccolta di dati in memoria o un oggetto che rappresenta i dati da un database. È possibile recuperare o modificare i dati senza dover scrivere comandi SQL per ogni operazione.       Il controllo LinqDataSource consente di utilizzare LINQ in una pagina Web ASP.NET impostando le proprietà nel testo di markup. Il controllo LinqDataSource Usa LINQ to SQL per generare automaticamente i comandi di dati. Per ulteriori informazioni su LINQ to SQL, vedere [LINQ to SQL](~/add/includes/ajax-current-ext-md.md).       Quando si recuperano dati da una raccolta di dati in memoria, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>proprietà alla classe che contiene la raccolta di dati.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Impostare il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>proprietà alla proprietà o campo che restituisce la raccolta dei dati.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Ad esempio, potrebbe essere una classe denominata `Person` che contiene una proprietà denominata `FavoriteCities` che restituisce una matrice di valori stringa. In tal caso, si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>proprietà `Person` e impostare il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>proprietà `FavoriteCities`.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       Quando si esegue la query un database, è necessario prima creare classi di entità che rappresentano il database e le relative tabelle. È possibile utilizzare il [!INCLUDE[vs_ordesigner_long](~/add/includes/vs-ordesigner-long-md.md)] o l&quot;utilità SqlMetal.exe per generare queste classi. Impostare quindi la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>proprietà alla classe che rappresenta il database e impostare il <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>proprietà per la proprietà che rappresenta la tabella di database.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      <a name=&quot;order_of_operations&quot;></a># # Ordine delle operazioni di LinqDataSource (controllo) applica le operazioni su dati nell&quot;ordine seguente: 1.  In (specifica per restituire i record di dati).      2.  Order By (ordinamento).      3.  Group By (record di aggregazione di dati che condividono valori).      4.  Ordinare i gruppi per (ordinare raggruppati i dati).      5.  Selezionare (specificare quali campi o proprietà da restituire).      6.  Auto-sort (Ordina i record di dati da una proprietà che l&quot;utente ha selezionato).      7.  Pagina automatica (recuperare un subset di record di dati che sono stati selezionati dall&quot;utente).       È possibile aggiungere condizioni per il <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>proprietà da filtrare i record di dati restituiti da una query.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Se il <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>non è impostata, il controllo LinqDataSource recupera tutti i record dall&quot;oggetto dati.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>      <a name=&quot;ordering_data&quot;></a># # Ordinamento di dati si utilizza il <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>proprietà per specificare i nomi di proprietà di ordinamento dei dati restituiti.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>      > [!NOTE] > Quando si utilizza il controllo LinqDataSource con [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] o [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] e <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>è impostata su `true`, è necessario fornire un valore di <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Per impostazione predefinita, il <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>proprietà `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Se si assegna un valore per il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà, è necessario includere anche tutte le colonne di identità nell&quot;elenco di proprietà che viene restituito nella query.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>      <a name=&quot;grouping_data&quot;></a># # Raggruppamento di dati si utilizza il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>proprietà per specificare quali proprietà vengono utilizzate per consolidare i record di dati che hanno gli stessi valori.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Quando si raggruppano i dati, è possibile includere `Key` e `It`, che vengono create dinamicamente le proprietà, nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Il `Key` proprietà fa riferimento ai valori le proprietà utilizzati per raggruppare i dati. Ad esempio, se vengono raggruppati in base a una proprietà denominata `Category`, `Key` proprietà conterrà tutti i valori univoci di `Category` proprietà. Il `It` proprietà fa riferimento a una raccolta di singoli record in un raggruppamento di dati. È possibile scorrere il `It` proprietà per recuperare i singoli record che sono stati consolidati nell&quot;operazione di raggruppamento. Ad esempio, se vengono raggruppati in base a una proprietà denominata `Category`, `It` proprietà contiene tutti i singoli record che condividono un valore comune nella `Category` proprietà.       Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>proprietà per specificare le proprietà da utilizzare per ordinare i dati raggruppati.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> Quando si raggruppano i dati, il <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>proprietà specifica la modalità di ordinamento singoli record all&quot;interno dei dati raggruppati.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Per impostazione predefinita, il controllo LinqDataSource recupera i valori per tutte le proprietà da un oggetto dati. Utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà per specificare le proprietà per restituire se si desidera utilizzare un subset delle proprietà disponibili.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> L&quot;operazione di selezione viene applicata dopo Where, Order By e Group By operazioni. Pertanto, se si crea un nome alias nella clausola Select, l&quot;alias non è disponibile in altre clausole.      <a name=&quot;data_modifications&quot;></a># # Le modifiche ai dati è possibile specificare se le modifiche dei dati vengono abilitate usando il <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, e <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> L&quot;interfaccia utente per la modifica dei dati da un controllo LinqDataSource viene in genere specificato tramite un controllo con associazione a dati, ad esempio un <xref:System.Web.UI.WebControls.DetailsView>controllo.</xref:System.Web.UI.WebControls.DetailsView> Oltre all&quot;impostazione <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, o <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>a `true`, le condizioni seguenti sono necessari per consentire le modifiche dei dati automatico: - il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà non può essere assegnato un valore.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>      -La <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>proprietà non può essere assegnato un valore.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>      -La classe che viene assegnata alla <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>proprietà deve derivare da <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      -La proprietà che viene assegnata alla <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>proprietà deve derivare da <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> </xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       È possibile limitare le proprietà visualizzate in un controllo con associazione a dati in due modi. È possibile impostare il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà a un subset di proprietà oppure è possibile definire i campi per un controllo con associazione a dati aggiungendo <xref:System.Web.UI.WebControls.DataControlField>controlli.</xref:System.Web.UI.WebControls.DataControlField> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Tuttavia, se si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà, significa che non è possibile abilitare l&quot;aggiornamento automatico, insert e le operazioni di eliminazione.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Se si desidera abilitare le modifiche dei dati automatico mentre si lavora con un subset delle proprietà disponibili, non impostare la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> In alternativa, recuperare tutte le proprietà dall&quot;oggetto dati e gestire quelli visualizzati usando il controllo con associazione a dati. Quando si utilizza il <xref:System.Web.UI.WebControls.DetailsView>controllo o <xref:System.Web.UI.WebControls.GridView>(controllo), è necessario impostare anche la <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>o <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>proprietà `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> Ciò impedisce che il controllo associato a dati inclusi automaticamente i pulsanti per la modifica e l&quot;eliminazione dei dati. Tutti i valori non vengono visualizzati nel controllo con associazione a dati vengono archiviati nello stato di visualizzazione. Vengono passati invariati all&quot;origine dati quando viene eseguito l&quot;aggiornamento dei dati.      <a name=&quot;evaluating_value_at_run_time&quot;></a># # Valutazione dei valori in fase di esecuzione se è necessario valutare i valori in fase di esecuzione per l&quot;ordinamento, filtro, o i valori di raggruppamento, è possibile aggiungere parametri per il <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, o <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>raccolte.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>       Se si desidera specificare i valori predefiniti, è possibile aggiungere parametri per il <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>insieme.</xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>       Se si desidera esaminare o modificare i valori prima dell&quot;esecuzione dell&quot;operazione di dati, è possibile gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, o <xref:System.Web.UI.WebControls.LinqDataSource.Updating>eventi.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Inserting> </xref:System.Web.UI.WebControls.LinqDataSource.Deleting> È anche possibile gestire questi eventi per annullare l&quot;operazione di dati o per esaminare gli errori di convalida che si è verificato quando si impostano le proprietà nella classe di dati in base all&quot;input utente.       Per esaminare i valori dopo il completamento l&quot;operazione di dati, gestire il <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, o <xref:System.Web.UI.WebControls.LinqDataSource.Updated>eventi.</xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted>      <a name=&quot;working_with_stored_procedures&quot;></a># #. Utilizzo di Stored procedure è utilizzare il controllo LinqDataSource per recuperare dati da una stored procedure mediante la creazione di un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>evento.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Nell&quot;evento gestore, si chiama il metodo nella classe del contesto dati che rappresenta la stored procedure e impostare il risultato di <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>oggetto.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> Se si desidera abilitare l&quot;aggiornamento automatico, insert e le operazioni di eliminazione per i dati, il tipo restituito dal metodo deve corrispondere al tipo specificato nella <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Per ulteriori informazioni sulla creazione di metodi di contesto dati, vedere [procedura: creare DataContext metodi con mappati a stored procedure e funzioni (O/R Designer)](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;declarative_syntax&quot;></a># # Sintassi dichiarativa <CodeContentPlaceHolder>0</CodeContentPlaceHolder>"
  example:
  - "The following example shows a LinqDataSource control that retrieves data from an entity class named `Products`. The entity class could have been generated by using the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility. The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50. A <xref:System.Web.UI.WebControls.GridView> control is bound to the LinqDataSource control to display the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_1.aspx)]  \n  \n The following example shows a LinqDataSource control that enables users to update, delete, and insert records in the data source. A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the LinqDataSource control and enables users to see and modify the data. Notice that no SQL commands are required in order to select, update, delete, or insert the records.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_2.aspx)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_3.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_3.vb)]  \n  \n The following example shows a LinqDataSource control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed (aliased) to `Products`. The renamed `Products` object contains a collection of the individual records in a grouping. Each instance will contain all the columns from the `Products` table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_4.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the LinqDataSource control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_5.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_5.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("ContextTypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  - System.Web.UI.WebControls.QueryableDataSource
  - System.Web.UI.WebControls.ContextDataSource
  implements:
  - System.Web.DynamicData.IDynamicDataSource
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  - System.Web.UI.WebControls.ContextDataSource.EntitySetName
  - System.Web.UI.WebControls.ContextDataSource.EntityTypeName
  - System.Web.UI.WebControls.QueryableDataSource.GetView(System.String)
  - System.Web.UI.WebControls.QueryableDataSource.GetViewNames
  - System.Web.UI.WebControls.QueryableDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.QueryableDataSource.QueryCreated
  - System.Web.UI.WebControls.QueryableDataSource.RaiseViewChanged
  - System.Web.UI.WebControls.QueryableDataSource.SaveViewState
  - System.Web.UI.WebControls.QueryableDataSource.TrackViewState
  - System.Web.UI.WebControls.QueryableDataSource.UpdateParameterVales
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> classe."
  syntax:
    content: public LinqDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.LinqDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  id: AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta un valore che indica se il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controllo crea dinamicamente una clausola Order By in base ai valori di <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>insieme.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>"
  remarks: "Quando si imposta la proprietà AutoGenerateOrderByClause su `true`, <xref:System.Web.UI.WebControls.LinqDataSource>controllo crea dinamicamente una clausola Order By è basata sui valori di <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>insieme.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo Ordina i dati dal primo parametro, quindi ordina inoltre i dati per ogni parametro aggiuntivo.</xref:System.Web.UI.WebControls.LinqDataSource> I parametri che contengono `null` o un valore vuoto non sono inclusi nella clausola Order By.       Non si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>proprietà quando il AutoGenerateOrderByClause è impostato su `true`, perché il parser crea dinamicamente una clausola Order By.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo genera un&quot;eccezione se il AutoGenerateOrderByClause è impostata su `true` e <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>proprietà vengono assegnati valori.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateOrderByClause set to `true`. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_120_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_120_1.aspx)]"
  syntax:
    content: public bool AutoGenerateOrderByClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controllo crea la clausola Order By; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  id: AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta un valore che indica se il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controllo crea dinamicamente una clausola Where clausola in base ai valori definiti nel <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>insieme.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>"
  remarks: "Quando si imposta la proprietà AutoGenerateWhereClause su `true`, <xref:System.Web.UI.WebControls.LinqDataSource>controllo crea dinamicamente Where clausola dai parametri di <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>insieme.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Ogni parametro che viene aggiunto per il <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>raccolta deve contenere il <xref:System.Web.UI.WebControls.Parameter.Name%2A>proprietà è impostata su un valore che corrisponde a una proprietà nell&quot;oggetto dati che viene eseguita la query.</xref:System.Web.UI.WebControls.Parameter.Name%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Generato automaticamente in clausola controllerà se il valore specificato nel <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>insieme è uguale al valore della proprietà corrispondente nell&quot;oggetto dati.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Se si specifica più di un parametro, i parametri sono collegati con una logica `AND` operazione. I parametri che contengono `null` o un valore vuoto non sono inclusi in Where clausola.       Generato automaticamente <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>clausola può verificare solo per verificarne l&quot;uguaglianza e può collegare i parametri solo con il `AND` operazione.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Non impostare la proprietà AutoGenerateWhereClause su `true` se è necessario aggiungere una condizione che non verifica l&quot;uguaglianza o se è necessario correlare i parametri con il `OR` operazione. È possibile eseguire queste attività impostando la proprietà AutoGenerateWhereClause su `false` e aggiungendo dei segnaposto nella <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>proprietà per ogni parametro di <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>insieme.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Nel <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>proprietà, anteporre il nome di ogni segnaposto con il simbolo @.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       Non si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>proprietà quando la proprietà AutoGenerateWhereClause è `true`, poiché il parser crea dinamicamente Where clausola.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo genera un&quot;eccezione se la proprietà AutoGenerateWhereClause è `true` e <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>proprietà vengono assegnati valori.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateWhereClause set to `true`. A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query. A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object. Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control. The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control. The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/csharp/p-system.web.ui.webcontr_223_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_223_1.aspx)]"
  syntax:
    content: public bool AutoGenerateWhereClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controllo crea la clausola; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  id: AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta un valore che indica se il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controllo supporta la navigazione tra le sezioni dei dati in fase di esecuzione."
  remarks: "Impostare la proprietà AutoPage `true` per abilitare il paging nel <xref:System.Web.UI.WebControls.LinqDataSource>controllo.</xref:System.Web.UI.WebControls.LinqDataSource> Per consentire all&quot;utente di spostarsi tra i dati, connettere un controllo con associazione a dati che fornisce l&quot;interfaccia per il paging di <xref:System.Web.UI.WebControls.LinqDataSource>controllo.</xref:System.Web.UI.WebControls.LinqDataSource> Quando la proprietà di AutoPage è impostata su `true`, <xref:System.Web.UI.WebControls.LinqDataSource>controllo recupera solo numero sufficiente di record per una pagina nel controllo associato a dati.</xref:System.Web.UI.WebControls.LinqDataSource> Usa il <xref:System.Linq.Enumerable.Skip%2A>e <xref:System.Linq.Enumerable.Take%2A>metodi per recuperare i record per la pagina corrente.</xref:System.Linq.Enumerable.Take%2A> </xref:System.Linq.Enumerable.Skip%2A>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoPage property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_959_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_959_1.aspx)]"
  syntax:
    content: public bool AutoPage { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;utente può spostarsi tra i dati. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  id: AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta un valore che indica se il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controllo supporta l&quot;ordinamento dei dati in fase di esecuzione."
  remarks: "Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo supporta due approcci per l&quot;ordinamento dei dati.</xref:System.Web.UI.WebControls.LinqDataSource> È possibile utilizzare la proprietà di ordinamento per abilitare l&quot;ordinamento in fase di esecuzione o è possibile impostare il <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>proprietà per definire l&quot;ordinamento in fase di progettazione.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Impostare la proprietà di ordinamento su `true` per abilitare l&quot;ordinamento un <xref:System.Web.UI.WebControls.LinqDataSource>controllo basato sull&quot;espressione di ordinamento di un controllo con associazione a dati.</xref:System.Web.UI.WebControls.LinqDataSource> Il controllo con associazione a dati fornisce l&quot;interfaccia per consentire all&quot;utente di selezionare in fase di esecuzione, la proprietà da utilizzare per l&quot;ordinamento.       È possibile impostare a livello di codice l&quot;ordine in cui vengono restituiti i dati impostando la <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>proprietà per le proprietà utilizzate per l&quot;ordinamento.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Quando il <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>è impostata su una proprietà e la proprietà di ordinamento automatico è `true`, l&quot;espressione di ordinamento dal controllo con associazione a dati viene applicata dopo l&quot;espressione nel <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Pertanto, questo determina l&quot;ordinamento finale dei dati."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoSort property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_766_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_766_1.aspx)]"
  syntax:
    content: public bool AutoSort { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;utente può ordinare i dati. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  id: ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Si verifica quando viene creata un&quot;istanza dell&quot;oggetto di tipo di contesto."
  remarks: "Gestire l&quot;evento ContextCreated per esaminare l&quot;oggetto di tipo di contesto o le eccezioni generate durante la creazione dell&quot;oggetto. Recuperare l&quot;oggetto del tipo di contesto dal <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>oggetto associato a questo evento.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Recuperare l&quot;eccezione generata durante l&quot;operazione di dati dal <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>       L&quot;oggetto di tipo di contesto viene creato durante select, update, insert e le operazioni di eliminazione e viene riutilizzato in tutta la richiesta.       È presente una sola volta quando non viene generato l&quot;evento. È quando è impostata a livello di codice il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>proprietà a un oggetto durante il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>evento.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Una condizione aggiuntiva è che i valori originali non è necessario archiviare lo stato di visualizzazione o l&quot;oggetto di <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>implementa proprietà di <xref:System.Data.Linq.ITable>interfaccia.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> ContextCreated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  id: ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Si verifica prima che viene creata un&quot;istanza dell&quot;oggetto di tipo di contesto."
  remarks: "Per impostazione predefinita, il <xref:System.Web.UI.WebControls.LinqDataSource>controllo crea un&quot;istanza del tipo specificato nella <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo chiama il costruttore predefinito dell&quot;oggetto di contesto dati per creare un&quot;istanza dell&quot;oggetto.</xref:System.Web.UI.WebControls.LinqDataSource> È possibile che è necessario utilizzare un costruttore non predefinito o se è necessario creare un oggetto diverso da quello specificato nella <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> In tal caso, è necessario gestire l&quot;evento ContextCreating e creare manualmente l&quot;oggetto di contesto dati.       L&quot;oggetto di tipo di contesto viene creato durante select, update, insert e le operazioni di eliminazione.       È presente una sola volta quando non viene generato l&quot;evento. Questo è quando si imposta a livello di codice il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>proprietà a un oggetto in un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>evento.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Una condizione aggiuntiva è che i valori originali non è necessario archiviare lo stato di visualizzazione o l&quot;oggetto di <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>implementa proprietà di <xref:System.Data.Linq.ITable>interfaccia.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  example:
  - "The following example shows how to create the data context object by using a non-default constructor during the ContextCreating event. The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_153_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_153_1.vb)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs> ContextCreating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  id: ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Si verifica prima dell&quot;eliminazione dell&quot;oggetto di tipo di contesto."
  remarks: "Gestire l&quot;evento ContextDisposing per eliminare manualmente l&quot;oggetto o per eseguire la pulizia è specifico per l&quot;oggetto prima dell&quot;oggetto eliminato."
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs> ContextDisposing;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  id: ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta il nome del tipo che contiene la proprietà il cui valore include i dati che si desidera recuperare."
  remarks: "Quando si utilizza il <xref:System.Web.UI.WebControls.LinqDataSource>per recuperare dati da una raccolta di dati in memoria o da un database di controllo, è necessario specificare due proprietà.</xref:System.Web.UI.WebControls.LinqDataSource> Il primo è una classe del contesto dati che rappresenta l&quot;origine dati. La seconda è una proprietà nella classe del contesto dati che contiene i dati. Il nome della classe del contesto dati è impostata la proprietà ContextTypeName e si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>proprietà nella raccolta di dati che contiene i dati.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Ad esempio, quando si recuperano dati da un database, impostare la proprietà ContextTypeName il nome della classe che rappresenta il database. Impostare inoltre la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>proprietà per la proprietà che rappresenta la tabella nel database.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Per generare classi da un database, utilizzare il [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] o l&quot;utilità SqlMetal.exe per generare automaticamente tali classi.       Quando si recuperano dati da una raccolta di dati in memoria, ad esempio una matrice, impostare la proprietà ContextTypeName al nome della classe che contiene la proprietà della matrice. Impostare quindi la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>proprietà per la proprietà che ottiene la matrice.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Per abilitare l&quot;aggiornamento automatico, inserire o eliminare le operazioni tramite il <xref:System.Web.UI.WebControls.LinqDataSource>controllo, la classe assegnata alla proprietà ContextTypeName deve derivare da <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource> Inoltre, la proprietà è assegnata la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>proprietà deve derivare da <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> </xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Se si non necessario per abilitare l&quot;aggiornamento automatico, inserire o eliminare le operazioni, è possibile assegnare il nome di qualsiasi tipo di classe per la proprietà ContextTypeName.       Per informazioni su come selezionare i dati da un&quot;istanza di una classe, vedere il <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows how to set the ContextTypeName property to a class that contains an array of strings. It also shows how to set the property to a class (generated by the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]) that represents a database.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_2.vb)]"
  syntax:
    content: public override string ContextTypeName { get; set; }
    return:
      type: System.String
      description: "Il nome della classe per recuperare i dati."
  overload: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  id: CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Restituisce una visualizzazione di query."
  syntax:
    content: protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.QueryableDataSourceView
      description: "Visualizzazione di un tipo queryable."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  id: CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Crea una nuova istanza di <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceView&quot;> </xref> classe associata a questo controllo."
  remarks: "Per fornire una visualizzazione personalizzata, è possibile eseguire l&quot;override di questo metodo in una classe derivata."
  syntax:
    content: protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.LinqDataSourceView
      description: "Oggetto che funge da interfaccia per i controlli con associazione a dati."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  id: Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Esegue un&quot;operazione di eliminazione."
  remarks: "In genere, non si dispone di chiamare il metodo Delete dal codice. Quando si utilizza un <xref:System.Web.UI.WebControls.LinqDataSource>con un controllo con associazione a dati, il controllo associato a dati chiamerà il metodo Delete automaticamente quando l&quot;utente esegue un&quot;operazione per eliminare un record.</xref:System.Web.UI.WebControls.LinqDataSource> Chiamare in modo esplicito il metodo Delete quando si desidera creare un processo personalizzato per l&quot;eliminazione dei dati. Ad esempio, è possibile chiamare il metodo Delete quando si desidera eliminare un record in base a un evento all&quot;esterno del controllo con associazione a dati."
  syntax:
    content: public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "Valori di chiave di riga per i record da eliminare."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "I valori di riga che vengono valutati per rilevare i conflitti di dati."
    return:
      type: System.Int32
      description: "Il numero di record interessati dall&quot;operazione di eliminazione."
  overload: System.Web.UI.WebControls.LinqDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Si verifica quando un&quot;operazione di eliminazione completata."
  remarks: "Gestire l&quot;evento Deleted per rilevare eventuali eccezioni dell&quot;operazione di eliminazione o per esaminare i parametri di output al termine dell&quot;operazione. È possibile recuperare i parametri di output dal <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>oggetto passato ai gestori di eventi.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Deleted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Questa proprietà non viene utilizzata il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> classe."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Una raccolta di parametri."
  overload: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Si verifica prima di un&quot;operazione di eliminazione."
  remarks: "Gestire l&quot;evento di eliminazione per convalidare l&quot;oggetto da eliminare, esaminare gli errori di convalida di dati della classe di dati, per modificare un valore prima dell&quot;operazione di eliminazione o annullare l&quot;operazione di eliminazione. Il <xref:System.Web.UI.WebControls.LinqDataSource>il controllo passa un <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>oggetto ai gestori eventi per l&quot;evento di eliminazione in corso.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSource> Il <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>oggetto contiene i dati che verranno eliminati e consentono di annullare l&quot;operazione di eliminazione.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Se la classe dei dati genera un <xref:System.Web.UI.WebControls.LinqDataSourceValidationException>eccezione, il <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>oggetto contiene tale eccezione nella <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceValidationException>       Se viene generata un&quot;eccezione in un gestore eventi per l&quot;evento di eliminazione, è necessario gestire l&quot;eccezione nel gestore eventi. L&quot;eccezione non verrà passata al gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>evento (tramite la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>oggetto).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> Il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>proprietà contiene solo le eccezioni che vengono generate dopo l&quot;evento di eliminazione in corso.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Deleting event. The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page. In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_77_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_77_1.cs)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Deleting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  id: EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta un valore che indica se i record di dati possono essere eliminati tramite il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controllo."
  remarks: "Impostare la proprietà EnableDelete `true` quando si desidera consentire agli utenti di eliminare un record di dati tramite il <xref:System.Web.UI.WebControls.LinqDataSource>controllo.</xref:System.Web.UI.WebControls.LinqDataSource> Quando EnableDelete è `true`, <xref:System.Web.UI.WebControls.LinqDataSource>controllo Usa LINQ to SQL per creare automaticamente il comando per eliminare i dati.</xref:System.Web.UI.WebControls.LinqDataSource> È necessario includere un&quot;interfaccia che consente agli utenti di selezionare un record da eliminare, ad esempio un <xref:System.Web.UI.WebControls.DetailsView>controllo.</xref:System.Web.UI.WebControls.DetailsView>       Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo non supporta le operazioni di eliminazione automatica quando il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>proprietà è impostata.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> In tal caso, il <xref:System.Web.UI.WebControls.LinqDataSource>controllo genera un&quot;eccezione se si tenta un&quot;operazione di eliminazione.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableDelete set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_368_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_368_1.aspx)]"
  syntax:
    content: public bool EnableDelete { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se sono abilitate le operazioni di eliminazione automatica. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  id: EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta un valore che indica se possono essere inseriti i record dei dati tramite il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controllo."
  remarks: "Impostare la proprietà EnableInsert `true` quando si desidera consentire agli utenti di inserire un nuovo record di dati tramite il <xref:System.Web.UI.WebControls.LinqDataSource>controllo.</xref:System.Web.UI.WebControls.LinqDataSource> Quando EnableInsert è `true`, <xref:System.Web.UI.WebControls.LinqDataSource>controllo Usa LINQ to SQL per creare automaticamente il comando per inserire i dati.</xref:System.Web.UI.WebControls.LinqDataSource> È necessario includere un&quot;interfaccia che consente agli utenti di inserire un nuovo record, ad esempio un <xref:System.Web.UI.WebControls.DetailsView>controllo.</xref:System.Web.UI.WebControls.DetailsView>       Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo non supporta le operazioni di inserimento automatico quando il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>proprietà è impostata.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> In tal caso, il <xref:System.Web.UI.WebControls.LinqDataSource>controllo genera un&quot;eccezione se si tenta un&quot;operazione di inserimento.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableInsert set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1142_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1142_1.aspx)]"
  syntax:
    content: public bool EnableInsert { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se le operazioni di inserimento automatico sono abilitate; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  id: EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta il valore che indica se vengono rilevate le modifiche apportate all&quot;oggetto di contesto dei dati."
  remarks: "La proprietà EnableObjectTracking viene utilizzata solo quando si selezionano dati da un oggetto di contesto dati LINQ To SQL.       Quando si interagisce con i dati di sola lettura, imposta la proprietà EnableObjectTracking `false` migliora le prestazioni poiché i dati non è stato memorizzato nella cache per determinare se è stato modificato. Tuttavia, anche Disabilita esecuzione posticipata delle query. Questa proprietà deve essere impostata su `true` se si desidera utilizzare l&quot;esecuzione posticipata delle query."
  syntax:
    content: public bool EnableObjectTracking { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;oggetto di contesto dati viene tenuta traccia delle modifiche; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  id: EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta un valore che indica se i record di dati possono essere aggiornati tramite il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> controllo."
  remarks: "Impostare la proprietà EnableUpdate `true` quando si desidera consentire agli utenti di aggiornare un record di dati utilizzando il <xref:System.Web.UI.WebControls.LinqDataSource>controllo.</xref:System.Web.UI.WebControls.LinqDataSource> Quando EnableUpdate è `true`, <xref:System.Web.UI.WebControls.LinqDataSource>controllo Usa LINQ to SQL per creare automaticamente il comando per aggiornare i dati.</xref:System.Web.UI.WebControls.LinqDataSource> È necessario includere un&quot;interfaccia che consente agli utenti di aggiornare un record, ad esempio un <xref:System.Web.UI.WebControls.DetailsView>controllo.</xref:System.Web.UI.WebControls.DetailsView>       Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo non supporta le operazioni di aggiornamento automatico quando il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>proprietà è impostata.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> In tal caso, il <xref:System.Web.UI.WebControls.LinqDataSource>controllo genera un&quot;eccezione se si tenta un&quot;operazione di aggiornamento.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableUpdate set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_116_1.aspx)]"
  syntax:
    content: public bool EnableUpdate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se le operazioni di aggiornamento automatico sono abilitate; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  id: GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta un valore che specifica quali proprietà vengono utilizzate per raggruppare i dati recuperati."
  remarks: "La proprietà GroupBy per specificare quali proprietà vengono utilizzate per consolidare i record di dati che hanno gli stessi valori. Ad esempio, se si imposta la proprietà GroupBy `Name`, tutti i record nella query che hanno lo stesso `Name` valore della proprietà vengono restituiti come un singolo record consolidato.       È possibile assegnare più di una proprietà per la proprietà GroupBy includendo tutte le proprietà di `new` funzione e separandole con una virgola. Ad esempio, per raggruppare le proprietà `Name` e quindi `Category`, impostare la proprietà GroupBy `new(Name, Category)`.       I valori di proprietà che vengono utilizzati per il raggruppamento vengono restituiti tramite una proprietà generata denominata `Key`. Includere il `Key` proprietà la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà per recuperare i valori raggruppati.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> È possibile impostare il `Key` proprietà a un alias utilizzando il `As` (parola chiave), ma non è necessario utilizzare un alias. Ad esempio, è possibile impostare la proprietà GroupBy per una proprietà denominata `Category`. È possibile recuperare i valori consolidati dal `Category` proprietà impostando il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà `new(Key As ProductCategory)`.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       È possibile accedere ai singoli record in un raggruppamento includendo il `It` proprietà la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Il `It` proprietà contiene una raccolta di record che condividono un valore nella proprietà raggruppata. È possibile scorrere il `It` proprietà per recuperare i singoli record.       La proprietà GroupBy viene spesso utilizzata con i metodi di aggregazione. È possibile utilizzare i metodi di aggregazione seguenti:- `Count()`       -    `Average(` *colonna* `)`       -    `Sum(` *colonna* `)`       -    `Max(` *colonna* `)`       -    `Min(` *colonna* `)`       -    `Where(` *condizione* `)`       -    `Any()`       -    `All(` *condizione* `)` per ulteriori informazioni, vedere [NIB: Panoramica del controllo Server Web LinqDataSource](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) e [come: gruppo e aggregazione di dati mediante LinqDataSource Controllo](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af)."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`. It returns the shared values and calculates the average price for the grouped records.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_1.aspx)]  \n  \n The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed `Products`. The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_2.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_3.aspx)]"
  syntax:
    content: public string GroupBy { get; set; }
    return:
      type: System.String
      description: "Stringa che viene utilizzata per creare la clausola Group By."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  id: GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene la raccolta di parametri utilizzati per creare la clausola Group By."
  remarks: "Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo utilizza i parametri nella raccolta GroupByParameters per creare la clausola Group By in fase di esecuzione.</xref:System.Web.UI.WebControls.LinqDataSource> In genere, non viene utilizzato l&quot;insieme di GroupByParameters per raggruppare i dati. In alternativa, è possibile utilizzare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Utilizzare la raccolta GroupByParameters solo quando un valore nella clausola Group By deve essere impostato in fase di esecuzione e che il valore non sia un nome di proprietà. Ad esempio, utilizzare l&quot;insieme di GroupByParameters per raggruppare i dati a seconda che il `LastName` proprietà nei record di dati è uguale a un valore fornito dall&quot;utente.       Se si desidera raggruppare i dati da una proprietà e tale proprietà non deve essere impostata in fase di esecuzione, è possibile definire le proprietà di raggruppamento nella <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Ad esempio, per restituire i valori da una tabella di database raggruppato `LastName`, impostare <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>su &quot;LastName&quot; senza parametri.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Se si desidera raggruppare i dati in modo dinamico da una proprietà, creare un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>evento e personalizzare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>proprietà in base alle esigenze.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting>       È possibile assegnare il nome di una proprietà come valore per un parametro nella raccolta GroupByParameters. Aggiungere parametri alla raccolta GroupByParameters quando si desidera aggiungere una condizione per il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>proprietà che deve essere impostata in fase di esecuzione.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       Per impostare i valori nella raccolta GroupByParameters, assegnare un nome a ogni parametro e quindi aggiungere un segnaposto nel <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>proprietà per ogni parametro denominato.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Nella clausola Group By, anteporre ogni nome di parametro con il simbolo @."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "I parametri utilizzati per creare la clausola Group By."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  id: Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Esegue un&quot;operazione di inserimento."
  remarks: "In genere, non si dispone di chiamare il metodo Insert dal codice. Il controllo associato a dati chiamerà il metodo Insert automaticamente quando l&quot;utente esegue un&quot;operazione per inserire un nuovo record. Chiamare in modo esplicito il metodo di inserimento quando si desidera creare un processo personalizzato per l&quot;inserimento di dati."
  example:
  - "The following example shows how to programmatically insert a new record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the Insert method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_2.aspx)]"
  syntax:
    content: public int Insert (System.Collections.IDictionary values);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "I valori di riga da inserire nell&quot;origine dati."
    return:
      type: System.Int32
      description: "Il numero di righe interessate dall&quot;operazione di inserimento."
  overload: System.Web.UI.WebControls.LinqDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Si verifica al termine di un&quot;operazione di inserimento."
  remarks: "Gestire l&quot;evento Inserted per rilevare eventuali eccezioni dall&quot;operazione di inserimento o per esaminare i valori al termine dell&quot;operazione di inserimento. È possibile recuperare i nuovi valori tramite la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>oggetto passato ai gestori di eventi.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Ad esempio, è possibile utilizzare il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>oggetto per recuperare la proprietà identity generata da un database per un nuovo record di dati.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  example:
  - "The following example shows how to create an event handler for the Inserted event that checks for exceptions and retrieves the identity property for the new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_96_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_96_1.aspx)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Inserted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Si verifica prima che un&quot;operazione di inserimento."
  remarks: "Gestire l&quot;evento di inserimento per convalidare l&quot;oggetto da inserire, esaminare gli errori di convalida di dati della classe di dati, per modificare un valore prima dell&quot;operazione di inserimento o di annullare l&quot;operazione di inserimento. Il <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>oggetto passate ai gestori eventi per questo evento contiene il nuovo oggetto da inserire nell&quot;origine dati.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>       Se si verifica un errore di convalida durante l&quot;operazione di inserimento, l&quot; <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>oggetto contiene le eccezioni di convalida che vengono generate dalla classe di dati.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Se un valore da inserire non corrisponde al tipo della proprietà nella classe di dati o se non ha superato il controllo di convalida personalizzato, si verifica un errore di convalida. In un gestore eventi per l&quot;evento di inserimento, è possibile recuperare le eccezioni di convalida e intraprendere l&quot;azione appropriata.       Se viene generata un&quot;eccezione in un gestore eventi per l&quot;evento di inserimento, è necessario gestire l&quot;eccezione nel gestore eventi. L&quot;eccezione non verrà passata al gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>evento (tramite la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>oggetto).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> Il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>proprietà contiene solo le eccezioni che vengono generate dopo l&quot;evento di inserimento.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Inserting event that modifies data before the insert operation. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_110_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_110_1.vb)]  \n  \n The following example shows an event handler for the Inserting event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Inserting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene la raccolta di parametri utilizzati durante un&quot;operazione di inserimento."
  remarks: "In genere vengono passati i valori necessari per un&quot;operazione di inserimento per il <xref:System.Web.UI.WebControls.LinqDataSource>controllo dal controllo con associazione a dati.</xref:System.Web.UI.WebControls.LinqDataSource> Specificare i parametri di inserimento quando si desidera specificare un valore predefinito di valore o definiscono se convertire i valori vuoti in `null`. Non è necessario specificare un parametro per ogni valore che verrà inserito solo per i valori che devono essere gestiti quando l&quot;utente non fornisce un valore.       I valori forniti nella raccolta InsertParameters vengono utilizzati solo per i campi definiti nell&quot;origine dati ma che non sono associati nel controllo dei dati. Ad esempio, si consideri una tabella di database con colonne denominate nome, indirizzo e PostalCode, ma un <xref:System.Web.UI.WebControls.ListView>associato alla tabella è associato solo per i campi nome e l&quot;indirizzo.</xref:System.Web.UI.WebControls.ListView> I valori nella raccolta InsertParameters da utilizzare solo per il campo PostalCode. Non verranno usati per il campo nome e l&quot;indirizzo. Questo vale anche se viene immesso alcun valore per tali campi. Se il controllo con associazione a dati genera automaticamente i campi per tutti i campi nell&quot;origine dati, non verranno utilizzati alcun valore dalla raccolta InsertParameters."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the InsertParameters collection. If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1053_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1053_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "I parametri utilizzati durante un&quot;operazione di inserimento."
  overload: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Inizializza il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> oggetto."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "I dati dell&quot;evento."
  overload: System.Web.UI.WebControls.LinqDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  id: OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Genera il <xref href=&quot;System.Web.UI.Control.Unload&quot;> </xref> evento."
  syntax:
    content: protected override void OnUnload (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Un <xref:System.EventArgs>oggetto che contiene i dati dell&quot;evento.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  id: OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta un valore che specifica quali campi vengono utilizzati per ordinare i dati recuperati."
  remarks: "Utilizzare la proprietà OrderBy per specificare le proprietà da utilizzare per l&quot;ordinamento dei dati restituiti. La proprietà per l&quot;ordinamento dei dati deve essere presente nell&quot;origine dati originale, ma non deve essere incluso nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> È possibile aggiungere uno spazio e `Ascending`, `ASC`, `Descending`, o `DESC` a una proprietà nella stringa di OrderBy per specificare la modalità in cui vengono restituiti i dati ordinati.       È possibile fornire più di una proprietà nella proprietà OrderBy separando ogni proprietà con una virgola. Ad esempio, all&quot;ordine da proprietà denominate `LastName` e `FirstName`, impostare la proprietà OrderBy su &quot;LastName, FirstName&quot;.      > [!NOTE] > Quando si utilizza il <xref:System.Web.UI.WebControls.LinqDataSource>controllare con [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] o [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] e <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>è impostata su `true`, è necessario fornire un valore della proprietà OrderBy.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Per impostazione predefinita, il <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>proprietà `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Se si assegna un valore per il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà, è necessario includere anche tutte le colonne di identità nell&quot;elenco di proprietà che viene restituito nella query.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Se il <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>è impostata su `true`, un controllo con associazione a dati è possibile passare un&quot;espressione di ordinamento per il <xref:System.Web.UI.WebControls.LinqDataSource>controllo in fase di esecuzione.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo applicherà l&quot;espressione di ordinamento dal controllo con associazione a dati dopo aver applicato la proprietà OrderBy.</xref:System.Web.UI.WebControls.LinqDataSource> Di conseguenza, i dati vengono restituiti dal controllo con associazione a dati in base all&quot;espressione di ordinamento."
  example:
  - "The following example returns data in reverse alphabetical order based on values in the `Category` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_348_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_348_1.aspx)]"
  syntax:
    content: public string OrderBy { get; set; }
    return:
      type: System.String
      description: "Stringa che viene utilizzata per creare la clausola Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  id: OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene la raccolta di parametri utilizzati per creare la clausola Order By."
  remarks: "Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo utilizza i parametri nella raccolta OrderByParameters per creare la clausola Order By in fase di esecuzione.</xref:System.Web.UI.WebControls.LinqDataSource> In genere si imposta la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>proprietà `true` quando si aggiungono parametri alla raccolta OrderByParameters.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Quando il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>è impostata su `true`, ogni parametro nella raccolta OrderByParameters viene aggiunto alla clausola Order By nella sequenza in cui sono specificati nella raccolta OrderByParameters.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Quando il <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>proprietà `true`, i parametri non devono essere denominati, perché vengono applicate in sequenza e non sono associati a un segnaposto.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>       Se non è necessario impostare un valore in fase di esecuzione nella clausola Order By, non è necessario utilizzare l&quot;insieme di OrderByParameters. È possibile definire i campi da utilizzare per ordinare i dati di <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Ad esempio, per restituire i valori da una tabella di database ordinati `LastName`, impostare <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>su &quot;LastName&quot; senza parametri.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       È possibile impostare i parametri nella raccolta OrderByParameters e corrispondere ai parametri ai segnaposto della <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>proprietà, ma questo approccio ha un&quot;applicazione limitata.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Quando si utilizza questo approccio, i parametri nella raccolta OrderByParameters non possono rappresentare un nome di colonna. È possibile impostare un parametro a un valore e quindi confrontare tale valore per i valori di una proprietà. Ad esempio, è possibile ordinare i dati in base che i valori in una proprietà è minore del valore in fase di esecuzione rappresentato dal parametro."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`. A parameter is included in the OrderByParameters collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_757_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_757_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "I parametri che vengono utilizzati per creare la clausola Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  id: OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta i campi che vengono utilizzati per ordinare i dati raggruppati."
  remarks: "La proprietà OrderGroupsBy per specificare la modalità di ordinamento di gruppi di dati. Ad esempio, è possibile raggruppare la `CategoryID` proprietà e ordinamento di gruppo per la media di ogni ID di categoria di `Price` proprietà.       È possibile impostare la proprietà OrderGroupsBy solo dopo aver raggruppato i dati. Se si imposta la proprietà OrderGroupsBy senza impostare il <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>proprietà, il <xref:System.Web.UI.WebControls.LinqDataSource>controllo genera un&quot;eccezione.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       La proprietà che viene utilizzata per ordinare i dati deve essere una proprietà che viene utilizzata per raggruppare i dati o il risultato di una funzione di aggregazione sui dati raggruppati. Per specificare la modalità di ordinamento dei dati, è possibile aggiungere uno spazio e la stringa &quot;Ascending&quot;, &quot;ASC&quot;, &quot;Descending&quot; o &quot;DESC&quot; su un nome di proprietà nella stringa di OrderGroupsBy.       È possibile specificare più di una proprietà nella proprietà OrderGroupsBy. Con una virgola per separare ogni proprietà."
  example:
  - "The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties. The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`. The grouped data is sorted by the `CategoryID` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_1.aspx)]  \n  \n The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function. The data from the `Products` table is grouped by using the `CategoryID` property. It is sorted based on the average of the `UnitPrice` property within each group.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_2.aspx)]"
  syntax:
    content: public string OrderGroupsBy { get; set; }
    return:
      type: System.String
      description: "Stringa che viene utilizzata per creare la clausola Order Groups By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  id: OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene la raccolta di parametri utilizzati per creare la clausola Order Groups By."
  remarks: "Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo utilizza i parametri nella raccolta OrderGroupsByParameters per creare la clausola Order Groups By in fase di esecuzione.</xref:System.Web.UI.WebControls.LinqDataSource>       È consigliabile aggiungere valori alla raccolta OrderGroupsByParameters solo quando è necessario impostare i valori in fase di esecuzione nella clausola Order Groups By. È possibile definire i campi che vengono utilizzati per ordinare i dati tramite il <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>       È possibile impostare i parametri nella raccolta OrderGroupsByParameters e corrispondere ai parametri ai segnaposto della <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> Tuttavia, quando si utilizza questo approccio, i parametri nella raccolta OrderGroupsByParameters non possono rappresentare un nome di colonna. rappresentano valori. È possibile impostare un parametro a un valore e quindi confrontare tale valore a una proprietà. Ad esempio, è possibile ordinare i dati in base che i valori in una proprietà è minore del valore in fase di esecuzione rappresentato dal parametro."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "I parametri utilizzati per creare la clausola Order Groups By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta le proprietà e i valori calcolati che sono inclusi nei dati recuperati."
  remarks: "Se non si imposta la proprietà, seleziona il <xref:System.Web.UI.WebControls.LinqDataSource>controllo recupera tutte le proprietà (colonne di dati) dall&quot;oggetto dati.</xref:System.Web.UI.WebControls.LinqDataSource> Utilizzare la proprietà Select per recuperare un subset delle proprietà dall&quot;oggetto o calcolare nuovi valori quando vengono recuperati i dati.       Specificare le proprietà da recuperare impostando la proprietà per i nomi delle proprietà che si desidera includere nei dati restituiti.       Se si recupera un subset delle proprietà dell&quot;oggetto dati, il <xref:System.Web.UI.WebControls.LinqDataSource>controllo crea dinamicamente una classe che contiene solo le proprietà specificate nella proprietà Select.</xref:System.Web.UI.WebControls.LinqDataSource> Viene creata anche una classe in modo dinamico se si calcolano le proprietà che non sono proprietà dell&quot;oggetto dati. In questi casi, l&quot;oggetto restituito dalla query non è un&quot;istanza della classe specificata nella <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> In alternativa, è necessario utilizzare il `new` metodo della proprietà per indicare che una nuova classe viene restituita dalla query Select. Ad esempio, per restituire solo il `FirstName` e `LastName` proprietà da un oggetto che contiene più di queste proprietà, impostare la proprietà `new(FirstName, LastName)`. Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo creerà dinamicamente la nuova classe specificata nella `new` metodo.</xref:System.Web.UI.WebControls.LinqDataSource>       È possibile utilizzare il `As` (parola chiave) per assegnare un alias a un valore selezionato. Se si assegna un alias, è necessario includere le proprietà con alias di `new` metodo. Qualsiasi controllo associato a dati che associa i risultati di <xref:System.Web.UI.WebControls.LinqDataSource>controllo deve fare riferimento alla proprietà l&quot;alias.</xref:System.Web.UI.WebControls.LinqDataSource> Ad esempio, se si imposta la proprietà su `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, il controllo con associazione a dati può accedere a due proprietà, `SalesRegion` e `RevenueThousands`.       Utilizzare il `new` funzione nella proprietà di selezione in base alle condizioni elencate nella tabella seguente.      | Selezionare | Utilizzo di new | Esempio |   |------------|----------------|-------------|   | Singola proprietà. | `new` non necessari. | `Select=&quot;Category&quot;`|   | Più proprietà. | `new` necessari. | `Select=&quot;new(Cateogry, Name)&quot;`|   | Una o più proprietà che dispone di un alias. | `new` necessari. | `Select=&quot;new(Category As CategoryGroup)&quot;`|       Se si desidera abilitare le modifiche dei dati automatico, ma non si desidera visualizzare tutte le proprietà dall&quot;oggetto dati, non impostare la proprietà Select. Gestire invece la visualizzazione tramite il controllo con associazione a dati. Quando si utilizza il <xref:System.Web.UI.WebControls.DetailsView>controllo o <xref:System.Web.UI.WebControls.GridView>(controllo), è necessario impostare anche la <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>o <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>proprietà `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> Tutti i valori non vengono visualizzati nel controllo con associazione a dati vengono archiviati nello stato di visualizzazione. Vengono passati invariati all&quot;origine dati quando viene eseguito l&quot;aggiornamento dei dati.       Quando si raggruppano i dati nella query, è possibile includere i metodi di aggregazione nella proprietà di Select. È possibile utilizzare i metodi di aggregazione seguenti:- `Count()`       -    `Average(` *colonna* `)`       -    `Sum(` *colonna* `)`       -    `Max(` *colonna* `)`       -    `Min(` *colonna* `)`       -    `Where(` *condizione* `)`       -    `Any()`       -    `All(` *condizione* `)` per ulteriori informazioni, vedere [NIB: Panoramica del controllo Server Web LinqDataSource](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) e [come: gruppo e aggregazione di dati mediante LinqDataSource Controllo](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af).       Quando si raggruppano i dati, è possibile includere `Key` e `It`, che vengono create dinamicamente le proprietà, nella proprietà selezionare. Il `Key` proprietà fa riferimento ai valori le proprietà utilizzati per raggruppare i dati. Ad esempio, se vengono raggruppati in base a una proprietà denominata `Category`, `Key` proprietà conterrà ogni valore univoco di `Category` proprietà. Il `It` proprietà fa riferimento a una raccolta di singoli record in un raggruppamento di dati. È possibile scorrere il `It` proprietà per recuperare i singoli record che sono stati consolidati nell&quot;operazione di raggruppamento. Ad esempio, se vengono raggruppati in base a una proprietà denominata `Category`, `It` proprietà contiene tutti i singoli record che condividono un valore comune nella `Category` proprietà.       Se si include il `It` parola chiave nella proprietà Select quando si raggruppano i dati, è necessario assegnare un alias per il `It` (parola chiave). Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo genererà un&quot;eccezione se `It` non dispone di un alias.</xref:System.Web.UI.WebControls.LinqDataSource> È possibile assegnare un alias per il `Key` (parola chiave), ma questo non è necessario."
  example:
  - "The following example shows how to set the Select property to a subset of properties in the data object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_1.aspx)]  \n  \n The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records. The `Key` keyword contains the property that has been used for grouping data. In this example, `Key` will contain the shared values from the `ProductCategory` property.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_2.aspx)]"
  syntax:
    content: public string Select { get; set; }
    return:
      type: System.String
      description: "Stringa che viene utilizzata per creare la clausola Select."
  overload: System.Web.UI.WebControls.LinqDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Si verifica al termine di un&quot;operazione di recupero di dati."
  remarks: "Gestire l&quot;evento selezionato per rilevare eventuali eccezioni dall&quot;operazione di recupero dei dati o per esaminare l&quot;oggetto dati al termine dell&quot;operazione. L&quot;oggetto è disponibile il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>oggetto passato ai gestori di eventi.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Selected;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Si verifica prima che un&quot;operazione di recupero dei dati."
  remarks: "Gestire l&quot;evento di selezione per eseguire le attività seguenti:-modificare i parametri per il recupero dei dati.      -Genera la query a livello di codice.      -Modificare i valori per l&quot;ordinamento o paging.      -Esegue un ordinamento personalizzato o paging.      -Annullare l&quot;operazione di recupero dei dati.       Il <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>oggetto passato ai gestori eventi per questo evento contiene i parametri per l&quot;operazione di recupero dei dati.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> È possibile modificare i parametri nel gestore eventi selezionando prima dell&quot;esecuzione della query oppure è possibile creare un nuovo set di risultati e assegnarlo al <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>       La possibilità di implementare personalizzate di ordinamento o paging nei gestori per questo evento potrebbe essere limitata dal controllo associato a <xref:System.Web.UI.WebControls.LinqDataSource>.</xref:System.Web.UI.WebControls.LinqDataSource> Ad esempio, quando l&quot;intestazione di colonna di un <xref:System.Web.UI.WebControls.GridView>si fa clic sul controllo, il controllo esegue l&quot;ordinamento automatico che potrebbe eseguire l&quot;override di qualsiasi ordine stabilito nel gestore eventi.</xref:System.Web.UI.WebControls.GridView>       Se viene generata un&quot;eccezione in un gestore eventi per l&quot;evento di selezione, è necessario gestire l&quot;eccezione nel gestore eventi. L&quot;eccezione non verrà passata al gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selected>evento (tramite la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>oggetto).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> Il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>proprietà contiene solo le eccezioni che vengono generate dopo l&quot;evento Selecting.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Selecting event. The handler creates a query that retrieves values from an array of string values in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/e-system.web.ui.webcontr_69_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_69_1.vb)]  \n  \n The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.  \n  \n [Visual Basic]  \n  \n```  \nProtected Sub LinqDataSource_Selecting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceSelectEventArgs)  \n    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  \n    e.Result = exampleContext.GetRegisteredCustomers()  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Selecting(object sender,   \n        LinqDataSourceSelectEventArgs e)  \n{  \n    ExampleDataContext exampleContext = new ExampleDataContext();  \n    e.Result = exampleContext.GetRegisteredCustomers();  \n}  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Selecting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene la raccolta di parametri utilizzati durante un&quot;operazione di recupero dei dati."
  remarks: "Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo utilizza i parametri nella raccolta SelectParameters per creare la clausola Select in fase di esecuzione.</xref:System.Web.UI.WebControls.LinqDataSource> Aggiungere parametri alla raccolta SelectParameters quando si desidera utilizzare valori di runtime nella clausola Select. Ad esempio, è possibile aggiungere un parametro alla raccolta SelectParameters per rappresentare una proprietà nel profilo dell&quot;utente. È quindi possibile utilizzare tale proprietà e un valore dall&quot;origine dati per calcolare un nuovo valore.       Se non è necessario impostare un valore in fase di esecuzione nella clausola Select, non è necessario utilizzare la raccolta SelectParameters. È possibile definire le proprietà da recuperare nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Ad esempio, per restituire il `FirstName` e `LastName` valori da una tabella di database, impostare <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>su &quot;FirstName, LastName&quot; senza parametri.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Per impostare i valori nella raccolta SelectParameters, aggiungere un segnaposto nel <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà per il parametro denominato.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Nella clausola Select, anteporre ogni nome di parametro con il simbolo @.       È possibile usare un parametro nella raccolta SelectParameters per rappresentare un nome di proprietà. Per impostare dinamicamente il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà sul nome di una proprietà, creare un gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>evento e personalizzare il <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>proprietà in base alle esigenze.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>"
  example:
  - "The following example shows how to use a user-supplied value to calculate a value in the returned data. The user can enter a value in the text box that represents the number of manufacturing days. That value is divided by a value from a database that represents the number of days to manufacture a product. The returned value indicates how many products can be manufactured during the specified number of days. The user's input is included in the Select command through the SelectParameters collection.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_129_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_129_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "I parametri utilizzati per creare la clausola Select."
  overload: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  id: StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta un valore che indica se i dati dall&quot;origine dati devono essere archiviati nello stato di visualizzazione per assicurarsi che i dati non è stati modificati da un altro processo prima che venga aggiornata o eliminata."
  remarks: "Per impostazione predefinita, quando l&quot;aggiornamento ed eliminazione sono state abilitate, il <xref:System.Web.UI.WebControls.LinqDataSource>controllo Archivia i valori originali per tutti i record nello stato di visualizzazione.</xref:System.Web.UI.WebControls.LinqDataSource> Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo Archivia i valori per tutte le chiavi primarie e tutte le proprietà non è contrassegnato con `UpdateCheck.Never` nel `Column` attributo.</xref:System.Web.UI.WebControls.LinqDataSource> Impostare il `UpdateCheck` proprietà del `Column` attributo la [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)].       Prima di LINQ to SQL aggiorna o Elimina i dati, controlla i valori nello stato di visualizzazione con i valori correnti dell&quot;origine dati. Se i valori non corrispondono, ha modificato il record di origine dati. In tal caso, LINQ to SQL genera un&quot;eccezione e non proseguire con l&quot;aggiornamento oppure l&quot;operazione di eliminazione. Per ulteriori informazioni su LINQ to SQL, vedere [LINQ to SQL](~/add/includes/ajax-current-ext-md.md).       Archiviare i valori originali nella visualizzazione stato può causare le dimensioni della pagina divenire inutilmente grande e può esporre dati sensibili da un utente malintenzionato. È possibile disabilitare la memorizzazione di valori nello stato di visualizzazione impostando la proprietà StoreOriginalValuesInViewState su `false`. In questo caso, è necessario fornire in altro modo per assicurarsi che i dati non sono stato modificato. Se si imposta la proprietà StoreOriginalValuesInViewState su `false`, i valori originali non vengono mantenuti nello stato di visualizzazione per il controllo con associazione a dati. In tal caso, LINQ to SQL non è possibile verificare l&quot;integrità dei dati. LINQ to SQL genererà un&quot;eccezione che indica un conflitto di dati, anche se i dati nell&quot;origine dati non sono realmente cambiati.       Se l&quot;origine dati sottostante contiene un campo timestamp viene aggiornato automaticamente durante un aggiornamento, è possibile archiviare solo tale valore nello stato di visualizzazione. In tal caso, impostare la proprietà timestamp nella classe di entità `IsVersion=true` e tutte le proprietà vengono impostate su `UpdateCheck.Never`. Poiché un campo timestamp viene aggiornato automaticamente dal database ogni volta che i dati in tale record, LINQ to SQL determina da questo valore se i dati sono stati modificati. Ciò consente di ridurre le dimensioni dello stato di visualizzazione ed non sono esposto contiene dati sensibili. LINQ to SQL il controllo della coerenza dei dati confrontando il valore di timestamp nella visualizzazione stato con il valore di timestamp nel database. Per ulteriori informazioni, vedere [procedura dettagliata: utilizzo di un Timestamp con il controllo LinqDataSource per controllare l&quot;integrità dei dati](http://msdn.microsoft.com/en-us/e7700162-4f05-4130-81f7-3be1361027fa)."
  syntax:
    content: public bool StoreOriginalValuesInViewState { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se i valori vengono archiviati nella visualizzazione stato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  id: System#Web#DynamicData#IDynamicDataSource#ContextType
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Per una descrizione di questo membro, vedere <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Web.UI.WebControls.LinqDataSource>esegue il cast dell&quot;istanza di un <xref:System.Web.DynamicData.IDynamicDataSource>interfaccia.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }
    return:
      type: System.Type
      description: "Il tipo associato alla classe."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  id: System#Web#DynamicData#IDynamicDataSource#EntitySetName
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Per una descrizione di questo membro, vedere <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Web.UI.WebControls.LinqDataSource>esegue il cast dell&quot;istanza di un <xref:System.Web.DynamicData.IDynamicDataSource>interfaccia.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }
    return:
      type: System.String
      description: "Il nome dell&quot;entità."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  id: TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta il nome della proprietà o campo nella classe del contesto dati che rappresenta una raccolta di dati."
  remarks: "Impostare il nome della proprietà o campo che rappresenta i dati che si desidera recuperare la proprietà TableName. Quando ci si connette a una tabella di database, il nome della proprietà è in genere lo stesso nome della tabella. Quando ci si connette a una raccolta di dati in memoria, impostare la proprietà TableName al nome della proprietà o campo che restituisce la raccolta dei dati.       È possibile assegnare una proprietà che restituisce qualsiasi tipo per la proprietà TableName per le operazioni di recupero. Se non implementa l&quot;oggetto rappresentato dalla proprietà <xref:System.Collections.IEnumerable>, <xref:System.Web.UI.WebControls.LinqDataSource>controllo eseguirà automaticamente il wrapping dell&quot;oggetto in un&quot;istanza di un <xref:System.Collections.IEnumerable>oggetto.</xref:System.Collections.IEnumerable> </xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Collections.IEnumerable>       Per abilitare l&quot;aggiornamento automatico, inserimento o eliminazione, la classe che viene assegnato alla <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>proprietà deve derivare da <xref:System.Data.Linq.DataContext>e la proprietà che è assegnata alla proprietà deve derivare da <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> TableName</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       Per informazioni su come selezionare i dati da un&quot;istanza di una classe, vedere il <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls. In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property in a class. That property returns an array of strings. In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property that represents a database table.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_2.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "Stringa che contiene il nome della proprietà che contiene la raccolta dei dati."
  overload: System.Web.UI.WebControls.LinqDataSource.TableName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  id: Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Esegue un&quot;operazione di aggiornamento."
  remarks: "In genere, non si dispone di chiamare il metodo di aggiornamento dal codice. Il controllo associato a dati chiamerà il metodo Update automaticamente quando l&quot;utente esegue un&quot;operazione per aggiornare un record. Chiamare in modo esplicito il metodo Update quando si desidera creare un processo personalizzato per l&quot;aggiornamento dati."
  example:
  - "The following example shows how to programmatically update a record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the Update method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_2.aspx)]"
  syntax:
    content: public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "Valori di chiave di riga per i record da aggiornare."
    - id: values
      type: System.Collections.IDictionary
      description: "I valori di riga da aggiornare nell&quot;origine dati."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "I valori di riga che vengono valutati per rilevare i conflitti di dati."
    return:
      type: System.Int32
      description: "Il numero di record interessati dall&quot;operazione di aggiornamento."
  overload: System.Web.UI.WebControls.LinqDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Si verifica quando un&quot;operazione di aggiornamento è completato."
  remarks: "Gestire l&quot;evento aggiornato per rilevare eventuali eccezioni dall&quot;operazione di aggiornamento o per esaminare i valori dei parametri di output al termine dell&quot;operazione di aggiornamento. I parametri di output sono disponibili le <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>oggetto passato ai gestori di eventi.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Updated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Questa raccolta non viene utilizzata il <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> classe."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Una raccolta di parametri."
  overload: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Si verifica prima che un&quot;operazione di aggiornamento."
  remarks: "Gestire l&quot;evento di aggiornamento per convalidare l&quot;oggetto da aggiornare, esaminare gli errori di convalida di dati della classe di dati, per modificare un valore prima dell&quot;operazione di aggiornamento o per annullare l&quot;operazione di aggiornamento. Il <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>oggetto che viene passato ai gestori di eventi contiene sia l&quot;oggetto originale e l&quot;oggetto aggiornato.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>       Se si verifica un errore di convalida durante l&quot;operazione di aggiornamento, l&quot; <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>oggetto contiene le eccezioni di convalida che vengono generate dalla classe di dati.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Se un valore da aggiornare non corrisponde al tipo della proprietà nella classe di dati o se non ha superato il controllo di convalida personalizzato, si verifica un errore di convalida. In un gestore eventi per l&quot;evento di aggiornamento, è possibile recuperare le eccezioni di convalida e intraprendere l&quot;azione appropriata.       Se viene generata un&quot;eccezione in un gestore eventi per l&quot;evento di aggiornamento, è necessario gestire l&quot;eccezione nel gestore eventi. L&quot;eccezione non verrà passata al gestore eventi per il <xref:System.Web.UI.WebControls.LinqDataSource.Updated>evento (tramite la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>proprietà del <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>oggetto).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Updated> Il <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>proprietà contiene solo le eccezioni che vengono generate dopo l&quot;evento di aggiornamento.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Updating event. The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed. If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_16_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_16_1.cs)]  \n  \n The following example shows an event handler for the Updating event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Updating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  id: Where
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene o imposta un valore che specifica le condizioni che debba essere true per un record da includere nei dati recuperati."
  remarks: "You use the Where property to specify the conditions for the record to be returned from a query. The syntax for the Where property is the same as the syntax for a LINQ Where clause in C#.  \n  \n You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set. Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50\"...>  \n```  \n  \n To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50 && Price < 100\"...>  \n<asp:LinqDataSource ... Where=\"Price <= 50 || Price >= 100\"...>  \n```  \n  \n If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks. To do this in markup, enclose the Where clause value in single quotation marks, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where='Category = \"Sports\"' ... >  \n```  \n  \n To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:  \n  \n```vb#  \nLinqDataSource1.Where = \"Category = \"\"Sports\"\"\"  \n```  \n  \n```c#  \nLinqDataSource1.Where = \"Category = \\\"Sports\\\"\";  \n```  \n  \n If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value. The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to \"Sports\":  \n  \n```  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") < 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") <= 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") > 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") >= 0' ... >  \n```  \n  \n You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>. For more information about how to compare strings, see [Comparing Strings](~/add/includes/ajax-current-ext-md.md). For more information about Where clause syntax, see [C# Operators](~/add/includes/ajax-current-ext-md.md) and [where clause](~/add/includes/ajax-current-ext-md.md).  \n  \n In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time. In that case, you include a named parameter in the Where property that acts as a placeholder for the value. You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.  \n  \n Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the Where property. Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.  \n  \n For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](http://msdn.microsoft.com/en-us/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)."
  example:
  - "The following example shows how to filter the data returned from a query based on a static condition.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_1.aspx)]  \n  \n The following example shows how to filter the data based on a value that is provided by the user at run time. In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page. When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value. The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_2.aspx)]"
  syntax:
    content: public string Where { get; set; }
    return:
      type: System.String
      description: "Stringa che viene utilizzata per creare Where clausola."
  overload: System.Web.UI.WebControls.LinqDataSource.Where*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  id: WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Ottiene la raccolta di parametri che è possibile creare Where clausola."
  remarks: "Il <xref:System.Web.UI.WebControls.LinqDataSource>controllo utilizza i parametri nella raccolta WhereParameters a crea la clausola in fase di esecuzione.</xref:System.Web.UI.WebControls.LinqDataSource> Aggiungere parametri alla raccolta WhereParameters quando si desidera impostare a livello di codice uno o più delle condizioni nella clausola. Ad esempio, si potrebbe eseguire la ricerca di una tabella di database per i record con un cognome è uguale al valore di un <xref:System.Web.UI.WebControls.TextBox>controllo.</xref:System.Web.UI.WebControls.TextBox> In tal caso, aggiungere un parametro alla raccolta di WhereParameters per il valore della casella di testo.       Se non è necessario impostare un valore in fase di esecuzione nella clausola, non è necessario utilizzare l&quot;insieme di WhereParameters. È possibile definire i campi da recuperare nel <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Ad esempio, per restituire i valori di una tabella di database in cui `LastName` uguale a &quot;Adams&quot; nel markup, impostare il <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>proprietà `&quot;LastName = &quot;Adams&quot;&quot;` senza parametri.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       Per impostare i valori nella raccolta WhereParameters, assegnare un nome a ogni parametro e quindi aggiungere un segnaposto nel <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>proprietà per tale parametro.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> In Where-clausola, anteporre il nome di ogni parametro con il simbolo @."
  example:
  - "The following example shows how to use the WhereParameters collection to dynamically create the Where clause. The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_594_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_594_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Una raccolta di parametri utilizzati per crea la clausola di <xref:System.Web.UI.WebControls.LinqDataSource.Where*>proprietà.</xref:System.Web.UI.WebControls.LinqDataSource.Where*>"
  overload: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.ContextDataSource
  isExternal: false
  name: System.Web.UI.WebControls.ContextDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceStatusEventArgs>
  nameWithType: EventHandler<LinqDataSourceStatusEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
    name: LinqDataSourceStatusEventArgs
    nameWithType: LinqDataSourceStatusEventArgs
    fullName: LinqDataSourceStatusEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceContextEventArgs>
  nameWithType: EventHandler<LinqDataSourceContextEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceContextEventArgs
    name: LinqDataSourceContextEventArgs
    nameWithType: LinqDataSourceContextEventArgs
    fullName: LinqDataSourceContextEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDisposeEventArgs>
  nameWithType: EventHandler<LinqDataSourceDisposeEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs
    name: LinqDataSourceDisposeEventArgs
    nameWithType: LinqDataSourceDisposeEventArgs
    fullName: LinqDataSourceDisposeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
- uid: System.Web.UI.WebControls.QueryableDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: QueryableDataSourceView
  nameWithType: QueryableDataSourceView
  fullName: System.Web.UI.WebControls.QueryableDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
- uid: System.Web.UI.WebControls.LinqDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceView
  nameWithType: LinqDataSourceView
  fullName: System.Web.UI.WebControls.LinqDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDeleteEventArgs>
  nameWithType: EventHandler<LinqDataSourceDeleteEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs
    name: LinqDataSourceDeleteEventArgs
    nameWithType: LinqDataSourceDeleteEventArgs
    fullName: LinqDataSourceDeleteEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceInsertEventArgs>
  nameWithType: EventHandler<LinqDataSourceInsertEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
    name: LinqDataSourceInsertEventArgs
    nameWithType: LinqDataSourceInsertEventArgs
    fullName: LinqDataSourceInsertEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceSelectEventArgs>
  nameWithType: EventHandler<LinqDataSourceSelectEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceSelectEventArgs
    name: LinqDataSourceSelectEventArgs
    nameWithType: LinqDataSourceSelectEventArgs
    fullName: LinqDataSourceSelectEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceUpdateEventArgs>
  nameWithType: EventHandler<LinqDataSourceUpdateEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
    name: LinqDataSourceUpdateEventArgs
    nameWithType: LinqDataSourceUpdateEventArgs
    fullName: LinqDataSourceUpdateEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource
  nameWithType: LinqDataSource.LinqDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView
  nameWithType: LinqDataSource.CreateQueryableView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView
  nameWithType: LinqDataSource.CreateView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete
  nameWithType: LinqDataSource.Delete
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert
  nameWithType: LinqDataSource.Insert
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit
  nameWithType: LinqDataSource.OnInit
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload
  nameWithType: LinqDataSource.OnUnload
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update
  nameWithType: LinqDataSource.Update
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Where*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
