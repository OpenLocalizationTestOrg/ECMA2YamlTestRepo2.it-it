### YamlMime:ManagedReference
items:
- uid: Microsoft.JScript.MathObject
  id: MathObject
  children:
  - Microsoft.JScript.MathObject.abs(System.Double)
  - Microsoft.JScript.MathObject.acos(System.Double)
  - Microsoft.JScript.MathObject.asin(System.Double)
  - Microsoft.JScript.MathObject.atan(System.Double)
  - Microsoft.JScript.MathObject.atan2(System.Double,System.Double)
  - Microsoft.JScript.MathObject.ceil(System.Double)
  - Microsoft.JScript.MathObject.cos(System.Double)
  - Microsoft.JScript.MathObject.E
  - Microsoft.JScript.MathObject.exp(System.Double)
  - Microsoft.JScript.MathObject.floor(System.Double)
  - Microsoft.JScript.MathObject.LN10
  - Microsoft.JScript.MathObject.LN2
  - Microsoft.JScript.MathObject.log(System.Double)
  - Microsoft.JScript.MathObject.LOG10E
  - Microsoft.JScript.MathObject.LOG2E
  - Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])
  - Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])
  - Microsoft.JScript.MathObject.PI
  - Microsoft.JScript.MathObject.pow(System.Double,System.Double)
  - Microsoft.JScript.MathObject.random
  - Microsoft.JScript.MathObject.round(System.Double)
  - Microsoft.JScript.MathObject.sin(System.Double)
  - Microsoft.JScript.MathObject.sqrt(System.Double)
  - Microsoft.JScript.MathObject.SQRT1_2
  - Microsoft.JScript.MathObject.SQRT2
  - Microsoft.JScript.MathObject.tan(System.Double)
  langs:
  - csharp
  name: MathObject
  nameWithType: MathObject
  fullName: Microsoft.JScript.MathObject
  type: Class
  summary: "Fornisce costanti e metodi statici per funzioni trigonometriche, funzioni logaritmiche e normali funzioni matematiche. Questa classe appartiene alla categoria del modello a oggetti incorporati."
  syntax:
    content: 'public class MathObject : Microsoft.JScript.JSObject'
  inheritance:
  - System.Object
  - Microsoft.JScript.ScriptObject
  - Microsoft.JScript.JSObject
  implements: []
  inheritedMembers:
  - Microsoft.JScript.JSObject.AddField(System.String)
  - Microsoft.JScript.JSObject.field_table
  - Microsoft.JScript.JSObject.GetMember(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.JSObject.GetMembers(System.Reflection.BindingFlags)
  - Microsoft.JScript.JSObject.SetMemberValue2(System.String,System.Object)
  - Microsoft.JScript.JSObject.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)
  - Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddProperty(System.String)
  - Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#RemoveMember(System.Reflection.MemberInfo)
  - Microsoft.JScript.JSObject.ToString
  - Microsoft.JScript.ScriptObject.engine
  - Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetParent
  - Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - Microsoft.JScript.ScriptObject.Item(System.Double)
  - Microsoft.JScript.ScriptObject.Item(System.Int32)
  - Microsoft.JScript.ScriptObject.Item(System.Object[])
  - Microsoft.JScript.ScriptObject.Item(System.String)
  - Microsoft.JScript.ScriptObject.parent
  - Microsoft.JScript.ScriptObject.UnderlyingSystemType
  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)
  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)
  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.abs(System.Double)
  id: abs(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: abs(Double)
  nameWithType: MathObject.abs(Double)
  fullName: Microsoft.JScript.MathObject.abs(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola il valore assoluto del numero specificato."
  syntax:
    content: public static double abs (double d);
    parameters:
    - id: d
      type: System.Double
      description: "Per calcolare il valore assoluto del numero."
    return:
      type: System.Double
      description: "Il valore assoluto di <code> d </code>."
  overload: Microsoft.JScript.MathObject.abs*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.acos(System.Double)
  id: acos(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: acos(Double)
  nameWithType: MathObject.acos(Double)
  fullName: Microsoft.JScript.MathObject.acos(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola il coseno inverso del numero specificato."
  syntax:
    content: public static double acos (double x);
    parameters:
    - id: x
      type: System.Double
      description: "Il numero per calcolare il coseno inverso di."
    return:
      type: System.Double
      description: "La funzione inversa del coseno di <code> x </code>, misurato in radianti."
  overload: Microsoft.JScript.MathObject.acos*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.asin(System.Double)
  id: asin(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: asin(Double)
  nameWithType: MathObject.asin(Double)
  fullName: Microsoft.JScript.MathObject.asin(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola il seno inverso del numero specificato."
  syntax:
    content: public static double asin (double x);
    parameters:
    - id: x
      type: System.Double
      description: "Numero di cui calcolare il seno inverso di."
    return:
      type: System.Double
      description: "Il seno inverso di <code> x </code>, misurato in radianti."
  overload: Microsoft.JScript.MathObject.asin*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.atan(System.Double)
  id: atan(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: atan(Double)
  nameWithType: MathObject.atan(Double)
  fullName: Microsoft.JScript.MathObject.atan(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola la tangente inversa del numero specificato."
  syntax:
    content: public static double atan (double x);
    parameters:
    - id: x
      type: System.Double
      description: "Numero di cui calcolare la tangente inversa di."
    return:
      type: System.Double
      description: "La tangente inversa di <code> x </code>, misurato in radianti."
  overload: Microsoft.JScript.MathObject.atan*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.atan2(System.Double,System.Double)
  id: atan2(System.Double,System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: atan2(Double,Double)
  nameWithType: MathObject.atan2(Double,Double)
  fullName: Microsoft.JScript.MathObject.atan2(Double,Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola la tangente inversa del quoziente dei numeri specificati."
  syntax:
    content: public static double atan2 (double dy, double dx);
    parameters:
    - id: dy
      type: System.Double
      description: "Il numeratore del quoziente di cui calcolare la tangente inversa."
    - id: dx
      type: System.Double
      description: "Denominatore del quoziente di cui calcolare la tangente inversa."
    return:
      type: System.Double
      description: "La tangente inversa di <code> dy </code> / <code> dx </code>, misurato in radianti."
  overload: Microsoft.JScript.MathObject.atan2*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.ceil(System.Double)
  id: ceil(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: ceil(Double)
  nameWithType: MathObject.ceil(Double)
  fullName: Microsoft.JScript.MathObject.ceil(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola il limite massimo del numero specificato, che è l&quot;intero più piccolo maggiore o uguale al numero specificato."
  syntax:
    content: public static double ceil (double x);
    parameters:
    - id: x
      type: System.Double
      description: "Numero di cui calcolare il limite massimo di."
    return:
      type: System.Double
      description: "Il limite massimo di <code> x </code>."
  overload: Microsoft.JScript.MathObject.ceil*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.cos(System.Double)
  id: cos(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: cos(Double)
  nameWithType: MathObject.cos(Double)
  fullName: Microsoft.JScript.MathObject.cos(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola il coseno dell&quot;angolo specificato."
  syntax:
    content: public static double cos (double x);
    parameters:
    - id: x
      type: System.Double
      description: "Angolo, espresso in radianti."
    return:
      type: System.Double
      description: "The cosine of <code>x</code>."
  overload: Microsoft.JScript.MathObject.cos*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.E
  id: E
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: E
  nameWithType: MathObject.E
  fullName: Microsoft.JScript.MathObject.E
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Archivia un valore che rappresenta la costante di Eulero, che costituisce la base del logaritmo naturale, specificata dalla costante e."
  syntax:
    content: public const double E = 2.71828182845905;
    return:
      type: System.Double
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.exp(System.Double)
  id: exp(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: exp(Double)
  nameWithType: MathObject.exp(Double)
  fullName: Microsoft.JScript.MathObject.exp(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola il numero e alla potenza specificata generato, dove e è la costante di Eulero, la base del logaritmo naturale."
  syntax:
    content: public static double exp (double x);
    parameters:
    - id: x
      type: System.Double
      description: "Potenza a cui elevare `e` per."
    return:
      type: System.Double
      description: "Il numero e elevato al <code> x </code> risparmio energia."
  overload: Microsoft.JScript.MathObject.exp*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.floor(System.Double)
  id: floor(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: floor(Double)
  nameWithType: MathObject.floor(Double)
  fullName: Microsoft.JScript.MathObject.floor(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola la parte intera del numero specificato, che è l&quot;intero più grande che è minore o uguale al numero specificato."
  syntax:
    content: public static double floor (double x);
    parameters:
    - id: x
      type: System.Double
      description: "Per calcolare la base del numero."
    return:
      type: System.Double
      description: "The floor of <code>x</code>."
  overload: Microsoft.JScript.MathObject.floor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.LN10
  id: LN10
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: LN10
  nameWithType: MathObject.LN10
  fullName: Microsoft.JScript.MathObject.LN10
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Archivia un valore che rappresenta la base logaritmica e 10, il logaritmo naturale di 10."
  syntax:
    content: public const double LN10 = 2.30258509299405;
    return:
      type: System.Double
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.LN2
  id: LN2
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: LN2
  nameWithType: MathObject.LN2
  fullName: Microsoft.JScript.MathObject.LN2
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Archivia un valore che rappresenta la base logaritmica e 2, il logaritmo naturale di 2."
  syntax:
    content: public const double LN2 = 0.693147180559945;
    return:
      type: System.Double
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.log(System.Double)
  id: log(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: log(Double)
  nameWithType: MathObject.log(Double)
  fullName: Microsoft.JScript.MathObject.log(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola il logaritmo di base e del numero specificato, ovvero il logaritmo naturale del numero specificato."
  syntax:
    content: public static double log (double x);
    parameters:
    - id: x
      type: System.Double
      description: "Per calcolare il logaritmo naturale del numero."
    return:
      type: System.Double
      description: "Il logaritmo naturale di <code> x </code>."
  overload: Microsoft.JScript.MathObject.log*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.LOG10E
  id: LOG10E
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: LOG10E
  nameWithType: MathObject.LOG10E
  fullName: Microsoft.JScript.MathObject.LOG10E
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Archivia un valore che rappresenta il logaritmo in base 10 di e, il logaritmo comune di e."
  syntax:
    content: public const double LOG10E = 0.434294481903252;
    return:
      type: System.Double
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.LOG2E
  id: LOG2E
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: LOG2E
  nameWithType: MathObject.LOG2E
  fullName: Microsoft.JScript.MathObject.LOG2E
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Archivia un valore che rappresenta il logaritmo in base 2 di e, il logaritmo binario di e."
  syntax:
    content: public const double LOG2E = 1.44269504088896;
    return:
      type: System.Double
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])
  id: max(System.Object,System.Object,System.Object[])
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: max(Object,Object,Object[])
  nameWithType: MathObject.max(Object,Object,Object[])
  fullName: Microsoft.JScript.MathObject.max(Object,Object,Object[])
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Restituisce il più elevato tra due o più numeri specificati."
  syntax:
    content: public static double max (object x, object y, object[] args);
    parameters:
    - id: x
      type: System.Object
      description: "Il primo numero da confrontare."
    - id: y
      type: System.Object
      description: "Il secondo numero da confrontare."
    - id: args
      type: System.Object[]
      description: "Altri numeri da confrontare."
    return:
      type: System.Double
      description: "Il più grande di <code> x </code>, <code> y </code>e i numeri contenuti in <code> args </code>."
  overload: Microsoft.JScript.MathObject.max*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])
  id: min(System.Object,System.Object,System.Object[])
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: min(Object,Object,Object[])
  nameWithType: MathObject.min(Object,Object,Object[])
  fullName: Microsoft.JScript.MathObject.min(Object,Object,Object[])
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Restituisce il più piccolo di due o più numeri specificati."
  syntax:
    content: public static double min (object x, object y, object[] args);
    parameters:
    - id: x
      type: System.Object
      description: "Il primo numero da confrontare."
    - id: y
      type: System.Object
      description: "Il secondo numero da confrontare."
    - id: args
      type: System.Object[]
      description: "Altri numeri da confrontare."
    return:
      type: System.Double
      description: "Il valore più piccolo dei <code> x </code>, <code> y </code>e i numeri contenuti in <code> args </code>."
  overload: Microsoft.JScript.MathObject.min*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.PI
  id: PI
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: PI
  nameWithType: MathObject.PI
  fullName: Microsoft.JScript.MathObject.PI
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Archivia un valore che rappresenta il rapporto tra la circonferenza del cerchio e il suo diametro, specificato dalla costante π."
  syntax:
    content: public const double PI = 3.14159265358979;
    return:
      type: System.Double
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.pow(System.Double,System.Double)
  id: pow(System.Double,System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: pow(Double,Double)
  nameWithType: MathObject.pow(Double,Double)
  fullName: Microsoft.JScript.MathObject.pow(Double,Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola il numero specificato elevato alla potenza specificata."
  syntax:
    content: public static double pow (double dx, double dy);
    parameters:
    - id: dx
      type: System.Double
      description: "Il numero da elevare a di `dy` risparmio energia."
    - id: dy
      type: System.Double
      description: "Potenza a cui elevare `dx` per."
    return:
      type: System.Double
      description: "Il numero <code> dx </code> generato per il <code> dy </code> risparmio energia."
  overload: Microsoft.JScript.MathObject.pow*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.random
  id: random
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: random()
  nameWithType: MathObject.random()
  fullName: Microsoft.JScript.MathObject.random()
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Genera un numero casuale compreso tra 0 e 1. Questo metodo non genera un numero casuale crittograficamente sicuro."
  syntax:
    content: public static double random ();
    parameters: []
    return:
      type: System.Double
      description: "Un numero maggiore o uguale a 0 e minore di 1."
  overload: Microsoft.JScript.MathObject.random*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.round(System.Double)
  id: round(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: round(Double)
  nameWithType: MathObject.round(Double)
  fullName: Microsoft.JScript.MathObject.round(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Arrotonda il numero specificato verso il basso o fino all&quot;intero più vicino."
  syntax:
    content: public static double round (double d);
    parameters:
    - id: d
      type: System.Double
      description: "Numero da arrotondare."
    return:
      type: System.Double
      description: "Se la parte frazionaria di <code> d </code> è inferiore alla metà all&quot;intero successivo, <code> d </code> arrotondato per difetto. Se la parte frazionaria di <code> d </code> è a metà o per l&quot;intero successivo, <code> d </code> arrotondato per eccesso."
  overload: Microsoft.JScript.MathObject.round*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.sin(System.Double)
  id: sin(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: sin(Double)
  nameWithType: MathObject.sin(Double)
  fullName: Microsoft.JScript.MathObject.sin(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola il seno dell&quot;angolo specificato."
  syntax:
    content: public static double sin (double x);
    parameters:
    - id: x
      type: System.Double
      description: "Angolo, espresso in radianti."
    return:
      type: System.Double
      description: "The sine of <code>x</code>."
  overload: Microsoft.JScript.MathObject.sin*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.sqrt(System.Double)
  id: sqrt(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: sqrt(Double)
  nameWithType: MathObject.sqrt(Double)
  fullName: Microsoft.JScript.MathObject.sqrt(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola la radice quadrata del numero specificato."
  syntax:
    content: public static double sqrt (double x);
    parameters:
    - id: x
      type: System.Double
      description: "Per calcolare la radice quadrata del numero."
    return:
      type: System.Double
      description: "La radice quadrata di <code> x </code>."
  overload: Microsoft.JScript.MathObject.sqrt*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.SQRT1_2
  id: SQRT1_2
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: SQRT1_2
  nameWithType: MathObject.SQRT1_2
  fullName: Microsoft.JScript.MathObject.SQRT1_2
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: 'Archivia un valore che rappresenta i seguenti valori equivalenti: (√ 2) / 2, √ e 1/(√2).'
  syntax:
    content: public const double SQRT1_2 = 0.707106781186548;
    return:
      type: System.Double
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.SQRT2
  id: SQRT2
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: SQRT2
  nameWithType: MathObject.SQRT2
  fullName: Microsoft.JScript.MathObject.SQRT2
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Archivia un valore che rappresenta √&2;."
  syntax:
    content: public const double SQRT2 = 1.4142135623731;
    return:
      type: System.Double
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.tan(System.Double)
  id: tan(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: tan(Double)
  nameWithType: MathObject.tan(Double)
  fullName: Microsoft.JScript.MathObject.tan(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Calcola la tangente dell&quot;angolo specificato."
  syntax:
    content: public static double tan (double x);
    parameters:
    - id: x
      type: System.Double
      description: "Angolo, espresso in radianti."
    return:
      type: System.Double
      description: "La tangente di <code> x </code>."
  overload: Microsoft.JScript.MathObject.tan*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.JScript.JSObject
  isExternal: false
  name: Microsoft.JScript.JSObject
- uid: Microsoft.JScript.MathObject.abs(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: abs(Double)
  nameWithType: MathObject.abs(Double)
  fullName: Microsoft.JScript.MathObject.abs(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.JScript.MathObject.acos(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: acos(Double)
  nameWithType: MathObject.acos(Double)
  fullName: Microsoft.JScript.MathObject.acos(Double)
- uid: Microsoft.JScript.MathObject.asin(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: asin(Double)
  nameWithType: MathObject.asin(Double)
  fullName: Microsoft.JScript.MathObject.asin(Double)
- uid: Microsoft.JScript.MathObject.atan(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: atan(Double)
  nameWithType: MathObject.atan(Double)
  fullName: Microsoft.JScript.MathObject.atan(Double)
- uid: Microsoft.JScript.MathObject.atan2(System.Double,System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: atan2(Double,Double)
  nameWithType: MathObject.atan2(Double,Double)
  fullName: Microsoft.JScript.MathObject.atan2(Double,Double)
- uid: Microsoft.JScript.MathObject.ceil(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: ceil(Double)
  nameWithType: MathObject.ceil(Double)
  fullName: Microsoft.JScript.MathObject.ceil(Double)
- uid: Microsoft.JScript.MathObject.cos(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: cos(Double)
  nameWithType: MathObject.cos(Double)
  fullName: Microsoft.JScript.MathObject.cos(Double)
- uid: Microsoft.JScript.MathObject.E
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: E
  nameWithType: MathObject.E
  fullName: Microsoft.JScript.MathObject.E
- uid: Microsoft.JScript.MathObject.exp(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: exp(Double)
  nameWithType: MathObject.exp(Double)
  fullName: Microsoft.JScript.MathObject.exp(Double)
- uid: Microsoft.JScript.MathObject.floor(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: floor(Double)
  nameWithType: MathObject.floor(Double)
  fullName: Microsoft.JScript.MathObject.floor(Double)
- uid: Microsoft.JScript.MathObject.LN10
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: LN10
  nameWithType: MathObject.LN10
  fullName: Microsoft.JScript.MathObject.LN10
- uid: Microsoft.JScript.MathObject.LN2
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: LN2
  nameWithType: MathObject.LN2
  fullName: Microsoft.JScript.MathObject.LN2
- uid: Microsoft.JScript.MathObject.log(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: log(Double)
  nameWithType: MathObject.log(Double)
  fullName: Microsoft.JScript.MathObject.log(Double)
- uid: Microsoft.JScript.MathObject.LOG10E
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: LOG10E
  nameWithType: MathObject.LOG10E
  fullName: Microsoft.JScript.MathObject.LOG10E
- uid: Microsoft.JScript.MathObject.LOG2E
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: LOG2E
  nameWithType: MathObject.LOG2E
  fullName: Microsoft.JScript.MathObject.LOG2E
- uid: Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: max(Object,Object,Object[])
  nameWithType: MathObject.max(Object,Object,Object[])
  fullName: Microsoft.JScript.MathObject.max(Object,Object,Object[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: min(Object,Object,Object[])
  nameWithType: MathObject.min(Object,Object,Object[])
  fullName: Microsoft.JScript.MathObject.min(Object,Object,Object[])
- uid: Microsoft.JScript.MathObject.PI
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: PI
  nameWithType: MathObject.PI
  fullName: Microsoft.JScript.MathObject.PI
- uid: Microsoft.JScript.MathObject.pow(System.Double,System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: pow(Double,Double)
  nameWithType: MathObject.pow(Double,Double)
  fullName: Microsoft.JScript.MathObject.pow(Double,Double)
- uid: Microsoft.JScript.MathObject.random
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: random()
  nameWithType: MathObject.random()
  fullName: Microsoft.JScript.MathObject.random()
- uid: Microsoft.JScript.MathObject.round(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: round(Double)
  nameWithType: MathObject.round(Double)
  fullName: Microsoft.JScript.MathObject.round(Double)
- uid: Microsoft.JScript.MathObject.sin(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: sin(Double)
  nameWithType: MathObject.sin(Double)
  fullName: Microsoft.JScript.MathObject.sin(Double)
- uid: Microsoft.JScript.MathObject.sqrt(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: sqrt(Double)
  nameWithType: MathObject.sqrt(Double)
  fullName: Microsoft.JScript.MathObject.sqrt(Double)
- uid: Microsoft.JScript.MathObject.SQRT1_2
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: SQRT1_2
  nameWithType: MathObject.SQRT1_2
  fullName: Microsoft.JScript.MathObject.SQRT1_2
- uid: Microsoft.JScript.MathObject.SQRT2
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: SQRT2
  nameWithType: MathObject.SQRT2
  fullName: Microsoft.JScript.MathObject.SQRT2
- uid: Microsoft.JScript.MathObject.tan(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: tan(Double)
  nameWithType: MathObject.tan(Double)
  fullName: Microsoft.JScript.MathObject.tan(Double)
- uid: Microsoft.JScript.MathObject.abs*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: abs
  nameWithType: MathObject.abs
- uid: Microsoft.JScript.MathObject.acos*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: acos
  nameWithType: MathObject.acos
- uid: Microsoft.JScript.MathObject.asin*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: asin
  nameWithType: MathObject.asin
- uid: Microsoft.JScript.MathObject.atan*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: atan
  nameWithType: MathObject.atan
- uid: Microsoft.JScript.MathObject.atan2*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: atan2
  nameWithType: MathObject.atan2
- uid: Microsoft.JScript.MathObject.ceil*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: ceil
  nameWithType: MathObject.ceil
- uid: Microsoft.JScript.MathObject.cos*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: cos
  nameWithType: MathObject.cos
- uid: Microsoft.JScript.MathObject.exp*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: exp
  nameWithType: MathObject.exp
- uid: Microsoft.JScript.MathObject.floor*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: floor
  nameWithType: MathObject.floor
- uid: Microsoft.JScript.MathObject.log*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: log
  nameWithType: MathObject.log
- uid: Microsoft.JScript.MathObject.max*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: max
  nameWithType: MathObject.max
- uid: Microsoft.JScript.MathObject.min*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: min
  nameWithType: MathObject.min
- uid: Microsoft.JScript.MathObject.pow*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: pow
  nameWithType: MathObject.pow
- uid: Microsoft.JScript.MathObject.random*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: random
  nameWithType: MathObject.random
- uid: Microsoft.JScript.MathObject.round*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: round
  nameWithType: MathObject.round
- uid: Microsoft.JScript.MathObject.sin*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: sin
  nameWithType: MathObject.sin
- uid: Microsoft.JScript.MathObject.sqrt*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: sqrt
  nameWithType: MathObject.sqrt
- uid: Microsoft.JScript.MathObject.tan*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: tan
  nameWithType: MathObject.tan
