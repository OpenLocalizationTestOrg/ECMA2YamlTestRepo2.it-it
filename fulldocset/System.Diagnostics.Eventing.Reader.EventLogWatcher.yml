### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher
  id: EventLogWatcher
  children:
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  langs:
  - csharp
  name: EventLogWatcher
  nameWithType: EventLogWatcher
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher
  type: Class
  summary: "Consente di sottoscrivere gli eventi in ingresso. Ogni volta che un evento desiderato viene pubblicato in un log eventi, il <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref> evento viene generato e verrà eseguito il metodo che gestisce l&quot;evento."
  remarks: "Le istanze di questa classe vengono create da <xref:System.Diagnostics.Eventing.Reader.EventLogQuery>oggetti che specificano una query per la sottoscrizione dell&quot;evento.</xref:System.Diagnostics.Eventing.Reader.EventLogQuery> Quando viene registrato un evento che soddisfa i criteri espressi nella query, quindi il <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten>viene generato l&quot;evento.</xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten>"
  example:
  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'
  syntax:
    content: 'public class EventLogWatcher : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref> classe specificando una query di eventi."
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "Specifica una query per la sottoscrizione dell&quot;evento. Quando viene registrato un evento che soddisfa i criteri espressi nella query, quindi il <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref> viene generato l&quot;evento."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(String)
  nameWithType: EventLogWatcher.EventLogWatcher(String)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(String)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref> classe specificando il nome o il percorso in un log eventi."
  syntax:
    content: public EventLogWatcher (string path);
    parameters:
    - id: path
      type: System.String
      description: "Il percorso o nome del monitoraggio registro eventi per gli eventi. Se qualsiasi evento viene registrato nel log eventi, il <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref> viene generato l&quot;evento."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery,EventBookmark)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref> classe specificando una query di eventi e un segnalibro a cui viene usato come posizione iniziale per la query."
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "Specifica una query per la sottoscrizione dell&quot;evento. Quando viene registrato un evento che soddisfa i criteri espressi nella query, quindi il <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref> viene generato l&quot;evento."
    - id: bookmark
      type: System.Diagnostics.Eventing.Reader.EventBookmark
      description: "Segnalibro (segnaposto) utilizzato come posizione iniziale nel registro eventi o flusso di eventi. Solo gli eventi che sono stati registrati dopo l&quot;evento di segnalibro sarà restituito dalla query."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;> </xref> classe specificando una query di eventi, un segnalibro a cui viene usato come posizione per la query iniziale e un valore booleano che determina se leggere gli eventi che esistono già nel registro eventi."
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "Specifica una query per la sottoscrizione dell&quot;evento. Quando viene registrato un evento che soddisfa i criteri espressi nella query, quindi il <xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;> </xref> viene generato l&quot;evento."
    - id: bookmark
      type: System.Diagnostics.Eventing.Reader.EventBookmark
      description: "Segnalibro (segnaposto) utilizzato come posizione iniziale nel registro eventi o flusso di eventi. Solo gli eventi che sono stati registrati dopo l&quot;evento di segnalibro sarà restituito dalla query."
    - id: readExistingEvents
      type: System.Boolean
      description: "Valore booleano che determina se leggere gli eventi che già esistono nel registro eventi. Se questo valore è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, gli eventi esistenti vengono letti e se questo valore è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, quindi gli eventi esistenti non vengono letti."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  id: Dispose
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Dispose()
  nameWithType: EventLogWatcher.Dispose()
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Rilascia tutte le risorse utilizzate da questo oggetto."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogWatcher.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Rilascia le risorse non gestite utilizzate dall&quot;oggetto e facoltativamente rilascia le risorse gestite."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  id: Enabled
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  type: Property
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Determina se questo oggetto inizia recapito eventi al delegato dell&quot;evento."
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "Restituisce <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> quando questo oggetto può distribuire eventi al delegato dell&quot;evento e restituisce <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> quando questo oggetto ha interrotto la distribuzione."
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  id: EventRecordWritten
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventRecordWritten
  nameWithType: EventLogWatcher.EventRecordWritten
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  type: Event
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "Consente l&quot;impostazione di un delegato (metodo del gestore eventi) che viene chiamato ogni volta che viene pubblicato un evento che corrisponde ai criteri specificati nell&quot;evento di query per questo oggetto."
  remarks: ''
  example:
  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'
  syntax:
    content: public event EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs> EventRecordWritten;
    return:
      type: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery)
- uid: System.Diagnostics.Eventing.Reader.EventLogQuery
  parent: System.Diagnostics.Eventing.Reader
  isExternal: false
  name: EventLogQuery
  nameWithType: EventLogQuery
  fullName: System.Diagnostics.Eventing.Reader.EventLogQuery
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(String)
  nameWithType: EventLogWatcher.EventLogWatcher(String)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery,EventBookmark)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
- uid: System.Diagnostics.Eventing.Reader.EventBookmark
  parent: System.Diagnostics.Eventing.Reader
  isExternal: false
  name: EventBookmark
  nameWithType: EventBookmark
  fullName: System.Diagnostics.Eventing.Reader.EventBookmark
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose()
  nameWithType: EventLogWatcher.Dispose()
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose()
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogWatcher.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(Boolean)
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventRecordWritten
  nameWithType: EventLogWatcher.EventRecordWritten
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
- uid: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<EventRecordWrittenEventArgs>
  nameWithType: EventHandler<EventRecordWrittenEventArgs>
  fullName: System.EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs
    name: EventRecordWrittenEventArgs
    nameWithType: EventRecordWrittenEventArgs
    fullName: EventRecordWrittenEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher
  nameWithType: EventLogWatcher.EventLogWatcher
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose
  nameWithType: EventLogWatcher.Dispose
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
