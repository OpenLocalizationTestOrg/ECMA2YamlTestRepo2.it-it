### YamlMime:ManagedReference
items:
- uid: System.Web.UI.PageAsyncTask
  id: PageAsyncTask
  children:
  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  - System.Web.UI.PageAsyncTask.BeginHandler
  - System.Web.UI.PageAsyncTask.EndHandler
  - System.Web.UI.PageAsyncTask.ExecuteInParallel
  - System.Web.UI.PageAsyncTask.State
  - System.Web.UI.PageAsyncTask.TimeoutHandler
  langs:
  - csharp
  name: PageAsyncTask
  nameWithType: PageAsyncTask
  fullName: System.Web.UI.PageAsyncTask
  type: Class
  summary: "Contiene informazioni su un&quot;attività asincrona registrata in una pagina. Questa classe non può essere ereditata."
  remarks: "In ASP.NET versione 2.0 consente di registrare più attività in una pagina e di eseguire in modo asincrono prima del rendering della pagina. È possibile specificare che un&quot;attività da eseguire in modo asincrono se si tratta di un processo lento e non si desidera che altri processi rallentare mentre è in esecuzione. Le attività asincrone possono essere eseguite in parallelo o sequenziale.       Un oggetto PageAsyncTask deve essere registrato per la pagina tramite il <xref:System.Web.UI.Page.RegisterAsyncTask%2A>metodo.</xref:System.Web.UI.Page.RegisterAsyncTask%2A> La pagina stessa non deve essere elaborato in modo asincrono per eseguire attività asincrone. È possibile impostare il `Async` l&quot;attributo `true` (come illustrato nell&quot;esempio di codice seguente) o `false` nella pagina di direttiva e le attività asincrone verranno comunque elaborate in modo asincrono: `<%@ Page Async=&quot;true&quot; %>` quando il `Async` attributo è impostato su `false`, il thread che esegue la pagina verrà bloccato fino al completamento di tutte le attività asincrone.       Le attività asincrone registrate prima il <xref:System.Web.UI.Page.PreRenderComplete>evento verrà eseguito automaticamente dalla pagina se essi non sono già state eseguite.</xref:System.Web.UI.Page.PreRenderComplete> Le attività asincrone registrate dopo il <xref:System.Web.UI.Page.PreRenderComplete>evento devono essere eseguite in modo esplicito tramite il <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>metodo.</xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> </xref:System.Web.UI.Page.PreRenderComplete> Il <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>metodo può essere utilizzato anche per avviare le attività prima di <xref:System.Web.UI.Page.PreRenderComplete>eventi.</xref:System.Web.UI.Page.PreRenderComplete> </xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> Il <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>metodo esegue tutte le attività asincrone registrate nella pagina che non sono state eseguite.</xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>       Per impostazione predefinita, un&quot;attività asincrona scadrà se non è stata completata entro 45 secondi. Il file Web. config o la direttiva di pagina, è possibile specificare un valore di timeout diverso. Il `<pages>` sezione del file Web. config contiene un `asyncTimeout` attributo, come illustrato di seguito.       `<system.web>`       `<pages asyncTimeout=&quot;30&quot;>`       `</pages>`       `</system.web>`La direttiva di pagina contiene un `AsyncTimeout` attributo.       `<%@ Page AsyncTimeout=&quot;30&quot; %>`"
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/t-system.web.ui.pageasyn_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/t-system.web.ui.pageasyn_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/t-system.web.ui.pageasyn_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/t-system.web.ui.pageasyn_2.cs)]"
  syntax:
    content: public sealed class PageAsyncTask
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  id: '#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(Func<CancellationToken,Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> classe utilizzando un gestore eventi che consente di annullare l&quot;operazione."
  remarks: "Esegue il wrapping di questo costruttore un <xref:System.Web.CancellableTaskEventHandler>delegare in modo che il <xref:System.Web.UI.PageAsyncTask>oggetto possibile integrare codice asincrono (in base a <xref:System.Threading.Tasks.Task>oggetti) con la funzionalità di asincrona pagine Web Form ASP.NET esistente.</xref:System.Threading.Tasks.Task> </xref:System.Web.UI.PageAsyncTask> </xref:System.Web.CancellableTaskEventHandler> ASP.NET segnalerà il <xref:System.Threading.CancellationToken>oggetto passato a un <xref:System.Web.CancellableTaskEventHandler>delegato per l&quot;annullamento in base il <xref:System.Web.UI.Page.AsyncTimeout%2A>attributo impostato `@ Page` direttiva della pagina Web.</xref:System.Web.UI.Page.AsyncTimeout%2A> </xref:System.Web.CancellableTaskEventHandler> </xref:System.Threading.CancellationToken> Quando il <xref:System.Web.UI.Page.AsyncTimeout%2A>valore è stato raggiunto il <xref:System.Threading.CancellationToken>oggetto verrà segnalato.</xref:System.Threading.CancellationToken> </xref:System.Web.UI.Page.AsyncTimeout%2A> Il `CancellationToken` parametro deve essere passato a qualsiasi API asincrone che vengono chiamati dall&quot;implementazione della <xref:System.Web.CancellableTaskEventHandler>classe.</xref:System.Web.CancellableTaskEventHandler>"
  syntax:
    content: public PageAsyncTask (Func<System.Threading.CancellationToken,System.Threading.Tasks.Task> handler);
    parameters:
    - id: handler
      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
      description: "Un gestore eventi."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  id: '#ctor(System.Func{System.Threading.Tasks.Task})'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(Func<Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<Task>)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> classe utilizzando un gestore eventi che consente all&quot;attività di gestione."
  syntax:
    content: public PageAsyncTask (Func<System.Threading.Tasks.Task> handler);
    parameters:
    - id: handler
      type: System.Func{System.Threading.Tasks.Task}
      description: "Un gestore eventi."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> classe utilizzando il valore predefinito per l&quot;esecuzione in parallelo."
  remarks: "Questa implementazione del costruttore imposta la <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>proprietà `false` affinché l&quot;attività asincrona non viene elaborata in parallelo con altre attività nella pagina.</xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>"
  syntax:
    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "Gestore da chiamare quando si inizia un&quot;attività asincrona."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "Gestore da chiamare quando l&quot;attività viene completato correttamente entro il periodo di timeout."
    - id: timeoutHandler
      type: System.Web.EndEventHandler
      description: "Gestore da chiamare quando l&quot;attività non viene completato correttamente entro il periodo di timeout."
    - id: state
      type: System.Object
      description: "Oggetto che rappresenta lo stato dell&quot;attività."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Il <code> beginHandler </code> parametro o <code> endHandler </code> parametro non viene specificato."
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)'
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.UI.PageAsyncTask&quot;> </xref> classe utilizzando il valore specificato per l&quot;esecuzione in parallelo."
  remarks: "Questa implementazione del costruttore consente di specificare se l&quot;attività asincrona verrà elaborato in parallelo con altre attività nella pagina."
  example:
  - "The following code example creates three asynchronous tasks that are processed in parallel to each other. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/3bf006c1-f830-4b70-9cc2-_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/3bf006c1-f830-4b70-9cc2-_1.aspx)]"
  syntax:
    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "Gestore da chiamare quando si inizia un&quot;attività asincrona."
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "Gestore da chiamare quando l&quot;attività viene completato correttamente entro il periodo di timeout."
    - id: timeoutHandler
      type: System.Web.EndEventHandler
      description: "Gestore da chiamare quando l&quot;attività non viene completato correttamente entro il periodo di timeout."
    - id: state
      type: System.Object
      description: "Oggetto che rappresenta lo stato dell&quot;attività."
    - id: executeInParallel
      type: System.Boolean
      description: "Il valore che indica se l&quot;attività può essere elaborata in parallelo con altre attività."
  overload: System.Web.UI.PageAsyncTask.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Il <code> beginHandler </code> parametro o <code> endHandler </code> parametro non viene specificato."
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.BeginHandler
  id: BeginHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
  fullName: System.Web.UI.PageAsyncTask.BeginHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Ottiene il metodo da chiamare quando inizia un&quot;attività asincrona."
  remarks: "Il delegato BeginHandler è impostato nel costruttore."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A BeginHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_2_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_2_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_2_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_2_2.cs)]"
  syntax:
    content: public System.Web.BeginEventHandler BeginHandler { get; }
    return:
      type: System.Web.BeginEventHandler
      description: "Oggetto <xref href=&quot;System.Web.BeginEventHandler&quot;> </xref> delegato che rappresenta il metodo da chiamare quando inizia l&quot;attività asincrona."
  overload: System.Web.UI.PageAsyncTask.BeginHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.EndHandler
  id: EndHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
  fullName: System.Web.UI.PageAsyncTask.EndHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Ottiene il metodo da chiamare quando l&quot;attività viene completata correttamente entro il periodo di timeout."
  remarks: "Il delegato EndHandler è impostato nel costruttore."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. An EndHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_0_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_0_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_0_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_0_2.cs)]"
  syntax:
    content: public System.Web.EndEventHandler EndHandler { get; }
    return:
      type: System.Web.EndEventHandler
      description: "Un <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> delegato che rappresenta il metodo da chiamare quando l&quot;attività viene completata correttamente entro il periodo di timeout."
  overload: System.Web.UI.PageAsyncTask.EndHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel
  id: ExecuteInParallel
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
  fullName: System.Web.UI.PageAsyncTask.ExecuteInParallel
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Ottiene un valore che indica se l&quot;attività può essere elaborata in parallelo con altre attività."
  remarks: "La proprietà ExecuteInParallel è impostata nel costruttore. Quando più attività vengono registrate in una pagina e la proprietà ExecuteInParallel è impostata su `true`, tali attività vengono elaborate simultaneamente. Tuttavia, se la proprietà ExecuteInParallel è impostata su `false`, tali attività vengono elaborate in sequenza. Ad esempio, se una pagina contiene due attività asincrone che ciascuna richiede 5 secondi per completare ed ExecuteInParallel è impostato su `true`, entrambe le attività verranno completata entro 5 secondi. Se ExecuteInParallel è impostata su `false` per questi due attività, quindi la prima attività verrà completata entro 5 secondi e la seconda attività 5 secondi dopo il completamento della prima attività."
  example:
  - "The following code example defines three asynchronous tasks that are each set to be processed in parallel. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_3_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_3_1.aspx)]"
  syntax:
    content: public bool ExecuteInParallel { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;attività deve essere elaborata in parallelo con altre attività. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.PageAsyncTask.ExecuteInParallel*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.State
  id: State
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: State
  nameWithType: PageAsyncTask.State
  fullName: System.Web.UI.PageAsyncTask.State
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Ottiene un oggetto che rappresenta lo stato dell&quot;attività."
  remarks: "La proprietà State è impostata nel costruttore e non può essere modificata durante l&quot;esecuzione dell&quot;attività asincrona. È possibile distinguere le attività asincrone in una pagina tramite l&quot;assegnazione di valori stringa univoci alle rispettive proprietà stato."
  example:
  - "The following code example creates three asynchronous tasks and gives them unique values for their State properties. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_4_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_4_1.aspx)]"
  syntax:
    content: public object State { get; }
    return:
      type: System.Object
      description: "Un <xref:System.Object>che rappresenta lo stato dell&quot;attività.</xref:System.Object>"
  overload: System.Web.UI.PageAsyncTask.State*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler
  id: TimeoutHandler
  parent: System.Web.UI.PageAsyncTask
  langs:
  - csharp
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
  fullName: System.Web.UI.PageAsyncTask.TimeoutHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Ottiene il metodo da chiamare quando l&quot;attività non completata entro il periodo di timeout."
  remarks: "Il delegato TimeoutHandler è impostato nel costruttore."
  example:
  - "The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A TimeoutHandler delegate is specified for each task.  \n  \n [!code-cs[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_1_1.aspx)]\n [!code-vb[System.Web.UI.PageAsyncTask#1](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_1_1.aspx)]  \n  \n [!code-vb[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/visualbasic/p-system.web.ui.pageasyn_1_2.vb)]\n [!code-cs[System.Web.UI.PageAsyncTask#2](~/add/codesnippet/csharp/p-system.web.ui.pageasyn_1_2.cs)]"
  syntax:
    content: public System.Web.EndEventHandler TimeoutHandler { get; }
    return:
      type: System.Web.EndEventHandler
      description: "Un <xref href=&quot;System.Web.EndEventHandler&quot;> </xref> delegato che rappresenta il metodo da chiamare quando l&quot;attività non completata entro il periodo di timeout."
  overload: System.Web.UI.PageAsyncTask.TimeoutHandler*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(Func<CancellationToken,Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)
- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<CancellationToken,Task>
  nameWithType: Func<CancellationToken,Task>
  fullName: System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(Func<Task>)
  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(Func<Task>)
- uid: System.Func{System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object)
- uid: System.Web.BeginEventHandler
  parent: System.Web
  isExternal: false
  name: BeginEventHandler
  nameWithType: BeginEventHandler
  fullName: System.Web.BeginEventHandler
- uid: System.Web.EndEventHandler
  parent: System.Web
  isExternal: false
  name: EndEventHandler
  nameWithType: EndEventHandler
  fullName: System.Web.EndEventHandler
- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
  fullName: System.Web.UI.PageAsyncTask.PageAsyncTask(BeginEventHandler,EndEventHandler,EndEventHandler,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.PageAsyncTask.BeginHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
  fullName: System.Web.UI.PageAsyncTask.BeginHandler
- uid: System.Web.UI.PageAsyncTask.EndHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
  fullName: System.Web.UI.PageAsyncTask.EndHandler
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
  fullName: System.Web.UI.PageAsyncTask.ExecuteInParallel
- uid: System.Web.UI.PageAsyncTask.State
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: State
  nameWithType: PageAsyncTask.State
  fullName: System.Web.UI.PageAsyncTask.State
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
  fullName: System.Web.UI.PageAsyncTask.TimeoutHandler
- uid: System.Web.UI.PageAsyncTask.#ctor*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: PageAsyncTask
  nameWithType: PageAsyncTask.PageAsyncTask
- uid: System.Web.UI.PageAsyncTask.BeginHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: BeginHandler
  nameWithType: PageAsyncTask.BeginHandler
- uid: System.Web.UI.PageAsyncTask.EndHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: EndHandler
  nameWithType: PageAsyncTask.EndHandler
- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: ExecuteInParallel
  nameWithType: PageAsyncTask.ExecuteInParallel
- uid: System.Web.UI.PageAsyncTask.State*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: State
  nameWithType: PageAsyncTask.State
- uid: System.Web.UI.PageAsyncTask.TimeoutHandler*
  parent: System.Web.UI.PageAsyncTask
  isExternal: false
  name: TimeoutHandler
  nameWithType: PageAsyncTask.TimeoutHandler
