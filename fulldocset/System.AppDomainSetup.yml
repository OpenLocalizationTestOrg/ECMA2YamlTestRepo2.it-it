### YamlMime:ManagedReference
items:
- uid: System.AppDomainSetup
  id: AppDomainSetup
  children:
  - System.AppDomainSetup.#ctor
  - System.AppDomainSetup.#ctor(System.ActivationContext)
  - System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)
  - System.AppDomainSetup.ActivationArguments
  - System.AppDomainSetup.AppDomainInitializer
  - System.AppDomainSetup.AppDomainInitializerArguments
  - System.AppDomainSetup.AppDomainManagerAssembly
  - System.AppDomainSetup.AppDomainManagerType
  - System.AppDomainSetup.ApplicationBase
  - System.AppDomainSetup.ApplicationName
  - System.AppDomainSetup.ApplicationTrust
  - System.AppDomainSetup.CachePath
  - System.AppDomainSetup.ConfigurationFile
  - System.AppDomainSetup.DisallowApplicationBaseProbing
  - System.AppDomainSetup.DisallowBindingRedirects
  - System.AppDomainSetup.DisallowCodeDownload
  - System.AppDomainSetup.DisallowPublisherPolicy
  - System.AppDomainSetup.DynamicBase
  - System.AppDomainSetup.GetConfigurationBytes
  - System.AppDomainSetup.LicenseFile
  - System.AppDomainSetup.LoaderOptimization
  - System.AppDomainSetup.PartialTrustVisibleAssemblies
  - System.AppDomainSetup.PrivateBinPath
  - System.AppDomainSetup.PrivateBinPathProbe
  - System.AppDomainSetup.SandboxInterop
  - System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})
  - System.AppDomainSetup.SetConfigurationBytes(System.Byte[])
  - System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)
  - System.AppDomainSetup.ShadowCopyDirectories
  - System.AppDomainSetup.ShadowCopyFiles
  - System.AppDomainSetup.TargetFrameworkName
  langs:
  - csharp
  name: AppDomainSetup
  nameWithType: AppDomainSetup
  fullName: System.AppDomainSetup
  type: Class
  summary: "Rappresenta le informazioni di associazione di assembly che possono essere aggiunto a un&quot;istanza di <xref href=&quot;System.AppDomain&quot;> </xref>."
  remarks: "Modifica delle proprietà di un&quot;istanza di AppDomainSetup non influisce sulla qualsiasi esistente <xref:System.AppDomain>.</xref:System.AppDomain> Può interessare solo la creazione di un nuovo <xref:System.AppDomain>, quando il <xref:System.AppDomain.CreateDomain%2A>metodo viene chiamato con l&quot;istanza come parametro AppDomainSetup.</xref:System.AppDomain.CreateDomain%2A> </xref:System.AppDomain>       Questa classe implementa il <xref:System.IAppDomainSetup>interfaccia.</xref:System.IAppDomainSetup>      > [!CAUTION] > Il valore predefinito per il <xref:System.AppDomainSetup.DisallowCodeDownload%2A>proprietà è false.</xref:System.AppDomainSetup.DisallowCodeDownload%2A> Questa impostazione è sicura per i servizi. Per impedire ai servizi di scaricare codice parzialmente attendibile, impostare questa proprietà su true"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class AppDomainSetup : IAppDomainSetup
  inheritance:
  - System.Object
  implements:
  - System.IAppDomainSetup
  inheritedMembers: []
  platform:
  - net462
- uid: System.AppDomainSetup.#ctor
  id: '#ctor'
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainSetup()
  nameWithType: AppDomainSetup.AppDomainSetup()
  fullName: System.AppDomainSetup.AppDomainSetup()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.AppDomainSetup&quot;> </xref> classe."
  syntax:
    content: public AppDomainSetup ();
    parameters: []
  overload: System.AppDomainSetup.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.#ctor(System.ActivationContext)
  id: '#ctor(System.ActivationContext)'
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainSetup(ActivationContext)
  nameWithType: AppDomainSetup.AppDomainSetup(ActivationContext)
  fullName: System.AppDomainSetup.AppDomainSetup(ActivationContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.AppDomainSetup&quot;> </xref> classe con il contesto di attivazione specificato da utilizzare per l&quot;attivazione basata su manifesto di un dominio applicazione."
  remarks: "Il <xref:System.ActivationContext>oggetto specificato per `activationContext` viene utilizzato per generare un <xref:System.Runtime.Hosting.ActivationArguments>oggetto contenente le informazioni necessarie per attivare un nuovo dominio applicazione.</xref:System.Runtime.Hosting.ActivationArguments> </xref:System.ActivationContext> Questo <xref:System.Runtime.Hosting.ActivationArguments>può accedere all&quot;oggetto utilizzando il <xref:System.AppDomainSetup.ActivationArguments%2A>proprietà.</xref:System.AppDomainSetup.ActivationArguments%2A> </xref:System.Runtime.Hosting.ActivationArguments>"
  syntax:
    content: public AppDomainSetup (ActivationContext activationContext);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "Il contesto di attivazione da utilizzare per un dominio applicazione."
  overload: System.AppDomainSetup.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)
  id: '#ctor(System.Runtime.Hosting.ActivationArguments)'
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainSetup(ActivationArguments)
  nameWithType: AppDomainSetup.AppDomainSetup(ActivationArguments)
  fullName: System.AppDomainSetup.AppDomainSetup(ActivationArguments)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.AppDomainSetup&quot;> </xref> classe con gli argomenti di attivazione specificati necessari all&quot;attivazione basata su manifesto di un dominio applicazione."
  remarks: "L&quot;oggetto specificato per `activationArguments` è possibile accedere tramite il <xref:System.AppDomainSetup.ActivationArguments%2A>proprietà.</xref:System.AppDomainSetup.ActivationArguments%2A>"
  syntax:
    content: public AppDomainSetup (System.Runtime.Hosting.ActivationArguments activationArguments);
    parameters:
    - id: activationArguments
      type: System.Runtime.Hosting.ActivationArguments
      description: "Oggetto che specifica le informazioni necessarie per l&quot;attivazione basata su manifesto di un nuovo dominio applicazione."
  overload: System.AppDomainSetup.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationArguments</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AppDomainSetup.ActivationArguments
  id: ActivationArguments
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ActivationArguments
  nameWithType: AppDomainSetup.ActivationArguments
  fullName: System.AppDomainSetup.ActivationArguments
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta i dati relativi all&quot;attivazione di un dominio applicazione."
  remarks: "Viene generata alcuna eccezione se questa proprietà è impostata su `null`.       Le informazioni fornite dal <xref:System.Runtime.Hosting.ActivationArguments>oggetto supporta l&quot;attivazione basata su manifesto.</xref:System.Runtime.Hosting.ActivationArguments>"
  syntax:
    content: public System.Runtime.Hosting.ActivationArguments ActivationArguments { get; set; }
    return:
      type: System.Runtime.Hosting.ActivationArguments
      description: "Oggetto che contiene i dati relativi all&quot;attivazione di un dominio applicazione."
  overload: System.AppDomainSetup.ActivationArguments*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La proprietà è impostata su un <xref href=&quot;System.Runtime.Hosting.ActivationArguments&quot;> </xref> oggetto la cui identità dell&quot;applicazione non corrisponde l&quot;identità dell&quot;applicazione di <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;> </xref> oggetto restituito dal <> </> *> proprietà. Viene generata alcuna eccezione se il <> </> *> proprietà <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.AppDomainSetup.AppDomainInitializer
  id: AppDomainInitializer
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainInitializer
  nameWithType: AppDomainSetup.AppDomainInitializer
  fullName: System.AppDomainSetup.AppDomainInitializer
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta il <xref href=&quot;System.AppDomainInitializer&quot;> </xref> delegato, che rappresenta un metodo di callback che viene richiamato quando viene inizializzato il dominio applicazione."
  remarks: "Per passare informazioni al metodo di callback, assegnare una matrice di stringhe per il <xref:System.AppDomainSetup.AppDomainInitializerArguments%2A>proprietà.</xref:System.AppDomainSetup.AppDomainInitializerArguments%2A> La matrice viene passata al metodo di callback ogni volta che un <xref:System.AppDomain>viene inizializzato.</xref:System.AppDomain>       Il metodo di callback viene eseguito nel contesto del dominio applicazione appena creato."
  example:
  - "The following example creates a child application domain named `ChildDomain`, using an <xref:System.AppDomainSetup> object and evidence from the default application domain. The AppDomainInitializer property is set to the callback method `AppDomainInit`, which is invoked when the child domain is initialized. The arguments for the callback method are placed in an array of strings, which is assigned to the <xref:System.AppDomainSetup.AppDomainInitializerArguments%2A> property. When the child domain is created, the callback method simply prints the strings.  \n  \n [!code-cpp[AppDomainInitializer#1](~/add/codesnippet/cpp/p-system.appdomainsetup._4_1.cpp)]\n [!code-cs[AppDomainInitializer#1](~/add/codesnippet/csharp/p-system.appdomainsetup._4_1.cs)]\n [!code-vb[AppDomainInitializer#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._4_1.vb)]"
  syntax:
    content: public AppDomainInitializer AppDomainInitializer { get; set; }
    return:
      type: System.AppDomainInitializer
      description: "Delegato che rappresenta un metodo di callback che viene richiamato quando viene inizializzato il dominio applicazione."
  overload: System.AppDomainSetup.AppDomainInitializer*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.AppDomainInitializerArguments
  id: AppDomainInitializerArguments
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainInitializerArguments
  nameWithType: AppDomainSetup.AppDomainInitializerArguments
  fullName: System.AppDomainSetup.AppDomainInitializerArguments
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta gli argomenti passati al metodo di callback rappresentato dal <xref href=&quot;System.AppDomainInitializer&quot;> </xref> delegato. Il metodo di callback viene richiamato quando viene inizializzato il dominio applicazione."
  remarks: "Utilizzare il <xref:System.AppDomainSetup.AppDomainInitializer%2A>proprietà per specificare un metodo di callback che viene richiamato durante <xref:System.AppDomain>l&quot;inizializzazione.</xref:System.AppDomain> </xref:System.AppDomainSetup.AppDomainInitializer%2A> Se il <xref:System.AppDomainSetup.AppDomainInitializer%2A>non è impostata, la matrice assegnata a questa proprietà non viene utilizzata.</xref:System.AppDomainSetup.AppDomainInitializer%2A>       Il metodo di callback viene eseguito nel contesto del dominio applicazione appena creato."
  example:
  - "The following code example creates a child application domain named `ChildDomain`, using an <xref:System.AppDomainSetup> object and evidence from the default application domain. The <xref:System.AppDomainSetup.AppDomainInitializer%2A> property is set to the callback method `AppDomainInit`, which is invoked when the child domain is initialized. The arguments for the callback method are placed in an array of strings, which is assigned to the AppDomainInitializerArguments property. When the child domain is created, the callback method simply prints the strings.  \n  \n [!code-cpp[AppDomainInitializer#1](~/add/codesnippet/cpp/p-system.appdomainsetup._0_1.cpp)]\n [!code-cs[AppDomainInitializer#1](~/add/codesnippet/csharp/p-system.appdomainsetup._0_1.cs)]\n [!code-vb[AppDomainInitializer#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._0_1.vb)]"
  syntax:
    content: public string[] AppDomainInitializerArguments { get; set; }
    return:
      type: System.String[]
      description: "Una matrice di stringhe che viene passata al metodo di callback rappresentato dal <xref href=&quot;System.AppDomainInitializer&quot;> </xref> delegato, quando il metodo di callback viene richiamato durante <xref href=&quot;System.AppDomain&quot;> </xref> l&quot;inizializzazione."
  overload: System.AppDomainSetup.AppDomainInitializerArguments*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.AppDomainManagerAssembly
  id: AppDomainManagerAssembly
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainManagerAssembly
  nameWithType: AppDomainSetup.AppDomainManagerAssembly
  fullName: System.AppDomainSetup.AppDomainManagerAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta il nome visualizzato dell&quot;assembly che fornisce il tipo del gestore di dominio di applicazione per i domini applicazione creati usando questo <xref href=&quot;System.AppDomainSetup&quot;> </xref> oggetto."
  remarks: "To specify the type of the application domain manager, set both this property and the <xref:System.AppDomainSetup.AppDomainManagerType%2A> property. If either of these properties is not set, the other is ignored.  \n  \n If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <xref:System.AppDomain.CreateDomain%2A?displayProperty=fullName> method is called).  \n  \n When the application domain is loaded, <xref:System.TypeLoadException> is thrown if the assembly does not exist, or if the assembly does not contain the type specified by the <xref:System.AppDomainSetup.AppDomainManagerType%2A> property. <xref:System.IO.FileLoadException> is thrown if the assembly is found but the version information does not match.  \n  \n To set the application domain manager for the default application domain, use the [\\<appDomainManagerAssembly>](../Topic/%3CappDomainManagerAssembly%3E%20Element.md) and [\\<appDomainManagerType>](../Topic/%3CappDomainManagerType%3E%20Element.md) elements in the [\\<runtime>](../Topic/%3Cruntime%3E%20Element.md) section of the application configuration file, or use the environment variables described in <xref:System.AppDomainManager>.  \n  \n This feature requires the application to have full trust. (For example, an application running on the desktop has full trust.) If the application does not have full trust, a <xref:System.TypeLoadException> is thrown.  \n  \n The format of the assembly display name is given by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property."
  syntax:
    content: public string AppDomainManagerAssembly { get; set; }
    return:
      type: System.String
      description: "Il nome visualizzato dell&quot;assembly che fornisce il <xref:System.Type>del gestore di dominio di applicazione.</xref:System.Type>"
  overload: System.AppDomainSetup.AppDomainManagerAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.AppDomainManagerType
  id: AppDomainManagerType
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: AppDomainManagerType
  nameWithType: AppDomainSetup.AppDomainManagerType
  fullName: System.AppDomainSetup.AppDomainManagerType
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta il nome completo del tipo che fornisce il gestore di dominio di applicazione per i domini applicazione creati usando questo <xref href=&quot;System.AppDomainSetup&quot;> </xref> oggetto."
  remarks: "To specify the type of the application domain manager, set both this property and the <xref:System.AppDomainSetup.AppDomainManagerAssembly%2A> property. If either of these properties is not set, the other is ignored.  \n  \n If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <xref:System.AppDomain.CreateDomain%2A?displayProperty=fullName> method is called).  \n  \n When the application domain is loaded, <xref:System.TypeLoadException> is thrown if the assembly specified by the <xref:System.AppDomainSetup.AppDomainManagerAssembly%2A> property does not contain the type specified by this property.  \n  \n To set the application domain manager for the default application domain, use the [\\<appDomainManagerAssembly>](../Topic/%3CappDomainManagerAssembly%3E%20Element.md) and [\\<appDomainManagerType>](../Topic/%3CappDomainManagerType%3E%20Element.md) elements in the [\\<runtime>](../Topic/%3Cruntime%3E%20Element.md) section of the application configuration file, or use the environment variables described in <xref:System.AppDomainManager>.  \n  \n This feature requires the application to have full trust. (For example, an application running on the desktop has full trust.) If the application does not have full trust, a <xref:System.TypeLoadException> is thrown.  \n  \n The format of the full name of a type is given by the <xref:System.Type.FullName%2A?displayProperty=fullName> property."
  syntax:
    content: public string AppDomainManagerType { get; set; }
    return:
      type: System.String
      description: "Il nome completo del tipo, incluso lo spazio dei nomi."
  overload: System.AppDomainSetup.AppDomainManagerType*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.ApplicationBase
  id: ApplicationBase
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ApplicationBase
  nameWithType: AppDomainSetup.ApplicationBase
  fullName: System.AppDomainSetup.ApplicationBase
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta il nome della directory contenente l&quot;applicazione."
  remarks: "Directory base dell&quot;applicazione è in cui il gestore dell&quot;assembly inizia la ricerca degli assembly.       La proprietà ApplicationBase può influenzare le autorizzazioni concesse a un dominio applicazione. Ad esempio, un dominio dell&quot;applicazione provenienti dal computer locale, in genere considerato completamente attendibile in base alla relativa posizione di origine. Tuttavia, se la proprietà ApplicationBase del che <xref:System.AppDomain>è impostato sul nome completo della directory di una rete intranet, ApplicationBase impostazione limita le autorizzazioni concesse al dominio dell&quot;applicazione a un tipo LocalIntranet anche se il dominio applicazione ha effettivamente dal computer locale.</xref:System.AppDomain>"
  example:
  - "The following example demonstrates how to use the ApplicationBase property to set the location where the assembly loader begins probing for assemblies to load into a new application domain.  \n  \n> [!NOTE]\n>  You must ensure that the folder you specify exists.  \n  \n [!code-vb[ADApplicationBase#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._5_1.vb)]\n [!code-cpp[ADApplicationBase#1](~/add/codesnippet/cpp/p-system.appdomainsetup._5_1.cpp)]\n [!code-cs[ADApplicationBase#1](~/add/codesnippet/csharp/p-system.appdomainsetup._5_1.cs)]"
  syntax:
    content: public string ApplicationBase { get; set; }
    return:
      type: System.String
      description: "Il nome della directory base dell&quot;applicazione."
  overload: System.AppDomainSetup.ApplicationBase*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.ApplicationName
  id: ApplicationName
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ApplicationName
  nameWithType: AppDomainSetup.ApplicationName
  fullName: System.AppDomainSetup.ApplicationName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta il nome dell&quot;applicazione."
  remarks: ''
  example:
  - "The following example shows how to set the ApplicationName property when you create a new application domain.  \n  \n The example creates a new application domain, and then calls the <xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=fullName> method to load the example assembly into the new application domain and create an instance of the `Worker` class. The `Worker` class inherits <xref:System.MarshalByRefObject>, so the example can use the proxy returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A> to call the `TestLoad` method.  \n  \n The `TestLoad` method loads an assembly that you specify. You must either specify a valid, fully qualified assembly name, or comment out the <xref:System.Reflection.Assembly.Load%28System.String%29> method. The `TestLoad` method lists the assemblies that are loaded into the new application domain, showing that your specified assembly and the example assembly are loaded.  \n  \n The example uses the <xref:System.LoaderOptimizationAttribute> attribute to tell the assembly loader how the application will share code across application domains.  \n  \n [!code-cpp[ADMultiDomain#1](~/add/codesnippet/cpp/p-system.appdomainsetup._2_1.cpp)]\n [!code-cs[ADMultiDomain#1](~/add/codesnippet/csharp/p-system.appdomainsetup._2_1.cs)]\n [!code-vb[ADMultiDomain#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._2_1.vb)]"
  syntax:
    content: public string ApplicationName { get; set; }
    return:
      type: System.String
      description: "Il nome dell&quot;applicazione."
  overload: System.AppDomainSetup.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.ApplicationTrust
  id: ApplicationTrust
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ApplicationTrust
  nameWithType: AppDomainSetup.ApplicationTrust
  fullName: System.AppDomainSetup.ApplicationTrust
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta un oggetto che contiene informazioni sulla sicurezza e attendibilità."
  remarks: "Questa proprietà è `null` quando il <xref:System.AppDomainSetup>viene creato.</xref:System.AppDomainSetup> Una volta modificata, non è possibile ripristinare un riferimento null."
  syntax:
    content: public System.Security.Policy.ApplicationTrust ApplicationTrust { get; set; }
    return:
      type: System.Security.Policy.ApplicationTrust
      description: "Oggetto che contiene informazioni sulla sicurezza e attendibilità."
  overload: System.AppDomainSetup.ApplicationTrust*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La proprietà è impostata su un <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;> </xref> oggetto la cui identità dell&quot;applicazione non corrisponde l&quot;identità dell&quot;applicazione di <xref href=&quot;System.Runtime.Hosting.ActivationArguments&quot;> </xref> oggetto restituito dal <> </> *> proprietà. Viene generata alcuna eccezione se il <> </> *> proprietà <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "La proprietà è impostata su <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.AppDomainSetup.CachePath
  id: CachePath
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: CachePath
  nameWithType: AppDomainSetup.CachePath
  fullName: System.AppDomainSetup.CachePath
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta il nome di un&quot;area specifica per l&quot;applicazione, in cui viene creata la copia shadow di file."
  remarks: "Affinché questa proprietà ha un effetto, la <xref:System.AppDomainSetup.ApplicationName%2A>deve anche essere impostata.</xref:System.AppDomainSetup.ApplicationName%2A> Se il <xref:System.AppDomainSetup.ApplicationName%2A>non è impostata, la proprietà di impostazione viene ignorata e il percorso della cache di copia shadow per impostazione predefinita la download cache.</xref:System.AppDomainSetup.ApplicationName%2A>       Per ulteriori informazioni sulla creazione di copie shadow, vedere [copie Shadow di assembly](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public string CachePath { get; set; }
    return:
      type: System.String
      description: "Il nome completo del nome di file e percorso della directory in cui viene creata la copia shadow di file."
  overload: System.AppDomainSetup.CachePath*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.ConfigurationFile
  id: ConfigurationFile
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ConfigurationFile
  nameWithType: AppDomainSetup.ConfigurationFile
  fullName: System.AppDomainSetup.ConfigurationFile
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta il nome del file di configurazione per un dominio applicazione."
  remarks: "Il file di configurazione vengono descritte le regole di ricerca e i dati di configurazione per il dominio applicazione. L&quot;host che crea il dominio applicazione è responsabile di fornire questi dati, in quanto i valori significativi variano da caso a situazione.       Ad esempio, i dati di configurazione per le applicazioni ASP.NET vengono archiviati per ogni applicazione, sito e computer, mentre i dati di configurazione per un eseguibile vengono archiviati per ogni applicazione, utente e computer. Solo l&quot;host sappia le specifiche dei dati di configurazione per una particolare circostanza."
  syntax:
    content: public string ConfigurationFile { get; set; }
    return:
      type: System.String
      description: "Il nome del file di configurazione."
  overload: System.AppDomainSetup.ConfigurationFile*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.DisallowApplicationBaseProbing
  id: DisallowApplicationBaseProbing
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: DisallowApplicationBaseProbing
  nameWithType: AppDomainSetup.DisallowApplicationBaseProbing
  fullName: System.AppDomainSetup.DisallowApplicationBaseProbing
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Specifica se il percorso base dell&quot;applicazione e il percorso binario privato vengono sondati durante la ricerca degli assembly da caricare."
  remarks: "Se la proprietà DisallowApplicationBaseProbing `true`, il valore di <xref:System.AppDomainSetup.ApplicationBase%2A>proprietà viene ignorata.</xref:System.AppDomainSetup.ApplicationBase%2A> Ovvero nessun assembly subiscono nelle directory specificate per il <xref:System.AppDomainSetup.ApplicationBase%2A>proprietà.</xref:System.AppDomainSetup.ApplicationBase%2A> Inoltre, i valori del <xref:System.AppDomainSetup.PrivateBinPath%2A>proprietà e <xref:System.AppDomainSetup.PrivateBinPathProbe%2A>proprietà vengono ignorate.</xref:System.AppDomainSetup.PrivateBinPathProbe%2A> </xref:System.AppDomainSetup.PrivateBinPath%2A> Nessun assembly subiscono nella directory specificata dal <xref:System.AppDomainSetup.PrivateBinPath%2A>proprietà.</xref:System.AppDomainSetup.PrivateBinPath%2A>       La proprietà DisallowApplicationBaseProbing fornisce un ulteriore livello di controllo sul processo di caricamento. Nella normale sequenza di caricamento degli assembly, la base dell&quot;applicazione viene eseguita prima il <xref:System.AppDomain.AssemblyResolve?displayProperty=fullName>viene generato l&quot;evento.</xref:System.AppDomain.AssemblyResolve?displayProperty=fullName> Tuttavia, alcune applicazioni potrebbe essere necessario caricare gli assembly da un file composto OLE all&quot;interno di un documento o da un percorso univoco noto che non è nella global assembly cache né nelle directory specificate per il <xref:System.AppDomainSetup.ApplicationBase%2A>e <xref:System.AppDomainSetup.PrivateBinPath%2A>proprietà.</xref:System.AppDomainSetup.PrivateBinPath%2A> </xref:System.AppDomainSetup.ApplicationBase%2A> Tali applicazioni possono utilizzare la proprietà DisallowApplicationBaseProbing per evitare il ritardo causato dal sondaggio normale e per evitare il caricamento di copie dell&quot;assembly necessari che possono trovarsi nei percorsi di sondaggio normale."
  syntax:
    content: public bool DisallowApplicationBaseProbing { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il sondaggio non è consentito; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.AppDomainSetup.DisallowApplicationBaseProbing*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.DisallowBindingRedirects
  id: DisallowBindingRedirects
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: DisallowBindingRedirects
  nameWithType: AppDomainSetup.DisallowBindingRedirects
  fullName: System.AppDomainSetup.DisallowBindingRedirects
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta un valore che indica se un dominio dell&quot;applicazione consente il reindirizzamento dell&quot;associazione di assembly."
  remarks: "La proprietà DisallowBindingRedirects è progettata per essere utilizzata da servizi e applicazioni server in cui il reindirizzamento dell&quot;associazione di assembly non fa parte dello scenario di applicazione."
  syntax:
    content: public bool DisallowBindingRedirects { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il reindirizzamento degli assembly non è consentito. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se è consentito."
  overload: System.AppDomainSetup.DisallowBindingRedirects*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.DisallowCodeDownload
  id: DisallowCodeDownload
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: DisallowCodeDownload
  nameWithType: AppDomainSetup.DisallowCodeDownload
  fullName: System.AppDomainSetup.DisallowCodeDownload
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta un valore che indica se è consentito il download HTTP di assembly per un dominio applicazione."
  remarks: "La proprietà DisallowCodeDownload è progettata per essere utilizzata da servizi e applicazioni server in cui il download di codice da una rete intranet o Internet non fa parte dello scenario di applicazione.      > [!CAUTION] > È il valore predefinito per la proprietà DisallowCodeDownload `false`. Questa impostazione è sicura per i servizi. Per impedire lo scaricamento di codice parzialmente attendibile da servizi, impostare questa proprietà su `true`."
  syntax:
    content: public bool DisallowCodeDownload { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il download HTTP di assembly non è consentito; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se è consentito."
  overload: System.AppDomainSetup.DisallowCodeDownload*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.DisallowPublisherPolicy
  id: DisallowPublisherPolicy
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: DisallowPublisherPolicy
  nameWithType: AppDomainSetup.DisallowPublisherPolicy
  fullName: System.AppDomainSetup.DisallowPublisherPolicy
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta un valore che indica se il [ &lt;publisherPolicy&gt; ](../Topic/%3CpublisherPolicy%3E%20Element.md) sezione del file di configurazione viene applicata a un dominio applicazione."
  remarks: "La proprietà DisallowPublisherPolicy si applica in particolare a un&quot;applicazione Web che viene caricata in locale. Utilizzare questa proprietà per evitare che un tentativo non autorizzato per l&quot;esecuzione di un&quot;applicazione Web non sicura in modalità provvisoria.       Per ulteriori informazioni sull&quot;esclusione dei criteri dell&quot;editore, vedere il [reindirizzamento delle versioni degli Assembly](~/add/includes/ajax-current-ext-md.md) argomento. Per ulteriori informazioni sulla modalità provvisoria, vedere la sezione &quot;Analisi dei file di configurazione&quot; del [come il Runtime individua gli assembly](~/add/includes/ajax-current-ext-md.md) argomento."
  syntax:
    content: public bool DisallowPublisherPolicy { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref uid=&quot;langword_csharp_&lt;publisherPolicy&gt;&quot; name=&quot;&lt;publisherPolicy&gt;&quot; href=&quot;&quot;> </xref> sezione del file di configurazione per un dominio applicazione viene ignorata. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se i criteri dell&quot;editore dichiarati vengono applicati."
  overload: System.AppDomainSetup.DisallowPublisherPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.DynamicBase
  id: DynamicBase
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: DynamicBase
  nameWithType: AppDomainSetup.DynamicBase
  fullName: System.AppDomainSetup.DynamicBase
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta la directory di base in cui si trova la directory dei file generati dinamicamente."
  remarks: "Use this property to set the base directory where the dynamic directory for the new application domain will be located. When code in the new application domain loads an assembly, assembly resolution looks first in the normal probing paths. If it does not find the assembly, it looks in the dynamic directory, which is returned by the <xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName> property. Dynamic assemblies that will be loaded and executed by the new application domain can be placed there.  \n  \n When you assign a path to the DynamicBase property, an additional subdirectory is added; the name of this subdirectory is the hash code of the value assigned to the <xref:System.AppDomainSetup.ApplicationName%2A> property. Thus, the base directory subsequently returned by this property is always different from the value assigned.  \n  \n> [!IMPORTANT]\n>  Assigning a value to this property does not create any directories. The directories must be created or verified by the code that uses them.  \n  \n The dynamic directory is a subdirectory of DynamicBase. Its simple name is the value returned by the <xref:System.AppDomainSetup.ApplicationName%2A> property, so its format is *original path*\\\\*hash code*\\\\*application name*."
  example:
  - "The following example demonstrates how to use the DynamicBase property to set the path an application domain probes when loading dynamic assemblies.  \n  \n The example creates an <xref:System.AppDomainSetup> object and sets its <xref:System.AppDomainSetup.ApplicationName%2A> property to \"Example\" and its DynamicBase property to \"C:\\DynamicAssemblyDir\". The example then displays the DynamicBase property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.  \n  \n> [!NOTE]\n>  The base directory in this example is intended to be outside the probing path for the example application. Be sure to compile the example in a different location. Delete the base directory and all its subdirectories each time you run the example.  \n  \n The example creates a new application domain using the <xref:System.AppDomainSetup> object. The example then creates the dynamic directory if it does not already exist. Although the example uses the application domain's <xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName> property to get the name of the dynamic directory, it could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.  \n  \n The example has a `GenerateDynamicAssembly` method that emits an assembly named `DynamicHelloWorld.dll` and stores it in the new application domain's dynamic directory. The dynamic assembly contains one type, `HelloWorld`, that has a static method (`Shared` method in Visual Basic) named `HelloFromAD`. Calling this method displays the name of the application domain.  \n  \n The `Example` class derives from <xref:System.MarshalByRefObject>, so the example can create an instance of the class in the new application domain and call its `Test` method. The `Test` method loads the dynamic assembly by its display name and calls the static `HelloFromAD` method.  \n  \n You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named `DynamicHelloWorld.dll` and compiling it in the same directory as this example. The assembly must have a class named `HelloWorld` with a static method named `HelloFromAD`. This method does not have to have the same functionality as the one in the example; it can simply display a string to the console. The assembly must also have an <xref:System.Reflection.AssemblyVersionAttribute> attribute that sets its version to 1.0.0.0. When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.  \n  \n [!code-cpp[ADDynamicBase#1](~/add/codesnippet/cpp/p-system.appdomainsetup._1_1.cpp)]\n [!code-cs[ADDynamicBase#1](~/add/codesnippet/csharp/p-system.appdomainsetup._1_1.cs)]\n [!code-vb[ADDynamicBase#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._1_1.vb)]"
  syntax:
    content: public string DynamicBase { get; set; }
    return:
      type: System.String
      description: "La directory in cui il &lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=fullName&gt; si trova.       <div class=&quot;alert NOTE&quot;>    Il valore restituito di questa proprietà è diverso dal valore assegnato. Vedere la sezione Osservazioni.      </div>"
  overload: System.AppDomainSetup.DynamicBase*
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "Questa proprietà non può essere impostata perché il nome dell&quot;applicazione nel dominio applicazione è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.AppDomainSetup.GetConfigurationBytes
  id: GetConfigurationBytes
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: GetConfigurationBytes()
  nameWithType: AppDomainSetup.GetConfigurationBytes()
  fullName: System.AppDomainSetup.GetConfigurationBytes()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Restituisce le informazioni di configurazione XML impostate dal <xref:System.AppDomainSetup.SetConfigurationBytes*>metodo, che esegue l&quot;override delle informazioni di configurazione XML dell&quot;applicazione.</xref:System.AppDomainSetup.SetConfigurationBytes*>"
  remarks: "Il <xref:System.AppDomainSetup.SetConfigurationBytes%2A>metodo fornisce un modo per ignorare le informazioni di configurazione di un&quot;applicazione che crea un nuovo dominio applicazione.</xref:System.AppDomainSetup.SetConfigurationBytes%2A> Le informazioni sul file di configurazione in `value` sostituisce le informazioni del file di configurazione per l&quot;applicazione. Ad esempio, quando l&quot;applicazione Example.exe crea un nuovo dominio applicazione, è possibile eseguire l&quot;override originariamente ottenute dal file example.exe le informazioni di configurazione.      > [!IMPORTANT] > Alcuni consumer di informazioni sui file di configurazione non utilizzare le informazioni archiviate dal <xref:System.AppDomainSetup.SetConfigurationBytes%2A>metodo.</xref:System.AppDomainSetup.SetConfigurationBytes%2A> Il runtime non applicare questo comportamento. Per garantire che tutte le informazioni sui file di configurazione è sottoposto a override in un nuovo dominio applicazione, utilizzare il <xref:System.AppDomainSetup.ConfigurationFile%2A>proprietà per specificare un file di configurazione.</xref:System.AppDomainSetup.ConfigurationFile%2A> Il <xref:System.AppDomainSetup.SetConfigurationBytes%2A>metodo influisce l&quot;associazione di assembly.</xref:System.AppDomainSetup.SetConfigurationBytes%2A>       Il codice XML nel `value` corrisponde a quello del file XML in un normale file di configurazione, ad eccezione del fatto che viene archiviato come un <xref:System.Byte>array.</xref:System.Byte>       Per accedere ai byte di configurazione per un dominio applicazione, utilizzare il <xref:System.AppDomain.SetupInformation%2A?displayProperty=fullName>proprietà da ottenere il <xref:System.AppDomainSetup>dell&quot;oggetto per il dominio applicazione, quindi utilizzare il metodo GetConfigurationBytes.</xref:System.AppDomainSetup> </xref:System.AppDomain.SetupInformation%2A?displayProperty=fullName>"
  syntax:
    content: public byte[] GetConfigurationBytes ();
    parameters: []
    return:
      type: System.Byte[]
      description: "Matrice che contiene le informazioni di configurazione XML impostate dal <> </> *> metodo, o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se il <> </> *> (metodo) non è stato chiamato."
  overload: System.AppDomainSetup.GetConfigurationBytes*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.LicenseFile
  id: LicenseFile
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: LicenseFile
  nameWithType: AppDomainSetup.LicenseFile
  fullName: System.AppDomainSetup.LicenseFile
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta il percorso del file di licenza associato al dominio."
  syntax:
    content: public string LicenseFile { get; set; }
    return:
      type: System.String
      description: "Il percorso e il nome del file di licenza."
  overload: System.AppDomainSetup.LicenseFile*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.LoaderOptimization
  id: LoaderOptimization
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: LoaderOptimization
  nameWithType: AppDomainSetup.LoaderOptimization
  fullName: System.AppDomainSetup.LoaderOptimization
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Specifica i criteri di ottimizzazione usati per caricare un eseguibile."
  remarks: ''
  example:
  - "The following example creates a dynamic assembly and saves it to disk, and then uses the LoaderOptimization property to set the optimization policy used to load the assembly into an application domain.  \n  \n [!code-cpp[ADDyno#1](~/add/codesnippet/cpp/p-system.appdomainsetup._3_1.cpp)]\n [!code-cs[ADDyno#1](~/add/codesnippet/csharp/p-system.appdomainsetup._3_1.cs)]\n [!code-vb[ADDyno#1](~/add/codesnippet/visualbasic/p-system.appdomainsetup._3_1.vb)]"
  syntax:
    content: public LoaderOptimization LoaderOptimization { get; set; }
    return:
      type: System.LoaderOptimization
      description: "Costante enumerata usata con il <xref href=&quot;System.LoaderOptimizationAttribute&quot;> </xref>."
  overload: System.AppDomainSetup.LoaderOptimization*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.PartialTrustVisibleAssemblies
  id: PartialTrustVisibleAssemblies
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: PartialTrustVisibleAssemblies
  nameWithType: AppDomainSetup.PartialTrustVisibleAssemblies
  fullName: System.AppDomainSetup.PartialTrustVisibleAssemblies
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta un elenco di assembly contrassegnati con il <xref href=&quot;System.Security.PartialTrustVisibilityLevel&quot;> </xref> flag che vengono rese visibili a codice parzialmente attendibile in esecuzione in un dominio applicazione sandboxed."
  remarks: "A partire dal [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], l&quot; <xref:System.Security.AllowPartiallyTrustedCallersAttribute>attributo (APTCA) può essere reso condizionale impostando la <xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A>proprietà <xref:System.Security.PartialTrustVisibilityLevel>.</xref:System.Security.PartialTrustVisibilityLevel> </xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A> </xref:System.Security.AllowPartiallyTrustedCallersAttribute> Un assembly APTCA contrassegnato con <xref:System.Security.PartialTrustVisibilityLevel>non può essere utilizzato da codice parzialmente attendibile a meno che non lo consente l&quot;applicazione host.</xref:System.Security.PartialTrustVisibilityLevel>       L&quot;host di un dominio applicazione creato mediante sandbox consente al codice nel dominio dell&quot;applicazione per utilizzare gli assembly con attributi APTCA condizionali creando una matrice che contiene il nome semplice e la chiave pubblica di ogni assembly e l&quot;assegnazione di matrice a questa proprietà. For example, an element of the array might look like the following: &quot;MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9&quot;.      > [!IMPORTANT] > Se si utilizza una sottoclasse di <xref:System.AppDomainManager>e l&quot;assembly che lo definisce dipende da assembly contrassegnati con l&quot;attributo APTCA condizionale, è necessario includere tali assembly nell&quot;elenco che viene passato alla proprietà PartialTrustVisibleAssemblies del <xref:System.AppDomainSetup>consente di creare i domini applicazione.</xref:System.AppDomainSetup> </xref:System.AppDomainManager> In caso contrario, gli assembly contrassegnati con l&quot;attributo APTCA condizionale verranno disabilitati.      > [!NOTE] > Quando si esegue il debug di un&quot;applicazione è in esecuzione in un dominio applicazione creato mediante sandbox, alcuni <xref:System.Security.SecurityException>i messaggi possono essere fuorvianti.</xref:System.Security.SecurityException> Ad esempio, un messaggio potrebbe indicare che uno degli assembly completamente attendibile dispone solo di autorizzazioni limitate, quando la causa effettiva del problema è che una richiesta di sicurezza che supera il set di concessioni del dominio applicazione creato mediante sandbox è stato propagato al limite del dominio applicazione creato mediante sandbox e non è riuscita."
  syntax:
    content: public string[] PartialTrustVisibleAssemblies { get; set; }
    return:
      type: System.String[]
      description: "Matrice di nomi di assembly parziali, dove ogni nome parziale è costituito da nome semplice dell&quot;assembly e la chiave pubblica."
  overload: System.AppDomainSetup.PartialTrustVisibleAssemblies*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.PrivateBinPath
  id: PrivateBinPath
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: PrivateBinPath
  nameWithType: AppDomainSetup.PrivateBinPath
  fullName: System.AppDomainSetup.PrivateBinPath
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta l&quot;elenco di directory nella directory base dell&quot;applicazione in cui effettuare il sondaggio degli assembly privati."
  remarks: "Assembly privati vengono distribuiti nella stessa struttura di directory dell&quot;applicazione. Se la directory specificata per PrivateBinPath non sono in <xref:System.AppDomainSetup.ApplicationBase%2A>, vengono ignorati.</xref:System.AppDomainSetup.ApplicationBase%2A>"
  syntax:
    content: public string PrivateBinPath { get; set; }
    return:
      type: System.String
      description: "Un elenco di nomi di directory separati da punti e virgola."
  overload: System.AppDomainSetup.PrivateBinPath*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.PrivateBinPathProbe
  id: PrivateBinPathProbe
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: PrivateBinPathProbe
  nameWithType: AppDomainSetup.PrivateBinPathProbe
  fullName: System.AppDomainSetup.PrivateBinPathProbe
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta un valore stringa che include o esclude <> </> *> dal percorso di ricerca per l&quot;applicazione e ricerche solo <> </> *>."
  remarks: "Impostare questa proprietà su un valore di stringa non null, inclusi <xref:System.String?displayProperty=fullName>(&quot;&quot;), escludere il percorso di directory dell&quot;applicazione, vale a dire <xref:System.AppDomainSetup.ApplicationBase%2A>, dal percorso di ricerca per l&quot;applicazione e per cercare assembly solo in <xref:System.AppDomainSetup.PrivateBinPath%2A>.</xref:System.AppDomainSetup.PrivateBinPath%2A> </xref:System.AppDomainSetup.ApplicationBase%2A> </xref:System.String?displayProperty=fullName>"
  syntax:
    content: public string PrivateBinPathProbe { get; set; }
    return:
      type: System.String
      description: "Un riferimento null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic) per includere il percorso base dell&quot;applicazione durante la ricerca di assembly; qualsiasi valore stringa non null per escludere il percorso. Il valore predefinito è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.AppDomainSetup.PrivateBinPathProbe*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.SandboxInterop
  id: SandboxInterop
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: SandboxInterop
  nameWithType: AppDomainSetup.SandboxInterop
  fullName: System.AppDomainSetup.SandboxInterop
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta un valore che indica se la memorizzazione nella cache di interfaccia è disabilitata per le chiamate all&quot;interoperabilità nel dominio dell&quot;applicazione, in modo che un `QueryInterface` viene eseguita per ogni chiamata."
  remarks: "La disabilitazione del caching interfaccia ha un impatto significativo sulle prestazioni delle chiamate di interoperabilità.       Questo membro è stato introdotto nel [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]."
  syntax:
    content: public bool SandboxInterop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;interfaccia di memorizzazione nella cache è disabilitata per le chiamate all&quot;interoperabilità nei domini applicazione creati con l&quot;oggetto corrente <xref href=&quot;System.AppDomainSetup&quot;> </xref> oggetto; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.AppDomainSetup.SandboxInterop*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})
  id: SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: SetCompatibilitySwitches(IEnumerable<String>)
  nameWithType: AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)
  fullName: System.AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Imposta le opzioni specificate, rendendo il dominio applicazione compatibile con le versioni precedenti di .NET Framework per i problemi specificati."
  remarks: "Major versions of the .NET Framework sometimes introduce breaking changes from the previous version. For example, the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)] introduces a small number of breaking changes from the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]. Use the SetCompatibilitySwitches method to specify that one or more of these breaking changes should be rolled back for the application domain, to make the behavior compatible with the previous version of the .NET Framework.  \n  \n Each time you call this method, it replaces the existing switch settings. To erase the settings, specify `null` for the `switches` parameter.  \n  \n The set of string values you provide for `switches` can be a simple string array, because arrays implement the <xref:System.Collections.IEnumerable> interface.  \n  \n The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.  \n  \n|Switch|Meaning|  \n|------------|-------------|  \n|\"NetFx40_LegacySecurityPolicy\"|Code access security (CAS) for the [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] is enabled in this application domain. See [\\&lt;NetFx40_LegacySecurityPolicy\\&gt; Element](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md).|  \n|\"NetFx40_Legacy20SortingBehavior\"|String sorting defaults for the [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] are enabled in this application domain. Successfully restoring legacy sorting behavior also requires the sort00001000.dll dynamic link library to be available on the local system. See [\\&lt;CompatSortNLSVersion\\&gt; Element](../Topic/%3CCompatSortNLSVersion%3E%20Element.md).|  \n|\"NetFx40_Legacy40SortingBehavior\"|String sorting defaults for the [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] and Unicode 5.0 are enabled in this application domain. Successfully restoring legacy sorting behavior also requires the sort00060101.dll dynamic link library to be available on the local system.|  \n|\"NetFx40_TimeSpanLegacyFormatMode\"|<xref:System.TimeSpan> formatting behavior for the [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] is enabled in this application domain. See [\\&lt;TimeSpan_LegacyFormatMode\\&gt; Element](../Topic/%3CTimeSpan_LegacyFormatMode%3E%20Element.md) and the \"Restoring Legacy TimeSpan Formatting\" section of the <xref:System.TimeSpan> topic.|  \n|\"UseRandomizedStringHashAlgorithm\"|The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains. See [\\&lt;UseRandomizedStringHashAlgorithm\\&gt; Element](../Topic/%3CUseRandomizedStringHashAlgorithm%3E%20Element.md).|"
  syntax:
    content: public void SetCompatibilitySwitches (System.Collections.Generic.IEnumerable<string> switches);
    parameters:
    - id: switches
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "Set enumerabile di valori stringa che specifica le opzioni di compatibilità o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per cancellare la compatibilità esistente opzioni."
  overload: System.AppDomainSetup.SetCompatibilitySwitches*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.SetConfigurationBytes(System.Byte[])
  id: SetConfigurationBytes(System.Byte[])
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: SetConfigurationBytes(Byte[])
  nameWithType: AppDomainSetup.SetConfigurationBytes(Byte[])
  fullName: System.AppDomainSetup.SetConfigurationBytes(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Fornisce informazioni di configurazione XML per il dominio applicazione, la sostituzione delle informazioni di configurazione XML dell&quot;applicazione."
  remarks: "Il metodo SetConfigurationBytes fornisce un modo per sostituire le informazioni di configurazione di un&quot;applicazione che crea un nuovo dominio applicazione. Le informazioni sul file di configurazione in `value`sostituisce le informazioni del file di configurazione per l&quot;applicazione. Ad esempio, quando l&quot;applicazione Example.exe crea un nuovo dominio applicazione, è possibile sostituire le informazioni di configurazione originariamente ottenute dal file example.exe.      > [!IMPORTANT] > Alcuni consumer di informazioni sui file di configurazione non utilizzare le informazioni archiviate dal metodo SetConfigurationBytes. Il runtime non applicare questo comportamento. Per garantire che tutte le informazioni sui file di configurazione vengano sostituite in un nuovo dominio applicazione, utilizzare il <xref:System.AppDomainSetup.ConfigurationFile%2A>proprietà per specificare un file di configurazione.</xref:System.AppDomainSetup.ConfigurationFile%2A> Il metodo SetConfigurationBytes influisce l&quot;associazione di assembly.       Il codice XML nel `value` corrisponde a quello del file XML in un normale file di configurazione, ad eccezione del fatto che viene archiviato come un <xref:System.Byte>array.</xref:System.Byte>"
  syntax:
    content: public void SetConfigurationBytes (byte[] value);
    parameters:
    - id: value
      type: System.Byte[]
      description: "Matrice che contiene le informazioni di configurazione XML da utilizzare per il dominio applicazione."
  overload: System.AppDomainSetup.SetConfigurationBytes*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)
  id: SetNativeFunction(System.String,System.Int32,System.IntPtr)
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: SetNativeFunction(String,Int32,IntPtr)
  nameWithType: AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)
  fullName: System.AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Fornisce common language runtime con un&quot;implementazione alternativa di una funzione di confronto di stringhe."
  remarks: "Il confronto tra stringhe seguenti e i metodi di ordinamento può essere sostituiti dal metodo SetNativeFunction:- `IsNLSDefinedString`       -    `CompareStringEx`       -    `LCMapStringEx`       -    `FindNLSStringEx`       -    `CompareStringOrdinal`       -    `GetNLSVersion` per informazioni su queste funzioni, vedere [le funzioni di supporto lingua nazionale](http://go.microsoft.com/fwlink/?LinkId=228134)."
  syntax:
    content: public void SetNativeFunction (string functionName, int functionVersion, IntPtr functionPointer);
    parameters:
    - id: functionName
      type: System.String
      description: "Il nome della funzione di confronto di stringa per eseguire l&quot;override."
    - id: functionVersion
      type: System.Int32
      description: "La versione della funzione. Per [!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)], il relativo valore deve essere maggiore o uguale a 1."
    - id: functionPointer
      type: System.IntPtr
      description: "Un puntatore a funzione che esegue l&quot;override `functionName`."
  overload: System.AppDomainSetup.SetNativeFunction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>functionName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>functionVersion</code>non è 1 o versione successiva.       - oppure - <code>functionPointer</code> è &lt;xref:System.IntPtr?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.AppDomainSetup.ShadowCopyDirectories
  id: ShadowCopyDirectories
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ShadowCopyDirectories
  nameWithType: AppDomainSetup.ShadowCopyDirectories
  fullName: System.AppDomainSetup.ShadowCopyDirectories
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta i nomi delle directory contenenti assembly per la copia shadow."
  remarks: "Quando la copia shadow è attivata, il valore predefinito è la copia shadow di tutti gli assembly trovati durante il rilevamento; ovvero, nelle directory specificate dal <xref:System.AppDomainSetup.PrivateBinPath%2A>e <xref:System.AppDomainSetup.ApplicationBase%2A>proprietà.</xref:System.AppDomainSetup.ApplicationBase%2A> </xref:System.AppDomainSetup.PrivateBinPath%2A> La proprietà ShadowCopyDirectories limita la copia shadow agli assembly nella directory specificata da ShadowCopyDirectories.       Se non si assegna una stringa alla proprietà ShadowCopyDirectories o se si imposta questa proprietà su `null`, tutti gli assembly nella directory specificata per il <xref:System.AppDomainSetup.ApplicationBase%2A>e <xref:System.AppDomainSetup.PrivateBinPath%2A>proprietà vengono replicati.</xref:System.AppDomainSetup.PrivateBinPath%2A> </xref:System.AppDomainSetup.ApplicationBase%2A>      > [!IMPORTANT] > I percorsi di directory non devono contenere punti e virgola, perché il punto e virgola è il carattere delimitatore. Non è presente alcun carattere di escape per i punti e virgola.       Quando la copia shadow è attivo, i file di assembly vengono copiati in un altro percorso prima gli assembly vengono caricati. Il file di assembly originale non è bloccato, pertanto può essere aggiornata. Per ulteriori informazioni sulla creazione di copie shadow, vedere [copie Shadow di assembly](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public string ShadowCopyDirectories { get; set; }
    return:
      type: System.String
      description: "Un elenco di nomi di directory separati da punti e virgola."
  overload: System.AppDomainSetup.ShadowCopyDirectories*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.ShadowCopyFiles
  id: ShadowCopyFiles
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: ShadowCopyFiles
  nameWithType: AppDomainSetup.ShadowCopyFiles
  fullName: System.AppDomainSetup.ShadowCopyFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta una stringa che indica se la copia shadow è attivata o disattivata."
  remarks: "Per ulteriori informazioni sulla creazione di copie shadow, vedere [copie Shadow di assembly](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public string ShadowCopyFiles { get; set; }
    return:
      type: System.String
      description: "Il valore di stringa &quot;true&quot; per indicare che la copia shadow è attivato; o &quot;false&quot; per indicare che la copia shadow è stata disattivata."
  overload: System.AppDomainSetup.ShadowCopyFiles*
  exceptions: []
  platform:
  - net462
- uid: System.AppDomainSetup.TargetFrameworkName
  id: TargetFrameworkName
  parent: System.AppDomainSetup
  langs:
  - csharp
  name: TargetFrameworkName
  nameWithType: AppDomainSetup.TargetFrameworkName
  fullName: System.AppDomainSetup.TargetFrameworkName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene o imposta una stringa che specifica la versione di destinazione e il profilo di .NET Framework per il dominio applicazione, in un formato che può essere analizzato dal &lt;xref:System.Runtime.Versioning.FrameworkName.%23ctor%28System.String%29?displayProperty=fullName&gt; costruttore."
  remarks: "Impostare questa proprietà per indicare la versione di .NET Framework attualmente in esecuzione per caricare ed eseguire gli assembly che sono stati compilati per la versione di destinazione e il profilo verrà utilizzato il dominio dell&quot;applicazione. Se la versione di .NET Framework attualmente in esecuzione presenta comportamenti facoltativi che influiscono sulla compatibilità del codice compilato con la versione di destinazione, è possibile abilitare o disabilitare tali comportamenti, come appropriato, per migliorare la compatibilità. Può essere utile quando un&quot;applicazione supporta componenti aggiuntivi compilati con più versioni di .NET Framework eseguendoli in domini applicazione separati.       Per le applicazioni client, il valore della proprietà TargetFrameworkName viene dedotto dal <xref:System.Runtime.Versioning.TargetFrameworkAttribute>attributo.</xref:System.Runtime.Versioning.TargetFrameworkAttribute> In [!INCLUDE[vs_dev10_long](~/add/includes/vs-dev10-long-md.md)] e versioni successive, questo attributo viene aggiunto all&quot;assembly automaticamente in base all&quot;impostazione del progetto **Framework di destinazione** proprietà."
  syntax:
    content: public string TargetFrameworkName { get; set; }
    return:
      type: System.String
      description: "La versione di destinazione e il profilo di .NET Framework."
  overload: System.AppDomainSetup.TargetFrameworkName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.MemberAccessException
  isExternal: true
  name: System.MemberAccessException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.AppDomainSetup.#ctor
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainSetup()
  nameWithType: AppDomainSetup.AppDomainSetup()
  fullName: System.AppDomainSetup.AppDomainSetup()
- uid: System.AppDomainSetup.#ctor(System.ActivationContext)
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainSetup(ActivationContext)
  nameWithType: AppDomainSetup.AppDomainSetup(ActivationContext)
  fullName: System.AppDomainSetup.AppDomainSetup(ActivationContext)
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainSetup(ActivationArguments)
  nameWithType: AppDomainSetup.AppDomainSetup(ActivationArguments)
  fullName: System.AppDomainSetup.AppDomainSetup(ActivationArguments)
- uid: System.Runtime.Hosting.ActivationArguments
  parent: System.Runtime.Hosting
  isExternal: false
  name: ActivationArguments
  nameWithType: ActivationArguments
  fullName: System.Runtime.Hosting.ActivationArguments
- uid: System.AppDomainSetup.ActivationArguments
  parent: System.AppDomainSetup
  isExternal: false
  name: ActivationArguments
  nameWithType: AppDomainSetup.ActivationArguments
  fullName: System.AppDomainSetup.ActivationArguments
- uid: System.AppDomainSetup.AppDomainInitializer
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainInitializer
  nameWithType: AppDomainSetup.AppDomainInitializer
  fullName: System.AppDomainSetup.AppDomainInitializer
- uid: System.AppDomainInitializer
  parent: System
  isExternal: false
  name: AppDomainInitializer
  nameWithType: AppDomainInitializer
  fullName: System.AppDomainInitializer
- uid: System.AppDomainSetup.AppDomainInitializerArguments
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainInitializerArguments
  nameWithType: AppDomainSetup.AppDomainInitializerArguments
  fullName: System.AppDomainSetup.AppDomainInitializerArguments
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AppDomainSetup.AppDomainManagerAssembly
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainManagerAssembly
  nameWithType: AppDomainSetup.AppDomainManagerAssembly
  fullName: System.AppDomainSetup.AppDomainManagerAssembly
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.AppDomainSetup.AppDomainManagerType
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainManagerType
  nameWithType: AppDomainSetup.AppDomainManagerType
  fullName: System.AppDomainSetup.AppDomainManagerType
- uid: System.AppDomainSetup.ApplicationBase
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationBase
  nameWithType: AppDomainSetup.ApplicationBase
  fullName: System.AppDomainSetup.ApplicationBase
- uid: System.AppDomainSetup.ApplicationName
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationName
  nameWithType: AppDomainSetup.ApplicationName
  fullName: System.AppDomainSetup.ApplicationName
- uid: System.AppDomainSetup.ApplicationTrust
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationTrust
  nameWithType: AppDomainSetup.ApplicationTrust
  fullName: System.AppDomainSetup.ApplicationTrust
- uid: System.Security.Policy.ApplicationTrust
  parent: System.Security.Policy
  isExternal: false
  name: ApplicationTrust
  nameWithType: ApplicationTrust
  fullName: System.Security.Policy.ApplicationTrust
- uid: System.AppDomainSetup.CachePath
  parent: System.AppDomainSetup
  isExternal: false
  name: CachePath
  nameWithType: AppDomainSetup.CachePath
  fullName: System.AppDomainSetup.CachePath
- uid: System.AppDomainSetup.ConfigurationFile
  parent: System.AppDomainSetup
  isExternal: false
  name: ConfigurationFile
  nameWithType: AppDomainSetup.ConfigurationFile
  fullName: System.AppDomainSetup.ConfigurationFile
- uid: System.AppDomainSetup.DisallowApplicationBaseProbing
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowApplicationBaseProbing
  nameWithType: AppDomainSetup.DisallowApplicationBaseProbing
  fullName: System.AppDomainSetup.DisallowApplicationBaseProbing
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.AppDomainSetup.DisallowBindingRedirects
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowBindingRedirects
  nameWithType: AppDomainSetup.DisallowBindingRedirects
  fullName: System.AppDomainSetup.DisallowBindingRedirects
- uid: System.AppDomainSetup.DisallowCodeDownload
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowCodeDownload
  nameWithType: AppDomainSetup.DisallowCodeDownload
  fullName: System.AppDomainSetup.DisallowCodeDownload
- uid: System.AppDomainSetup.DisallowPublisherPolicy
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowPublisherPolicy
  nameWithType: AppDomainSetup.DisallowPublisherPolicy
  fullName: System.AppDomainSetup.DisallowPublisherPolicy
- uid: System.AppDomainSetup.DynamicBase
  parent: System.AppDomainSetup
  isExternal: false
  name: DynamicBase
  nameWithType: AppDomainSetup.DynamicBase
  fullName: System.AppDomainSetup.DynamicBase
- uid: System.AppDomainSetup.GetConfigurationBytes
  parent: System.AppDomainSetup
  isExternal: false
  name: GetConfigurationBytes()
  nameWithType: AppDomainSetup.GetConfigurationBytes()
  fullName: System.AppDomainSetup.GetConfigurationBytes()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AppDomainSetup.LicenseFile
  parent: System.AppDomainSetup
  isExternal: false
  name: LicenseFile
  nameWithType: AppDomainSetup.LicenseFile
  fullName: System.AppDomainSetup.LicenseFile
- uid: System.AppDomainSetup.LoaderOptimization
  parent: System.AppDomainSetup
  isExternal: false
  name: LoaderOptimization
  nameWithType: AppDomainSetup.LoaderOptimization
  fullName: System.AppDomainSetup.LoaderOptimization
- uid: System.LoaderOptimization
  parent: System
  isExternal: false
  name: LoaderOptimization
  nameWithType: LoaderOptimization
  fullName: System.LoaderOptimization
- uid: System.AppDomainSetup.PartialTrustVisibleAssemblies
  parent: System.AppDomainSetup
  isExternal: false
  name: PartialTrustVisibleAssemblies
  nameWithType: AppDomainSetup.PartialTrustVisibleAssemblies
  fullName: System.AppDomainSetup.PartialTrustVisibleAssemblies
- uid: System.AppDomainSetup.PrivateBinPath
  parent: System.AppDomainSetup
  isExternal: false
  name: PrivateBinPath
  nameWithType: AppDomainSetup.PrivateBinPath
  fullName: System.AppDomainSetup.PrivateBinPath
- uid: System.AppDomainSetup.PrivateBinPathProbe
  parent: System.AppDomainSetup
  isExternal: false
  name: PrivateBinPathProbe
  nameWithType: AppDomainSetup.PrivateBinPathProbe
  fullName: System.AppDomainSetup.PrivateBinPathProbe
- uid: System.AppDomainSetup.SandboxInterop
  parent: System.AppDomainSetup
  isExternal: false
  name: SandboxInterop
  nameWithType: AppDomainSetup.SandboxInterop
  fullName: System.AppDomainSetup.SandboxInterop
- uid: System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})
  parent: System.AppDomainSetup
  isExternal: false
  name: SetCompatibilitySwitches(IEnumerable<String>)
  nameWithType: AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)
  fullName: System.AppDomainSetup.SetCompatibilitySwitches(IEnumerable<String>)
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.AppDomainSetup.SetConfigurationBytes(System.Byte[])
  parent: System.AppDomainSetup
  isExternal: false
  name: SetConfigurationBytes(Byte[])
  nameWithType: AppDomainSetup.SetConfigurationBytes(Byte[])
  fullName: System.AppDomainSetup.SetConfigurationBytes(Byte[])
- uid: System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)
  parent: System.AppDomainSetup
  isExternal: false
  name: SetNativeFunction(String,Int32,IntPtr)
  nameWithType: AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)
  fullName: System.AppDomainSetup.SetNativeFunction(String,Int32,IntPtr)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.AppDomainSetup.ShadowCopyDirectories
  parent: System.AppDomainSetup
  isExternal: false
  name: ShadowCopyDirectories
  nameWithType: AppDomainSetup.ShadowCopyDirectories
  fullName: System.AppDomainSetup.ShadowCopyDirectories
- uid: System.AppDomainSetup.ShadowCopyFiles
  parent: System.AppDomainSetup
  isExternal: false
  name: ShadowCopyFiles
  nameWithType: AppDomainSetup.ShadowCopyFiles
  fullName: System.AppDomainSetup.ShadowCopyFiles
- uid: System.AppDomainSetup.TargetFrameworkName
  parent: System.AppDomainSetup
  isExternal: false
  name: TargetFrameworkName
  nameWithType: AppDomainSetup.TargetFrameworkName
  fullName: System.AppDomainSetup.TargetFrameworkName
- uid: System.AppDomainSetup.#ctor*
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainSetup
  nameWithType: AppDomainSetup.AppDomainSetup
- uid: System.AppDomainSetup.ActivationArguments*
  parent: System.AppDomainSetup
  isExternal: false
  name: ActivationArguments
  nameWithType: AppDomainSetup.ActivationArguments
- uid: System.AppDomainSetup.AppDomainInitializer*
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainInitializer
  nameWithType: AppDomainSetup.AppDomainInitializer
- uid: System.AppDomainSetup.AppDomainInitializerArguments*
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainInitializerArguments
  nameWithType: AppDomainSetup.AppDomainInitializerArguments
- uid: System.AppDomainSetup.AppDomainManagerAssembly*
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainManagerAssembly
  nameWithType: AppDomainSetup.AppDomainManagerAssembly
- uid: System.AppDomainSetup.AppDomainManagerType*
  parent: System.AppDomainSetup
  isExternal: false
  name: AppDomainManagerType
  nameWithType: AppDomainSetup.AppDomainManagerType
- uid: System.AppDomainSetup.ApplicationBase*
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationBase
  nameWithType: AppDomainSetup.ApplicationBase
- uid: System.AppDomainSetup.ApplicationName*
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationName
  nameWithType: AppDomainSetup.ApplicationName
- uid: System.AppDomainSetup.ApplicationTrust*
  parent: System.AppDomainSetup
  isExternal: false
  name: ApplicationTrust
  nameWithType: AppDomainSetup.ApplicationTrust
- uid: System.AppDomainSetup.CachePath*
  parent: System.AppDomainSetup
  isExternal: false
  name: CachePath
  nameWithType: AppDomainSetup.CachePath
- uid: System.AppDomainSetup.ConfigurationFile*
  parent: System.AppDomainSetup
  isExternal: false
  name: ConfigurationFile
  nameWithType: AppDomainSetup.ConfigurationFile
- uid: System.AppDomainSetup.DisallowApplicationBaseProbing*
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowApplicationBaseProbing
  nameWithType: AppDomainSetup.DisallowApplicationBaseProbing
- uid: System.AppDomainSetup.DisallowBindingRedirects*
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowBindingRedirects
  nameWithType: AppDomainSetup.DisallowBindingRedirects
- uid: System.AppDomainSetup.DisallowCodeDownload*
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowCodeDownload
  nameWithType: AppDomainSetup.DisallowCodeDownload
- uid: System.AppDomainSetup.DisallowPublisherPolicy*
  parent: System.AppDomainSetup
  isExternal: false
  name: DisallowPublisherPolicy
  nameWithType: AppDomainSetup.DisallowPublisherPolicy
- uid: System.AppDomainSetup.DynamicBase*
  parent: System.AppDomainSetup
  isExternal: false
  name: DynamicBase
  nameWithType: AppDomainSetup.DynamicBase
- uid: System.AppDomainSetup.GetConfigurationBytes*
  parent: System.AppDomainSetup
  isExternal: false
  name: GetConfigurationBytes
  nameWithType: AppDomainSetup.GetConfigurationBytes
- uid: System.AppDomainSetup.LicenseFile*
  parent: System.AppDomainSetup
  isExternal: false
  name: LicenseFile
  nameWithType: AppDomainSetup.LicenseFile
- uid: System.AppDomainSetup.LoaderOptimization*
  parent: System.AppDomainSetup
  isExternal: false
  name: LoaderOptimization
  nameWithType: AppDomainSetup.LoaderOptimization
- uid: System.AppDomainSetup.PartialTrustVisibleAssemblies*
  parent: System.AppDomainSetup
  isExternal: false
  name: PartialTrustVisibleAssemblies
  nameWithType: AppDomainSetup.PartialTrustVisibleAssemblies
- uid: System.AppDomainSetup.PrivateBinPath*
  parent: System.AppDomainSetup
  isExternal: false
  name: PrivateBinPath
  nameWithType: AppDomainSetup.PrivateBinPath
- uid: System.AppDomainSetup.PrivateBinPathProbe*
  parent: System.AppDomainSetup
  isExternal: false
  name: PrivateBinPathProbe
  nameWithType: AppDomainSetup.PrivateBinPathProbe
- uid: System.AppDomainSetup.SandboxInterop*
  parent: System.AppDomainSetup
  isExternal: false
  name: SandboxInterop
  nameWithType: AppDomainSetup.SandboxInterop
- uid: System.AppDomainSetup.SetCompatibilitySwitches*
  parent: System.AppDomainSetup
  isExternal: false
  name: SetCompatibilitySwitches
  nameWithType: AppDomainSetup.SetCompatibilitySwitches
- uid: System.AppDomainSetup.SetConfigurationBytes*
  parent: System.AppDomainSetup
  isExternal: false
  name: SetConfigurationBytes
  nameWithType: AppDomainSetup.SetConfigurationBytes
- uid: System.AppDomainSetup.SetNativeFunction*
  parent: System.AppDomainSetup
  isExternal: false
  name: SetNativeFunction
  nameWithType: AppDomainSetup.SetNativeFunction
- uid: System.AppDomainSetup.ShadowCopyDirectories*
  parent: System.AppDomainSetup
  isExternal: false
  name: ShadowCopyDirectories
  nameWithType: AppDomainSetup.ShadowCopyDirectories
- uid: System.AppDomainSetup.ShadowCopyFiles*
  parent: System.AppDomainSetup
  isExternal: false
  name: ShadowCopyFiles
  nameWithType: AppDomainSetup.ShadowCopyFiles
- uid: System.AppDomainSetup.TargetFrameworkName*
  parent: System.AppDomainSetup
  isExternal: false
  name: TargetFrameworkName
  nameWithType: AppDomainSetup.TargetFrameworkName
