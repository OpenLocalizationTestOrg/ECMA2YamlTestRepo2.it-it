### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider
  id: IInstanceProvider
  children:
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  - System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  langs:
  - csharp
  name: IInstanceProvider
  nameWithType: IInstanceProvider
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider
  type: Interface
  summary: "Dichiara metodi che forniscono un servizio dell&quot;oggetto o riciclano un oggetto servizio per un [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] servizio."
  remarks: "Implementare l&quot;interfaccia IInstanceProvider per controllare la creazione e riciclaggio di oggetti servizio quando uno è stato richiesto o eliminato da un <xref:System.ServiceModel.InstanceContext>oggetto.</xref:System.ServiceModel.InstanceContext>       Dopo aver implementato l&quot;interfaccia IInstanceProvider, è necessario assegnare l&quot;oggetto provider di istanze personalizzato per il <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>proprietà utilizzando un comportamento dell&quot;endpoint (un <xref:System.ServiceModel.Description.IEndpointBehavior>oggetto) o un comportamento del contratto (un <xref:System.ServiceModel.Description.IContractBehavior>oggetto).</xref:System.ServiceModel.Description.IContractBehavior> </xref:System.ServiceModel.Description.IEndpointBehavior> </xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>       Se il meccanismo di inserimento è un comportamento dell&quot;endpoint è anche possibile implementare un <xref:System.ServiceModel.Configuration.BehaviorExtensionElement>oggetto che è possibile inserire il comportamento personalizzato utilizzando un file di configurazione.</xref:System.ServiceModel.Configuration.BehaviorExtensionElement> Se il meccanismo di inserimento è un comportamento del contratto, è possibile inserire il comportamento a livello di codice prima dell&quot;apertura dell&quot;host del servizio o è possibile implementare un attributo personalizzato. (Per un esempio dell&quot;approccio di comportamento del contratto, vedere la sezione di esempio).       Provider di istanze dispone di due metodi <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>e <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> Questi metodi in genere vengono implementati per creare oggetti servizio utilizzando un costruttore non predefinito o per inizializzare o eliminare stati correlati alla durata dell&quot;oggetto. Il pool di oggetti servizio è un esempio di funzionalità di provider di istanze personalizzata.       In genere, il <xref:System.ServiceModel.InstanceContext>richiama il <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>quando il <xref:System.ServiceModel.InstanceContext>viene creato inizialmente e chiama il <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>metodo quando il <xref:System.ServiceModel.InstanceContext>è chiuso.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> </xref:System.ServiceModel.InstanceContext>       Esistono due modi per causare un <xref:System.ServiceModel.InstanceContext>oggetto per un oggetto servizio prima di rilasciare il <xref:System.ServiceModel.InstanceContext>è chiuso.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext> Il primo metodo consiste nell&quot;impostare il <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A>o <xref:System.ServiceModel.ReleaseInstanceMode> <xref:System.ServiceModel.ReleaseInstanceMode>.</xref:System.ServiceModel.ReleaseInstanceMode> </xref:System.ServiceModel.ReleaseInstanceMode> </xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> Il secondo metodo consiste nel chiamare il <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>metodo.</xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> In tal caso, il <xref:System.ServiceModel.InstanceContext>chiamate di <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>(metodo) nel provider di istanze del dispatcher.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.InstanceContext> Se arriva un nuovo messaggio dopo che l&quot;istanza è stata rilasciata, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] crea una nuova istanza utilizzando il <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>metodo.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>      > [!NOTE] > Se <xref:System.ServiceModel.InstanceContextMode>del servizio è <xref:System.ServiceModel.InstanceContextMode>, il sistema non chiama <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>o i <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>metodi, anche quando l&quot;utente non ha fornito un oggetto servizio noto, a meno che l&quot;utente direttamente chiama <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>e quindi chiama <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A> </xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode>"
  example:
  - "The following code example shows how to implement IInstanceProvider that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public interface IInstanceProvider
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  id: GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Restituisce un oggetto servizio dato specificato <xref:System.ServiceModel.InstanceContext>oggetto.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Utilizzare il metodo GetInstance per controllare il servizio esatto dell&quot;oggetto che un [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] servizio riceve durante il tentativo di crearne uno nuovo."
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Corrente <xref:System.ServiceModel.InstanceContext>oggetto.</xref:System.ServiceModel.InstanceContext>"
    return:
      type: System.Object
      description: "Un oggetto servizio definito dall&quot;utente."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  id: GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Restituisce un oggetto servizio dato specificato <xref:System.ServiceModel.InstanceContext>oggetto.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Utilizzare il metodo GetInstance per controllare il servizio esatto dell&quot;oggetto che un [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] servizio riceve durante il tentativo di crearne uno nuovo."
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Corrente <xref:System.ServiceModel.InstanceContext>oggetto.</xref:System.ServiceModel.InstanceContext>"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "Il messaggio che ha causato la creazione di un oggetto servizio."
    return:
      type: System.Object
      description: "L&quot;oggetto servizio."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  id: ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Chiamato quando un <xref:System.ServiceModel.InstanceContext>oggetto ricicla un oggetto servizio.</xref:System.ServiceModel.InstanceContext>"
  remarks: "Utilizzare il metodo ReleaseInstance per eseguire alcune eliminazione risorsa personalizzata o riciclare quando un servizio ricicla un oggetto servizio."
  syntax:
    content: public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Contesto dell&quot;istanza del servizio."
    - id: instance
      type: System.Object
      description: "Oggetto servizio da riciclare."
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance
  nameWithType: IInstanceProvider.GetInstance
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance
  nameWithType: IInstanceProvider.ReleaseInstance
