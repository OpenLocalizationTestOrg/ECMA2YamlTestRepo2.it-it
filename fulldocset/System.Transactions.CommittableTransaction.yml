### YamlMime:ManagedReference
items:
- uid: System.Transactions.CommittableTransaction
  id: CommittableTransaction
  children:
  - System.Transactions.CommittableTransaction.#ctor
  - System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  - System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  - System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  - System.Transactions.CommittableTransaction.Commit
  - System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  - System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  - System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  langs:
  - csharp
  name: CommittableTransaction
  nameWithType: CommittableTransaction
  fullName: System.Transactions.CommittableTransaction
  type: Class
  summary: "Descrive una transazione di eseguire il commit."
  remarks: "La classe CommittableTransaction fornisce in modo esplicito per le applicazioni di utilizzare una transazione, anziché mediante il <xref:System.Transactions.TransactionScope>classe in modo implicito.</xref:System.Transactions.TransactionScope> A differenza di <xref:System.Transactions.TransactionScope>(classe), il writer di applicazione deve chiamare in modo specifico il <xref:System.Transactions.CommittableTransaction.Commit%2A>e <xref:System.Transactions.Transaction.Rollback%2A>metodi per eseguire il commit o interrompere la transazione.</xref:System.Transactions.Transaction.Rollback%2A> </xref:System.Transactions.CommittableTransaction.Commit%2A> </xref:System.Transactions.TransactionScope> Tuttavia, solo il creatore di una transazione può il commit della transazione. Pertanto, le copie di una transazione di eseguire il commit, ottenuto tramite il <xref:System.Transactions.Transaction.Clone%2A>(metodo) non è possibile eseguire il commit.</xref:System.Transactions.Transaction.Clone%2A>      > [!NOTE] > Si consiglia di creare transazioni implicite utilizzando la <xref:System.Transactions.TransactionScope>classe, in modo che il contesto di transazione di ambiente viene gestito automaticamente.</xref:System.Transactions.TransactionScope> È inoltre possibile utilizzare il <xref:System.Transactions.TransactionScope>e <xref:System.Transactions.DependentTransaction>classe per le applicazioni che richiedono l&quot;utilizzo della stessa transazione tra più chiamate di funzione o chiamate di più thread.</xref:System.Transactions.DependentTransaction> </xref:System.Transactions.TransactionScope> Per ulteriori informazioni su questo modello, vedere il [implementazione un implicita delle transazioni con ambito di transazione](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) argomento.       Creazione di CommittableTransaction non viene impostata automaticamente la transazione di ambiente, la transazione eseguita dal codice. È possibile ottenere o impostare la transazione di ambiente chiamando il metodo statico <xref:System.Transactions.Transaction.Current%2A>proprietà dell&quot;oggetto globale <xref:System.Transactions.Transaction>oggetto.</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.Current%2A> Per ulteriori informazioni sulle transazioni di ambiente, vedere la sezione &quot;Gestione delle transazioni del flusso mediante TransactionScopeOption&quot; del [implementazione un implicita delle transazioni con ambito di transazione](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) argomento. Se la transazione di ambiente non è impostata, qualsiasi operazione su un gestore di risorse non è parte di tale transazione. È necessario impostare e reimpostare la transazione di ambiente per assicurarsi che i gestori di risorse funzionino nel contesto di transazione destro in modo esplicito.       Fino a quando non è stato eseguito il commit CommittableTransaction, tutte le risorse interessate dalla transazione sono ancora bloccate.       Un oggetto CommittableTransaction non può essere riutilizzato. Una volta che è stato eseguito il commit o rollback, non può essere riutilizzato in una transazione o impostata come contesto di transazione di ambiente corrente."
  example:
  - "The following sample creates two new instances of CommittableTransaction, commits and rolls back them respectively.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: 'public sealed class CommittableTransaction : System.Transactions.Transaction, IAsyncResult'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements:
  - System.IAsyncResult
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor
  id: '#ctor'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> and commits it.  \n  \n [!code-cs[Tx_CommittableTx#1](~/add/codesnippet/csharp/m-system.transactions.co_1.cs)]\n [!code-vb[Tx_CommittableTx#1](~/add/codesnippet/visualbasic/m-system.transactions.co_1.vb)]"
  syntax:
    content: public CommittableTransaction ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Tentativo di creare una transazione in Windows 98, Windows 98 Second Edition o Windows Millennium Edition."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> classe con l&quot;oggetto specificato <code> timeout </code> valore."
  syntax:
    content: public CommittableTransaction (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "La quantità massima di tempo che la transazione è disponibile, prima che sia interrotto."
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Tentativo di creare una transazione in Windows 98, Windows 98 Second Edition o Windows Millennium Edition."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionOptions)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> classe con le opzioni di transazione specificato."
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> with options, and aborts it.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public CommittableTransaction (System.Transactions.TransactionOptions options);
    parameters:
    - id: options
      type: System.Transactions.TransactionOptions
      description: "Oggetto <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> struttura che descrive le opzioni di transazione da utilizzare per la nuova transazione."
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Tentativo di creare una transazione in Windows 98, Windows 98 Second Edition o Windows Millennium Edition."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>options</code>non è valido."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  id: BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Avvia un tentativo di eseguire il commit della transazione in modo asincrono."
  remarks: "Questo metodo restituisce immediatamente, prima che la transazione è stata completata. Il commit in un thread differente, quindi la transazione e `asyncCallback` delegato viene richiamato quando è stata completata. Dopo che questo metodo viene chiamato, viene visualizzato il risultato della transazione non finché non si chiama <xref:System.Transactions.CommittableTransaction.EndCommit%2A>.</xref:System.Transactions.CommittableTransaction.EndCommit%2A>      > [!NOTE] > Il processo di commit venga completato in modo sincrono all&quot;interno di questa chiamata al metodo."
  syntax:
    content: public IAsyncResult BeginCommit (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Il <xref:System.AsyncCallback>delegato da richiamare al completamento della transazione.</xref:System.AsyncCallback> Questo parametro può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, nel qual caso l&quot;applicazione non viene notificato il completamento della transazione. Al contrario, l&quot;applicazione deve utilizzare il <xref:System.IAsyncResult>interfaccia per verificare il completamento e attendere di conseguenza, oppure chiamare <xref:System.Transactions.CommittableTransaction.EndCommit*>per attendere il completamento.</xref:System.Transactions.CommittableTransaction.EndCommit*> </xref:System.IAsyncResult>"
    - id: asyncState
      type: System.Object
      description: "Un oggetto che può contenere informazioni sullo stato arbitrarie, associate al commit asincrono. Questo oggetto viene passato al metodo di callback e non vengono interpretato da <xref href=&quot;System.Transactions&quot;> </xref>. È consentito un riferimento null."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>interfaccia che può essere utilizzata dal chiamante per controllare lo stato dell&quot;operazione asincrona o attendere il completamento dell&quot;operazione.</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.BeginCommit*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.Commit
  id: Commit
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Tenta di eseguire il commit della transazione."
  remarks: "Quando viene chiamato questo metodo, tutti gli oggetti registrati per partecipare alla transazione vengano eseguito il polling e possono indicare in modo indipendente la possibilità di eseguire il commit o il rollback della transazione. Se un partecipante vota per eseguire il rollback della transazione, viene eseguito il rollback e questo metodo genera un <xref:System.Transactions.TransactionException>eccezione.</xref:System.Transactions.TransactionException> Si tratta di un&quot;occorrenza normale per una transazione e il codice deve rilevare ed elaborare tali eccezioni.       Eseguire il commit e <xref:System.Transactions.CommittableTransaction.EndCommit%2A>blocco fino al completamento della prima fase dell&quot;elaborazione delle transazioni.</xref:System.Transactions.CommittableTransaction.EndCommit%2A> La prima fase termina dopo che tutti i gestori di risorse e gli elenchi nella transazione hanno scelto il risultato della transazione e <xref:System.Transactions.TransactionManager>in modo durevole ha deciso di eseguire il commit o interrompere la transazione.</xref:System.Transactions.TransactionManager> La seconda fase di elaborazione è sempre asincrona. Pertanto, non è garantito che i dati appena stato eseguito il commit da una determinata transazione sarà immediatamente disponibili in un secondo momento quando non si utilizza un&quot;altra transazione per visualizzare i dati.       Poiché questo metodo si blocca fino a quando la prima fase dell&quot;elaborazione delle transazioni è stata completata, è necessario prestare molta attenzione quando si utilizza questo metodo in un&quot;applicazione Windows Form (WinForm) o un deadlock può verificarsi. Se si chiama questo metodo all&quot;interno di un evento di controllo Windows Form (ad esempio, facendo clic su un pulsante) e utilizzare sincroni <xref:System.Windows.Forms.Control.Invoke%2A>metodo per indicare al controllo per eseguire alcune attività dell&quot;interfaccia utente (ad esempio, la modifica dei colori) durante l&quot;elaborazione della transazione, si verificherà un deadlock.</xref:System.Windows.Forms.Control.Invoke%2A> In questo modo il <xref:System.Windows.Forms.Control.Invoke%2A>metodo è sincrono e blocca il thread di lavoro finché il thread dell&quot;interfaccia utente non termina il processo.</xref:System.Windows.Forms.Control.Invoke%2A> Tuttavia, in questo scenario, il thread dell&quot;interfaccia utente è inoltre in attesa per il thread di lavoro eseguire il commit della transazione. Il risultato è che nessuno è in grado di procedere e l&quot;ambito per un periodo illimitato attende il completamento del Commit. È consigliabile utilizzare <xref:System.Windows.Forms.Control.BeginInvoke%2A>anziché <xref:System.Windows.Forms.Control.Invoke%2A>laddove possibile, perché è asincrona e pertanto meno soggetto a deadlock.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.Commit*
  exceptions:
  - type: System.Transactions.TransactionInDoubtException
    commentId: T:System.Transactions.TransactionInDoubtException
    description: "Commit viene chiamato su una transazione e la transazione diventa <xref href=&quot;System.Transactions.TransactionStatus&quot;> </xref>."
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "Viene chiamato commit e rollback della transazione per la prima volta."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  id: EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Termina un tentativo di eseguire il commit della transazione in modo asincrono."
  remarks: "È necessario chiamare questo metodo nel delegato di callback specificato come parametro per il <xref:System.Transactions.CommittableTransaction.BeginCommit%2A>metodo, al termine delle operazioni di pulizia associate al commit asincrono.</xref:System.Transactions.CommittableTransaction.BeginCommit%2A> È anche possibile chiamare questo metodo prima senza attendere che il delegato. Se, quando che si chiama questo metodo, la transazione è stata completata, questo metodo attende il completamento.      > [!CAUTION] > Il <xref:System.IAsyncResult.CompletedSynchronously%2A>restituito dalla proprietà `asyncResult` è sempre `false`, anche se l&quot;operazione è stata completata in modo sincrono.</xref:System.IAsyncResult.CompletedSynchronously%2A>       <xref:System.Transactions.CommittableTransaction.Commit%2A>ed EndCommit blocco fino al completamento della prima fase dell&quot;elaborazione delle transazioni.</xref:System.Transactions.CommittableTransaction.Commit%2A> La prima fase termina dopo che tutti i gestori di risorse e gli elenchi nella transazione hanno scelto il risultato della transazione e <xref:System.Transactions.TransactionManager>in modo durevole ha deciso di eseguire il commit o interrompere la transazione.</xref:System.Transactions.TransactionManager> La seconda fase di elaborazione è sempre asincrona. Pertanto, non è garantito che i dati appena stato eseguito il commit da una determinata transazione sarà immediatamente disponibili in un secondo momento quando non si utilizza un&quot;altra transazione per visualizzare i dati."
  syntax:
    content: public void EndCommit (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Il <xref:System.IAsyncResult>oggetto associato al commit asincrono.</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.EndCommit*
  exceptions:
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "<xref:System.Transactions.CommittableTransaction.BeginCommit*>viene chiamato e il rollback della transazione per la prima volta.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  id: System#IAsyncResult#AsyncState
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Ottiene l&quot;oggetto fornito come ultimo parametro del <xref:System.Transactions.CommittableTransaction.BeginCommit*>chiamata al metodo.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  syntax:
    content: object System.IAsyncResult.AsyncState { get; }
    return:
      type: System.Object
      description: "L&quot;oggetto fornito come ultimo parametro del <xref:System.Transactions.CommittableTransaction.BeginCommit*>chiamata al metodo.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  id: System#IAsyncResult#AsyncWaitHandle
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Ottiene un <xref:System.Threading.WaitHandle>che viene usato per attendere il completamento di un&quot;operazione asincrona.</xref:System.Threading.WaitHandle>"
  syntax:
    content: System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "Oggetto <xref:System.Threading.WaitHandle>che viene usato per attendere il completamento di un&quot;operazione asincrona.</xref:System.Threading.WaitHandle>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  id: System#IAsyncResult#CompletedSynchronously
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Ottiene un oggetto che indica se l&quot;operazione di commit asincrono completata in modo sincrono."
  syntax:
    content: bool System.IAsyncResult.CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;operazione di commit asincrono è stata completata in modo sincrono; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Questa proprietà restituisce sempre <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> anche se l&quot;operazione è stata completata in modo sincrono."
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  id: System#IAsyncResult#IsCompleted
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Ottiene un valore che indica se è stata completata l&quot;operazione di commit asincrono."
  syntax:
    content: bool System.IAsyncResult.IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;operazione è stata completata; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Transactions.TransactionInDoubtException
  parent: System.Transactions
  isExternal: false
  name: TransactionInDoubtException
  nameWithType: TransactionInDoubtException
  fullName: System.Transactions.TransactionInDoubtException
- uid: System.Transactions.TransactionAbortedException
  parent: System.Transactions
  isExternal: false
  name: TransactionAbortedException
  nameWithType: TransactionAbortedException
  fullName: System.Transactions.TransactionAbortedException
- uid: System.Transactions.CommittableTransaction.#ctor
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Transactions.CommittableTransaction.Commit
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
- uid: System.Transactions.CommittableTransaction.#ctor*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction
  nameWithType: CommittableTransaction.CommittableTransaction
- uid: System.Transactions.CommittableTransaction.BeginCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit
  nameWithType: CommittableTransaction.BeginCommit
- uid: System.Transactions.CommittableTransaction.Commit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit
  nameWithType: CommittableTransaction.Commit
- uid: System.Transactions.CommittableTransaction.EndCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit
  nameWithType: CommittableTransaction.EndCommit
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
