### YamlMime:ManagedReference
items:
- uid: System.Transactions.DependentTransaction
  id: DependentTransaction
  children:
  - System.Transactions.DependentTransaction.Complete
  langs:
  - csharp
  name: DependentTransaction
  nameWithType: DependentTransaction
  fullName: System.Transactions.DependentTransaction
  type: Class
  summary: "Viene descritto un clone di una transazione che garantisce che non può essere eseguito il commit della transazione fino a quando l&quot;applicazione per completano le operazioni relative alla transazione. Questa classe non può essere ereditata."
  remarks: "Il DependentTransaction è un clone di un <xref:System.Transactions.Transaction>oggetto creato utilizzando il <xref:System.Transactions.Transaction.DependentClone%2A>metodo.</xref:System.Transactions.Transaction.DependentClone%2A> </xref:System.Transactions.Transaction>  Il suo unico scopo è consentire all&quot;applicazione di essere completata e garantire che la transazione non è possibile eseguire il commit durante il lavoro è ancora in corso nella transazione (ad esempio, in un thread di lavoro).       Al termine delle operazioni eseguite all&quot;interno della transazione duplicata completo e pronto per essere eseguito il commit, può informare l&quot;autore della transazione utilizzando il <xref:System.Transactions.DependentTransaction.Complete%2A>metodo.</xref:System.Transactions.DependentTransaction.Complete%2A> In questo modo è possibile mantenere la coerenza e la correttezza dei dati.       Il <xref:System.Transactions.DependentCloneOption>enumerazione viene utilizzata per determinare il comportamento in caso di commit.</xref:System.Transactions.DependentCloneOption>  Il controllo del comportamento consente a un&quot;applicazione di essere completata, nonché fornisce il supporto di concorrenza. Per ulteriori informazioni sull&quot;utilizzo di questa enumerazione, vedere [gestione della concorrenza con DependentTransaction](http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab)."
  example:
  - "The following example shows you how to create a dependent transaction.  \n  \n [!code-vb[Tx_DependentTx#1](~/add/codesnippet/visualbasic/t-system.transactions.de_0_1.vb)]\n [!code-cs[Tx_DependentTx#1](~/add/codesnippet/csharp/t-system.transactions.de_0_1.cs)]"
  syntax:
    content: 'public sealed class DependentTransaction : System.Transactions.Transaction'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements: []
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.DependentTransaction.Complete
  id: Complete
  parent: System.Transactions.DependentTransaction
  langs:
  - csharp
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Tenta di completare la transazione dipendente."
  remarks: "Chiamare questo metodo quando il clone dipendente desidera informare l&quot;autore della transazione ha completato l&quot;elaborazione che può essere eseguito il commit della transazione se l&quot;elemento padre è pronto.       Dopo questa chiamata, non tentare operazioni aggiuntive per la transazione o viene generata un&quot;eccezione.       Se il dominio dell&quot;applicazione si arresta dopo che questo metodo viene chiamato e prima del completamento della transazione, potrebbe interrompere la transazione.       **Nota** questo metodo deve essere chiamato una sola volta nel corso della durata della transazione dipendente."
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.DependentTransaction.Complete*
  exceptions:
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "Qualsiasi tentativo di operazioni aggiuntive per la transazione dopo che questo metodo viene chiamato. Sono inclusi come metodi di richiamo <> </> *>, <> </> *>, <> </> *>, <> </> *>, o qualsiasi operazione di serializzazione nella transazione."
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.DependentTransaction.Complete
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete()
  nameWithType: DependentTransaction.Complete()
  fullName: System.Transactions.DependentTransaction.Complete()
- uid: System.Transactions.DependentTransaction.Complete*
  parent: System.Transactions.DependentTransaction
  isExternal: false
  name: Complete
  nameWithType: DependentTransaction.Complete
