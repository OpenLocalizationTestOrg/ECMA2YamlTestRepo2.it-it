### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA384
  id: HMACSHA384
  children:
  - System.Security.Cryptography.HMACSHA384.#ctor
  - System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])
  - System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  langs:
  - csharp
  name: HMACSHA384
  nameWithType: HMACSHA384
  fullName: System.Security.Cryptography.HMACSHA384
  type: Class
  summary: "Calcola un Hash-based Message Authentication Code (HMAC) utilizzando il <xref href=&quot;System.Security.Cryptography.SHA384&quot;> </xref> funzione hash."
  remarks: "HMACSHA384 è un tipo di algoritmo hash con chiave costruito dalla funzione hash SHA-384 e utilizzato come un codice HMAC (Hash-based messaggio Authentication Code). Nel processo HMAC combina una chiave privata con i dati del messaggio e al risultato. Il valore hash viene combinato nuovamente con la chiave privata e quindi eseguito l&quot;hashing di una seconda volta. L&quot;output hash è costituito da 384 bit.       Un codice HMAC consente di determinare se un messaggio inviato tramite un canale non sicuro è stato alterato, a condizione che il mittente e ricevitore condividono una chiave segreta. Il mittente calcola il valore hash per i dati originali e invia i dati originali e il valore hash in un singolo messaggio. Il destinatario ricalcola il valore hash del messaggio ricevuto e verifica che il codice HMAC calcolato corrisponda a quello trasmesso.       Se i valori hash originale e calcolato corrispondono, il messaggio viene autenticato. Se non corrispondono, i dati o il valore hash è stato modificato. I codici HMAC offrono protezione contro eventuali manomissioni perché è necessario conoscere la chiave privata per modificare il messaggio e riprodurre il valore hash corretto.       HMACSHA384 accetta tutte le dimensioni di chiave e produce una sequenza di hash di 384 bit lungo."
  example:
  - "The following example shows how to sign a file by using the HMACSHA384 object, and then how to verify the file.  \n  \n [!code-cs[HMACSHA384#1](~/add/codesnippet/csharp/t-system.security.crypto_31_1.cs)]\n [!code-vb[HMACSHA384#1](~/add/codesnippet/visualbasic/t-system.security.crypto_31_1.vb)]\n [!code-cpp[HMACSHA384#1](~/add/codesnippet/cpp/t-system.security.crypto_31_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA384 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA384.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: HMACSHA384()
  nameWithType: HMACSHA384.HMACSHA384()
  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;> </xref> classe utilizzando una chiave generata in modo casuale."
  remarks: "Questo costruttore utilizza una chiave generata in modo casuale a 64 byte."
  syntax:
    content: public HMACSHA384 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA384.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: HMACSHA384(Byte[])
  nameWithType: HMACSHA384.HMACSHA384(Byte[])
  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;> </xref> classe utilizzando i dati della chiave specificati."
  remarks: ''
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA384> class.
  syntax:
    content: public HMACSHA384 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "La chiave privata per <xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;> </xref> crittografia. La chiave può essere qualsiasi lunghezza. Tuttavia, la dimensione consigliata è di 128 byte. Se la chiave è lungo più di 128 byte, che viene effettuato l&quot;hash (tramite SHA-384) per derivare una chiave a 128 byte. Se è minore di 128 byte, viene applicato un riempimento a 128 byte."
  overload: System.Security.Cryptography.HMACSHA384.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  id: ProduceLegacyHmacValues
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA384.ProduceLegacyHmacValues
  fullName: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Fornisce una soluzione alternativa per il [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)] implementazione del <xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;> </xref> algoritmo, che non è coerente con il [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] implementazione dell&quot;algoritmo."
  remarks: "Lo scopo della proprietà ProduceLegacyHmacValues Boolean consiste nell&quot;abilitare [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] applicazioni interagiscano con [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] applicazioni. Quando si imposta questa proprietà su `true`, <xref:System.Security.Cryptography.HMACSHA384>oggetto produce valori che corrispondono ai valori prodotti dal [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)].</xref:System.Security.Cryptography.HMACSHA384> È necessario impostare questa proprietà solo una volta dopo aver creato l&quot;oggetto HMAC. È necessario reimpostare la chiave in un secondo momento, come illustrato nell&quot;esempio seguente.      ```   public static void Test()       {       HMACSHA384 hmac = new HMACSHA384();       hmac.ProduceLegacyHmacValues = true;       hmac.Key = // ...Get the HMAC key.       // ...       // Use the HMAC algorithm.       // ...       }   ```"
  syntax:
    content: public bool ProduceLegacyHmacValues { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per abilitare [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)] applicazioni interagiscano con [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] applicazioni; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA384.#ctor
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HMACSHA384()
  nameWithType: HMACSHA384.HMACSHA384()
  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384()
- uid: System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HMACSHA384(Byte[])
  nameWithType: HMACSHA384.HMACSHA384(Byte[])
  fullName: System.Security.Cryptography.HMACSHA384.HMACSHA384(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA384.ProduceLegacyHmacValues
  fullName: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMACSHA384.#ctor*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HMACSHA384
  nameWithType: HMACSHA384.HMACSHA384
- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA384.ProduceLegacyHmacValues
