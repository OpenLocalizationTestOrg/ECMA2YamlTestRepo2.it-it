### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CryptoStream
  id: CryptoStream
  children:
  - System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  - System.Security.Cryptography.CryptoStream.CanRead
  - System.Security.Cryptography.CryptoStream.CanSeek
  - System.Security.Cryptography.CryptoStream.CanWrite
  - System.Security.Cryptography.CryptoStream.Clear
  - System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  - System.Security.Cryptography.CryptoStream.Flush
  - System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.FlushFinalBlock
  - System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  - System.Security.Cryptography.CryptoStream.Length
  - System.Security.Cryptography.CryptoStream.Position
  - System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  - System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  langs:
  - csharp
  name: CryptoStream
  nameWithType: CryptoStream
  fullName: System.Security.Cryptography.CryptoStream
  type: Class
  summary: "Definisce un flusso che collega i flussi di dati alle trasformazioni crittografiche."
  remarks: "Common language runtime utilizza una progettazione orientata ai servizi di flusso per la crittografia. Alla base di questa progettazione è CryptoStream. Crittografia oggetti che implementano CryptoStream possono essere concatenati insieme a tutti gli oggetti che implementano <xref:System.IO.Stream>, pertanto il flusso di output da un oggetto può essere utilizzato per l&quot;input di un altro oggetto.</xref:System.IO.Stream> Il risultato intermedio (l&quot;output dal primo oggetto) non è necessario essere archiviati separatamente.      > [!IMPORTANT] > Questo tipo implementa il <xref:System.IDisposable>interfaccia.</xref:System.IDisposable> Dopo aver utilizzando il tipo, è necessario eliminarlo di esso direttamente o indirettamente chiamando il relativo <xref:System.Security.Cryptography.CryptoStream.Clear%2A>metodo, che a sua volta chiama relativo <xref:System.IDisposable>implementazione.</xref:System.IDisposable> </xref:System.Security.Cryptography.CryptoStream.Clear%2A> Per eliminare direttamente il tipo, chiamare il relativo <xref:System.Security.Cryptography.CryptoStream.Clear%2A>metodo in un `try` / `catch` blocco.</xref:System.Security.Cryptography.CryptoStream.Clear%2A> Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio, ad esempio `using` (in c#) o `Using` (in Visual Basic). Per ulteriori informazioni, vedere la sezione &quot;Utilizzo di oggetti che implementano IDisposable&quot; nel <xref:System.IDisposable>argomento relativo all&quot;interfaccia.</xref:System.IDisposable>       È sempre in modo esplicito deve chiudere l&quot;oggetto CryptoStream dopo avere completato utilizzarlo chiamando il <xref:System.Security.Cryptography.CryptoStream.Clear%2A>metodo.</xref:System.Security.Cryptography.CryptoStream.Clear%2A>  Procedere quindi scarica il flusso sottostante e fa sì che tutti gli altri blocchi di dati da elaborare tramite l&quot;oggetto CryptoStream.  Tuttavia, se si verifica un&quot;eccezione prima di chiamare il <xref:System.IO.Stream.Close%2A>metodo CryptoStream oggetto potrebbe non essere chiuso.</xref:System.IO.Stream.Close%2A>  Per garantire che il <xref:System.IO.Stream.Close%2A>metodo venga sempre chiamato, effettuare la chiamata al <xref:System.Security.Cryptography.CryptoStream.Clear%2A>metodo all&quot;interno di `finally` blocco di un `try` / `catch` istruzione.</xref:System.Security.Cryptography.CryptoStream.Clear%2A> </xref:System.IO.Stream.Close%2A>"
  example:
  - "The following example demonstrates how to use a CryptoStream to encrypt a string. This method uses <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>).  \n  \n [!code-cs[Cryptography.Rijndael.Create.File#1](~/add/codesnippet/csharp/t-system.security.crypto_78_1.cs)]\n [!code-vb[Cryptography.Rijndael.Create.File#1](~/add/codesnippet/visualbasic/t-system.security.crypto_78_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class CryptoStream : System.IO.Stream
  inheritance:
  - System.IO.Stream
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  id: '#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)'
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  nameWithType: CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  fullName: System.Security.Cryptography.CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> classe con un flusso di dati di destinazione, la trasformazione da usare e la modalità del flusso."
  remarks: "Qualsiasi oggetto che deriva da <xref:System.IO.Stream>possono essere passati nel `stream` parametro.</xref:System.IO.Stream> Qualsiasi oggetto che implementa <xref:System.Security.Cryptography.ICryptoTransform>(ad esempio <xref:System.Security.Cryptography.HashAlgorithm>) possono essere passati nel `transform` parametro.</xref:System.Security.Cryptography.HashAlgorithm> </xref:System.Security.Cryptography.ICryptoTransform>"
  syntax:
    content: public CryptoStream (System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso su cui eseguire la trasformazione crittografica."
    - id: transform
      type: System.Security.Cryptography.ICryptoTransform
      description: "La trasformazione crittografica da eseguire sul flusso."
    - id: mode
      type: System.Security.Cryptography.CryptoStreamMode
      description: "Uno del <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> valori."
  overload: System.Security.Cryptography.CryptoStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>non è valido."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanRead
  id: CanRead
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanRead
  nameWithType: CryptoStream.CanRead
  fullName: System.Security.Cryptography.CryptoStream.CanRead
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene un valore che indica se l&quot;oggetto corrente <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> è leggibile."
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il flusso corrente è leggibile; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CryptoStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanSeek
  id: CanSeek
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
  fullName: System.Security.Cryptography.CryptoStream.CanSeek
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene un valore che indica se è possibile effettuare ricerche all&quot;interno dell&quot;oggetto <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref>."
  remarks: "La ricerca non è abilitata un <xref:System.Security.Cryptography.CryptoStream>, questo metodo restituisce sempre `false`.</xref:System.Security.Cryptography.CryptoStream>"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.CryptoStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanWrite
  id: CanWrite
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
  fullName: System.Security.Cryptography.CryptoStream.CanWrite
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene un valore che indica se l&quot;oggetto corrente <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> sia accessibile in scrittura."
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il flusso corrente è scrivibile; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CryptoStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Clear
  id: Clear
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Clear()
  nameWithType: CryptoStream.Clear()
  fullName: System.Security.Cryptography.CryptoStream.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rilascia tutte le risorse usate dal <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref>."
  remarks: "Questo metodo esegue il wrapping di una chiamata per il tipo <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>implementazione.</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>       La chiamata `Dispose` le risorse utilizzate da di <xref:System.Security.Cryptography.CryptoStream>riallocazione per altri scopi.</xref:System.Security.Cryptography.CryptoStream> Per ulteriori informazioni su `Dispose`, vedere [pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md)"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: CryptoStream.Dispose(Boolean)
  fullName: System.Security.Cryptography.CryptoStream.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico `Dispose()` (metodo) e `Finalize` metodo. `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il parametro disposing impostato su `true`. `Finalize`richiama `Dispose` con il parametro impostato su `false`.       Quando il `disposing` parametro `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Security.Cryptography.CryptoStream>riferimenti.</xref:System.Security.Cryptography.CryptoStream> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Security.Cryptography.CryptoStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Flush
  id: Flush
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Flush()
  nameWithType: CryptoStream.Flush()
  fullName: System.Security.Cryptography.CryptoStream.Flush()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Cancella tutti i buffer del flusso corrente e fa sì che tutti i dati memorizzati nel buffer da scrivere nel dispositivo sottostante."
  remarks: "La cancellazione del flusso non svuotamento del codificatore sottostante a meno che non si chiama in modo esplicito lo scaricamento o <xref:System.IO.Stream.Close%2A>.</xref:System.IO.Stream.Close%2A> Impostazione <xref:System.IO.StreamWriter.AutoFlush%2A>per `true` , i dati verranno scaricati dal buffer nel flusso, ma lo stato del codificatore non verrà svuotato.</xref:System.IO.StreamWriter.AutoFlush%2A> In questo modo il codificatore mantenere lo stato (caratteri parziali) in modo che può codificare correttamente il blocco successivo di caratteri. Questo scenario riguarda UTF8 e UTF7, in cui alcuni caratteri possono essere codificati solo dopo che il codificatore riceve adiacenti carattere o caratteri.      > [!NOTE] > È necessario chiamare il <xref:System.IO.Stream.Close%2A>metodo o <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>metodo per completare lo scaricamento del buffer.</xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> </xref:System.IO.Stream.Close%2A>"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: FlushAsync(CancellationToken)
  nameWithType: CryptoStream.FlushAsync(CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.FlushAsync(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Cancella tutti i buffer del flusso corrente in modo asincrono, fa sì che tutti i dati memorizzati nel buffer da scrivere nel dispositivo sottostante e monitora le richieste di annullamento."
  remarks: "È necessario far precedere la chiamata a FlushAsync con il `await` (c#) o `Await` (operatore) (Visual Basic) per sospendere l&quot;esecuzione del metodo finché l&quot;attività è stata completata. Per ulteriori informazioni, vedere [la programmazione asincrona con Async e Await](~/add/includes/ajax-current-ext-md.md).       Se l&quot;operazione viene annullata prima del completamento, l&quot;attività restituita contiene il <xref:System.Threading.Tasks.TaskStatus>valore per il <xref:System.Threading.Tasks.Task.Status%2A>proprietà.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token da monitorare per le richieste di annullamento. Il valore predefinito è <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task
      description: "Attività che rappresenta l&quot;operazione di scaricamento asincrona."
  overload: System.Security.Cryptography.CryptoStream.FlushAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il flusso è stato eliminato."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock
  id: FlushFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: FlushFinalBlock()
  nameWithType: CryptoStream.FlushFinalBlock()
  fullName: System.Security.Cryptography.CryptoStream.FlushFinalBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Aggiorna l&quot;origine dati sottostante o un repository con lo stato corrente del buffer, quindi Cancella il buffer."
  remarks: "La chiamata di <xref:System.IO.Stream.Close%2A>metodo chiama il metodo FlushFinalBlock.</xref:System.IO.Stream.Close%2A> Se non si chiama <xref:System.IO.Stream.Close%2A>, chiamare FlushFinalBlock per completare lo scaricamento del buffer.</xref:System.IO.Stream.Close%2A> Chiamare FlushFinalBlock solo quando tutte le attività del flusso sono stata completata."
  syntax:
    content: public void FlushFinalBlock ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.FlushFinalBlock*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "La chiave è danneggiato, che può causare il riempimento non valido nel flusso."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il flusso corrente non è accessibile in scrittura.       - oppure - il blocco finale è già stato trasformato."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  id: HasFlushedFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
  fullName: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene un valore che indica se il blocco finale del buffer è stato scritto nel flusso sottostante."
  remarks: "Questa proprietà è impostata `true` quando il <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>metodo viene chiamato.</xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>"
  syntax:
    content: public bool HasFlushedFinalBlock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il blocco finale è stato scaricato. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Length
  id: Length
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Length
  nameWithType: CryptoStream.Length
  fullName: System.Security.Cryptography.CryptoStream.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene la lunghezza in byte del flusso."
  remarks: "Questa proprietà è presente solo per supportare l&quot;ereditarietà da <xref:System.IO.Stream>e non può essere utilizzato.</xref:System.IO.Stream>"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "Questa proprietà non è supportata."
  overload: System.Security.Cryptography.CryptoStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Questa proprietà non è supportata."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Position
  id: Position
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Position
  nameWithType: CryptoStream.Position
  fullName: System.Security.Cryptography.CryptoStream.Position
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene o imposta la posizione all&quot;interno del flusso corrente."
  remarks: "Questa proprietà è presente solo per supportare l&quot;ereditarietà da <xref:System.IO.Stream>e non può essere utilizzato.</xref:System.IO.Stream>"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "Questa proprietà non è supportata."
  overload: System.Security.Cryptography.CryptoStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Questa proprietà non è supportata."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Read(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Legge una sequenza di byte dal flusso corrente e fa avanzare la posizione all&quot;interno del flusso del numero di byte letti."
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Matrice di byte. Un massimo di `count` byte vengono letti dal flusso corrente e archiviati in `buffer`."
    - id: offset
      type: System.Int32
      description: "Offset dei byte in `buffer` da cui iniziare l&quot;archiviazione dei dati letti dal flusso corrente."
    - id: count
      type: System.Int32
      description: "Il numero massimo di byte da leggere dal flusso corrente."
    return:
      type: System.Int32
      description: "Il numero totale di byte letti nel buffer. Questo può essere minore del numero di byte richiesti se tale numero di byte non è attualmente disponibili, o zero se è stata raggiunta la fine del flusso."
  overload: System.Security.Cryptography.CryptoStream.Read*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> associate corrente <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> oggetto non corrisponde al flusso sottostante.  Ad esempio, questa eccezione viene generata quando si utilizza <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> con un flusso sottostante è di sola scrittura."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il <code> offset </code> parametro è minore di zero.       - o - <code> count </code> parametro è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La somma del <code> count </code> e <code> offset </code> parametri è maggiore della lunghezza del buffer."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Legge una sequenza di byte dal flusso corrente in modo asincrono, fa avanzare la posizione all&quot;interno del flusso del numero di byte letti e monitora le richieste di annullamento."
  remarks: "È necessario far precedere la chiamata a ReadAsync con il `await` (c#) o `Await` (operatore) (Visual Basic) per sospendere l&quot;esecuzione del metodo finché l&quot;attività è stata completata. Per ulteriori informazioni, vedere [la programmazione asincrona con Async e Await](~/add/includes/ajax-current-ext-md.md).       Se l&quot;operazione viene annullata prima del completamento, l&quot;attività restituita contiene il <xref:System.Threading.Tasks.TaskStatus>valore per il <xref:System.Threading.Tasks.Task.Status%2A>proprietà.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Buffer in cui scrivere i dati."
    - id: offset
      type: System.Int32
      description: "Offset dei byte in `buffer` in corrispondenza del quale iniziare la scrittura dei dati dal flusso."
    - id: count
      type: System.Int32
      description: "Numero massimo di byte da leggere."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token da monitorare per le richieste di annullamento. Il valore predefinito è <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Operazione di lettura di un&quot;attività che rappresenta asincrona. Il valore dell&quot;oggetto attività <code> TResult </code> parametro contiene il numero totale di byte letti nel buffer. Il risultato può essere inferiore al numero di byte richiesti se il numero di byte attualmente disponibili è minore del numero di richiesto o può essere 0 (zero) se è stata raggiunta la fine del flusso."
  overload: System.Security.Cryptography.CryptoStream.ReadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>o <code>count</code> è negativo."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La somma di <code> offset </code> e <code> count </code> è maggiore della lunghezza del buffer."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il flusso non supporta la lettura."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il flusso è stato eliminato."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il flusso è attualmente in uso da un&quot;operazione di lettura precedente."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: CryptoStream.Seek(Int64,SeekOrigin)
  fullName: System.Security.Cryptography.CryptoStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Imposta la posizione all&quot;interno del flusso corrente."
  remarks: "Questo metodo esiste solo per supportare l&quot;ereditarietà da <xref:System.IO.Stream>e non può essere utilizzato.</xref:System.IO.Stream>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "Relativo a un offset di byte di `origin` parametro."
    - id: origin
      type: System.IO.SeekOrigin
      description: "Oggetto <xref:System.IO.SeekOrigin>che indica il punto di riferimento usato per ottenere la nuova posizione.</xref:System.IO.SeekOrigin>"
    return:
      type: System.Int64
      description: "Questo metodo non è supportato."
  overload: System.Security.Cryptography.CryptoStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Questo metodo non è supportato."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: CryptoStream.SetLength(Int64)
  fullName: System.Security.Cryptography.CryptoStream.SetLength(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Imposta la lunghezza del flusso corrente."
  remarks: "Questa proprietà è presente solo per supportare l&quot;ereditarietà da <xref:System.IO.Stream>e non può essere utilizzato.</xref:System.IO.Stream>"
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "Lunghezza desiderata del flusso corrente in byte."
  overload: System.Security.Cryptography.CryptoStream.SetLength*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Questa proprietà è presente solo per supportare l&quot;ereditarietà da <xref:System.IO.Stream>e non può essere utilizzato.</xref:System.IO.Stream>"
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Write(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Scrive una sequenza di byte corrente <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> e fa avanzare la posizione corrente all&quot;interno del flusso del numero di byte scritti."
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Matrice di byte. Questo metodo copia `count` byte da `buffer` nel flusso corrente."
    - id: offset
      type: System.Int32
      description: "Offset dei byte in `buffer` in corrispondenza del quale iniziare la copia dei byte nel flusso corrente."
    - id: count
      type: System.Int32
      description: "Il numero di byte da scrivere nel flusso corrente."
  overload: System.Security.Cryptography.CryptoStream.Write*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> associate corrente <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> oggetto non corrisponde al flusso sottostante.  Ad esempio, questa eccezione viene generata quando si utilizza <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> con un flusso sottostante è di sola lettura."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il <code> offset </code> parametro è minore di zero.       - o - <code> count </code> parametro è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La somma di <code> count </code> e <code> offset </code> parametri è maggiore della lunghezza del buffer."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Scrive una sequenza di byte nel flusso corrente in modo asincrono, fa avanzare la posizione corrente all&quot;interno del flusso del numero di byte scritti e monitora le richieste di annullamento."
  remarks: "È necessario far precedere la chiamata a WriteAsync con il `await` (c#) o `Await` (operatore) (Visual Basic) per sospendere l&quot;esecuzione del metodo finché l&quot;attività è stata completata. Per ulteriori informazioni, vedere [la programmazione asincrona con Async e Await](~/add/includes/ajax-current-ext-md.md).       Se l&quot;operazione viene annullata prima del completamento, l&quot;attività restituita contiene il <xref:System.Threading.Tasks.TaskStatus>valore per il <xref:System.Threading.Tasks.Task.Status%2A>proprietà.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Buffer in cui scrivere i dati."
    - id: offset
      type: System.Int32
      description: "Offset dei byte in base zero in `buffer` da cui iniziare la scrittura dei byte nel flusso."
    - id: count
      type: System.Int32
      description: "Numero massimo di byte da scrivere."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Token da monitorare per le richieste di annullamento. Il valore predefinito è <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task
      description: "Un&quot;attività che rappresenta l&quot;operazione di scrittura asincrona."
  overload: System.Security.Cryptography.CryptoStream.WriteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>o <code>count</code> è negativo."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La somma di <code> offset </code> e <code> count </code> è maggiore della lunghezza del buffer."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il flusso non supporta la scrittura."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il flusso è stato eliminato."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il flusso è attualmente in uso da un&quot;operazione di scrittura precedente."
  platform:
  - net462
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  nameWithType: CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  fullName: System.Security.Cryptography.CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Security.Cryptography.CryptoStreamMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptoStreamMode
  nameWithType: CryptoStreamMode
  fullName: System.Security.Cryptography.CryptoStreamMode
- uid: System.Security.Cryptography.CryptoStream.CanRead
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanRead
  nameWithType: CryptoStream.CanRead
  fullName: System.Security.Cryptography.CryptoStream.CanRead
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptoStream.CanSeek
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
  fullName: System.Security.Cryptography.CryptoStream.CanSeek
- uid: System.Security.Cryptography.CryptoStream.CanWrite
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
  fullName: System.Security.Cryptography.CryptoStream.CanWrite
- uid: System.Security.Cryptography.CryptoStream.Clear
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Clear()
  nameWithType: CryptoStream.Clear()
  fullName: System.Security.Cryptography.CryptoStream.Clear()
- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: CryptoStream.Dispose(Boolean)
  fullName: System.Security.Cryptography.CryptoStream.Dispose(Boolean)
- uid: System.Security.Cryptography.CryptoStream.Flush
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Flush()
  nameWithType: CryptoStream.Flush()
  fullName: System.Security.Cryptography.CryptoStream.Flush()
- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushAsync(CancellationToken)
  nameWithType: CryptoStream.FlushAsync(CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.FlushAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushFinalBlock()
  nameWithType: CryptoStream.FlushFinalBlock()
  fullName: System.Security.Cryptography.CryptoStream.FlushFinalBlock()
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
  fullName: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
- uid: System.Security.Cryptography.CryptoStream.Length
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Length
  nameWithType: CryptoStream.Length
  fullName: System.Security.Cryptography.CryptoStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Security.Cryptography.CryptoStream.Position
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Position
  nameWithType: CryptoStream.Position
  fullName: System.Security.Cryptography.CryptoStream.Position
- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Read(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Read(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: CryptoStream.Seek(Int64,SeekOrigin)
  fullName: System.Security.Cryptography.CryptoStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: CryptoStream.SetLength(Int64)
  fullName: System.Security.Cryptography.CryptoStream.SetLength(Int64)
- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Write(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Write(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Security.Cryptography.CryptoStream.#ctor*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CryptoStream
  nameWithType: CryptoStream.CryptoStream
- uid: System.Security.Cryptography.CryptoStream.CanRead*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanRead
  nameWithType: CryptoStream.CanRead
- uid: System.Security.Cryptography.CryptoStream.CanSeek*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
- uid: System.Security.Cryptography.CryptoStream.CanWrite*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
- uid: System.Security.Cryptography.CryptoStream.Clear*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Clear
  nameWithType: CryptoStream.Clear
- uid: System.Security.Cryptography.CryptoStream.Dispose*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Dispose
  nameWithType: CryptoStream.Dispose
- uid: System.Security.Cryptography.CryptoStream.Flush*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Flush
  nameWithType: CryptoStream.Flush
- uid: System.Security.Cryptography.CryptoStream.FlushAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushAsync
  nameWithType: CryptoStream.FlushAsync
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushFinalBlock
  nameWithType: CryptoStream.FlushFinalBlock
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
- uid: System.Security.Cryptography.CryptoStream.Length*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Length
  nameWithType: CryptoStream.Length
- uid: System.Security.Cryptography.CryptoStream.Position*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Position
  nameWithType: CryptoStream.Position
- uid: System.Security.Cryptography.CryptoStream.Read*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Read
  nameWithType: CryptoStream.Read
- uid: System.Security.Cryptography.CryptoStream.ReadAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: ReadAsync
  nameWithType: CryptoStream.ReadAsync
- uid: System.Security.Cryptography.CryptoStream.Seek*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Seek
  nameWithType: CryptoStream.Seek
- uid: System.Security.Cryptography.CryptoStream.SetLength*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: SetLength
  nameWithType: CryptoStream.SetLength
- uid: System.Security.Cryptography.CryptoStream.Write*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Write
  nameWithType: CryptoStream.Write
- uid: System.Security.Cryptography.CryptoStream.WriteAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: WriteAsync
  nameWithType: CryptoStream.WriteAsync
