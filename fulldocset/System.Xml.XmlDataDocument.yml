### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlDataDocument
  id: XmlDataDocument
  children:
  - System.Xml.XmlDataDocument.#ctor
  - System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  - System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  - System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  - System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  - System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  - System.Xml.XmlDataDocument.DataSet
  - System.Xml.XmlDataDocument.GetElementById(System.String)
  - System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  - System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  - System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  - System.Xml.XmlDataDocument.Load(System.IO.Stream)
  - System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  - System.Xml.XmlDataDocument.Load(System.String)
  - System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  langs:
  - csharp
  name: XmlDataDocument
  nameWithType: XmlDataDocument
  fullName: System.Xml.XmlDataDocument
  type: Class
  summary: "Consente di memorizzare, recuperare e modificati tramite relazionale dati strutturati <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Questa classe estende <xref:System.Xml.XmlDocument>.</xref:System.Xml.XmlDocument> Consente di caricare dati relazionali o dati XML e modificarli utilizzando il World Wide Web Consortium (W3C) DOM Document Object Model (). DOM, i dati vengono presentati come gerarchia di oggetti del nodo. Poiché `XmlDataDocument` implementa il <xref:System.Xml.XPath.IXPathNavigable>interfaccia, può essere utilizzato anche come documento di origine per la <xref:System.Xml.Xsl.XslTransform>classe</xref:System.Xml.Xsl.XslTransform> </xref:System.Xml.XPath.IXPathNavigable>       `XmlDataDocument`ha una stretta connessione con il `DataSet` (classe), che fornisce una visualizzazione relazionale dei dati XML caricati. Qualsiasi modifica apportata al `XmlDataDocument` vengono riflesse nella `DataSet` e viceversa.       Per caricare un `DataSet` con dati XML, utilizzare <xref:System.Data.DataSet.ReadXmlSchema%2A>per compilare un mapping relazionale.</xref:System.Data.DataSet.ReadXmlSchema%2A> I dati XML possono quindi essere caricati utilizzando <xref:System.Xml.XmlDataDocument.Load%2A>o <xref:System.Xml.XmlDocument.LoadXml%2A>.</xref:System.Xml.XmlDocument.LoadXml%2A> </xref:System.Xml.XmlDataDocument.Load%2A>       Per caricare i dati relazionali, specificare il `DataSet` contenente i dati relazionali come parametro per il <xref:System.Xml.XmlDataDocument.%23ctor%2A>costruttore.</xref:System.Xml.XmlDataDocument.%23ctor%2A>"
  syntax:
    content: >-
      [System.Obsolete("XmlDataDocument class will be removed in a future release.")]

      public class XmlDataDocument : System.Xml.XmlDocument
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  - System.Xml.XmlDocument
  implements: []
  inheritedMembers:
  - System.Xml.XmlDocument.BaseURI
  - System.Xml.XmlDocument.CreateAttribute(System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateCDataSection(System.String)
  - System.Xml.XmlDocument.CreateComment(System.String)
  - System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateDocumentFragment
  - System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String)
  - System.Xml.XmlDocument.CreateNavigator
  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  - System.Xml.XmlDocument.CreateTextNode(System.String)
  - System.Xml.XmlDocument.CreateWhitespace(System.String)
  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  - System.Xml.XmlDocument.DocumentElement
  - System.Xml.XmlDocument.DocumentType
  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlDocument.Implementation
  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  - System.Xml.XmlDocument.InnerText
  - System.Xml.XmlDocument.InnerXml
  - System.Xml.XmlDocument.IsReadOnly
  - System.Xml.XmlDocument.LoadXml(System.String)
  - System.Xml.XmlDocument.LocalName
  - System.Xml.XmlDocument.Name
  - System.Xml.XmlDocument.NameTable
  - System.Xml.XmlDocument.NodeChanged
  - System.Xml.XmlDocument.NodeChanging
  - System.Xml.XmlDocument.NodeInserted
  - System.Xml.XmlDocument.NodeInserting
  - System.Xml.XmlDocument.NodeRemoved
  - System.Xml.XmlDocument.NodeRemoving
  - System.Xml.XmlDocument.NodeType
  - System.Xml.XmlDocument.OwnerDocument
  - System.Xml.XmlDocument.ParentNode
  - System.Xml.XmlDocument.PreserveWhitespace
  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  - System.Xml.XmlDocument.Save(System.IO.Stream)
  - System.Xml.XmlDocument.Save(System.IO.TextWriter)
  - System.Xml.XmlDocument.Save(System.String)
  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.SchemaInfo
  - System.Xml.XmlDocument.Schemas
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.XmlResolver
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.#ctor
  id: '#ctor'
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: XmlDataDocument()
  nameWithType: XmlDataDocument.XmlDataDocument()
  fullName: System.Xml.XmlDataDocument.XmlDataDocument()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> classe."
  remarks: "Un oggetto vuoto <xref:System.Data.DataSet>viene creato e associato il `XmlDataDocument`.</xref:System.Data.DataSet>"
  syntax:
    content: public XmlDataDocument ();
    parameters: []
  overload: System.Xml.XmlDataDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  id: '#ctor(System.Data.DataSet)'
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: XmlDataDocument(DataSet)
  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)
  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> classe con l&quot;oggetto specificato <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Il `XmlDataDocument` è sincronizzato con l&quot;oggetto specificato `DataSet`. In tutti i dati di `DataSet` è immediatamente disponibile tramite il `XmlDataDocument`. Eventuali modifiche di `DataSet` vengono propagate nel `XmlDataDocument`. Eventuali modifiche apportate al `XmlDataDocument`se corrispondono il `DataSet` schema vengono propagate nel `DataSet`."
  example:
  - "The following example loads a customer table into an `XmlDataDocument`.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_0_1.cpp)]\n [!code-cs[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_0_1.cs)]\n [!code-vb[Classic WebData XmlDataDocument.XmlDataDocument1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_0_1.vb)]"
  syntax:
    content: public XmlDataDocument (System.Data.DataSet dataset);
    parameters:
    - id: dataset
      type: System.Data.DataSet
      description: "The <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;></xref> to load into <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDataDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlDataDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Crea un duplicato del nodo corrente."
  remarks: "La clonazione di `XmlDataDocument` comporta anche la <xref:System.Data.DataSet>dello schema.</xref:System.Data.DataSet>       Se `deep` è impostato su `false`, clonato `DataSet` ha non dati; ovvero, senza righe.       Se `deep` è impostato su `true`, clonato `DataSet` è impostato con lo schema e quindi popolato con i dati.       Vedere <xref:System.Xml.XmlNode.CloneNode%2A>nel `XmlNode` classe per visualizzare una tabella che descrive il comportamento di questo metodo con ognuno dei tipi di nodo diverso.</xref:System.Xml.XmlNode.CloneNode%2A>"
  example:
  - "The following example loads a `DataSet` into an `XmlDataDocument` and then creates a shallow clone of the `XmlDataDocument`.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_4_1.cpp)]\n [!code-vb[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_4_1.vb)]\n [!code-cs[Classic WebData XmlDataDocument.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_4_1.cs)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>in modo ricorsivo il sottoalbero del nodo specificato; di clonazione <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per clonare solo il nodo stesso."
    return:
      type: System.Xml.XmlNode
      description: "Nodo clonato."
  overload: System.Xml.XmlDataDocument.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  id: CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateElement(String,String,String)
  nameWithType: XmlDataDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Crea un elemento con l&quot;oggetto specificato <> </> *>, <> </> *> e <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "`Note to Inheritors`Se si esegue l&quot;overload di questa funzione, e non può essere utilizzato per l&quot;estensibilità. Al contrario, si può restituire un elemento creato dalla classe di base, in questo caso, `XmlDataDocument`. Vedere l&quot;esempio seguente.      ```   class MyXmlDataDocument : XmlDataDocument {    public override XmlElement CreateElement(string prefix, string localName, string nsURI) {      //Ensure we are returning the base class implementation of element.      XmlElement e = base.CreateElement(prefix, localName, nsURI);      //Add additional code here.      return e;    //Return the element created by XmlDataDocument.    }       }   ```"
  syntax:
    content: public override System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "Il prefisso del nuovo elemento. Se String. Empty o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, non vi è alcun prefisso."
    - id: localName
      type: System.String
      description: "Il nome locale del nuovo elemento."
    - id: namespaceURI
      type: System.String
      description: "Lo spazio dei nomi URI Uniform Resource Identifier () del nuovo elemento. Se String. Empty o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, non vi è nessun namespaceURI."
    return:
      type: System.Xml.XmlElement
      description: "A new <xref href=&quot;System.Xml.XmlElement&quot;></xref>."
  overload: System.Xml.XmlDataDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  id: CreateEntityReference(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateEntityReference(String)
  nameWithType: XmlDataDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Crea un <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> con il nome specificato."
  remarks: "<xref:System.Xml.XmlEntityReference>non è possibile creare nodi per <xref:System.Xml.XmlDataDocument>oggetti.</xref:System.Xml.XmlDataDocument></xref:System.Xml.XmlEntityReference> Chiamare questo metodo genera un&quot;eccezione."
  syntax:
    content: public override System.Xml.XmlEntityReference CreateEntityReference (string name);
    parameters:
    - id: name
      type: System.String
      description: "Il nome del riferimento all&quot;entità."
    return:
      type: System.Xml.XmlEntityReference
      description: "Un <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> con il nome specificato."
  overload: System.Xml.XmlDataDocument.CreateEntityReference*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Chiamare questo metodo."
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  id: CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Crea un nuovo <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> oggetto per spostarsi in questo documento. Il <xref uid=&quot;langword_csharp_XPathNavigator&quot; name=&quot;XPathNavigator&quot; href=&quot;&quot;> </xref> è posizionato sul nodo specificato nel <code> node </code> parametro."
  remarks: "Il `XPathNavigator` fornisce l&quot;accesso casuale di sola lettura ai dati. Poiché è ottimizzato per le trasformazioni XSLT, che offre i vantaggi di prestazioni quando viene utilizzato come meccanismo di input di <xref:System.Xml.Xsl.XslTransform.Transform%2A>metodo.</xref:System.Xml.Xsl.XslTransform.Transform%2A>"
  example:
  - To see an XSLT transformation using `XmlDataDocument` and an `XPathNavigator`, see the <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=fullName> method.
  syntax:
    content: protected override System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "Il <xref href=&quot;System.Xml.XmlNode&quot;> </xref> si desidera che lo strumento di spostamento posizionato inizialmente sul."
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "Un <xref uid=&quot;langword_csharp_XPathNavigator&quot; name=&quot;XPathNavigator&quot; href=&quot;&quot;> </xref> utilizzato per passare il documento."
  overload: System.Xml.XmlDataDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.DataSet
  id: DataSet
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
  fullName: System.Xml.XmlDataDocument.DataSet
  type: Property
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Ottiene un <xref href=&quot;System.Data.DataSet&quot;> </xref> che fornisce una rappresentazione relazionale dei dati di <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref>."
  remarks: "Il `DataSet` consente di accedere ai dati di `XmlDataDocument` utilizzando un modello relazionale. Ciò significa che è possibile gestire i dati come tabelle, viste, le righe e colonne, relazioni e così via. Le modifiche apportate nel `DataSet` diventano immediatamente visibili nella `XmlDataDocument`."
  example:
  - "The following example modifies the price of a book using the `DataSet` methods.  \n  \n [!code-cpp[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/cpp/p-system.xml.xmldatadocu_1.cpp)]\n [!code-cs[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/csharp/p-system.xml.xmldatadocu_1.cs)]\n [!code-vb[Classic WebData XmlDataDocument.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldatadocu_1.vb)]  \n  \n The example uses the following two files as input.  \n  \n `2books.xml`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/p-system.xml.xmldatadocu_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/p-system.xml.xmldatadocu_3.xml)]"
  syntax:
    content: public System.Data.DataSet DataSet { get; }
    return:
      type: System.Data.DataSet
      description: "A <xref uid=&quot;langword_csharp_DataSet&quot; name=&quot;DataSet&quot; href=&quot;&quot;> </xref> che può essere utilizzato per accedere ai dati di <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> utilizzando un modello relazionale."
  overload: System.Xml.XmlDataDocument.DataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementById(String)
  nameWithType: XmlDataDocument.GetElementById(String)
  fullName: System.Xml.XmlDataDocument.GetElementById(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Ottiene il <xref href=&quot;System.Xml.XmlElement&quot;> </xref> con l&quot;ID specificato. Questo metodo non è supportato per il <xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref> classe. Chiamare questo metodo genera un&quot;eccezione."
  remarks: "Questo metodo non è supportato dalla <xref:System.Xml.XmlDataDocument>classe.</xref:System.Xml.XmlDataDocument>"
  syntax:
    content: public override System.Xml.XmlElement GetElementById (string elemId);
    parameters:
    - id: elemId
      type: System.String
      description: "ID dell&quot;attributo in modo che corrispondano."
    return:
      type: System.Xml.XmlElement
      description: "Un <xref href=&quot;System.Xml.XmlElement&quot;> </xref> con l&quot;ID specificato."
  overload: System.Xml.XmlDataDocument.GetElementById*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Chiamare questo metodo."
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  id: GetElementFromRow(System.Data.DataRow)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementFromRow(DataRow)
  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)
  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Recupera il <xref href=&quot;System.Xml.XmlElement&quot;> </xref> associato all&quot;oggetto <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  remarks: ''
  example:
  - "The following example loads a `DataSet` into an `XmlDataDocument` and then creates an `XmlElement` representing the first customer record.  \n  \n The example uses the SQL Server 2000 Northwind database.  \n  \n [!code-cs[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_1_1.cs)]\n [!code-cpp[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_1_1.cpp)]\n [!code-vb[Classic WebData XmlDataDocument.GetElementFromRow Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_1_1.vb)]"
  syntax:
    content: public System.Xml.XmlElement GetElementFromRow (System.Data.DataRow r);
    parameters:
    - id: r
      type: System.Data.DataRow
      description: "Il <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> cui associato <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> si desidera recuperare."
    return:
      type: System.Xml.XmlElement
      description: "Il <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> contenente una rappresentazione dell&quot;oggetto specificato <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDataDocument.GetElementFromRow*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlDataDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Restituisce un <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> contenente un elenco di tutti gli elementi discendenti che corrispondono al <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*> specificato"
  remarks: >-
    > [!NOTE]

    >  It is recommended that you use the <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> or <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> method instead of the GetElementsByTagName method.
  syntax:
    content: public override System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "Il nome completo per la corrispondenza. Viene confrontato con il <> </> *> proprietà del nodo corrispondente. Il valore speciale &quot;*&quot; corrisponde a tutti i tag."
    return:
      type: System.Xml.XmlNodeList
      description: "Un <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> contenente un elenco di tutti i nodi corrispondenti."
  overload: System.Xml.XmlDataDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  id: GetRowFromElement(System.Xml.XmlElement)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: GetRowFromElement(XmlElement)
  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)
  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Recupera il <xref href=&quot;System.Data.DataRow&quot;> </xref> associato all&quot;oggetto <xref href=&quot;System.Xml.XmlElement&quot;> </xref>."
  remarks: ''
  example:
  - "The following example modifies the price of the first book.  \n  \n [!code-cs[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_2_1.cs)]\n [!code-cpp[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_2_1.cpp)]\n [!code-vb[XmlDataDocument.GetRowFromElement#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_2_1.vb)]  \n  \n The example uses the following input files:  \n  \n `2books.xml`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[Classic WebData XmlDataDocument.DataSet Example#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_2_3.xml)]"
  syntax:
    content: public System.Data.DataRow GetRowFromElement (System.Xml.XmlElement e);
    parameters:
    - id: e
      type: System.Xml.XmlElement
      description: "Il <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> cui associato <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> si desidera recuperare."
    return:
      type: System.Data.DataRow
      description: "Il <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> contenente una rappresentazione di <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>; <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se è presente alcun <xref uid=&quot;langword_csharp_DataRow&quot; name=&quot;DataRow&quot; href=&quot;&quot;> </xref> associato il <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDataDocument.GetRowFromElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XmlDataDocument.Load(Stream)
  fullName: System.Xml.XmlDataDocument.Load(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Carica il <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> dal flusso specificato."
  remarks: "`XmlDataDocument`non supporta i riferimenti alle entità di creazione. Se i dati includono riferimenti a entità, il `Load` metodo risolve ed espande i riferimenti a entità.      > [!NOTE] > Per visualizzare i dati XML in modo relazionale, è necessario innanzitutto specificare uno schema da utilizzare per il mapping dei dati. Questa operazione può essere eseguita chiamando il <xref:System.Data.DataSet.ReadXmlSchema%2A>(metodo) o tramite la creazione di tabelle e colonne all&quot;interno di `DataSet` manualmente.</xref:System.Data.DataSet.ReadXmlSchema%2A> Questo passaggio deve essere eseguito prima di chiamare `Load`."
  syntax:
    content: public override void Load (System.IO.Stream inStream);
    parameters:
    - id: inStream
      type: System.IO.Stream
      description: "Flusso contenente il documento XML da caricare."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(TextReader)
  nameWithType: XmlDataDocument.Load(TextReader)
  fullName: System.Xml.XmlDataDocument.Load(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Carica il <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> da specificato <xref:System.IO.TextReader>.</xref:System.IO.TextReader>"
  remarks: "`XmlDataDocument`non supporta i riferimenti alle entità di creazione. Se i dati includono riferimenti a entità, il `Load` metodo risolve ed espande i riferimenti a entità.      > [!NOTE] > Per visualizzare i dati XML in modo relazionale, è necessario innanzitutto specificare uno schema da utilizzare per il mapping dei dati. Questa operazione può essere eseguita chiamando il <xref:System.Data.DataSet.ReadXmlSchema%2A>(metodo) o tramite la creazione di tabelle e colonne all&quot;interno di `DataSet` manualmente.</xref:System.Data.DataSet.ReadXmlSchema%2A> Questo passaggio deve essere eseguito prima di chiamare `Load`."
  syntax:
    content: public override void Load (System.IO.TextReader txtReader);
    parameters:
    - id: txtReader
      type: System.IO.TextReader
      description: "Il <xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> utilizzato per inserire i dati XML nel documento."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(String)
  nameWithType: XmlDataDocument.Load(String)
  fullName: System.Xml.XmlDataDocument.Load(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Carica il <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> utilizzando l&quot;URL specificato."
  remarks: "`XmlDataDocument`non supporta i riferimenti alle entità di creazione. Se i dati includono riferimenti a entità, il `Load` metodo risolve ed espande i riferimenti a entità.      > [!NOTE] > Per visualizzare i dati XML in modo relazionale, è necessario innanzitutto specificare uno schema da utilizzare per il mapping dei dati. Questa operazione può essere eseguita chiamando il <xref:System.Data.DataSet.ReadXmlSchema%2A>(metodo) o tramite la creazione di tabelle e colonne all&quot;interno di `DataSet` manualmente.</xref:System.Data.DataSet.ReadXmlSchema%2A> Questo passaggio deve essere eseguito prima di chiamare `Load`."
  syntax:
    content: public override void Load (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "L&quot;URL del file contenente il documento XML da caricare."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDataDocument
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XmlDataDocument.Load(XmlReader)
  fullName: System.Xml.XmlDataDocument.Load(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Xml
  summary: "Carica il <xref uid=&quot;langword_csharp_XmlDataDocument&quot; name=&quot;XmlDataDocument&quot; href=&quot;&quot;> </xref> da specificato <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "`XmlDataDocument`non supporta i riferimenti alle entità di creazione. Se l&quot;origine dati contiene i riferimenti alle entità, è necessario creare un <xref:System.Xml.XmlValidatingReader>con il <xref:System.Xml.XmlValidatingReader.EntityHandling%2A>proprietà EntityHandling. ExpandEntities (si tratta del comportamento predefinito) e passare il `XmlValidatingReader` per il `Load` metodo.</xref:System.Xml.XmlValidatingReader.EntityHandling%2A> </xref:System.Xml.XmlValidatingReader> Se non si utilizza un `XmlValidatingReader`, `Load` metodo genera un&quot;eccezione.       Il `Load` metodo mantiene sempre gli spazi vuoti significativi. Il <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>proprietà determina se vengono mantenuti gli spazi vuoti.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> Il valore predefinito è `false`, spazi vuoti non vengono mantenuti.       Se il lettore si trova nello stato iniziale (vale a dire ReadState), `Load` utilizza l&quot;intero contenuto del lettore e compilerà il DOM dagli elementi rilevati.       Se il lettore è già posizionato su un nodo alla profondità &quot;n&quot;, questo metodo carica tale nodo e tutti i nodi di pari livello successivi fino al tag di fine che chiude il livello &quot;n&quot;. Questa operazione ha i seguenti risultati.       Se il nodo corrente e elementi di pari livello seguenti simile al seguente: ```   <!--comment--><element1>one</element1><element2>two</element2>   ``` `Load` genera un&quot;eccezione, perché un documento non può disporre di due elementi di primo livello.        Se il nodo corrente e elementi di pari livello seguenti simile al seguente: ```   <!--comment--><?process       instruction?><!--comment--></endtag>   ``` `Load` avrà esito positivo; tuttavia, si avrà una struttura ad albero DOM incompleto, perché è presente alcun elemento di livello radice.        È necessario aggiungere un elemento di primo livello prima di salvare il documento. in caso contrario, il <xref:System.Xml.XmlDocument.Save%2A>metodo genera un&quot;eccezione.</xref:System.Xml.XmlDocument.Save%2A>       Se il lettore è posizionato su un nodo foglia non valido per il livello di radice di un documento (ad esempio, un nodo spazio vuoto o attributo), il lettore continuerà a leggere fino a quando non è posizionato su un nodo che può essere utilizzato per la radice. Il documento inizia a caricare a questo punto."
  example:
  - "The following example modifies the price of a book using the `DataSet` methods.  \n  \n [!code-cpp[XmlDataDocument.Load#1](~/add/codesnippet/cpp/m-system.xml.xmldatadocu_3_1.cpp)]\n [!code-cs[XmlDataDocument.Load#1](~/add/codesnippet/csharp/m-system.xml.xmldatadocu_3_1.cs)]\n [!code-vb[XmlDataDocument.Load#1](~/add/codesnippet/visualbasic/m-system.xml.xmldatadocu_3_1.vb)]  \n  \n The example uses the following two input files.  \n  \n `2books.xml`  \n  \n [!code-xml[XmlDataDocument.Load#2](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_2.xml)]  \n  \n `store.xsd`  \n  \n [!code-xml[XmlDataDocument.Load#3](~/add/codesnippet/xml/m-system.xml.xmldatadocu_3_3.xsd)]"
  syntax:
    content: public override void Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Il <xref uid=&quot;langword_csharp_XmlReader&quot; name=&quot;XmlReader&quot; href=&quot;&quot;> </xref> contenente il documento XML da caricare."
  overload: System.Xml.XmlDataDocument.Load*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il codice XML da caricare contiene riferimenti alle entità e il lettore non è possibile risolvere le entità."
  platform:
  - net462
references:
- uid: System.Xml.XmlDocument
  isExternal: false
  name: System.Xml.XmlDocument
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Xml.XmlDataDocument.#ctor
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument()
  nameWithType: XmlDataDocument.XmlDataDocument()
  fullName: System.Xml.XmlDataDocument.XmlDataDocument()
- uid: System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument(DataSet)
  nameWithType: XmlDataDocument.XmlDataDocument(DataSet)
  fullName: System.Xml.XmlDataDocument.XmlDataDocument(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Xml.XmlDataDocument.CloneNode(System.Boolean)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlDataDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDataDocument.CloneNode(Boolean)
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateElement(String,String,String)
  nameWithType: XmlDataDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDataDocument.CreateElement(String,String,String)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDataDocument.CreateEntityReference(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateEntityReference(String)
  nameWithType: XmlDataDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDataDocument.CreateEntityReference(String)
- uid: System.Xml.XmlEntityReference
  parent: System.Xml
  isExternal: false
  name: XmlEntityReference
  nameWithType: XmlEntityReference
  fullName: System.Xml.XmlEntityReference
- uid: System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDataDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDataDocument.CreateNavigator(XmlNode)
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XmlDataDocument.DataSet
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
  fullName: System.Xml.XmlDataDocument.DataSet
- uid: System.Xml.XmlDataDocument.GetElementById(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementById(String)
  nameWithType: XmlDataDocument.GetElementById(String)
  fullName: System.Xml.XmlDataDocument.GetElementById(String)
- uid: System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementFromRow(DataRow)
  nameWithType: XmlDataDocument.GetElementFromRow(DataRow)
  fullName: System.Xml.XmlDataDocument.GetElementFromRow(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Xml.XmlDataDocument.GetElementsByTagName(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlDataDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDataDocument.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetRowFromElement(XmlElement)
  nameWithType: XmlDataDocument.GetRowFromElement(XmlElement)
  fullName: System.Xml.XmlDataDocument.GetRowFromElement(XmlElement)
- uid: System.Xml.XmlDataDocument.Load(System.IO.Stream)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(Stream)
  nameWithType: XmlDataDocument.Load(Stream)
  fullName: System.Xml.XmlDataDocument.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlDataDocument.Load(System.IO.TextReader)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(TextReader)
  nameWithType: XmlDataDocument.Load(TextReader)
  fullName: System.Xml.XmlDataDocument.Load(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.XmlDataDocument.Load(System.String)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(String)
  nameWithType: XmlDataDocument.Load(String)
  fullName: System.Xml.XmlDataDocument.Load(String)
- uid: System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XmlDataDocument.Load(XmlReader)
  fullName: System.Xml.XmlDataDocument.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.XmlDataDocument.#ctor*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: XmlDataDocument
  nameWithType: XmlDataDocument.XmlDataDocument
- uid: System.Xml.XmlDataDocument.CloneNode*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CloneNode
  nameWithType: XmlDataDocument.CloneNode
- uid: System.Xml.XmlDataDocument.CreateElement*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateElement
  nameWithType: XmlDataDocument.CreateElement
- uid: System.Xml.XmlDataDocument.CreateEntityReference*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateEntityReference
  nameWithType: XmlDataDocument.CreateEntityReference
- uid: System.Xml.XmlDataDocument.CreateNavigator*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: CreateNavigator
  nameWithType: XmlDataDocument.CreateNavigator
- uid: System.Xml.XmlDataDocument.DataSet*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: DataSet
  nameWithType: XmlDataDocument.DataSet
- uid: System.Xml.XmlDataDocument.GetElementById*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementById
  nameWithType: XmlDataDocument.GetElementById
- uid: System.Xml.XmlDataDocument.GetElementFromRow*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementFromRow
  nameWithType: XmlDataDocument.GetElementFromRow
- uid: System.Xml.XmlDataDocument.GetElementsByTagName*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlDataDocument.GetElementsByTagName
- uid: System.Xml.XmlDataDocument.GetRowFromElement*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: GetRowFromElement
  nameWithType: XmlDataDocument.GetRowFromElement
- uid: System.Xml.XmlDataDocument.Load*
  parent: System.Xml.XmlDataDocument
  isExternal: false
  name: Load
  nameWithType: XmlDataDocument.Load
