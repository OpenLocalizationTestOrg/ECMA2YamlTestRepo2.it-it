### YamlMime:ManagedReference
items:
- uid: System.Data.DBConcurrencyException
  id: DBConcurrencyException
  children:
  - System.Data.DBConcurrencyException.#ctor
  - System.Data.DBConcurrencyException.#ctor(System.String)
  - System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)
  - System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])
  - System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])
  - System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)
  - System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DBConcurrencyException.Row
  - System.Data.DBConcurrencyException.RowCount
  langs:
  - csharp
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
  type: Class
  summary: "Eccezione generata dal <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> durante un inserimento, aggiornamento o eliminazione operazione se il numero di righe interessate è pari a zero."
  remarks: "Il <xref:System.Data.Common.DataAdapter>esamina il numero di righe interessate dall&quot;esecuzione di ogni operazione di inserimento, aggiornamento o eliminazione e genera questa eccezione se il numero è uguale a zero.</xref:System.Data.Common.DataAdapter> Questa eccezione viene in genere causata da una violazione di concorrenza."
  syntax:
    content: 'public sealed class DBConcurrencyException : SystemException'
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.#ctor
  id: '#ctor'
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: DBConcurrencyException()
  nameWithType: DBConcurrencyException.DBConcurrencyException()
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref> classe."
  remarks: "Il costruttore predefinito inizializza tutti i campi in base ai valori predefiniti."
  syntax:
    content: public DBConcurrencyException ();
    parameters: []
  overload: System.Data.DBConcurrencyException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: DBConcurrencyException(String)
  nameWithType: DBConcurrencyException.DBConcurrencyException(String)
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref> classe."
  syntax:
    content: public DBConcurrencyException (string message);
    parameters:
    - id: message
      type: System.String
      description: "La stringa di testo che descrive i dettagli dell&quot;eccezione."
  overload: System.Data.DBConcurrencyException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: DBConcurrencyException(String,Exception)
  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception)
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref> classe."
  remarks: "È possibile creare una nuova eccezione che rileva un&quot;eccezione precedente. Il codice che gestisce la seconda eccezione è possibile utilizzare le informazioni aggiuntive all&quot;eccezione precedente, denominato anche un&quot;eccezione interna, per esaminare la causa dell&quot;errore iniziale."
  syntax:
    content: public DBConcurrencyException (string message, Exception inner);
    parameters:
    - id: message
      type: System.String
      description: "La stringa di testo che descrive i dettagli dell&quot;eccezione."
    - id: inner
      type: System.Exception
      description: "Riferimento all&quot;eccezione interna."
  overload: System.Data.DBConcurrencyException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])
  id: '#ctor(System.String,System.Exception,System.Data.DataRow[])'
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: DBConcurrencyException(String,Exception,DataRow[])
  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref> classe."
  syntax:
    content: public DBConcurrencyException (string message, Exception inner, System.Data.DataRow[] dataRows);
    parameters:
    - id: message
      type: System.String
      description: "Il messaggio di errore che spiega il motivo dell&quot;eccezione."
    - id: inner
      type: System.Exception
      description: "L&quot;eccezione che ha causato l&quot;eccezione corrente o un riferimento null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic) se è specificata alcuna eccezione interna."
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Matrice che contiene il <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti il cui errore di aggiornamento generato questa eccezione."
  overload: System.Data.DBConcurrencyException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])
  id: CopyToRows(System.Data.DataRow[])
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: CopyToRows(DataRow[])
  nameWithType: DBConcurrencyException.CopyToRows(DataRow[])
  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copie di <xref href=&quot;System.Data.DataRow&quot;> </xref> con errore di aggiornamento generato questa eccezione, la matrice specificata di oggetti <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti."
  remarks: "Quando si eseguono aggiornamenti batch con il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>proprietà del <xref:System.Data.Common.DataAdapter>impostato su `true`, questa eccezione viene generata se tutti gli aggiornamenti di errore della riga.</xref:System.Data.Common.DataAdapter> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> In questo caso, ciò <xref:System.Data.DBConcurrencyException>contiene <xref:System.Data.DataRow>oggetti per tutte le righe il cui aggiornamento non riuscito, anziché solo il <xref:System.Data.DataRow>oggetto <xref:System.Data.DBConcurrencyException.Row%2A>e interessati <xref:System.Data.DataRow>oggetti possono essere recuperati chiamando <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.</xref:System.Data.DBConcurrencyException.CopyToRows%2A> </xref:System.Data.DataRow> </xref:System.Data.DBConcurrencyException.Row%2A> </xref:System.Data.DataRow> </xref:System.Data.DataRow> </xref:System.Data.DBConcurrencyException>"
  syntax:
    content: public void CopyToRows (System.Data.DataRow[] array);
    parameters:
    - id: array
      type: System.Data.DataRow[]
      description: "Matrice unidimensionale di <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti in cui copiare la <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti in."
  overload: System.Data.DBConcurrencyException.CopyToRows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)
  id: CopyToRows(System.Data.DataRow[],System.Int32)
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: CopyToRows(DataRow[],Int32)
  nameWithType: DBConcurrencyException.CopyToRows(DataRow[],Int32)
  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[],Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copie di <xref href=&quot;System.Data.DataRow&quot;> </xref> con errore di aggiornamento generato questa eccezione, la matrice specificata di oggetti <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti, a partire dall&quot;indice della matrice di destinazione specificato."
  remarks: "Quando si eseguono aggiornamenti batch con il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>proprietà del <xref:System.Data.Common.DataAdapter>impostato su `true`, questa eccezione viene generata se tutti gli aggiornamenti di errore della riga.</xref:System.Data.Common.DataAdapter> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> In questo caso, ciò <xref:System.Data.DBConcurrencyException>contiene <xref:System.Data.DataRow>oggetti per tutte le righe il cui aggiornamento non riuscito, anziché solo il <xref:System.Data.DataRow>oggetto <xref:System.Data.DBConcurrencyException.Row%2A>e interessati <xref:System.Data.DataRow>oggetti possono essere recuperati chiamando <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.</xref:System.Data.DBConcurrencyException.CopyToRows%2A> </xref:System.Data.DataRow> </xref:System.Data.DBConcurrencyException.Row%2A> </xref:System.Data.DataRow> </xref:System.Data.DataRow> </xref:System.Data.DBConcurrencyException>"
  syntax:
    content: public void CopyToRows (System.Data.DataRow[] array, int arrayIndex);
    parameters:
    - id: array
      type: System.Data.DataRow[]
      description: "Matrice unidimensionale di <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti in cui copiare la <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti in."
    - id: arrayIndex
      type: System.Int32
      description: "Indice della matrice di destinazione per iniziare la copia."
  overload: System.Data.DBConcurrencyException.CopyToRows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Popola l&quot;oggetto di informazioni di serializzazione specificato coi con i dati necessari per serializzare il <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref>."
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: si
      type: System.Runtime.Serialization.SerializationInfo
      description: "Oggetto <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> che contiene i dati serializzati associati il <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Oggetto <xref:System.Runtime.Serialization.StreamingContext>contenente l&quot;origine e la destinazione del flusso serializzato associato il <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Data.DBConcurrencyException.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Il <code> info </code> parametro è un riferimento null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic)."
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.Row
  id: Row
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: Row
  nameWithType: DBConcurrencyException.Row
  fullName: System.Data.DBConcurrencyException.Row
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta il valore di <xref href=&quot;System.Data.DataRow&quot;> </xref> che ha generato il <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref>."
  remarks: "Utilizza la riga per recuperare il valore della <xref:System.Data.DataRow>riga che ha generato il <xref:System.Data.DBConcurrencyException>.</xref:System.Data.DBConcurrencyException> </xref:System.Data.DataRow> Se si imposta il valore di <xref:System.Data.DataRow>non ha alcun effetto.</xref:System.Data.DataRow>       Quando si eseguono aggiornamenti batch con il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>proprietà del <xref:System.Data.Common.DataAdapter>impostato su `true`, questa eccezione viene generata se tutti gli aggiornamenti di errore della riga.</xref:System.Data.Common.DataAdapter> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> In questo caso, questo <xref:System.Data.DBConcurrencyException>contiene <xref:System.Data.DataRow>gli oggetti per tutte le righe il cui aggiornamento non riuscito, anziché solo un <xref:System.Data.DataRow>oggetto nella riga e interessati <xref:System.Data.DataRow>oggetti possono essere recuperati chiamando <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.</xref:System.Data.DBConcurrencyException.CopyToRows%2A> </xref:System.Data.DataRow> </xref:System.Data.DataRow> </xref:System.Data.DataRow> </xref:System.Data.DBConcurrencyException>       Supporto della serializzazione non esiste per <xref:System.Data.DataRow>oggetti.</xref:System.Data.DataRow> Pertanto, se si serializza un <xref:System.Data.DBConcurrencyException>dell&quot;oggetto, il valore della proprietà della riga nella versione serializzata dell&quot;oggetto è impostato su un valore null.</xref:System.Data.DBConcurrencyException>"
  syntax:
    content: public System.Data.DataRow Row { get; set; }
    return:
      type: System.Data.DataRow
      description: "Il valore di <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  overload: System.Data.DBConcurrencyException.Row*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.RowCount
  id: RowCount
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: RowCount
  nameWithType: DBConcurrencyException.RowCount
  fullName: System.Data.DBConcurrencyException.RowCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene il numero di righe il cui aggiornamento non riuscito, la generazione di questa eccezione."
  syntax:
    content: public int RowCount { get; }
    return:
      type: System.Int32
      description: "Valore intero contenente il conteggio del numero di righe il cui aggiornamento non riuscito."
  overload: System.Data.DBConcurrencyException.RowCount*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.DBConcurrencyException.#ctor
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: DBConcurrencyException()
  nameWithType: DBConcurrencyException.DBConcurrencyException()
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException()
- uid: System.Data.DBConcurrencyException.#ctor(System.String)
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: DBConcurrencyException(String)
  nameWithType: DBConcurrencyException.DBConcurrencyException(String)
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: DBConcurrencyException(String,Exception)
  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception)
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: DBConcurrencyException(String,Exception,DataRow[])
  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: CopyToRows(DataRow[])
  nameWithType: DBConcurrencyException.CopyToRows(DataRow[])
  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[])
- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: CopyToRows(DataRow[],Int32)
  nameWithType: DBConcurrencyException.CopyToRows(DataRow[],Int32)
  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[],Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.DBConcurrencyException.Row
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: Row
  nameWithType: DBConcurrencyException.Row
  fullName: System.Data.DBConcurrencyException.Row
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DBConcurrencyException.RowCount
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: RowCount
  nameWithType: DBConcurrencyException.RowCount
  fullName: System.Data.DBConcurrencyException.RowCount
- uid: System.Data.DBConcurrencyException.#ctor*
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException.DBConcurrencyException
- uid: System.Data.DBConcurrencyException.CopyToRows*
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: CopyToRows
  nameWithType: DBConcurrencyException.CopyToRows
- uid: System.Data.DBConcurrencyException.GetObjectData*
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: GetObjectData
  nameWithType: DBConcurrencyException.GetObjectData
- uid: System.Data.DBConcurrencyException.Row*
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: Row
  nameWithType: DBConcurrencyException.Row
- uid: System.Data.DBConcurrencyException.RowCount*
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: RowCount
  nameWithType: DBConcurrencyException.RowCount
