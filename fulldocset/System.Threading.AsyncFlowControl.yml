### YamlMime:ManagedReference
items:
- uid: System.Threading.AsyncFlowControl
  id: AsyncFlowControl
  children:
  - System.Threading.AsyncFlowControl.Dispose
  - System.Threading.AsyncFlowControl.Equals(System.Object)
  - System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.GetHashCode
  - System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.Undo
  langs:
  - csharp
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
  type: Struct
  summary: "Fornisce la funzionalità per ripristinare la migrazione o flusso del contesto di esecuzione tra thread."
  remarks: "Un contesto di esecuzione contiene tutte le informazioni relative all&quot;esecuzione di un thread logico. Per impedire il flusso del contesto di esecuzione di altri thread, è possibile utilizzare il <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>(metodo), che restituisce una struttura AsyncFlowControl.</xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> Il <xref:System.Threading.AsyncFlowControl.Undo%2A>metodo della struttura restituita AsyncFlowControl può essere utilizzato per annullare l&quot;eliminazione di flusso.</xref:System.Threading.AsyncFlowControl.Undo%2A> La struttura AsyncFlowControl deve essere utilizzata nello stesso thread in cui è stato creato."
  syntax:
    content: 'public struct AsyncFlowControl : IDisposable'
  inheritance:
  - System.ValueType
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Dispose
  id: Dispose
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Dispose()
  nameWithType: AsyncFlowControl.Dispose()
  fullName: System.Threading.AsyncFlowControl.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Rilascia tutte le risorse usate dall&quot;istanza corrente del <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> classe."
  remarks: "Chiamare `Dispose` quando si è terminato di utilizzare <xref:System.Threading.AsyncFlowControl>.</xref:System.Threading.AsyncFlowControl> Il `Dispose` metodo lascia la <xref:System.Threading.AsyncFlowControl>in uno stato inutilizzabile.</xref:System.Threading.AsyncFlowControl> Dopo la chiamata `Dispose`, è necessario rilasciare tutti i riferimenti al <xref:System.Threading.AsyncFlowControl>in modo che il garbage collector può recuperare la memoria che di <xref:System.Threading.AsyncFlowControl>occupata.</xref:System.Threading.AsyncFlowControl> </xref:System.Threading.AsyncFlowControl>       Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md) e [implementazione di un metodo Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Chiamare sempre `Dispose` prima di rilasciare l&quot;ultimo riferimento a <xref:System.Threading.AsyncFlowControl>.</xref:System.Threading.AsyncFlowControl> In caso contrario, le risorse non vengono liberate finché il garbage collector chiama la <xref:System.Threading.AsyncFlowControl>dell&quot;oggetto `Finalize` metodo.</xref:System.Threading.AsyncFlowControl>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.AsyncFlowControl.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura non è utilizzata nel thread in cui è stato creato.       - o - <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura è già stata utilizzata per chiamare Dispose o <xref:System.Threading.AsyncFlowControl.Undo*>.</xref:System.Threading.AsyncFlowControl.Undo*>"
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: AsyncFlowControl.Equals(Object)
  fullName: System.Threading.AsyncFlowControl.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Determina se l&quot;oggetto specificato è uguale all&quot;oggetto corrente <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Oggetto da confrontare con la struttura corrente."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> obj </code> è un <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura ed è uguale all&quot;oggetto corrente <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  id: Equals(System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Equals(AsyncFlowControl)
  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.Equals(AsyncFlowControl)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Determina se l&quot;oggetto specificato <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura è uguale all&quot;oggetto corrente <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura."
  syntax:
    content: public bool Equals (System.Threading.AsyncFlowControl obj);
    parameters:
    - id: obj
      type: System.Threading.AsyncFlowControl
      description: "Un <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura da confrontare con la struttura corrente."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> obj </code> è uguale all&quot;oggetto corrente <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.GetHashCode
  id: GetHashCode
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: AsyncFlowControl.GetHashCode()
  fullName: System.Threading.AsyncFlowControl.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Ottiene un codice hash per l&quot;oggetto corrente <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Codice hash per l&quot;oggetto corrente <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura."
  overload: System.Threading.AsyncFlowControl.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  id: op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: op_Equality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Confronta due <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> strutture per determinare se sono uguali."
  syntax:
    content: public static bool op_Equality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);
    parameters:
    - id: a
      type: System.Threading.AsyncFlowControl
      description: "Un <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura."
    - id: b
      type: System.Threading.AsyncFlowControl
      description: "Un <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se le due strutture sono uguali. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  id: op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: op_Inequality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Confronta due <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> strutture per stabilire se non sono uguali."
  syntax:
    content: public static bool op_Inequality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);
    parameters:
    - id: a
      type: System.Threading.AsyncFlowControl
      description: "Un <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura."
    - id: b
      type: System.Threading.AsyncFlowControl
      description: "Un <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se le strutture non sono uguali. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Undo
  id: Undo
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Undo()
  nameWithType: AsyncFlowControl.Undo()
  fullName: System.Threading.AsyncFlowControl.Undo()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Ripristina il flusso del contesto di esecuzione tra thread."
  remarks: "Il <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>metodo restituisce un <xref:System.Threading.AsyncFlowControl>struttura utilizzata per ripristinare il flusso.</xref:System.Threading.AsyncFlowControl> </xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>       Il metodo di annullamento deve essere chiamato solo per il <xref:System.Threading.AsyncFlowControl>struttura restituita dall&quot;oggetto associato <xref:System.Threading.ExecutionContext.SuppressFlow%2A>metodo.</xref:System.Threading.ExecutionContext.SuppressFlow%2A> </xref:System.Threading.AsyncFlowControl>"
  syntax:
    content: public void Undo ();
    parameters: []
  overload: System.Threading.AsyncFlowControl.Undo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura non è utilizzata nel thread in cui è stato creato.       - o - <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> struttura è già stata utilizzata per chiamare <xref:System.Threading.AsyncFlowControl.Dispose*>o annullare.</xref:System.Threading.AsyncFlowControl.Dispose*>"
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Threading.AsyncFlowControl.Dispose
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Dispose()
  nameWithType: AsyncFlowControl.Dispose()
  fullName: System.Threading.AsyncFlowControl.Dispose()
- uid: System.Threading.AsyncFlowControl.Equals(System.Object)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals(Object)
  nameWithType: AsyncFlowControl.Equals(Object)
  fullName: System.Threading.AsyncFlowControl.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals(AsyncFlowControl)
  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.Equals(AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl
  parent: System.Threading
  isExternal: false
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
- uid: System.Threading.AsyncFlowControl.GetHashCode
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: GetHashCode()
  nameWithType: AsyncFlowControl.GetHashCode()
  fullName: System.Threading.AsyncFlowControl.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Equality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Inequality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl.Undo
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Undo()
  nameWithType: AsyncFlowControl.Undo()
  fullName: System.Threading.AsyncFlowControl.Undo()
- uid: System.Threading.AsyncFlowControl.Dispose*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Dispose
  nameWithType: AsyncFlowControl.Dispose
- uid: System.Threading.AsyncFlowControl.Equals*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals
  nameWithType: AsyncFlowControl.Equals
- uid: System.Threading.AsyncFlowControl.GetHashCode*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: GetHashCode
  nameWithType: AsyncFlowControl.GetHashCode
- uid: System.Threading.AsyncFlowControl.op_Equality*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Equality
  nameWithType: AsyncFlowControl.op_Equality
- uid: System.Threading.AsyncFlowControl.op_Inequality*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Inequality
  nameWithType: AsyncFlowControl.op_Inequality
- uid: System.Threading.AsyncFlowControl.Undo*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Undo
  nameWithType: AsyncFlowControl.Undo
