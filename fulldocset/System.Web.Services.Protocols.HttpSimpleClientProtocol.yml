### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol
  id: HttpSimpleClientProtocol
  children:
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  - System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  langs:
  - csharp
  name: HttpSimpleClientProtocol
  nameWithType: HttpSimpleClientProtocol
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol
  type: Class
  summary: "Rappresenta la classe base per la comunicazione con un servizio Web XML usando le associazioni di protocolli HTTP-GET e HTTP-POST semplice."
  remarks: "Questa classe specifica la maggior parte dell&quot;implementazione per la comunicazione con un servizio Web XML su HTTP tramite codificatori per codificare i parametri e i valori restituiti in formato MIME comuni. Questi codificatori derivano dalla <xref:System.Web.Services.Protocols.MimeFormatter>classe.</xref:System.Web.Services.Protocols.MimeFormatter> Per impostazione predefinita, una classe proxy derivante da HttpSimpleClientProtocol codifica i parametri utilizzando il tipo MIME application/x-www-form-urlencoded e la risposta in formato XML semplice. Formattatori mime personalizzati possono essere specificati utilizzando il <xref:System.Web.Services.Protocols.HttpMethodAttribute>attributo, tuttavia, non è previsto alcun supporto per questa integrazione in una generazione di proxy e descrizione del servizio.</xref:System.Web.Services.Protocols.HttpMethodAttribute>       `Notes to Inheritors:`Quando si esegue l&quot;override di questa classe, è possibile inserire i metodi nella classe derivata che sono specifici per un particolare tipo di un servizio Web XML. I metodi semplicemente acquisire i parametri e chiamano la classe base per eseguire le operazioni di comunicare con il sito. Se i metodi inseriti sono asincroni, chiamare il <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A>e <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A>metodi.</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> </xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> Se i metodi inseriti sono sincroni, chiamare il <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>metodo.</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> Il costruttore sottoposto a override in genere imposta la <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>proprietà per l&quot;URI del metodo del servizio Web XML.</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>       Lo strumento di Web Services Description Language (Wsdl.exe) genera le classi derivate di HttpSimpleClientProtocol per una descrizione del servizio specificato."
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service below. The proxy class derives from <xref:System.Web.Services.Protocols.HttpGetClientProtocol>, which derives from the abstract HttpSimpleClientProtocol class.  \n  \n [!code-cs[Classic HttpGetClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_3_1.cs)]\n [!code-cpp[Classic HttpGetClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_3_1.cpp)]\n [!code-vb[Classic HttpGetClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_3_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-vb[Classic HttpSimpleClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_3_2.vb)]\n [!code-cpp[Classic HttpSimpleClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_3_2.cpp)]\n [!code-cs[Classic HttpSimpleClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_3_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class HttpSimpleClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Web.Services.Protocols.WebClientProtocol
  - System.Web.Services.Protocols.HttpWebClientProtocol
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect
  - System.Web.Services.Protocols.HttpWebClientProtocol.CancelAsync(System.Object)
  - System.Web.Services.Protocols.HttpWebClientProtocol.ClientCertificates
  - System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer
  - System.Web.Services.Protocols.HttpWebClientProtocol.EnableDecompression
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type,System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type[],System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebRequest(System.Uri)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  - System.Web.Services.Protocols.HttpWebClientProtocol.Proxy
  - System.Web.Services.Protocols.HttpWebClientProtocol.UnsafeAuthenticatedConnectionSharing
  - System.Web.Services.Protocols.HttpWebClientProtocol.UserAgent
  - System.Web.Services.Protocols.WebClientProtocol.Abort
  - System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  - System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  - System.Web.Services.Protocols.WebClientProtocol.Credentials
  - System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  - System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  - System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  - System.Web.Services.Protocols.WebClientProtocol.Timeout
  - System.Web.Services.Protocols.WebClientProtocol.Url
  - System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: HttpSimpleClientProtocol()
  nameWithType: HttpSimpleClientProtocol.HttpSimpleClientProtocol()
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.HttpSimpleClientProtocol()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.Services.Protocols.HttpSimpleClientProtocol&quot;> </xref> classe."
  syntax:
    content: protected HttpSimpleClientProtocol ();
    parameters: []
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  id: BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: BeginInvoke(String,String,Object[],AsyncCallback,Object)
  nameWithType: HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Avvia una chiamata asincrona di un metodo del servizio Web XML."
  remarks: "Il `methodName` parametro viene utilizzato per trovare i tipi dei parametri e valori restituiti del metodo che richiama il metodo BeginInvoke. Consente anche di trovare attributi personalizzati che possono essere aggiunti al metodo. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>, <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>, e <xref:System.Xml.Serialization.XmlElementAttribute>forniscono informazioni aggiuntive sul metodo derivato è necessario per il protocollo HTTP.</xref:System.Xml.Serialization.XmlElementAttribute> </xref:System.Web.Services.Protocols.SoapRpcMethodAttribute></xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>       `asyncState`viene passato a `callback` ed è incluso nel <xref:System.IAsyncResult>restituito dal metodo BeginInvoke.</xref:System.IAsyncResult> È utile per passare le informazioni dal contesto della chiamata asincrona per la gestione del risultato asincrono in `callback`."
  example:
  - "The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form starts and completes an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/610d2bee-8011-4b46-8264-_1.aspx)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/610d2bee-8011-4b46-8264-_1.aspx)]  \n  \n The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below. Within the `BeginAdd` method of the proxy class, the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> method starts an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/cpp/610d2bee-8011-4b46-8264-_2.cpp)]\n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/csharp/610d2bee-8011-4b46-8264-_2.cs)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/visualbasic/610d2bee-8011-4b46-8264-_2.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected IAsyncResult BeginInvoke (string methodName, string requestUrl, object[] parameters, AsyncCallback callback, object asyncState);
    parameters:
    - id: methodName
      type: System.String
      description: "Il nome del metodo del servizio Web XML."
    - id: requestUrl
      type: System.String
      description: "L&quot;URL da utilizzare durante la creazione di <xref:System.Net.WebRequest>.</xref:System.Net.WebRequest>"
    - id: parameters
      type: System.Object[]
      description: "Matrice di oggetti contenente i parametri da passare al metodo del servizio Web XML. L&quot;ordine dei valori nella matrice corrisponde all&quot;ordine dei parametri nella chiamata del metodo della classe derivata."
    - id: callback
      type: System.AsyncCallback
      description: "Delegato da chiamare quando la chiamata al metodo asincrono è completa. Se `callback` è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, non viene chiamato il delegato."
    - id: asyncState
      type: System.Object
      description: "Informazioni aggiuntive fornite da un client."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che possono essere passate al <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke*>per ottenere i valori restituiti dal metodo del servizio Web XML.</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke*> </xref:System.IAsyncResult>"
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "La richiesta di raggiunta il computer server, ma non è stata elaborata."
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Completa una chiamata asincrona a un metodo di servizio Web XML tramite HTTP."
  remarks: ''
  example:
  - "The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form starts and completes an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/df330565-2b74-43bd-92c4-_1.aspx)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/df330565-2b74-43bd-92c4-_1.aspx)]  \n  \n The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below. Within the `EndAdd` method of the proxy class, the <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> method starts an asynchronous invocation of the `Add` XML Web service method.  \n  \n [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/cpp/df330565-2b74-43bd-92c4-_2.cpp)]\n [!code-cs[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/csharp/df330565-2b74-43bd-92c4-_2.cs)]\n [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/add/codesnippet/visualbasic/df330565-2b74-43bd-92c4-_2.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the above proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object EndInvoke (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Il <xref:System.IAsyncResult>restituito dal <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*>metodo.</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Object
      description: "Una matrice di oggetti che contiene il valore restituito ed eventuali parametri per riferimento o <code> out </code> metodo del servizio parametri per il Web XML."
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>non è il valore restituito dal <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*> metodo."
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])
  id: Invoke(System.String,System.String,System.Object[])
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: Invoke(String,String,Object[])
  nameWithType: HttpSimpleClientProtocol.Invoke(String,String,Object[])
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(String,String,Object[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Richiama un metodo di servizio Web XML tramite HTTP."
  remarks: "Il `methodName` parametro viene utilizzato per trovare i tipi dei parametri e valori restituiti del metodo che richiama il metodo Invoke. Consente anche di trovare attributi personalizzati che possono essere stati aggiunti al metodo. <xref:System.Web.Services.Protocols.HttpMethodAttribute>e <xref:System.Xml.Serialization.XmlElementAttribute>forniscono informazioni aggiuntive sul metodo derivato richiesto per il protocollo SOAP.</xref:System.Xml.Serialization.XmlElementAttribute></xref:System.Web.Services.Protocols.HttpMethodAttribute>"
  example:
  - "The following code example is an ASP.NET Web Form, which calls an XML Web service named `Math`. Within the `EnterBtn_Click` function, the Web Form synchronously invokes the `Add` XML Web service method.  \n  \n [!code-cs[HttpSimpleClientProtocol.Invoke Example#2](~/add/codesnippet/csharp/3a69f415-9422-4839-9833-_1.aspx)]\n [!code-vb[HttpSimpleClientProtocol.Invoke Example#2](~/add/codesnippet/visualbasic/3a69f415-9422-4839-9833-_1.aspx)]  \n  \n The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service below. Within the `Add` method of the proxy class, the Invoke method synchronously invokes the `Add` Web Service method.  \n  \n [!code-vb[HttpSimpleClientProtocol.Invoke Example#1](~/add/codesnippet/visualbasic/3a69f415-9422-4839-9833-_2.vb)]\n [!code-cs[HttpSimpleClientProtocol.Invoke Example#1](~/add/codesnippet/csharp/3a69f415-9422-4839-9833-_2.cs)]\n [!code-cpp[HttpSimpleClientProtocol.Invoke Example#1](~/add/codesnippet/cpp/3a69f415-9422-4839-9833-_2.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the above proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object Invoke (string methodName, string requestUrl, object[] parameters);
    parameters:
    - id: methodName
      type: System.String
      description: "Il nome del metodo del servizio Web XML nella classe derivata che richiama il metodo Invoke."
    - id: requestUrl
      type: System.String
      description: "L&quot;URL del metodo del servizio Web XML che richiede il client."
    - id: parameters
      type: System.Object[]
      description: "Matrice di oggetti contenente i parametri da passare al servizio Web XML remoto. L&quot;ordine dei valori nella matrice corrisponde all&quot;ordine dei parametri nella chiamata del metodo della classe derivata."
    return:
      type: System.Object
      description: "Una matrice di oggetti che contiene il valore restituito e qualsiasi parametro per riferimento o <code> out </code> i parametri del metodo della classe derivata."
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "La richiesta di raggiunta il computer server, ma non è stata elaborata."
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  id: InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,String,Object[],SendOrPostCallback)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Richiama il metodo specificato in modo asincrono."
  syntax:
    content: protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback);
    parameters:
    - id: methodName
      type: System.String
      description: "Il nome del metodo da richiamare."
    - id: requestUrl
      type: System.String
      description: "URL della richiesta del servizio web richiamato."
    - id: parameters
      type: System.Object[]
      description: "I parametri da passare al metodo."
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "Il delegato chiamato quando è stata completata la chiamata del metodo."
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  id: InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Richiama il metodo specificato in modo asincrono, mantenendo lo stato associato."
  syntax:
    content: protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);
    parameters:
    - id: methodName
      type: System.String
      description: "Il nome del metodo da richiamare."
    - id: requestUrl
      type: System.String
      description: "URL della richiesta del servizio web richiamato."
    - id: parameters
      type: System.Object[]
      description: "I parametri da passare al metodo."
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "Il delegato chiamato quando è stata completata la chiamata del metodo."
    - id: userState
      type: System.Object
      description: "Oggetto che contiene associate informazioni sullo stato che viene passate per il `callback` delegato quando il metodo è stata completata."
  overload: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Services.Protocols.HttpWebClientProtocol
  isExternal: false
  name: System.Web.Services.Protocols.HttpWebClientProtocol
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: HttpSimpleClientProtocol()
  nameWithType: HttpSimpleClientProtocol.HttpSimpleClientProtocol()
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.HttpSimpleClientProtocol()
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: BeginInvoke(String,String,Object[],AsyncCallback,Object)
  nameWithType: HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(String,String,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(IAsyncResult)
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: Invoke(String,String,Object[])
  nameWithType: HttpSimpleClientProtocol.Invoke(String,String,Object[])
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(String,String,Object[])
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: InvokeAsync(String,String,Object[],SendOrPostCallback)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: true
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  nameWithType: HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(String,String,Object[],SendOrPostCallback,Object)
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: HttpSimpleClientProtocol
  nameWithType: HttpSimpleClientProtocol.HttpSimpleClientProtocol
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: BeginInvoke
  nameWithType: HttpSimpleClientProtocol.BeginInvoke
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: EndInvoke
  nameWithType: HttpSimpleClientProtocol.EndInvoke
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: Invoke
  nameWithType: HttpSimpleClientProtocol.Invoke
- uid: System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync*
  parent: System.Web.Services.Protocols.HttpSimpleClientProtocol
  isExternal: false
  name: InvokeAsync
  nameWithType: HttpSimpleClientProtocol.InvokeAsync
