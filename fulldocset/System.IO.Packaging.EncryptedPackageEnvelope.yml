### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.EncryptedPackageEnvelope
  id: EncryptedPackageEnvelope
  children:
  - System.IO.Packaging.EncryptedPackageEnvelope.Close
  - System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  - System.IO.Packaging.EncryptedPackageEnvelope.Dispose
  - System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)
  - System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  - System.IO.Packaging.EncryptedPackageEnvelope.Flush
  - System.IO.Packaging.EncryptedPackageEnvelope.GetPackage
  - System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)
  - System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)
  - System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  - System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  - System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  langs:
  - csharp
  name: EncryptedPackageEnvelope
  nameWithType: EncryptedPackageEnvelope
  fullName: System.IO.Packaging.EncryptedPackageEnvelope
  type: Class
  summary: "Rappresenta un file composto OLE che contiene un pacchetto crittografato."
  remarks: "EncryptedPackageEnvelope non ha costruttori pubblici.  Viene creato un EncryptedPackageEnvelope mediante l&quot;utilizzo di statica <xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>, <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A>, o <xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A>metodi.</xref:System.IO.Packaging.EncryptedPackageEnvelope.Open%2A> </xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> </xref:System.IO.Packaging.EncryptedPackageEnvelope.Create%2A>"
  syntax:
    content: 'public class EncryptedPackageEnvelope : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close
  id: Close
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Close()
  nameWithType: EncryptedPackageEnvelope.Close()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Close()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Chiude il pacchetto crittografato e il file composto OLE che lo contiene."
  remarks: ''
  example:
  - "The following example shows how to use this method to close an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Close*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Create(Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Crea e restituisce un <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> al flusso specificato."
  remarks: "L&quot;utente corrente ha accesso in lettura/scrittura per il nuovo file."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Create (System.IO.Stream envelopeStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeStream
      type: System.IO.Stream
      description: "Flusso in cui creare il file."
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "La licenza di pubblicazione è incorporata nel file composto."
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "Oggetto che determina le operazioni che l&quot;utente corrente è autorizzato a eseguire sul contenuto crittografato."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "L&quot;oggetto appena creato <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>envelopeStream</code>non fornisce accesso in lettura/scrittura."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Create(String,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Crea e restituisce un <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> e assegna il nome file specificato."
  remarks: "Se un file con il nome specificato esiste già, viene sovrascritto.       L&quot;utente corrente ha accesso in lettura/scrittura al file."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Create (string envelopeFileName, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "Il nome del file composto OLE."
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "La licenza di pubblicazione è incorporata nel file composto."
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "Oggetto che determina le operazioni che l&quot;utente corrente è autorizzato a eseguire sul contenuto crittografato."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "L&quot;oggetto appena creato <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeFileName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Crea e restituisce un <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> (sul flusso specificato) che utilizza il pacchetto non crittografato specificato come proprio contenuto."
  remarks: "L&quot;utente corrente ha accesso in lettura/scrittura per il nuovo file."
  example:
  - "The following example shows how to use the <xref:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage%2A> method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (System.IO.Stream envelopeStream, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeStream
      type: System.IO.Stream
      description: "Flusso in cui creare il file."
    - id: packageStream
      type: System.IO.Stream
      description: "Flusso che rappresenta il pacchetto non crittografato esistente."
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "La licenza di pubblicazione è incorporata nel file composto."
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "Oggetto che determina le operazioni che l&quot;utente corrente è autorizzato a eseguire sul contenuto crittografato."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "L&quot;oggetto appena creato <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeStream</code>or <code>packageStream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>envelopeStream</code>non fornisce accesso in lettura/scrittura."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  id: CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Crea e restituisce un <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> che utilizza il pacchetto non crittografato specificato come contenuto e assegna il nome file specificato."
  remarks: "Se un file con il nome specificato esiste già, viene sovrascritto.       L&quot;utente corrente ha accesso in lettura/scrittura al file."
  example:
  - "The following example shows how to use the CreateFromPackage method to instantiate an <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope CreateFromPackage (string envelopeFileName, System.IO.Stream packageStream, System.Security.RightsManagement.PublishLicense publishLicense, System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "Il nome del file composto OLE."
    - id: packageStream
      type: System.IO.Stream
      description: "Flusso che rappresenta il pacchetto non crittografato esistente."
    - id: publishLicense
      type: System.Security.RightsManagement.PublishLicense
      description: "La licenza di pubblicazione è incorporata nel file composto."
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "Oggetto che determina le operazioni che l&quot;utente corrente è autorizzato a eseguire sul contenuto crittografato."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "L&quot;oggetto appena creato <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>envelopeFileName</code>or <code>packageStream</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose
  id: Dispose
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Dispose()
  nameWithType: EncryptedPackageEnvelope.Dispose()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Rilascia tutte le risorse usate dal <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  remarks: "Chiamare il metodo Dispose al termine di un <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</xref:System.IO.Packaging.EncryptedPackageEnvelope> Il metodo Dispose lascia il <xref:System.IO.Packaging.EncryptedPackageEnvelope>in uno stato inutilizzabile.</xref:System.IO.Packaging.EncryptedPackageEnvelope> Dopo aver chiamato Dispose, è necessario rilasciare tutti i riferimenti al <xref:System.IO.Packaging.EncryptedPackageEnvelope>in modo che il garbage collector può recuperare la memoria che di <xref:System.IO.Packaging.EncryptedPackageEnvelope>occupata.</xref:System.IO.Packaging.EncryptedPackageEnvelope> </xref:System.IO.Packaging.EncryptedPackageEnvelope> Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md) e [implementazione di un metodo Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Chiamare sempre Dispose prima di rilasciare l&quot;ultimo riferimento a <xref:System.IO.Packaging.EncryptedPackageEnvelope>.</xref:System.IO.Packaging.EncryptedPackageEnvelope> In caso contrario, le risorse non vengono liberate finché il garbage collector chiama la <xref:System.IO.Packaging.EncryptedPackageEnvelope>dell&quot;oggetto <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> </xref:System.IO.Packaging.EncryptedPackageEnvelope>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EncryptedPackageEnvelope.Dispose(Boolean)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico `Dispose()`(metodo) e <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A>richiama `Dispose` con `disposing` impostato su `false`.</xref:System.Object.Finalize%2A>       Quando il `disposing` parametro è true, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.IO.Packaging.EncryptedPackageEnvelope>riferimenti.</xref:System.IO.Packaging.EncryptedPackageEnvelope> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  id: FileOpenAccess
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: FileOpenAccess
  nameWithType: EncryptedPackageEnvelope.FileOpenAccess
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Ottiene un valore che specifica se il file è stato aperto con accesso in lettura, scrittura o entrambi."
  syntax:
    content: public System.IO.FileAccess FileOpenAccess { get; }
    return:
      type: System.IO.FileAccess
      description: "Il <xref href=&quot;System.IO.FileAccess&quot;> </xref> valore utilizzato per aprire il file."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush
  id: Flush
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Flush()
  nameWithType: EncryptedPackageEnvelope.Flush()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Flush()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Cancellare il flusso sia per il <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> e il relativo pacchetto di contenuto."
  syntax:
    content: public void Flush ();
    parameters: []
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage
  id: GetPackage
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: GetPackage()
  nameWithType: EncryptedPackageEnvelope.GetPackage()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Ottiene il pacchetto crittografato all&quot;interno di <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>."
  syntax:
    content: public System.IO.Packaging.Package GetPackage ();
    parameters: []
    return:
      type: System.IO.Packaging.Package
      description: "Il <xref href=&quot;System.IO.Packaging.Package&quot;> </xref> nella busta."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)
  id: IsEncryptedPackageEnvelope(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: IsEncryptedPackageEnvelope(Stream)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Ottiene un valore che specifica se il flusso specificato è un file composto OLE con un flusso del pacchetto crittografato."
  syntax:
    content: public static bool IsEncryptedPackageEnvelope (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso che viene eseguito il test."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il flusso specificato è un file composto OLE con un flusso del pacchetto crittografato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)
  id: IsEncryptedPackageEnvelope(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: IsEncryptedPackageEnvelope(String)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Ottiene un valore che specifica se il file specificato è un file composto OLE con un flusso del pacchetto crittografato."
  remarks: ''
  example:
  - "The following example shows how to use this method to test for encryption.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public static bool IsEncryptedPackageEnvelope (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Il file che viene eseguito il test."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il file specificato è un file composto OLE con un flusso del pacchetto crittografato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fileName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)
  id: Open(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(Stream)
  nameWithType: EncryptedPackageEnvelope.Open(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(Stream)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Aprire il pacchetto crittografato nel flusso specificato."
  remarks: "Il flusso deve essere un pacchetto crittografato."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (System.IO.Stream envelopeStream);
    parameters:
    - id: envelopeStream
      type: System.IO.Stream
      description: "Flusso contenente il pacchetto crittografato."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "Il <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> che viene aperto."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)
  id: Open(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(String)
  nameWithType: EncryptedPackageEnvelope.Open(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Aprire il pacchetto crittografato nel file specificato come in sola lettura e non condiviso."
  remarks: "Il file deve avere un pacchetto crittografato.       Il file aperto è in sola lettura e non condiviso."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "Il file contenente il pacchetto crittografato."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "Il <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> che viene aperto."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)
  id: Open(System.String,System.IO.FileAccess)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(String,FileAccess)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Aprire il pacchetto crittografato nel file specificato come in sola lettura e con l&quot;accesso specificato."
  remarks: "Il file deve avere un pacchetto crittografato.       Il file aperto viene annullato."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "Il file contenente il pacchetto crittografato."
    - id: access
      type: System.IO.FileAccess
      description: "Il tipo di accesso."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "Il <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> che viene aperto."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: Open(String,FileAccess,FileShare)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Aprire il pacchetto crittografato nel file specificato e fornisce l&quot;accesso specificato e la condivisione."
  remarks: "Il file deve avere un pacchetto crittografato."
  syntax:
    content: public static System.IO.Packaging.EncryptedPackageEnvelope Open (string envelopeFileName, System.IO.FileAccess access, System.IO.FileShare sharing);
    parameters:
    - id: envelopeFileName
      type: System.String
      description: "Il file contenente il pacchetto crittografato."
    - id: access
      type: System.IO.FileAccess
      description: "Il tipo di accesso."
    - id: sharing
      type: System.IO.FileShare
      description: "Il tipo di condivisione."
    return:
      type: System.IO.Packaging.EncryptedPackageEnvelope
      description: "Il <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref> che viene aperto."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  id: PackageProperties
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: PackageProperties
  nameWithType: EncryptedPackageEnvelope.PackageProperties
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Ottiene l&quot;oggetto principale come proprietà del pacchetto (ad esempio titolo e oggetto) di documento di rights Management."
  remarks: "Queste proprietà di base vengono archiviate nei flussi di proprietà OLE standard (\\005SummaryInformation e \\005DocumentSummaryInformation). Le proprietà principali vengono archiviate anche nel pacchetto stesso. È responsabilità dell&quot;applicazione per mantenere i due set di proprietà sincronizzato."
  syntax:
    content: public System.IO.Packaging.PackageProperties PackageProperties { get; }
    return:
      type: System.IO.Packaging.PackageProperties
      description: "Il <xref href=&quot;System.IO.Packaging.PackageProperties&quot;> </xref> per il pacchetto."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  id: RightsManagementInformation
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: RightsManagementInformation
  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Ottiene i diritti di gestione informazioni archiviata nel <xref href=&quot;System.IO.Packaging.EncryptedPackageEnvelope&quot;> </xref>, in particolare, il <xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;> </xref> e <xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>archiviati nel file composto OLE che incorpora rights management per il package protetto da"
  remarks: ''
  example:
  - "The following example shows how to obtain <xref:System.IO.Packaging.RightsManagementInformation> for an encrypted package by use the RightsManagementInformation property.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: public System.IO.Packaging.RightsManagementInformation RightsManagementInformation { get; }
    return:
      type: System.IO.Packaging.RightsManagementInformation
      description: "Il <xref href=&quot;System.IO.Packaging.RightsManagementInformation&quot;> </xref> per il pacchetto."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  id: StorageInfo
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  langs:
  - csharp
  name: StorageInfo
  nameWithType: EncryptedPackageEnvelope.StorageInfo
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "Ottiene un oggetto che fornisce l&quot;accesso per i flussi di file composto all&quot;esterno del pacchetto crittografato."
  syntax:
    content: public System.IO.Packaging.StorageInfo StorageInfo { get; }
    return:
      type: System.IO.Packaging.StorageInfo
      description: "Oggetto <xref href=&quot;System.IO.Packaging.StorageInfo&quot;> </xref> che rappresentano flussi nel file composto OLE che si trovano all&quot;esterno del pacchetto crittografato."
  overload: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Close()
  nameWithType: EncryptedPackageEnvelope.Close()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Close()
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Create(Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(Stream,PublishLicense,CryptoProvider)
- uid: System.IO.Packaging.EncryptedPackageEnvelope
  parent: System.IO.Packaging
  isExternal: false
  name: EncryptedPackageEnvelope
  nameWithType: EncryptedPackageEnvelope
  fullName: System.IO.Packaging.EncryptedPackageEnvelope
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.RightsManagement.PublishLicense
  parent: System.Security.RightsManagement
  isExternal: false
  name: PublishLicense
  nameWithType: PublishLicense
  fullName: System.Security.RightsManagement.PublishLicense
- uid: System.Security.RightsManagement.CryptoProvider
  parent: System.Security.RightsManagement
  isExternal: false
  name: CryptoProvider
  nameWithType: CryptoProvider
  fullName: System.Security.RightsManagement.CryptoProvider
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Create(String,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Create(String,PublishLicense,CryptoProvider)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(Stream,Stream,PublishLicense,CryptoProvider)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(String,Stream,PublishLicense,CryptoProvider)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Dispose()
  nameWithType: EncryptedPackageEnvelope.Dispose()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose()
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EncryptedPackageEnvelope.Dispose(Boolean)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: FileOpenAccess
  nameWithType: EncryptedPackageEnvelope.FileOpenAccess
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Flush()
  nameWithType: EncryptedPackageEnvelope.Flush()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Flush()
- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: GetPackage()
  nameWithType: EncryptedPackageEnvelope.GetPackage()
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage()
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: IsEncryptedPackageEnvelope(Stream)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(Stream)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: IsEncryptedPackageEnvelope(String)
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(String)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(Stream)
  nameWithType: EncryptedPackageEnvelope.Open(Stream)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(Stream)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(String)
  nameWithType: EncryptedPackageEnvelope.Open(String)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(String,FileAccess)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess)
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open(String,FileAccess,FileShare)
  nameWithType: EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.Open(String,FileAccess,FileShare)
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: PackageProperties
  nameWithType: EncryptedPackageEnvelope.PackageProperties
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties
- uid: System.IO.Packaging.PackageProperties
  parent: System.IO.Packaging
  isExternal: false
  name: PackageProperties
  nameWithType: PackageProperties
  fullName: System.IO.Packaging.PackageProperties
- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: RightsManagementInformation
  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation
- uid: System.IO.Packaging.RightsManagementInformation
  parent: System.IO.Packaging
  isExternal: false
  name: RightsManagementInformation
  nameWithType: RightsManagementInformation
  fullName: System.IO.Packaging.RightsManagementInformation
- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: StorageInfo
  nameWithType: EncryptedPackageEnvelope.StorageInfo
  fullName: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo
- uid: System.IO.Packaging.StorageInfo
  parent: System.IO.Packaging
  isExternal: false
  name: StorageInfo
  nameWithType: StorageInfo
  fullName: System.IO.Packaging.StorageInfo
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Close*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Close
  nameWithType: EncryptedPackageEnvelope.Close
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Create*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Create
  nameWithType: EncryptedPackageEnvelope.Create
- uid: System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: CreateFromPackage
  nameWithType: EncryptedPackageEnvelope.CreateFromPackage
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Dispose*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Dispose
  nameWithType: EncryptedPackageEnvelope.Dispose
- uid: System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: FileOpenAccess
  nameWithType: EncryptedPackageEnvelope.FileOpenAccess
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Flush*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Flush
  nameWithType: EncryptedPackageEnvelope.Flush
- uid: System.IO.Packaging.EncryptedPackageEnvelope.GetPackage*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: GetPackage
  nameWithType: EncryptedPackageEnvelope.GetPackage
- uid: System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: IsEncryptedPackageEnvelope
  nameWithType: EncryptedPackageEnvelope.IsEncryptedPackageEnvelope
- uid: System.IO.Packaging.EncryptedPackageEnvelope.Open*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: Open
  nameWithType: EncryptedPackageEnvelope.Open
- uid: System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: PackageProperties
  nameWithType: EncryptedPackageEnvelope.PackageProperties
- uid: System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: RightsManagementInformation
  nameWithType: EncryptedPackageEnvelope.RightsManagementInformation
- uid: System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo*
  parent: System.IO.Packaging.EncryptedPackageEnvelope
  isExternal: false
  name: StorageInfo
  nameWithType: EncryptedPackageEnvelope.StorageInfo
