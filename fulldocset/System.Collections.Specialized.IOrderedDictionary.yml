### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.IOrderedDictionary
  id: IOrderedDictionary
  children:
  - System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  - System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  - System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  - System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  langs:
  - csharp
  name: IOrderedDictionary
  nameWithType: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
  type: Interface
  summary: "Rappresenta una raccolta indicizzata di coppie chiave/valore."
  remarks: "Con la chiave o con l&quot;indice, è possano accedere agli elementi di IOrderedDictionary.       Ogni elemento è una coppia chiave/valore archiviata in un <xref:System.Collections.DictionaryEntry>struttura.</xref:System.Collections.DictionaryEntry>       Ogni coppia deve avere una chiave univoca che non è `null`, ma il valore può essere `null` e non deve essere univoco. L&quot;interfaccia IOrderedDictionary consente alle chiavi e contenuti i valori devono essere enumerati, ma non implica alcun ordinamento particolare.       Il `foreach` istruzione del linguaggio c# (`For Each` in Visual Basic) restituisce un oggetto di tipo degli elementi nella raccolta. Poiché ogni elemento del <xref:System.Collections.IDictionary>è una coppia chiave/valore, il tipo di elemento non è il tipo della chiave o il tipo del valore.</xref:System.Collections.IDictionary> Al contrario, il tipo di elemento è <xref:System.Collections.DictionaryEntry>, come illustrato nell&quot;esempio seguente.</xref:System.Collections.DictionaryEntry>       [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/csharp/t-system.collections.spe_7_1.cs)][!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/cpp/t-system.collections.spe_7_1.cpp)][!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/visualbasic/t-system.collections.spe_7_1.vb) ] il `foreach` istruzione è un wrapper per l&quot;enumeratore, che consente solo di leggere da, non la scrittura, la raccolta.    "
  example:
  - "The following code example demonstrates the implementation of a simple IOrderedDictionary based on the <xref:System.Collections.ArrayList> class. The implemented IOrderedDictionary stores first names as the keys and last names as the values, with the added requirement that each first name is unique.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/cpp/t-system.collections.spe_7_2.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/csharp/t-system.collections.spe_7_2.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/visualbasic/t-system.collections.spe_7_2.vb)]"
  syntax:
    content: 'public interface IOrderedDictionary : System.Collections.IDictionary'
  implements:
  - System.Collections.IDictionary
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: IOrderedDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Restituisce un enumeratore che scorre la <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> insieme."
  remarks: "[Visual Basic, c#]       Il `foreach` l&quot;istruzione del linguaggio c# (`for each` in Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, l&quot;utilizzo `foreach` è consigliabile anziché la modifica diretta dell&quot;enumeratore.       È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non possono essere utilizzati per modificare la raccolta sottostante.       Inizialmente l&quot;enumeratore è posizionato prima del primo elemento nella raccolta. <xref:System.Collections.IEnumerator.Reset%2A>riporta l&quot;enumeratore in questa posizione.</xref:System.Collections.IEnumerator.Reset%2A>  In questa posizione, la <xref:System.Collections.IEnumerator.Current%2A>proprietà non è definita.</xref:System.Collections.IEnumerator.Current%2A> Pertanto, è necessario chiamare <xref:System.Collections.IEnumerator.MoveNext%2A>per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Restituisce lo stesso oggetto finché non <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>viene chiamato.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>imposta <xref:System.Collections.IEnumerator.Current%2A>all&quot;elemento successivo.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>raggiunge la fine della raccolta, l&quot;enumeratore è posizionato dopo l&quot;ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A>restituisce `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando l&quot;enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A>restituire anche `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se l&quot;ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>restituito `false`, <xref:System.Collections.IEnumerator.Current%2A>è definito.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Per impostare <xref:System.Collections.IEnumerator.Current%2A>il primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A>seguito dal <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l&quot;enumeratore viene invalidato e il relativo comportamento sarà indefinito.       L&quot;enumeratore non dispone di accesso esclusivo alla raccolta. Pertanto, l&quot;enumerazione di una raccolta non è quindi una procedura thread-safe.  Per garantire la protezione dei thread durante l&quot;enumerazione, è possibile bloccare la raccolta per l&quot;intera enumerazione.  Per consentire la raccolta a cui accedere da più thread per la lettura e scrittura, è necessario implementare la propria sincronizzazione."
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/m-system.collections.spe_15_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/m-system.collections.spe_15_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/m-system.collections.spe_15_1.vb)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "Un <xref:System.Collections.IDictionaryEnumerator>per l&quot;intero <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> insieme.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Specialized.IOrderedDictionary.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  id: Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: Insert(Int32,Object,Object)
  nameWithType: IOrderedDictionary.Insert(Int32,Object,Object)
  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(Int32,Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Inserisce una coppia chiave/valore nella raccolta in corrispondenza dell&quot;indice specificato."
  remarks: "<xref:System.Collections.Specialized.IOrderedDictionary>accetta `null` come un valore valido e consente elementi duplicati.</xref:System.Collections.Specialized.IOrderedDictionary>       Se il `index` parametro è uguale a <xref:System.Collections.ICollection.Count%2A>, `value` parametro viene aggiunto alla fine del <xref:System.Collections.Specialized.IOrderedDictionary>insieme.</xref:System.Collections.Specialized.IOrderedDictionary> </xref:System.Collections.ICollection.Count%2A>       In raccolte di elementi adiacenti, quali gli elenchi, gli elementi successivi al punto di inserimento vengono spostati verso il basso per consentire l&quot;inserimento del nuovo elemento. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente, ad esempio una tabella hash."
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/36355794-2a11-4b04-824e-_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/36355794-2a11-4b04-824e-_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/36355794-2a11-4b04-824e-_1.vb)]"
  syntax:
    content: public void Insert (int index, object key, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero in corrispondenza del quale deve essere inserita la coppia chiave/valore."
    - id: key
      type: System.Object
      description: "Oggetto da utilizzare come chiave dell&quot;elemento da aggiungere."
    - id: value
      type: System.Object
      description: "Oggetto da utilizzare come valore dell&quot;elemento da aggiungere.  Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.IOrderedDictionary.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di 0.       - oppure - <code>index</code> è maggiore di <xref:System.Collections.ICollection.Count*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Un elemento con la stessa chiave esiste già nel <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> insieme."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> raccolta è di sola lettura.       - o - <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> raccolta ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: IOrderedDictionary.Item(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.Item(Int32)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Ottiene o imposta l&quot;elemento in corrispondenza dell&quot;indice specificato."
  remarks: "<xref:System.Collections.Specialized.IOrderedDictionary>accetta `null` come un valore valido e consente elementi duplicati.</xref:System.Collections.Specialized.IOrderedDictionary>       Nel linguaggio c# viene utilizzata la parola chiave per definire gli indicizzatori anziché implementare la proprietà dell&quot;elemento. Visual Basic implementa elemento come una proprietà predefinita, che fornisce la stessa funzionalità di indicizzazione.       Questa proprietà consente di accedere a un elemento specifico nella raccolta utilizzando la sintassi seguente: [!code-cs [System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/csharp/p-system.collections.spe_12_1.cs)][!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/cpp/p-system.collections.spe_12_1.cpp)][!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#04    ](~/add/codesnippet/visualbasic/p-system.collections.spe_12_1.vb)]"
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/p-system.collections.spe_12_2.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/p-system.collections.spe_12_2.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/p-system.collections.spe_12_2.vb)]"
  syntax:
    content: public object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero dell&quot;elemento da ottenere o impostare."
    return:
      type: System.Object
      description: "L&quot;elemento in corrispondenza dell&quot;indice specificato."
  overload: System.Collections.Specialized.IOrderedDictionary.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di 0.       - oppure - <code>index</code> è maggiore o uguale a <xref:System.Collections.ICollection.Count*>."
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: IOrderedDictionary.RemoveAt(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Rimuove l&quot;elemento in corrispondenza dell&quot;indice specificato."
  remarks: "In raccolte di elementi adiacenti, quali gli elenchi, gli elementi che seguono l&quot;elemento rimosso Sposta su per occupare la posizione rimasta vuota. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente, ad esempio una tabella hash."
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/m-system.collections.spe_23_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/m-system.collections.spe_23_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/m-system.collections.spe_23_1.vb)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero dell&quot;elemento da rimuovere."
  overload: System.Collections.Specialized.IOrderedDictionary.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di 0.       - oppure - <code>index</code> è maggiore o uguale a <xref:System.Collections.ICollection.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> raccolta è di sola lettura.       - o - <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref> raccolta ha dimensioni fisse."
  platform:
  - net462
references:
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: GetEnumerator()
  nameWithType: IOrderedDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Insert(Int32,Object,Object)
  nameWithType: IOrderedDictionary.Insert(Int32,Object,Object)
  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(Int32,Object,Object)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Item(Int32)
  nameWithType: IOrderedDictionary.Item(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.Item(Int32)
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: IOrderedDictionary.RemoveAt(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32)
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: GetEnumerator
  nameWithType: IOrderedDictionary.GetEnumerator
- uid: System.Collections.Specialized.IOrderedDictionary.Insert*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Insert
  nameWithType: IOrderedDictionary.Insert
- uid: System.Collections.Specialized.IOrderedDictionary.Item*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Item
  nameWithType: IOrderedDictionary.Item
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: RemoveAt
  nameWithType: IOrderedDictionary.RemoveAt
