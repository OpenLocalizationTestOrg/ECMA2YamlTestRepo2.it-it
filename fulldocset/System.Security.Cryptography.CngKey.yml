### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CngKey
  id: CngKey
  children:
  - System.Security.Cryptography.CngKey.Algorithm
  - System.Security.Cryptography.CngKey.AlgorithmGroup
  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)
  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)
  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  - System.Security.Cryptography.CngKey.Delete
  - System.Security.Cryptography.CngKey.Dispose
  - System.Security.Cryptography.CngKey.Exists(System.String)
  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  - System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)
  - System.Security.Cryptography.CngKey.ExportPolicy
  - System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  - System.Security.Cryptography.CngKey.Handle
  - System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngKey.IsEphemeral
  - System.Security.Cryptography.CngKey.IsMachineKey
  - System.Security.Cryptography.CngKey.KeyName
  - System.Security.Cryptography.CngKey.KeySize
  - System.Security.Cryptography.CngKey.KeyUsage
  - System.Security.Cryptography.CngKey.Open(System.String)
  - System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  - System.Security.Cryptography.CngKey.ParentWindowHandle
  - System.Security.Cryptography.CngKey.Provider
  - System.Security.Cryptography.CngKey.ProviderHandle
  - System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)
  - System.Security.Cryptography.CngKey.UIPolicy
  - System.Security.Cryptography.CngKey.UniqueName
  langs:
  - csharp
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
  type: Class
  summary: "Definisce le funzionalità di base per le chiavi utilizzate con gli oggetti Cryptography Next Generation (CNG)."
  remarks: "Questa classe esegue il wrapping delle chiavi NCrypt, non delle chiavi BCrypt. NCrypt è un subset di CNG che fornisce funzionalità di archiviazione chiavi. BCrypt è un subset che fornisce servizi di crittografia di base, ad esempio la generazione di numeri caso, funzioni hash, le firme e le chiavi di crittografia."
  syntax:
    content: 'public sealed class CngKey : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Algorithm
  id: Algorithm
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Algorithm
  nameWithType: CngKey.Algorithm
  fullName: System.Security.Cryptography.CngKey.Algorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene l&quot;algoritmo utilizzato per la chiave."
  syntax:
    content: public System.Security.Cryptography.CngAlgorithm Algorithm { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "Oggetto che specifica il nome di un algoritmo di crittografia."
  overload: System.Security.Cryptography.CngKey.Algorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.AlgorithmGroup
  id: AlgorithmGroup
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: AlgorithmGroup
  nameWithType: CngKey.AlgorithmGroup
  fullName: System.Security.Cryptography.CngKey.AlgorithmGroup
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene il gruppo di algoritmi che è utilizzato dalla chiave."
  syntax:
    content: public System.Security.Cryptography.CngAlgorithmGroup AlgorithmGroup { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "Oggetto che specifica il nome di un gruppo di algoritmi di crittografia."
  overload: System.Security.Cryptography.CngKey.AlgorithmGroup*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)
  id: Create(System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Create(CngAlgorithm)
  nameWithType: CngKey.Create(CngAlgorithm)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Crea un <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> oggetto che può essere usato con l&quot;algoritmo specificato."
  remarks: "Questo overload crea una chiave senza un nome, il che significa che la chiave è temporanea (vale a dire non sarà persistente). Crea anche un valore predefinito <xref:System.Security.Cryptography.CngKeyCreationParameters>oggetto che specifica un valore predefinito <xref:System.Security.Cryptography.CngProvider>e altri parametri avanzati per la chiave.</xref:System.Security.Cryptography.CngProvider> </xref:System.Security.Cryptography.CngKeyCreationParameters>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm);
    parameters:
    - id: algorithm
      type: System.Security.Cryptography.CngAlgorithm
      description: "L&quot;algoritmo utilizzato con la chiave."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Una chiave temporanea."
  overload: System.Security.Cryptography.CngKey.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>algorithm</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)
  id: Create(System.Security.Cryptography.CngAlgorithm,System.String)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Create(CngAlgorithm,String)
  nameWithType: CngKey.Create(CngAlgorithm,String)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Crea un oggetto denominato <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> oggetto che fornisce l&quot;algoritmo specificato."
  remarks: "Se `keyName` viene fornito, questo overload crea una chiave persistente. Se `keyName` non viene fornito, la chiave sarà temporanea. Questo overload crea anche un valore predefinito <xref:System.Security.Cryptography.CngKeyCreationParameters>oggetto che specifica un valore predefinito <xref:System.Security.Cryptography.CngProvider>e altri parametri avanzati per la chiave.</xref:System.Security.Cryptography.CngProvider> </xref:System.Security.Cryptography.CngKeyCreationParameters>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm, string keyName);
    parameters:
    - id: algorithm
      type: System.Security.Cryptography.CngAlgorithm
      description: "L&quot;algoritmo utilizzato con la chiave."
    - id: keyName
      type: System.String
      description: "Il nome della chiave. Se non è stato specificato un nome, la chiave non verrà resi persistenti."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Tasto permanente o temporaneo che fornisce l&quot;algoritmo specificato."
  overload: System.Security.Cryptography.CngKey.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>algorithm</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  id: Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Create(CngAlgorithm,String,CngKeyCreationParameters)
  nameWithType: CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Crea un oggetto denominato <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> oggetto che fornisce l&quot;algoritmo specificato, utilizzando i parametri di creazione della chiave specificato."
  remarks: "Se `keyName` viene fornito, questo overload crea una chiave persistente. Se `keyName` non viene fornito, la chiave sarà temporanea."
  syntax:
    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm, string keyName, System.Security.Cryptography.CngKeyCreationParameters creationParameters);
    parameters:
    - id: algorithm
      type: System.Security.Cryptography.CngAlgorithm
      description: "L&quot;algoritmo utilizzato con la chiave."
    - id: keyName
      type: System.String
      description: "Il nome della chiave. Se non è stato specificato un nome, la chiave non verrà resi persistenti."
    - id: creationParameters
      type: System.Security.Cryptography.CngKeyCreationParameters
      description: "Oggetto che specifica i parametri avanzati per il metodo, inclusi il <xref href=&quot;System.Security.Cryptography.CngProvider&quot;> </xref>."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Tasto permanente o temporaneo che fornisce l&quot;algoritmo specificato."
  overload: System.Security.Cryptography.CngKey.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>algorithm</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Delete
  id: Delete
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Delete()
  nameWithType: CngKey.Delete()
  fullName: System.Security.Cryptography.CngKey.Delete()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Rimuove la chiave associata all&quot;oggetto."
  remarks: "-   Quando si chiama il metodo Delete su una chiave temporanea, l&quot;handle per la chiave viene chiuso.       Quando si chiama il metodo Delete su una chiave denominata, il <xref:System.Security.Cryptography.CngKey>oggetto non può più essere utilizzato dopo l&quot;eliminazione di una chiave denominata.</xref:System.Security.Cryptography.CngKey>"
  syntax:
    content: public void Delete ();
    parameters: []
  overload: System.Security.Cryptography.CngKey.Delete*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "È stato effettuato un tentativo di accedere a una chiave eliminata."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Dispose
  id: Dispose
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Dispose()
  nameWithType: CngKey.Dispose()
  fullName: System.Security.Cryptography.CngKey.Dispose()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Rilascia tutte le risorse usate dall&quot;istanza corrente del <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> classe."
  remarks: "Chiamare Dispose dopo aver terminato di utilizzare <xref:System.Security.Cryptography.CngKey>.</xref:System.Security.Cryptography.CngKey> Il metodo Dispose lascia il <xref:System.Security.Cryptography.CngKey>in uno stato inutilizzabile.</xref:System.Security.Cryptography.CngKey> Dopo aver chiamato Dispose, è necessario rilasciare tutti i riferimenti al <xref:System.Security.Cryptography.CngKey>in modo che il garbage collector può recuperare la memoria che di <xref:System.Security.Cryptography.CngKey>occupata.</xref:System.Security.Cryptography.CngKey> </xref:System.Security.Cryptography.CngKey> Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md) e [implementazione di un metodo Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Chiamare sempre Dispose prima di rilasciare l&quot;ultimo riferimento a <xref:System.Security.Cryptography.CngKey>.</xref:System.Security.Cryptography.CngKey> In caso contrario, le risorse non vengono liberate finché il garbage collector chiama la <xref:System.Security.Cryptography.CngKey>dell&quot;oggetto `Finalize` metodo.</xref:System.Security.Cryptography.CngKey>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.CngKey.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Exists(System.String)
  id: Exists(System.String)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Exists(String)
  nameWithType: CngKey.Exists(String)
  fullName: System.Security.Cryptography.CngKey.Exists(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Controlla se una chiave denominata esiste nel provider di archiviazione chiavi (KSP) predefinito."
  remarks: "Il valore predefinito KSP è <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>"
  syntax:
    content: public static bool Exists (string keyName);
    parameters:
    - id: keyName
      type: System.String
      description: "Il nome della chiave."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la chiave denominata esiste nel KSP predefinito; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)
  id: Exists(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Exists(String,CngProvider)
  nameWithType: CngKey.Exists(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Controlla se una chiave denominata esiste nel provider specificato di archiviazione chiavi (KSP)."
  remarks: "Utilizzare questo overload per verificare l&quot;esistenza di una chiave in un KSP diverso da quello predefinito, ovvero <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>"
  syntax:
    content: public static bool Exists (string keyName, System.Security.Cryptography.CngProvider provider);
    parameters:
    - id: keyName
      type: System.String
      description: "Il nome della chiave."
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "Il provider di archiviazione CHIAVI per cercare la chiave."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la chiave denominata esiste nel provider specificato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  id: Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Exists(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Controlla se una chiave denominata esiste nel provider specificato di archiviazione chiavi (KSP), in base alle opzioni specificate."
  remarks: "Utilizzare questo overload per verificare l&quot;esistenza di una chiave in un KSP diverso da quello predefinito <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>e per specificare le opzioni di apertura.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>"
  syntax:
    content: public static bool Exists (string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions options);
    parameters:
    - id: keyName
      type: System.String
      description: "Il nome della chiave."
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "Il provider di archiviazione CHIAVI per cercare la chiave."
    - id: options
      type: System.Security.Cryptography.CngKeyOpenOptions
      description: "Combinazione bit per bit dei valori di enumerazione che specificano le opzioni per l&quot;apertura di una chiave."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la chiave denominata esiste nel provider specificato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)
  id: Export(System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Export(CngKeyBlobFormat)
  nameWithType: CngKey.Export(CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Esporta il materiale della chiave in un BLOB, nel formato specificato."
  remarks: "Cryptography Next Generation (CNG) permette di esportare in qualsiasi formato che supporta il provider di archiviazione chiavi (KSP) sottostante. Ad esempio, in Windows Vista, il valore predefinito, provider di archiviazione CHIAVI (ovvero <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>) consente solo l&quot;esportazione delle chiavi private nel <xref:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob%2A>, <xref:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob%2A>, e <xref:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob%2A>formati.</xref:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob%2A> </xref:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob%2A> </xref:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob%2A> </xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> Questa restrizione è controllata dal KSP sottostante. Se si utilizza un KSP diverso, è possibile applicare altri formati."
  syntax:
    content: public byte[] Export (System.Security.Cryptography.CngKeyBlobFormat format);
    parameters:
    - id: format
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "Oggetto che specifica il formato del BLOB della chiave."
    return:
      type: System.Byte[]
      description: "Un BLOB che contiene il materiale della chiave nel formato specificato."
  overload: System.Security.Cryptography.CngKey.Export*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori. In genere, il <xref:System.Security.Cryptography.CngKey.ExportPolicy*>non consente l&quot;esportazione della chiave.</xref:System.Security.Cryptography.CngKey.ExportPolicy*>"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.ExportPolicy
  id: ExportPolicy
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: ExportPolicy
  nameWithType: CngKey.ExportPolicy
  fullName: System.Security.Cryptography.CngKey.ExportPolicy
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene i criteri di esportazione che vengano utilizzato dalla chiave."
  remarks: "L&quot;esportazione di criteri controlla la frequenza di esportazione e il formato per la chiave."
  syntax:
    content: public System.Security.Cryptography.CngExportPolicies ExportPolicy { get; }
    return:
      type: System.Security.Cryptography.CngExportPolicies
      description: "Oggetto che specifica i criteri di esportazione della chiave."
  overload: System.Security.Cryptography.CngKey.ExportPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  id: GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: GetProperty(String,CngPropertyOptions)
  nameWithType: CngKey.GetProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.GetProperty(String,CngPropertyOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene una proprietà, dato un nome e un set di opzioni di proprietà."
  remarks: "Lo scopo di questo metodo è per restituire il valore di una proprietà della chiave arbitraria. È il modo consueto per recuperare le proprietà tramite le funzioni di accesso della proprietà fornite dalla <xref:System.Security.Cryptography.CngKey>classe.</xref:System.Security.Cryptography.CngKey> <xref:System.Security.Cryptography.CngKey>sono disponibili wrapper per molte proprietà, ma non tutte.</xref:System.Security.Cryptography.CngKey> Metodo GetProperty viene principalmente utilizzato per accedere al valore di una proprietà che non è stato eseguito il wrapping.       Questo metodo è utile nei casi seguenti:-una nuova versione del sistema operativo supporta una nuova proprietà di chiave Cryptography Next Generation (CNG) che non dispone di un wrapper.      -Aggiungere una proprietà personalizzata per la chiave.       Il `options` parametro viene utilizzato in particolare per indicare le operazioni seguenti: - indica se la proprietà è incorporato o personalizzato.      -Se la proprietà deve essere mantenuta con la chiave.       Queste opzioni devono corrispondere al valore con cui è stata impostata la proprietà o la proprietà non verrà trovata.       <xref:System.Security.Cryptography.CryptographicException>viene generata se la proprietà non viene trovata.</xref:System.Security.Cryptography.CryptographicException> È necessario chiamare il <xref:System.Security.Cryptography.CngKey.HasProperty%2A>chiamata al metodo per evitare l&quot;eccezione anziché il metodo di wrapping un `try/catch` blocco.</xref:System.Security.Cryptography.CngKey.HasProperty%2A>"
  syntax:
    content: public System.Security.Cryptography.CngProperty GetProperty (string name, System.Security.Cryptography.CngPropertyOptions options);
    parameters:
    - id: name
      type: System.String
      description: "Il nome della proprietà desiderata."
    - id: options
      type: System.Security.Cryptography.CngPropertyOptions
      description: "Combinazione bit per bit dei valori di enumerazione che specificano le opzioni per la proprietà denominata."
    return:
      type: System.Security.Cryptography.CngProperty
      description: "Oggetto che contiene il valore non elaborato della proprietà specificata."
  overload: System.Security.Cryptography.CngKey.GetProperty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Handle
  id: Handle
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Handle
  nameWithType: CngKey.Handle
  fullName: System.Security.Cryptography.CngKey.Handle
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene un handle safe che rappresenta una chiave nativa (NCRYPT_KEY_HANDLE)."
  remarks: "L&quot;handle restituito è un duplicato dell&quot;handle nell&quot;attuale <xref:System.Security.Cryptography.CngKey>oggetto.</xref:System.Security.Cryptography.CngKey> In verranno mantenuti anche se l&quot;oggetto corrente <xref:System.Security.Cryptography.CngKey>viene eliminato e deve essere eliminata separatamente.</xref:System.Security.Cryptography.CngKey>       È possibile rilasciare l&quot;oggetto corrente e l&quot;handle in qualsiasi ordine senza effetti negativi."
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle Handle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
      description: "Un handle safe che rappresenta la chiave."
  overload: System.Security.Cryptography.CngKey.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  id: HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: HasProperty(String,CngPropertyOptions)
  nameWithType: CngKey.HasProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.HasProperty(String,CngPropertyOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Controlla se la proprietà specificata è presente la chiave."
  remarks: "Il `options` parametro viene utilizzato in particolare per indicare le operazioni seguenti: - indica se la proprietà è incorporato o personalizzato.      -Se la proprietà deve essere mantenuta con la chiave.       Queste opzioni devono corrispondere al valore con cui è stata impostata la proprietà o la proprietà non verrà trovata.       Questo metodo funziona in modo corretto anche se la proprietà è impostata su `false` o zero."
  syntax:
    content: public bool HasProperty (string name, System.Security.Cryptography.CngPropertyOptions options);
    parameters:
    - id: name
      type: System.String
      description: "Il nome della proprietà da controllare."
    - id: options
      type: System.Security.Cryptography.CngPropertyOptions
      description: "Combinazione bit per bit dei valori di enumerazione che specificano le opzioni per la proprietà denominata."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la proprietà specificata viene trovata; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.HasProperty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Import(Byte[],CngKeyBlobFormat)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Crea una chiave nuova importando il materiale della chiave specificato nel provider di archiviazione chiavi (KSP) predefinito e utilizzando il formato specificato."
  remarks: "Il valore predefinito KSP è <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>      > [!IMPORTANT] > Su sistemi operativi Windows prima di Windows 7 e Windows Server 2008 R2, alcuni formati CNG chiave oggetto binario di grandi dimensioni (BLOB) non sono supportati."
  syntax:
    content: public static System.Security.Cryptography.CngKey Import (byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format);
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "Matrice che contiene le informazioni sulla chiave."
    - id: format
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "Oggetto che specifica il formato del `keyBlob` matrice."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Una nuova chiave."
  overload: System.Security.Cryptography.CngKey.Import*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyBlob</code>or <code>format</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Import(Byte[],CngKeyBlobFormat,CngProvider)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Crea una chiave nuova importando il materiale della chiave specificato nel provider di archiviazione chiavi (KSP), usando il formato specificato."
  remarks: >-
    > [!IMPORTANT]

    >  On Windows operating systems before Windows 7 and Windows Server 2008 R2, some CNG key binary large object (BLOB) formats are not supported.
  syntax:
    content: public static System.Security.Cryptography.CngKey Import (byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format, System.Security.Cryptography.CngProvider provider);
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "Matrice che contiene le informazioni sulla chiave."
    - id: format
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "Oggetto che specifica il formato del `keyBlob` matrice."
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "Il provider di archiviazione CHIAVI."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Una nuova chiave."
  overload: System.Security.Cryptography.CngKey.Import*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyBlob</code>, <code>format</code>, or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.IsEphemeral
  id: IsEphemeral
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: IsEphemeral
  nameWithType: CngKey.IsEphemeral
  fullName: System.Security.Cryptography.CngKey.IsEphemeral
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene lo stato di persistenza della chiave."
  remarks: "Questa proprietà determina se la chiave è temporanea (ovvero, la chiave esiste solo per la durata dell&quot;handle), o persistente (ovvero, la chiave esiste in modo indipendente da handle).       Il valore restituito dipende dal metodo utilizzato per ottenere la chiave:: se la chiave non è stato aperto per la <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29>overload del metodo, common language runtime (CLR) gestisce la chiave e può determinare se è temporaneo.</xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29>      -Se la chiave è stata aperta la <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29>overload del metodo, CLR non è possibile determinare se è temporaneo.</xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29> Pertanto, la chiave viene considerato come persistenti. Tuttavia, se questo metodo viene utilizzato per aprire un handle a una chiave che viene creato da CLR, Common Language Runtime sarà in grado di determinare se è temporaneo.       Questa proprietà non dispone di un setter pubblico; è di sola lettura."
  syntax:
    content: public bool IsEphemeral { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la chiave è effimera; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.IsEphemeral*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.IsMachineKey
  id: IsMachineKey
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: IsMachineKey
  nameWithType: CngKey.IsMachineKey
  fullName: System.Security.Cryptography.CngKey.IsMachineKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene l&quot;ambito (computer o utente) della chiave."
  syntax:
    content: public bool IsMachineKey { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la chiave è disponibile un livello di computer <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se la chiave è solo per l&quot;utente corrente."
  overload: System.Security.Cryptography.CngKey.IsMachineKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.KeyName
  id: KeyName
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: KeyName
  nameWithType: CngKey.KeyName
  fullName: System.Security.Cryptography.CngKey.KeyName
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene il nome della chiave."
  syntax:
    content: public string KeyName { get; }
    return:
      type: System.String
      description: "Il nome della chiave. Se la chiave è temporanea, il valore è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.KeyName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.KeySize
  id: KeySize
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: KeySize
  nameWithType: CngKey.KeySize
  fullName: System.Security.Cryptography.CngKey.KeySize
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene la dimensione della chiave in bit."
  syntax:
    content: public int KeySize { get; }
    return:
      type: System.Int32
      description: "Dimensione in bit della chiave."
  overload: System.Security.Cryptography.CngKey.KeySize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.KeyUsage
  id: KeyUsage
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: KeyUsage
  nameWithType: CngKey.KeyUsage
  fullName: System.Security.Cryptography.CngKey.KeyUsage
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene le operazioni di crittografia specificate dalla chiave."
  syntax:
    content: public System.Security.Cryptography.CngKeyUsages KeyUsage { get; }
    return:
      type: System.Security.Cryptography.CngKeyUsages
      description: "Combinazione bit per bit dei valori di enumerazione che specificano gli utilizzi consentiti per la chiave."
  overload: System.Security.Cryptography.CngKey.KeyUsage*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(System.String)
  id: Open(System.String)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(String)
  nameWithType: CngKey.Open(String)
  fullName: System.Security.Cryptography.CngKey.Open(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Crea un&quot;istanza di un <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> chiave denominata che rappresenta un oggetto esistente."
  remarks: "Questo overload utilizza i valori predefiniti seguenti:-il provider di archiviazione chiavi (KSP): <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> Utilizzare il <xref:System.Security.Cryptography.CngKey.Open%28System.String%2CSystem.Security.Cryptography.CngProvider%29>overload se si desidera specificare un altro provider di archiviazione CHIAVI.</xref:System.Security.Cryptography.CngKey.Open%28System.String%2CSystem.Security.Cryptography.CngProvider%29>      -Opzioni di apertura chiave: <xref:System.Security.Cryptography.CngKeyOpenOptions?displayProperty=fullName>.</xref:System.Security.Cryptography.CngKeyOpenOptions?displayProperty=fullName>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (string keyName);
    parameters:
    - id: keyName
      type: System.String
      description: "Il nome della chiave."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Una chiave esistente."
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  id: Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  nameWithType: CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Crea un&quot;istanza di un <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> oggetto utilizzando un handle a una chiave esistente."
  remarks: "Questo overload consente agli utenti esperti di utilizzare che le classi CNG anche se si basano sulla piattaforma PInvoke o la funzionalità di interoperabilità gestita di C++. Ad esempio, se si dispone di una libreria nativa che restituisce la chiave come NCRYPT_KEY_HANDLE, questo overload consente di creare un wrapper gestito per la chiave e utilizzare le classi CNG di modificarla.       Quando si apre una chiave utilizzando il relativo handle, è possibile determinare lo stato temporaneo della chiave e necessario specificarlo. Diverse proprietà di <xref:System.Security.Cryptography.CngKey>classe si basano su questo valore sia corretto.</xref:System.Security.Cryptography.CngKey> Pertanto, assicurarsi che si passa il valore del flag corretti per il <xref:System.Security.Cryptography.CngKey.Open%2A>metodi.</xref:System.Security.Cryptography.CngKey.Open%2A>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle keyHandle, System.Security.Cryptography.CngKeyHandleOpenOptions keyHandleOpenOptions);
    parameters:
    - id: keyHandle
      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
      description: "Handle per una chiave esistente."
    - id: keyHandleOpenOptions
      type: System.Security.Cryptography.CngKeyHandleOpenOptions
      description: "Uno dei valori di enumerazione che indica se `keyHandle` rappresenta una chiave temporanea o una chiave denominata."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Una chiave esistente."
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyHandle</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyHandle</code>non è valido o non valido, oppure è già chiuso. Questa eccezione viene generata anche se la chiave è una chiave temporanea che viene creata da common language runtime (CLR), ma la <xref href=&quot;System.Security.Cryptography.CngKeyHandleOpenOptions&quot;> </xref> valore non è specificato."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)
  id: Open(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(String,CngProvider)
  nameWithType: CngKey.Open(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Crea un&quot;istanza di un <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> oggetto che rappresenta un oggetto esistente denominato chiave utilizzando il provider specificato di archiviazione chiavi (KSP)."
  remarks: "A differenza di <xref:System.Security.Cryptography.CngKey.Open%28System.String%29>overload del metodo, questo overload consente di specificare il provider.</xref:System.Security.Cryptography.CngKey.Open%28System.String%29> Inoltre, un valore predefinito <xref:System.Security.Cryptography.CngKeyOpenOptions>valore <xref:System.Security.Cryptography.CngKeyOpenOptions>viene creato e associato alla chiave.</xref:System.Security.Cryptography.CngKeyOpenOptions> </xref:System.Security.Cryptography.CngKeyOpenOptions>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (string keyName, System.Security.Cryptography.CngProvider provider);
    parameters:
    - id: keyName
      type: System.String
      description: "Il nome della chiave."
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "Il provider di archiviazione CHIAVI contenente la chiave."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Una chiave esistente."
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  id: Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Open(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider,CngKeyOpenOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Crea un&quot;istanza di un <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> oggetto che rappresenta un oggetto esistente denominato chiave utilizzando il provider di archiviazione (chiavi KSP) e le opzioni di apertura."
  remarks: "A differenza di <xref:System.Security.Cryptography.CngKey.Open%28System.String%29>overload del metodo, questo overload consente di specificare il provider e la chiave di opzioni di apertura.</xref:System.Security.Cryptography.CngKey.Open%28System.String%29>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions openOptions);
    parameters:
    - id: keyName
      type: System.String
      description: "Il nome della chiave."
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "Il provider di archiviazione CHIAVI contenente la chiave."
    - id: openOptions
      type: System.Security.Cryptography.CngKeyOpenOptions
      description: "Combinazione bit per bit dei valori di enumerazione che specificano le opzioni per l&quot;apertura della chiave, ad esempio in cui la chiave è aperta dal (archivio computer o utente) e se eliminare i prompt dell&quot;interfaccia utente."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Una chiave esistente."
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Cryptography Next Generation (CNG) non è supportata nel sistema."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Tutti gli altri errori."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.ParentWindowHandle
  id: ParentWindowHandle
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: ParentWindowHandle
  nameWithType: CngKey.ParentWindowHandle
  fullName: System.Security.Cryptography.CngKey.ParentWindowHandle
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene o imposta l&quot;handle di finestra (HWND) che deve essere utilizzato per le richieste dell&quot;interfaccia utente causate dall&quot;accesso alla chiave."
  remarks: "Handle della finestra padre per la chiave viene utilizzato nei prompt dell&quot;interfaccia utente, ad esempio smart card PIN viene richiesto. Questo valore non è persistente con le chiavi persistenti.       È consigliabile impostare sempre questa proprietà per le chiavi che visualizzano un&quot;interfaccia utente. Non utilizzare il valore predefinito di `null` per tali chiavi."
  syntax:
    content: public IntPtr ParentWindowHandle { get; set; }
    return:
      type: System.IntPtr
      description: "Handle della finestra padre per la chiave."
  overload: System.Security.Cryptography.CngKey.ParentWindowHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Provider
  id: Provider
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Provider
  nameWithType: CngKey.Provider
  fullName: System.Security.Cryptography.CngKey.Provider
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene il provider di archiviazione chiavi (KSP) che gestisce la chiave."
  syntax:
    content: public System.Security.Cryptography.CngProvider Provider { get; }
    return:
      type: System.Security.Cryptography.CngProvider
      description: "Il provider di archiviazione CHIAVI che gestisce la chiave."
  overload: System.Security.Cryptography.CngKey.Provider*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.ProviderHandle
  id: ProviderHandle
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: ProviderHandle
  nameWithType: CngKey.ProviderHandle
  fullName: System.Security.Cryptography.CngKey.ProviderHandle
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene un handle nativo (NCRYPT_PROV_HANDLE) per il provider di archiviazione chiavi (KSP)."
  remarks: "L&quot;handle restituito è un duplicato dell&quot;handle nell&quot;attuale <xref:System.Security.Cryptography.CngKey>oggetto.</xref:System.Security.Cryptography.CngKey> In verranno mantenuti anche se l&quot;oggetto corrente <xref:System.Security.Cryptography.CngKey>viene eliminato e deve essere eliminata separatamente.</xref:System.Security.Cryptography.CngKey>       È possibile rilasciare l&quot;oggetto corrente e l&quot;handle in qualsiasi ordine senza effetti negativi."
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle ProviderHandle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle
      description: "Handle per il provider di archiviazione CHIAVI."
  overload: System.Security.Cryptography.CngKey.ProviderHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)
  id: SetProperty(System.Security.Cryptography.CngProperty)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: SetProperty(CngProperty)
  nameWithType: CngKey.SetProperty(CngProperty)
  fullName: System.Security.Cryptography.CngKey.SetProperty(CngProperty)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Imposta una proprietà denominata nella chiave."
  remarks: "Questo metodo consente di aggiungere una nuova proprietà personalizzata a una chiave esistente utilizzando un <xref:System.Security.Cryptography.CngProperty>oggetto.</xref:System.Security.Cryptography.CngProperty> Le opzioni impostate nel <xref:System.Security.Cryptography.CngProperty>oggetto deve corrispondere esattamente le opzioni il <xref:System.Security.Cryptography.CngKey.GetProperty%2A>chiamare.</xref:System.Security.Cryptography.CngKey.GetProperty%2A> </xref:System.Security.Cryptography.CngProperty> In caso contrario, la proprietà non troverà."
  syntax:
    content: public void SetProperty (System.Security.Cryptography.CngProperty property);
    parameters:
    - id: property
      type: System.Security.Cryptography.CngProperty
      description: "Proprietà della chiave da impostare."
  overload: System.Security.Cryptography.CngKey.SetProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.UIPolicy
  id: UIPolicy
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: UIPolicy
  nameWithType: CngKey.UIPolicy
  fullName: System.Security.Cryptography.CngKey.UIPolicy
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene i parametri che controllano l&quot;interfaccia utente (UI) per l&quot;accesso alla chiave."
  remarks: "I criteri dell&quot;interfaccia utente di chiave viene utilizzato con interfaccia utente viene richiesto, ad esempio smart card PIN richiesto. Questo criterio controlla inoltre le finestre di dialogo password per le chiavi protette."
  syntax:
    content: public System.Security.Cryptography.CngUIPolicy UIPolicy { get; }
    return:
      type: System.Security.Cryptography.CngUIPolicy
      description: "Oggetto che contiene i parametri di configurazione per la visualizzazione dell&quot;interfaccia utente."
  overload: System.Security.Cryptography.CngKey.UIPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.UniqueName
  id: UniqueName
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: UniqueName
  nameWithType: CngKey.UniqueName
  fullName: System.Security.Cryptography.CngKey.UniqueName
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Ottiene il nome univoco per la chiave."
  remarks: "Questa proprietà ottiene un nome alternativo che può essere utilizzato quando l&quot;accesso alla chiave. È possibile utilizzare questa proprietà se il nome della chiave originale non identifica in modo univoco la chiave persistente. Il <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>proprietà restituirà il nome del file della chiave di questa proprietà.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> Il nome restituito dal <xref:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider%2A>dipende dall&quot;implementazione.</xref:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider%2A>"
  syntax:
    content: public string UniqueName { get; }
    return:
      type: System.String
      description: "Un nome alternativo per la chiave. Se la chiave è temporanea, il valore è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.UniqueName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.CngKey.Algorithm
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Algorithm
  nameWithType: CngKey.Algorithm
  fullName: System.Security.Cryptography.CngKey.Algorithm
- uid: System.Security.Cryptography.CngAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithm
  nameWithType: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
- uid: System.Security.Cryptography.CngKey.AlgorithmGroup
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: AlgorithmGroup
  nameWithType: CngKey.AlgorithmGroup
  fullName: System.Security.Cryptography.CngKey.AlgorithmGroup
- uid: System.Security.Cryptography.CngAlgorithmGroup
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithmGroup
  nameWithType: CngAlgorithmGroup
  fullName: System.Security.Cryptography.CngAlgorithmGroup
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create(CngAlgorithm)
  nameWithType: CngKey.Create(CngAlgorithm)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm)
- uid: System.Security.Cryptography.CngKey
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create(CngAlgorithm,String)
  nameWithType: CngKey.Create(CngAlgorithm,String)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create(CngAlgorithm,String,CngKeyCreationParameters)
  nameWithType: CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
- uid: System.Security.Cryptography.CngKeyCreationParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyCreationParameters
  nameWithType: CngKeyCreationParameters
  fullName: System.Security.Cryptography.CngKeyCreationParameters
- uid: System.Security.Cryptography.CngKey.Delete
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Delete()
  nameWithType: CngKey.Delete()
  fullName: System.Security.Cryptography.CngKey.Delete()
- uid: System.Security.Cryptography.CngKey.Dispose
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Dispose()
  nameWithType: CngKey.Dispose()
  fullName: System.Security.Cryptography.CngKey.Dispose()
- uid: System.Security.Cryptography.CngKey.Exists(System.String)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists(String)
  nameWithType: CngKey.Exists(String)
  fullName: System.Security.Cryptography.CngKey.Exists(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists(String,CngProvider)
  nameWithType: CngKey.Exists(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider)
- uid: System.Security.Cryptography.CngProvider
  parent: System.Security.Cryptography
  isExternal: false
  name: CngProvider
  nameWithType: CngProvider
  fullName: System.Security.Cryptography.CngProvider
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
- uid: System.Security.Cryptography.CngKeyOpenOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyOpenOptions
  nameWithType: CngKeyOpenOptions
  fullName: System.Security.Cryptography.CngKeyOpenOptions
- uid: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Export(CngKeyBlobFormat)
  nameWithType: CngKey.Export(CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CngKeyBlobFormat
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyBlobFormat
  nameWithType: CngKeyBlobFormat
  fullName: System.Security.Cryptography.CngKeyBlobFormat
- uid: System.Security.Cryptography.CngKey.ExportPolicy
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ExportPolicy
  nameWithType: CngKey.ExportPolicy
  fullName: System.Security.Cryptography.CngKey.ExportPolicy
- uid: System.Security.Cryptography.CngExportPolicies
  parent: System.Security.Cryptography
  isExternal: false
  name: CngExportPolicies
  nameWithType: CngExportPolicies
  fullName: System.Security.Cryptography.CngExportPolicies
- uid: System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: GetProperty(String,CngPropertyOptions)
  nameWithType: CngKey.GetProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.GetProperty(String,CngPropertyOptions)
- uid: System.Security.Cryptography.CngProperty
  parent: System.Security.Cryptography
  isExternal: false
  name: CngProperty
  nameWithType: CngProperty
  fullName: System.Security.Cryptography.CngProperty
- uid: System.Security.Cryptography.CngPropertyOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: CngPropertyOptions
  nameWithType: CngPropertyOptions
  fullName: System.Security.Cryptography.CngPropertyOptions
- uid: System.Security.Cryptography.CngKey.Handle
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Handle
  nameWithType: CngKey.Handle
  fullName: System.Security.Cryptography.CngKey.Handle
- uid: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeNCryptKeyHandle
  nameWithType: SafeNCryptKeyHandle
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
- uid: System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: HasProperty(String,CngPropertyOptions)
  nameWithType: CngKey.HasProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.HasProperty(String,CngPropertyOptions)
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Import(Byte[],CngKeyBlobFormat)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat)
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Import(Byte[],CngKeyBlobFormat,CngProvider)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
- uid: System.Security.Cryptography.CngKey.IsEphemeral
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsEphemeral
  nameWithType: CngKey.IsEphemeral
  fullName: System.Security.Cryptography.CngKey.IsEphemeral
- uid: System.Security.Cryptography.CngKey.IsMachineKey
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsMachineKey
  nameWithType: CngKey.IsMachineKey
  fullName: System.Security.Cryptography.CngKey.IsMachineKey
- uid: System.Security.Cryptography.CngKey.KeyName
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyName
  nameWithType: CngKey.KeyName
  fullName: System.Security.Cryptography.CngKey.KeyName
- uid: System.Security.Cryptography.CngKey.KeySize
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeySize
  nameWithType: CngKey.KeySize
  fullName: System.Security.Cryptography.CngKey.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CngKey.KeyUsage
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyUsage
  nameWithType: CngKey.KeyUsage
  fullName: System.Security.Cryptography.CngKey.KeyUsage
- uid: System.Security.Cryptography.CngKeyUsages
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyUsages
  nameWithType: CngKeyUsages
  fullName: System.Security.Cryptography.CngKeyUsages
- uid: System.Security.Cryptography.CngKey.Open(System.String)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(String)
  nameWithType: CngKey.Open(String)
  fullName: System.Security.Cryptography.CngKey.Open(String)
- uid: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  nameWithType: CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
- uid: System.Security.Cryptography.CngKeyHandleOpenOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyHandleOpenOptions
  nameWithType: CngKeyHandleOpenOptions
  fullName: System.Security.Cryptography.CngKeyHandleOpenOptions
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(String,CngProvider)
  nameWithType: CngKey.Open(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider)
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Open(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider,CngKeyOpenOptions)
- uid: System.Security.Cryptography.CngKey.ParentWindowHandle
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CngKey.ParentWindowHandle
  fullName: System.Security.Cryptography.CngKey.ParentWindowHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.CngKey.Provider
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Provider
  nameWithType: CngKey.Provider
  fullName: System.Security.Cryptography.CngKey.Provider
- uid: System.Security.Cryptography.CngKey.ProviderHandle
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ProviderHandle
  nameWithType: CngKey.ProviderHandle
  fullName: System.Security.Cryptography.CngKey.ProviderHandle
- uid: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeNCryptProviderHandle
  nameWithType: SafeNCryptProviderHandle
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle
- uid: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: SetProperty(CngProperty)
  nameWithType: CngKey.SetProperty(CngProperty)
  fullName: System.Security.Cryptography.CngKey.SetProperty(CngProperty)
- uid: System.Security.Cryptography.CngKey.UIPolicy
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UIPolicy
  nameWithType: CngKey.UIPolicy
  fullName: System.Security.Cryptography.CngKey.UIPolicy
- uid: System.Security.Cryptography.CngUIPolicy
  parent: System.Security.Cryptography
  isExternal: false
  name: CngUIPolicy
  nameWithType: CngUIPolicy
  fullName: System.Security.Cryptography.CngUIPolicy
- uid: System.Security.Cryptography.CngKey.UniqueName
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UniqueName
  nameWithType: CngKey.UniqueName
  fullName: System.Security.Cryptography.CngKey.UniqueName
- uid: System.Security.Cryptography.CngKey.Algorithm*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Algorithm
  nameWithType: CngKey.Algorithm
- uid: System.Security.Cryptography.CngKey.AlgorithmGroup*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: AlgorithmGroup
  nameWithType: CngKey.AlgorithmGroup
- uid: System.Security.Cryptography.CngKey.Create*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create
  nameWithType: CngKey.Create
- uid: System.Security.Cryptography.CngKey.Delete*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Delete
  nameWithType: CngKey.Delete
- uid: System.Security.Cryptography.CngKey.Dispose*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Dispose
  nameWithType: CngKey.Dispose
- uid: System.Security.Cryptography.CngKey.Exists*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists
  nameWithType: CngKey.Exists
- uid: System.Security.Cryptography.CngKey.Export*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Export
  nameWithType: CngKey.Export
- uid: System.Security.Cryptography.CngKey.ExportPolicy*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ExportPolicy
  nameWithType: CngKey.ExportPolicy
- uid: System.Security.Cryptography.CngKey.GetProperty*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: GetProperty
  nameWithType: CngKey.GetProperty
- uid: System.Security.Cryptography.CngKey.Handle*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Handle
  nameWithType: CngKey.Handle
- uid: System.Security.Cryptography.CngKey.HasProperty*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: HasProperty
  nameWithType: CngKey.HasProperty
- uid: System.Security.Cryptography.CngKey.Import*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Import
  nameWithType: CngKey.Import
- uid: System.Security.Cryptography.CngKey.IsEphemeral*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsEphemeral
  nameWithType: CngKey.IsEphemeral
- uid: System.Security.Cryptography.CngKey.IsMachineKey*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsMachineKey
  nameWithType: CngKey.IsMachineKey
- uid: System.Security.Cryptography.CngKey.KeyName*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyName
  nameWithType: CngKey.KeyName
- uid: System.Security.Cryptography.CngKey.KeySize*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeySize
  nameWithType: CngKey.KeySize
- uid: System.Security.Cryptography.CngKey.KeyUsage*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyUsage
  nameWithType: CngKey.KeyUsage
- uid: System.Security.Cryptography.CngKey.Open*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open
  nameWithType: CngKey.Open
- uid: System.Security.Cryptography.CngKey.ParentWindowHandle*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CngKey.ParentWindowHandle
- uid: System.Security.Cryptography.CngKey.Provider*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Provider
  nameWithType: CngKey.Provider
- uid: System.Security.Cryptography.CngKey.ProviderHandle*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ProviderHandle
  nameWithType: CngKey.ProviderHandle
- uid: System.Security.Cryptography.CngKey.SetProperty*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: SetProperty
  nameWithType: CngKey.SetProperty
- uid: System.Security.Cryptography.CngKey.UIPolicy*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UIPolicy
  nameWithType: CngKey.UIPolicy
- uid: System.Security.Cryptography.CngKey.UniqueName*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UniqueName
  nameWithType: CngKey.UniqueName
