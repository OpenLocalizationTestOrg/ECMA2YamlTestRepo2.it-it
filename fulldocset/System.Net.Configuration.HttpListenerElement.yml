### YamlMime:ManagedReference
items:
- uid: System.Net.Configuration.HttpListenerElement
  id: HttpListenerElement
  children:
  - System.Net.Configuration.HttpListenerElement.#ctor
  - System.Net.Configuration.HttpListenerElement.Properties
  - System.Net.Configuration.HttpListenerElement.Timeouts
  - System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl
  langs:
  - csharp
  name: HttpListenerElement
  nameWithType: HttpListenerElement
  fullName: System.Net.Configuration.HttpListenerElement
  type: Class
  summary: "Rappresenta l&quot;elemento HttpListener nel file di configurazione. Questa classe non pu√≤ essere ereditata."
  remarks: "This class corresponds to the \\<httpListener> Element (Network Settings) configuration element. This class provides programmatic access to information that can be stored in configuration files.  \n  \n The <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property indicates if <xref:System.Net.HttpListener> uses the raw unescaped URI instead of the converted URI where any percent-encoded values are converted and other normalization steps are taken.  \n  \n When a <xref:System.Net.HttpListener> instance receives a request through the `http.sys` service, it creates an instance of the URI string provided by `http.sys`, and exposes it as the <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=fullName> property.  \n  \n The `http.sys` service exposes two request URI strings:  \n  \n-   Raw URI  \n  \n-   Converted URI  \n  \n The raw URI is the <xref:System.Uri?displayProperty=fullName> provided in the request line of a HTTP request:  \n  \n `GET /path/`  \n  \n `Host: www.contoso.com`  \n  \n The raw URI provided by `http.sys` for the request mentioned above, is \"/path/\". This represents the string following the HTTP verb as it was sent over the network.  \n  \n The `http.sys` service creates a converted URI from the information provided in the request by using the URI provided in the HTTP request line and the Host header to determine the origin server the request should be forwarded to. This is done by comparing the information from the request with a set of registered URI prefixes. The HTTP Server SDK documentation refers to this converted URI as the [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) structure.  \n  \n In order to be able to compare the request with registered URI prefixes, some normalization to the request needs to be done. For the sample above the converted URI would be as follows:  \n  \n `http://www.contoso.com/path/`  \n  \n The `http.sys` service combines the <xref:System.Uri.Host%2A?displayProperty=fullName> property value and the string in the request line to create a converted URI. In addition, `http.sys` and the <xref:System.Uri?displayProperty=fullName> class also do the following:  \n  \n-   Un-escapes all percent encoded values.  \n  \n-   Converts percent-encoded non-ASCII characters into a UTF-16 character representation. Note that UTF-8 and ANSI/DBCS characters are supported as well as Unicode characters (Unicode encoding using the %uXXXX format).  \n  \n-   Executes other normalization steps, like path compression.  \n  \n Since the request doesn't contain any information about the encoding used for percent-encoded values, it may not be possible to determine the correct encoding just by parsing the percent-encoded values.  \n  \n Therefore `http.sys` provides two registry keys for modifying the process:  \n  \n|Registry Key|Default Value|Description|  \n|------------------|-------------------|-----------------|  \n|EnableNonUTF8|1|If zero, `http.sys` accepts only UTF-8-encoded URLs.<br /><br /> If non-zero, `http.sys` also accepts ANSI-encoded or DBCS-encoded URLs in requests.|  \n|FavorUTF8|1|If non-zero, `http.sys` always tries to decode a URL as UTF-8 first; if that conversion fails and EnableNonUTF8 is non-zero, Http.sys then tries to decode it as ANSI or DBCS.<br /><br /> If zero (and EnableNonUTF8 is non-zero), `http.sys` tries to decode it as ANSI or DBCS; if that is not successful, it tries a UTF-8 conversion.|  \n  \n When <xref:System.Net.HttpListener> receives a request, it uses the converted URI from `http.sys` as input to the <xref:System.Net.HttpListenerRequest.Url%2A> property.  \n  \n There is a need for supporting characters besides characters and numbers in URIs. An example is the following URI, which is used to retrieve customer information for customer number \"1/3812\":  \n  \n `http://www.contoso.com/Customer('1%2F3812')/`  \n  \n Note the percent-encoded slash in the Uri (%2F). This is necessary, since in this case the slash character represents data and not a path delimiter.  \n  \n Passing the string to Uri constructor will lead to the following URI:  \n  \n `http://www.contoso.com/Customer('1/3812')/`  \n  \n Splitting the path into its segments would result in the following elements:  \n  \n `Customer('1`  \n  \n `3812')`  \n  \n This is not the intent of the sender of the request.  \n  \n If the <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> property is set to false, then when the <xref:System.Net.HttpListener> receives a request, it uses the raw URI instead of the converted URI from `http.sys` as input to the <xref:System.Net.HttpListenerRequest.Url%2A> property."
  syntax:
    content: 'public sealed class HttpListenerElement : System.Configuration.ConfigurationElement'
  inheritance:
  - System.Object
  - System.Configuration.ConfigurationElement
  implements: []
  inheritedMembers:
  - System.Configuration.ConfigurationElement.CurrentConfiguration
  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  - System.Configuration.ConfigurationElement.ElementInformation
  - System.Configuration.ConfigurationElement.ElementProperty
  - System.Configuration.ConfigurationElement.Equals(System.Object)
  - System.Configuration.ConfigurationElement.EvaluationContext
  - System.Configuration.ConfigurationElement.GetHashCode
  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  - System.Configuration.ConfigurationElement.HasContext
  - System.Configuration.ConfigurationElement.Init
  - System.Configuration.ConfigurationElement.InitializeDefault
  - System.Configuration.ConfigurationElement.IsModified
  - System.Configuration.ConfigurationElement.IsReadOnly
  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  - System.Configuration.ConfigurationElement.Item(System.String)
  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  - System.Configuration.ConfigurationElement.LockAllAttributesExcept
  - System.Configuration.ConfigurationElement.LockAllElementsExcept
  - System.Configuration.ConfigurationElement.LockAttributes
  - System.Configuration.ConfigurationElement.LockElements
  - System.Configuration.ConfigurationElement.LockItem
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  - System.Configuration.ConfigurationElement.PostDeserialize
  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElement.ResetModified
  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  - System.Configuration.ConfigurationElement.SetReadOnly
  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  platform:
  - net462
- uid: System.Net.Configuration.HttpListenerElement.#ctor
  id: '#ctor'
  parent: System.Net.Configuration.HttpListenerElement
  langs:
  - csharp
  name: HttpListenerElement()
  nameWithType: HttpListenerElement.HttpListenerElement()
  fullName: System.Net.Configuration.HttpListenerElement.HttpListenerElement()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Configuration
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Configuration.HttpListenerElement&quot;> </xref> classe."
  syntax:
    content: public HttpListenerElement ();
    parameters: []
  overload: System.Net.Configuration.HttpListenerElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Configuration.HttpListenerElement.Properties
  id: Properties
  parent: System.Net.Configuration.HttpListenerElement
  langs:
  - csharp
  name: Properties
  nameWithType: HttpListenerElement.Properties
  fullName: System.Net.Configuration.HttpListenerElement.Properties
  type: Property
  assemblies:
  - System
  namespace: System.Net.Configuration
  syntax:
    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }
    return:
      type: System.Configuration.ConfigurationPropertyCollection
      description: "Da aggiungere."
  overload: System.Net.Configuration.HttpListenerElement.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Configuration.HttpListenerElement.Timeouts
  id: Timeouts
  parent: System.Net.Configuration.HttpListenerElement
  langs:
  - csharp
  name: Timeouts
  nameWithType: HttpListenerElement.Timeouts
  fullName: System.Net.Configuration.HttpListenerElement.Timeouts
  type: Property
  assemblies:
  - System
  namespace: System.Net.Configuration
  summary: "Ottiene il valore predefinito di timeout elementi utilizzati per un <xref href=&quot;System.Net.HttpListener&quot;> </xref> oggetto."
  syntax:
    content: public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }
    return:
      type: System.Net.Configuration.HttpListenerTimeoutsElement
      description: "Returns <xref href=&quot;System.Net.Configuration.HttpListenerTimeoutsElement&quot;></xref>.       Gli elementi di timeout utilizzati per un <xref href=&quot;System.Net.HttpListener&quot;> </xref> oggetto."
  overload: System.Net.Configuration.HttpListenerElement.Timeouts*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl
  id: UnescapeRequestUrl
  parent: System.Net.Configuration.HttpListenerElement
  langs:
  - csharp
  name: UnescapeRequestUrl
  nameWithType: HttpListenerElement.UnescapeRequestUrl
  fullName: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Configuration
  summary: "Ottiene un valore che indica se <xref href=&quot;System.Net.HttpListener&quot;> </xref> utilizza l&quot;URI senza caratteri escape non elaborato anzich√© l&quot;URI convertito."
  remarks: "La propriet√† UnescapeRequestUrl indica se <xref:System.Net.HttpListener>utilizza l&quot;URI senza caratteri escape non elaborato anzich√© l&quot;URI convertito in cui vengono convertiti i valori codificati in percentuale e vengono eseguiti altri passaggi di normalizzazione.</xref:System.Net.HttpListener>       Quando un <xref:System.Net.HttpListener>istanza riceve una richiesta tramite il `http.sys` servizio, crea un&quot;istanza della stringa URI fornita da `http.sys`e lo espone come il <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=fullName>propriet√†.</xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=fullName> </xref:System.Net.HttpListener>       Il `http.sys` servizio espone due stringhe URI di richiesta: √® l&quot;URI non elaborato - URI non elaborato - URI di convertire il <xref:System.Uri?displayProperty=fullName>fornito nella riga della richiesta di una richiesta HTTP: `GET /path/` `Host: www.contoso.com` l&quot;URI non elaborato fornito da `http.sys` per √® indicata in precedenza, la richiesta di &quot;percorso /&quot;.       </xref:System.Uri?displayProperty=fullName> Rappresenta la stringa che segue il verbo HTTP, come √® stato inviato in rete.       Il `http.sys` servizio crea un URI convertito dalle informazioni fornite nella richiesta utilizzando l&quot;URI specificato nella riga della richiesta HTTP e l&quot;intestazione Host per determinare il server di origine la richiesta deve essere inoltrato a. Questa operazione viene eseguita confrontando le informazioni della richiesta con un set di prefissi URI registrati. La documentazione SDK Server HTTP fa riferimento a questo URI come convertire il [HTTP_COOKED_URL](http://go.microsoft.com/fwlink/?LinkID=166108) struttura.       Per poter essere in grado di confrontare la richiesta con i prefissi URI registrati, deve essere eseguita la normalizzazione della richiesta. Per l&quot;esempio precedente l&quot;URI convertito come segue: `http://www.contoso.com/path/` il `http.sys` servizio combina il <xref:System.Uri.Host%2A?displayProperty=fullName>valore della propriet√† e la stringa nella riga della richiesta per creare un URI convertito.</xref:System.Uri.Host%2A?displayProperty=fullName> Inoltre, `http.sys` e <xref:System.Uri?displayProperty=fullName>classe anche eseguire le operazioni seguenti:-tutte le percentuali di valori codificati non consente l&quot;escape.</xref:System.Uri?displayProperty=fullName>      -Converte i caratteri non ASCII codificati in percentuale in una rappresentazione dei caratteri UTF-16. Si noti che i caratteri UTF-8 e ANSI o DBCS sono supportati anche i caratteri Unicode (codifica Unicode utilizzando il formato % uXXXX).      -Consente di eseguire altri passaggi di normalizzazione, come la compressione del percorso.       Poich√© la richiesta non contiene le informazioni sulla codifica utilizzata per i valori codificati in percentuale, potrebbe non essere possibile determinare la codifica corretta solo analizzando i valori codificati in percentuale.       Pertanto `http.sys` fornisce due chiavi del Registro di sistema per la modifica del processo: | Chiave del Registro di sistema | Il valore predefinito | Descrizione |   |------------------|-------------------|-----------------|   | EnableNonUTF8 |&1; | Se √® zero, `http.sys` accetta solo URL con codifica UTF-8.<br /><br /> Se diverso da zero, `http.sys` accetta anche URL con codifica ANSI o DBCS nelle richieste. |   | FavorUTF8 |&1; | Se diverso da zero, `http.sys` sempre eseguito un tentativo di decodificare un URL come UTF-8 per primo; se tale conversione non riesce ed EnableNonUTF8 √® diverso da zero, Http.sys quindi tenta di decodificarlo come ANSI o DBCS.<br /><br /> Se √® zero (ed EnableNonUTF8 √® diverso da zero), `http.sys` tenta di decodificarlo come ANSI o DBCS; se non √® riuscita, prova una conversione di UTF-8. |       Quando <xref:System.Net.HttpListener>riceve una richiesta, Usa l&quot;URI convertito da `http.sys` come input per la <xref:System.Net.HttpListenerRequest.Url%2A>propriet√†.</xref:System.Net.HttpListenerRequest.Url%2A> </xref:System.Net.HttpListener>       √à necessario supportare i caratteri oltre ai caratteri e numeri negli URI. Un esempio √® il seguente URI utilizzato per recuperare informazioni sul cliente per il cliente numero &quot;1/3812&quot;: `http://www.contoso.com/Customer(&quot;1%2F3812&quot;)/` notare la barra codificati in percentuale nell&quot;Uri (%&2;F). Questa operazione √® necessaria, poich√© in questo caso il carattere di barra rappresenta dati e non un delimitatore di percorso.       Passare la stringa al costruttore Uri determiner√† l&quot;URI seguente: `http://www.contoso.com/Customer(&quot;1/3812&quot;)/` la suddivisione del percorso in segmenti comporta i seguenti elementi: `Customer(&quot;1` `3812&quot;)` non lo scopo del mittente della richiesta.              Se la propriet√† UnescapeRequestUrl √® impostata su false, successivamente, quando il <xref:System.Net.HttpListener>riceve una richiesta, viene utilizzato l&quot;URI non elaborato anzich√© l&quot;URI convertito da `http.sys` come input per il <xref:System.Net.HttpListenerRequest.Url%2A>propriet√†.</xref:System.Net.HttpListenerRequest.Url%2A> </xref:System.Net.HttpListener>"
  syntax:
    content: public bool UnescapeRequestUrl { get; }
    return:
      type: System.Boolean
      description: "Un valore booleano che indica se <xref href=&quot;System.Net.HttpListener&quot;> </xref> Usa l&quot;URI senza caratteri escape non elaborato anzich√© l&quot;URI convertito."
  overload: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.ConfigurationElement
  isExternal: false
  name: System.Configuration.ConfigurationElement
- uid: System.Net.Configuration.HttpListenerElement.#ctor
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: HttpListenerElement()
  nameWithType: HttpListenerElement.HttpListenerElement()
  fullName: System.Net.Configuration.HttpListenerElement.HttpListenerElement()
- uid: System.Net.Configuration.HttpListenerElement.Properties
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: Properties
  nameWithType: HttpListenerElement.Properties
  fullName: System.Net.Configuration.HttpListenerElement.Properties
- uid: System.Configuration.ConfigurationPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationPropertyCollection
  nameWithType: ConfigurationPropertyCollection
  fullName: System.Configuration.ConfigurationPropertyCollection
- uid: System.Net.Configuration.HttpListenerElement.Timeouts
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: Timeouts
  nameWithType: HttpListenerElement.Timeouts
  fullName: System.Net.Configuration.HttpListenerElement.Timeouts
- uid: System.Net.Configuration.HttpListenerTimeoutsElement
  parent: System.Net.Configuration
  isExternal: false
  name: HttpListenerTimeoutsElement
  nameWithType: HttpListenerTimeoutsElement
  fullName: System.Net.Configuration.HttpListenerTimeoutsElement
- uid: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: UnescapeRequestUrl
  nameWithType: HttpListenerElement.UnescapeRequestUrl
  fullName: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Configuration.HttpListenerElement.#ctor*
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: HttpListenerElement
  nameWithType: HttpListenerElement.HttpListenerElement
- uid: System.Net.Configuration.HttpListenerElement.Properties*
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: Properties
  nameWithType: HttpListenerElement.Properties
- uid: System.Net.Configuration.HttpListenerElement.Timeouts*
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: Timeouts
  nameWithType: HttpListenerElement.Timeouts
- uid: System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl*
  parent: System.Net.Configuration.HttpListenerElement
  isExternal: false
  name: UnescapeRequestUrl
  nameWithType: HttpListenerElement.UnescapeRequestUrl
