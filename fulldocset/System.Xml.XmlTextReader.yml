### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlTextReader
  id: XmlTextReader
  children:
  - System.Xml.XmlTextReader.#ctor
  - System.Xml.XmlTextReader.#ctor(System.IO.Stream)
  - System.Xml.XmlTextReader.#ctor(System.IO.TextReader)
  - System.Xml.XmlTextReader.#ctor(System.String)
  - System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)
  - System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)
  - System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)
  - System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)
  - System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)
  - System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)
  - System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)
  - System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)
  - System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)
  - System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)
  - System.Xml.XmlTextReader.AttributeCount
  - System.Xml.XmlTextReader.BaseURI
  - System.Xml.XmlTextReader.CanReadBinaryContent
  - System.Xml.XmlTextReader.CanReadValueChunk
  - System.Xml.XmlTextReader.CanResolveEntity
  - System.Xml.XmlTextReader.Close
  - System.Xml.XmlTextReader.Depth
  - System.Xml.XmlTextReader.DtdProcessing
  - System.Xml.XmlTextReader.Encoding
  - System.Xml.XmlTextReader.EntityHandling
  - System.Xml.XmlTextReader.EOF
  - System.Xml.XmlTextReader.GetAttribute(System.Int32)
  - System.Xml.XmlTextReader.GetAttribute(System.String)
  - System.Xml.XmlTextReader.GetAttribute(System.String,System.String)
  - System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  - System.Xml.XmlTextReader.GetRemainder
  - System.Xml.XmlTextReader.HasLineInfo
  - System.Xml.XmlTextReader.HasValue
  - System.Xml.XmlTextReader.IsDefault
  - System.Xml.XmlTextReader.IsEmptyElement
  - System.Xml.XmlTextReader.LineNumber
  - System.Xml.XmlTextReader.LinePosition
  - System.Xml.XmlTextReader.LocalName
  - System.Xml.XmlTextReader.LookupNamespace(System.String)
  - System.Xml.XmlTextReader.MoveToAttribute(System.Int32)
  - System.Xml.XmlTextReader.MoveToAttribute(System.String)
  - System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)
  - System.Xml.XmlTextReader.MoveToElement
  - System.Xml.XmlTextReader.MoveToFirstAttribute
  - System.Xml.XmlTextReader.MoveToNextAttribute
  - System.Xml.XmlTextReader.Name
  - System.Xml.XmlTextReader.Namespaces
  - System.Xml.XmlTextReader.NamespaceURI
  - System.Xml.XmlTextReader.NameTable
  - System.Xml.XmlTextReader.NodeType
  - System.Xml.XmlTextReader.Normalization
  - System.Xml.XmlTextReader.Prefix
  - System.Xml.XmlTextReader.ProhibitDtd
  - System.Xml.XmlTextReader.QuoteChar
  - System.Xml.XmlTextReader.Read
  - System.Xml.XmlTextReader.ReadAttributeValue
  - System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)
  - System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlTextReader.ReadState
  - System.Xml.XmlTextReader.ReadString
  - System.Xml.XmlTextReader.ResetState
  - System.Xml.XmlTextReader.ResolveEntity
  - System.Xml.XmlTextReader.Skip
  - System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  - System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)
  - System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)
  - System.Xml.XmlTextReader.Value
  - System.Xml.XmlTextReader.WhitespaceHandling
  - System.Xml.XmlTextReader.XmlLang
  - System.Xml.XmlTextReader.XmlResolver
  - System.Xml.XmlTextReader.XmlSpace
  langs:
  - csharp
  name: "XmlTextReader"
  nameWithType: XmlTextReader
  fullName: System.Xml.XmlTextReader
  type: Class
  summary: "Represents a reader that provides fast, non-cached, forward-only access to XML data.  \n  \n Starting with the .NET Framework 2.0, we recommend that you use the &lt;xref:System.Xml.XmlReader?displayProperty=fullName&gt; class instead."
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n XmlTextReader provides forward-only, read-only access to a stream of XML data. The current node refers to the node on which the reader is positioned. The reader is advanced using any of the read methods and properties reflect the value of the current node.  \n  \n This class implements <xref:System.Xml.XmlReader> and conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations. `XmlTextReader` provides the following functionality:  \n  \n-   Enforces the rules of well-formed XML.  \n  \n-   `XmlTextReader` does not provide data validation.  \n  \n-   Checks that `DocumentType` nodes are well-formed. `XmlTextReader` checks the DTD for well-formedness, but does not validate using the DTD.  \n  \n-   For nodes where <xref:System.Xml.XmlTextReader.NodeType%2A> is `XmlNodeType.EntityReference`, a single empty `EntityReference` node is returned (that is, the <xref:System.Xml.XmlTextReader.Value%2A> property is `String.Empty`).  \n  \n> [!NOTE]\n>  The actual declarations of entities in the DTD are called `Entity` nodes. When you refer to these nodes in your data, they are called `EntityReference` nodes.  \n  \n-   Does not expand default attributes.  \n  \n Because the `XmlTextReader` does not perform the extra checks required for data validation, it provides a fast well-formedness parser.  \n  \n To perform data validation, use a validating <xref:System.Xml.XmlReader>.  \n  \n To read XML data from an <xref:System.Xml.XmlDocument>, use <xref:System.Xml.XmlNodeReader>.  \n  \n `XmlTextReader` throws an <xref:System.Xml.XmlException> on XML parse errors. After an exception is thrown the state of the reader is not predictable. For example, the reported node type may be different than the actual node type of the current node. Use the <xref:System.Xml.XmlTextReader.ReadState%2A> property to check whether a reader is in error state.  \n  \n## Security Considerations  \n The following are things to consider when using the XmlTextReader class.  \n  \n-   Exceptions thrown the XmlTextReader can disclose path information that you do not want bubbled up to the application. Your applications must catch exceptions and process them appropriately.  \n  \n-   DTD processing is enabled by default. Disable DTD processing if you are concerned about Denial of Service issues or if you are dealing with untrusted sources. Set the <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property to <xref:System.Xml.DtdProcessing> to disable DTD processing.  \n  \n     If you have DTD processing enabled, you can use the <xref:System.Xml.XmlSecureResolver> to restrict the resources that the XmlTextReader can access. You can also design your application so that the XML processing is memory and time constrained. For example, configure time-out limits in your ASP.NET application.  \n  \n-   XML data can include references to external resources such as a DTD file. By default external resources are resolved using an <xref:System.Xml.XmlUrlResolver> object with no user credentials. You can secure this further by doing one of the following:  \n  \n    -   Restrict the resources that the XmlTextReader can access by setting the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to an <xref:System.Xml.XmlSecureResolver> object.  \n  \n    -   Do not allow the <xref:System.Xml.XmlReader> to open any external resources by setting the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to `null`.  \n  \n-   XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process. To limit the size of the input that is sent to the XmlTextReader, create a custom IStream implementation and supply it the XmlTextReader.  \n  \n-   The <xref:System.Xml.XmlReader.ReadValueChunk%2A> method can be used to handle large streams of data. This method reads a small number of characters at a time instead of allocating a single string for the whole value.  \n  \n-   By default general entities are not expanded. General entities are expanded when you call the <xref:System.Xml.XmlTextReader.ResolveEntity%2A> method."
  syntax:
    content: >-
      [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]

      public class XmlTextReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver
  inheritance:
  - System.Xml.XmlReader
  implements:
  - System.Xml.IXmlLineInfo
  - System.Xml.IXmlNamespaceResolver
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor
  id: '#ctor'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader()"
  nameWithType: XmlTextReader.XmlTextReader()
  fullName: System.Xml.XmlTextReader.XmlTextReader()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <xref uid="langword_csharp_XmlTextReader" name="XmlTextReader" href=""></xref>.
  syntax:
    content: protected XmlTextReader ();
    parameters: []
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(Stream)"
  nameWithType: XmlTextReader.XmlTextReader(Stream)
  fullName: System.Xml.XmlTextReader.XmlTextReader(Stream)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified stream.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n The <xref:System.Xml.XmlTextReader> decodes the stream using <xref:System.Text.Encoding?displayProperty=fullName>."
  syntax:
    content: public XmlTextReader (System.IO.Stream input);
    parameters:
    - id: input
      type: System.IO.Stream
      description: "The stream containing the XML data to read."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    input is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.IO.TextReader)
  id: '#ctor(System.IO.TextReader)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(TextReader)"
  nameWithType: XmlTextReader.XmlTextReader(TextReader)
  fullName: System.Xml.XmlTextReader.XmlTextReader(TextReader)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified &lt;xref:System.IO.TextReader&gt;.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n It is assumed that the `TextReader` is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario."
  example:
  - "The following example loads an XML string into the `XmlTextReader` object using the <xref:System.IO.StringReader> class.  \n  \n [!code-cpp[XmlTextReader.cctor1#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_9_1.cpp)]\n [!code-cs[XmlTextReader.cctor1#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_9_1.cs)]\n [!code-vb[XmlTextReader.cctor1#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_9_1.vb)]"
  syntax:
    content: public XmlTextReader (System.IO.TextReader input);
    parameters:
    - id: input
      type: System.IO.TextReader
      description: "The  containing the XML data to read."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(String)"
  nameWithType: XmlTextReader.XmlTextReader(String)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified file.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n If the file is located on a resource that requires access credentials, use the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to specify the necessary credentials.  \n  \n> [!NOTE]\n>  In version 1.1 of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)], partially trusted code cannot set the `XmlResolver` property. The workaround is to create an <xref:System.Xml.XmlUrlResolver> with the necessary credentials, pass the URI to the <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName> method, and then construct the `XmlTextReader` using the resulting <xref:System.IO.Stream> object. The workaround is described in the following C# code.  \n  \n```  \n// Create a resolver with the necessary credentials.  \nXmlUrlResolver resolver = new XmlUrlResolver();  \nNetworkCredential nc = new NetworkCredential(SecurelyStoredUserName, SecurelyStoredPassword, SecurelyStoredDomain);  \nresolver.Credentials = nc;   \n// Get a Stream object containing the XML file.  \nUri myUri = new Uri (\"http://myServer/data/books.xml\");  \nStream s=(Stream)resolver.GetEntity(myUri, null, typeof(Stream));  \n// Construct a reader using the Stream object.  \nXmlTextReader reader = new XmlTextReader(s);  \n```"
  example:
  - "The following example reads an XML file and displays each of the nodes.  \n  \n [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_13_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_13_1.vb)]\n [!code-cs[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_13_1.cs)]  \n  \n The example uses the file, `items.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/add/codesnippet/XML/m-system.xml.xmltextread_13_2.xml)]"
  syntax:
    content: public XmlTextReader (string url);
    parameters:
    - id: url
      type: System.String
      description: "The URL for the file containing the XML data. The <xref:System.Xml.XmlTextReader.BaseURI%2A> is set to this value."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified file cannot be found."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Part of the filename or directory cannot be found."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n    url is an empty string."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The remote filename cannot be resolved.       -or-       An error occurred while processing the request."
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\n    url is not a valid URI."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified &lt;xref:System.Xml.XmlNameTable&gt;.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  syntax:
    content: protected XmlTextReader (System.Xml.XmlNameTable nt);
    parameters:
    - id: nt
      type: System.Xml.XmlNameTable
      description: "The  to use."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)
  id: '#ctor(System.IO.Stream,System.Xml.XmlNameTable)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(Stream,XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(Stream,XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(Stream,XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified stream and &lt;xref:System.Xml.XmlNameTable&gt;.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n The <xref:System.Xml.XmlTextReader> decodes the stream using <xref:System.Text.Encoding?displayProperty=fullName>.  \n  \n If you specify a name table, this constructor uses the names defined already in that table."
  syntax:
    content: public XmlTextReader (System.IO.Stream input, System.Xml.XmlNameTable nt);
    parameters:
    - id: input
      type: System.IO.Stream
      description: "The stream containing the XML data to read."
    - id: nt
      type: System.Xml.XmlNameTable
      description: "The  to use."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "The input or nt value is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)
  id: '#ctor(System.IO.TextReader,System.Xml.XmlNameTable)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(TextReader,XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(TextReader,XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(TextReader,XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified &lt;xref:System.IO.TextReader&gt; and &lt;xref:System.Xml.XmlNameTable&gt;.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n It is assumed that the `TextReader` is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario."
  syntax:
    content: public XmlTextReader (System.IO.TextReader input, System.Xml.XmlNameTable nt);
    parameters:
    - id: input
      type: System.IO.TextReader
      description: "The  containing the XML data to read."
    - id: nt
      type: System.Xml.XmlNameTable
      description: "The  to use."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "The nt value is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)
  id: '#ctor(System.String,System.IO.Stream)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(String,Stream)"
  nameWithType: XmlTextReader.XmlTextReader(String,Stream)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,Stream)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified URL and stream.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  syntax:
    content: public XmlTextReader (string url, System.IO.Stream input);
    parameters:
    - id: url
      type: System.String
      description: "The URL to use for resolving external resources. The <xref:System.Xml.XmlTextReader.BaseURI%2A> is set to this value."
    - id: input
      type: System.IO.Stream
      description: "The stream containing the XML data to read."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    input is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)
  id: '#ctor(System.String,System.IO.TextReader)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(String,TextReader)"
  nameWithType: XmlTextReader.XmlTextReader(String,TextReader)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,TextReader)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified URL and &lt;xref:System.IO.TextReader&gt;.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n It is assumed that the `TextReader` is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario."
  syntax:
    content: public XmlTextReader (string url, System.IO.TextReader input);
    parameters:
    - id: url
      type: System.String
      description: "The URL to use for resolving external resources. The <xref:System.Xml.XmlTextReader.BaseURI%2A> is set to this value."
    - id: input
      type: System.IO.TextReader
      description: "The  containing the XML data to read."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)
  id: '#ctor(System.String,System.Xml.XmlNameTable)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(String,XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(String,XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified file and &lt;xref:System.Xml.XmlNameTable&gt;.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  syntax:
    content: public XmlTextReader (string url, System.Xml.XmlNameTable nt);
    parameters:
    - id: url
      type: System.String
      description: "The URL for the file containing the XML data to read."
    - id: nt
      type: System.Xml.XmlNameTable
      description: "The  to use."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "The nt value is ."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "The specified file cannot be found."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Part of the filename or directory cannot be found."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n    url is an empty string."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "The remote filename cannot be resolved.       -or-       An error occurred while processing the request."
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\n    url is not a valid URI."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)
  id: '#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(Stream,XmlNodeType,XmlParserContext)"
  nameWithType: XmlTextReader.XmlTextReader(Stream,XmlNodeType,XmlParserContext)
  fullName: System.Xml.XmlTextReader.XmlTextReader(Stream,XmlNodeType,XmlParserContext)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified stream, &lt;xref:System.Xml.XmlNodeType&gt;, and &lt;xref:System.Xml.XmlParserContext&gt;.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This constructor parses the given string as a fragment of XML. If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.  \n  \n The following table lists valid values for `fragType`.  \n  \n|XmlNodeType|Fragment May Contain|  \n|-----------------|--------------------------|  \n|`Element`|Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).<br /><br /> An XML declaration can also be supplied. This allows you to specify the encoding for the XML fragment, rather than having to set it on the <xref:System.Xml.XmlParserContext> object.|  \n|`Attribute`|The value of an attribute (the part inside the quotes).|  \n|`Document`|The contents of an entire XML document. This enforces document level rules.|  \n  \n The reader uses the following to determine the encoding of the stream.  \n  \n1.  Checks the <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=fullName> property to determine the encoding.  \n  \n2.  If the `Encoding` property is `null`, the reader checks for a byte-order mark at the beginning of the stream.  \n  \n3.  If the `Encoding` property is `null`, and no byte-order mark is found, the reader assumes the stream is encoded in UTF-8."
  syntax:
    content: public XmlTextReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);
    parameters:
    - id: xmlFragment
      type: System.IO.Stream
      description: "The stream containing the XML fragment to parse."
    - id: fragType
      type: System.Xml.XmlNodeType
      description: "The <xref:System.Xml.XmlNodeType> of the XML fragment. This also determines what the fragment can contain. (See table below.)"
    - id: context
      type: System.Xml.XmlParserContext
      description: "The <xref:System.Xml.XmlParserContext> in which the `xmlFragment` is to be parsed. This includes the <xref:System.Xml.XmlNameTable> to use, encoding, namespace scope, the current `xml:lang`, and the `xml:space` scope."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n    fragType is not an Element, Attribute, or Document ."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    xmlFragment is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)
  id: '#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(String,Stream,XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(String,Stream,XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,Stream,XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified URL, stream and &lt;xref:System.Xml.XmlNameTable&gt;.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  syntax:
    content: public XmlTextReader (string url, System.IO.Stream input, System.Xml.XmlNameTable nt);
    parameters:
    - id: url
      type: System.String
      description: "The URL to use for resolving external resources. The <xref:System.Xml.XmlTextReader.BaseURI%2A> is set to this value. If `url` is ,  is set to ."
    - id: input
      type: System.IO.Stream
      description: "The stream containing the XML data to read."
    - id: nt
      type: System.Xml.XmlNameTable
      description: "The  to use."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "The input or nt value is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)
  id: '#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(String,TextReader,XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(String,TextReader,XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,TextReader,XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified URL, &lt;xref:System.IO.TextReader&gt; and &lt;xref:System.Xml.XmlNameTable&gt;.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n It is assumed that the `TextReader` is already set to the correct encoding. This is used by clients that have already read some things from the stream in a multi-part MIME scenario."
  syntax:
    content: public XmlTextReader (string url, System.IO.TextReader input, System.Xml.XmlNameTable nt);
    parameters:
    - id: url
      type: System.String
      description: "The URL to use for resolving external resources. The <xref:System.Xml.XmlTextReader.BaseURI%2A> is set to this value. If `url` is ,  is set to ."
    - id: input
      type: System.IO.TextReader
      description: "The  containing the XML data to read."
    - id: nt
      type: System.Xml.XmlNameTable
      description: "The  to use."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The nt value is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)
  id: '#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)'
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlTextReader(String,XmlNodeType,XmlParserContext)"
  nameWithType: XmlTextReader.XmlTextReader(String,XmlNodeType,XmlParserContext)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,XmlNodeType,XmlParserContext)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader"></see> class with the specified string, &lt;xref:System.Xml.XmlNodeType&gt;, and &lt;xref:System.Xml.XmlParserContext&gt;.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This constructor parses the given string as a fragment of XML. If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents. This constructor can handle strings returned from <xref:System.Xml.XmlReader.ReadInnerXml%2A>.  \n  \n The following table lists valid values for `fragType` and how the reader parses each of the different node types.  \n  \n|XmlNodeType|Fragment May Contain|  \n|-----------------|--------------------------|  \n|Element|Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).<br /><br /> An XML declaration can also be supplied. This allows you to specify the encoding for the XML fragment, rather than having to set it on the <xref:System.Xml.XmlParserContext> object.|  \n|Attribute|The value of an attribute (the part inside the quotes).|  \n|Document|The contents of an entire XML document. This enforces document level rules.|"
  example:
  - "The following example parses an XML fragment. It uses the `XmlParserContext` and its <xref:System.Xml.XmlNamespaceManager> to handle namespace resolution.  \n  \n [!code-cs[XmlTextReader.Cctor#1](~/add/codesnippet/CSharp/ad44c7af-f0ec-4b27-90c7-_1.cs)]\n [!code-vb[XmlTextReader.Cctor#1](~/add/codesnippet/VisualBasic/ad44c7af-f0ec-4b27-90c7-_1.vb)]\n [!code-cpp[XmlTextReader.Cctor#1](~/add/codesnippet/CPP/ad44c7af-f0ec-4b27-90c7-_1.cpp)]"
  syntax:
    content: public XmlTextReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);
    parameters:
    - id: xmlFragment
      type: System.String
      description: "The string containing the XML fragment to parse."
    - id: fragType
      type: System.Xml.XmlNodeType
      description: "The <xref:System.Xml.XmlNodeType> of the XML fragment. This also determines what the fragment string can contain. (See table below.)"
    - id: context
      type: System.Xml.XmlParserContext
      description: "The <xref:System.Xml.XmlParserContext> in which the `xmlFragment` is to be parsed. This includes the <xref:System.Xml.XmlNameTable> to use, encoding, namespace scope, the current `xml:lang`, and the `xml:space` scope."
  overload: System.Xml.XmlTextReader.#ctor*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n    fragType is not an , , or ."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    xmlFragment is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.AttributeCount
  id: AttributeCount
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "AttributeCount"
  nameWithType: XmlTextReader.AttributeCount
  fullName: System.Xml.XmlTextReader.AttributeCount
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the number of attributes on the current node.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property is relevant to `Element`, `DocumentType` and `XmlDeclaration` nodes only. (Other node types do not have attributes.)"
  example:
  - "The following example displays all attributes on the current node.  \n  \n [!code-cs[Classic WebData XmlTextReader.MoveToElement Example#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_2_1.cs)]\n [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_2_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_2_1.vb)]"
  syntax:
    content: public override int AttributeCount { get; }
    return:
      type: System.Int32
      description: "The number of attributes on the current node."
  overload: System.Xml.XmlTextReader.AttributeCount*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.BaseURI
  id: BaseURI
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "BaseURI"
  nameWithType: XmlTextReader.BaseURI
  fullName: System.Xml.XmlTextReader.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the base URI of the current node.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. DTD entities are an example of this, but this is not limited to DTDs. The base URI tells you where these nodes came from. If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), `String.Empty` is returned."
  example:
  - "The following example displays the base URI for each of the nodes.  \n  \n [!code-cpp[Classic WebData XmlTextReader.BaseURI Example#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_8_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.BaseURI Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_8_1.vb)]\n [!code-cs[Classic WebData XmlTextReader.BaseURI Example#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_8_1.cs)]  \n  \n The example uses the file, `baseuri.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlTextReader.BaseURI Example#2](~/add/codesnippet/XML/p-system.xml.xmltextread_8_2.xml)]"
  syntax:
    content: public override string BaseURI { get; }
    return:
      type: System.String
      description: "The base URI of the current node."
  overload: System.Xml.XmlTextReader.BaseURI*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.CanReadBinaryContent
  id: CanReadBinaryContent
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "CanReadBinaryContent"
  nameWithType: XmlTextReader.CanReadBinaryContent
  fullName: System.Xml.XmlTextReader.CanReadBinaryContent
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader"></see> implements the binary content read methods.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n The binary content read methods include the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>, <xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A>, and <xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A> methods."
  syntax:
    content: public override bool CanReadBinaryContent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the binary content read methods are implemented; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The <see cref=&quot;T:System.Xml.XmlTextReader&quot;></see> class always returns <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.CanReadBinaryContent*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.CanReadValueChunk
  id: CanReadValueChunk
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "CanReadValueChunk"
  nameWithType: XmlTextReader.CanReadValueChunk
  fullName: System.Xml.XmlTextReader.CanReadValueChunk
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader"></see> implements the &lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt; method.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n The <xref:System.Xml.XmlTextReader> throws a <xref:System.NotSupportedException> if the <xref:System.Xml.XmlReader.ReadValueChunk%2A> method is called."
  syntax:
    content: public override bool CanReadValueChunk { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <see cref=&quot;T:System.Xml.XmlTextReader&quot;></see> implements the &lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt; method; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The <see cref=&quot;T:System.Xml.XmlTextReader&quot;></see> class always returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.CanReadValueChunk*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.CanResolveEntity
  id: CanResolveEntity
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "CanResolveEntity"
  nameWithType: XmlTextReader.CanResolveEntity
  fullName: System.Xml.XmlTextReader.CanResolveEntity
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets a value indicating whether this reader can parse and resolve entities.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This is a change in the [!INCLUDE[dnprdnext](~/add/includes/dnprdnext-md.md)] release. In previous versions, the `XmlTextReader` class could not resolve entities and `CanResolveEntity` always returned `false`."
  syntax:
    content: public override bool CanResolveEntity { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the reader can parse and resolve entities; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The <xref uid=&quot;langword_csharp_XmlTextReader&quot; name=&quot;XmlTextReader&quot; href=&quot;&quot;></xref> class always returns <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.CanResolveEntity*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.Close
  id: Close
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "Close()"
  nameWithType: XmlTextReader.Close()
  fullName: System.Xml.XmlTextReader.Close()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Changes the &lt;xref:System.Xml.XmlReader.ReadState%2A&gt; to <xref uid="langword_csharp_Closed" name="Closed" href=""></xref>.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This method also releases any resources held while reading. If this reader was constructed using a stream, this method also calls `Close` on the underlying stream.  \n  \n If `Close` has already been called, no action is performed."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Xml.XmlTextReader.Close*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.Depth
  id: Depth
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "Depth"
  nameWithType: XmlTextReader.Depth
  fullName: System.Xml.XmlTextReader.Depth
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the depth of the current node in the XML document.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  example:
  - "The following example displays each node including its depth, line number, and line position.  \n  \n [!code-vb[XmlTextReader.LineNum#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_6_1.vb)]\n [!code-cpp[XmlTextReader.LineNum#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_6_1.cpp)]\n [!code-cs[XmlTextReader.LineNum#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_6_1.cs)]"
  syntax:
    content: public override int Depth { get; }
    return:
      type: System.Int32
      description: "The depth of the current node in the XML document."
  overload: System.Xml.XmlTextReader.Depth*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.DtdProcessing
  id: DtdProcessing
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "DtdProcessing"
  nameWithType: XmlTextReader.DtdProcessing
  fullName: System.Xml.XmlTextReader.DtdProcessing
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets or sets the &lt;xref:System.Xml.DtdProcessing&gt; enumeration.
  remarks: "The <xref:System.Xml.DtdProcessing> enumeration contains the <xref:System.Xml.DtdProcessing>, <xref:System.Xml.DtdProcessing>, and <xref:System.Xml.DtdProcessing> enumerators. <xref:System.Xml.DtdProcessing> is the default behavior. The DtdProcessing property replaces the `ProhibitDTD` property and adds the ability to ignore the DOCTYPE element.  \n  \n> [!IMPORTANT]\n>  If the DtdProcessing property is set to <xref:System.Xml.DtdProcessing?displayProperty=fullName>, the <xref:System.Xml.XmlTextReader> will not report the DTDs. This means that the DTD/DOCTYPE will be lost on output."
  syntax:
    content: public System.Xml.DtdProcessing DtdProcessing { get; set; }
    return:
      type: System.Xml.DtdProcessing
      description: "The &lt;xref:System.Xml.DtdProcessing&gt; enumeration."
  overload: System.Xml.XmlTextReader.DtdProcessing*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.Encoding
  id: Encoding
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "Encoding"
  nameWithType: XmlTextReader.Encoding
  fullName: System.Xml.XmlTextReader.Encoding
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the encoding of the document.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n Because <xref:System.Xml.XmlTextReader> uses the <xref:System.Text.Encoding?displayProperty=fullName> class, `XmlTextReader` also supports all encodings supported by that class. The exception to this is any encoding, such as UTF-7 or EBCDIC, that maps the `<?xml` sequence to different byte values than UTF-8."
  syntax:
    content: public System.Text.Encoding Encoding { get; }
    return:
      type: System.Text.Encoding
      description: "The encoding value. If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8."
  overload: System.Xml.XmlTextReader.Encoding*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.EntityHandling
  id: EntityHandling
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "EntityHandling"
  nameWithType: XmlTextReader.EntityHandling
  fullName: System.Xml.XmlTextReader.EntityHandling
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets or sets a value that specifies how the reader handles entities.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property can be changed on the fly and takes effect after the next <xref:System.Xml.XmlTextReader.Read%2A> call.  \n  \n When `EntityHandling` is set to `ExpandCharEntities`, attribute values are only partially normalized. The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.  \n  \n To illustrate the difference between the entity handling modes consider the following XML:  \n  \n```  \n<!DOCTYPE doc [<!ENTITY num \"123\">]>  \n    <doc> A &num; </doc>  \n```  \n  \n When `EntityHandling` is set to `ExpandEntities` the \"doc\" element node contains one text node with the expanded entity text:  \n  \n|Depth|Node type|Name|Value|  \n|-----------|---------------|----------|-----------|  \n|1|`Text`||A 123|  \n  \n When `EntityHandling` is set to `ExpandCharEntites`, and <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A> is set to `Significant` or `All`, the \"doc\" element expands the character entity and returns the general entity as a node:  \n  \n|Depth|Node type|Name|Value|  \n|-----------|---------------|----------|-----------|  \n|1|`Text`||A|  \n|1|`EntityReference`|num||  \n|1|`SignificantWhitespace`|||"
  syntax:
    content: public System.Xml.EntityHandling EntityHandling { get; set; }
    return:
      type: System.Xml.EntityHandling
      description: "One of the <see cref=&quot;T:System.Xml.EntityHandling&quot;></see> values. If no <xref uid=&quot;langword_csharp_EntityHandling&quot; name=&quot;EntityHandling&quot; href=&quot;&quot;></xref> is specified, it defaults to <xref uid=&quot;langword_csharp_EntityHandling.ExpandCharEntities&quot; name=&quot;EntityHandling.ExpandCharEntities&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.EntityHandling*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.EOF
  id: EOF
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "EOF"
  nameWithType: XmlTextReader.EOF
  fullName: System.Xml.XmlTextReader.EOF
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets a value indicating whether the reader is positioned at the end of the stream.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  syntax:
    content: public override bool EOF { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the reader is positioned at the end of the stream; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.EOF*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.GetAttribute(System.Int32)
  id: GetAttribute(System.Int32)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "GetAttribute(Int32)"
  nameWithType: XmlTextReader.GetAttribute(Int32)
  fullName: System.Xml.XmlTextReader.GetAttribute(Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the value of the attribute with the specified index.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This method does not move the reader."
  syntax:
    content: public override string GetAttribute (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "The index of the attribute. The index is zero-based. (The first attribute has index 0.)"
    return:
      type: System.String
      description: "To be added."
  overload: System.Xml.XmlTextReader.GetAttribute*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The i parameter is less than 0 or greater than or equal to <xref:System.Xml.XmlTextReader.AttributeCount%2A>."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "GetAttribute(String)"
  nameWithType: XmlTextReader.GetAttribute(String)
  fullName: System.Xml.XmlTextReader.GetAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the value of the attribute with the specified name.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This method does not move the reader.  \n  \n If the reader is positioned on a `DocumentType` node, this method can be used to get the PUBLIC and SYSTEM literals, for example, `reader.GetAttribute(\"PUBLIC\")`"
  example:
  - "The following example gets the value of the ISBN attribute.  \n  \n [!code-cpp[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_3_1.cpp)]\n [!code-cs[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_3_1.cs)]\n [!code-vb[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_3_1.vb)]  \n  \n The example uses the file, `attrs.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlTextReader.GetAttribute1 Example#2](~/add/codesnippet/XML/m-system.xml.xmltextread_3_2.xml)]"
  syntax:
    content: public override string GetAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "The qualified name of the attribute."
    return:
      type: System.String
      description: "To be added."
  overload: System.Xml.XmlTextReader.GetAttribute*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.GetAttribute(System.String,System.String)
  id: GetAttribute(System.String,System.String)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "GetAttribute(String,String)"
  nameWithType: XmlTextReader.GetAttribute(String,String)
  fullName: System.Xml.XmlTextReader.GetAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the value of the attribute with the specified local name and namespace URI.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n The following XML contains an attribute in a specific namespace:  \n  \n```  \n<test xmlns:dt=\"urn:datatypes\" dt:type=\"int\"/>  \n```  \n  \n You can lookup the `dt:type` attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):  \n  \n```  \nString dt = reader.GetAttribute(\"dt:type\");  \nString dt2 = reader.GetAttribute(\"type\",\"urn:datatypes\");  \n```  \n  \n To lookup the `xmlns:dt` attribute, use one of the following arguments:  \n  \n```  \nString dt3 = reader.GetAttribute(\"xmlns:dt\");  \nString dt4 = reader.GetAttribute(\"dt\",http://www.w3.org/2000/xmlns/);  \n```  \n  \n You can also get this information using the <xref:System.Xml.XmlTextReader.Prefix%2A> property."
  syntax:
    content: public override string GetAttribute (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "The local name of the attribute."
    - id: namespaceURI
      type: System.String
      description: "The namespace URI of the attribute."
    return:
      type: System.String
      description: "To be added."
  overload: System.Xml.XmlTextReader.GetAttribute*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  id: GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "GetNamespacesInScope(XmlNamespaceScope)"
  nameWithType: XmlTextReader.GetNamespacesInScope(XmlNamespaceScope)
  fullName: System.Xml.XmlTextReader.GetNamespacesInScope(XmlNamespaceScope)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets a collection that contains all namespaces currently in-scope.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n The dictionary consists of a collection of namespace names keyed by prefix. It can be used to enumerate the in-scope namespaces. The dictionary is a disconnected copy of the namespace list of the reader. It remains unchanged as the reader position, current in-scope namespace list, changes.  \n  \n The following table describes how the <xref:System.Xml.XmlNamespaceScope> enumeration value affects the whether or not the default and built-in namespaces are returned by GetNamespacesInScope.  \n  \n|XmlNamespaceScope Value|xmlns:xml|xmlns:xmlns|xmlns=\"\"|  \n|-----------------------------|---------------|-----------------|---------------|  \n|`All`|yes|no|no|  \n|`ExcludeXml`|no|no|no|  \n|`Local`|no|no|yes|"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);
    parameters:
    - id: scope
      type: System.Xml.XmlNamespaceScope
      description: "An <xref:System.Xml.XmlNamespaceScope> value that specifies the type of namespace nodes to return."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "To be added."
  overload: System.Xml.XmlTextReader.GetNamespacesInScope*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.GetRemainder
  id: GetRemainder
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "GetRemainder()"
  nameWithType: XmlTextReader.GetRemainder()
  fullName: System.Xml.XmlTextReader.GetRemainder()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the remainder of the buffered XML.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n Because <xref:System.Xml.XmlTextReader> does a buffered `Read`, it must be able to return the remainder of the unused buffer so that no data is lost. This allows protocols (such as multi-part MIME) to package XML in the same stream as other things.  \n  \n After calling this method, <xref:System.Xml.XmlTextReader.EOF%2A> is set to `true`."
  example:
  - "The following example reads the first part of an XML document and then uses `GetRemainder` to complete reading the document using a second reader.  \n  \n [!code-cpp[Classic WebData XmlTextReader.GetRemainder Example#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_7_1.cpp)]\n [!code-cs[Classic WebData XmlTextReader.GetRemainder Example#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_7_1.cs)]\n [!code-vb[Classic WebData XmlTextReader.GetRemainder Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_7_1.vb)]  \n  \n The example uses the input file `tworeads.xml`.  \n  \n [!code-xml[Classic WebData XmlTextReader.GetRemainder Example#2](~/add/codesnippet/XML/m-system.xml.xmltextread_7_2.xml)]"
  syntax:
    content: public System.IO.TextReader GetRemainder ();
    parameters: []
    return:
      type: System.IO.TextReader
      description: "To be added."
  overload: System.Xml.XmlTextReader.GetRemainder*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.HasLineInfo
  id: HasLineInfo
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "HasLineInfo()"
  nameWithType: XmlTextReader.HasLineInfo()
  fullName: System.Xml.XmlTextReader.HasLineInfo()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets a value indicating whether the class can return line information.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  syntax:
    content: public bool HasLineInfo ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Xml.XmlTextReader.HasLineInfo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.HasValue
  id: HasValue
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "HasValue"
  nameWithType: XmlTextReader.HasValue
  fullName: System.Xml.XmlTextReader.HasValue
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets a value indicating whether the current node can have a &lt;xref:System.Xml.XmlTextReader.Value%2A&gt; other than <xref uid="langword_csharp_String.Empty" name="String.Empty" href=""></xref>.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n The following table lists node types that have a value to return.  \n  \n|Node type|Value|  \n|---------------|-----------|  \n|`Attribute`|The value of the attribute.|  \n|`CDATA`|The content of the CDATA section.|  \n|`Comment`|The content of the comment.|  \n|`DocumentType`|The internal subset.|  \n|`ProcessingInstruction`|The entire content, excluding the target.|  \n|`SignificantWhitespace`|The white space between markup in a mixed content model.|  \n|`Text`|The content of the text node.|  \n|`Whitespace`|The white space between markup.|  \n|`XmlDeclaration`|The content of the declaration.|"
  example:
  - "The following example displays the value for every node that can have a value.  \n  \n [!code-cs[Classic WebData XmlTextReader.HasValue Example#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_17_1.cs)]\n [!code-cpp[Classic WebData XmlTextReader.HasValue Example#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_17_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.HasValue Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_17_1.vb)]  \n  \n The example uses the file, `book1.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlTextReader.HasValue Example#2](~/add/codesnippet/XML/p-system.xml.xmltextread_17_2.xml)]"
  syntax:
    content: public override bool HasValue { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the node on which the reader is currently positioned can have a <xref uid=&quot;langword_csharp_Value&quot; name=&quot;Value&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.HasValue*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.IsDefault
  id: IsDefault
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "IsDefault"
  nameWithType: XmlTextReader.IsDefault
  fullName: System.Xml.XmlTextReader.IsDefault
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property applies only to attribute nodes."
  syntax:
    content: public override bool IsDefault { get; }
    return:
      type: System.Boolean
      description: "This property always returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. (<see cref=&quot;T:System.Xml.XmlTextReader&quot;></see> does not expand default attributes.)"
  overload: System.Xml.XmlTextReader.IsDefault*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.IsEmptyElement
  id: IsEmptyElement
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "IsEmptyElement"
  nameWithType: XmlTextReader.IsEmptyElement
  fullName: System.Xml.XmlTextReader.IsEmptyElement
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets a value indicating whether the current node is an empty element (for example, `<MyElement></MyElement>`).
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property enables you to determine the difference between the following:  \n  \n `<item num=\"123\"/>` (`IsEmptyElement` is `true`).  \n  \n `<item num=\"123\">` (`IsEmptyElement` is `false`, although element content is empty).  \n  \n A corresponding `EndElement` node is not generated for empty elements.  \n  \n `IsEmptyElement` simply reports whether or not the element in the source document had an end element tag."
  example:
  - "The following example displays the text content of each element.  \n  \n [!code-cs[Classic WebData XmlReader.IsStartElement Example#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_13_1.cs)]\n [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_13_1.cpp)]\n [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_13_1.vb)]  \n  \n The example uses the file, `elems.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/add/codesnippet/XML/p-system.xml.xmltextread_13_2.xml)]"
  syntax:
    content: public override bool IsEmptyElement { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the current node is an element (&lt;xref:System.Xml.XmlTextReader.NodeType%2A&gt; equals <xref uid=&quot;langword_csharp_XmlNodeType.Element&quot; name=&quot;XmlNodeType.Element&quot; href=&quot;&quot;></xref>) that ends with `/&gt;`; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.IsEmptyElement*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.LineNumber
  id: LineNumber
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "LineNumber"
  nameWithType: XmlTextReader.LineNumber
  fullName: System.Xml.XmlTextReader.LineNumber
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the current line number.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property is most commonly used for error reporting, but can be called at any time. The starting value for this property is `1`.  \n  \n Combined with <xref:System.Xml.XmlTextReader.LinePosition%2A>, a value of `1,1` indicates the start of the document."
  example:
  - "The following example displays each node including its depth, line number, and line position.  \n  \n [!code-vb[XmlTextReader.LineNum#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_4_1.vb)]\n [!code-cpp[XmlTextReader.LineNum#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_4_1.cpp)]\n [!code-cs[XmlTextReader.LineNum#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_4_1.cs)]"
  syntax:
    content: public int LineNumber { get; }
    return:
      type: System.Int32
      description: "The current line number."
  overload: System.Xml.XmlTextReader.LineNumber*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.LinePosition
  id: LinePosition
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "LinePosition"
  nameWithType: XmlTextReader.LinePosition
  fullName: System.Xml.XmlTextReader.LinePosition
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the current line position.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property is most commonly used for error reporting, but can be called at any time. The property's starting value is `1`.  \n  \n The position indicated is the first character of text in the markup.  \n  \n```  \n<root>  \nabc<tag/>  \n</root>  \n```  \n  \n On the first line of the preceding XML text, a `LinePosition` of `2` corresponds to the character `r`; on the second line, a `LinePosition` of `5` corresponds to the character `t`; and on the third line, a `LinePosition` of `3` corresponds to the character `r`.  \n  \n Combined with <xref:System.Xml.XmlTextReader.LineNumber%2A>, a value of `1,1` indicates the start of the document."
  example:
  - "The following example displays each node including its depth, line number, and line position.  \n  \n [!code-vb[XmlTextReader.LineNum#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_9_1.vb)]\n [!code-cpp[XmlTextReader.LineNum#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_9_1.cpp)]\n [!code-cs[XmlTextReader.LineNum#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_9_1.cs)]"
  syntax:
    content: public int LinePosition { get; }
    return:
      type: System.Int32
      description: "The current line position."
  overload: System.Xml.XmlTextReader.LinePosition*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.LocalName
  id: LocalName
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "LocalName"
  nameWithType: XmlTextReader.LocalName
  fullName: System.Xml.XmlTextReader.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: "The name of the current node with the prefix removed. For example, <xref uid=&quot;langword_csharp_LocalName&quot; name=&quot;LocalName&quot; href=&quot;&quot;></xref> is <xref uid=&quot;langword_csharp_book&quot; name=&quot;book&quot; href=&quot;&quot;></xref> for the element `"
  overload: System.Xml.XmlTextReader.LocalName*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.LookupNamespace(System.String)
  id: LookupNamespace(System.String)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "LookupNamespace(String)"
  nameWithType: XmlTextReader.LookupNamespace(String)
  fullName: System.Xml.XmlTextReader.LookupNamespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Resolves a namespace prefix in the current element's scope.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n In the following XML, if the reader is positioned on the `href` attribute, the prefix `a` is resolved by calling `reader.LookupNamespace(\"a\")`. The returned string is `urn:456`.  \n  \n```  \n<root xmlns:a=\"urn:456\">  \n <item>  \n <ref href=\"a:b\"/>  \n </item>  \n</root>  \n```"
  syntax:
    content: public override string LookupNamespace (string prefix);
    parameters:
    - id: prefix
      type: System.String
      description: "The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized."
    return:
      type: System.String
      description: "To be added."
  overload: System.Xml.XmlTextReader.LookupNamespace*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref:System.Xml.XmlTextReader.Namespaces%2A> property is set to  and the prefix value is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.MoveToAttribute(System.Int32)
  id: MoveToAttribute(System.Int32)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "MoveToAttribute(Int32)"
  nameWithType: XmlTextReader.MoveToAttribute(Int32)
  fullName: System.Xml.XmlTextReader.MoveToAttribute(Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Moves to the attribute with the specified index.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  example:
  - "The following example displays all attributes on the current node.  \n  \n [!code-cs[Classic WebData XmlTextReader.MoveToElement Example#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_10_1.cs)]\n [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_10_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_10_1.vb)]"
  syntax:
    content: public override void MoveToAttribute (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "The index of the attribute."
  overload: System.Xml.XmlTextReader.MoveToAttribute*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The i parameter is less than 0 or greater than or equal to <xref:System.Xml.XmlReader.AttributeCount%2A>."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.MoveToAttribute(System.String)
  id: MoveToAttribute(System.String)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "MoveToAttribute(String)"
  nameWithType: XmlTextReader.MoveToAttribute(String)
  fullName: System.Xml.XmlTextReader.MoveToAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Moves to the attribute with the specified name.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n After calling `MoveToAttribute`, the <xref:System.Xml.XmlTextReader.Name%2A>, <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, and <xref:System.Xml.XmlTextReader.Prefix%2A> properties reflects the properties of that attribute."
  syntax:
    content: public override bool MoveToAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "The qualified name of the attribute."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Xml.XmlTextReader.MoveToAttribute*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)
  id: MoveToAttribute(System.String,System.String)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "MoveToAttribute(String,String)"
  nameWithType: XmlTextReader.MoveToAttribute(String,String)
  fullName: System.Xml.XmlTextReader.MoveToAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Moves to the attribute with the specified local name and namespace URI.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n After calling `MoveToAttribute`, the <xref:System.Xml.XmlTextReader.Name%2A>, <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, and <xref:System.Xml.XmlTextReader.Prefix%2A> properties reflects the properties of that attribute."
  syntax:
    content: public override bool MoveToAttribute (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "The local name of the attribute."
    - id: namespaceURI
      type: System.String
      description: "The namespace URI of the attribute."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Xml.XmlTextReader.MoveToAttribute*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.MoveToElement
  id: MoveToElement
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "MoveToElement()"
  nameWithType: XmlTextReader.MoveToElement()
  fullName: System.Xml.XmlTextReader.MoveToElement()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Moves to the element that contains the current attribute node.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n Use this method to return to an element after navigating through its attributes. This method moves the reader to one of the following node types: `Element`, `DocumentType`, or `XmlDeclaration`."
  example:
  - "The following example displays all attributes on the current node.  \n  \n [!code-cs[Classic WebData XmlTextReader.MoveToElement Example#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_2_1.cs)]\n [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_2_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_2_1.vb)]"
  syntax:
    content: public override bool MoveToElement ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Xml.XmlTextReader.MoveToElement*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.MoveToFirstAttribute
  id: MoveToFirstAttribute
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "MoveToFirstAttribute()"
  nameWithType: XmlTextReader.MoveToFirstAttribute()
  fullName: System.Xml.XmlTextReader.MoveToFirstAttribute()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Moves to the first attribute.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  example:
  - "The following example gets the value of the first attribute of the root node.  \n  \n [!code-cs[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_11_1.cs)]\n [!code-cpp[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_11_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_11_1.vb)]  \n  \n The example uses the file, `attrs.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlTextReader.MoveToFirstAttribute Example#2](~/add/codesnippet/XML/m-system.xml.xmltextread_11_2.xml)]"
  syntax:
    content: public override bool MoveToFirstAttribute ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Xml.XmlTextReader.MoveToFirstAttribute*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.MoveToNextAttribute
  id: MoveToNextAttribute
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "MoveToNextAttribute()"
  nameWithType: XmlTextReader.MoveToNextAttribute()
  fullName: System.Xml.XmlTextReader.MoveToNextAttribute()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Moves to the next attribute.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n If the current node is an element node, this method is equivalent to <xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A>. If `MoveToNextAttribute` returns `true`, the reader moves to the next attribute; otherwise, the position of the reader does not change."
  example:
  - "The following example displays all attributes on the current node.  \n  \n [!code-cs[Classic WebData XmlReader.HasAttributes Example#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_14_1.cs)]\n [!code-vb[Classic WebData XmlReader.HasAttributes Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_14_1.vb)]\n [!code-cpp[Classic WebData XmlReader.HasAttributes Example#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_14_1.cpp)]"
  syntax:
    content: public override bool MoveToNextAttribute ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Xml.XmlTextReader.MoveToNextAttribute*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.Name
  id: Name
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "Name"
  nameWithType: XmlTextReader.Name
  fullName: System.Xml.XmlTextReader.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "The qualified name of the current node. For example, <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;></xref> is <xref uid=&quot;langword_csharp_bk:book&quot; name=&quot;bk:book&quot; href=&quot;&quot;></xref> for the element `"
  overload: System.Xml.XmlTextReader.Name*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.Namespaces
  id: Namespaces
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "Namespaces"
  nameWithType: XmlTextReader.Namespaces
  fullName: System.Xml.XmlTextReader.Namespaces
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets or sets a value indicating whether to do namespace support.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property determines whether the reader supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.  \n  \n The `Namespaces` property cannot be set after a read operation has occurred."
  syntax:
    content: public bool Namespaces { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to do namespace support; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.Namespaces*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Setting this property after a read operation has occurred (<xref:System.Xml.XmlTextReader.ReadState%2A> is not )."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.NamespaceURI
  id: NamespaceURI
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "NamespaceURI"
  nameWithType: XmlTextReader.NamespaceURI
  fullName: System.Xml.XmlTextReader.NamespaceURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property is relevant to `Element` and `Attribute` nodes only."
  example:
  - "The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.  \n  \n [!code-cs[Classic WebData XmlTextReader.LocalName Example#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_15_1.cs)]\n [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_15_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_15_1.vb)]  \n  \n The example uses the file, `book2.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/add/codesnippet/XML/p-system.xml.xmltextread_15_2.xml)]"
  syntax:
    content: public override string NamespaceURI { get; }
    return:
      type: System.String
      description: "The namespace URI of the current node; otherwise an empty string."
  overload: System.Xml.XmlTextReader.NamespaceURI*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.NameTable
  id: NameTable
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "NameTable"
  nameWithType: XmlTextReader.NameTable
  fullName: System.Xml.XmlTextReader.NameTable
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the &lt;xref:System.Xml.XmlNameTable&gt; associated with this implementation.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n All node and attribute names returned from <xref:System.Xml.XmlTextReader> are atomized using the `NameTable`. When the same name is returned multiple times (for example, `Customer`), then the same `String` object is returned for that name. This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons."
  syntax:
    content: public override System.Xml.XmlNameTable NameTable { get; }
    return:
      type: System.Xml.XmlNameTable
      description: "The <xref uid=&quot;langword_csharp_XmlNameTable&quot; name=&quot;XmlNameTable&quot; href=&quot;&quot;></xref> enabling you to get the atomized version of a string within the node."
  overload: System.Xml.XmlTextReader.NameTable*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.NodeType
  id: NodeType
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "NodeType"
  nameWithType: XmlTextReader.NodeType
  fullName: System.Xml.XmlTextReader.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the type of the current node.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property never returns the following `XmlNodeType` types: `Document`, `DocumentFragment`, `Entity`, `EndEntity`, or `Notation`."
  example:
  - "The following example reads an XML file and displays each of the nodes.  \n  \n [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_11_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_11_1.vb)]\n [!code-cs[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_11_1.cs)]  \n  \n The sample uses the file `items.xml`.  \n  \n [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/add/codesnippet/XML/p-system.xml.xmltextread_11_2.xml)]"
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "One of the &lt;xref:System.Xml.XmlNodeType&gt; values representing the type of the current node."
  overload: System.Xml.XmlTextReader.NodeType*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.Normalization
  id: Normalization
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "Normalization"
  nameWithType: XmlTextReader.Normalization
  fullName: System.Xml.XmlTextReader.Normalization
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets or sets a value indicating whether to normalize white space and attribute values.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property can be changed at any time and takes effect on the next read operation.  \n  \n> [!NOTE]\n>  If the <xref:System.Xml.XmlTextReader> is used to construct an <xref:System.Xml.XmlValidatingReader>, to normalize attribute values, `Normalization` must be set to `true`.  \n  \n If `Normalization` is set to `false`, this also disables character range checking for numeric entities. As a result, character entities, such as `\\0`, are allowed.  \n  \n The following describes attribute value normalization:  \n  \n-   For a character reference, append the referenced character to the attribute value.  \n  \n-   For an entity reference, recursively process the replacement text of the entity.  \n  \n-   For a white space character (#x20, #xD, #xA, #x9), append #x20 to the normalized value. (Only a single #x20 is appended for a \"#xD#xA\" sequence that is part of an external parsed entity or the literal entity value of an internal parsed entity.)  \n  \n-   Process other characters by appending them to the normalized value.  \n  \n-   If the declared value is not CDATA, discard any leading and trailing space (#x20) characters and replace sequences of space (#x20) characters with a single space (#x20) character.  \n  \n The `XmlTextReader` only performs attribute or CDATA normalization. It does not do DTD-specific normalization unless wrapped within an `XmlValidatingReader`.  \n  \n Refer to the W3C XML 1.0 recommendation for further discussion on normalization."
  example:
  - "The following example shows reader behavior with normalization turned on and then off.  \n  \n [!code-cpp[XmlTextReader.Normalization#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_7_1.cpp)]\n [!code-cs[XmlTextReader.Normalization#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_7_1.cs)]\n [!code-vb[XmlTextReader.Normalization#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_7_1.vb)]"
  syntax:
    content: public bool Normalization { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to normalize; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.Normalization*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Setting this property when the reader is closed (<xref:System.Xml.XmlTextReader.ReadState%2A> is )."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.Prefix
  id: Prefix
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "Prefix"
  nameWithType: XmlTextReader.Prefix
  fullName: System.Xml.XmlTextReader.Prefix
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the namespace prefix associated with the current node.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  example:
  - "The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.  \n  \n [!code-cs[Classic WebData XmlTextReader.LocalName Example#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_0_1.cs)]\n [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_0_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_0_1.vb)]  \n  \n The example uses the file, `book2.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/add/codesnippet/XML/p-system.xml.xmltextread_0_2.xml)]"
  syntax:
    content: public override string Prefix { get; }
    return:
      type: System.String
      description: "The namespace prefix associated with the current node."
  overload: System.Xml.XmlTextReader.Prefix*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ProhibitDtd
  id: ProhibitDtd
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ProhibitDtd"
  nameWithType: XmlTextReader.ProhibitDtd
  fullName: System.Xml.XmlTextReader.ProhibitDtd
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets or sets a value indicating whether to allow DTD processing. This property is obsolete. Use &lt;xref:System.Xml.XmlTextReader.DtdProcessing%2A&gt; instead.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n DTD processing is enabled by default for backwards compatibility. However, unless your application requires DTD processing, you should disable this setting. Disabling DTD processing can be useful in preventing certain denial of service attacks. If set to `true`, the reader throws an <xref:System.Xml.XmlException> when any DTD content is encountered.  \n  \n If you have DTD processing enabled, you need to be aware of including DTDs from untrusted sources and possible denial of service attacks. Use the <xref:System.Xml.XmlSecureResolver> to restrict the resources that the <xref:System.Xml.XmlTextReader> can access. You can also design your application so that the XML processing is memory and time constrained. For example, configure time-out limits in your ASP.NET application"
  syntax:
    content: public bool ProhibitDtd { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to disallow DTD processing; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.ProhibitDtd*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.QuoteChar
  id: QuoteChar
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "QuoteChar"
  nameWithType: XmlTextReader.QuoteChar
  fullName: System.Xml.XmlTextReader.QuoteChar
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the quotation mark character used to enclose the value of an attribute node.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property applies only to an attribute node."
  syntax:
    content: public override char QuoteChar { get; }
    return:
      type: System.Char
      description: "The quotation mark character (&quot; or &quot;) used to enclose the value of an attribute node."
  overload: System.Xml.XmlTextReader.QuoteChar*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.Read
  id: Read
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "Read()"
  nameWithType: XmlTextReader.Read()
  fullName: System.Xml.XmlTextReader.Read()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Reads the next node from the stream.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n When a reader is first created and initialized, there is no information available. You must call `Read` to read the first node.  \n  \n This method requires at least four bytes from the data stream in order to begin parsing. If fewer than four bytes are returned and there is no more data in the stream, the method will fail. If there is more data in the stream, the method will block parsing until receipt of the fourth byte."
  example:
  - "The following example reads an XML file and displays each node.  \n  \n [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_5_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_5_1.vb)]\n [!code-cs[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_5_1.cs)]  \n  \n The sample uses the file `items.xml`.  \n  \n [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/add/codesnippet/XML/m-system.xml.xmltextread_5_2.xml)]"
  syntax:
    content: public override bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Xml.XmlTextReader.Read*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "An error occurred while parsing the XML."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ReadAttributeValue
  id: ReadAttributeValue
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ReadAttributeValue()"
  nameWithType: XmlTextReader.ReadAttributeValue()
  fullName: System.Xml.XmlTextReader.ReadAttributeValue()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Parses the attribute value into one or more <xref uid="langword_csharp_Text" name="Text" href=""></xref>, <xref uid="langword_csharp_EntityReference" name="EntityReference" href=""></xref>, or <xref uid="langword_csharp_EndEntity" name="EndEntity" href=""></xref> nodes.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n Use this method after calling `MoveToAttribute` to read through the text or entity reference nodes that make up the attribute value. The <xref:System.Xml.XmlReader.Depth%2A> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references."
  example:
  - "The following example reads an attribute with text and entity nodes.  \n  \n [!code-cpp[XmlTextReader.ReadAttributeValue#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_12_1.cpp)]\n [!code-vb[XmlTextReader.ReadAttributeValue#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_12_1.vb)]\n [!code-cs[XmlTextReader.ReadAttributeValue#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_12_1.cs)]"
  syntax:
    content: public override bool ReadAttributeValue ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Xml.XmlTextReader.ReadAttributeValue*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)
  id: ReadBase64(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ReadBase64(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadBase64(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadBase64(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  syntax:
    content: public int ReadBase64 (byte[] array, int offset, int len);
    parameters:
    - id: array
      type: System.Byte[]
      description: "The array of characters that serves as the buffer to which the text contents are written."
    - id: offset
      type: System.Int32
      description: "The zero-based index into the array specifying where the method can begin to write to the buffer."
    - id: len
      type: System.Int32
      description: "The number of bytes to write into the buffer."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Xml.XmlTextReader.ReadBase64*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "The Base64 sequence is not valid."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The value of array is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)
  id: ReadBinHex(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ReadBinHex(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadBinHex(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadBinHex(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  syntax:
    content: public int ReadBinHex (byte[] array, int offset, int len);
    parameters:
    - id: array
      type: System.Byte[]
      description: "The byte array that serves as the buffer to which the decoded binary bytes are written."
    - id: offset
      type: System.Int32
      description: "The zero-based index into the array specifying where the method can begin to write to the buffer."
    - id: len
      type: System.Int32
      description: "The number of bytes to write into the buffer."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Xml.XmlTextReader.ReadBinHex*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "The  sequence is not valid."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The value of array is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)
  id: ReadChars(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ReadChars(Char[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadChars(Char[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadChars(Char[],Int32,Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Reads the text contents of an element into a character buffer. This method is designed to read large streams of embedded text by calling it successively.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This is the most efficient way to process very large streams of text embedded in an XML document. Rather than allocating large string objects, `ReadChars` returns text content a buffer at a time. This method is designed to work only on element nodes. Other node types cause `ReadChars` to return `0`.  \n  \n In the following XML, if the reader is positioned on the start tag, `ReadChars` returns `test` and positions the reader after the end tag.  \n  \n```  \n<Item>test</Item>  \n```  \n  \n `ReadChars` has the following functionality:  \n  \n-   This method is designed to work on element nodes only. Other node types cause `ReadChars` to return 0.  \n  \n-   This method returns the actual character content. There is no attempt to resolve entities, CDATA, or any other markup encountered. `ReadChars` returns everything between the start tag and the end tag, including markup.  \n  \n-   `ReadChars` ignores XML markup that is not well-formed. For example, when reading the following XML string `<A>1<A>2</A>`, `ReadChars` returns `1<A>2</A>`. (It returns markup from the matching element pair and ignores others.)  \n  \n-   This method does not do any normalization.  \n  \n-   When `ReadChars` has reached the end of the character stream, it returns the value 0 and the reader is positioned after the end tag.  \n  \n-   Attribute read methods are not available while using `ReadChars`.  \n  \n For example, using the following XML:  \n  \n```  \n<thing>  \n some text  \n</thing>  \n<item>  \n</item>  \n```  \n  \n The reader is positioned on the `<item>` element at the end of the while loop.  \n  \n```  \nif (XmlNodeType.Element == reader.NodeType && \"thing\" == reader.Name)  \n{  \n while(0 != reader.ReadChars(buffer, 0, 1)  \n {  \n // Do something.  \n // Attribute values are not available at this point.  \n }  \n}  \n```"
  example:
  - "The following example reads in XML using `ReadChars`.  \n  \n [!code-cpp[Classic WebData XmlTextReader.ReadChars Example#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_0_1.cpp)]\n [!code-cs[Classic WebData XmlTextReader.ReadChars Example#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_0_1.cs)]\n [!code-vb[Classic WebData XmlTextReader.ReadChars Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_0_1.vb)]  \n  \n The example uses the `items.xml` file as input.  \n  \n [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/add/codesnippet/XML/m-system.xml.xmltextread_0_2.xml)]"
  syntax:
    content: public int ReadChars (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "The array of characters that serves as the buffer to which the text contents are written."
    - id: index
      type: System.Int32
      description: "The position within `buffer` where the method can begin writing text contents."
    - id: count
      type: System.Int32
      description: "The number of characters to write into `buffer`."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Xml.XmlTextReader.ReadChars*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    count is greater than the space specified in the buffer (buffer size - index)."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The buffer value is ."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n    index\n     or count."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  id: ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ReadContentAsBase64(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadContentAsBase64(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadContentAsBase64(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Reads the content and returns the <xref uid="langword_csharp_Base64" name="Base64" href=""></xref> decoded binary bytes.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This method streams the content, decodes the `Base64` content, and returns the decoded binary bytes (for example, an inline `Base64`-encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text. For more information, see RFC 1521, \"MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies\". You can obtain RFCs from the Request for Comments Web site at http://www.rfc-editor.org.  \n  \n> [!NOTE]\n>  You should not access any of the reader properties between calls to the ReadContentAsBase64 method until the method returns the value 0.  \n  \n This method has the following behavior:  \n  \n-   ReadContentAsBase64 returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  \n  \n-   If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.  \n  \n-   ReadContentAsBase64 is not supported on the following XML node types: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation`, `Entity`, `DocumentFragment`."
  syntax:
    content: public override int ReadContentAsBase64 (byte[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "The buffer into which to copy the resulting text. This value cannot be ."
    - id: index
      type: System.Int32
      description: "The offset into the buffer where to start copying the result."
    - id: count
      type: System.Int32
      description: "The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Xml.XmlTextReader.ReadContentAsBase64*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The buffer value is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ReadContentAsBase64 is not supported in the current node."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The index into the buffer or index + count is larger than the allocated buffer size."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  id: ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ReadContentAsBinHex(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadContentAsBinHex(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadContentAsBinHex(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Reads the content and returns the <xref uid="langword_csharp_BinHex" name="BinHex" href=""></xref> decoded binary bytes.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This method streams the content, decodes the `BinHex` content, and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text.  \n  \n> [!NOTE]\n>  You should not access any of the reader properties between calls to the ReadContentAsBinHex method until the method returns the value 0.  \n  \n This method has the following behavior:  \n  \n-   ReadContentAsBinHex returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  \n  \n-   If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.  \n  \n-   ReadContentAsBinHex is not supported on the following XML node types: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation`, `Entity`, `DocumentFragment`."
  syntax:
    content: public override int ReadContentAsBinHex (byte[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "The buffer into which to copy the resulting text. This value cannot be ."
    - id: index
      type: System.Int32
      description: "The offset into the buffer where to start copying the result."
    - id: count
      type: System.Int32
      description: "The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Xml.XmlTextReader.ReadContentAsBinHex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The buffer value is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ReadContentAsBinHex is not supported on the current node."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The index into the buffer or index + count is larger than the allocated buffer size."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The  implementation does not support this method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  id: ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ReadElementContentAsBase64(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadElementContentAsBase64(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadElementContentAsBase64(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Reads the element and decodes the Base64 content.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. For more information, see RFC 1521, \"MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies\". You can obtain RFCs from the Request for Comments Web site at http://www.rfc-editor.org.  \n  \n This method can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  \n  \n This method is very similar to the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> method except that it can only be called on element node types.  \n  \n If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlTextReader> reads all the remaining bytes in the document and returns the number of bytes read. The next <xref:System.Xml.XmlTextReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType>.  \n  \n If you call <xref:System.Xml.XmlTextReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlTextReader.Read%2A> method was called. This means that the reader reads all the text until the end element is encountered. It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node."
  example:
  - See <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=fullName> to see an example using this method.
  syntax:
    content: public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "The buffer into which to copy the resulting text. This value cannot be ."
    - id: index
      type: System.Int32
      description: "The offset into the buffer where to start copying the result."
    - id: count
      type: System.Int32
      description: "The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Xml.XmlTextReader.ReadElementContentAsBase64*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The buffer value is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The current node is not an element node."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The index into the buffer or index + count is larger than the allocated buffer size."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The  implementation does not support this method."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "The element contains mixed-content."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "The content cannot be converted to the requested type."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  id: ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ReadElementContentAsBinHex(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadElementContentAsBinHex(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadElementContentAsBinHex(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Reads the element and decodes the <xref uid="langword_csharp_BinHex" name="BinHex" href=""></xref> content.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This method reads the element content, decodes it using `BinHex` encoding, and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.  \n  \n This method can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  \n  \n This method is very similar to the <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> method except that it can only be called on element node types.  \n  \n If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlTextReader> reads all the remaining bytes in the document and returns the number of bytes read. The next <xref:System.Xml.XmlTextReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType>.  \n  \n If you call <xref:System.Xml.XmlTextReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlTextReader.Read%2A> method was called. This means that the reader reads all the text until the end element is encountered. It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node."
  example:
  - See <xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=fullName> to see an example using this method.
  syntax:
    content: public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "The buffer into which to copy the resulting text. This value cannot be ."
    - id: index
      type: System.Int32
      description: "The offset into the buffer where to start copying the result."
    - id: count
      type: System.Int32
      description: "The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method."
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Xml.XmlTextReader.ReadElementContentAsBinHex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The buffer value is ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The current node is not an element node."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The index into the buffer or index + count is larger than the allocated buffer size."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <xref:System.Xml.XmlReader> implementation does not support this method."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "The element contains mixed-content."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "The content cannot be converted to the requested type."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ReadState
  id: ReadState
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ReadState"
  nameWithType: XmlTextReader.ReadState
  fullName: System.Xml.XmlTextReader.ReadState
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the state of the reader.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  syntax:
    content: public override System.Xml.ReadState ReadState { get; }
    return:
      type: System.Xml.ReadState
      description: "One of the &lt;xref:System.Xml.ReadState&gt; values."
  overload: System.Xml.XmlTextReader.ReadState*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ReadString
  id: ReadString
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ReadString()"
  nameWithType: XmlTextReader.ReadString()
  fullName: System.Xml.XmlTextReader.ReadString()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Reads the contents of an element or a text node as a string.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n If positioned on an element, `ReadString` concatenates all text, significant white space, white space, and `CData` section node types together and returns the concatenated data as the element content. It stops when any markup is encountered, including comments and processing instructions. This could occur in a mixed content model, or when an element end tag is read.  \n  \n If positioned on a text node, `ReadString` performs the same concatenation from the text node to the element end tag. If the reader is positioned on an attribute text node, `ReadString` has the same functionality as if the reader were position on the element start tag. It returns all the concatenated element text nodes."
  example:
  - "The following example displays the text content of each element.  \n  \n [!code-cs[Classic WebData XmlReader.IsStartElement Example#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_6_1.cs)]\n [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_6_1.cpp)]\n [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_6_1.vb)]  \n  \n The example uses the file, `elems.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/add/codesnippet/XML/m-system.xml.xmltextread_6_2.xml)]"
  syntax:
    content: public override string ReadString ();
    parameters: []
    return:
      type: System.String
      description: "To be added."
  overload: System.Xml.XmlTextReader.ReadString*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "An error occurred while parsing the XML."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "An invalid operation was attempted."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ResetState
  id: ResetState
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ResetState()"
  nameWithType: XmlTextReader.ResetState()
  fullName: System.Xml.XmlTextReader.ResetState()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Resets the state of the reader to ReadState.Initial.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This method enables you to parse multiple XML documents in a single stream. When you reach the end of an XML document, you can call `ResetState` to reset the state of the reader in preparation for the next XML document.  \n  \n> [!IMPORTANT]\n>  The documents in the stream must share the same encoding. If this is not the case, when `ResetState` is called an <xref:System.Xml.XmlException> is thrown. (This is a change in behavior from .NET Framework version 1.1 and earlier).  \n  \n The following properties are not affected by `ResetState`.  \n  \n-   <xref:System.Xml.XmlTextReader.Normalization%2A>  \n  \n-   <xref:System.Xml.XmlTextReader.Namespaces%2A>  \n  \n-   <xref:System.Xml.XmlTextReader.XmlResolver%2A>  \n  \n-   <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A>"
  example:
  - "The following example parses two XML documents in a single stream.  \n  \n [!code-cs[XmlTextReader.ResetState#1](~/add/codesnippet/CSharp/m-system.xml.xmltextread_4_1.cs)]\n [!code-vb[XmlTextReader.ResetState#1](~/add/codesnippet/VisualBasic/m-system.xml.xmltextread_4_1.vb)]\n [!code-cpp[XmlTextReader.ResetState#1](~/add/codesnippet/CPP/m-system.xml.xmltextread_4_1.cpp)]"
  syntax:
    content: public void ResetState ();
    parameters: []
  overload: System.Xml.XmlTextReader.ResetState*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Calling  if the reader was constructed using an <xref:System.Xml.XmlParserContext>."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Documents in a single stream do not share the same encoding."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.ResolveEntity
  id: ResolveEntity
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "ResolveEntity()"
  nameWithType: XmlTextReader.ResolveEntity()
  fullName: System.Xml.XmlTextReader.ResolveEntity()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Resolves the entity reference for <xref uid="langword_csharp_EntityReference" name="EntityReference" href=""></xref> nodes.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n If the reader is positioned on an `EntityReference` node (`XmlNodeType.EntityReference`), if <xref:System.Xml.XmlTextReader.Read%2A> is called after calling this method, the entity replacement text is parsed. When the entity replacement text is finished, an `EndEntity` node is returned to close the entity reference scope.  \n  \n> [!NOTE]\n>  After calling this method, if the entity is part of an attribute value, you must call <xref:System.Xml.XmlTextReader.ReadAttributeValue%2A> to step into the entity."
  syntax:
    content: public override void ResolveEntity ();
    parameters: []
  overload: System.Xml.XmlTextReader.ResolveEntity*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.Skip
  id: Skip
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "Skip()"
  nameWithType: XmlTextReader.Skip()
  fullName: System.Xml.XmlTextReader.Skip()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Skips the children of the current node.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n In the following XML input if the reader is positioned on the `<a>` node or any of its attributes, calling `Skip` positions the reader to the `<b>` node.  \n  \n If the reader is positioned on a leaf node already (such as the `<x>` node or the text node `abc`), calling `Skip` is the same as calling <xref:System.Xml.XmlTextReader.Read%2A>.  \n  \n```  \n<a name=\"bob\" age=\"123\">  \n  <x/>abc<y/>  \n</a>  \n<b>  \n ...  \n</b>  \n```  \n  \n This method checks for well-formed XML."
  syntax:
    content: public override void Skip ();
    parameters: []
  overload: System.Xml.XmlTextReader.Skip*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  id: System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  isEii: true
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)"
  nameWithType: XmlTextReader.System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)
  fullName: System.Xml.XmlTextReader.System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: For a description of this member, see &lt;xref:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.
  syntax:
    content: System.Collections.Generic.IDictionary<string,string> IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);
    parameters:
    - id: scope
      type: System.Xml.XmlNamespaceScope
      description: "An <xref:System.Xml.XmlNamespaceScope> value that specifies the type of namespace nodes to return."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "To be added."
  overload: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)
  id: System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)
  isEii: true
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "System.Xml.IXmlNamespaceResolver.LookupNamespace(String)"
  nameWithType: XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupNamespace(String)
  fullName: System.Xml.XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupNamespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: For a description of this member, see &lt;xref:System.Xml.IXmlNamespaceResolver.LookupNamespace%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.
  syntax:
    content: string IXmlNamespaceResolver.LookupNamespace (string prefix);
    parameters:
    - id: prefix
      type: System.String
      description: "The prefix whose namespace URI you wish to find."
    return:
      type: System.String
      description: "To be added."
  overload: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)
  id: System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)
  isEii: true
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "System.Xml.IXmlNamespaceResolver.LookupPrefix(String)"
  nameWithType: XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupPrefix(String)
  fullName: System.Xml.XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupPrefix(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: For a description of this member, see &lt;xref:System.Xml.IXmlNamespaceResolver.LookupPrefix%2A?displayProperty=fullName&gt;.
  syntax:
    content: string IXmlNamespaceResolver.LookupPrefix (string namespaceName);
    parameters:
    - id: namespaceName
      type: System.String
      description: "The namespace URI whose prefix you wish to find."
    return:
      type: System.String
      description: "To be added."
  overload: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.Value
  id: Value
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "Value"
  nameWithType: XmlTextReader.Value
  fullName: System.Xml.XmlTextReader.Value
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the text value of the current node.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  example:
  - "The following example reads an XML file and displays each node.  \n  \n [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_5_1.cpp)]\n [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_5_1.vb)]\n [!code-cs[Classic WebData XmlTextReader.Name Example#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_5_1.cs)]  \n  \n The sample uses the file `items.xml`.  \n  \n [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/add/codesnippet/XML/p-system.xml.xmltextread_5_2.xml)]"
  syntax:
    content: public override string Value { get; }
    return:
      type: System.String
      description: "The value returned depends on the &lt;xref:System.Xml.XmlTextReader.NodeType%2A&gt; of the node. The following table lists node types that have a value to return. All other node types return <xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>.       <table><thead><tr><th> Node Type       </th><th> Value       </th></tr></thead><tbody><tr><td><xref uid=&quot;langword_csharp_Attribute&quot; name=&quot;Attribute&quot; href=&quot;&quot;></xref></td><td> The value of the attribute.       </td></tr><tr><td><xref uid=&quot;langword_csharp_CDATA&quot; name=&quot;CDATA&quot; href=&quot;&quot;></xref></td><td> The content of the CDATA section.       </td></tr><tr><td><xref uid=&quot;langword_csharp_Comment&quot; name=&quot;Comment&quot; href=&quot;&quot;></xref></td><td> The content of the comment.       </td></tr><tr><td><xref uid=&quot;langword_csharp_DocumentType&quot; name=&quot;DocumentType&quot; href=&quot;&quot;></xref></td><td> The internal subset.       </td></tr><tr><td><xref uid=&quot;langword_csharp_ProcessingInstruction&quot; name=&quot;ProcessingInstruction&quot; href=&quot;&quot;></xref></td><td> The entire content, excluding the target.       </td></tr><tr><td><xref uid=&quot;langword_csharp_SignificantWhitespace&quot; name=&quot;SignificantWhitespace&quot; href=&quot;&quot;></xref></td><td> The white space within an <xref uid=&quot;langword_csharp_xml:space&quot; name=&quot;xml:space&quot; href=&quot;&quot;></xref>= &quot;preserve&quot; scope.       </td></tr><tr><td><xref uid=&quot;langword_csharp_Text&quot; name=&quot;Text&quot; href=&quot;&quot;></xref></td><td> The content of the text node.       </td></tr><tr><td><xref uid=&quot;langword_csharp_Whitespace&quot; name=&quot;Whitespace&quot; href=&quot;&quot;></xref></td><td> The white space between markup.       </td></tr><tr><td><xref uid=&quot;langword_csharp_XmlDeclaration&quot; name=&quot;XmlDeclaration&quot; href=&quot;&quot;></xref></td><td> The content of the declaration.       </td></tr></tbody></table>"
  overload: System.Xml.XmlTextReader.Value*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.WhitespaceHandling
  id: WhitespaceHandling
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "WhitespaceHandling"
  nameWithType: XmlTextReader.WhitespaceHandling
  fullName: System.Xml.XmlTextReader.WhitespaceHandling
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets or sets a value that specifies how white space is handled.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property can be changed at any time and takes effect on the next read operation.  \n  \n Because the `XmlTextReader` does not have DTD information available to it, `SignificantWhitepsace` nodes are only returned within an `xml:space='preserve'` scope."
  example:
  - "The following example reads an XML fragment.  \n  \n [!code-cpp[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_10_1.cpp)]\n [!code-cs[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_10_1.cs)]\n [!code-vb[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_10_1.vb)]"
  syntax:
    content: public System.Xml.WhitespaceHandling WhitespaceHandling { get; set; }
    return:
      type: System.Xml.WhitespaceHandling
      description: "One of the <see cref=&quot;T:System.Xml.WhitespaceHandling&quot;></see> values. The default is <xref uid=&quot;langword_csharp_WhitespaceHandling.All&quot; name=&quot;WhitespaceHandling.All&quot; href=&quot;&quot;></xref> (returns <xref uid=&quot;langword_csharp_Whitespace&quot; name=&quot;Whitespace&quot; href=&quot;&quot;></xref> and <xref uid=&quot;langword_csharp_SignificantWhitespace&quot; name=&quot;SignificantWhitespace&quot; href=&quot;&quot;></xref> nodes)."
  overload: System.Xml.XmlTextReader.WhitespaceHandling*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Invalid value specified."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Setting this property when the reader is closed (<xref:System.Xml.XmlTextReader.ReadState%2A> is )."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.XmlLang
  id: XmlLang
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlLang"
  nameWithType: XmlTextReader.XmlLang
  fullName: System.Xml.XmlTextReader.XmlLang
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the current <xref uid="langword_csharp_xml:lang" name="xml:lang" href=""></xref> scope.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n This property represents the `xml:lang` scope within which the current node resides. For example, here is an XML fragment with `xml:lang` set to US English in the root element:  \n  \n \\<root xml:lang=\"en-us\">  \n  \n \\<name>Fred\\</name>  \n  \n \\</root>  \n  \n When the reader is positioned on the `name` element, you can use this property to find that it is in the scope of a US English `xml:lang` attribute."
  example:
  - "The following example displays the `xml:lang` value for each of the nodes.  \n  \n [!code-cpp[XmlTextReader.XmlLang#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_3_1.cpp)]\n [!code-cs[XmlTextReader.XmlLang#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_3_1.cs)]\n [!code-vb[XmlTextReader.XmlLang#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_3_1.vb)]"
  syntax:
    content: public override string XmlLang { get; }
    return:
      type: System.String
      description: "The current <xref uid=&quot;langword_csharp_xml:lang&quot; name=&quot;xml:lang&quot; href=&quot;&quot;></xref> scope."
  overload: System.Xml.XmlTextReader.XmlLang*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.XmlResolver
  id: XmlResolver
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlResolver"
  nameWithType: XmlTextReader.XmlResolver
  fullName: System.Xml.XmlTextReader.XmlResolver
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Sets the <see cref="T:System.Xml.XmlResolver"></see> used for resolving DTD references.
  remarks: "> [!NOTE]\n>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  \n  \n The reader uses `XmlResolver` to resolve the location of the file loaded into the reader and also to resolve DTD references. For example, if your XML included the DOCTYPE declaration, `<!DOCTYPE book SYSTEM book.dtd>` the reader resolves this external file and ensures that the DTD is well-formed. The reader does not use the DTD for validation.  \n  \n This property can be changed at any time and takes effect on the next read operation. If this property is set to `null`, any external DTD references encountered by the reader are not resolved.  \n  \n In version 1.1 of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)], if this property is not set, the trust level of the application determines the default behavior.  \n  \n `Fully trusted code:` The reader uses a default <xref:System.Xml.XmlUrlResolver> with no user credentials. If authentication is required to access a network resource, use the `XmlResolver` property to specify an `XmlResolver` with the necessary credentials.  \n  \n `Semi-trusted code:` The `XmlResolver` property is set to `null`. External resources are not resolved."
  example:
  - "The following example uses the `XmlResolver` property to specify the credentials necessary to access the networked file.  \n  \n [!code-cs[XmlTextReader.XmlResolver#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_16_1.cs)]\n [!code-cpp[XmlTextReader.XmlResolver#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_16_1.cpp)]\n [!code-vb[XmlTextReader.XmlResolver#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_16_1.vb)]"
  syntax:
    content: public System.Xml.XmlResolver XmlResolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "The <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;></xref> to use. If set to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, external resources are not resolved.       In version 1.1 of the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)], the caller must be fully trusted in order to specify an <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.XmlResolver*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlTextReader.XmlSpace
  id: XmlSpace
  parent: System.Xml.XmlTextReader
  langs:
  - csharp
  name: "XmlSpace"
  nameWithType: XmlTextReader.XmlSpace
  fullName: System.Xml.XmlTextReader.XmlSpace
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Gets the current <xref uid="langword_csharp_xml:space" name="xml:space" href=""></xref> scope.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.
  example:
  - "The following example parses a file and returns significant white space if an `xml:space='preserve'` scope is found.  \n  \n [!code-cs[XmlTextReader.XmlSpace#1](~/add/codesnippet/CSharp/p-system.xml.xmltextread_12_1.cs)]\n [!code-cpp[XmlTextReader.XmlSpace#1](~/add/codesnippet/CPP/p-system.xml.xmltextread_12_1.cpp)]\n [!code-vb[XmlTextReader.XmlSpace#1](~/add/codesnippet/VisualBasic/p-system.xml.xmltextread_12_1.vb)]  \n  \n The example uses the file, `authors.xml`, as input."
  syntax:
    content: public override System.Xml.XmlSpace XmlSpace { get; }
    return:
      type: System.Xml.XmlSpace
      description: "One of the &lt;xref:System.Xml.XmlSpace&gt; values. If no <xref uid=&quot;langword_csharp_xml:space&quot; name=&quot;xml:space&quot; href=&quot;&quot;></xref> scope exists, this property defaults to <xref uid=&quot;langword_csharp_XmlSpace.None&quot; name=&quot;XmlSpace.None&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlTextReader.XmlSpace*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Xml.XmlReader
  isExternal: false
  name: "System.Xml.XmlReader"
- uid: System.Xml.XmlTextReader.#ctor
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader()"
  nameWithType: XmlTextReader.XmlTextReader()
  fullName: System.Xml.XmlTextReader.XmlTextReader()
- uid: System.Xml.XmlTextReader.#ctor(System.IO.Stream)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(Stream)"
  nameWithType: XmlTextReader.XmlTextReader(Stream)
  fullName: System.Xml.XmlTextReader.XmlTextReader(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: "Stream"
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlTextReader.#ctor(System.IO.TextReader)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(TextReader)"
  nameWithType: XmlTextReader.XmlTextReader(TextReader)
  fullName: System.Xml.XmlTextReader.XmlTextReader(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: "TextReader"
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.XmlTextReader.#ctor(System.String)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(String)"
  nameWithType: XmlTextReader.XmlTextReader(String)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String)
- uid: System.String
  parent: System
  isExternal: true
  name: "String"
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(XmlNameTable)
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: "XmlNameTable"
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(Stream,XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(Stream,XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(Stream,XmlNameTable)
- uid: System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(TextReader,XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(TextReader,XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(TextReader,XmlNameTable)
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(String,Stream)"
  nameWithType: XmlTextReader.XmlTextReader(String,Stream)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,Stream)
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(String,TextReader)"
  nameWithType: XmlTextReader.XmlTextReader(String,TextReader)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,TextReader)
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(String,XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(String,XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,XmlNameTable)
- uid: System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(Stream,XmlNodeType,XmlParserContext)"
  nameWithType: XmlTextReader.XmlTextReader(Stream,XmlNodeType,XmlParserContext)
  fullName: System.Xml.XmlTextReader.XmlTextReader(Stream,XmlNodeType,XmlParserContext)
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: "XmlNodeType"
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlParserContext
  parent: System.Xml
  isExternal: true
  name: "XmlParserContext"
  nameWithType: XmlParserContext
  fullName: System.Xml.XmlParserContext
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(String,Stream,XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(String,Stream,XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,Stream,XmlNameTable)
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(String,TextReader,XmlNameTable)"
  nameWithType: XmlTextReader.XmlTextReader(String,TextReader,XmlNameTable)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,TextReader,XmlNameTable)
- uid: System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader(String,XmlNodeType,XmlParserContext)"
  nameWithType: XmlTextReader.XmlTextReader(String,XmlNodeType,XmlParserContext)
  fullName: System.Xml.XmlTextReader.XmlTextReader(String,XmlNodeType,XmlParserContext)
- uid: System.Xml.XmlTextReader.AttributeCount
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "AttributeCount"
  nameWithType: XmlTextReader.AttributeCount
  fullName: System.Xml.XmlTextReader.AttributeCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: "Int32"
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xml.XmlTextReader.BaseURI
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "BaseURI"
  nameWithType: XmlTextReader.BaseURI
  fullName: System.Xml.XmlTextReader.BaseURI
- uid: System.Xml.XmlTextReader.CanReadBinaryContent
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "CanReadBinaryContent"
  nameWithType: XmlTextReader.CanReadBinaryContent
  fullName: System.Xml.XmlTextReader.CanReadBinaryContent
- uid: System.Boolean
  parent: System
  isExternal: true
  name: "Boolean"
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlTextReader.CanReadValueChunk
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "CanReadValueChunk"
  nameWithType: XmlTextReader.CanReadValueChunk
  fullName: System.Xml.XmlTextReader.CanReadValueChunk
- uid: System.Xml.XmlTextReader.CanResolveEntity
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "CanResolveEntity"
  nameWithType: XmlTextReader.CanResolveEntity
  fullName: System.Xml.XmlTextReader.CanResolveEntity
- uid: System.Xml.XmlTextReader.Close
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Close()"
  nameWithType: XmlTextReader.Close()
  fullName: System.Xml.XmlTextReader.Close()
- uid: System.Xml.XmlTextReader.Depth
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Depth"
  nameWithType: XmlTextReader.Depth
  fullName: System.Xml.XmlTextReader.Depth
- uid: System.Xml.XmlTextReader.DtdProcessing
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "DtdProcessing"
  nameWithType: XmlTextReader.DtdProcessing
  fullName: System.Xml.XmlTextReader.DtdProcessing
- uid: System.Xml.DtdProcessing
  parent: System.Xml
  isExternal: true
  name: "DtdProcessing"
  nameWithType: DtdProcessing
  fullName: System.Xml.DtdProcessing
- uid: System.Xml.XmlTextReader.Encoding
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Encoding"
  nameWithType: XmlTextReader.Encoding
  fullName: System.Xml.XmlTextReader.Encoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: "Encoding"
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Xml.XmlTextReader.EntityHandling
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "EntityHandling"
  nameWithType: XmlTextReader.EntityHandling
  fullName: System.Xml.XmlTextReader.EntityHandling
- uid: System.Xml.EntityHandling
  parent: System.Xml
  isExternal: false
  name: "EntityHandling"
  nameWithType: EntityHandling
  fullName: System.Xml.EntityHandling
- uid: System.Xml.XmlTextReader.EOF
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "EOF"
  nameWithType: XmlTextReader.EOF
  fullName: System.Xml.XmlTextReader.EOF
- uid: System.Xml.XmlTextReader.GetAttribute(System.Int32)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "GetAttribute(Int32)"
  nameWithType: XmlTextReader.GetAttribute(Int32)
  fullName: System.Xml.XmlTextReader.GetAttribute(Int32)
- uid: System.Xml.XmlTextReader.GetAttribute(System.String)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "GetAttribute(String)"
  nameWithType: XmlTextReader.GetAttribute(String)
  fullName: System.Xml.XmlTextReader.GetAttribute(String)
- uid: System.Xml.XmlTextReader.GetAttribute(System.String,System.String)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "GetAttribute(String,String)"
  nameWithType: XmlTextReader.GetAttribute(String,String)
  fullName: System.Xml.XmlTextReader.GetAttribute(String,String)
- uid: System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "GetNamespacesInScope(XmlNamespaceScope)"
  nameWithType: XmlTextReader.GetNamespacesInScope(XmlNamespaceScope)
  fullName: System.Xml.XmlTextReader.GetNamespacesInScope(XmlNamespaceScope)
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: "IDictionary<String,String>"
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: "IDictionary"
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: "<"
    nameWithType: <
    fullName: <
  - uid: System.String
    name: "String"
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: "String"
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.XmlNamespaceScope
  parent: System.Xml
  isExternal: true
  name: "XmlNamespaceScope"
  nameWithType: XmlNamespaceScope
  fullName: System.Xml.XmlNamespaceScope
- uid: System.Xml.XmlTextReader.GetRemainder
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "GetRemainder()"
  nameWithType: XmlTextReader.GetRemainder()
  fullName: System.Xml.XmlTextReader.GetRemainder()
- uid: System.Xml.XmlTextReader.HasLineInfo
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "HasLineInfo()"
  nameWithType: XmlTextReader.HasLineInfo()
  fullName: System.Xml.XmlTextReader.HasLineInfo()
- uid: System.Xml.XmlTextReader.HasValue
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "HasValue"
  nameWithType: XmlTextReader.HasValue
  fullName: System.Xml.XmlTextReader.HasValue
- uid: System.Xml.XmlTextReader.IsDefault
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "IsDefault"
  nameWithType: XmlTextReader.IsDefault
  fullName: System.Xml.XmlTextReader.IsDefault
- uid: System.Xml.XmlTextReader.IsEmptyElement
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "IsEmptyElement"
  nameWithType: XmlTextReader.IsEmptyElement
  fullName: System.Xml.XmlTextReader.IsEmptyElement
- uid: System.Xml.XmlTextReader.LineNumber
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "LineNumber"
  nameWithType: XmlTextReader.LineNumber
  fullName: System.Xml.XmlTextReader.LineNumber
- uid: System.Xml.XmlTextReader.LinePosition
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "LinePosition"
  nameWithType: XmlTextReader.LinePosition
  fullName: System.Xml.XmlTextReader.LinePosition
- uid: System.Xml.XmlTextReader.LocalName
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "LocalName"
  nameWithType: XmlTextReader.LocalName
  fullName: System.Xml.XmlTextReader.LocalName
- uid: System.Xml.XmlTextReader.LookupNamespace(System.String)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "LookupNamespace(String)"
  nameWithType: XmlTextReader.LookupNamespace(String)
  fullName: System.Xml.XmlTextReader.LookupNamespace(String)
- uid: System.Xml.XmlTextReader.MoveToAttribute(System.Int32)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "MoveToAttribute(Int32)"
  nameWithType: XmlTextReader.MoveToAttribute(Int32)
  fullName: System.Xml.XmlTextReader.MoveToAttribute(Int32)
- uid: System.Xml.XmlTextReader.MoveToAttribute(System.String)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "MoveToAttribute(String)"
  nameWithType: XmlTextReader.MoveToAttribute(String)
  fullName: System.Xml.XmlTextReader.MoveToAttribute(String)
- uid: System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "MoveToAttribute(String,String)"
  nameWithType: XmlTextReader.MoveToAttribute(String,String)
  fullName: System.Xml.XmlTextReader.MoveToAttribute(String,String)
- uid: System.Xml.XmlTextReader.MoveToElement
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "MoveToElement()"
  nameWithType: XmlTextReader.MoveToElement()
  fullName: System.Xml.XmlTextReader.MoveToElement()
- uid: System.Xml.XmlTextReader.MoveToFirstAttribute
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "MoveToFirstAttribute()"
  nameWithType: XmlTextReader.MoveToFirstAttribute()
  fullName: System.Xml.XmlTextReader.MoveToFirstAttribute()
- uid: System.Xml.XmlTextReader.MoveToNextAttribute
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "MoveToNextAttribute()"
  nameWithType: XmlTextReader.MoveToNextAttribute()
  fullName: System.Xml.XmlTextReader.MoveToNextAttribute()
- uid: System.Xml.XmlTextReader.Name
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Name"
  nameWithType: XmlTextReader.Name
  fullName: System.Xml.XmlTextReader.Name
- uid: System.Xml.XmlTextReader.Namespaces
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Namespaces"
  nameWithType: XmlTextReader.Namespaces
  fullName: System.Xml.XmlTextReader.Namespaces
- uid: System.Xml.XmlTextReader.NamespaceURI
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "NamespaceURI"
  nameWithType: XmlTextReader.NamespaceURI
  fullName: System.Xml.XmlTextReader.NamespaceURI
- uid: System.Xml.XmlTextReader.NameTable
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "NameTable"
  nameWithType: XmlTextReader.NameTable
  fullName: System.Xml.XmlTextReader.NameTable
- uid: System.Xml.XmlTextReader.NodeType
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "NodeType"
  nameWithType: XmlTextReader.NodeType
  fullName: System.Xml.XmlTextReader.NodeType
- uid: System.Xml.XmlTextReader.Normalization
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Normalization"
  nameWithType: XmlTextReader.Normalization
  fullName: System.Xml.XmlTextReader.Normalization
- uid: System.Xml.XmlTextReader.Prefix
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Prefix"
  nameWithType: XmlTextReader.Prefix
  fullName: System.Xml.XmlTextReader.Prefix
- uid: System.Xml.XmlTextReader.ProhibitDtd
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ProhibitDtd"
  nameWithType: XmlTextReader.ProhibitDtd
  fullName: System.Xml.XmlTextReader.ProhibitDtd
- uid: System.Xml.XmlTextReader.QuoteChar
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "QuoteChar"
  nameWithType: XmlTextReader.QuoteChar
  fullName: System.Xml.XmlTextReader.QuoteChar
- uid: System.Char
  parent: System
  isExternal: true
  name: "Char"
  nameWithType: Char
  fullName: System.Char
- uid: System.Xml.XmlTextReader.Read
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Read()"
  nameWithType: XmlTextReader.Read()
  fullName: System.Xml.XmlTextReader.Read()
- uid: System.Xml.XmlTextReader.ReadAttributeValue
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadAttributeValue()"
  nameWithType: XmlTextReader.ReadAttributeValue()
  fullName: System.Xml.XmlTextReader.ReadAttributeValue()
- uid: System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadBase64(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadBase64(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadBase64(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: "Byte"
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: "Byte"
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadBinHex(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadBinHex(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadBinHex(Byte[],Int32,Int32)
- uid: System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadChars(Char[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadChars(Char[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadChars(Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: "Char"
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: "Char"
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadContentAsBase64(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadContentAsBase64(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadContentAsBase64(Byte[],Int32,Int32)
- uid: System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadContentAsBinHex(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadContentAsBinHex(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadContentAsBinHex(Byte[],Int32,Int32)
- uid: System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadElementContentAsBase64(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadElementContentAsBase64(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadElementContentAsBase64(Byte[],Int32,Int32)
- uid: System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadElementContentAsBinHex(Byte[],Int32,Int32)"
  nameWithType: XmlTextReader.ReadElementContentAsBinHex(Byte[],Int32,Int32)
  fullName: System.Xml.XmlTextReader.ReadElementContentAsBinHex(Byte[],Int32,Int32)
- uid: System.Xml.XmlTextReader.ReadState
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadState"
  nameWithType: XmlTextReader.ReadState
  fullName: System.Xml.XmlTextReader.ReadState
- uid: System.Xml.ReadState
  parent: System.Xml
  isExternal: true
  name: "ReadState"
  nameWithType: ReadState
  fullName: System.Xml.ReadState
- uid: System.Xml.XmlTextReader.ReadString
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadString()"
  nameWithType: XmlTextReader.ReadString()
  fullName: System.Xml.XmlTextReader.ReadString()
- uid: System.Xml.XmlTextReader.ResetState
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ResetState()"
  nameWithType: XmlTextReader.ResetState()
  fullName: System.Xml.XmlTextReader.ResetState()
- uid: System.Xml.XmlTextReader.ResolveEntity
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ResolveEntity()"
  nameWithType: XmlTextReader.ResolveEntity()
  fullName: System.Xml.XmlTextReader.ResolveEntity()
- uid: System.Xml.XmlTextReader.Skip
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Skip()"
  nameWithType: XmlTextReader.Skip()
  fullName: System.Xml.XmlTextReader.Skip()
- uid: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)"
  nameWithType: XmlTextReader.System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)
  fullName: System.Xml.XmlTextReader.System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)
- uid: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "System.Xml.IXmlNamespaceResolver.LookupNamespace(String)"
  nameWithType: XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupNamespace(String)
  fullName: System.Xml.XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupNamespace(String)
- uid: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "System.Xml.IXmlNamespaceResolver.LookupPrefix(String)"
  nameWithType: XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupPrefix(String)
  fullName: System.Xml.XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupPrefix(String)
- uid: System.Xml.XmlTextReader.Value
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Value"
  nameWithType: XmlTextReader.Value
  fullName: System.Xml.XmlTextReader.Value
- uid: System.Xml.XmlTextReader.WhitespaceHandling
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "WhitespaceHandling"
  nameWithType: XmlTextReader.WhitespaceHandling
  fullName: System.Xml.XmlTextReader.WhitespaceHandling
- uid: System.Xml.WhitespaceHandling
  parent: System.Xml
  isExternal: false
  name: "WhitespaceHandling"
  nameWithType: WhitespaceHandling
  fullName: System.Xml.WhitespaceHandling
- uid: System.Xml.XmlTextReader.XmlLang
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlLang"
  nameWithType: XmlTextReader.XmlLang
  fullName: System.Xml.XmlTextReader.XmlLang
- uid: System.Xml.XmlTextReader.XmlResolver
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlResolver"
  nameWithType: XmlTextReader.XmlResolver
  fullName: System.Xml.XmlTextReader.XmlResolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: "XmlResolver"
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Xml.XmlTextReader.XmlSpace
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlSpace"
  nameWithType: XmlTextReader.XmlSpace
  fullName: System.Xml.XmlTextReader.XmlSpace
- uid: System.Xml.XmlSpace
  parent: System.Xml
  isExternal: true
  name: "XmlSpace"
  nameWithType: XmlSpace
  fullName: System.Xml.XmlSpace
- uid: System.Xml.XmlTextReader.#ctor*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlTextReader"
  nameWithType: XmlTextReader.XmlTextReader
- uid: System.Xml.XmlTextReader.AttributeCount*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "AttributeCount"
  nameWithType: XmlTextReader.AttributeCount
- uid: System.Xml.XmlTextReader.BaseURI*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "BaseURI"
  nameWithType: XmlTextReader.BaseURI
- uid: System.Xml.XmlTextReader.CanReadBinaryContent*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "CanReadBinaryContent"
  nameWithType: XmlTextReader.CanReadBinaryContent
- uid: System.Xml.XmlTextReader.CanReadValueChunk*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "CanReadValueChunk"
  nameWithType: XmlTextReader.CanReadValueChunk
- uid: System.Xml.XmlTextReader.CanResolveEntity*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "CanResolveEntity"
  nameWithType: XmlTextReader.CanResolveEntity
- uid: System.Xml.XmlTextReader.Close*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Close"
  nameWithType: XmlTextReader.Close
- uid: System.Xml.XmlTextReader.Depth*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Depth"
  nameWithType: XmlTextReader.Depth
- uid: System.Xml.XmlTextReader.DtdProcessing*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "DtdProcessing"
  nameWithType: XmlTextReader.DtdProcessing
- uid: System.Xml.XmlTextReader.Encoding*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Encoding"
  nameWithType: XmlTextReader.Encoding
- uid: System.Xml.XmlTextReader.EntityHandling*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "EntityHandling"
  nameWithType: XmlTextReader.EntityHandling
- uid: System.Xml.XmlTextReader.EOF*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "EOF"
  nameWithType: XmlTextReader.EOF
- uid: System.Xml.XmlTextReader.GetAttribute*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "GetAttribute"
  nameWithType: XmlTextReader.GetAttribute
- uid: System.Xml.XmlTextReader.GetNamespacesInScope*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "GetNamespacesInScope"
  nameWithType: XmlTextReader.GetNamespacesInScope
- uid: System.Xml.XmlTextReader.GetRemainder*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "GetRemainder"
  nameWithType: XmlTextReader.GetRemainder
- uid: System.Xml.XmlTextReader.HasLineInfo*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "HasLineInfo"
  nameWithType: XmlTextReader.HasLineInfo
- uid: System.Xml.XmlTextReader.HasValue*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "HasValue"
  nameWithType: XmlTextReader.HasValue
- uid: System.Xml.XmlTextReader.IsDefault*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "IsDefault"
  nameWithType: XmlTextReader.IsDefault
- uid: System.Xml.XmlTextReader.IsEmptyElement*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "IsEmptyElement"
  nameWithType: XmlTextReader.IsEmptyElement
- uid: System.Xml.XmlTextReader.LineNumber*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "LineNumber"
  nameWithType: XmlTextReader.LineNumber
- uid: System.Xml.XmlTextReader.LinePosition*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "LinePosition"
  nameWithType: XmlTextReader.LinePosition
- uid: System.Xml.XmlTextReader.LocalName*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "LocalName"
  nameWithType: XmlTextReader.LocalName
- uid: System.Xml.XmlTextReader.LookupNamespace*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "LookupNamespace"
  nameWithType: XmlTextReader.LookupNamespace
- uid: System.Xml.XmlTextReader.MoveToAttribute*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "MoveToAttribute"
  nameWithType: XmlTextReader.MoveToAttribute
- uid: System.Xml.XmlTextReader.MoveToElement*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "MoveToElement"
  nameWithType: XmlTextReader.MoveToElement
- uid: System.Xml.XmlTextReader.MoveToFirstAttribute*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "MoveToFirstAttribute"
  nameWithType: XmlTextReader.MoveToFirstAttribute
- uid: System.Xml.XmlTextReader.MoveToNextAttribute*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "MoveToNextAttribute"
  nameWithType: XmlTextReader.MoveToNextAttribute
- uid: System.Xml.XmlTextReader.Name*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Name"
  nameWithType: XmlTextReader.Name
- uid: System.Xml.XmlTextReader.Namespaces*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Namespaces"
  nameWithType: XmlTextReader.Namespaces
- uid: System.Xml.XmlTextReader.NamespaceURI*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "NamespaceURI"
  nameWithType: XmlTextReader.NamespaceURI
- uid: System.Xml.XmlTextReader.NameTable*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "NameTable"
  nameWithType: XmlTextReader.NameTable
- uid: System.Xml.XmlTextReader.NodeType*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "NodeType"
  nameWithType: XmlTextReader.NodeType
- uid: System.Xml.XmlTextReader.Normalization*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Normalization"
  nameWithType: XmlTextReader.Normalization
- uid: System.Xml.XmlTextReader.Prefix*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Prefix"
  nameWithType: XmlTextReader.Prefix
- uid: System.Xml.XmlTextReader.ProhibitDtd*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ProhibitDtd"
  nameWithType: XmlTextReader.ProhibitDtd
- uid: System.Xml.XmlTextReader.QuoteChar*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "QuoteChar"
  nameWithType: XmlTextReader.QuoteChar
- uid: System.Xml.XmlTextReader.Read*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Read"
  nameWithType: XmlTextReader.Read
- uid: System.Xml.XmlTextReader.ReadAttributeValue*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadAttributeValue"
  nameWithType: XmlTextReader.ReadAttributeValue
- uid: System.Xml.XmlTextReader.ReadBase64*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadBase64"
  nameWithType: XmlTextReader.ReadBase64
- uid: System.Xml.XmlTextReader.ReadBinHex*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadBinHex"
  nameWithType: XmlTextReader.ReadBinHex
- uid: System.Xml.XmlTextReader.ReadChars*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadChars"
  nameWithType: XmlTextReader.ReadChars
- uid: System.Xml.XmlTextReader.ReadContentAsBase64*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadContentAsBase64"
  nameWithType: XmlTextReader.ReadContentAsBase64
- uid: System.Xml.XmlTextReader.ReadContentAsBinHex*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadContentAsBinHex"
  nameWithType: XmlTextReader.ReadContentAsBinHex
- uid: System.Xml.XmlTextReader.ReadElementContentAsBase64*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadElementContentAsBase64"
  nameWithType: XmlTextReader.ReadElementContentAsBase64
- uid: System.Xml.XmlTextReader.ReadElementContentAsBinHex*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadElementContentAsBinHex"
  nameWithType: XmlTextReader.ReadElementContentAsBinHex
- uid: System.Xml.XmlTextReader.ReadState*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadState"
  nameWithType: XmlTextReader.ReadState
- uid: System.Xml.XmlTextReader.ReadString*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ReadString"
  nameWithType: XmlTextReader.ReadString
- uid: System.Xml.XmlTextReader.ResetState*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ResetState"
  nameWithType: XmlTextReader.ResetState
- uid: System.Xml.XmlTextReader.ResolveEntity*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "ResolveEntity"
  nameWithType: XmlTextReader.ResolveEntity
- uid: System.Xml.XmlTextReader.Skip*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Skip"
  nameWithType: XmlTextReader.Skip
- uid: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope"
  nameWithType: XmlTextReader.System.Xml.IXmlNamespaceResolver.GetNamespacesInScope
- uid: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "System.Xml.IXmlNamespaceResolver.LookupNamespace"
  nameWithType: XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupNamespace
- uid: System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "System.Xml.IXmlNamespaceResolver.LookupPrefix"
  nameWithType: XmlTextReader.System.Xml.IXmlNamespaceResolver.LookupPrefix
- uid: System.Xml.XmlTextReader.Value*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "Value"
  nameWithType: XmlTextReader.Value
- uid: System.Xml.XmlTextReader.WhitespaceHandling*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "WhitespaceHandling"
  nameWithType: XmlTextReader.WhitespaceHandling
- uid: System.Xml.XmlTextReader.XmlLang*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlLang"
  nameWithType: XmlTextReader.XmlLang
- uid: System.Xml.XmlTextReader.XmlResolver*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlResolver"
  nameWithType: XmlTextReader.XmlResolver
- uid: System.Xml.XmlTextReader.XmlSpace*
  parent: System.Xml.XmlTextReader
  isExternal: false
  name: "XmlSpace"
  nameWithType: XmlTextReader.XmlSpace
