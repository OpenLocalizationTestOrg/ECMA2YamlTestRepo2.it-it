### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  id: SymmetricAlgorithm
  children:
  - System.Security.Cryptography.SymmetricAlgorithm.#ctor
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.Create
  - System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.Key
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  langs:
  - csharp
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
  type: Class
  summary: "Rappresenta la classe base astratta dalla quale devono ereditare tutte le implementazioni di algoritmi simmetrici."
  remarks: "Le classi che derivano dalla classe SymmetricAlgorithm utilizzano un modello di concatenazione denominato cipher block chaining (CBC), che richiede una chiave (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) e un vettore di inizializzazione (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) per eseguire trasformazioni crittografiche su dati.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>  Per decrittografare i dati che è stati crittografati utilizzando una delle classi SymmetricAlgorithm, è necessario impostare il <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>proprietà e <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>proprietà gli stessi valori utilizzati per la crittografia.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>  Per un algoritmo simmetrico siano utili, la chiave privata deve essere nota solo al mittente e destinatario.       <xref:System.Security.Cryptography.RijndaelManaged>, <xref:System.Security.Cryptography.DESCryptoServiceProvider>, <xref:System.Security.Cryptography.RC2CryptoServiceProvider>, e <xref:System.Security.Cryptography.TripleDESCryptoServiceProvider>sono implementazioni di algoritmi simmetrici.</xref:System.Security.Cryptography.TripleDESCryptoServiceProvider> </xref:System.Security.Cryptography.RC2CryptoServiceProvider> </xref:System.Security.Cryptography.DESCryptoServiceProvider></xref:System.Security.Cryptography.RijndaelManaged>       Si noti che quando si utilizzano classi derivate, non è sufficiente, da una prospettiva di sicurezza, imporre semplicemente una garbage collection dopo aver terminato di utilizzare l&quot;oggetto. È necessario chiamare esplicitamente il <xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A>metodo sull&quot;oggetto per azzerare i dati sensibili all&quot;interno dell&quot;oggetto prima che venga rilasciato.</xref:System.Security.Cryptography.SymmetricAlgorithm.Clear%2A> Si noti che l&quot;operazione di garbage collection diverso da zero il contenuto degli oggetti raccolti ma indica semplicemente la memoria come disponibile per la riassegnazione. In questo modo i dati contenuti all&quot;interno di un oggetto raccolto dal Garbage Collector possono comunque essere presenti nell&quot;heap della memoria nella memoria non allocata. Nel caso di oggetti di crittografia, tali dati potrebbe contenere informazioni riservate, ad esempio i dati della chiave o un blocco di testo normale.       Crittografia di tutte le classi in .NET Framework che contengono dati riservati implementano un `Clear` metodo. Quando viene chiamato, il `Clear` metodo sovrascrive tutti i dati sensibili all&quot;interno dell&quot;oggetto con zeri e quindi rilascia l&quot;oggetto in modo che possa essere sottoposto a garbage collection in modo sicuro. Quando l&quot;oggetto è stato azzerato e rilasciato, è necessario chiamare il `Dispose` metodo con il `disposing` parametro impostato su `True` per eliminare tutte le risorse gestite e associate all&quot;oggetto."
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`, and outputs the encrypted result to the file specified by `outName`. The `desKey` and `desIV` parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.  \n  \n [!code-cpp[Classic CryptoStream Example#1](~/add/codesnippet/cpp/t-system.security.crypto_19_1.cpp)]\n [!code-cs[Classic CryptoStream Example#1](~/add/codesnippet/csharp/t-system.security.crypto_19_1.cs)]\n [!code-vb[Classic CryptoStream Example#1](~/add/codesnippet/visualbasic/t-system.security.crypto_19_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class SymmetricAlgorithm : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: SymmetricAlgorithm()
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> classe."
  remarks: "È possibile creare un&quot;istanza di una classe astratta. Il codice dell&quot;applicazione crea una nuova istanza di una classe derivata."
  syntax:
    content: protected SymmetricAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "L&quot;implementazione della classe derivata dall&quot;algoritmo simmetrico non è valido."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  id: BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene o imposta la dimensione del blocco, in bit dell&quot;operazione di crittografia."
  remarks: "La dimensione del blocco è l&quot;unità base di dati che possono essere crittografati o decrittografati in un&quot;unica operazione. I messaggi supera la dimensione del blocco vengono gestiti come blocchi successivi; messaggi di dimensioni inferiori alle dimensioni del blocco devono essere riempiti con bit aggiuntivi per raggiungere le dimensioni di un blocco. Dimensioni del blocco validi sono determinate dall&quot;algoritmo simmetrico utilizzato."
  syntax:
    content: public virtual int BlockSize { get; set; }
    return:
      type: System.Int32
      description: "Dimensione del blocco, in bit."
  overload: System.Security.Cryptography.SymmetricAlgorithm.BlockSize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "La dimensione del blocco non è valida."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: BlockSizeValue
  nameWithType: SymmetricAlgorithm.BlockSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rappresenta la dimensione del blocco, in bit dell&quot;operazione di crittografia."
  remarks: "La dimensione del blocco è l&quot;unità base di dati che possono essere crittografati o decrittografati in un&quot;unica operazione. I messaggi supera la dimensione del blocco vengono gestiti come blocchi successivi; messaggi di dimensioni inferiori alle dimensioni del blocco devono essere riempiti con bit aggiuntivi per raggiungere le dimensioni di un blocco. Dimensioni del blocco validi sono determinate dall&quot;algoritmo simmetrico utilizzato.       Questo campo è possibile accedere mediante il <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>"
  syntax:
    content: protected int BlockSizeValue;
    return:
      type: System.Int32
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Clear()
  nameWithType: SymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rilascia tutte le risorse usate dal <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> classe."
  remarks: "Si noti che quando si utilizzano classi derivate, non è sufficiente, da una prospettiva di sicurezza, imporre semplicemente una garbage collection dopo aver terminato di utilizzare l&quot;oggetto. In modo esplicito, è necessario chiamare il metodo Clear sull&quot;oggetto per azzerare i dati sensibili all&quot;interno dell&quot;oggetto prima che venga rilasciato. Si noti che l&quot;operazione di garbage collection diverso da zero il contenuto degli oggetti raccolti ma indica semplicemente la memoria come disponibile per la riassegnazione. In questo modo i dati contenuti all&quot;interno di un oggetto raccolto dal Garbage Collector possono comunque essere presenti nell&quot;heap della memoria nella memoria non allocata. Nel caso di oggetti di crittografia, tali dati potrebbe contenere informazioni riservate, ad esempio i dati della chiave o un blocco di testo normale.       Crittografia di tutte le classi in .NET Framework che contengono dati riservati implementano un `Clear` metodo. Quando viene chiamato, il `Clear` metodo sovrascrive tutti i dati sensibili all&quot;interno dell&quot;oggetto con zeri e quindi rilascia l&quot;oggetto in modo che possa essere sottoposto a garbage collection in modo sicuro. Quando l&quot;oggetto è stato azzerato e rilasciato, è necessario chiamare il `Dispose` metodo con il `disposing` parametro impostato su `True` per eliminare tutte le risorse gestite e associate all&quot;oggetto."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: SymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Crea un oggetto di crittografia predefinito usato per eseguire l&quot;algoritmo simmetrico."
  remarks: ''
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> property and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to encrypt a file specified by `inName`, and outputs the encrypted result to the file specified by `outName`. The `desKey` and `desIV` parameters to the method are 8-byte arrays. You must have the high encryption pack installed to run this example.  \n  \n [!code-cpp[Classic CryptoStream Example#1](~/add/codesnippet/cpp/m-system.security.crypto_114_1.cpp)]\n [!code-cs[Classic CryptoStream Example#1](~/add/codesnippet/csharp/m-system.security.crypto_114_1.cs)]\n [!code-vb[Classic CryptoStream Example#1](~/add/codesnippet/visualbasic/m-system.security.crypto_114_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.SymmetricAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "Un oggetto di crittografia predefinito usato per eseguire l&quot;algoritmo simmetrico."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: SymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Crea l&quot;oggetto di crittografia specificato usato per eseguire l&quot;algoritmo simmetrico."
  syntax:
    content: public static System.Security.Cryptography.SymmetricAlgorithm Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "Il nome dell&quot;implementazione specifica del <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> classe da utilizzare."
    return:
      type: System.Security.Cryptography.SymmetricAlgorithm
      description: "Oggetto di crittografia utilizzato per eseguire l&quot;algoritmo simmetrico."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  id: CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateDecryptor()
  nameWithType: SymmetricAlgorithm.CreateDecryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Crea un oggetto di decrittografia simmetrica con corrente <> </> *> vettore di inizializzazione e di proprietà (<>*>)."
  remarks: "Questo metodo consente di decrittografare un messaggio crittografato utilizzando il <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>dell&quot;overload con la stessa firma.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>"
  syntax:
    content: public virtual System.Security.Cryptography.ICryptoTransform CreateDecryptor ();
    parameters: []
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Un oggetto di decrittografia simmetrica."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  id: CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, crea un oggetto di decrittografia simmetrica con la proprietà specificata <> </> *> vettore di inizializzazione e di proprietà (<>*>)."
  remarks: "Questo metodo consente di decrittografare un messaggio crittografato utilizzando il <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>dell&quot;overload con gli stessi parametri.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor%2A>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "La chiave privata da usare per l&quot;algoritmo simmetrico."
    - id: rgbIV
      type: System.Byte[]
      description: "Il vettore di inizializzazione da utilizzare per l&quot;algoritmo simmetrico."
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Un oggetto di decrittografia simmetrica."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  id: CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateEncryptor()
  nameWithType: SymmetricAlgorithm.CreateEncryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Crea un oggetto di crittografia simmetrica con corrente <> </> *> vettore di inizializzazione e di proprietà (<>*>)."
  remarks: "Se l&quot;oggetto corrente <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>proprietà `null`, il <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>metodo viene chiamato per creare un nuovo casuale <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> Se l&quot;oggetto corrente <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>proprietà `null`, il <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A>metodo viene chiamato per creare un nuovo casuale <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>       Utilizzare il <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>dell&quot;overload con la stessa firma per decrittografare il risultato di questo metodo.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>"
  example:
  - "The following example encrypts a string using the transform object returned from the CreateEncryptor method.  \n  \n [!code-cpp[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/cpp/m-system.security.crypto_124_1.cpp)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/csharp/m-system.security.crypto_124_1.cs)]\n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm#1](~/add/codesnippet/visualbasic/m-system.security.crypto_124_1.vb)]"
  syntax:
    content: public virtual System.Security.Cryptography.ICryptoTransform CreateEncryptor ();
    parameters: []
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Un oggetto di crittografia simmetrica."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  id: CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, crea un oggetto di crittografia simmetrica con la proprietà specificata <> </> *> vettore di inizializzazione e di proprietà (<>*>)."
  remarks: "Utilizzare il <xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>dell&quot;overload con gli stessi parametri per decrittografare il risultato di questo metodo.</xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor%2A>"
  syntax:
    content: public abstract System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "La chiave privata da usare per l&quot;algoritmo simmetrico."
    - id: rgbIV
      type: System.Byte[]
      description: "Il vettore di inizializzazione da utilizzare per l&quot;algoritmo simmetrico."
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: "Un oggetto di crittografia simmetrica."
  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Dispose()
  nameWithType: SymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rilascia tutte le risorse usate dall&quot;istanza corrente del <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> classe."
  remarks: "Chiamare `Dispose` quando si è terminato di utilizzare <xref:System.Security.Cryptography.SymmetricAlgorithm>.</xref:System.Security.Cryptography.SymmetricAlgorithm> Il `Dispose` metodo lascia la <xref:System.Security.Cryptography.SymmetricAlgorithm>in uno stato inutilizzabile.</xref:System.Security.Cryptography.SymmetricAlgorithm> Dopo la chiamata `Dispose`, è necessario rilasciare tutti i riferimenti al <xref:System.Security.Cryptography.SymmetricAlgorithm>in modo che il garbage collector può recuperare la memoria che di <xref:System.Security.Cryptography.SymmetricAlgorithm>occupata.</xref:System.Security.Cryptography.SymmetricAlgorithm> </xref:System.Security.Cryptography.SymmetricAlgorithm>       Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md) e [implementazione di un metodo Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Chiamare sempre `Dispose` prima di rilasciare l&quot;ultimo riferimento a <xref:System.Security.Cryptography.SymmetricAlgorithm>.</xref:System.Security.Cryptography.SymmetricAlgorithm> In caso contrario, le risorse non vengono liberate finché il garbage collector chiama la <xref:System.Security.Cryptography.SymmetricAlgorithm>dell&quot;oggetto `Finalize` metodo.</xref:System.Security.Cryptography.SymmetricAlgorithm>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico `Dispose()` (metodo) e `Finalize` metodo. `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. `Finalize`richiama `Dispose` con `disposing` impostato su `false`.       Quando il `disposing` parametro `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Security.Cryptography.SymmetricAlgorithm>riferimenti.</xref:System.Security.Cryptography.SymmetricAlgorithm> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  id: FeedbackSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene o imposta la dimensione in bit dell&quot;operazione di crittografia."
  remarks: "La dimensione determina la quantità di dati che vengono immesse nuovamente per operazioni di decrittografia o crittografia successiva. La dimensione non può essere maggiore della dimensione di blocco."
  syntax:
    content: public virtual int FeedbackSize { get; set; }
    return:
      type: System.Int32
      description: "La dimensione in bit del feedback."
  overload: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "La dimensione è maggiore delle dimensioni di blocco."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  id: FeedbackSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: FeedbackSizeValue
  nameWithType: SymmetricAlgorithm.FeedbackSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rappresenta la dimensione in bit dell&quot;operazione di crittografia."
  remarks: "La dimensione determina la quantità di dati che vengono immesse nuovamente per operazioni di decrittografia o crittografia successiva. La dimensione non può essere maggiore della dimensione di blocco.       Questo campo è possibile accedere mediante il <xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize%2A>"
  syntax:
    content: protected int FeedbackSizeValue;
    return:
      type: System.Int32
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  id: GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: GenerateIV()
  nameWithType: SymmetricAlgorithm.GenerateIV()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, genera un vettore di inizializzazione casuale (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) da utilizzare per l&quot;algoritmo.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>"
  remarks: "In generale, non è necessario utilizzare questo metodo, perché `CreateEncryptor()` o `CreateEncryptor(null, null)` genera automaticamente un vettore di inizializzazione e una chiave. Potrebbe tuttavia si desidera utilizzare il metodo GenerateIV per riutilizzare un&quot;algoritmo simmetrico di istanza con un vettore di inizializzazione diversi."
  syntax:
    content: public abstract void GenerateIV ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  id: GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: GenerateKey()
  nameWithType: SymmetricAlgorithm.GenerateKey()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, genera una chiave casuale (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key*>) da utilizzare per l&quot;algoritmo.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key*>"
  remarks: "In generale, non è necessario utilizzare questo metodo, perché `CreateEncryptor()` o `CreateEncryptor(null, null)` genera automaticamente un vettore di inizializzazione e una chiave. Tuttavia, si desideri utilizzare il metodo GenerateKey per riutilizzare un&quot;istanza dell&quot;algoritmo simmetrica con una chiave diversa."
  syntax:
    content: public abstract void GenerateKey ();
    parameters: []
  overload: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  id: IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: IV
  nameWithType: SymmetricAlgorithm.IV
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene o imposta il vettore di inizializzazione (IV) per l&quot;algoritmo simmetrico."
  remarks: "Vettore di Inizializzazione è automaticamente impostata su un nuovo valore casuale ogni volta che si crea una nuova istanza di uno del <xref:System.Security.Cryptography.SymmetricAlgorithm>classi o quando si chiama manualmente il <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A>metodo.</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm>  La dimensione della proprietà vettore di Inizializzazione deve essere lo stesso come il <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>proprietà diviso per 8.</xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSize%2A>       Le classi che derivano dalla <xref:System.Security.Cryptography.SymmetricAlgorithm>classe utilizzano un modello di concatenazione denominato cipher block chaining (CBC), che richiede una chiave e un vettore di inizializzazione per eseguire trasformazioni crittografiche su dati.</xref:System.Security.Cryptography.SymmetricAlgorithm>  Per decrittografare i dati che è stati crittografati utilizzando una del <xref:System.Security.Cryptography.SymmetricAlgorithm>classi, è necessario impostare il <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>IV proprietà e gli stessi valori utilizzati per la crittografia.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> </xref:System.Security.Cryptography.SymmetricAlgorithm>       Per una determinata chiave segreta *k*, una semplice crittografia a blocchi che non usa un vettore di inizializzazione verrà crittografato lo stesso blocco di input di testo normale nello stesso blocco di output di testo crittografato. Se sono presenti blocchi duplicati all&quot;interno del flusso di testo normale, sarà necessario blocchi duplicati all&quot;interno del flusso di testo crittografato. Se utenti non autorizzati conoscono la struttura di un blocco di testo normale, usano queste informazioni per decrittografare il blocco di testo crittografato conosciuto ed eventualmente recuperare la chiave. Per risolvere questo problema, le informazioni del blocco precedente sono mixed nel processo di crittografia del blocco successivo. Di conseguenza, l&quot;output di due blocchi di testo normale identici è diverso. Poiché questa tecnica utilizza il blocco precedente per crittografare il blocco successivo, è necessario un vettore di inizializzazione per crittografare il primo blocco di dati."
  syntax:
    content: public virtual byte[] IV { get; set; }
    return:
      type: System.Byte[]
      description: "Vettore di inizializzazione."
  overload: System.Security.Cryptography.SymmetricAlgorithm.IV*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Si è verificato un tentativo di impostare il vettore di inizializzazione <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "È stato effettuato un tentativo di impostare il vettore di inizializzazione per una dimensione non valida."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  id: IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: IVValue
  nameWithType: SymmetricAlgorithm.IVValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rappresenta il vettore di inizializzazione (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>) per l&quot;algoritmo simmetrico.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV*>"
  remarks: "Questo campo è possibile accedere mediante il <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>"
  syntax:
    content: protected byte[] IVValue;
    return:
      type: System.Byte[]
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key
  id: Key
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Key
  nameWithType: SymmetricAlgorithm.Key
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene o imposta la chiave privata per l&quot;algoritmo simmetrico."
  remarks: "La chiave segreta viene usata per la crittografia sia per la decrittografia. Per un algoritmo simmetrico abbia esito positivo, la chiave privata deve essere nota solo al mittente e destinatario. Le dimensioni valide delle chiavi sono specificate dall&quot;implementazione particolare algoritmo simmetrico e sono elencate nel <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       Se questa proprietà è `null` quando viene utilizzato, il <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>metodo viene chiamato per creare un nuovo valore casuale.</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>"
  syntax:
    content: public virtual byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "La chiave privata da usare per l&quot;algoritmo simmetrico."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Key*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Si è verificato un tentativo di impostare la chiave su <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "La dimensione della chiave non è valida."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene o imposta la dimensione in bit della chiave privata usata dall&quot;algoritmo simmetrico."
  remarks: "Le dimensioni valide delle chiavi sono specificate dall&quot;implementazione particolare algoritmo simmetrico e sono elencate nel <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>"
  syntax:
    content: public virtual int KeySize { get; set; }
    return:
      type: System.Int32
      description: "La dimensione in bit della chiave privata usata dall&quot;algoritmo simmetrico."
  overload: System.Security.Cryptography.SymmetricAlgorithm.KeySize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "La dimensione della chiave non è valida."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeySizeValue
  nameWithType: SymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rappresenta la dimensione in bit della chiave privata usata dall&quot;algoritmo simmetrico."
  remarks: "Le dimensioni valide delle chiavi sono specificate dall&quot;implementazione particolare algoritmo simmetrico e sono elencate nel <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       Questo campo è possibile accedere mediante il <xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.KeySize%2A>"
  syntax:
    content: protected int KeySizeValue;
    return:
      type: System.Int32
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  id: KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: KeyValue
  nameWithType: SymmetricAlgorithm.KeyValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rappresenta la chiave privata per l&quot;algoritmo simmetrico."
  remarks: "La chiave segreta viene usata per la crittografia sia per la decrittografia. Per un algoritmo simmetrico abbia esito positivo, la chiave privata deve essere nota solo al mittente e destinatario. Le dimensioni valide delle chiavi sono specificate dall&quot;implementazione particolare algoritmo simmetrico e sono elencate nel <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>       Questo campo è possibile accedere mediante il <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>"
  syntax:
    content: protected byte[] KeyValue;
    return:
      type: System.Byte[]
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  id: LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene le dimensioni del blocco, in bit, che sono supportate dall&quot;algoritmo simmetrico."
  remarks: "L&quot;algoritmo simmetrico supporta solo le dimensioni di blocco che corrispondono a una voce nella matrice."
  example:
  - "The following example shows the value of LegalBlockSizes for the symmetric algorithms.  \n  \n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/visualbasic/p-system.security.crypto_95_1.vb)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/csharp/p-system.security.crypto_95_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalBlockSizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "Matrice che contiene le dimensioni dei blocchi supportate dall&quot;algoritmo."
  overload: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  id: LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalBlockSizesValue
  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Specifica le dimensioni di blocco, in bit, che sono supportate dall&quot;algoritmo simmetrico."
  remarks: "L&quot;algoritmo simmetrico supporta solo le dimensioni di blocco che corrispondono a una voce nella matrice.       Questo campo è possibile accedere mediante il <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes%2A>"
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene le dimensioni della chiave, in bit, che sono supportate dall&quot;algoritmo simmetrico."
  remarks: "L&quot;algoritmo simmetrico supporta solo le dimensioni delle chiavi che corrispondono a una voce nella matrice."
  example:
  - "The following example shows the value of LegalKeySizes for the symmetric algorithms.  \n  \n [!code-vb[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/visualbasic/p-system.security.crypto_72_1.vb)]\n [!code-cs[System.Security.Cryptography.SymmetricAlgorithm.BlockSize#1](~/add/codesnippet/csharp/p-system.security.crypto_72_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "Matrice che contiene le dimensioni delle chiavi supportate dall&quot;algoritmo."
  overload: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizesValue
  nameWithType: SymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Specifica le dimensioni della chiave, in bit, che sono supportate dall&quot;algoritmo simmetrico."
  remarks: "L&quot;algoritmo simmetrico supporta solo le dimensioni delle chiavi che corrispondono a una voce nella matrice.       Questo campo è possibile accedere mediante il <xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes%2A>"
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  id: Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene o imposta la modalità di funzionamento dell&quot;algoritmo simmetrico."
  remarks: "Vedere <xref:System.Security.Cryptography.CipherMode>enumerazione per una descrizione delle modalità specifiche.</xref:System.Security.Cryptography.CipherMode>"
  syntax:
    content: public virtual System.Security.Cryptography.CipherMode Mode { get; set; }
    return:
      type: System.Security.Cryptography.CipherMode
      description: "La modalità di funzionamento dell&quot;algoritmo simmetrico. Il valore predefinito è <xref href=&quot;System.Security.Cryptography.CipherMode&quot;> </xref>."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Mode*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "La modalità di crittografia non è incluso il <xref href=&quot;System.Security.Cryptography.CipherMode&quot;> </xref> valori."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  id: ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: ModeValue
  nameWithType: SymmetricAlgorithm.ModeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rappresenta la modalità di crittografia utilizzata nell&quot;algoritmo simmetrico."
  remarks: "Vedere <xref:System.Security.Cryptography.CipherMode>enumerazione per una descrizione delle modalità specifiche.</xref:System.Security.Cryptography.CipherMode>       Questo campo è possibile accedere mediante il <xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.Mode%2A>"
  syntax:
    content: protected System.Security.Cryptography.CipherMode ModeValue;
    return:
      type: System.Security.Cryptography.CipherMode
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  id: Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene o imposta la modalità di riempimento usata nell&quot;algoritmo simmetrico."
  remarks: "La maggior parte dei messaggi di testo normale è costituito da un numero di byte di riempimento completamente di blocchi. Spesso, non esistono byte sufficiente per completare l&quot;ultimo blocco. In questo caso, una stringa di riempimento viene aggiunto al testo. Ad esempio, se la lunghezza del blocco è a 64 bit e l&quot;ultimo blocco contiene solo a 40 bit, vengono aggiunti 24 bit di riempimento. Vedere il <xref:System.Security.Cryptography.PaddingMode>enumerazione per una descrizione delle modalità specifiche.</xref:System.Security.Cryptography.PaddingMode>"
  syntax:
    content: public virtual System.Security.Cryptography.PaddingMode Padding { get; set; }
    return:
      type: System.Security.Cryptography.PaddingMode
      description: "Modalità di riempimento usata nell&quot;algoritmo simmetrico. Il valore predefinito è <xref href=&quot;System.Security.Cryptography.PaddingMode&quot;> </xref>."
  overload: System.Security.Cryptography.SymmetricAlgorithm.Padding*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "La modalità di riempimento non è incluso il <xref href=&quot;System.Security.Cryptography.PaddingMode&quot;> </xref> valori."
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  id: PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: PaddingValue
  nameWithType: SymmetricAlgorithm.PaddingValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Rappresenta la modalità di riempimento usata nell&quot;algoritmo simmetrico."
  remarks: "La maggior parte dei messaggi di testo normale è costituito da un numero di byte di riempimento completamente di blocchi. Spesso, non esistono byte sufficiente per completare l&quot;ultimo blocco. In questo caso, una stringa di riempimento viene aggiunto al testo. Ad esempio, se la lunghezza del blocco è a 64 bit e l&quot;ultimo blocco contiene solo a 40 bit, vengono aggiunti 24 bit di riempimento. Vedere il <xref:System.Security.Cryptography.PaddingMode>enumerazione per una descrizione delle modalità specifiche.</xref:System.Security.Cryptography.PaddingMode>       Questo campo è possibile accedere mediante il <xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A>proprietà.</xref:System.Security.Cryptography.SymmetricAlgorithm.Padding%2A>"
  syntax:
    content: protected System.Security.Cryptography.PaddingMode PaddingValue;
    return:
      type: System.Security.Cryptography.PaddingMode
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  id: ValidKeySize(System.Int32)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  name: ValidKeySize(Int32)
  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Determina se la dimensione della chiave specificata è valida per l&quot;algoritmo corrente."
  syntax:
    content: public bool ValidKeySize (int bitLength);
    parameters:
    - id: bitLength
      type: System.Int32
      description: "La lunghezza in bit, per verificare la presenza di una dimensione di chiave valida."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la dimensione della chiave specificata è valida per l&quot;algoritmo corrente; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: SymmetricAlgorithm()
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSizeValue
  nameWithType: SymmetricAlgorithm.BlockSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: SymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create()
  nameWithType: SymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: SymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor()
  nameWithType: SymmetricAlgorithm.CreateDecryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor()
  nameWithType: SymmetricAlgorithm.CreateEncryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: SymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSizeValue
  nameWithType: SymmetricAlgorithm.FeedbackSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateIV()
  nameWithType: SymmetricAlgorithm.GenerateIV()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateKey()
  nameWithType: SymmetricAlgorithm.GenerateKey()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IV
  nameWithType: SymmetricAlgorithm.IV
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IVValue
  nameWithType: SymmetricAlgorithm.IVValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Key
  nameWithType: SymmetricAlgorithm.Key
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: SymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeyValue
  nameWithType: SymmetricAlgorithm.KeyValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
- uid: System.Security.Cryptography.KeySizes[]
  parent: System.Security.Cryptography
  isExternal: false
  name: KeySizes
  nameWithType: KeySizes
  fullName: System.Security.Cryptography.KeySizes[]
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: KeySizes[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizesValue
  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: SymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode
- uid: System.Security.Cryptography.CipherMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CipherMode
  nameWithType: CipherMode
  fullName: System.Security.Cryptography.CipherMode
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ModeValue
  nameWithType: SymmetricAlgorithm.ModeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding
- uid: System.Security.Cryptography.PaddingMode
  parent: System.Security.Cryptography
  isExternal: false
  name: PaddingMode
  nameWithType: PaddingMode
  fullName: System.Security.Cryptography.PaddingMode
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: PaddingValue
  nameWithType: SymmetricAlgorithm.PaddingValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ValidKeySize(Int32)
  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Clear
  nameWithType: SymmetricAlgorithm.Clear
- uid: System.Security.Cryptography.SymmetricAlgorithm.Create*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Create
  nameWithType: SymmetricAlgorithm.Create
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor
  nameWithType: SymmetricAlgorithm.CreateDecryptor
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor
  nameWithType: SymmetricAlgorithm.CreateEncryptor
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: SymmetricAlgorithm.Dispose
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateIV
  nameWithType: SymmetricAlgorithm.GenerateIV
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateKey
  nameWithType: SymmetricAlgorithm.GenerateKey
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IV
  nameWithType: SymmetricAlgorithm.IV
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Key
  nameWithType: SymmetricAlgorithm.Key
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize*
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ValidKeySize
  nameWithType: SymmetricAlgorithm.ValidKeySize
