### YamlMime:ManagedReference
items:
- uid: System.Windows.Media.Animation.Storyboard
  id: Storyboard
  children:
  - System.Windows.Media.Animation.Storyboard.#ctor
  - System.Windows.Media.Animation.Storyboard.Begin
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate)
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Boolean)
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  - System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  - System.Windows.Media.Animation.Storyboard.Clone
  - System.Windows.Media.Animation.Storyboard.CreateInstanceCore
  - System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed
  - System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.GetCurrentIteration
  - System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.GetCurrentProgress
  - System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.GetCurrentState
  - System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.GetCurrentTime
  - System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.GetIsPaused
  - System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.GetTarget(System.Windows.DependencyObject)
  - System.Windows.Media.Animation.Storyboard.GetTargetName(System.Windows.DependencyObject)
  - System.Windows.Media.Animation.Storyboard.GetTargetProperty(System.Windows.DependencyObject)
  - System.Windows.Media.Animation.Storyboard.Pause
  - System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.Remove
  - System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.Resume
  - System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan)
  - System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  - System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  - System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  - System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan)
  - System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  - System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  - System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  - System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Double)
  - System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkContentElement,System.Double)
  - System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkElement,System.Double)
  - System.Windows.Media.Animation.Storyboard.SetTarget(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Animation.Storyboard.SetTargetName(System.Windows.DependencyObject,System.String)
  - System.Windows.Media.Animation.Storyboard.SetTargetProperty(System.Windows.DependencyObject,System.Windows.PropertyPath)
  - System.Windows.Media.Animation.Storyboard.SkipToFill
  - System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.Stop
  - System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkContentElement)
  - System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkElement)
  - System.Windows.Media.Animation.Storyboard.TargetNameProperty
  - System.Windows.Media.Animation.Storyboard.TargetProperty
  - System.Windows.Media.Animation.Storyboard.TargetPropertyProperty
  langs:
  - csharp
  name: "Storyboard"
  nameWithType: Storyboard
  fullName: System.Windows.Media.Animation.Storyboard
  type: Class
  summary: A container timeline that provides object and property targeting information for its child animations.
  remarks: "## Interactively Controlling Storyboards  \n A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in markup, you specify the <xref:System.Windows.Media.Animation.BeginStoryboard.Name%2A> property of the <xref:System.Windows.Media.Animation.BeginStoryboard> object that creates it; for an example, see [How to: Use Event Triggers to Control a Storyboard After It Starts](../Topic/How%20to:%20Use%20Event%20Triggers%20to%20Control%20a%20Storyboard%20After%20It%20Starts.md). To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n## Data Binding and Animating Timelines  \n Most timeline properties can be data bound or animated; however, because of the way the timing system works, data bound or animated timelines do not behave like other data bound or animated objects. To understand their behavior, it helps to understand what it means to activate a timeline.  \n  \n When a timeline is activated, copies are made of the timeline and its child timelines. These copies are frozen (made read-only) and <xref:System.Windows.Media.Animation.Clock> objects are created from them. These clocks do the actual work of animating the targeted properties. If a timeline is data bound or animated, a snapshot of its current values is made when its clock is created. Even though the original timeline might continue to change, its clock does not.  \n  \n For a timeline to reflect data binding or animation changes, its clock must be re-created. Clocks are not re-created for you automatically. The following are several ways to apply timeline changes:  \n  \n-   If the timeline is or belongs to a Storyboard, you can make it reflect changes by reapplying its storyboard using a <xref:System.Windows.Media.Animation.BeginStoryboard> or the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method. This has the side effect of also restarting the animation. In code, you can use the <xref:System.Windows.Media.Animation.Storyboard.Seek%2A> method to advance the storyboard back to its previous position.  \n  \n-   If you applied an animation directly to a property using the <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A> method, call the <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A> method again and pass it the animation that has been modified.  \n  \n-   If you are working directly at the clock level, create and apply a new set of clocks and use them to replace the previous set of created clocks.  \n  \n For an example of a data bound animation, see [Key Spline Animation Sample](http://go.microsoft.com/fwlink/?LinkID=160011) ."
  syntax:
    content: 'public class Storyboard : System.Windows.Media.Animation.ParallelTimeline'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  - System.Windows.Media.Animation.Animatable
  - System.Windows.Media.Animation.Timeline
  - System.Windows.Media.Animation.TimelineGroup
  - System.Windows.Media.Animation.ParallelTimeline
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.CloneCore(System.Windows.Freezable)
  - System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.Media.Animation.Animatable.HasAnimatedProperties
  - System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)
  - System.Windows.Media.Animation.ParallelTimeline.CloneCurrentValue
  - System.Windows.Media.Animation.ParallelTimeline.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)
  - System.Windows.Media.Animation.ParallelTimeline.SlipBehavior
  - System.Windows.Media.Animation.ParallelTimeline.SlipBehaviorProperty
  - System.Windows.Media.Animation.Timeline.AccelerationRatio
  - System.Windows.Media.Animation.Timeline.AccelerationRatioProperty
  - System.Windows.Media.Animation.Timeline.AutoReverse
  - System.Windows.Media.Animation.Timeline.AutoReverseProperty
  - System.Windows.Media.Animation.Timeline.BeginTime
  - System.Windows.Media.Animation.Timeline.BeginTimeProperty
  - System.Windows.Media.Animation.Timeline.Completed
  - System.Windows.Media.Animation.Timeline.CreateClock(System.Boolean)
  - System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated
  - System.Windows.Media.Animation.Timeline.CurrentStateInvalidated
  - System.Windows.Media.Animation.Timeline.CurrentTimeInvalidated
  - System.Windows.Media.Animation.Timeline.DecelerationRatio
  - System.Windows.Media.Animation.Timeline.DecelerationRatioProperty
  - System.Windows.Media.Animation.Timeline.DesiredFrameRateProperty
  - System.Windows.Media.Animation.Timeline.Duration
  - System.Windows.Media.Animation.Timeline.DurationProperty
  - System.Windows.Media.Animation.Timeline.FillBehavior
  - System.Windows.Media.Animation.Timeline.FillBehaviorProperty
  - System.Windows.Media.Animation.Timeline.FreezeCore(System.Boolean)
  - System.Windows.Media.Animation.Timeline.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Media.Animation.Timeline.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Media.Animation.Timeline.GetDesiredFrameRate(System.Windows.Media.Animation.Timeline)
  - System.Windows.Media.Animation.Timeline.GetNaturalDuration(System.Windows.Media.Animation.Clock)
  - System.Windows.Media.Animation.Timeline.Name
  - System.Windows.Media.Animation.Timeline.NameProperty
  - System.Windows.Media.Animation.Timeline.RemoveRequested
  - System.Windows.Media.Animation.Timeline.RepeatBehavior
  - System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty
  - System.Windows.Media.Animation.Timeline.SetDesiredFrameRate(System.Windows.Media.Animation.Timeline,System.Nullable{System.Int32})
  - System.Windows.Media.Animation.Timeline.SpeedRatio
  - System.Windows.Media.Animation.Timeline.SpeedRatioProperty
  - System.Windows.Media.Animation.TimelineGroup.AddChild(System.Object)
  - System.Windows.Media.Animation.TimelineGroup.AddText(System.String)
  - System.Windows.Media.Animation.TimelineGroup.AllocateClock
  - System.Windows.Media.Animation.TimelineGroup.Children
  - System.Windows.Media.Animation.TimelineGroup.ChildrenProperty
  - System.Windows.Media.Animation.TimelineGroup.CreateClock
  - System.Windows.Media.Animation.TimelineGroup.System#Windows#Markup#IAddChild#AddChild(System.Object)
  - System.Windows.Media.Animation.TimelineGroup.System#Windows#Markup#IAddChild#AddText(System.String)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.#ctor
  id: '#ctor'
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Storyboard()"
  nameWithType: Storyboard.Storyboard()
  fullName: System.Windows.Media.Animation.Storyboard.Storyboard()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Storyboard"></see> class.
  syntax:
    content: public Storyboard ();
    parameters: []
  overload: System.Windows.Media.Animation.Storyboard.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin
  id: Begin
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin()"
  nameWithType: Storyboard.Begin()
  fullName: System.Windows.Media.Animation.Storyboard.Begin()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets and initiates them.
  syntax:
    content: public void Begin ();
    parameters: []
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement)
  id: Begin(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkContentElement)"
  nameWithType: Storyboard.Begin(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets and initiates them.
  remarks: "If the targeted properties are already animated, they are replaced using the <xref:System.Windows.Media.Animation.HandoffBehavior> handoff behavior.  \n  \n Storyboards started with this method cannot be paused, resumed, or otherwise interactively controlled after they are started. To make a storyboard controllable, use the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> or <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method.  \n  \n Beginning a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> events."
  example:
  - "The following example uses a storyboard to animate a <xref:System.Windows.Media.TextEffect>. The <xref:System.Windows.Media.TextEffect> is contained within a <xref:System.Windows.FrameworkContentElement>'s name scope.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementStoryboardExample.cs#frameworkcontentelementstoryboardexampleusingwholepage)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementstoryboardexample.vb#frameworkcontentelementstoryboardexampleusingwholepage)]"
  syntax:
    content: public void Begin (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "An object contained within the same name scope as the targets of this storyboard&quot;s animations. Animations without a <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement)
  id: Begin(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkElement)"
  nameWithType: Storyboard.Begin(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets and initiates them.
  remarks: "If the targeted properties are already animated, they are replaced using the <xref:System.Windows.Media.Animation.HandoffBehavior> handoff behavior.  \n  \n Storyboards started with this method cannot be paused, resumed, or otherwise interactively controlled after they are started. To make a storyboard controllable, use the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29> or <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Windows.Media.Animation.HandoffBehavior%2CSystem.Boolean%29> method.  \n  \n Beginning a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> events."
  syntax:
    content: public void Begin (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "An object contained within the same name scope as the targets of this storyboard&quot;s animations. Animations without a <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)
  id: Begin(System.Windows.FrameworkContentElement,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkContentElement,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkContentElement,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkContentElement,Boolean)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets and initiates them.
  remarks: "If the targeted properties are already animated, they are replaced using the <xref:System.Windows.Media.Animation.HandoffBehavior> handoff behavior.  \n  \n To interactively control this storyboard, you must specify the same `containingObject` when calling the interactive methods that you used to begin the storyboard  \n  \n When this method is called, <xref:System.Windows.Media.Animation.Clock> objects are created for the storyboard and any timelines it contains. These clocks are stored with `containingObject`.  \n  \n Beginning a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> events."
  example:
  - "The following example uses a controllable storyboard to animate a <xref:System.Windows.Media.TextEffect>. The <xref:System.Windows.Media.TextEffect> is contained within a <xref:System.Windows.FrameworkContentElement>'s name scope.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]"
  syntax:
    content: public void Begin (System.Windows.FrameworkContentElement containingObject, bool isControllable);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "An object contained within the same name scope as the targets of this storyboard&quot;s animations. Animations without a <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
    - id: isControllable
      type: System.Boolean
      description: "\n     if the storyboard should be interactively controllable; otherwise, ."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior)
  id: Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkContentElement,HandoffBehavior)"
  nameWithType: Storyboard.Begin(FrameworkContentElement,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkContentElement,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets and initiates them, using the specified <see cref="T:System.Windows.Media.Animation.HandoffBehavior"></see>.
  remarks: "When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.  \n  \n To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  \n  \n-   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object. Specify the property being animated as the first parameter, and `null` as the second. This removes all animation clocks from the property.  \n  \n-   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>. This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock. Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`. Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not called if the effective duration of the clock is forever.  In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  \n  \n This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  \n  \n For more information about clock objects, see [Animation and Timing System Overview](../Topic/Animation%20and%20Timing%20System%20Overview.md)."
  example:
  - "The following example uses the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior> to animate when the user left-clicks, and the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior> when the user right-clicks.  \n  \n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementstoryboardwithhandoffbehaviorexample.vb#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]\n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementStoryboardWithHandoffBehaviorExample.cs#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]"
  syntax:
    content: public void Begin (System.Windows.FrameworkContentElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "An object contained within the same name scope as the targets of this storyboard&quot;s animations. Animations without a <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "The behavior the new animation should use to interact with any current animations."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)
  id: Begin(System.Windows.FrameworkElement,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkElement,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkElement,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,Boolean)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets and initiates them.
  remarks: "If the targeted properties are already animated, they are replaced using the <xref:System.Windows.Media.Animation.HandoffBehavior> handoff behavior.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard  \n  \n When this method is called, <xref:System.Windows.Media.Animation.Clock> objects are created for the storyboard and any timelines it contains. These clocks are stored with `containingObject`.  \n  \n Beginning a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> events."
  syntax:
    content: public void Begin (System.Windows.FrameworkElement containingObject, bool isControllable);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "An object contained within the same name scope as the targets of this storyboard&quot;s animations. Animations without a <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
    - id: isControllable
      type: System.Boolean
      description: "\n     if the storyboard should be interactively controllable; otherwise, ."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate)
  id: Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkElement,FrameworkTemplate)"
  nameWithType: Storyboard.Begin(FrameworkElement,FrameworkTemplate)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,FrameworkTemplate)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets within the specified template and initiates them.
  remarks: "If the targeted properties are already animated, they are replaced using the <xref:System.Windows.Media.Animation.HandoffBehavior> handoff behavior.  \n  \n When this method is called, <xref:System.Windows.Media.Animation.Clock> objects are created for the storyboard and any timelines it contains. These clocks are stored with `containingObject`.  \n  \n Beginning a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> events."
  syntax:
    content: public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object to which the specified `frameworkTemplate` has been applied. Animations without a <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
    - id: frameworkTemplate
      type: System.Windows.FrameworkTemplate
      description: "The template to animate."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior)
  id: Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkElement,HandoffBehavior)"
  nameWithType: Storyboard.Begin(FrameworkElement,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets and initiates them, using the specified <see cref="T:System.Windows.Media.Animation.HandoffBehavior"></see>.
  remarks: ''
  example:
  - "The following example uses the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior> to animate when the user left-clicks, and the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior> when the user right-clicks.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkElementStoryboardHandoffBehaviorExample.cs#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkelementstoryboardhandoffbehaviorexample.vb#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]"
  syntax:
    content: public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "An object contained within the same name scope as the targets of this storyboard&quot;s animations. Animations without a specified <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "The behavior the new animation should use to interact with any current animations."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  id: Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkContentElement,HandoffBehavior,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkContentElement,HandoffBehavior,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkContentElement,HandoffBehavior,Boolean)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets and initiates them, using the specified <see cref="T:System.Windows.Media.Animation.HandoffBehavior"></see>.
  remarks: "If the targeted properties are already animated, they are replaced using the specified handoff behavior.  \n  \n To interactively control this storyboard, you must specify the same `containingObject` when calling the interactive methods that you used to begin the storyboard  \n  \n When this method is called, <xref:System.Windows.Media.Animation.Clock> objects are created for the storyboard and any timelines it contains. These clocks are stored with `containingObject`.  \n  \n Beginning a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> events.  \n  \n## Using the Compose HandoffBehavior  \n When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.  \n  \n To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  \n  \n-   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object. Specify the property being animated as the first parameter, and `null` as the second. This removes all animation clocks from the property.  \n  \n-   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>. This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock. Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`. Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not called if the effective duration of the clock is forever.  In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  \n  \n This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  \n  \n For more information about clock objects, see [Animation and Timing System Overview](../Topic/Animation%20and%20Timing%20System%20Overview.md)."
  example:
  - "The following example uses a controllable storyboard to animate a <xref:System.Windows.Media.TextEffect>. The <xref:System.Windows.Media.TextEffect> is contained within a <xref:System.Windows.FrameworkContentElement>'s name scope.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  \n  \n The next example uses the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior> to animate when the user left-clicks, and the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior> when the user right-clicks.  \n  \n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementstoryboardwithhandoffbehaviorexample.vb#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]\n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementStoryboardWithHandoffBehaviorExample.cs#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]"
  syntax:
    content: public void Begin (System.Windows.FrameworkContentElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "An object contained within the same name scope as the targets of this storyboard&quot;s animations. Animations without a specified <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "The behavior the new animation should use to interact with any current animations."
    - id: isControllable
      type: System.Boolean
      description: "Declares whether the animation is controllable (can be paused) once started."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Boolean)
  id: Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkElement,FrameworkTemplate,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkElement,FrameworkTemplate,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,FrameworkTemplate,Boolean)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets within the specified template and initiates them.
  remarks: "If the targeted properties are already animated, they are replaced using the <xref:System.Windows.Media.Animation.HandoffBehavior> handoff behavior.  \n  \n To interactively control this storyboard, you must specify the same `containingObject` when calling the interactive methods that you used to begin the storyboard  \n  \n When this method is called, <xref:System.Windows.Media.Animation.Clock> objects are created for the storyboard and any timelines it contains. These clocks are stored with `containingObject`.  \n  \n Beginning a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> events."
  syntax:
    content: public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, bool isControllable);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object to which the specified `frameworkTemplate` has been applied.  Animations without a <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
    - id: frameworkTemplate
      type: System.Windows.FrameworkTemplate
      description: "The template to animate."
    - id: isControllable
      type: System.Boolean
      description: "\n     if the storyboard should be interactively controllable; otherwise, ."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior)
  id: Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior)"
  nameWithType: Storyboard.Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets within the specified template and initiates them.
  remarks: "When this method is called, <xref:System.Windows.Media.Animation.Clock> objects are created for the storyboard and any timelines it contains. These clocks are stored with `containingObject`.  \n  \n Beginning a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> events.  \n  \n## Using the Compose HandoffBehavior  \n When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.  \n  \n To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  \n  \n-   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object. Specify the property being animated as the first parameter, and `null` as the second. This removes all animation clocks from the property.  \n  \n-   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>. This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock. Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`. Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not called if the effective duration of the clock is forever.  In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  \n  \n This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  \n  \n For more information about clock objects, see [Animation and Timing System Overview](../Topic/Animation%20and%20Timing%20System%20Overview.md)."
  syntax:
    content: public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object to which the specified `frameworkTemplate` has been applied. Animations without a <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
    - id: frameworkTemplate
      type: System.Windows.FrameworkTemplate
      description: "The template to animate."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "The behavior the new animation should use to interact with any current animations."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  id: Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkElement,HandoffBehavior,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkElement,HandoffBehavior,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,HandoffBehavior,Boolean)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets and initiates them.
  remarks: "To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard  \n  \n When this method is called, <xref:System.Windows.Media.Animation.Clock> objects are created for the storyboard and any timelines it contains. These clocks are stored with `containingObject`.  \n  \n Beginning a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> events.  \n  \n## Using the Compose HandoffBehavior  \n When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.  \n  \n To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  \n  \n-   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object. Specify the property being animated as the first parameter, and `null` as the second. This removes all animation clocks from the property.  \n  \n-   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>. This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock. Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`. Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not called if the effective duration of the clock is forever.  In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  \n  \n This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  \n  \n For more information about clock objects, see [Animation and Timing System Overview](../Topic/Animation%20and%20Timing%20System%20Overview.md)."
  example:
  - "The following example shows how to create a controllable storyboard.  \n  \n [!code-cs[animation_ovws_procedural_snip#ControllableStoryboardExampleWholePage](~/add/codesnippet/CSharp/animation_ovws_procedural/ControllableStoryboardExample.cs#controllablestoryboardexamplewholepage)]\n [!code-vb[animation_ovws_procedural_snip#ControllableStoryboardExampleWholePage](~/add/codesnippet/VisualBasic/animation_ovws_procedural/controllablestoryboardexample.vb#controllablestoryboardexamplewholepage)]  \n  \n The next example uses the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior> to animate when the user left-clicks, and the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior> when the user right-clicks.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkElementStoryboardHandoffBehaviorExample.cs#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkelementstoryboardhandoffbehaviorexample.vb#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]"
  syntax:
    content: public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "An object contained within the same name scope as the targets of this storyboard&quot;s animations. Animations without a specified <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "The behavior the new animation should use to interact with any current animations."
    - id: isControllable
      type: System.Boolean
      description: "Declares whether the animation is controllable (can be paused) once started."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  id: Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior,Boolean)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Applies the animations associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to their targets within the specified template and initiates them.
  remarks: "To interactively control this storyboard, you must specify the same `containingObject` when calling the interactive methods that you used to begin the storyboard  \n  \n When this method is called, <xref:System.Windows.Media.Animation.Clock> objects are created for the storyboard and any timelines it contains. These clocks are stored with `containingObject`.  \n  \n Beginning a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> events.  \n  \n## Using the Compose HandoffBehavior  \n When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.  \n  \n To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior>, you should remove composing clocks from the animated property after they complete. There are several ways to remove a clock.  \n  \n-   To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object. Specify the property being animated as the first parameter, and `null` as the second. This removes all animation clocks from the property.  \n  \n-   To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>. This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock. Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`. Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not called if the effective duration of the clock is forever.  In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.  \n  \n This is primarily an issue for animations on objects that have a long lifetime.  When an object is garbage collected, its clocks are also disconnected and garbage collected.  \n  \n For more information about clock objects, see [Animation and Timing System Overview](../Topic/Animation%20and%20Timing%20System%20Overview.md)."
  syntax:
    content: public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object to which the specified `frameworkTemplate` has been applied. Animations without a <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> are applied to `containingObject`."
    - id: frameworkTemplate
      type: System.Windows.FrameworkTemplate
      description: "The template to animate."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "The behavior the new animation should use to interact with any current animations."
    - id: isControllable
      type: System.Boolean
      description: "\n     if the storyboard should be interactively controllable; otherwise, ."
  overload: System.Windows.Media.Animation.Storyboard.Begin*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Clone
  id: Clone
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Clone()"
  nameWithType: Storyboard.Clone()
  fullName: System.Windows.Media.Animation.Storyboard.Clone()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.
  remarks: "This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version with a strongly typed implementation.  \n  \n For more information, see <xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName>."
  syntax:
    content: public System.Windows.Media.Animation.Storyboard Clone ();
    parameters: []
    return:
      type: System.Windows.Media.Animation.Storyboard
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.Clone*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "CreateInstanceCore()"
  nameWithType: Storyboard.CreateInstanceCore()
  fullName: System.Windows.Media.Animation.Storyboard.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Creates a new instance of the <see cref="T:System.Windows.Media.Animation.Storyboard"></see> class.
  remarks: This method is called internally by <xref:System.Windows.Freezable.CreateInstance%2A> when creating new instances of the <xref:System.Windows.Media.Animation.Storyboard> class for the various cloning methods (such as <xref:System.Windows.Freezable.Clone%2A> and <xref:System.Windows.Freezable.CloneCurrentValue%2A>).
  example:
  - "The following example shows a typical implementation of <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  \n  \n [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/VisualBasic/freezablesample_visualbasic/freezablesample.vb#createinstancecoreexample)]\n [!code-cs[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/CSharp/freezablesample_csharp/freezablesample.cs#createinstancecoreexample)]"
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.CreateInstanceCore*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed
  id: GetCurrentGlobalSpeed
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentGlobalSpeed()"
  nameWithType: Storyboard.GetCurrentGlobalSpeed()
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  syntax:
    content: public double GetCurrentGlobalSpeed ();
    parameters: []
    return:
      type: System.Double
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkContentElement)
  id: GetCurrentGlobalSpeed(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentGlobalSpeed(FrameworkContentElement)"
  nameWithType: Storyboard.GetCurrentGlobalSpeed(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "A clock's <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A> speed is the rate at which its time is currently progressing, compared to real-world time.  \n  \n To use this method to retrieve information about a storyboard's clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public Nullable<double> GetCurrentGlobalSpeed (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkContentElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Nullable{System.Double}
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkElement)
  id: GetCurrentGlobalSpeed(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentGlobalSpeed(FrameworkElement)"
  nameWithType: Storyboard.GetCurrentGlobalSpeed(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "A clock's <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A> speed is the rate at which its time is currently progressing, compared to real-world time.  \n  \n To use this method to retrieve information about a storyboard's clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public Nullable<double> GetCurrentGlobalSpeed (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Nullable{System.Double}
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentIteration
  id: GetCurrentIteration
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentIteration()"
  nameWithType: Storyboard.GetCurrentIteration()
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentIteration()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentIteration%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "A clock's first iteration has a value of 1.  \n  \n If this storyboard has a <xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A> setting of `true`, a full iteration consists of a forward-reverse pair, not just one of these segments.  \n  \n To use this method to retrieve information about a storyboard's clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public int GetCurrentIteration ();
    parameters: []
    return:
      type: System.Int32
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentIteration*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkContentElement)
  id: GetCurrentIteration(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentIteration(FrameworkContentElement)"
  nameWithType: Storyboard.GetCurrentIteration(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentIteration(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentIteration%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "A clock's first iteration has a value of 1.  \n  \n If this storyboard has a <xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A> setting of `true`, a full iteration consists of a forward-reverse pair, not just one of these segments.  \n  \n To use this method to retrieve information about a storyboard's clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public Nullable<int> GetCurrentIteration (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkContentElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Nullable{System.Int32}
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentIteration*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkElement)
  id: GetCurrentIteration(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentIteration(FrameworkElement)"
  nameWithType: Storyboard.GetCurrentIteration(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentIteration(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentIteration%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "A clock's first iteration has a value of 1.  \n  \n If this clock's timeline has an <xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A> setting of `true`, a full iteration consists of a forward-reverse pair, not just one of these segments.  \n  \n Regardless of its current iteration, seeking a clock returns its current iteration to 1. Restarting a clock also returns its current iteration to 1.  \n  \n To use this method to retrieve information about a storyboard's clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public Nullable<int> GetCurrentIteration (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Nullable{System.Int32}
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentIteration*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentProgress
  id: GetCurrentProgress
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentProgress()"
  nameWithType: Storyboard.GetCurrentProgress()
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentProgress()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentProgress%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: 'To use this method to retrieve information about a storyboard''s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public double GetCurrentProgress ();
    parameters: []
    return:
      type: System.Double
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentProgress*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkContentElement)
  id: GetCurrentProgress(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentProgress(FrameworkContentElement)"
  nameWithType: Storyboard.GetCurrentProgress(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentProgress(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentProgress%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: 'To use this method to retrieve information about a storyboard''s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public Nullable<double> GetCurrentProgress (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkContentElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Nullable{System.Double}
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentProgress*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkElement)
  id: GetCurrentProgress(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentProgress(FrameworkElement)"
  nameWithType: Storyboard.GetCurrentProgress(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentProgress(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentProgress%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: 'To use this method to retrieve information about a storyboard''s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public Nullable<double> GetCurrentProgress (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Nullable{System.Double}
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentProgress*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentState
  id: GetCurrentState
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentState()"
  nameWithType: Storyboard.GetCurrentState()
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentState()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentState%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "This method does not tell you whether a storyboard is paused. To determine whether a storyboard is paused, use the <xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A> method.  \n  \n To use this method to retrieve information about a storyboard's clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public System.Windows.Media.Animation.ClockState GetCurrentState ();
    parameters: []
    return:
      type: System.Windows.Media.Animation.ClockState
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentState*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkContentElement)
  id: GetCurrentState(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentState(FrameworkContentElement)"
  nameWithType: Storyboard.GetCurrentState(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentState(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentState%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "This method does not tell you whether a storyboard is paused. To determine whether a storyboard is paused, use the <xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A> method.  \n  \n To use this method to retrieve information about a storyboard's clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public System.Windows.Media.Animation.ClockState GetCurrentState (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkContentElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Windows.Media.Animation.ClockState
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentState*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkElement)
  id: GetCurrentState(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentState(FrameworkElement)"
  nameWithType: Storyboard.GetCurrentState(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentState(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentState%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "This method does not tell you whether a storyboard is paused. To determine whether a storyboard is paused, use the <xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A> method.  \n  \n To use this method to retrieve information about a storyboard's clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public System.Windows.Media.Animation.ClockState GetCurrentState (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Windows.Media.Animation.ClockState
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentState*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentTime
  id: GetCurrentTime
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentTime()"
  nameWithType: Storyboard.GetCurrentTime()
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentTime()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentTime%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: 'To use this method to retrieve information about a storyboard''s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public TimeSpan GetCurrentTime ();
    parameters: []
    return:
      type: System.TimeSpan
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentTime*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkContentElement)
  id: GetCurrentTime(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentTime(FrameworkContentElement)"
  nameWithType: Storyboard.GetCurrentTime(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentTime(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentTime%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: 'To use this method to retrieve information about a storyboard''s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public Nullable<TimeSpan> GetCurrentTime (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkContentElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Nullable{System.TimeSpan}
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentTime*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkElement)
  id: GetCurrentTime(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetCurrentTime(FrameworkElement)"
  nameWithType: Storyboard.GetCurrentTime(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentTime(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Clock.CurrentTime%2A&gt; of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: 'To use this method to retrieve information about a storyboard''s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public Nullable<TimeSpan> GetCurrentTime (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Nullable{System.TimeSpan}
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetCurrentTime*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetIsPaused
  id: GetIsPaused
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetIsPaused()"
  nameWithType: Storyboard.GetIsPaused()
  fullName: System.Windows.Media.Animation.Storyboard.GetIsPaused()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves a value that indicates whether the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> is paused.
  remarks: 'To use this method to retrieve information about a storyboard''s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public bool GetIsPaused ();
    parameters: []
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetIsPaused*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkContentElement)
  id: GetIsPaused(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetIsPaused(FrameworkContentElement)"
  nameWithType: Storyboard.GetIsPaused(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetIsPaused(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves a value that indicates whether the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> is paused.
  remarks: 'To use this method to retrieve information about a storyboard''s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public bool GetIsPaused (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkContentElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetIsPaused*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkElement)
  id: GetIsPaused(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetIsPaused(FrameworkElement)"
  nameWithType: Storyboard.GetIsPaused(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetIsPaused(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves a value that indicates whether the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> is paused.
  remarks: 'To use this method to retrieve information about a storyboard''s clock, the storyboard must be controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public bool GetIsPaused (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetIsPaused*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetTarget(System.Windows.DependencyObject)
  id: GetTarget(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetTarget(DependencyObject)"
  nameWithType: Storyboard.GetTarget(DependencyObject)
  fullName: System.Windows.Media.Animation.Storyboard.GetTarget(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Storyboard.Target%2A&gt; value of the specified <see cref="T:System.Windows.Media.Animation.Timeline"></see>.
  remarks: Use the <xref:System.Windows.Media.Animation.Storyboard.Target%2A> attached property with animation timelines to indicate the object that they target. For more information about how storyboard targeting works, see <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>. For more information about how attached properties work, see [Attached Properties Overview](../Topic/Attached%20Properties%20Overview.md).
  syntax:
    content: public static System.Windows.DependencyObject GetTarget (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The timeline from which to retrieve the <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>."
    return:
      type: System.Windows.DependencyObject
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetTarget*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetTargetName(System.Windows.DependencyObject)
  id: GetTargetName(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetTargetName(DependencyObject)"
  nameWithType: Storyboard.GetTargetName(DependencyObject)
  fullName: System.Windows.Media.Animation.Storyboard.GetTargetName(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt; value of the specified <see cref="T:System.Windows.Media.Animation.Timeline"></see>.
  remarks: This method gets the <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> attached property on the specified object. For more information about how storyboard targeting works, see <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>. For more information about how attached properties work, see [Attached Properties Overview](../Topic/Attached%20Properties%20Overview.md).
  syntax:
    content: public static string GetTargetName (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The timeline from which to retrieve the <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>."
    return:
      type: System.String
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetTargetName*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.GetTargetProperty(System.Windows.DependencyObject)
  id: GetTargetProperty(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "GetTargetProperty(DependencyObject)"
  nameWithType: Storyboard.GetTargetProperty(DependencyObject)
  fullName: System.Windows.Media.Animation.Storyboard.GetTargetProperty(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Retrieves the &lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt; value of the specified <see cref="T:System.Windows.Media.Animation.Timeline"></see>.
  remarks: "This method gets the <xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A> attached property on the specified object. For more information about how storyboard targeting works, see <xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A> attached property. For more information about how attached properties work, see [Attached Properties Overview](../Topic/Attached%20Properties%20Overview.md).  \n  \n Note that if the <xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A> was set in markup, this method returns an empty <xref:System.Windows.PropertyPath> because the property reference is resolved and stored internally when it is parsed."
  syntax:
    content: public static System.Windows.PropertyPath GetTargetProperty (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The dependency object from which to get the <xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>."
    return:
      type: System.Windows.PropertyPath
      description: "To be added."
  overload: System.Windows.Media.Animation.Storyboard.GetTargetProperty*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Pause
  id: Pause
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Pause()"
  nameWithType: Storyboard.Pause()
  fullName: System.Windows.Media.Animation.Storyboard.Pause()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Pauses the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "This method pauses the storyboard, but has no discernible effect if it is not active or currently paused. As a side effect, all associated children are also paused.  \n  \n A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n## Beginning a Paused Storyboard  \n When you <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> a storyboard that was paused, it appears to resume and restart. However, that is not what actually happens. The <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method actually replaces the paused <xref:System.Windows.Media.Animation.Storyboard> with a new unpaused version. Each time the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method is called, clock objects are created for the storyboard. These clocks are distributed to the properties they animate. So, when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method is called again, it does not restart its clocks; it replaces them with new clocks."
  syntax:
    content: public void Pause ();
    parameters: []
  overload: System.Windows.Media.Animation.Storyboard.Pause*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkContentElement)
  id: Pause(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Pause(FrameworkContentElement)"
  nameWithType: Storyboard.Pause(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.Pause(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Pauses the <see cref="T:System.Windows.Media.Animation.Clock"></see> of the specified <see cref="T:System.Windows.FrameworkContentElement"></see> associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "This method pauses the storyboard, but has no discernible effect if it is not active or currently paused. As a side effect, all associated children are also paused.  \n  \n Seeking a paused storyboard does not resume it. The only way to resume a paused storyboard is to use the <xref:System.Windows.Media.Animation.Storyboard.Resume%2A> method. Calling the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method again replaces the paused storyboard with a new one, which has the appearance of resuming it.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. Fro an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n Pausing a storyboard's clock triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> event.  \n  \n## Beginning a Paused Storyboard  \n When you <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> a storyboard that was paused, it appears to resume and restart. However, that is not what actually happens. The <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method actually replaces itself with an unpaused version. Each time the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method is called, clock objects are created for the storyboard. These clocks are distributed to the properties they animate. So, when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method is called again, it does not restart its clocks; it replaces them with new clocks."
  example:
  - "The following example uses a controllable storyboard to animate a <xref:System.Windows.Media.TextEffect>. The <xref:System.Windows.Media.TextEffect> is contained within a <xref:System.Windows.FrameworkContentElement>'s name scope.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]"
  syntax:
    content: public void Pause (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method was called. This object contains the  objects that were created for this storyboard and its children."
  overload: System.Windows.Media.Animation.Storyboard.Pause*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkElement)
  id: Pause(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Pause(FrameworkElement)"
  nameWithType: Storyboard.Pause(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.Pause(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Pauses the <see cref="T:System.Windows.Media.Animation.Clock"></see> of the specified <see cref="T:System.Windows.FrameworkElement"></see> associated with this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "This method pauses the storyboard, but has no discernible effect if it is not active or currently paused. As a side effect, all associated children are also paused.  \n  \n Seeking a paused storyboard does not resume it. The only way to resume a paused storyboard is to use the <xref:System.Windows.Media.Animation.Storyboard.Resume%2A> method. Calling the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method again replaces the paused storyboard with a new one, which has the appearance of resuming it.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n Pausing a storyboard's clock triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> event.  \n  \n## Beginning a Paused Storyboard  \n When you <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> a storyboard that was paused, it appears to resume and restart. However, that is not what actually happens. The <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method actually replaces itself with an unpaused version. Each time the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method is called, clock objects are created for the storyboard. These clocks are distributed to the properties they animate. So, when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method is called again, it does not restart its clocks; it replaces them with new clocks."
  syntax:
    content: public void Pause (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
  overload: System.Windows.Media.Animation.Storyboard.Pause*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Remove
  id: Remove
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Remove()"
  nameWithType: Storyboard.Remove()
  fullName: System.Windows.Media.Animation.Storyboard.Remove()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Removes the <see cref="T:System.Windows.Media.Animation.Clock"></see> objects that were created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>. Animations that belong to this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> no longer affect the properties they once animated, regardless of their &lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt; setting.
  remarks: "A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n All interactive actions taken on a <xref:System.Windows.Media.Animation.Clock>, and therefore also on a <xref:System.Windows.Media.Animation.Storyboard>, occur on the next tick of the timing engine, which happens shortly before the next render. This means that the <xref:System.Windows.Media.Animation.Storyboard.Remove%2A> method still affects the animated properties until this time. In other words, the next time the frame is displayed, the storyboard is removed. If you need to disassociate an animation from a property before this time, use the <xref:System.Windows.UIElement.BeginAnimation%2A> method with an `animation` parameter value of `null`."
  syntax:
    content: public void Remove ();
    parameters: []
  overload: System.Windows.Media.Animation.Storyboard.Remove*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkContentElement)
  id: Remove(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Remove(FrameworkContentElement)"
  nameWithType: Storyboard.Remove(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.Remove(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Removes the <see cref="T:System.Windows.Media.Animation.Clock"></see> objects that were created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>. Animations that belong to this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> no longer affect the properties they once animated, regardless of their &lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt; setting.
  remarks: "To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n Removing a storyboard's clock triggers the <xref:System.Windows.Media.Animation.Timeline.RemoveRequested> event."
  syntax:
    content: public void Remove (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A?displayProperty=fullName> method was called. This object contains the  objects that were created for this storyboard and its children."
  overload: System.Windows.Media.Animation.Storyboard.Remove*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkElement)
  id: Remove(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Remove(FrameworkElement)"
  nameWithType: Storyboard.Remove(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.Remove(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Removes the <see cref="T:System.Windows.Media.Animation.Clock"></see> objects that were created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>. Animations that belong to this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> no longer affect the properties they once animated, regardless of their &lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt; setting.
  remarks: "To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n Removing a storyboard's clock triggers the <xref:System.Windows.Media.Animation.Timeline.RemoveRequested> event."
  syntax:
    content: public void Remove (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A?displayProperty=fullName> method was called. This object contains the  objects that were created for this storyboard and its children."
  overload: System.Windows.Media.Animation.Storyboard.Remove*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Resume
  id: Resume
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Resume()"
  nameWithType: Storyboard.Resume()
  fullName: System.Windows.Media.Animation.Storyboard.Resume()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Resumes the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: 'A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public void Resume ();
    parameters: []
  overload: System.Windows.Media.Animation.Storyboard.Resume*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkContentElement)
  id: Resume(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Resume(FrameworkContentElement)"
  nameWithType: Storyboard.Resume(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.Resume(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Resumes the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "Resuming a storyboard that is not paused has no effect.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n Seeking a paused storyboard does not resume it. The only way to resume a paused storyboard is to use the Resume method. Calling the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method after the storyboard has started replaces the old storyboard, which has the appearance of resuming it.  \n  \n Resuming a paused a storyboard's clock triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> event."
  example:
  - "The following example uses a controllable storyboard to animate a <xref:System.Windows.Media.TextEffect>. The <xref:System.Windows.Media.TextEffect> is contained within a <xref:System.Windows.FrameworkContentElement>'s name scope.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]"
  syntax:
    content: public void Resume (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method was called. This object contains the  objects that were created for this storyboard and its children."
  overload: System.Windows.Media.Animation.Storyboard.Resume*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkElement)
  id: Resume(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Resume(FrameworkElement)"
  nameWithType: Storyboard.Resume(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.Resume(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Resumes the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "Resuming a storyboard that is not paused has no effect.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n Seeking a paused storyboard does not resume it. The only way to resume a paused storyboard is to use the Resume method. Calling the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method after the storyboard has started replaces the old storyboard, which has the appearance of resuming it.  \n  \n Resuming a paused a storyboard's clock triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> event."
  syntax:
    content: public void Resume (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method was called. This object contains the  objects that were created for this storyboard and its children."
  overload: System.Windows.Media.Animation.Storyboard.Resume*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan)
  id: Seek(System.TimeSpan)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Seek(TimeSpan)"
  nameWithType: Storyboard.Seek(TimeSpan)
  fullName: System.Windows.Media.Animation.Storyboard.Seek(TimeSpan)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Seeks this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to the specified position. The <see cref="T:System.Windows.Media.Animation.Storyboard"></see> performs the requested seek when the next clock tick occurs.
  remarks: "Note that seek operations do not take the storyboard's <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> or <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> settings into account. The storyboard is treated as though it has a <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> of 1 and no <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public void Seek (TimeSpan offset);
    parameters:
    - id: offset
      type: System.TimeSpan
      description: "A positive or negative value that describes the amount by which the timeline should move forward or backward."
  overload: System.Windows.Media.Animation.Storyboard.Seek*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  id: Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Seek(TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.Seek(TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.Seek(TimeSpan,TimeSeekOrigin)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Seeks this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to the specified position. The <see cref="T:System.Windows.Media.Animation.Storyboard"></see> performs the requested seek when the next clock tick occurs.
  remarks: "Note that seek operations do not take the storyboard's <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> or <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> settings into account. The storyboard is treated as though it has a <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> of 1 and no <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);
    parameters:
    - id: offset
      type: System.TimeSpan
      description: "A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified `origin`."
    - id: origin
      type: System.Windows.Media.Animation.TimeSeekOrigin
      description: "The position from which `offset` is applied."
  overload: System.Windows.Media.Animation.Storyboard.Seek*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  id: Seek(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Seek(FrameworkContentElement,TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.Seek(FrameworkContentElement,TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.Seek(FrameworkContentElement,TimeSpan,TimeSeekOrigin)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Seeks this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to the specified position. The <see cref="T:System.Windows.Media.Animation.Storyboard"></see> performs the requested seek when the next clock tick occurs.
  remarks: "Note that seek operations do not take the storyboard's <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> or <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> settings into account. The storyboard is treated as though it has a <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> of 1 and no <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>.  \n  \n This method changes the storyboard clock's <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> to <xref:System.Windows.Media.Animation.ClockState>. This method has no effect on the timing tree until the next time a tick is processed. As a side-effect, the appropriate events are also not raised until then.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n Seeking a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> events."
  example:
  - "The following example shows both the <xref:System.Windows.Media.Animation.Storyboard.Seek%2A> and <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> methods.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementSeekExample.cs#frameworkcontentelementseekexampleusingwholepage)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementseekexample.vb#frameworkcontentelementseekexampleusingwholepage)]"
  syntax:
    content: public void Seek (System.Windows.FrameworkContentElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkContentElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    - id: offset
      type: System.TimeSpan
      description: "A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified `origin`."
    - id: origin
      type: System.Windows.Media.Animation.TimeSeekOrigin
      description: "The position from which `offset` is applied."
  overload: System.Windows.Media.Animation.Storyboard.Seek*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  id: Seek(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Seek(FrameworkElement,TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.Seek(FrameworkElement,TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.Seek(FrameworkElement,TimeSpan,TimeSeekOrigin)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Seeks this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to the specified position. The <see cref="T:System.Windows.Media.Animation.Storyboard"></see> performs the requested seek when the next clock tick occurs.
  remarks: "Note that seek operations do not take the storyboard's <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> or <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> settings into account. The storyboard is treated as though it has a <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> of 1 and no <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>.  \n  \n This method changes the storyboard clock's <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> to <xref:System.Windows.Media.Animation.ClockState>. This method has no effect on the timing tree until the next time a tick is processed. As a side-effect, the appropriate events are also not raised until then.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed if it is made controllable. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n Seeking a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> events."
  example:
  - "The following example shows how to seek (skip) to one second after a Storyboard begins.  \n  \n [!code-cs[timingbehaviors_procedural_snip#SeekStoryboardExampleWholePage](~/add/codesnippet/CSharp/TimingBehavior_csharp/SeekStoryboardExample.cs#seekstoryboardexamplewholepage)]\n [!code-vb[timingbehaviors_procedural_snip#SeekStoryboardExampleWholePage](~/add/codesnippet/VisualBasic/timingbehavior_vb/seekstoryboardexample.vb#seekstoryboardexamplewholepage)]  \n  \n The next example shows both the Seek and <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> methods.  \n  \n [!code-vb[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/seekexample.vb#seekexampleusingwholepage)]\n [!code-cs[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/SeekExample.cs#seekexampleusingwholepage)]"
  syntax:
    content: public void Seek (System.Windows.FrameworkElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method was called. This object contains the  objects that were created for this storyboard and its children."
    - id: offset
      type: System.TimeSpan
      description: "A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified `origin`."
    - id: origin
      type: System.Windows.Media.Animation.TimeSeekOrigin
      description: "The position from which `offset` is applied."
  overload: System.Windows.Media.Animation.Storyboard.Seek*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan)
  id: SeekAlignedToLastTick(System.TimeSpan)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SeekAlignedToLastTick(TimeSpan)"
  nameWithType: Storyboard.SeekAlignedToLastTick(TimeSpan)
  fullName: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(TimeSpan)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Seeks this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to a new position immediately (synchronously).
  remarks: "<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> aligns the seeked time of the <xref:System.Windows.Media.Animation.Storyboard> with the last clock tick. Values are immediately updated to reflect the changes due to <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>, even though the screen does not reflect these changes until the screen updates.  \n  \n Note that seek operations do not take the storyboard's <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> or <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> settings into account. The storyboard is treated as though it has a <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> of 1 and no <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>.  \n  \n To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public void SeekAlignedToLastTick (TimeSpan offset);
    parameters:
    - id: offset
      type: System.TimeSpan
      description: "A positive or negative value that describes the amount by which the timeline should move forward or backward."
  overload: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  id: SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SeekAlignedToLastTick(TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.SeekAlignedToLastTick(TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(TimeSpan,TimeSeekOrigin)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Seeks this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to a new position immediately (synchronously).
  remarks: "<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> aligns the seeked time of the <xref:System.Windows.Media.Animation.Storyboard> with the last clock tick. Values are immediately updated to reflect the changes due to <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>, even though the screen does not reflect these changes until the screen updates.  \n  \n Note that seek operations do not take the storyboard's <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> or <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> settings into account. The storyboard is treated as though it has a <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> of 1 and no <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>.  \n  \n To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);
    parameters:
    - id: offset
      type: System.TimeSpan
      description: "A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified `origin`."
    - id: origin
      type: System.Windows.Media.Animation.TimeSeekOrigin
      description: "The position from which `offset` is applied."
  overload: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  id: SeekAlignedToLastTick(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SeekAlignedToLastTick(FrameworkContentElement,TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.SeekAlignedToLastTick(FrameworkContentElement,TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(FrameworkContentElement,TimeSpan,TimeSeekOrigin)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Seeks this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to a new position immediately (synchronously).
  remarks: "<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> aligns the seeked time of the <xref:System.Windows.Media.Animation.Storyboard> with the last clock tick. Values are immediately updated to reflect the changes due to <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>, even though the screen does not reflect these changes until the screen updates.  \n  \n Note that seek operations do not take the storyboard's <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> or <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> settings into account. The storyboard is treated as though it has a <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> of 1 and no <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>.  \n  \n This method changes the storyboard clock's <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> to  \n  \n <xref:System.Windows.Media.Animation.ClockState>.  \n  \n Seeking a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> events.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  example:
  - "The following example shows both the <xref:System.Windows.Media.Animation.Storyboard.Seek%2A> and <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> methods.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementSeekExample.cs#frameworkcontentelementseekexampleusingwholepage)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementseekexample.vb#frameworkcontentelementseekexampleusingwholepage)]"
  syntax:
    content: public void SeekAlignedToLastTick (System.Windows.FrameworkContentElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkContentElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    - id: offset
      type: System.TimeSpan
      description: "A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified `origin`."
    - id: origin
      type: System.Windows.Media.Animation.TimeSeekOrigin
      description: "The position from which `offset` is applied."
  overload: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  id: SeekAlignedToLastTick(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SeekAlignedToLastTick(FrameworkElement,TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.SeekAlignedToLastTick(FrameworkElement,TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(FrameworkElement,TimeSpan,TimeSeekOrigin)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Seeks this <see cref="T:System.Windows.Media.Animation.Storyboard"></see> to a new position immediately (synchronously).
  remarks: "<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> aligns the seeked time of the <xref:System.Windows.Media.Animation.Storyboard> with the last clock tick. Values are immediately updated to reflect the changes due to <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>, even though the screen does not reflect these changes until the screen updates.  \n  \n Note that seek operations do not take the storyboard's <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> or <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> settings into account. The storyboard is treated as though it has a <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> of 1 and no <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>.  \n  \n This method changes the storyboard clock's <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> to  \n  \n <xref:System.Windows.Media.Animation.ClockState>.  \n  \n Seeking a storyboard triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> events.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  example:
  - "The following example shows both the <xref:System.Windows.Media.Animation.Storyboard.Seek%2A> and SeekAlignedToLastTick methods.  \n  \n [!code-vb[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/seekexample.vb#seekexampleusingwholepage)]\n [!code-cs[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/SeekExample.cs#seekexampleusingwholepage)]"
  syntax:
    content: public void SeekAlignedToLastTick (System.Windows.FrameworkElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29> method was called. This object contains the  objects that were created for this storyboard and its children."
    - id: offset
      type: System.TimeSpan
      description: "A positive or negative value that describes the amount by which the timeline should move forward or backward from the specified `origin`."
    - id: origin
      type: System.Windows.Media.Animation.TimeSeekOrigin
      description: "The position from which `offset` is applied."
  overload: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Double)
  id: SetSpeedRatio(System.Double)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SetSpeedRatio(Double)"
  nameWithType: Storyboard.SetSpeedRatio(Double)
  fullName: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(Double)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Sets the interactive speed ratio for the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: 'A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public void SetSpeedRatio (double speedRatio);
    parameters:
    - id: speedRatio
      type: System.Double
      description: "A finite value greater than zero that is the new interactive speed ratio of the storyboard. This value is multiplied against the storyboard&quot;s <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> value to determine the storyboard&quot;s effective speed. This value does not overwrite the storyboard&quot;s <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> property. For example, calling this method and specifying an interactive speed ratio of 3 on a storyboard with a <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> of 0.5 gives the storyboard an effective speed of 1.5."
  overload: System.Windows.Media.Animation.Storyboard.SetSpeedRatio*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkContentElement,System.Double)
  id: SetSpeedRatio(System.Windows.FrameworkContentElement,System.Double)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SetSpeedRatio(FrameworkContentElement,Double)"
  nameWithType: Storyboard.SetSpeedRatio(FrameworkContentElement,Double)
  fullName: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(FrameworkContentElement,Double)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Sets the interactive speed ratio of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n Calling this method triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> event."
  example:
  - "The following example uses a controllable storyboard to animate a <xref:System.Windows.Media.TextEffect>. The <xref:System.Windows.Media.TextEffect> is contained within a <xref:System.Windows.FrameworkContentElement>'s name scope.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]"
  syntax:
    content: public void SetSpeedRatio (System.Windows.FrameworkContentElement containingObject, double speedRatio);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method was called. This object contains the  objects that were created for this storyboard and its children."
    - id: speedRatio
      type: System.Double
      description: "A finite value greater than zero that is the new interactive speed ratio of the storyboard. This value is multiplied against the storyboard&quot;s <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> value to determine the storyboard&quot;s effective speed. This value does not overwrite the storyboard&quot;s <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> property. For example, calling this method and specifying an interactive speed ratio of 3 on a storyboard with a <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> of 0.5 gives the storyboard an effective speed of 1.5."
  overload: System.Windows.Media.Animation.Storyboard.SetSpeedRatio*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkElement,System.Double)
  id: SetSpeedRatio(System.Windows.FrameworkElement,System.Double)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SetSpeedRatio(FrameworkElement,Double)"
  nameWithType: Storyboard.SetSpeedRatio(FrameworkElement,Double)
  fullName: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(FrameworkElement,Double)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Sets the interactive speed ratio of the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).  \n  \n Calling this method triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> event."
  syntax:
    content: public void SetSpeedRatio (System.Windows.FrameworkElement containingObject, double speedRatio);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method was called. This object contains the  objects that were created for this storyboard and its children."
    - id: speedRatio
      type: System.Double
      description: "A finite value greater than zero that is the new interactive speed ratio of the storyboard. This value is multiplied against the storyboard&quot;s <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> value to determine the storyboard&quot;s effective speed. This value does not overwrite the storyboard&quot;s <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> property. For example, calling this method and specifying an interactive speed ratio of 3 on a storyboard with a <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> of 0.5 gives the storyboard an effective speed of 1.5."
  overload: System.Windows.Media.Animation.Storyboard.SetSpeedRatio*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SetTarget(System.Windows.DependencyObject,System.Windows.DependencyObject)
  id: SetTarget(System.Windows.DependencyObject,System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SetTarget(DependencyObject,DependencyObject)"
  nameWithType: Storyboard.SetTarget(DependencyObject,DependencyObject)
  fullName: System.Windows.Media.Animation.Storyboard.SetTarget(DependencyObject,DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Makes the specified <see cref="T:System.Windows.Media.Animation.Timeline"></see> target the dependency object.
  remarks: "This method sets the <xref:System.Windows.Media.Animation.Storyboard.Target%2A> attached property on the specified object. For more information about how storyboard targeting works, see <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>. For more information about how attached properties work, see [Attached Properties Overview](../Topic/Attached%20Properties%20Overview.md).  \n  \n> [!NOTE]\n>  The <xref:System.Windows.Media.Animation.Storyboard.Target%2A> property is not serializable, because it can be set to any <xref:System.Windows.DependencyObject>. It is not guaranteed that this object can be correctly referenced from XAML."
  syntax:
    content: public static void SetTarget (System.Windows.DependencyObject element, System.Windows.DependencyObject value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The  that should target the specified dependency object."
    - id: value
      type: System.Windows.DependencyObject
      description: "The dependency object to target."
  overload: System.Windows.Media.Animation.Storyboard.SetTarget*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SetTargetName(System.Windows.DependencyObject,System.String)
  id: SetTargetName(System.Windows.DependencyObject,System.String)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SetTargetName(DependencyObject,String)"
  nameWithType: Storyboard.SetTargetName(DependencyObject,String)
  fullName: System.Windows.Media.Animation.Storyboard.SetTargetName(DependencyObject,String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Makes the specified <see cref="T:System.Windows.Media.Animation.Timeline"></see> target the dependency object with the specified name.
  remarks: This method sets the <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> attached property on the specified object. For more information about how storyboard targeting works, see <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>. For more information about how attached properties work, see [Attached Properties Overview](../Topic/Attached%20Properties%20Overview.md).
  syntax:
    content: public static void SetTargetName (System.Windows.DependencyObject element, string name);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The  that should target the specified dependency object."
    - id: name
      type: System.String
      description: "The name of the dependency object to target."
  overload: System.Windows.Media.Animation.Storyboard.SetTargetName*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SetTargetProperty(System.Windows.DependencyObject,System.Windows.PropertyPath)
  id: SetTargetProperty(System.Windows.DependencyObject,System.Windows.PropertyPath)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SetTargetProperty(DependencyObject,PropertyPath)"
  nameWithType: Storyboard.SetTargetProperty(DependencyObject,PropertyPath)
  fullName: System.Windows.Media.Animation.Storyboard.SetTargetProperty(DependencyObject,PropertyPath)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Makes the specified <see cref="T:System.Windows.Media.Animation.Timeline"></see> target the specified dependency property.
  remarks: This method sets the <xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A> attached property on the specified object. For more information about how storyboard targeting works, see <xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>. For more information about how attached properties work, see [Attached Properties Overview](../Topic/Attached%20Properties%20Overview.md).
  syntax:
    content: public static void SetTargetProperty (System.Windows.DependencyObject element, System.Windows.PropertyPath path);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "The  with which to associate the specified dependency property."
    - id: path
      type: System.Windows.PropertyPath
      description: "A path that describe the dependency property to be animated."
  overload: System.Windows.Media.Animation.Storyboard.SetTargetProperty*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SkipToFill
  id: SkipToFill
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SkipToFill()"
  nameWithType: Storyboard.SkipToFill()
  fullName: System.Windows.Media.Animation.Storyboard.SkipToFill()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Advances the current time of this storyboard's <see cref="T:System.Windows.Media.Animation.Clock"></see> to the end of its active period.
  remarks: 'A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard''s <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md).'
  syntax:
    content: public void SkipToFill ();
    parameters: []
  overload: System.Windows.Media.Animation.Storyboard.SkipToFill*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkContentElement)
  id: SkipToFill(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SkipToFill(FrameworkContentElement)"
  nameWithType: Storyboard.SkipToFill(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.SkipToFill(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Advances the current time of this storyboard's <see cref="T:System.Windows.Media.Animation.Clock"></see> to the end of its active period.
  remarks: "This method advances the storyboard's current time to the end of its active period; the storyboard's behavior at this point is specified by its <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> setting. If <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> is set to <xref:System.Windows.Media.Animation.FillBehavior>, the storyboard fills; if the property is set to <xref:System.Windows.Media.Animation.FillBehavior>, the storyboard stops.  \n  \n Calling this method on a storyboard with an infinite duration, an infinite number of repetitions has no effect. Calling this method on an inactive storyboard has no effect.  \n  \n Advancing a clock to its fill period triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> events.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  example:
  - "The following example uses a controllable storyboard to animate a <xref:System.Windows.Media.TextEffect>. The <xref:System.Windows.Media.TextEffect> is contained within a <xref:System.Windows.FrameworkContentElement>'s name scope.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]"
  syntax:
    content: public void SkipToFill (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method was called. This object contains the  objects that were created for this storyboard and its children."
  overload: System.Windows.Media.Animation.Storyboard.SkipToFill*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkElement)
  id: SkipToFill(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "SkipToFill(FrameworkElement)"
  nameWithType: Storyboard.SkipToFill(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.SkipToFill(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Advances the current time of this storyboard's <see cref="T:System.Windows.Media.Animation.Clock"></see> to the end of its active period.
  remarks: "This method advances the storyboard's current time to the end of its active period; the storyboard's behavior at this point is specified by its <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> setting. If <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> is set to <xref:System.Windows.Media.Animation.FillBehavior>, the storyboard fills; if the property is set to <xref:System.Windows.Media.Animation.FillBehavior>, the storyboard stops.  \n  \n Calling this method on a storyboard with an infinite duration, an infinite number of repetitions has no effect. Calling this method on an inactive storyboard has no effect.  \n  \n Advancing a clock to its fill period triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> events.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public void SkipToFill (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method was called. This object contains the  objects that were created for this storyboard and its children."
  overload: System.Windows.Media.Animation.Storyboard.SkipToFill*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Stop
  id: Stop
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Stop()"
  nameWithType: Storyboard.Stop()
  fullName: System.Windows.Media.Animation.Storyboard.Stop()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Stops the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: Note that stopping a storyboard does not fire the <xref:System.Windows.Media.Animation.Timeline.Completed> event.
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Windows.Media.Animation.Storyboard.Stop*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkContentElement)
  id: Stop(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Stop(FrameworkContentElement)"
  nameWithType: Storyboard.Stop(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.Stop(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Stops the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "A <xref:System.Windows.Media.Animation.ClockState> storyboard no longer affects its target properties: properties that were animated revert to their previous values.  \n  \n Stopping a clock triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> events, but not the <xref:System.Windows.Media.Animation.Timeline.Completed> event.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  example:
  - "The following example uses a controllable storyboard to animate a <xref:System.Windows.Media.TextEffect>. The <xref:System.Windows.Media.TextEffect> is contained within a <xref:System.Windows.FrameworkContentElement>'s name scope.  \n  \n [!code-cs[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/CSharp/AnimateProperty_Storyboards_csharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]\n [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/add/codesnippet/VisualBasic/animateproperty_storyboards_vb/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]"
  syntax:
    content: public void Stop (System.Windows.FrameworkContentElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkContentElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method was called. This object contains the  objects that were created for this storyboard and its children."
  overload: System.Windows.Media.Animation.Storyboard.Stop*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkElement)
  id: Stop(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "Stop(FrameworkElement)"
  nameWithType: Storyboard.Stop(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.Stop(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Stops the <see cref="T:System.Windows.Media.Animation.Clock"></see> that was created for this <see cref="T:System.Windows.Media.Animation.Storyboard"></see>.
  remarks: "A <xref:System.Windows.Media.Animation.ClockState> storyboard no longer affects its target properties: properties that were animated revert to their previous values.  \n  \n Stopping a clock triggers the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> and <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> events, but not the <xref:System.Windows.Media.Animation.Timeline.Completed> event.  \n  \n To interactively control this storyboard, you must use the same `containingObject` parameter when calling the interactive methods that you used to begin the storyboard. A controllable storyboard can pause, resume, seek, stop, and be removed. To make a storyboard controllable in code, you must use the appropriate overload of the storyboard's <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method and specify `true` to make it controllable. For an example, see [How to: Control a Storyboard After It Starts](../Topic/How%20to:%20Control%20a%20Storyboard%20After%20It%20Starts.md)."
  syntax:
    content: public void Stop (System.Windows.FrameworkElement containingObject);
    parameters:
    - id: containingObject
      type: System.Windows.FrameworkElement
      description: "The object specified when the <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> method was called. This object contains the  objects that were created for this storyboard and its children."
  overload: System.Windows.Media.Animation.Storyboard.Stop*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.TargetNameProperty
  id: TargetNameProperty
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "TargetNameProperty"
  nameWithType: Storyboard.TargetNameProperty
  fullName: System.Windows.Media.Animation.Storyboard.TargetNameProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Identifies the &lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt; attached property.
  syntax:
    content: public static readonly System.Windows.DependencyProperty TargetNameProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.TargetProperty
  id: TargetProperty
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "TargetProperty"
  nameWithType: Storyboard.TargetProperty
  fullName: System.Windows.Media.Animation.Storyboard.TargetProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Identifies the &lt;xref:System.Windows.Media.Animation.Storyboard.Target%2A&gt; attached property.
  syntax:
    content: public static readonly System.Windows.DependencyProperty TargetProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.Storyboard.TargetPropertyProperty
  id: TargetPropertyProperty
  parent: System.Windows.Media.Animation.Storyboard
  langs:
  - csharp
  name: "TargetPropertyProperty"
  nameWithType: Storyboard.TargetPropertyProperty
  fullName: System.Windows.Media.Animation.Storyboard.TargetPropertyProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Media.Animation
  summary: Identifies the &lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A&gt; attached property.
  syntax:
    content: public static readonly System.Windows.DependencyProperty TargetPropertyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Windows.Media.Animation.ParallelTimeline
  isExternal: false
  name: "System.Windows.Media.Animation.ParallelTimeline"
- uid: System.Windows.Media.Animation.Storyboard.#ctor
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Storyboard()"
  nameWithType: Storyboard.Storyboard()
  fullName: System.Windows.Media.Animation.Storyboard.Storyboard()
- uid: System.Windows.Media.Animation.Storyboard.Begin
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin()"
  nameWithType: Storyboard.Begin()
  fullName: System.Windows.Media.Animation.Storyboard.Begin()
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkContentElement)"
  nameWithType: Storyboard.Begin(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkContentElement)
- uid: System.Windows.FrameworkContentElement
  parent: System.Windows
  isExternal: false
  name: "FrameworkContentElement"
  nameWithType: FrameworkContentElement
  fullName: System.Windows.FrameworkContentElement
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkElement)"
  nameWithType: Storyboard.Begin(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement)
- uid: System.Windows.FrameworkElement
  parent: System.Windows
  isExternal: false
  name: "FrameworkElement"
  nameWithType: FrameworkElement
  fullName: System.Windows.FrameworkElement
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkContentElement,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkContentElement,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkContentElement,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: "Boolean"
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkContentElement,HandoffBehavior)"
  nameWithType: Storyboard.Begin(FrameworkContentElement,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkContentElement,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: "HandoffBehavior"
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkElement,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkElement,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,Boolean)
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkElement,FrameworkTemplate)"
  nameWithType: Storyboard.Begin(FrameworkElement,FrameworkTemplate)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,FrameworkTemplate)
- uid: System.Windows.FrameworkTemplate
  parent: System.Windows
  isExternal: false
  name: "FrameworkTemplate"
  nameWithType: FrameworkTemplate
  fullName: System.Windows.FrameworkTemplate
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkElement,HandoffBehavior)"
  nameWithType: Storyboard.Begin(FrameworkElement,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,HandoffBehavior)
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkContentElement,HandoffBehavior,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkContentElement,HandoffBehavior,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkContentElement,HandoffBehavior,Boolean)
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkElement,FrameworkTemplate,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkElement,FrameworkTemplate,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,FrameworkTemplate,Boolean)
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior)"
  nameWithType: Storyboard.Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior)
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkElement,HandoffBehavior,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkElement,HandoffBehavior,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,HandoffBehavior,Boolean)
- uid: System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior,Boolean)"
  nameWithType: Storyboard.Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior,Boolean)
  fullName: System.Windows.Media.Animation.Storyboard.Begin(FrameworkElement,FrameworkTemplate,HandoffBehavior,Boolean)
- uid: System.Windows.Media.Animation.Storyboard.Clone
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Clone()"
  nameWithType: Storyboard.Clone()
  fullName: System.Windows.Media.Animation.Storyboard.Clone()
- uid: System.Windows.Media.Animation.Storyboard
  parent: System.Windows.Media.Animation
  isExternal: false
  name: "Storyboard"
  nameWithType: Storyboard
  fullName: System.Windows.Media.Animation.Storyboard
- uid: System.Windows.Media.Animation.Storyboard.CreateInstanceCore
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "CreateInstanceCore()"
  nameWithType: Storyboard.CreateInstanceCore()
  fullName: System.Windows.Media.Animation.Storyboard.CreateInstanceCore()
- uid: System.Windows.Freezable
  parent: System.Windows
  isExternal: false
  name: "Freezable"
  nameWithType: Freezable
  fullName: System.Windows.Freezable
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentGlobalSpeed()"
  nameWithType: Storyboard.GetCurrentGlobalSpeed()
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed()
- uid: System.Double
  parent: System
  isExternal: true
  name: "Double"
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentGlobalSpeed(FrameworkContentElement)"
  nameWithType: Storyboard.GetCurrentGlobalSpeed(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(FrameworkContentElement)
- uid: System.Nullable{System.Double}
  parent: System
  isExternal: true
  name: "Nullable<Double>"
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  spec.csharp:
  - uid: System.Nullable`1
    name: "Nullable"
    nameWithType: Nullable
    fullName: Nullable<System.Double>
  - name: "<"
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: "Double"
    nameWithType: Double
    fullName: Double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentGlobalSpeed(FrameworkElement)"
  nameWithType: Storyboard.GetCurrentGlobalSpeed(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(FrameworkElement)
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentIteration
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentIteration()"
  nameWithType: Storyboard.GetCurrentIteration()
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentIteration()
- uid: System.Int32
  parent: System
  isExternal: true
  name: "Int32"
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentIteration(FrameworkContentElement)"
  nameWithType: Storyboard.GetCurrentIteration(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentIteration(FrameworkContentElement)
- uid: System.Nullable{System.Int32}
  parent: System
  isExternal: true
  name: "Nullable<Int32>"
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  spec.csharp:
  - uid: System.Nullable`1
    name: "Nullable"
    nameWithType: Nullable
    fullName: Nullable<System.Int32>
  - name: "<"
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: "Int32"
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentIteration(FrameworkElement)"
  nameWithType: Storyboard.GetCurrentIteration(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentIteration(FrameworkElement)
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentProgress
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentProgress()"
  nameWithType: Storyboard.GetCurrentProgress()
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentProgress()
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentProgress(FrameworkContentElement)"
  nameWithType: Storyboard.GetCurrentProgress(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentProgress(FrameworkContentElement)
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentProgress(FrameworkElement)"
  nameWithType: Storyboard.GetCurrentProgress(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentProgress(FrameworkElement)
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentState
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentState()"
  nameWithType: Storyboard.GetCurrentState()
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentState()
- uid: System.Windows.Media.Animation.ClockState
  parent: System.Windows.Media.Animation
  isExternal: false
  name: "ClockState"
  nameWithType: ClockState
  fullName: System.Windows.Media.Animation.ClockState
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentState(FrameworkContentElement)"
  nameWithType: Storyboard.GetCurrentState(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentState(FrameworkContentElement)
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentState(FrameworkElement)"
  nameWithType: Storyboard.GetCurrentState(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentState(FrameworkElement)
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentTime
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentTime()"
  nameWithType: Storyboard.GetCurrentTime()
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentTime()
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: "TimeSpan"
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentTime(FrameworkContentElement)"
  nameWithType: Storyboard.GetCurrentTime(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentTime(FrameworkContentElement)
- uid: System.Nullable{System.TimeSpan}
  parent: System
  isExternal: true
  name: "Nullable<TimeSpan>"
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  spec.csharp:
  - uid: System.Nullable`1
    name: "Nullable"
    nameWithType: Nullable
    fullName: Nullable<System.TimeSpan>
  - name: "<"
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: "TimeSpan"
    nameWithType: TimeSpan
    fullName: TimeSpan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentTime(FrameworkElement)"
  nameWithType: Storyboard.GetCurrentTime(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetCurrentTime(FrameworkElement)
- uid: System.Windows.Media.Animation.Storyboard.GetIsPaused
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetIsPaused()"
  nameWithType: Storyboard.GetIsPaused()
  fullName: System.Windows.Media.Animation.Storyboard.GetIsPaused()
- uid: System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetIsPaused(FrameworkContentElement)"
  nameWithType: Storyboard.GetIsPaused(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetIsPaused(FrameworkContentElement)
- uid: System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetIsPaused(FrameworkElement)"
  nameWithType: Storyboard.GetIsPaused(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.GetIsPaused(FrameworkElement)
- uid: System.Windows.Media.Animation.Storyboard.GetTarget(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetTarget(DependencyObject)"
  nameWithType: Storyboard.GetTarget(DependencyObject)
  fullName: System.Windows.Media.Animation.Storyboard.GetTarget(DependencyObject)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: "DependencyObject"
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Media.Animation.Storyboard.GetTargetName(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetTargetName(DependencyObject)"
  nameWithType: Storyboard.GetTargetName(DependencyObject)
  fullName: System.Windows.Media.Animation.Storyboard.GetTargetName(DependencyObject)
- uid: System.String
  parent: System
  isExternal: true
  name: "String"
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Media.Animation.Storyboard.GetTargetProperty(System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetTargetProperty(DependencyObject)"
  nameWithType: Storyboard.GetTargetProperty(DependencyObject)
  fullName: System.Windows.Media.Animation.Storyboard.GetTargetProperty(DependencyObject)
- uid: System.Windows.PropertyPath
  parent: System.Windows
  isExternal: false
  name: "PropertyPath"
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
- uid: System.Windows.Media.Animation.Storyboard.Pause
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Pause()"
  nameWithType: Storyboard.Pause()
  fullName: System.Windows.Media.Animation.Storyboard.Pause()
- uid: System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Pause(FrameworkContentElement)"
  nameWithType: Storyboard.Pause(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.Pause(FrameworkContentElement)
- uid: System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Pause(FrameworkElement)"
  nameWithType: Storyboard.Pause(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.Pause(FrameworkElement)
- uid: System.Windows.Media.Animation.Storyboard.Remove
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Remove()"
  nameWithType: Storyboard.Remove()
  fullName: System.Windows.Media.Animation.Storyboard.Remove()
- uid: System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Remove(FrameworkContentElement)"
  nameWithType: Storyboard.Remove(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.Remove(FrameworkContentElement)
- uid: System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Remove(FrameworkElement)"
  nameWithType: Storyboard.Remove(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.Remove(FrameworkElement)
- uid: System.Windows.Media.Animation.Storyboard.Resume
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Resume()"
  nameWithType: Storyboard.Resume()
  fullName: System.Windows.Media.Animation.Storyboard.Resume()
- uid: System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Resume(FrameworkContentElement)"
  nameWithType: Storyboard.Resume(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.Resume(FrameworkContentElement)
- uid: System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Resume(FrameworkElement)"
  nameWithType: Storyboard.Resume(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.Resume(FrameworkElement)
- uid: System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Seek(TimeSpan)"
  nameWithType: Storyboard.Seek(TimeSpan)
  fullName: System.Windows.Media.Animation.Storyboard.Seek(TimeSpan)
- uid: System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Seek(TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.Seek(TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.Seek(TimeSpan,TimeSeekOrigin)
- uid: System.Windows.Media.Animation.TimeSeekOrigin
  parent: System.Windows.Media.Animation
  isExternal: false
  name: "TimeSeekOrigin"
  nameWithType: TimeSeekOrigin
  fullName: System.Windows.Media.Animation.TimeSeekOrigin
- uid: System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Seek(FrameworkContentElement,TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.Seek(FrameworkContentElement,TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.Seek(FrameworkContentElement,TimeSpan,TimeSeekOrigin)
- uid: System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Seek(FrameworkElement,TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.Seek(FrameworkElement,TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.Seek(FrameworkElement,TimeSpan,TimeSeekOrigin)
- uid: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SeekAlignedToLastTick(TimeSpan)"
  nameWithType: Storyboard.SeekAlignedToLastTick(TimeSpan)
  fullName: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(TimeSpan)
- uid: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SeekAlignedToLastTick(TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.SeekAlignedToLastTick(TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(TimeSpan,TimeSeekOrigin)
- uid: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SeekAlignedToLastTick(FrameworkContentElement,TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.SeekAlignedToLastTick(FrameworkContentElement,TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(FrameworkContentElement,TimeSpan,TimeSeekOrigin)
- uid: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SeekAlignedToLastTick(FrameworkElement,TimeSpan,TimeSeekOrigin)"
  nameWithType: Storyboard.SeekAlignedToLastTick(FrameworkElement,TimeSpan,TimeSeekOrigin)
  fullName: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(FrameworkElement,TimeSpan,TimeSeekOrigin)
- uid: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Double)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SetSpeedRatio(Double)"
  nameWithType: Storyboard.SetSpeedRatio(Double)
  fullName: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(Double)
- uid: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkContentElement,System.Double)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SetSpeedRatio(FrameworkContentElement,Double)"
  nameWithType: Storyboard.SetSpeedRatio(FrameworkContentElement,Double)
  fullName: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(FrameworkContentElement,Double)
- uid: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkElement,System.Double)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SetSpeedRatio(FrameworkElement,Double)"
  nameWithType: Storyboard.SetSpeedRatio(FrameworkElement,Double)
  fullName: System.Windows.Media.Animation.Storyboard.SetSpeedRatio(FrameworkElement,Double)
- uid: System.Windows.Media.Animation.Storyboard.SetTarget(System.Windows.DependencyObject,System.Windows.DependencyObject)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SetTarget(DependencyObject,DependencyObject)"
  nameWithType: Storyboard.SetTarget(DependencyObject,DependencyObject)
  fullName: System.Windows.Media.Animation.Storyboard.SetTarget(DependencyObject,DependencyObject)
- uid: System.Windows.Media.Animation.Storyboard.SetTargetName(System.Windows.DependencyObject,System.String)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SetTargetName(DependencyObject,String)"
  nameWithType: Storyboard.SetTargetName(DependencyObject,String)
  fullName: System.Windows.Media.Animation.Storyboard.SetTargetName(DependencyObject,String)
- uid: System.Windows.Media.Animation.Storyboard.SetTargetProperty(System.Windows.DependencyObject,System.Windows.PropertyPath)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SetTargetProperty(DependencyObject,PropertyPath)"
  nameWithType: Storyboard.SetTargetProperty(DependencyObject,PropertyPath)
  fullName: System.Windows.Media.Animation.Storyboard.SetTargetProperty(DependencyObject,PropertyPath)
- uid: System.Windows.Media.Animation.Storyboard.SkipToFill
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SkipToFill()"
  nameWithType: Storyboard.SkipToFill()
  fullName: System.Windows.Media.Animation.Storyboard.SkipToFill()
- uid: System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SkipToFill(FrameworkContentElement)"
  nameWithType: Storyboard.SkipToFill(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.SkipToFill(FrameworkContentElement)
- uid: System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SkipToFill(FrameworkElement)"
  nameWithType: Storyboard.SkipToFill(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.SkipToFill(FrameworkElement)
- uid: System.Windows.Media.Animation.Storyboard.Stop
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Stop()"
  nameWithType: Storyboard.Stop()
  fullName: System.Windows.Media.Animation.Storyboard.Stop()
- uid: System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkContentElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Stop(FrameworkContentElement)"
  nameWithType: Storyboard.Stop(FrameworkContentElement)
  fullName: System.Windows.Media.Animation.Storyboard.Stop(FrameworkContentElement)
- uid: System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkElement)
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Stop(FrameworkElement)"
  nameWithType: Storyboard.Stop(FrameworkElement)
  fullName: System.Windows.Media.Animation.Storyboard.Stop(FrameworkElement)
- uid: System.Windows.Media.Animation.Storyboard.TargetNameProperty
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "TargetNameProperty"
  nameWithType: Storyboard.TargetNameProperty
  fullName: System.Windows.Media.Animation.Storyboard.TargetNameProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: "DependencyProperty"
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Media.Animation.Storyboard.TargetProperty
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "TargetProperty"
  nameWithType: Storyboard.TargetProperty
  fullName: System.Windows.Media.Animation.Storyboard.TargetProperty
- uid: System.Windows.Media.Animation.Storyboard.TargetPropertyProperty
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "TargetPropertyProperty"
  nameWithType: Storyboard.TargetPropertyProperty
  fullName: System.Windows.Media.Animation.Storyboard.TargetPropertyProperty
- uid: System.Windows.Media.Animation.Storyboard.#ctor*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Storyboard"
  nameWithType: Storyboard.Storyboard
- uid: System.Windows.Media.Animation.Storyboard.Begin*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Begin"
  nameWithType: Storyboard.Begin
- uid: System.Windows.Media.Animation.Storyboard.Clone*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Clone"
  nameWithType: Storyboard.Clone
- uid: System.Windows.Media.Animation.Storyboard.CreateInstanceCore*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "CreateInstanceCore"
  nameWithType: Storyboard.CreateInstanceCore
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentGlobalSpeed"
  nameWithType: Storyboard.GetCurrentGlobalSpeed
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentIteration*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentIteration"
  nameWithType: Storyboard.GetCurrentIteration
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentProgress*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentProgress"
  nameWithType: Storyboard.GetCurrentProgress
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentState*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentState"
  nameWithType: Storyboard.GetCurrentState
- uid: System.Windows.Media.Animation.Storyboard.GetCurrentTime*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetCurrentTime"
  nameWithType: Storyboard.GetCurrentTime
- uid: System.Windows.Media.Animation.Storyboard.GetIsPaused*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetIsPaused"
  nameWithType: Storyboard.GetIsPaused
- uid: System.Windows.Media.Animation.Storyboard.GetTarget*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetTarget"
  nameWithType: Storyboard.GetTarget
- uid: System.Windows.Media.Animation.Storyboard.GetTargetName*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetTargetName"
  nameWithType: Storyboard.GetTargetName
- uid: System.Windows.Media.Animation.Storyboard.GetTargetProperty*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "GetTargetProperty"
  nameWithType: Storyboard.GetTargetProperty
- uid: System.Windows.Media.Animation.Storyboard.Pause*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Pause"
  nameWithType: Storyboard.Pause
- uid: System.Windows.Media.Animation.Storyboard.Remove*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Remove"
  nameWithType: Storyboard.Remove
- uid: System.Windows.Media.Animation.Storyboard.Resume*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Resume"
  nameWithType: Storyboard.Resume
- uid: System.Windows.Media.Animation.Storyboard.Seek*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Seek"
  nameWithType: Storyboard.Seek
- uid: System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SeekAlignedToLastTick"
  nameWithType: Storyboard.SeekAlignedToLastTick
- uid: System.Windows.Media.Animation.Storyboard.SetSpeedRatio*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SetSpeedRatio"
  nameWithType: Storyboard.SetSpeedRatio
- uid: System.Windows.Media.Animation.Storyboard.SetTarget*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SetTarget"
  nameWithType: Storyboard.SetTarget
- uid: System.Windows.Media.Animation.Storyboard.SetTargetName*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SetTargetName"
  nameWithType: Storyboard.SetTargetName
- uid: System.Windows.Media.Animation.Storyboard.SetTargetProperty*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SetTargetProperty"
  nameWithType: Storyboard.SetTargetProperty
- uid: System.Windows.Media.Animation.Storyboard.SkipToFill*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "SkipToFill"
  nameWithType: Storyboard.SkipToFill
- uid: System.Windows.Media.Animation.Storyboard.Stop*
  parent: System.Windows.Media.Animation.Storyboard
  isExternal: false
  name: "Stop"
  nameWithType: Storyboard.Stop
