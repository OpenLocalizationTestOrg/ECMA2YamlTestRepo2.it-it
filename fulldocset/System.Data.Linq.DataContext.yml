### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.DataContext
  id: DataContext
  children:
  - System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)
  - System.Data.Linq.DataContext.#ctor(System.String)
  - System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)
  - System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)
  - System.Data.Linq.DataContext.ChangeConflicts
  - System.Data.Linq.DataContext.CommandTimeout
  - System.Data.Linq.DataContext.Connection
  - System.Data.Linq.DataContext.CreateDatabase
  - System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  - System.Data.Linq.DataContext.DatabaseExists
  - System.Data.Linq.DataContext.DeferredLoadingEnabled
  - System.Data.Linq.DataContext.DeleteDatabase
  - System.Data.Linq.DataContext.Dispose
  - System.Data.Linq.DataContext.Dispose(System.Boolean)
  - System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])
  - System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)
  - System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)
  - System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)
  - System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  - System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])
  - System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])
  - System.Data.Linq.DataContext.GetChangeSet
  - System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)
  - System.Data.Linq.DataContext.GetTable(System.Type)
  - System.Data.Linq.DataContext.GetTable``1
  - System.Data.Linq.DataContext.LoadOptions
  - System.Data.Linq.DataContext.Log
  - System.Data.Linq.DataContext.Mapping
  - System.Data.Linq.DataContext.ObjectTrackingEnabled
  - System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  - System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)
  - System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])
  - System.Data.Linq.DataContext.SubmitChanges
  - System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)
  - System.Data.Linq.DataContext.Transaction
  - System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)
  - System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)
  - System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)
  langs:
  - csharp
  name: DataContext
  nameWithType: DataContext
  fullName: System.Data.Linq.DataContext
  type: Class
  summary: "Rappresenta il punto di ingresso principale per il [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] framework."
  remarks: "L&quot;oggetto DataContext è l&quot;origine di tutte le entità mappate su una connessione di database. Tiene traccia delle modifiche apportate a tutte le entità recuperate e gestisce una &quot;cache delle identità&quot; che garantisce che le entità recuperate più di una volta sono rappresentate da utilizzando la stessa istanza dell&quot;oggetto.       In generale, un&quot;istanza di DataContext è progettata per l&quot;ultimo di una &quot;unità di lavoro&quot; tuttavia l&quot;applicazione definisce questo periodo. Un metodo DataContext è semplice e non è dispendioso da creare. Una tipica [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] applicazione crea istanze di DataContext nell&quot;ambito del metodo o come membro di classi di breve durate che rappresentano un insieme logico di operazioni di database correlati."
  syntax:
    content: 'public class DataContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)
  id: '#ctor(System.Data.IDbConnection)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(IDbConnection)
  nameWithType: DataContext.DataContext(IDbConnection)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> classe facendo riferimento alla connessione utilizzata dal [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]."
  remarks: "Oggetto <xref:System.Data.Linq.DataContext>apre e chiude una connessione al database in base alle esigenze se si specifica una connessione chiusa o una stringa di connessione.</xref:System.Data.Linq.DataContext> In generale, non si mai chiamare `Dispose` un <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> Se si specifica una connessione aperta, <xref:System.Data.Linq.DataContext>non verrà chiuso tale</xref:System.Data.Linq.DataContext> Pertanto, non creare un&quot;istanza di un <xref:System.Data.Linq.DataContext>con una connessione aperta a meno che non si dispone di un buon motivo per eseguire questa operazione.</xref:System.Data.Linq.DataContext> In un <xref:System.Transactions>transazione, un <xref:System.Data.Linq.DataContext>non aprire o chiudere una connessione per impedire la promozione.</xref:System.Data.Linq.DataContext> </xref:System.Transactions>"
  syntax:
    content: public DataContext (System.Data.IDbConnection connection);
    parameters:
    - id: connection
      type: System.Data.IDbConnection
      description: "La connessione utilizzata dal [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]."
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(String)
  nameWithType: DataContext.DataContext(String)
  fullName: System.Data.Linq.DataContext.DataContext(String)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> classe facendo riferimento a un file di origine."
  syntax:
    content: public DataContext (string fileOrServerOrConnection);
    parameters:
    - id: fileOrServerOrConnection
      type: System.String
      description: "Questo argomento può essere uno dei seguenti: il nome di un file in cui risiede un database di SQL Server Express.       Il nome di un server in cui è presente un database. In questo caso il provider utilizza il database predefinito per un utente.       Una stringa di connessione completa. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]passa solo la stringa al provider senza modifiche."
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)
  id: '#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(IDbConnection,MappingSource)
  nameWithType: DataContext.DataContext(IDbConnection,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection,MappingSource)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> classe facendo riferimento a una connessione e un&quot;origine del mapping."
  syntax:
    content: public DataContext (System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mapping);
    parameters:
    - id: connection
      type: System.Data.IDbConnection
      description: "Connessione utilizzata da .NET Framework."
    - id: mapping
      type: System.Data.Linq.Mapping.MappingSource
      description: "Un&quot;origine per il mapping."
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)
  id: '#ctor(System.String,System.Data.Linq.Mapping.MappingSource)'
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DataContext(String,MappingSource)
  nameWithType: DataContext.DataContext(String,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(String,MappingSource)
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> classe facendo riferimento a un file di origine e un&quot;origine del mapping."
  syntax:
    content: public DataContext (string fileOrServerOrConnection, System.Data.Linq.Mapping.MappingSource mapping);
    parameters:
    - id: fileOrServerOrConnection
      type: System.String
      description: "Questo argomento può essere uno dei seguenti: il nome di un file in cui risiede un database di SQL Server Express.       Il nome di un server in cui è presente un database. In questo caso il provider utilizza il database predefinito per un utente.       Una stringa di connessione completa. [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]passa solo la stringa al provider senza modifiche."
    - id: mapping
      type: System.Data.Linq.Mapping.MappingSource
      description: "Un&quot;origine per il mapping."
  overload: System.Data.Linq.DataContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ChangeConflicts
  id: ChangeConflicts
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ChangeConflicts
  nameWithType: DataContext.ChangeConflicts
  fullName: System.Data.Linq.DataContext.ChangeConflicts
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Ottiene una raccolta di oggetti che hanno provocato i conflitti di concorrenza quando <xref:System.Data.Linq.DataContext.SubmitChanges*>è stato chiamato.</xref:System.Data.Linq.DataContext.SubmitChanges*>"
  remarks: "Nell&quot;esempio seguente viene illustrato come può essere scorso la raccolta per recuperare informazioni sui conflitti."
  example:
  - >-
    [!code-cs[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/csharp/objconflict/program.cs#1)]
     [!code-vb[System.Data.Linq.ObjectChangeConflict#1](~/add/codesnippet/visualbasic/objconflict/module1.vb#1)]
  syntax:
    content: public System.Data.Linq.ChangeConflictCollection ChangeConflicts { get; }
    return:
      type: System.Data.Linq.ChangeConflictCollection
      description: "Una raccolta di oggetti che hanno provocato conflitti di concorrenza."
  overload: System.Data.Linq.DataContext.ChangeConflicts*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.CommandTimeout
  id: CommandTimeout
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: CommandTimeout
  nameWithType: DataContext.CommandTimeout
  fullName: System.Data.Linq.DataContext.CommandTimeout
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Ottiene o imposta un valore che aumenta il periodo di timeout per le query che verrebbero altrimenti timeout durante il periodo di timeout predefinito."
  remarks: "Questa proprietà ottiene o imposta il timeout del comando utilizzato per eseguire comandi generati (`IDbCommands`). Per ulteriori informazioni, vedere <xref:System.Data.IDbCommand.CommandTimeout%2A>.</xref:System.Data.IDbCommand.CommandTimeout%2A>       Quando questa proprietà non è impostata, il valore predefinito di <xref:System.Data.IDbCommand.CommandTimeout%2A>utilizzato per l&quot;esecuzione di comandi di query.</xref:System.Data.IDbCommand.CommandTimeout%2A> Il valore predefinito viene impostato dal provider di archiviazione. Si noti che alcuni provider possono generare eccezioni se questo valore è impostato su un valore diverso da zero."
  syntax:
    content: public int CommandTimeout { get; set; }
    return:
      type: System.Int32
      description: "Valore intero che aumenta il periodo di timeout per le query che verrebbero altrimenti timeout durante il periodo di timeout predefinito."
  overload: System.Data.Linq.DataContext.CommandTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Connection
  id: Connection
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Connection
  nameWithType: DataContext.Connection
  fullName: System.Data.Linq.DataContext.Connection
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Ottiene la connessione utilizzata dal framework."
  remarks: "È possibile utilizzare questa proprietà per l&quot;interoperabilità con codice ADO.NET relazionale.       La connessione restituita verrà chiusa a meno che non è stato aperto in modo esplicito dall&quot;utente."
  syntax:
    content: public System.Data.Common.DbConnection Connection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "Connessione utilizzata dal framework."
  overload: System.Data.Linq.DataContext.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.CreateDatabase
  id: CreateDatabase
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: CreateDatabase()
  nameWithType: DataContext.CreateDatabase()
  fullName: System.Data.Linq.DataContext.CreateDatabase()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Crea un database nel server."
  remarks: "Il nome del database è derivato tramite l&quot;algoritmo seguente:-se un database viene identificato nella stringa di connessione, viene utilizzato il relativo nome.      -Se un <xref:System.Data.Linq.Mapping.DatabaseAttribute>attributo è presente, il relativo <xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A>proprietà viene utilizzata come nome del database.</xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A> </xref:System.Data.Linq.Mapping.DatabaseAttribute>      -Se non vi è alcun tag di database nella stringa di connessione e un oggetto fortemente tipizzato <xref:System.Data.Linq.DataContext>viene utilizzato un database con lo stesso nome di <xref:System.Data.Linq.DataContext>eredita classe sia selezionata.</xref:System.Data.Linq.DataContext> </xref:System.Data.Linq.DataContext>      -Se un debole tipizzato <xref:System.Data.Linq.DataContext>viene utilizzata, viene generata un&quot;eccezione.</xref:System.Data.Linq.DataContext>      -Se il <xref:System.Data.Linq.DataContext>è stato creato utilizzando un nome di file, viene creato il database che corrisponde al nome file.</xref:System.Data.Linq.DataContext>"
  example:
  - "The following code shows how to set up a temporary database and then remove it.  \n  \n [!code-vb[System.Data.Linq.DataContext#1](~/add/codesnippet/visualbasic/DataContext/Module1.vb#1)]\n [!code-cs[System.Data.Linq.DataContext#1](~/add/codesnippet/csharp/DataContext/Program.cs#1)]"
  syntax:
    content: public void CreateDatabase ();
    parameters: []
  overload: System.Data.Linq.DataContext.CreateDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  id: CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: CreateMethodCallQuery(Object,MethodInfo,Object[])
  nameWithType: DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: protected System.Linq.IQueryable<TResult> CreateMethodCallQuery<TResult> (object instance, System.Reflection.MethodInfo methodInfo, object[] parameters);
    parameters:
    - id: instance
      type: System.Object
      description: "Da aggiungere."
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "Da aggiungere."
    - id: parameters
      type: System.Object[]
      description: "Da aggiungere."
    return:
      type: System.Linq.IQueryable{TResult}
      description: "Da aggiungere."
  overload: System.Data.Linq.DataContext.CreateMethodCallQuery<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.DatabaseExists
  id: DatabaseExists
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DatabaseExists()
  nameWithType: DataContext.DatabaseExists()
  fullName: System.Data.Linq.DataContext.DatabaseExists()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Determina se è possibile aprire il database associato."
  remarks: "Questo metodo utilizza la connessione nel <xref:System.Data.Linq.DataContext.Connection%2A>proprietà per tentare di aprire il database associato.</xref:System.Data.Linq.DataContext.Connection%2A>"
  example:
  - "The following example uses this method to determine whether a database already exists.  \n  \n [!code-vb[System.Data.Linq.DataContext#1](~/add/codesnippet/visualbasic/DataContext/Module1.vb#1)]\n [!code-cs[System.Data.Linq.DataContext#1](~/add/codesnippet/csharp/DataContext/Program.cs#1)]"
  syntax:
    content: public bool DatabaseExists ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il database specificato può essere aperto. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Linq.DataContext.DatabaseExists*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.DeferredLoadingEnabled
  id: DeferredLoadingEnabled
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DeferredLoadingEnabled
  nameWithType: DataContext.DeferredLoadingEnabled
  fullName: System.Data.Linq.DataContext.DeferredLoadingEnabled
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Ottiene o imposta un valore che indica se il caricamento ritardato di relazioni uno-a-molti o uno a uno."
  remarks: "Quando il codice che accede a una di queste relazioni null viene restituito se la relazione uno a uno e viene restituita una raccolta vuota se è uno-a-molti. Le relazioni possono comunque essere riempite impostando il <xref:System.Data.Linq.DataContext.LoadOptions%2A>proprietà.</xref:System.Data.Linq.DataContext.LoadOptions%2A>       Lo scenario principale per questa proprietà è che consente di estrarre una parte del modello a oggetti e inviarlo (ad esempio, per un servizio Web).      > [!NOTE] > Se questa proprietà è impostata su `false` dopo l&quot;esecuzione di una query, viene generata un&quot;eccezione. Vedere il **modalità valide** sezione riportata di seguito per ulteriori informazioni.      ## Il caricamento differito modalità valide richiede rilevamento degli oggetti. Solo le tre modalità seguenti sono valide:- <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A>= `false`.</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> DeferredLoadingEnabled viene ignorato e considerato `false`. Questo comportamento corrisponde a una sola lettura <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext>      -   <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> = `true`.</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> DeferredLoadingEnabled = `false`. Questa situazione corrisponde a un <xref:System.Data.Linq.DataContext>che consente agli utenti di caricare un oggetto grafico utilizzando <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>direttive, ma non abilita il caricamento posticipato.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> </xref:System.Data.Linq.DataContext>      -Entrambi sono impostati su `true`. Questo è il valore predefinito.       I flag non possono essere modificati dopo l&quot;esecuzione di una query. Eventuali modifiche apportate dopo l&quot;esecuzione della prima query che utilizza l&quot;oggetto <xref:System.Data.Linq.DataContext>genera un&quot;eccezione.</xref:System.Data.Linq.DataContext>"
  syntax:
    content: public bool DeferredLoadingEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il caricamento posticipato è abilitato. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Linq.DataContext.DeferredLoadingEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.DeleteDatabase
  id: DeleteDatabase
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: DeleteDatabase()
  nameWithType: DataContext.DeleteDatabase()
  fullName: System.Data.Linq.DataContext.DeleteDatabase()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Elimina il database associato."
  remarks: "Questo metodo utilizza la connessione nel <xref:System.Data.Linq.DataContext.Connection%2A>proprietà per identificare il database da eliminare.</xref:System.Data.Linq.DataContext.Connection%2A>"
  example:
  - "The following example shows how to delete a database that has been temporarily created.  \n  \n [!code-vb[System.Data.Linq.DataContext#1](~/add/codesnippet/visualbasic/DataContext/Module1.vb#1)]\n [!code-cs[System.Data.Linq.DataContext#1](~/add/codesnippet/csharp/DataContext/Program.cs#1)]"
  syntax:
    content: public void DeleteDatabase ();
    parameters: []
  overload: System.Data.Linq.DataContext.DeleteDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Dispose
  id: Dispose
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: DataContext.Dispose()
  fullName: System.Data.Linq.DataContext.Dispose()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Rilascia tutte le risorse usate dall&quot;istanza corrente di <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> classe."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Data.Linq.DataContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DataContext.Dispose(Boolean)
  fullName: System.Data.Linq.DataContext.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> classe e facoltativamente rilascia le risorse gestite."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Data.Linq.DataContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])
  id: ExecuteCommand(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteCommand(String,Object[])
  nameWithType: DataContext.ExecuteCommand(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteCommand(String,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Esegue comandi SQL direttamente sul database."
  remarks: "This method is a pass-through mechanism for cases where [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] does not adequately provide for a particular scenario.  \n  \n The syntax for the command is almost the same as the syntax used to create an ADO.NET `DataCommand`. The only difference is in how the parameters are specified. Specifically, you specify parameters by enclosing them in braces ({…}) and enumerate them starting from 0. The parameter is associated with the equally numbered object in the parameters array.  \n  \n `ExecuteQuery` and `ExecuteCommand` allow you to specify a variable number of arguments for parameter substitution. For example, you can specify the parameters when invoking ExecuteQuery\\<TResult>:  \n  \n```  \ndb.ExecuteQuery<Customer>(\"select * from dbo.Customers where City = {0}\", \"London\");  \n```  \n  \n And, another example:  \n  \n```  \ndb.ExecuteCommand(\"UPDATE Products SET QuantityPerUnit = {0} WHERE ProductID = {1}\", \"24 boxes\", 5);  \n```  \n  \n The following example opens a connection and passes a SQL `UPDATE` command to the SQL engine."
  example:
  - >-
    [!code-cs[DLinqCommunicatingWithDatabase#3](~/add/codesnippet/csharp/CommWithDatabase/Program.cs#3)]
     [!code-vb[DLinqCommunicatingWithDatabase#3](~/add/codesnippet/visualbasic/CommWithDatabase/Module1.vb#3)]
  syntax:
    content: public int ExecuteCommand (string command, object[] parameters);
    parameters:
    - id: command
      type: System.String
      description: "Il comando SQL da eseguire."
    - id: parameters
      type: System.Object[]
      description: "Matrice di parametri da passare al comando. Tenere presente quanto segue: se il numero di oggetti nella matrice è inferiore al numero più elevato identificato nella stringa di comando, viene generata un&quot;eccezione.       Se la matrice contiene oggetti che non viene fatto riferimento nella stringa di comando, viene generata alcuna eccezione.       Se uno dei parametri è null, viene convertito in <xref uid=&quot;langword_csharp_DBNull.Value&quot; name=&quot;DBNull.Value&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Il numero di righe modificate dal comando eseguito."
  overload: System.Data.Linq.DataContext.ExecuteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)
  id: ExecuteDynamicDelete(System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteDynamicDelete(Object)
  nameWithType: DataContext.ExecuteDynamicDelete(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicDelete(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Viene eseguito, all&quot;interno di metodi di override di eliminazione, per ridelegare a [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] l&quot;attività di generazione ed esecuzione di istruzioni SQL dinamiche per le operazioni di eliminazione."
  remarks: "Vedere <xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>.</xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>"
  syntax:
    content: protected void ExecuteDynamicDelete (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "L&quot;entità da eliminare."
  overload: System.Data.Linq.DataContext.ExecuteDynamicDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)
  id: ExecuteDynamicInsert(System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteDynamicInsert(Object)
  nameWithType: DataContext.ExecuteDynamicInsert(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicInsert(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Viene eseguito, all&quot;interno di metodi di override di inserimento, per ridelegare a [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] l&quot;attività di generazione ed esecuzione di istruzioni SQL dinamiche per le operazioni di inserimento."
  remarks: "Tenere presenti le considerazioni seguenti:-perché il metodo ha un modificatore protetto, il suo utilizzo richiede sottoclassi <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext>      -Un&quot;eccezione se questa operazione non viene chiamata all&quot;interno di un <xref:System.Data.Linq.DataContext.SubmitChanges%2A>operazione.</xref:System.Data.Linq.DataContext.SubmitChanges%2A> Non deve essere chiamato come operazione autonoma all&quot;esterno dell&quot;ambito di un <xref:System.Data.Linq.DataContext.SubmitChanges%2A>operazione.</xref:System.Data.Linq.DataContext.SubmitChanges%2A> <xref:System.Data.Linq.DataContext.SubmitChanges%2A>stesso chiama metodi di override se sono implementati e i metodi precedenti sono destinati a essere chiamato all&quot;interno di metodi di override.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>      -È responsabilità dello sviluppatore per passare l&quot;entità corretta. L&quot;implementazione verifica che l&quot;entità di tipo passato è stato registrato. Tuttavia, è responsabilità dello sviluppatore di mantenere l&quot;ordine o passare due volte la stessa entità.      -È responsabilità dello sviluppatore per richiamare l&quot;API dinamica corretta. Ad esempio, nel `Update` solo metodo di override di <xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A>metodo può essere chiamato.</xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A> [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]non rileva né verifica se il metodo dinamico richiamato corrisponde all&quot;operazione applicabile. I risultati sono indefiniti se viene chiamato un metodo non applicabile (ad esempio, la chiamata <xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A>per un oggetto da aggiornare).</xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A>"
  syntax:
    content: protected void ExecuteDynamicInsert (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "L&quot;entità da inserire."
  overload: System.Data.Linq.DataContext.ExecuteDynamicInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)
  id: ExecuteDynamicUpdate(System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteDynamicUpdate(Object)
  nameWithType: DataContext.ExecuteDynamicUpdate(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicUpdate(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Viene eseguito, all&quot;interno di metodi di override di aggiornamento, per ridelegare a [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] l&quot;attività di generazione ed esecuzione di istruzioni SQL dinamiche per le operazioni di aggiornamento."
  remarks: "Vedere <xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>.</xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>"
  syntax:
    content: protected void ExecuteDynamicUpdate (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "L&quot;entità da aggiornare."
  overload: System.Data.Linq.DataContext.ExecuteDynamicUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  id: ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteMethodCall(Object,MethodInfo,Object[])
  nameWithType: DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Esegue la stored procedure di database o una funzione scalare associata con il metodo CLR specificato."
  remarks: "Il metodo ExecuteMethodCall viene utilizzato nel codice generato automaticamente e funge da proxy per le funzioni di database."
  syntax:
    content: protected System.Data.Linq.IExecuteResult ExecuteMethodCall (object instance, System.Reflection.MethodInfo methodInfo, object[] parameters);
    parameters:
    - id: instance
      type: System.Object
      description: "L&quot;istanza di chiamata del metodo (l&quot;oggetto corrente)."
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: "Identifica il metodo CLR che corrisponde a un metodo di database."
    - id: parameters
      type: System.Object[]
      description: "Matrice di parametri da passare al comando."
    return:
      type: System.Data.Linq.IExecuteResult
      description: "Il risultato (il valore restituito e parametri di output) dell&quot;esecuzione del metodo specificato."
  overload: System.Data.Linq.DataContext.ExecuteMethodCall*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])
  id: ExecuteQuery(System.Type,System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteQuery(Type,String,Object[])
  nameWithType: DataContext.ExecuteQuery(Type,String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(Type,String,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Esegue una query SQL direttamente sul database."
  syntax:
    content: public System.Collections.IEnumerable ExecuteQuery (Type elementType, string query, object[] parameters);
    parameters:
    - id: elementType
      type: System.Type
      description: "Il tipo di &lt;xref:System.Collections.Generic.IEnumerable%601&gt; da restituire.       L&quot;algoritmo per la corrispondenza di colonne nel risultato della query a campi o proprietà nell&quot;oggetto funziona nel modo seguente: se un campo o proprietà è mappata a un nome di colonna specifica, tale nome di colonna previsto nel set di risultati.       Se un campo o proprietà non è mappato, è prevista una colonna con lo stesso nome del campo o proprietà nel set di risultati.       Il confronto viene eseguito mediante la ricerca prima di una corrispondenza tra maiuscole e minuscole. Se tale corrispondenza non viene trovata, viene eseguita una ricerca successiva per trovare una corrispondenza tra maiuscole e minuscole.       La query deve restituire tutti i campi rilevati e delle proprietà dell&quot;oggetto (ad eccezione di quelli che vengono caricati su base posticipata) quando tutte le condizioni seguenti sono vere: `T` un&quot;entità in modo esplicito tiene traccia di <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>.       <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>.</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>       L&quot;entità dispone di una chiave primaria.       In caso contrario viene generata un&quot;eccezione."
    - id: query
      type: System.String
      description: "La query SQL da eseguire."
    - id: parameters
      type: System.Object[]
      description: "Matrice di parametri da passare al comando. Tenere presente quanto segue: se il numero di oggetti nella matrice è inferiore al numero più elevato identificato nella stringa di comando, viene generata un&quot;eccezione.       Se la matrice contiene oggetti che non viene fatto riferimento nella stringa di comando, viene generata alcuna eccezione.       Se è un parametro <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, viene convertito in <xref uid=&quot;langword_csharp_DBNull.Value&quot; name=&quot;DBNull.Value&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Collections.IEnumerable
      description: "Un &lt;xref:System.Collections.Generic.IEnumerable%601&gt; raccolta di oggetti restituiti dalla query."
  overload: System.Data.Linq.DataContext.ExecuteQuery*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])
  id: ExecuteQuery``1(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ExecuteQuery(String,Object[])
  nameWithType: DataContext.ExecuteQuery(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(String,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public System.Collections.Generic.IEnumerable<TResult> ExecuteQuery<TResult> (string query, object[] parameters);
    parameters:
    - id: query
      type: System.String
      description: "Da aggiungere."
    - id: parameters
      type: System.Object[]
      description: "Da aggiungere."
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: "Da aggiungere."
  overload: System.Data.Linq.DataContext.ExecuteQuery<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetChangeSet
  id: GetChangeSet
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetChangeSet()
  nameWithType: DataContext.GetChangeSet()
  fullName: System.Data.Linq.DataContext.GetChangeSet()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Ottiene gli oggetti modificati rilevati da <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>."
  remarks: "Tenere presenti le considerazioni seguenti:-GetChangeSet potrebbe avere effetti collaterali, ad esempio inferenza delle insert ed eliminare le operazioni che vengono in genere eseguite al momento della <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</xref:System.Data.Linq.DataContext.SubmitChanges%2A> Ad esempio, gli oggetti utilizzati nelle operazioni seguenti possono creare operazioni dedotte corrispondenti nell&quot;elenco seguente:- <xref:System.Data.Linq.EntitySet%601.Add%2A>per <xref:System.Data.Linq.Table%601.InsertOnSubmit%2A>.</xref:System.Data.Linq.Table%601.InsertOnSubmit%2A> </xref:System.Data.Linq.EntitySet%601.Add%2A>          - <xref:System.Data.Linq.EntityRef%601>assegnazione di null (probabilmente a causa <xref:System.Data.Linq.EntitySet%601.Remove%2A>di <xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A>.</xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A> </xref:System.Data.Linq.EntitySet%601.Remove%2A> </xref:System.Data.Linq.EntityRef%601>      -Il set non può essere ordinato in base ai vincoli di chiave esterna.      -Valori generati dal database (ad esempio, i valori di chiavi primari ed esterni, timestamp e così via) non sono disponibili. Tali informazioni richiedono l&quot;esecuzione del comando di database e forse la propagazione delle informazioni recuperate (ad esempio, chiave esterna dalla chiave primaria).      -Il set di oggetti modificati viene calcolato al momento della chiamata. Le chiamate successive a <xref:System.Data.Linq.DataContext.SubmitChanges%2A>può produrre un set diverso se vengono apportate modifiche aggiuntive.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>       Output quando è stata apportata alcuna modifica viene visualizzata come indicato di seguito:`{Added: 0, Removed: 0, Modified: 0}`"
  example:
  - >-
    [!code-vb[DLinqDebuggingSupport#2](~/add/codesnippet/visualbasic/debuggingsupport/Module1.vb#2)]
     [!code-cs[DLinqDebuggingSupport#2](~/add/codesnippet/csharp/debuggingsupport/Program.cs#2)]
  syntax:
    content: public System.Data.Linq.ChangeSet GetChangeSet ();
    parameters: []
    return:
      type: System.Data.Linq.ChangeSet
      description: "Il set di oggetti viene restituito come tre raccolte di sola lettura."
  overload: System.Data.Linq.DataContext.GetChangeSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)
  id: GetCommand(System.Linq.IQueryable)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetCommand(IQueryable)
  nameWithType: DataContext.GetCommand(IQueryable)
  fullName: System.Data.Linq.DataContext.GetCommand(IQueryable)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Ottiene le informazioni sui comandi SQL generati da [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)]."
  remarks: "Questo metodo è solo un getter e non influisce sulla <xref:System.Data.Linq.DataContext>stato.</xref:System.Data.Linq.DataContext>       Tenere presenti le considerazioni seguenti:-l&quot;argomento deve essere non null. In caso contrario, viene generata un&quot;eccezione di argomento null.      -Le eccezioni di conversione normale query generate durante [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] applicare l&quot;esecuzione di query per una query che non può essere convertita.      -Viene restituito solo il primo comando di query. In particolare, i comandi aggiuntivi che vengono utilizzati per il caricamento eager (<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>) non sono inclusi.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>      - <xref:System.Data.Linq.DataContext>non tiene traccia delle operazioni eseguite dall&quot;utente con il comando.</xref:System.Data.Linq.DataContext> Ad esempio, di non vengono rilevati e non influiscono sui risultati dell&quot;esecuzione del comando restituito <xref:System.Data.Linq.DataContext>stato.</xref:System.Data.Linq.DataContext>"
  example:
  - >-
    [!code-vb[DLinqDebuggingSupport#3](~/add/codesnippet/visualbasic/debuggingsupport/Module1.vb#3)]
     [!code-cs[DLinqDebuggingSupport#3](~/add/codesnippet/csharp/debuggingsupport/Program.cs#3)]
  syntax:
    content: public System.Data.Common.DbCommand GetCommand (System.Linq.IQueryable query);
    parameters:
    - id: query
      type: System.Linq.IQueryable
      description: "La query sono necessario recuperare le cui informazioni di comando SQL."
    return:
      type: System.Data.Common.DbCommand
      description: "L&quot;oggetto informazioni sul comando richiesto."
  overload: System.Data.Linq.DataContext.GetCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetTable(System.Type)
  id: GetTable(System.Type)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetTable(Type)
  nameWithType: DataContext.GetTable(Type)
  fullName: System.Data.Linq.DataContext.GetTable(Type)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Restituisce una raccolta di oggetti di un determinato tipo, in cui il tipo è definito per il <code> type </code> parametro."
  remarks: "Si tratta di una versione con tipizzazione <xref:System.Data.Linq.DataContext.GetTable%2A>.</xref:System.Data.Linq.DataContext.GetTable%2A> È importante disporre di una versione con tipizzazione perché è una pratica comune relativamente per costruire le query in modo dinamico. Sarebbe scomodo forzare l&quot;applicazione per usare la reflection per chiamare il metodo generico corretto.       Se è presente alcuna raccolta per un determinato tipo, viene generata un&quot;eccezione."
  syntax:
    content: public System.Data.Linq.ITable GetTable (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Tipo degli oggetti da restituire."
    return:
      type: System.Data.Linq.ITable
      description: "Una raccolta di oggetti definiti dal <code> type </code> parametro."
  overload: System.Data.Linq.DataContext.GetTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.GetTable``1
  id: GetTable``1
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: GetTable()
  nameWithType: DataContext.GetTable()
  fullName: System.Data.Linq.DataContext.GetTable()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: 'public System.Data.Linq.Table<TEntity> GetTable<TEntity> () where TEntity : class;'
    parameters: []
    return:
      type: System.Data.Linq.Table`1
      description: "Da aggiungere."
  overload: System.Data.Linq.DataContext.GetTable<TEntity>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.LoadOptions
  id: LoadOptions
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: LoadOptions
  nameWithType: DataContext.LoadOptions
  fullName: System.Data.Linq.DataContext.LoadOptions
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Ottiene o imposta il <xref href=&quot;System.Data.Linq.DataLoadOptions&quot;> </xref> associato a questo <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>."
  remarks: "Questa proprietà ottiene o imposta le opzioni che consentono di definire il comportamento di caricamento in background per i membri di caricamento posticipato e l&quot;appartenenza di raccolte correlate."
  syntax:
    content: public System.Data.Linq.DataLoadOptions LoadOptions { get; set; }
    return:
      type: System.Data.Linq.DataLoadOptions
      description: "Le opzioni per i dati correlati di caricamento di prelettura."
  overload: System.Data.Linq.DataContext.LoadOptions*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Log
  id: Log
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Log
  nameWithType: DataContext.Log
  fullName: System.Data.Linq.DataContext.Log
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Ottiene o imposta la destinazione per scrivere la query SQL o il comando."
  remarks: "Impostare questa proprietà su `null` per disabilitare la registrazione dei comandi."
  example:
  - "The following example displays generated SQL in the console window before it displays the results of the query.  \n  \n [!code-vb[System.Data.Linq.DataContext#2](~/add/codesnippet/visualbasic/DataContext/Module1.vb#2)]\n [!code-cs[System.Data.Linq.DataContext#2](~/add/codesnippet/csharp/DataContext/Program.cs#2)]"
  syntax:
    content: public System.IO.TextWriter Log { get; set; }
    return:
      type: System.IO.TextWriter
      description: "Il <xref:System.IO.TextReader>da utilizzare per scrivere il comando.</xref:System.IO.TextReader>"
  overload: System.Data.Linq.DataContext.Log*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Mapping
  id: Mapping
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Mapping
  nameWithType: DataContext.Mapping
  fullName: System.Data.Linq.DataContext.Mapping
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Ottiene il <xref href=&quot;System.Data.Linq.Mapping.MetaModel&quot;> </xref> su cui è basato il mapping."
  syntax:
    content: public System.Data.Linq.Mapping.MetaModel Mapping { get; }
    return:
      type: System.Data.Linq.Mapping.MetaModel
      description: "Il mapping tra oggetti di database e il dominio."
  overload: System.Data.Linq.DataContext.Mapping*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.ObjectTrackingEnabled
  id: ObjectTrackingEnabled
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: ObjectTrackingEnabled
  nameWithType: DataContext.ObjectTrackingEnabled
  fullName: System.Data.Linq.DataContext.ObjectTrackingEnabled
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Ottiene o imposta un valore che indica se è abilitato il rilevamento degli oggetti."
  remarks: "Impostando questa proprietà su `false` migliora le prestazioni in fase di recupero, poiché esistono meno elementi da registrare.       Viene generata un&quot;eccezione:: se la proprietà è impostata su `false` dopo l&quot;esecuzione di una query.           Per ulteriori informazioni, vedere la sezione modalità valide in <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext>      -Se la proprietà è impostata su `false` e <xref:System.Data.Linq.DataContext.SubmitChanges%2A>viene chiamato.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>       Se è ObjectTrackingEnabled `false`, <xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A>viene ignorata e trattata `false`.</xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> In questo caso, il <xref:System.Data.Linq.DataContext>è di sola lettura.</xref:System.Data.Linq.DataContext>       Se è ObjectTrackingEnabled `true`, <xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A>è `false`.</xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> In questo caso, <xref:System.Data.Linq.DataContext>consente di caricare un oggetto grafico utilizzando <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>direttive, ma non abilita il caricamento posticipato.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> </xref:System.Data.Linq.DataContext>"
  syntax:
    content: public bool ObjectTrackingEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se è abilitato il rilevamento degli oggetti; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Linq.DataContext.ObjectTrackingEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  id: Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Refresh(RefreshMode,IEnumerable)
  nameWithType: DataContext.Refresh(RefreshMode,IEnumerable)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,IEnumerable)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Aggiorna una raccolta di oggetti entità secondo la modalità specificata."
  syntax:
    content: public void Refresh (System.Data.Linq.RefreshMode mode, System.Collections.IEnumerable entities);
    parameters:
    - id: mode
      type: System.Data.Linq.RefreshMode
      description: "Un valore che specifica i conflitti di concorrenza ottimistica come vengono gestiti."
    - id: entities
      type: System.Collections.IEnumerable
      description: "La raccolta di entità da aggiornare."
  overload: System.Data.Linq.DataContext.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)
  id: Refresh(System.Data.Linq.RefreshMode,System.Object)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Refresh(RefreshMode,Object)
  nameWithType: DataContext.Refresh(RefreshMode,Object)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Aggiorna un oggetto entità secondo la modalità specificata."
  syntax:
    content: public void Refresh (System.Data.Linq.RefreshMode mode, object entity);
    parameters:
    - id: mode
      type: System.Data.Linq.RefreshMode
      description: "Un valore che specifica i conflitti di concorrenza ottimistica come vengono gestiti."
    - id: entity
      type: System.Object
      description: "Oggetto da aggiornare."
  overload: System.Data.Linq.DataContext.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])
  id: Refresh(System.Data.Linq.RefreshMode,System.Object[])
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Refresh(RefreshMode,Object[])
  nameWithType: DataContext.Refresh(RefreshMode,Object[])
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object[])
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Aggiorna una matrice di oggetti entità secondo la modalità specificata."
  syntax:
    content: public void Refresh (System.Data.Linq.RefreshMode mode, object[] entities);
    parameters:
    - id: mode
      type: System.Data.Linq.RefreshMode
      description: "Un valore che specifica i conflitti di concorrenza ottimistica come vengono gestiti."
    - id: entities
      type: System.Object[]
      description: "Matrice di oggetti entità da aggiornare."
  overload: System.Data.Linq.DataContext.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.SubmitChanges
  id: SubmitChanges
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: SubmitChanges()
  nameWithType: DataContext.SubmitChanges()
  fullName: System.Data.Linq.DataContext.SubmitChanges()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Calcola il set di oggetti modificati inseriti, aggiornati o eliminati ed esegue i comandi appropriati per implementare le modifiche al database."
  remarks: "Se metodi di override sono presenti per insert, update o delete, <xref:System.Data.Linq.DataContext.SubmitChanges%2A>esegue questi metodi invece il valore predefinito [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] comandi.</xref:System.Data.Linq.DataContext.SubmitChanges%2A>"
  syntax:
    content: public void SubmitChanges ();
    parameters: []
  overload: System.Data.Linq.DataContext.SubmitChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)
  id: SubmitChanges(System.Data.Linq.ConflictMode)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: SubmitChanges(ConflictMode)
  nameWithType: DataContext.SubmitChanges(ConflictMode)
  fullName: System.Data.Linq.DataContext.SubmitChanges(ConflictMode)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Invia le modifiche apportate per recuperare oggetti nel database sottostante e specifica l&quot;azione da intraprendere se l&quot;invio ha esito negativo."
  remarks: "Modalità di errore predefinita è <xref:System.Data.Linq.ConflictMode>.</xref:System.Data.Linq.ConflictMode>"
  example:
  - >-
    [!code-cs[System.Data.Linq.ConflictModeEnumeration#1](~/add/codesnippet/csharp/cmodesnip/program.cs#1)]
     [!code-vb[System.Data.Linq.ConflictModeEnumeration#1](~/add/codesnippet/visualbasic/snipdump/module1.vb#1)]
  syntax:
    content: public virtual void SubmitChanges (System.Data.Linq.ConflictMode failureMode);
    parameters:
    - id: failureMode
      type: System.Data.Linq.ConflictMode
      description: "L&quot;azione da intraprendere se l&quot;invio ha esito negativo. Gli argomenti validi sono i seguenti:<xref href=&quot;System.Data.Linq.ConflictMode&quot;></xref><xref href=&quot;System.Data.Linq.ConflictMode&quot;></xref>"
  overload: System.Data.Linq.DataContext.SubmitChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Transaction
  id: Transaction
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Transaction
  nameWithType: DataContext.Transaction
  fullName: System.Data.Linq.DataContext.Transaction
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Ottiene o imposta una transazione locale per il [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] da utilizzare per accedere al database."
  remarks: "Lo scenario principale per questa proprietà è l&quot;interoperabilità con relazionale [!INCLUDE[vstecado](~/add/includes/vstecado-md.md)] codice. Ad esempio, utilizzare questa proprietà quando si scrivono `Create` / `Update` / `Delete` metodi per impostare il `Transaction` proprietà ADO `Command` oggetto.       Si noti quanto segue:-se questa proprietà non è stata impostata in modo esplicito, il metodo get restituisce null.      -Se il codice è in esecuzione un <xref:System.Transactions.Transaction>contesto, l&quot;impostazione di questa proprietà genera un&quot;eccezione.</xref:System.Transactions.Transaction>      -Se questa proprietà è set e un nuovo <xref:System.Transactions.Transaction>è aperto, viene generata un&quot;eccezione quando viene eseguito una query o aggiornamento.</xref:System.Transactions.Transaction>"
  syntax:
    content: public System.Data.Common.DbTransaction Transaction { get; set; }
    return:
      type: System.Data.Common.DbTransaction
      description: "L&quot;oggetto di transazione utilizzato dal <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref> durante l&quot;esecuzione di query e comandi."
  overload: System.Data.Linq.DataContext.Transaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)
  id: Translate(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Converte un oggetto esistente <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> agli oggetti."
  syntax:
    content: public System.Data.Linq.IMultipleResults Translate (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "Il <xref href=&quot;System.Data.IDataReader&quot;> </xref> da convertire."
    return:
      type: System.Data.Linq.IMultipleResults
      description: "Un elenco di oggetti restituiti dalla conversione."
  overload: System.Data.Linq.DataContext.Translate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)
  id: Translate(System.Type,System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Translate(Type,DbDataReader)
  nameWithType: DataContext.Translate(Type,DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(Type,DbDataReader)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Converte un oggetto esistente <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> agli oggetti."
  syntax:
    content: public System.Collections.IEnumerable Translate (Type elementType, System.Data.Common.DbDataReader reader);
    parameters:
    - id: elementType
      type: System.Type
      description: "Il tipo di &lt;xref:System.Collections.Generic.IEnumerable%601&gt; da restituire.       L&quot;algoritmo per la corrispondenza di colonne nel risultato ai campi e proprietà nell&quot;oggetto funziona nel modo seguente: se un campo o proprietà è mappata a un nome di colonna specifica, tale nome di colonna previsto nel set di risultati.       Se un campo o proprietà non è mappato, è prevista una colonna con lo stesso nome del campo o proprietà nel set di risultati.       Il confronto viene eseguito mediante la ricerca prima di una corrispondenza tra maiuscole e minuscole. Se non trova la corrispondenza, una ricerca successiva è per una corrispondenza tra maiuscole e minuscole.       La query deve restituire tutti i campi rilevati e delle proprietà dell&quot;oggetto (ad eccezione di quelli che vengono caricati su base posticipata) quando tutte le condizioni seguenti sono vere: `T` un&quot;entità in modo esplicito tiene traccia di <xref href=&quot;System.Data.Linq.DataContext&quot;> </xref>.       <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>.</xref:System.Data.Linq.DataContext.ObjectTrackingEnabled*>       L&quot;entità dispone di una chiave primaria.       In caso contrario viene generata un&quot;eccezione."
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "Il <xref href=&quot;System.Data.IDataReader&quot;> </xref> da convertire."
    return:
      type: System.Collections.IEnumerable
      description: "Un elenco di oggetti restituiti dalla conversione."
  overload: System.Data.Linq.DataContext.Translate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)
  id: Translate``1(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  langs:
  - csharp
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public System.Collections.Generic.IEnumerable<TResult> Translate<TResult> (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "Da aggiungere."
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: "Da aggiungere."
  overload: System.Data.Linq.DataContext.Translate<TResult>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(IDbConnection)
  nameWithType: DataContext.DataContext(IDbConnection)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection)
- uid: System.Data.IDbConnection
  parent: System.Data
  isExternal: false
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data.Linq.DataContext.#ctor(System.String)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(String)
  nameWithType: DataContext.DataContext(String)
  fullName: System.Data.Linq.DataContext.DataContext(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(IDbConnection,MappingSource)
  nameWithType: DataContext.DataContext(IDbConnection,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(IDbConnection,MappingSource)
- uid: System.Data.Linq.Mapping.MappingSource
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MappingSource
  nameWithType: MappingSource
  fullName: System.Data.Linq.Mapping.MappingSource
- uid: System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext(String,MappingSource)
  nameWithType: DataContext.DataContext(String,MappingSource)
  fullName: System.Data.Linq.DataContext.DataContext(String,MappingSource)
- uid: System.Data.Linq.DataContext.ChangeConflicts
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ChangeConflicts
  nameWithType: DataContext.ChangeConflicts
  fullName: System.Data.Linq.DataContext.ChangeConflicts
- uid: System.Data.Linq.ChangeConflictCollection
  parent: System.Data.Linq
  isExternal: false
  name: ChangeConflictCollection
  nameWithType: ChangeConflictCollection
  fullName: System.Data.Linq.ChangeConflictCollection
- uid: System.Data.Linq.DataContext.CommandTimeout
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CommandTimeout
  nameWithType: DataContext.CommandTimeout
  fullName: System.Data.Linq.DataContext.CommandTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Linq.DataContext.Connection
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Connection
  nameWithType: DataContext.Connection
  fullName: System.Data.Linq.DataContext.Connection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.Linq.DataContext.CreateDatabase
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateDatabase()
  nameWithType: DataContext.CreateDatabase()
  fullName: System.Data.Linq.DataContext.CreateDatabase()
- uid: System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateMethodCallQuery(Object,MethodInfo,Object[])
  nameWithType: DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.CreateMethodCallQuery(Object,MethodInfo,Object[])
- uid: System.Linq.IQueryable{TResult}
  parent: System.Linq
  isExternal: true
  name: IQueryable<TResult>
  nameWithType: IQueryable<TResult>
  fullName: System.Linq.IQueryable<TResult>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Linq.DataContext.DatabaseExists
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DatabaseExists()
  nameWithType: DataContext.DatabaseExists()
  fullName: System.Data.Linq.DataContext.DatabaseExists()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.DataContext.DeferredLoadingEnabled
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeferredLoadingEnabled
  nameWithType: DataContext.DeferredLoadingEnabled
  fullName: System.Data.Linq.DataContext.DeferredLoadingEnabled
- uid: System.Data.Linq.DataContext.DeleteDatabase
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeleteDatabase()
  nameWithType: DataContext.DeleteDatabase()
  fullName: System.Data.Linq.DataContext.DeleteDatabase()
- uid: System.Data.Linq.DataContext.Dispose
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Dispose()
  nameWithType: DataContext.Dispose()
  fullName: System.Data.Linq.DataContext.Dispose()
- uid: System.Data.Linq.DataContext.Dispose(System.Boolean)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DataContext.Dispose(Boolean)
  fullName: System.Data.Linq.DataContext.Dispose(Boolean)
- uid: System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteCommand(String,Object[])
  nameWithType: DataContext.ExecuteCommand(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteCommand(String,Object[])
- uid: System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicDelete(Object)
  nameWithType: DataContext.ExecuteDynamicDelete(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicDelete(Object)
- uid: System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicInsert(Object)
  nameWithType: DataContext.ExecuteDynamicInsert(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicInsert(Object)
- uid: System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicUpdate(Object)
  nameWithType: DataContext.ExecuteDynamicUpdate(Object)
  fullName: System.Data.Linq.DataContext.ExecuteDynamicUpdate(Object)
- uid: System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteMethodCall(Object,MethodInfo,Object[])
  nameWithType: DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteMethodCall(Object,MethodInfo,Object[])
- uid: System.Data.Linq.IExecuteResult
  parent: System.Data.Linq
  isExternal: false
  name: IExecuteResult
  nameWithType: IExecuteResult
  fullName: System.Data.Linq.IExecuteResult
- uid: System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery(Type,String,Object[])
  nameWithType: DataContext.ExecuteQuery(Type,String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(Type,String,Object[])
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery(String,Object[])
  nameWithType: DataContext.ExecuteQuery(String,Object[])
  fullName: System.Data.Linq.DataContext.ExecuteQuery(String,Object[])
- uid: System.Collections.Generic.IEnumerable{TResult}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.DataContext.GetChangeSet
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetChangeSet()
  nameWithType: DataContext.GetChangeSet()
  fullName: System.Data.Linq.DataContext.GetChangeSet()
- uid: System.Data.Linq.ChangeSet
  parent: System.Data.Linq
  isExternal: false
  name: ChangeSet
  nameWithType: ChangeSet
  fullName: System.Data.Linq.ChangeSet
- uid: System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetCommand(IQueryable)
  nameWithType: DataContext.GetCommand(IQueryable)
  fullName: System.Data.Linq.DataContext.GetCommand(IQueryable)
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Data.Linq.DataContext.GetTable(System.Type)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable(Type)
  nameWithType: DataContext.GetTable(Type)
  fullName: System.Data.Linq.DataContext.GetTable(Type)
- uid: System.Data.Linq.ITable
  parent: System.Data.Linq
  isExternal: false
  name: ITable
  nameWithType: ITable
  fullName: System.Data.Linq.ITable
- uid: System.Data.Linq.DataContext.GetTable``1
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable()
  nameWithType: DataContext.GetTable()
  fullName: System.Data.Linq.DataContext.GetTable()
- uid: System.Data.Linq.Table`1
  parent: System.Data.Linq
  isExternal: false
  name: Table<TEntity>
  nameWithType: Table<TEntity>
  fullName: System.Data.Linq.Table<TEntity>
- uid: System.Data.Linq.DataContext.LoadOptions
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: LoadOptions
  nameWithType: DataContext.LoadOptions
  fullName: System.Data.Linq.DataContext.LoadOptions
- uid: System.Data.Linq.DataLoadOptions
  parent: System.Data.Linq
  isExternal: false
  name: DataLoadOptions
  nameWithType: DataLoadOptions
  fullName: System.Data.Linq.DataLoadOptions
- uid: System.Data.Linq.DataContext.Log
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Log
  nameWithType: DataContext.Log
  fullName: System.Data.Linq.DataContext.Log
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.Linq.DataContext.Mapping
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Mapping
  nameWithType: DataContext.Mapping
  fullName: System.Data.Linq.DataContext.Mapping
- uid: System.Data.Linq.Mapping.MetaModel
  parent: System.Data.Linq.Mapping
  isExternal: false
  name: MetaModel
  nameWithType: MetaModel
  fullName: System.Data.Linq.Mapping.MetaModel
- uid: System.Data.Linq.DataContext.ObjectTrackingEnabled
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ObjectTrackingEnabled
  nameWithType: DataContext.ObjectTrackingEnabled
  fullName: System.Data.Linq.DataContext.ObjectTrackingEnabled
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh(RefreshMode,IEnumerable)
  nameWithType: DataContext.Refresh(RefreshMode,IEnumerable)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,IEnumerable)
- uid: System.Data.Linq.RefreshMode
  parent: System.Data.Linq
  isExternal: false
  name: RefreshMode
  nameWithType: RefreshMode
  fullName: System.Data.Linq.RefreshMode
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh(RefreshMode,Object)
  nameWithType: DataContext.Refresh(RefreshMode,Object)
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object)
- uid: System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh(RefreshMode,Object[])
  nameWithType: DataContext.Refresh(RefreshMode,Object[])
  fullName: System.Data.Linq.DataContext.Refresh(RefreshMode,Object[])
- uid: System.Data.Linq.DataContext.SubmitChanges
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: SubmitChanges()
  nameWithType: DataContext.SubmitChanges()
  fullName: System.Data.Linq.DataContext.SubmitChanges()
- uid: System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: SubmitChanges(ConflictMode)
  nameWithType: DataContext.SubmitChanges(ConflictMode)
  fullName: System.Data.Linq.DataContext.SubmitChanges(ConflictMode)
- uid: System.Data.Linq.ConflictMode
  parent: System.Data.Linq
  isExternal: false
  name: ConflictMode
  nameWithType: ConflictMode
  fullName: System.Data.Linq.ConflictMode
- uid: System.Data.Linq.DataContext.Transaction
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Transaction
  nameWithType: DataContext.Transaction
  fullName: System.Data.Linq.DataContext.Transaction
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
- uid: System.Data.Linq.IMultipleResults
  parent: System.Data.Linq
  isExternal: false
  name: IMultipleResults
  nameWithType: IMultipleResults
  fullName: System.Data.Linq.IMultipleResults
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate(Type,DbDataReader)
  nameWithType: DataContext.Translate(Type,DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(Type,DbDataReader)
- uid: System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate(DbDataReader)
  nameWithType: DataContext.Translate(DbDataReader)
  fullName: System.Data.Linq.DataContext.Translate(DbDataReader)
- uid: System.Data.Linq.DataContext.#ctor*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DataContext
  nameWithType: DataContext.DataContext
- uid: System.Data.Linq.DataContext.ChangeConflicts*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ChangeConflicts
  nameWithType: DataContext.ChangeConflicts
- uid: System.Data.Linq.DataContext.CommandTimeout*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CommandTimeout
  nameWithType: DataContext.CommandTimeout
- uid: System.Data.Linq.DataContext.Connection*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Connection
  nameWithType: DataContext.Connection
- uid: System.Data.Linq.DataContext.CreateDatabase*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateDatabase
  nameWithType: DataContext.CreateDatabase
- uid: System.Data.Linq.DataContext.CreateMethodCallQuery<TResult>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: CreateMethodCallQuery<TResult>
  nameWithType: DataContext.CreateMethodCallQuery<TResult>
- uid: System.Data.Linq.DataContext.DatabaseExists*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DatabaseExists
  nameWithType: DataContext.DatabaseExists
- uid: System.Data.Linq.DataContext.DeferredLoadingEnabled*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeferredLoadingEnabled
  nameWithType: DataContext.DeferredLoadingEnabled
- uid: System.Data.Linq.DataContext.DeleteDatabase*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: DeleteDatabase
  nameWithType: DataContext.DeleteDatabase
- uid: System.Data.Linq.DataContext.Dispose*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Dispose
  nameWithType: DataContext.Dispose
- uid: System.Data.Linq.DataContext.ExecuteCommand*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteCommand
  nameWithType: DataContext.ExecuteCommand
- uid: System.Data.Linq.DataContext.ExecuteDynamicDelete*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicDelete
  nameWithType: DataContext.ExecuteDynamicDelete
- uid: System.Data.Linq.DataContext.ExecuteDynamicInsert*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicInsert
  nameWithType: DataContext.ExecuteDynamicInsert
- uid: System.Data.Linq.DataContext.ExecuteDynamicUpdate*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteDynamicUpdate
  nameWithType: DataContext.ExecuteDynamicUpdate
- uid: System.Data.Linq.DataContext.ExecuteMethodCall*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteMethodCall
  nameWithType: DataContext.ExecuteMethodCall
- uid: System.Data.Linq.DataContext.ExecuteQuery*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery
  nameWithType: DataContext.ExecuteQuery
- uid: System.Data.Linq.DataContext.ExecuteQuery<TResult>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ExecuteQuery<TResult>
  nameWithType: DataContext.ExecuteQuery<TResult>
- uid: System.Data.Linq.DataContext.GetChangeSet*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetChangeSet
  nameWithType: DataContext.GetChangeSet
- uid: System.Data.Linq.DataContext.GetCommand*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetCommand
  nameWithType: DataContext.GetCommand
- uid: System.Data.Linq.DataContext.GetTable*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable
  nameWithType: DataContext.GetTable
- uid: System.Data.Linq.DataContext.GetTable<TEntity>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: GetTable<TEntity>
  nameWithType: DataContext.GetTable<TEntity>
- uid: System.Data.Linq.DataContext.LoadOptions*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: LoadOptions
  nameWithType: DataContext.LoadOptions
- uid: System.Data.Linq.DataContext.Log*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Log
  nameWithType: DataContext.Log
- uid: System.Data.Linq.DataContext.Mapping*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Mapping
  nameWithType: DataContext.Mapping
- uid: System.Data.Linq.DataContext.ObjectTrackingEnabled*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: ObjectTrackingEnabled
  nameWithType: DataContext.ObjectTrackingEnabled
- uid: System.Data.Linq.DataContext.Refresh*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Refresh
  nameWithType: DataContext.Refresh
- uid: System.Data.Linq.DataContext.SubmitChanges*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: SubmitChanges
  nameWithType: DataContext.SubmitChanges
- uid: System.Data.Linq.DataContext.Transaction*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Transaction
  nameWithType: DataContext.Transaction
- uid: System.Data.Linq.DataContext.Translate*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate
  nameWithType: DataContext.Translate
- uid: System.Data.Linq.DataContext.Translate<TResult>*
  parent: System.Data.Linq.DataContext
  isExternal: false
  name: Translate<TResult>
  nameWithType: DataContext.Translate<TResult>
