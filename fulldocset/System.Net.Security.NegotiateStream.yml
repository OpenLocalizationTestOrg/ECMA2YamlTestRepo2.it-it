### YamlMime:ManagedReference
items:
- uid: System.Net.Security.NegotiateStream
  id: NegotiateStream
  children:
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.CanRead
  - System.Net.Security.NegotiateStream.CanSeek
  - System.Net.Security.NegotiateStream.CanTimeout
  - System.Net.Security.NegotiateStream.CanWrite
  - System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.Flush
  - System.Net.Security.NegotiateStream.ImpersonationLevel
  - System.Net.Security.NegotiateStream.IsAuthenticated
  - System.Net.Security.NegotiateStream.IsEncrypted
  - System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  - System.Net.Security.NegotiateStream.IsServer
  - System.Net.Security.NegotiateStream.IsSigned
  - System.Net.Security.NegotiateStream.Length
  - System.Net.Security.NegotiateStream.Position
  - System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.ReadTimeout
  - System.Net.Security.NegotiateStream.RemoteIdentity
  - System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Security.NegotiateStream.SetLength(System.Int64)
  - System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.WriteTimeout
  langs:
  - csharp
  name: NegotiateStream
  nameWithType: NegotiateStream
  fullName: System.Net.Security.NegotiateStream
  type: Class
  summary: "Fornisce un flusso che utilizza il protocollo di sicurezza Negotiate per autenticare il client e, facoltativamente, il server, nella comunicazione tra client e server."
  remarks: "Utilizzare la classe NegotiateStream per l&quot;autenticazione e per proteggere le informazioni trasmesse tra un client e un server. Mediante NegotiateStream, è possibile effettuare le operazioni seguenti.      -Invia le credenziali del client al server per la rappresentazione o delega.      -Richiesta di autenticazione server.      -Consente di crittografare e/o firmare i dati prima della trasmissione.       L&quot;autenticazione deve essere eseguita prima della trasmissione di informazioni. I client richiedono l&quot;autenticazione utilizzando sincroni <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metodi, che blocca fino a quando non viene completata l&quot;autenticazione, o asincrona <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metodi, che non vengono bloccati durante l&quot;attesa del completamento dell&quot;autenticazione.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> I server richiedono l&quot;autenticazione utilizzando sincroni <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>o asincroni <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> Il client e, facoltativamente, il server, viene autenticato mediante il protocollo di sicurezza Negotiate. Nei sistemi Windows 95/98, Windows NT LAN Manager (NTLM) è il protocollo utilizzato per l&quot;autenticazione. In altre piattaforme di Kerberos viene utilizzato per l&quot;autenticazione se il client e server supportano entrambi. in caso contrario, viene usato NTLM. Per una descrizione dettagliata di questi protocolli, vedere la documentazione di Platform SDK in MSDN in msdn.microsoft.com/library/. La classe NegotiateStream esegue l&quot;autenticazione utilizzando Security Support Provider Interface (SSPI).       Quando l&quot;autenticazione ha esito positivo, è necessario controllare il <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza da utilizzare per il NegotiateStream per proteggere i dati durante la trasmissione.</xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> È possibile ottenere informazioni sul client remoto o server utilizzando il <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>proprietà.</xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>       Se l&quot;autenticazione ha esito negativo, si riceverà un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse.       Inviare i dati utilizzando sincroni <xref:System.Net.Security.NegotiateStream.Write%2A>o asincroni <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginWrite%2A> </xref:System.Net.Security.NegotiateStream.Write%2A> Si ricevono dati usando sincroni <xref:System.Net.Security.NegotiateStream.Read%2A>o asincroni <xref:System.Net.Security.NegotiateStream.BeginRead%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginRead%2A> </xref:System.Net.Security.NegotiateStream.Read%2A> Se ad esempio la crittografia o firma vengono attivate servizi di sicurezza, questi vengono applicati automaticamente ai dati per il NegotiateStream.       Il NegotiateStream trasmette i dati utilizzando un flusso che viene fornito quando si crea il NegotiateStream. Quando si fornisce questo flusso sottostante, è possibile specificare se la chiusura di NegotiateStream chiude il flusso sottostante."
  example:
  - "The following code example demonstrates the client side of a client-server connection that uses the NegotiateStream. The client authenticates and sends a message to the server asynchronously.  \n  \n [!code-cpp[NclNegoAsyncClient#0](~/add/codesnippet/cpp/t-system.net.security.ne_1.cpp)]\n [!code-cs[NclNegoAsyncClient#0](~/add/codesnippet/csharp/t-system.net.security.ne_1.cs)]  \n  \n The following code example demonstrates the server side of a client-server connection that uses the NegotiateStream to authenticate the client and read a message sent by the client.  \n  \n [!code-cs[NclNegoAsyncServer#0](~/add/codesnippet/csharp/t-system.net.security.ne_2.cs)]\n [!code-cpp[NclNegoAsyncServer#0](~/add/codesnippet/cpp/t-system.net.security.ne_2.cpp)]"
  syntax:
    content: 'public class NegotiateStream : System.Net.Security.AuthenticatedStream'
  inheritance:
  - System.IO.Stream
  - System.Net.Security.AuthenticatedStream
  implements: []
  inheritedMembers:
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> usando specificata <xref:System.IO.Stream>.</xref:System.IO.Stream>"
  remarks: ''
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cs[NclNegoSyncClient#3](~/add/codesnippet/csharp/m-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoSyncClient#3](~/add/codesnippet/cpp/m-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "Oggetto <xref:System.IO.Stream>oggetto utilizzato per il <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> per l&quot;invio e ricezione di dati.</xref:System.IO.Stream>"
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> classe utilizzando l&quot;oggetto specificato <xref:System.IO.Stream>e il comportamento di chiusura del flusso.</xref:System.IO.Stream>"
  remarks: "Quando si specifica `true` per il `leaveStreamOpen` parametro, la chiusura di <xref:System.Net.Security.NegotiateStream>non ha alcun effetto `innerStream` flusso; è necessario chiudere esplicitamente `innerStream` quando non è più necessario tale</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates calling this constructor. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cpp[NclNegoAsyncClient#1](~/add/codesnippet/cpp/m-system.net.security.ne_4_1.cpp)]\n [!code-cs[NclNegoAsyncClient#1](~/add/codesnippet/csharp/m-system.net.security.ne_4_1.cs)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "Oggetto <xref:System.IO.Stream>oggetto utilizzato per il <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> per l&quot;invio e ricezione di dati.</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per indicare che la chiusura della <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> non ha alcun effetto `innerstream`; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per indicare che la chiusura della <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> e inoltre chiude `innerStream`. Per ulteriori informazioni, vedere la sezione Osservazioni."
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  id: AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per autenticare il client e, facoltativamente, il server, in una connessione client-server."
  remarks: "L&quot;autenticazione utilizza <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> del client Viene specificato alcun nome principale servizio (SPN) per il server. Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>, ed è richiesta l&quot;autenticazione reciproca.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> La <xref:System.Net.Security.NegotiateStream>classe verrà costruito il SPN utilizzato per l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual void AuthenticateAsClient ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione usa le credenziali client specificate."
  remarks: "Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>, ed è richiesta l&quot;autenticazione reciproca.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> La <xref:System.Net.Security.NegotiateStream>classe verrà costruito il SPN utilizzato per l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali client specificato e l&quot;associazione di canale."
  remarks: "Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>, ed è richiesta l&quot;autenticazione reciproca.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> La <xref:System.Net.Security.NegotiateStream>classe verrà costruito il SPN utilizzato per l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream>       Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizzato per la protezione estesa che viene passata al metodo nel `binding` parametro potrebbe essere recuperato da un&quot;applicazione dalla <xref:System.Net.Security.SslStream.TransportContext%2A>proprietà associato <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizzato per la protezione estesa.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali specificate e le opzioni di autenticazione."
  remarks: "Utilizzare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi utilizzando il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel>valore.</xref:System.Net.Security.ProtectionLevel> L&quot;autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel>è stata concessa.</xref:System.Net.Security.ProtectionLevel> È necessario controllare le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>proprietà</xref:System.Net.Security.NegotiateStream.IsSigned%2A> e per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>non è un valore valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>è null."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali specificate, le opzioni di autenticazione e l&quot;associazione di canale."
  remarks: "Utilizzare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi utilizzando il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel>valore.</xref:System.Net.Security.ProtectionLevel> L&quot;autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel>è stata concessa.</xref:System.Net.Security.ProtectionLevel> È necessario controllare le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>proprietà</xref:System.Net.Security.NegotiateStream.IsSigned%2A> e per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizzato per la protezione estesa che viene passata al metodo nel `binding` parametro potrebbe essere recuperato da un&quot;applicazione dalla <xref:System.Net.Security.SslStream.TransportContext%2A>proprietà associato <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizzato per la protezione estesa.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>non è un valore valido."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  id: AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per autenticare il client e, facoltativamente, il server, in una connessione client-server come operazione asincrona."
  remarks: "L&quot;autenticazione utilizza <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> del client Viene specificato alcun nome principale servizio (SPN) per il server. Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>, ed è richiesta l&quot;autenticazione reciproca.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> La <xref:System.Net.Security.NegotiateStream>classe verrà costruito il SPN utilizzato per l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Restituisce <xref:System.Threading.Tasks.Task>oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per autenticare il client e, facoltativamente, il server, in una connessione client-server come operazione asincrona. Il processo di autenticazione usa le credenziali client specificate."
  remarks: "Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>, ed è richiesta l&quot;autenticazione reciproca.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> La <xref:System.Net.Security.NegotiateStream>classe verrà costruito il SPN utilizzato per l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
    return:
      type: System.Threading.Tasks.Task
      description: "Restituisce <xref:System.Threading.Tasks.Task>oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per autenticare il client e, facoltativamente, il server, in una connessione client-server come operazione asincrona. Il processo di autenticazione utilizza le credenziali client specificato e l&quot;associazione di canale."
  remarks: "Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>, ed è richiesta l&quot;autenticazione reciproca.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> La <xref:System.Net.Security.NegotiateStream>classe verrà costruito il SPN utilizzato per l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream>       Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizzato per la protezione estesa che viene passata al metodo nel `binding` parametro potrebbe essere recuperato da un&quot;applicazione dalla <xref:System.Net.Security.SslStream.TransportContext%2A>proprietà associato <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizzato per la protezione estesa.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
    return:
      type: System.Threading.Tasks.Task
      description: "Restituisce <xref:System.Threading.Tasks.Task>oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per autenticare il client e, facoltativamente, il server, in una connessione client-server come operazione asincrona. Il processo di autenticazione utilizza le credenziali specificate e le opzioni di autenticazione."
  remarks: "Utilizzare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi utilizzando il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel>valore.</xref:System.Net.Security.ProtectionLevel> L&quot;autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel>è stata concessa.</xref:System.Net.Security.ProtectionLevel> È necessario controllare le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>proprietà</xref:System.Net.Security.NegotiateStream.IsSigned%2A> e per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Restituisce <xref:System.Threading.Tasks.Task>oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>non è un valore valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>è null."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per autenticare il client e, facoltativamente, il server, in una connessione client-server come operazione asincrona. Il processo di autenticazione utilizza le credenziali specificate, le opzioni di autenticazione e l&quot;associazione di canale."
  remarks: "Utilizzare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi utilizzando il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel>valore.</xref:System.Net.Security.ProtectionLevel> L&quot;autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel>è stata concessa.</xref:System.Net.Security.ProtectionLevel> È necessario controllare le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>proprietà</xref:System.Net.Security.NegotiateStream.IsSigned%2A> e per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizzato per la protezione estesa che viene passata al metodo nel `binding` parametro potrebbe essere recuperato da un&quot;applicazione dalla <xref:System.Net.Security.SslStream.TransportContext%2A>proprietà associato <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizzato per la protezione estesa.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Restituisce <xref:System.Threading.Tasks.Task>oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>non è un valore valido."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  id: AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per autenticare il client e, facoltativamente, il server, in una connessione client-server."
  remarks: "L&quot;autenticazione utilizza il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Viene specificato alcun nome principale servizio (SPN) per il server. Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, e il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Questo metodo si blocca fino al completamento dell&quot;operazione. Per evitare il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual void AuthenticateAsServer ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione Usa Criteri di protezione estesa specificata."
  remarks: "L&quot;autenticazione utilizza il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Viene specificato alcun nome principale servizio (SPN) per il server. Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, e il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Se il `policy` parametro `null`, viene utilizzato un criterio di protezione estesa che è <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Questo metodo si blocca fino al completamento dell&quot;operazione. Per evitare il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Il <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> utilizzato per la protezione estesa."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <> </> *> e <> </> *> in Criteri di protezione estesa passato il <code> policy </code> parametro sono entrambi <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Il <code> policy </code> parametro è stato impostato su <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> su una piattaforma che non supporta la protezione estesa."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali del server specificato e le opzioni di autenticazione."
  remarks: "Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Questo metodo si blocca fino al completamento dell&quot;operazione. Per evitare il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del server.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. È possibile utilizzare questo oggetto per tentare di eseguire l&quot;autenticazione di r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali del server specificato, le opzioni di autenticazione e criteri di protezione estesa."
  remarks: "Se il `policy` parametro `null`, viene utilizzato un criterio di protezione estesa che è <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Questo metodo si blocca fino al completamento dell&quot;operazione. Per evitare il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Il <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> utilizzato per la protezione estesa."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <> </> *> e <> </> *> in Criteri di protezione estesa passato il <code> policy </code> parametro sono entrambi <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. È possibile utilizzare questo oggetto per tentare di eseguire l&quot;autenticazione di r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Il <code> policy </code> parametro è stato impostato su <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> su una piattaforma che non supporta la protezione estesa."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  id: AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per autenticare il client e, facoltativamente, il server, in una connessione client-server come operazione asincrona."
  remarks: "L&quot;autenticazione utilizza il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Viene specificato alcun nome principale servizio (SPN) per il server. Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, e il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Restituisce <xref:System.Threading.Tasks.Task>oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per autenticare il client e, facoltativamente, il server, in una connessione client-server come operazione asincrona. Il processo di autenticazione Usa Criteri di protezione estesa specificata."
  remarks: "L&quot;autenticazione utilizza il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Viene specificato alcun nome principale servizio (SPN) per il server. Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, e il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Se il `policy` parametro `null`, viene utilizzato un criterio di protezione estesa che è <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Il <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> utilizzato per la protezione estesa."
    return:
      type: System.Threading.Tasks.Task
      description: "Restituisce <xref:System.Threading.Tasks.Task>oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <> </> *> e <> </> *> in Criteri di protezione estesa passato il <code> policy </code> parametro sono entrambi <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Il <code> policy </code> parametro è stato impostato su <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> su una piattaforma che non supporta la protezione estesa."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per autenticare il client e, facoltativamente, il server, in una connessione client-server come operazione asincrona. Il processo di autenticazione utilizza le credenziali del server specificato e le opzioni di autenticazione."
  remarks: "Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del server.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Restituisce <xref:System.Threading.Tasks.Task>oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. È possibile utilizzare questo oggetto per tentare di eseguire l&quot;autenticazione di r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per autenticare il client e, facoltativamente, il server, in una connessione client-server come operazione asincrona. Il processo di autenticazione utilizza le credenziali del server specificato, le opzioni di autenticazione e criteri di protezione estesa."
  remarks: "Se il `policy` parametro `null`, viene utilizzato un criterio di protezione estesa che è <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Il <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> utilizzato per la protezione estesa."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Restituisce <xref:System.Threading.Tasks.Task>oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <> </> *> e <> </> *> in Criteri di protezione estesa passato il <code> policy </code> parametro sono entrambi <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. È possibile utilizzare questo oggetto per tentare di eseguire l&quot;autenticazione di r."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Il <code> policy </code> parametro è stato impostato su <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> su una piattaforma che non supporta la protezione estesa."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per avviare un&quot;operazione asincrona per autenticare il client e, facoltativamente, il server, in una connessione client-server. Questo metodo non è bloccata."
  remarks: "L&quot;autenticazione utilizza <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> del client Viene specificato alcun nome principale servizio (SPN) per il server. Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, e il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> La <xref:System.Net.Security.NegotiateStream>classe verrà costruito il SPN utilizzato per l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream>       Questo metodo è asincrono e non si blocca durante il completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       L&quot;operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metodo.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> In genere, il metodo viene richiamato da di `asyncCallback` delegato. Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md) se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  example:
  - "The following code example demonstrates calling this method to begin an asynchronous authentication for the client.  \n  \n [!code-cpp[NclNegoAsyncClient#2](~/add/codesnippet/cpp/66fdfed9-ce77-41e0-af55-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#2](~/add/codesnippet/csharp/66fdfed9-ce77-41e0-af55-_1.cs)]"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;autenticazione è stata completata.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Oggetto definito dall&quot;utente contenente informazioni sull&quot;operazione. Questo oggetto viene passato per il `asyncCallback` delegato al completamento dell&quot;operazione."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che indica lo stato dell&quot;operazione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per avviare un&quot;operazione asincrona per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali specificate. Questo metodo non è bloccata."
  remarks: "Questo metodo è asincrono e non si blocca durante il completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       L&quot;operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metodo.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> In genere, il metodo viene richiamato da di `asyncCallback` delegato. Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md) se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;autenticazione è stata completata.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Oggetto definito dall&quot;utente che contiene informazioni sull&quot;operazione di scrittura. Questo oggetto viene passato per il `asyncCallback` delegato al completamento dell&quot;operazione."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che indica lo stato dell&quot;operazione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per avviare un&quot;operazione asincrona per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali specificate e l&quot;associazione di canale. Questo metodo non è bloccata."
  remarks: "Questo metodo è asincrono e non si blocca durante il completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       L&quot;operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metodo.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> In genere, il metodo viene richiamato da di `asyncCallback` delegato. Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md) se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizzato per la protezione estesa.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;autenticazione è stata completata.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Oggetto definito dall&quot;utente che contiene informazioni sull&quot;operazione di scrittura. Questo oggetto viene passato per il `asyncCallback` delegato al completamento dell&quot;operazione."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che indica lo stato dell&quot;operazione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per avviare un&quot;operazione asincrona per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali specificate e le opzioni di autenticazione. Questo metodo non è bloccata."
  remarks: "Utilizzare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi utilizzando il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel>valore.</xref:System.Net.Security.ProtectionLevel> L&quot;autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel>è stata concessa.</xref:System.Net.Security.ProtectionLevel> È necessario controllare le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>proprietà</xref:System.Net.Security.NegotiateStream.IsSigned%2A> e per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Questo metodo è asincrono e non si blocca durante il completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       L&quot;operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metodo.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> In genere, il metodo viene richiamato da di `asyncCallback` delegato. Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md) se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;autenticazione è stata completata.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Oggetto definito dall&quot;utente che contiene informazioni sull&quot;operazione di scrittura. Questo oggetto viene passato per il `asyncCallback` delegato al completamento dell&quot;operazione."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che indica lo stato dell&quot;operazione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamato dal client per avviare un&quot;operazione asincrona per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali specificate, le opzioni di autenticazione e l&quot;associazione di canale. Questo metodo non è bloccata."
  remarks: "Utilizzare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi utilizzando il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel>valore.</xref:System.Net.Security.ProtectionLevel> L&quot;autenticazione non garantisce che la richiesta <xref:System.Net.Security.ProtectionLevel>è stata concessa.</xref:System.Net.Security.ProtectionLevel> È necessario controllare le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>proprietà</xref:System.Net.Security.NegotiateStream.IsSigned%2A> e per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Questo metodo è asincrono e non si blocca durante il completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       L&quot;operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>metodo.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> In genere, il metodo viene richiamato da di `asyncCallback` delegato. Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md) se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "Il <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>utilizzato per la protezione estesa.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "Il principale nome servizio (SPN) che identifica in modo univoco il server per l&quot;autenticazione."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;autenticazione è stata completata.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Oggetto definito dall&quot;utente che contiene informazioni sull&quot;operazione di scrittura. Questo oggetto viene passato per il `asyncCallback` delegato al completamento dell&quot;operazione."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che indica lo stato dell&quot;operazione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per avviare un&quot;operazione asincrona per autenticare il client e, facoltativamente, il server, in una connessione client-server. Questo metodo non è bloccata."
  remarks: "L&quot;autenticazione utilizza il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Viene specificato alcun nome principale servizio (SPN) per il server. Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;autenticazione è stata completata.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Oggetto definito dall&quot;utente contenente informazioni sull&quot;operazione. Questo oggetto viene passato per il `asyncCallback` delegato al completamento dell&quot;operazione."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che indica lo stato dell&quot;operazione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per avviare un&quot;operazione asincrona per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione Usa Criteri di protezione estesa specificata. Questo metodo non è bloccata."
  remarks: "L&quot;autenticazione utilizza il server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Viene specificato alcun nome principale servizio (SPN) per il server. Il livello di rappresentazione è <xref:System.Security.Principal.TokenImpersonationLevel>, il livello di sicurezza è <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Se il `policy` parametro `null`, viene utilizzato un criterio di protezione estesa che è <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Il <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> utilizzato per la protezione estesa."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;autenticazione è stata completata.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Oggetto definito dall&quot;utente che contiene informazioni sull&quot;operazione di scrittura. Questo oggetto viene passato per il `asyncCallback` delegato al completamento dell&quot;operazione."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che indica lo stato dell&quot;operazione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <> </> *> e <> </> *> in Criteri di protezione estesa passato il <code> policy </code> parametro sono entrambi <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Il <code> policy </code> parametro è stato impostato su <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> su una piattaforma che non supporta la protezione estesa."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per avviare un&quot;operazione asincrona per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali del server specificato e le opzioni di autenticazione. Questo metodo non è bloccata."
  remarks: "Utilizzare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi utilizzando il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel>valore.</xref:System.Net.Security.ProtectionLevel> L&quot;autenticazione non garantisce che, la richiesta <xref:System.Net.Security.ProtectionLevel>è stata concessa.</xref:System.Net.Security.ProtectionLevel> È necessario controllare le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>proprietà</xref:System.Net.Security.NegotiateStream.IsSigned%2A> e per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Questo metodo è asincrono e non si blocca durante il completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       L&quot;operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>metodo.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> In genere, il metodo viene richiamato da di `asyncCallback` delegato. Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md) se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;autenticazione è stata completata.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Oggetto definito dall&quot;utente contenente informazioni sull&quot;operazione. Questo oggetto viene passato per il `asyncCallback` delegato al completamento dell&quot;operazione."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che indica lo stato dell&quot;operazione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Chiamata eseguita dal server per avviare un&quot;operazione asincrona per autenticare il client e, facoltativamente, il server, in una connessione client-server. Il processo di autenticazione utilizza le credenziali del server specificato, le opzioni di autenticazione e criteri di protezione estesa. Questo metodo non è bloccata."
  remarks: "Utilizzare il `requiredProtectionLevel` parametro per richiedere i servizi di sicurezza per i dati trasmessi utilizzando il flusso autenticato. Ad esempio, per ottenere i dati crittografati e firmati, specificare il <xref:System.Net.Security.ProtectionLevel>valore.</xref:System.Net.Security.ProtectionLevel> L&quot;autenticazione non garantisce che, la richiesta <xref:System.Net.Security.ProtectionLevel>è stata concessa.</xref:System.Net.Security.ProtectionLevel> È necessario controllare le <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>proprietà</xref:System.Net.Security.NegotiateStream.IsSigned%2A> e per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>       Se il `policy` parametro `null`, viene utilizzato un criterio di protezione estesa che è <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>impostato su <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Questo metodo è asincrono e non si blocca durante il completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>overload del metodo.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       L&quot;operazione asincrona di autenticazione deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>metodo.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> In genere, il metodo viene richiamato da di `asyncCallback` delegato. Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md) se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "Il <xref:System.Net.NetworkCredential>utilizzato per stabilire l&quot;identità del client.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Il <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> utilizzato per la protezione estesa."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Uno del <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> valori, che indica i servizi di sicurezza per il flusso."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori, che indica la modalità con cui il server può utilizzare le credenziali del client per accedere alle risorse.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;autenticazione è stata completata.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Oggetto definito dall&quot;utente che contiene informazioni sull&quot;operazione di scrittura. Questo oggetto viene passato per il `asyncCallback` delegato al completamento dell&quot;operazione."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che indica lo stato dell&quot;operazione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <> </> *> e <> </> *> in Criteri di protezione estesa passato il <code> policy </code> parametro sono entrambi <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 e Windows 98 non sono supportati."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Il <code> policy </code> parametro è stato impostato su <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> su una piattaforma che non supporta la protezione estesa."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Avvia un&quot;operazione di lettura asincrona che legge i dati dal flusso e lo archivia nella matrice specificata."
  remarks: "Se sono abilitate la crittografia, la firma o crittografia e firma, l&quot;operazione di lettura legge i dati dal flusso sottostante, controlla l&quot;integrità dei dati e lo decrittografa. Se nessuna sicurezza dei servizi, ad esempio la crittografia o firma sono in uso, questo metodo avvia un&quot;operazione di lettura asincrona sul flusso sottostante.       Questo metodo è asincrono e non si blocca durante il completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare il <xref:System.Net.Security.NegotiateStream.Read%2A>metodo.</xref:System.Net.Security.NegotiateStream.Read%2A>       L&quot;operazione di lettura asincrona deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndRead%2A>metodo.</xref:System.Net.Security.NegotiateStream.EndRead%2A> In genere, il metodo viene richiamato da di `asyncCallback` delegato. Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md) la <xref:System.Net.Security.NegotiateStream>classe non supporta più operazioni di lettura simultanei.</xref:System.Net.Security.NegotiateStream> Se si tenta di avviare un&quot;operazione di lettura, mentre un&quot;altra operazione è già in esecuzione nello stesso flusso, di lettura un <xref:System.NotSupportedException>verrà generata l&quot;eccezione.</xref:System.NotSupportedException>       È possibile chiamare questo metodo fino a quando non è stata effettuata l&quot;autenticazione. Per autenticare, chiamare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates starting an asynchronous read operation. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cs[NclNegoAsyncServer#1](~/add/codesnippet/csharp/45085c2d-bb14-48e7-a75f-_1.cs)]\n [!code-cpp[NclNegoAsyncServer#1](~/add/codesnippet/cpp/45085c2d-bb14-48e7-a75f-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Oggetto <xref:System.Byte>matrice che riceve i byte letti dal flusso.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Il percorso in base zero in `buffer` da cui iniziare l&quot;archiviazione dei dati letti dal flusso corrente."
    - id: count
      type: System.Int32
      description: "Numero massimo di byte da leggere dal flusso."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;operazione di lettura è stata completata.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Oggetto definito dall&quot;utente contenente informazioni sull&quot;operazione di lettura. Questo oggetto viene passato per il `asyncCallback` delegato al completamento dell&quot;operazione."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che indica lo stato dell&quot;operazione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code> is less than 0.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus <code>count</code> is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The read operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be decrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "È già in corso un&quot;operazione di lettura."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticazione non è stata eseguita."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Avvia un&quot;operazione di scrittura asincrona che scrive <xref:System.Byte>s dal buffer specificato nel flusso.</xref:System.Byte>"
  remarks: "Se sono abilitate la crittografia, la firma o crittografia e firma, questo metodo legge i dati dal buffer, esegue la crittografia, firma, o esegue la crittografia e firma e trasmette il flusso sottostante. Se nessuna sicurezza dei servizi, ad esempio la crittografia o firma sono in uso, questo metodo avvia un&quot;operazione di scrittura asincrona sul flusso sottostante.       Questo metodo è asincrono e non si blocca durante il completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare il <xref:System.Net.Security.NegotiateStream.Read%2A>metodo.</xref:System.Net.Security.NegotiateStream.Read%2A>       L&quot;operazione di lettura asincrona deve essere completata chiamando il <xref:System.Net.Security.NegotiateStream.EndWrite%2A>metodo.</xref:System.Net.Security.NegotiateStream.EndWrite%2A> In genere, il metodo viene richiamato da di `asyncCallback` delegato. Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md) la <xref:System.Net.Security.NegotiateStream>classe non supporta più operazioni di scrittura simultanee.</xref:System.Net.Security.NegotiateStream> Se si tenta di avviare un&quot;operazione di scrittura, mentre un&quot;altra operazione di scrittura è già in esecuzione nello stesso flusso, un <xref:System.NotSupportedException>verrà generata l&quot;eccezione.</xref:System.NotSupportedException>       È possibile chiamare questo metodo fino a quando non è stata effettuata l&quot;autenticazione. Per autenticare, chiamare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates beginning an asynchronous write operation.  \n  \n [!code-cpp[NclNegoAsyncClient#3](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#3](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_1.cs)]  \n  \n The following method is called when the operation completes.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_2.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_2.cs)]"
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Oggetto <xref:System.Byte>matrice che fornisce i byte da scrivere nel flusso.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Il percorso in base zero in `buffer` in corrispondenza del quale iniziare la lettura dei byte da scrivere nel flusso."
    - id: count
      type: System.Int32
      description: "Un <xref:System.Int32>valore che specifica il numero di byte da leggere dal `buffer`.</xref:System.Int32>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;operazione di scrittura è completa.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Oggetto definito dall&quot;utente che contiene informazioni sull&quot;operazione di scrittura. Questo oggetto viene passato per il `asyncCallback` delegato al completamento dell&quot;operazione."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che indica lo stato dell&quot;operazione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "È già in corso un&quot;operazione di scrittura."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticazione non è stata eseguita."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanRead
  id: CanRead
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene un <xref:System.Boolean>valore che indica se il flusso sottostante è leggibile.</xref:System.Boolean>"
  remarks: "Se si è verificato l&quot;autenticazione ha esito positivo, questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.CanRead%2A>proprietà sul flusso sottostante.</xref:System.IO.Stream.CanRead%2A> Il flusso sottostante viene specificato quando si crea un&quot;istanza della <xref:System.Net.Security.NegotiateStream>classe.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_4_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_4_1.cpp)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se si è verificato l&quot;autenticazione e il flusso sottostante è leggibile; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanSeek
  id: CanSeek
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene un <xref:System.Boolean>valore che indica se il flusso sottostante è ricercabile.</xref:System.Boolean>"
  remarks: "Non tentare di impostare la posizione del <xref:System.Net.Security.NegotiateStream>oggetto o il flusso sottostante.</xref:System.Net.Security.NegotiateStream> Il flusso sottostante viene specificato quando si crea un&quot;istanza della <xref:System.Net.Security.NegotiateStream>classe.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "Questa proprietà restituisce sempre <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene un <xref:System.Boolean>valore che indica se il flusso sottostante supporta i timeout.</xref:System.Boolean>"
  remarks: "Questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.CanTimeout%2A>proprietà sul flusso sottostante.</xref:System.IO.Stream.CanTimeout%2A> Il flusso sottostante viene specificato quando si crea un&quot;istanza della <xref:System.Net.Security.NegotiateStream>classe.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override bool CanTimeout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il flusso sottostante supporta i timeout; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanWrite
  id: CanWrite
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene un <xref:System.Boolean>valore che indica se il flusso sottostante è scrivibile.</xref:System.Boolean>"
  remarks: "Se si è verificato l&quot;autenticazione ha esito positivo, questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.CanWrite%2A>proprietà sul flusso sottostante.</xref:System.IO.Stream.CanWrite%2A> Il flusso sottostante viene specificato quando si crea un&quot;istanza della <xref:System.Net.Security.NegotiateStream>classe.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_6_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_6_1.cpp)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se si è verificato l&quot;autenticazione e il flusso sottostante è scrivibile; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico `Dispose()`(metodo) e <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A>richiama `Dispose` con `disposing` impostato su `false`.</xref:System.Object.Finalize%2A>       Quando il `disposing` parametro è true, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Net.Security.NegotiateStream>riferimenti.</xref:System.Net.Security.NegotiateStream> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Net.Security.NegotiateStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  id: EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Termina un&quot;operazione di autenticazione client asincrona in sospeso che è stata avviata con una chiamata a <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>"
  remarks: "Se l&quot;operazione non è stata completata, questo metodo si blocca fino a quando non avviene. Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse.       Per eseguire questa operazione in modo sincrono, utilizzare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>metodo.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Un&quot; <xref:System.IAsyncResult>istanza restituita da una chiamata a <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>non è stato creato da una chiamata a <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Non vi è alcuna autenticazione del client in sospeso da completare."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  id: EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Termina un&quot;operazione di autenticazione client asincrona in sospeso che è stata avviata con una chiamata a <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>"
  remarks: "Se l&quot;operazione non è stata completata, questo metodo si blocca fino a quando non avviene.       Quando l&quot;autenticazione ha esito positivo, è necessario verificare <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>e <xref:System.Net.Security.NegotiateStream.IsSigned%2A>le proprietà per determinare i servizi di sicurezza utilizzati da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controllare il <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>proprietà per determinare se l&quot;autenticazione reciproca.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Se l&quot;autenticazione non riesce, viene visualizzato un <xref:System.Security.Authentication.AuthenticationException>o un <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In questo caso, è possibile riprovare a eseguire l&quot;autenticazione con credenziali diverse.       Per eseguire questa operazione in modo sincrono, utilizzare il <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>metodo.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Un&quot; <xref:System.IAsyncResult>istanza restituita da una chiamata a <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>non è stato creato da una chiamata a <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "L&quot;autenticazione non riuscita. Per ripetere l&quot;autenticazione, è possibile utilizzare questo oggetto."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Non sussiste alcuna autenticazione in sospeso da completare."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Termina un&quot;operazione di lettura asincrona che è stata avviata con una chiamata a <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*>"
  remarks: "Se l&quot;operazione non è stata completata, questo metodo si blocca fino a quando non avviene.       Per eseguire questa operazione in modo sincrono, utilizzare il <xref:System.Net.Security.NegotiateStream.Read%2A>metodo.</xref:System.Net.Security.NegotiateStream.Read%2A>       È possibile chiamare questo metodo fino a quando non è stata effettuata l&quot;autenticazione. Per autenticare, chiamare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates ending an asynchronous read operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  \n  \n [!code-cs[NclNegoAsyncServer#3](~/add/codesnippet/csharp/m-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoAsyncServer#3](~/add/codesnippet/cpp/m-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>istanza restituita da una chiamata a <xref:System.Net.Security.NegotiateStream.BeginRead*></xref:System.Net.Security.NegotiateStream.BeginRead*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "Oggetto <xref:System.Int32>valore che specifica il numero di byte letti dal flusso sottostante.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "AsyncResult non è stato creato da una chiamata a <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticazione non è stata eseguita."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "L&quot;operazione di lettura non riuscita."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Termina un&quot;operazione di scrittura asincrona che è stata avviata con una chiamata a <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*>"
  remarks: "Se l&quot;operazione non è stata completata, questo metodo si blocca fino a quando non avviene.       È possibile chiamare questo metodo fino a quando non è stata effettuata l&quot;autenticazione. Per autenticare, chiamare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Per eseguire questa operazione in modo sincrono, utilizzare il <xref:System.Net.Security.NegotiateStream.Write%2A>metodo.</xref:System.Net.Security.NegotiateStream.Write%2A>"
  example:
  - "The following code example demonstrates a method that is called to complete the asynchronous write operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_0_1.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_0_1.cs)]"
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>istanza restituita da una chiamata a <xref:System.Net.Security.NegotiateStream.BeginWrite*></xref:System.Net.Security.NegotiateStream.BeginWrite*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "AsyncResult non è stato creato da una chiamata a <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticazione non è stata eseguita."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "L&quot;operazione di scrittura non riuscita."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Flush
  id: Flush
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Fa sì che tutti i dati memorizzati nel buffer da scrivere nel dispositivo sottostante."
  remarks: "Questo metodo richiama <xref:System.IO.Stream.Flush%2A>nel flusso sottostante.</xref:System.IO.Stream.Flush%2A>"
  example:
  - "The following code example demonstrates flushing the stream.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene un valore che indica la modalità con cui il server può utilizzare le credenziali del client."
  remarks: "È necessario autenticare correttamente prima di chiamare questo metodo. I client di specificare il livello di rappresentazione quando viene richiesta l&quot;autenticazione chiamando uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Si esegue l&quot;autenticazione senza specificare un <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>viene utilizzato.</xref:System.Security.Principal.TokenImpersonationLevel> </xref:System.Security.Principal.TokenImpersonationLevel>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_5_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_5_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Uno del <xref:System.Security.Principal.TokenImpersonationLevel>valori.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.ImpersonationLevel*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticazione non riuscita o non si è verificato."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene un <xref:System.Boolean>valore che indica se l&quot;autenticazione è riuscita.</xref:System.Boolean>"
  remarks: "Eseguire l&quot;autenticazione client mediante la chiamata di <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Eseguire l&quot;autenticazione server chiamando il <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_10_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_10_1.cpp)]"
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se è stata effettuata l&quot;autenticazione ha esito positivo; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene un <xref:System.Boolean>valore che indica se questo <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> utilizza la crittografia dei dati.</xref:System.Boolean>"
  remarks: "La crittografia consente di proteggere la privacy dei dati. in particolare, è utile per garantire che mentre i dati sono in transito non possano essere decifrati da terze parti."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_8_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_8_1.cpp)]"
  syntax:
    content: public override bool IsEncrypted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se i dati vengono crittografati prima di essere trasmessi in rete e decrittografati quando raggiunge l&quot;endpoint remoto. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsEncrypted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene un <xref:System.Boolean>valore che indica se il server e il client sono stati autenticati.</xref:System.Boolean>"
  remarks: "L&quot;autenticazione reciproca viene specificato dal client quando il client richiede il server di fornire le credenziali per l&quot;autenticazione. Per impostazione predefinita, i client richiedono l&quot;autenticazione reciproca.       A seconda i protocolli di sicurezza supportati dal client e server, il protocollo Negotiate seleziona NTLM o Kerberos. NTLM non supporta l&quot;autenticazione reciproca."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_7_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_7_1.cpp)]"
  syntax:
    content: public override bool IsMutuallyAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il server è stato autenticato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsServer
  id: IsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene un <xref:System.Boolean>valore che indica se il lato locale della connessione utilizzata da questo <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> come il server è stato autenticato.</xref:System.Boolean>"
  remarks: "Se l&quot;autenticazione non riuscita o non è stata eseguita, questa proprietà restituisce `false`.       Per eseguire l&quot;autenticazione del server, chiamare il <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_0_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_0_1.cpp)]"
  syntax:
    content: public override bool IsServer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;endpoint locale è stato autenticato come lato server della connessione autenticata; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsServer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene un <xref:System.Boolean>valore che indica se i dati inviati tramite il flusso sono firmati.</xref:System.Boolean>"
  remarks: "La firma dei dati consente di proteggere l&quot;integrità dei dati. in particolare, consente il destinatario di determinare se sono stati alterati i dati in transito."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_13_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_13_1.cpp)]"
  syntax:
    content: public override bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se i dati vengono firmati prima di essere trasmessi; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Length
  id: Length
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene la lunghezza del flusso sottostante."
  remarks: "Questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.Length%2A>proprietà sul flusso sottostante.</xref:System.IO.Stream.Length%2A> Se il flusso sottostante non è ricercabile, questa proprietà in genere genererà un&quot;eccezione. Il tipo di runtime del flusso sottostante determina il tipo di runtime dell&quot;eccezione generata."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_9_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_9_1.cpp)]"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "Oggetto <xref:System.Int64>che specifica la lunghezza del flusso sottostante.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Ottenere il valore di questa proprietà non è supportata quando il flusso sottostante è un <xref href=&quot;System.Net.Sockets.NetworkStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Position
  id: Position
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene o imposta la posizione corrente nel flusso sottostante."
  remarks: "Questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.Position%2A>proprietà sul flusso sottostante.</xref:System.IO.Stream.Position%2A> Se il flusso sottostante non è ricercabile, questa proprietà in genere genererà un&quot;eccezione. Il tipo di runtime del flusso sottostante determina il tipo di runtime dell&quot;eccezione generata."
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "Oggetto <xref:System.Int64>che specifica la posizione corrente nel flusso sottostante.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Setting this property is not supported.  \n  \n \\- or -  \n  \n Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Legge i dati dal flusso corrente e lo archivia nella matrice specificata."
  remarks: "Il metodo legge un numero massimo di `count` flusso di byte dall&quot;oggetto corrente e li archivia in `buffer` a partire da `offset`.       È possibile chiamare questo metodo fino a quando non è stata effettuata l&quot;autenticazione. Per autenticare, chiamare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Per eseguire questa operazione in modo asincrono, utilizzare il <xref:System.Net.Security.NegotiateStream.BeginRead%2A>metodo.</xref:System.Net.Security.NegotiateStream.BeginRead%2A>"
  example:
  - "The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncServer#1](~/add/codesnippet/csharp/e81792fe-7974-494d-8076-_1.cs)]\n [!code-cpp[NclNegoSyncServer#1](~/add/codesnippet/cpp/e81792fe-7974-494d-8076-_1.cpp)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Oggetto <xref:System.Byte>matrice che riceve i byte letti dal flusso.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Oggetto <xref:System.Int32>contenente la posizione in base zero nel `buffer` da cui iniziare l&quot;archiviazione dei dati letti dal flusso corrente.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "Oggetto <xref:System.Int32>contenente il numero massimo di byte da leggere dal flusso.</xref:System.Int32>"
    return:
      type: System.Int32
      description: "Oggetto <xref:System.Int32>valore che specifica il numero di byte letti dal flusso sottostante.</xref:System.Int32> Se non sono presenti ulteriori dati da leggere, restituisce 0."
  overload: System.Net.Security.NegotiateStream.Read*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "L&quot;operazione di lettura non riuscita."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticazione non è stata eseguita."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "È già in corso un&quot;operazione di lettura."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene o imposta la quantità di tempo di che un&quot;operazione di lettura blocca in attesa dei dati."
  remarks: "Questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.ReadTimeout%2A>proprietà sul flusso sottostante.</xref:System.IO.Stream.ReadTimeout%2A> Quando si imposta questa proprietà, il <xref:System.IO.Stream.ReadTimeout%2A>nel flusso sottostante è impostato sul valore specificato.</xref:System.IO.Stream.ReadTimeout%2A>       Se il flusso sottostante è un <xref:System.Net.Sockets.NetworkStream>, ReadTimeout è espresso in millisecondi e viene impostato su <xref:System.Threading.Timeout.Infinite>per impostazione predefinita, in modo che le operazioni di lettura non timeout.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_12_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_12_1.cpp)]"
  syntax:
    content: public override int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: "Oggetto <xref:System.Int32>che specifica la quantità di tempo che deve trascorrere prima che un&quot;operazione di lettura ha esito negativo.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.ReadTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  id: RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene informazioni sull&quot;identità dell&quot;entità remota condivide questo flusso autenticato."
  remarks: "Quando il client accede a, questa proprietà restituisce un <xref:System.Security.Principal.GenericIdentity>contenente il nome dell&quot;entità di servizio (SPN) del server e il protocollo di autenticazione utilizzato.</xref:System.Security.Principal.GenericIdentity> Quando si accede dal server, questa proprietà restituisce un <xref:System.Security.Principal.WindowsIdentity>che descrive il client.</xref:System.Security.Principal.WindowsIdentity> Se il <xref:System.Security.Principal.WindowsIdentity>è non disponibile, vengono restituite informazioni client al server in un <xref:System.Security.Principal.GenericIdentity>.</xref:System.Security.Principal.GenericIdentity> </xref:System.Security.Principal.WindowsIdentity>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoAsyncServer#2](~/add/codesnippet/csharp/p-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoAsyncServer#2](~/add/codesnippet/cpp/p-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "Un <xref:System.Security.Principal.IIdentity>oggetto che descrive l&quot;identità dell&quot;endpoint remoto.</xref:System.Security.Principal.IIdentity>"
  overload: System.Net.Security.NegotiateStream.RemoteIdentity*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticazione non riuscita o non si è verificato."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Genera <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  remarks: "Non chiamare questo metodo. Viene ereditato, ma non è supportato da <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "Questo valore viene ignorato."
    - id: origin
      type: System.IO.SeekOrigin
      description: "Questo valore viene ignorato."
    return:
      type: System.Int64
      description: "Genera sempre un <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  overload: System.Net.Security.NegotiateStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "La ricerca non è supportata in <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Imposta la lunghezza del flusso sottostante."
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "Un <xref:System.Int64>valore che specifica la lunghezza del flusso.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.SetLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Scrivere il numero specificato di <xref:System.Byte>s per il flusso sottostante utilizzando il buffer specificato e l&quot;offset.</xref:System.Byte>"
  remarks: "Se sono abilitate la crittografia, la firma o crittografia e firma, questo metodo legge i dati dal buffer, esegue la crittografia, firma, o esegue la crittografia e firma e trasmette il flusso sottostante. Se nessuna sicurezza dei servizi, ad esempio la crittografia o firma sono in uso, questo metodo richiama <xref:System.IO.Stream.Write%2A>nel flusso sottostante.</xref:System.IO.Stream.Write%2A>       Questo metodo blocca quando viene completata l&quot;operazione di scrittura. Per evitare il blocco di completamento dell&quot;operazione, utilizzare il metodo Write.       È possibile chiamare questo metodo fino a quando non è stata effettuata l&quot;autenticazione. Per autenticare, chiamare uno del <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, o <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>metodi.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       La <xref:System.Net.Security.NegotiateStream>classe non supporta più operazioni di scrittura simultanee.</xref:System.Net.Security.NegotiateStream> Se si tenta di avviare un&quot;operazione di scrittura, mentre un&quot;altra operazione di scrittura è già in esecuzione nello stesso flusso, un <xref:System.NotSupportedException>verrà generata l&quot;eccezione.</xref:System.NotSupportedException>"
  example:
  - "The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/1536316b-fecf-4b4a-b33a-_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/1536316b-fecf-4b4a-b33a-_1.cpp)]"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Oggetto <xref:System.Byte>matrice che fornisce i byte scritti nel flusso.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Un <xref:System.Int32>contenente la posizione in base zero nel `buffer` in corrispondenza del quale iniziare la lettura dei byte da scrivere nel flusso.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "Oggetto <xref:System.Int32>contenente il numero di byte da leggere dal `buffer`.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "È già in corso un&quot;operazione di scrittura."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questo oggetto è stato chiuso."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Autenticazione non è stata eseguita."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Ottiene o imposta la quantità di tempo di che un&quot;operazione di scrittura si blocca in attesa dei dati."
  remarks: "Questa proprietà restituisce il valore restituito richiamando il <xref:System.IO.Stream.WriteTimeout%2A>proprietà sul flusso sottostante.</xref:System.IO.Stream.WriteTimeout%2A> Per le operazioni set, imposta il valore specificato di <xref:System.IO.Stream.WriteTimeout%2A>valore nel flusso sottostante.</xref:System.IO.Stream.WriteTimeout%2A>       Se il flusso sottostante è un <xref:System.Net.Sockets.NetworkStream>, WriteTimeout è espresso in millisecondi e viene impostato su <xref:System.Threading.Timeout.Infinite>per impostazione predefinita, in modo che le operazioni di scrittura non timeout.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_11_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_11_1.cpp)]"
  syntax:
    content: public override int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "Oggetto <xref:System.Int32>che specifica la quantità di tempo che deve trascorrere prima che un&quot;operazione di scrittura ha esito negativo.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.WriteTimeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: System.Net.Security.AuthenticatedStream
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Authentication.AuthenticationException
  parent: System.Security.Authentication
  isExternal: false
  name: AuthenticationException
  nameWithType: AuthenticationException
  fullName: System.Security.Authentication.AuthenticationException
- uid: System.Security.Authentication.InvalidCredentialException
  parent: System.Security.Authentication
  isExternal: false
  name: InvalidCredentialException
  nameWithType: InvalidCredentialException
  fullName: System.Security.Authentication.InvalidCredentialException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
- uid: System.Net.NetworkCredential
  parent: System.Net
  isExternal: true
  name: NetworkCredential
  nameWithType: NetworkCredential
  fullName: System.Net.NetworkCredential
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: true
  name: ChannelBinding
  nameWithType: ChannelBinding
  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.ProtectionLevel
  parent: System.Net.Security
  isExternal: false
  name: ProtectionLevel
  nameWithType: ProtectionLevel
  fullName: System.Net.Security.ProtectionLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ExtendedProtectionPolicy
  nameWithType: ExtendedProtectionPolicy
  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.CanRead
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.Flush
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Security.NegotiateStream.Position
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
- uid: System.Net.Security.NegotiateStream.#ctor*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream
  nameWithType: NegotiateStream.NegotiateStream
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient
  nameWithType: NegotiateStream.AuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync
  nameWithType: NegotiateStream.AuthenticateAsClientAsync
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer
  nameWithType: NegotiateStream.AuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync
  nameWithType: NegotiateStream.AuthenticateAsServerAsync
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient
  nameWithType: NegotiateStream.BeginAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer
  nameWithType: NegotiateStream.BeginAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.BeginRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead
  nameWithType: NegotiateStream.BeginRead
- uid: System.Net.Security.NegotiateStream.BeginWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite
  nameWithType: NegotiateStream.BeginWrite
- uid: System.Net.Security.NegotiateStream.CanRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose
  nameWithType: NegotiateStream.Dispose
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient
  nameWithType: NegotiateStream.EndAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer
  nameWithType: NegotiateStream.EndAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.EndRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead
  nameWithType: NegotiateStream.EndRead
- uid: System.Net.Security.NegotiateStream.EndWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite
  nameWithType: NegotiateStream.EndWrite
- uid: System.Net.Security.NegotiateStream.Flush*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush
  nameWithType: NegotiateStream.Flush
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
- uid: System.Net.Security.NegotiateStream.Position*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read
  nameWithType: NegotiateStream.Read
- uid: System.Net.Security.NegotiateStream.ReadTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
- uid: System.Net.Security.NegotiateStream.Seek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek
  nameWithType: NegotiateStream.Seek
- uid: System.Net.Security.NegotiateStream.SetLength*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength
  nameWithType: NegotiateStream.SetLength
- uid: System.Net.Security.NegotiateStream.Write*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write
  nameWithType: NegotiateStream.Write
- uid: System.Net.Security.NegotiateStream.WriteTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
