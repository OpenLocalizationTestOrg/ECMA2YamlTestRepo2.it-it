### YamlMime:ManagedReference
items:
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute
  id: ComponentGuaranteesAttribute
  children:
  - System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)
  - System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  langs:
  - csharp
  name: ComponentGuaranteesAttribute
  nameWithType: ComponentGuaranteesAttribute
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute
  type: Class
  summary: "Definisce la garanzia di compatibilità di un componente, tipo o membro del tipo che può estendersi a più versioni."
  remarks: "Il ComponentGuaranteesAttribute viene utilizzato dagli sviluppatori di componenti e le librerie di classi per indicare il livello di compatibilità che è possibile prevedere il consumer delle librerie in più versioni. Indica il livello di garanzia che una versione futura della libreria o del componente non verrà interrotto un client esistente. I client possono quindi usare il ComponentGuaranteesAttribute come ausilio nella progettazione di interfacce per garantire la stabilità tra le versioni.      > [!NOTE] > Common language runtime (CLR) non usare questo attributo in alcun modo. Il valore si trova in documentare formalmente l&quot;intenzione dell&quot;autore del componente. Strumenti in fase di compilazione possono inoltre utilizzare queste dichiarazioni per rilevare errori in fase di compilazione che causa l&quot;interruzione in caso contrario la garanzia dichiarata.      ## Livelli di compatibilità di ComponentGuaranteesAttribute supporta i seguenti livelli di compatibilità, rappresentati dai membri del <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>enumerazione:-Nessuna compatibilità di versione a altra (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> Il client può aspettarsi che il client esistente verranno interrotto da versioni future. Per ulteriori informazioni, vedere il [compatibilità No](#None) sezione più avanti in questo argomento.      -Compatibilità di versione a altra side-by-side (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Il componente è stato testato per l&quot;utilizzo quando più di una versione dell&quot;assembly viene caricata nello stesso dominio applicazione. In generale, le versioni future possono interrompere la compatibilità. Tuttavia, quando vengono apportate modifiche di rilievo, la versione precedente non viene modificata, ma esiste accanto alla nuova versione. L&quot;esecuzione side-by-side è quello previsto per fare in modo che i client esistenti quando vengono apportate modifiche di rilievo. Per ulteriori informazioni, vedere il [compatibilità Side-by-Side](#SideBySide) sezione più avanti in questo argomento.      -Stabile compatibilità di versione a altra (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Le versioni future non devono interrompere il client e l&quot;esecuzione side-by-side non sono necessari. Tuttavia, se il client viene inavvertitamente interrotto, potrebbe essere possibile utilizzare l&quot;esecuzione side-by-side per risolvere il problema. Per ulteriori informazioni, vedere il [compatibilità stabile](#Standard) sezione.      -Compatibilità di versione a altra di exchange (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Straordinari attenzione per garantire che le versioni future non verranno interrotto il client. Il client deve utilizzare solo questi tipi nella firma di interfacce utilizzate per la comunicazione con gli altri assembly che vengono distribuiti indipendentemente uno da altro. Solo una versione di questi tipi è previsto in un determinato dominio applicazione, il che significa che se un client si interrompe, esecuzione side-by-side non può risolvere il problema di compatibilità. Per ulteriori informazioni, vedere il [la compatibilità dei tipi di Exchange](#Exchange) sezione.       Le sezioni seguenti illustrano ogni livello di garanzia più dettagliatamente.      <a name=&quot;None&quot;></a># # # Non compatibilità il contrassegno di un componente come <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>indica che il provider non garantisce la compatibilità.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> I client devono evitare l&quot;aggiunta di eventuali dipendenze le interfacce esposte. Questo livello di compatibilità è utile per i tipi che sono sperimentale o che sono esposte pubblicamente ma sono destinati solo per i componenti che vengono sempre aggiornati contemporaneamente. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>indica in modo esplicito che questo componente non deve essere utilizzato dai componenti esterni.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      <a name=&quot;SideBySide&quot;></a># # # Side-by-Side compatibilità contrassegnare un componente come <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>indica che il componente è stato testato per l&quot;utilizzo quando più di una versione dell&quot;assembly viene caricata nello stesso dominio applicazione.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Le modifiche di rilievo sono consentite a condizione che sono state apportate all&quot;assembly che contiene il numero di versione maggiore. I componenti che sono associati a una versione precedente dell&quot;assembly dovrebbero continuare a eseguire l&quot;associazione alla versione precedente, e altri componenti possono associare alla nuova versione. È inoltre possibile aggiornare un componente che è dichiarato come <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>modificando radicalmente la versione precedente.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      <a name=&quot;Standard&quot;></a># # # Stabile compatibilità contrassegnare un tipo come <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>indica che il tipo deve rimanere stabile in tutte le versioni.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Tuttavia, è possibile anche per le versioni side-by-side di un tipo stabile a esistere nello stesso dominio dell&quot;applicazione.       I tipi stabili gestiscono una barra elevata compatibilità binaria. Per questo motivo, i provider devono essere evitate modifiche ai tipi stabili. I seguenti tipi di modifiche sono accettabili:: i campi di istanza privata per l&quot;aggiunta o rimozione di campi da un tipo, purché questo gestore non interrompe il formato di serializzazione.      -Modifica di un tipo non serializzabile in un tipo serializzabile. (Tuttavia, un tipo serializzabile non può essere modificato a un tipo non serializzabile.)      -La generazione di nuovo, più eccezioni derivate da un metodo.      -Miglioramento delle prestazioni di un metodo.      -La modifica dell&quot;intervallo di valori restituiti, purché la modifica non influisca negativamente la maggior parte dei client.      -Sta correggendo i bug gravi, se la motivazione aziendale è elevata e il numero di client interessati è basso.       Poiché le nuove versioni dei componenti stabile non è previsto per l&quot;interruzione dei client esistenti, in genere in un dominio applicazione è necessario solo una versione di un componente stabile. Tuttavia, questo non è un requisito, poiché tipi stabili non vengono utilizzati come tipi noti di exchange che concordano tra tutti i componenti. Pertanto, se una nuova versione di un componente stabile interrompe inavvertitamente alcuni componenti e altri componenti richiedono la nuova versione, è possibile correggere il problema caricando sia il componente precedente e nuovo.       <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>fornisce una garanzia di compatibilità di versione maggiore rispetto a <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions></xref:System.Runtime.Versioning.ComponentGuaranteesOptions> È comune predefinito per i componenti di più versioni.       <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>può essere combinato con <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, che indica che il componente non causerà l&quot;interruzione di compatibilità ma che è stato testato per l&quot;utilizzo quando più di una versione viene caricata in un determinato dominio applicazione.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions></xref:System.Runtime.Versioning.ComponentGuaranteesOptions>       Dopo che un tipo o metodo è contrassegnato come <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, può essere aggiornato a <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> Non è possibile effettuare il downgrade a <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      <a name=&quot;Exchange&quot;></a># # # Exchange tipo compatibilità contrassegnare un tipo come <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>fornisce una garanzia di compatibilità di versione maggiore rispetto a <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>e deve essere applicato a tutti i tipi più stabile.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Questi tipi devono essere utilizzati per lo scambio tra componenti indipendentemente generati in tutti i limiti dei componenti sia nel tempo (qualsiasi versione di Common Language Runtime) o qualsiasi versione di un componente o un&quot;applicazione e lo spazio (tra processi, tra CLR in un unico processo, dominio tra applicazioni in un CLR). Se viene apportata una modifica di rilievo a un tipo di exchange, non è possibile risolvere il problema mediante il caricamento di più versioni del tipo.       Tipi di Exchange devono essere modificati solo quando un problema è molto elevata (ad esempio un problema di sicurezza grave) o la probabilità di interruzione è molto bassa (ovvero, se il comportamento è stato già interrotto in modo casuale da codice di stato non hanno influito su). È possibile apportare i seguenti tipi di modifiche a un tipo di scambio:-aggiungere l&quot;ereditarietà di nuove definizioni di interfaccia.      -Aggiungere nuovi metodi privati che implementano i metodi di definizioni di interfaccia appena ereditate.      -Aggiungere nuovi campi statici.      -Aggiungere nuovi metodi statici.      -Aggiungere nuovi metodi di istanza non virtuale.       Nell&quot;esempio vengono considerate modifiche di rilievo e non sono consentiti per i tipi primitivi:-modificando i formati di serializzazione. Serializzazione a tolleranza di versione è obbligatorio.      -Aggiunta o rimozione di campi di istanza privati. Ciò implica il rischio della modifica del formato di serializzazione del tipo e interrompere il codice client che utilizza la reflection.      -La serializzabilità di un tipo di modifica. Un tipo non serializzabile non può essere reso serializzabile e viceversa.      -La generazione di eccezioni diverse da un metodo.      -La modifica dell&quot;intervallo di valori restituiti del metodo, a meno che la definizione del membro genera questa possibilità e indica chiaramente come i client devono gestire i valori sconosciuti.      -La maggior parte dei bug di correzione. I consumer del tipo si basano sul comportamento esistente.       Dopo che un componente, tipo o membro è contrassegnato con la <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>garanzia, non può essere modificata per uno <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>o <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions>       Tipi di exchange sono in genere i tipi di base (ad esempio <xref:System.Int32>e <xref:System.String>in .NET Framework) e le interfacce (ad esempio <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, e <xref:System.IComparable%601>) comunemente utilizzati nelle interfacce pubbliche.</xref:System.IComparable%601> </xref:System.Collections.Generic.IEnumerable%601> </xref:System.Collections.Generic.IList%601> </xref:System.String> </xref:System.Int32>       Tipi di Exchange possono esporre pubblicamente solo altri tipi che sono contrassegnati anche con <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>compatibilità.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> Inoltre, i tipi di exchange non possono dipendere il comportamento delle API di Windows che sono soggetti a modifica.      ## Garanzie di componente: Un riepilogo nella tabella seguente indica come le caratteristiche e utilizzo di un componente influiscono sulla garanzia di compatibilità.      | Caratteristiche componente | Exchange | Stabile | Side-by-Side | None |   |-------------------------------|--------------|------------|--------------------|----------|   | Può essere usato nelle interfacce tra componenti che la versione in modo indipendente. | Y | N | N | N |   | Può essere utilizzato (privatamente da un assembly che le versioni in modo indipendente). | Y | Y | Y | N |   | Possono avere più versioni in un singolo dominio applicazione. | N | Y | Y | Y |   | Apportare modifiche di rilievo | N | N | Y | Y |   | Testato per essere certi che più versioni dell&quot;assembly possono essere caricati contemporaneamente. | N | N | Y | N |   | Possibile apportare le modifiche di rilievo sul posto. | N | N | N | Y |   | Possono effettuare in modo sicuro unificatori modifiche alla gestione. | Y | Y | Y | Y |      # # Applicando l&quot;attributo è possibile applicare il ComponentGuaranteesAttribute a un assembly, un tipo o un membro del tipo. L&quot;applicazione è gerarchica. Pertanto, per impostazione predefinita, la garanzia definita per il <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>proprietà dell&quot;attributo a livello di assembly definisce la garanzia di tutti i tipi nell&quot;assembly e tutti i membri di tali tipi.</xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> Analogamente, se la garanzia è applicata al tipo, per impostazione predefinita si applica anche a ogni membro del tipo.       Questa garanzia ereditata può essere sottoposto a override applicando il ComponentGuaranteesAttribute per i singoli tipi e membri dei tipi. Tuttavia, garantisce che il valore predefinito di eseguire l&quot;override possono solo ridurre il livello di garanzia; essi non possono potenziarlo. Ad esempio, se un assembly è contrassegnato con il <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>garantisce, i tipi e membri non dispongono di compatibilità garanzia e qualsiasi altra garanzia che viene applicata a tipi o membri nell&quot;assembly viene ignorata.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      ## Test della garanzia di <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>proprietà restituisce un membro del <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>enumerazione, è contrassegnato con il <xref:System.FlagsAttribute>attributo.</xref:System.FlagsAttribute> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> Ciò significa che è necessario verificare i flag che si è interessati dalla maschera contrassegni potenzialmente sconosciuti. Ad esempio, nell&quot;esempio seguente verifica se un tipo è contrassegnato come <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>       [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/csharp/t-system.runtime.version_1.cs)][!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/visualbasic/t-system.runtime.version_1.vb) ] nell&quot;esempio seguente verifica se un tipo è contrassegnato come <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>o <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions>         [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/csharp/t-system.runtime.version_2.cs)][!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/visualbasic/t-system.runtime.version_2.vb) ] nell&quot;esempio riportato di seguito viene verificato se un tipo è contrassegnato come <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>(ovvero, né <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>né <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions>         [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/add/codesnippet/csharp/t-system.runtime.version_3.cs)][!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3  ](~/add/codesnippet/visualbasic/t-system.runtime.version_3.vb)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)]

      public sealed class ComponentGuaranteesAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)
  id: '#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)'
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  langs:
  - csharp
  name: ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Versioning
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Runtime.Versioning.ComponentGuaranteesAttribute&quot;> </xref> classe con un valore che indica una libreria, tipo o del membro livello di compatibilità garantito in più versioni."
  remarks: "Quando il <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>viene creata un&quot;istanza di classe, il valore della `guarantees` parametro è assegnato il <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>proprietà.</xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> </xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>"
  syntax:
    content: public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);
    parameters:
    - id: guarantees
      type: System.Runtime.Versioning.ComponentGuaranteesOptions
      description: "Uno dei valori di enumerazione che specifica il livello di compatibilità garantito fra più versioni."
  overload: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  id: Guarantees
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  langs:
  - csharp
  name: Guarantees
  nameWithType: ComponentGuaranteesAttribute.Guarantees
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Versioning
  summary: "Ottiene un valore che indica il livello di compatibilità di una libreria, un tipo o membro del tipo che si estende su più versioni garantito."
  remarks: "Il valore della proprietà garanzie corrisponde alla `guarantees` parametro il <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A>costruttore.</xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A>"
  syntax:
    content: public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }
    return:
      type: System.Runtime.Versioning.ComponentGuaranteesOptions
      description: "Uno dei valori di enumerazione che specifica il livello di compatibilità garantito fra più versioni."
  overload: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
- uid: System.Runtime.Versioning.ComponentGuaranteesOptions
  parent: System.Runtime.Versioning
  isExternal: false
  name: ComponentGuaranteesOptions
  nameWithType: ComponentGuaranteesOptions
  fullName: System.Runtime.Versioning.ComponentGuaranteesOptions
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: Guarantees
  nameWithType: ComponentGuaranteesAttribute.Guarantees
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor*
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: ComponentGuaranteesAttribute
  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees*
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: Guarantees
  nameWithType: ComponentGuaranteesAttribute.Guarantees
