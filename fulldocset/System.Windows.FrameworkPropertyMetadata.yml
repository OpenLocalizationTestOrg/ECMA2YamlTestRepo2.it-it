### YamlMime:ManagedReference
items:
- uid: System.Windows.FrameworkPropertyMetadata
  id: FrameworkPropertyMetadata
  children:
  - System.Windows.FrameworkPropertyMetadata.#ctor
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  - System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  - System.Windows.FrameworkPropertyMetadata.AffectsArrange
  - System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  - System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  - System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  - System.Windows.FrameworkPropertyMetadata.AffectsRender
  - System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  - System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  - System.Windows.FrameworkPropertyMetadata.Inherits
  - System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  - System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  - System.Windows.FrameworkPropertyMetadata.Journal
  - System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  - System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  langs:
  - csharp
  name: FrameworkPropertyMetadata
  nameWithType: FrameworkPropertyMetadata
  fullName: System.Windows.FrameworkPropertyMetadata
  type: Class
  summary: "Segnala o applica i metadati per una proprietà di dipendenza, aggiungendo specificamente le caratteristiche di sistema di proprietà specifiche del framework."
  remarks: "Questa classe deriva da <xref:System.Windows.PropertyMetadata>(tramite <xref:System.Windows.UIPropertyMetadata>).</xref:System.Windows.UIPropertyMetadata> </xref:System.Windows.PropertyMetadata> Per la maggior parte degli scopi di sviluppo a livello di framework applicazione WPF, FrameworkPropertyMetadata è il tipo utilizzato per i metadati di proprietà di dipendenza, piuttosto che i metadati di base tipi <xref:System.Windows.PropertyMetadata>o <xref:System.Windows.UIPropertyMetadata>.</xref:System.Windows.UIPropertyMetadata> </xref:System.Windows.PropertyMetadata> Questo vale sia per le proprietà di dipendenza esistenti e per la maggior parte degli scenari di proprietà di dipendenza personalizzata.       I membri dichiarati da questa classe che integrano la <xref:System.Windows.PropertyMetadata>classe di base includono diverse proprietà booleane che specificano o comportamento del sistema di proprietà a livello di framework WPF, ad esempio l&quot;ereditarietà delle proprietà, l&quot;associazione dati e layout di report.</xref:System.Windows.PropertyMetadata>       Più firme del costruttore per la creazione di un&quot;istanza di FrameworkPropertyMetadata assumono un <xref:System.Windows.FrameworkPropertyMetadataOptions>parametro.</xref:System.Windows.FrameworkPropertyMetadataOptions> Il <xref:System.Windows.FrameworkPropertyMetadataOptions>enumerazione viene utilizzata solo per specificare il comportamento iniziale nel costruttore e non è esposta dopo essere stata costruita FrameworkPropertyMetadata.</xref:System.Windows.FrameworkPropertyMetadataOptions> Da un&quot;istanza costruita, è possibile ottenere o impostare le informazioni corrispondenti tramite varie proprietà che condividono il nome dei valori di enumerazione utilizzato nella chiamata al costruttore.      <a name=&quot;xamlTextUsage_FrameworkPropertyMetadata&quot;></a># # Questa classe non viene utilizzata in genere l&quot;utilizzo di testo XAML [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type. That metadata is cast to FrameworkPropertyMetadata. If the cast returned a valid FrameworkPropertyMetadata, then various FrameworkPropertyMetadata property values are reported through a simple UI (not shown).  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: 'public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata'
  inheritance:
  - System.Object
  - System.Windows.PropertyMetadata
  - System.Windows.UIPropertyMetadata
  implements: []
  inheritedMembers:
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  - System.Windows.UIPropertyMetadata.IsAnimationProhibited
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata()
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> classe."
  remarks: "Questa firma inizializza tutti i valori di FrameworkPropertyMetadata i valori di proprietà predefiniti. <xref:System.Windows.PropertyMetadata.DefaultValue%2A>sarà `null`e i vari <xref:System.Windows.FrameworkPropertyMetadata>proprietà booleane sarà `false`.</xref:System.Windows.FrameworkPropertyMetadata></xref:System.Windows.PropertyMetadata.DefaultValue%2A>"
  syntax:
    content: public FrameworkPropertyMetadata ();
    parameters: []
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> classe con il valore predefinito specificato."
  remarks: "Il tipo di valore fornito per `defaultValue` deve corrispondere o essere correlato al tipo specificato nella registrazione originale della proprietà di dipendenza che verranno applicati i metadati. Mancata corrispondenza tra il tipo di valore di metadati predefinito e il tipo della proprietà di dipendenza applicata a può essere difficile eseguire il debug, in quanto la mancata corrispondenza non è rilevabile durante la compilazione. Il sistema di proprietà non valuta il valore effettivo di una proprietà in fase di esecuzione, pertanto il risultato della mancata corrispondenza di tipo o la proprietà tipo di valore predefinito è un errore di run-time.       Il valore <xref:System.Windows.DependencyProperty.UnsetValue>ha un significato speciale nel sistema di proprietà e non può essere utilizzato come un valore predefinito di proprietà di dipendenza.</xref:System.Windows.DependencyProperty.UnsetValue>"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor1param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Il valore predefinito della proprietà di dipendenza, in genere fornito come valore di un tipo specifico."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>è impostato su <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> classe con l&quot;oggetto specificato <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> callback."
  remarks: ''
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor1paramcallback)]"
  syntax:
    content: public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Un riferimento a un&quot;implementazione del gestore del sistema di proprietà che verrà usato ogni volta che cambia il valore effettivo della proprietà."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> classe con il valore predefinito e le opzioni dei metadati a livello di framework."
  remarks: "Il tipo di valore fornito per `defaultValue` deve corrispondere o essere correlato al tipo specificato nella registrazione originale della proprietà di dipendenza che verranno applicati i metadati. Mancata corrispondenza tra il tipo di valore di metadati predefinito e il tipo della proprietà di dipendenza applicata a può essere difficile eseguire il debug, in quanto la mancata corrispondenza non è rilevabile durante la compilazione. Il sistema di proprietà non valuta il valore effettivo di una proprietà in fase di esecuzione, pertanto il risultato della mancata corrispondenza di tipo o la proprietà tipo di valore predefinito è un errore di run-time.       Il valore <xref:System.Windows.DependencyProperty.UnsetValue>ha un significato speciale nel sistema di proprietà e non può essere utilizzato come un valore predefinito di proprietà di dipendenza.</xref:System.Windows.DependencyProperty.UnsetValue>       I valori contrassegnati come flag impostati nel `flags` parametro verrà impostato il valore booleano di <xref:System.Windows.FrameworkPropertyMetadata>le proprietà corrispondenti che <xref:System.Windows.FrameworkPropertyMetadataOptions>nome flag a `true`.</xref:System.Windows.FrameworkPropertyMetadataOptions> </xref:System.Windows.FrameworkPropertyMetadata> Successivamente, è possibile modificare i valori delle proprietà nei metadati, purché i metadati non sono ancora applicato a un&quot;operazione di sistema di proprietà specifici."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Il valore predefinito della proprietà di dipendenza, in genere fornito come valore di un tipo specifico."
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "I flag di opzione di metadati (una combinazione di <xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;> </xref> valori). Queste opzioni specificano le caratteristiche della proprietà di dipendenza che interagiscono con i sistemi, ad esempio associazione dati o layout."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>è impostato su <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> classe con il valore predefinito e specificare <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> callback."
  remarks: "Il tipo di valore fornito per `defaultValue` deve corrispondere o essere correlato al tipo specificato nella registrazione originale della proprietà di dipendenza che verranno applicati i metadati. Mancata corrispondenza tra il tipo di valore di metadati predefinito e il tipo della proprietà di dipendenza applicata a può essere difficile eseguire il debug, in quanto la mancata corrispondenza non è rilevabile durante la compilazione. Il sistema di proprietà non valuta il valore effettivo di una proprietà in fase di esecuzione, pertanto il risultato della mancata corrispondenza di tipo o la proprietà tipo di valore predefinito è un errore di run-time.       Il valore <xref:System.Windows.DependencyProperty.UnsetValue>ha un significato speciale nel sistema di proprietà e non può essere utilizzato come un valore predefinito di proprietà di dipendenza.</xref:System.Windows.DependencyProperty.UnsetValue>"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor2param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Il valore predefinito della proprietà di dipendenza, in genere fornito come valore di un tipo specifico."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Un riferimento a un&quot;implementazione del gestore del sistema di proprietà che verrà usato ogni volta che cambia il valore effettivo della proprietà."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>è impostato su <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> classe con il callback specificati."
  remarks: "Questa implementazione chiama un inizializzatore di base e quindi aggiunge la `coerceValueCallback` impostando la proprietà sull&quot;istanza di base."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_pcc_cvc)]"
  syntax:
    content: public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Un riferimento a un&quot;implementazione del gestore del sistema di proprietà che verrà usato ogni volta che cambia il valore effettivo della proprietà."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Un riferimento a un&quot;implementazione del gestore verrà chiamato ogni volta che il sistema di proprietà chiama <xref:System.Windows.DependencyObject.CoerceValue*>per questa proprietà di dipendenza.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> classe con le opzioni di metadati predefinito valore e framework e specificato <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> callback."
  remarks: "Il tipo di valore fornito per `defaultValue` deve corrispondere o essere correlato al tipo specificato nella registrazione originale della proprietà di dipendenza che verranno applicati i metadati. Mancata corrispondenza tra il tipo di valore di metadati predefinito e il tipo della proprietà di dipendenza applicata a può essere difficile eseguire il debug, in quanto la mancata corrispondenza non è rilevabile durante la compilazione. Il sistema di proprietà non valuta il valore effettivo di una proprietà in fase di esecuzione, pertanto il risultato della mancata corrispondenza di tipo o la proprietà tipo di valore predefinito è un errore di run-time.       Il valore <xref:System.Windows.DependencyProperty.UnsetValue>ha un significato speciale nel sistema di proprietà e non può essere utilizzato come un valore predefinito di proprietà di dipendenza.</xref:System.Windows.DependencyProperty.UnsetValue>       I valori contrassegnati come flag impostati nel `flags` parametro verrà impostato il valore booleano di <xref:System.Windows.FrameworkPropertyMetadata>le proprietà corrispondenti che <xref:System.Windows.FrameworkPropertyMetadataOptions>nome flag a `true`.</xref:System.Windows.FrameworkPropertyMetadataOptions> </xref:System.Windows.FrameworkPropertyMetadata> È comunque possibile modificare i valori delle proprietà nei metadati, purché i metadati non sono ancora applicato a un&quot;operazione di sistema di proprietà specifici."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Il valore predefinito della proprietà di dipendenza, in genere fornito come valore di un tipo specifico."
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "I flag di opzione di metadati (una combinazione di <xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;> </xref> valori). Queste opzioni specificano le caratteristiche della proprietà di dipendenza che interagiscono con i sistemi, ad esempio associazione dati o layout."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Un riferimento a un&quot;implementazione del gestore del sistema di proprietà che verrà usato ogni volta che cambia il valore effettivo della proprietà."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>è impostato su <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> classe con il valore predefinito e il callback specificati."
  remarks: "Il tipo di valore fornito per `defaultValue` deve corrispondere o essere correlato al tipo specificato nella registrazione originale della proprietà di dipendenza che verranno applicati i metadati. Mancata corrispondenza tra il tipo di valore di metadati predefinito e il tipo della proprietà di dipendenza applicata a può essere difficile eseguire il debug, in quanto la mancata corrispondenza non è rilevabile durante la compilazione. Il sistema di proprietà non valuta il valore effettivo di una proprietà in fase di esecuzione, pertanto il risultato della mancata corrispondenza di tipo o la proprietà tipo di valore predefinito è un errore di run-time.       Il valore <xref:System.Windows.DependencyProperty.UnsetValue>ha un significato speciale nel sistema di proprietà e non può essere utilizzato come un valore predefinito di proprietà di dipendenza.</xref:System.Windows.DependencyProperty.UnsetValue>"
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor3param)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Il valore predefinito della proprietà di dipendenza, in genere fornito come un tipo specifico."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Un riferimento a un&quot;implementazione del gestore del sistema di proprietà che verrà usato ogni volta che cambia il valore effettivo della proprietà."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Un riferimento a un&quot;implementazione del gestore che verrà chiamato ogni volta che il sistema di proprietà chiama <xref:System.Windows.DependencyObject.CoerceValue*>per questa proprietà di dipendenza.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>è impostato su <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> classe con il valore predefinito fornito e opzioni di metadati di framework e i callback specificati."
  remarks: "Il tipo di valore fornito per `defaultValue` deve corrispondere o essere correlato al tipo specificato nella registrazione originale della proprietà di dipendenza che verranno applicati i metadati. Mancata corrispondenza tra il tipo di valore di metadati predefinito e il tipo della proprietà di dipendenza applicata a può essere difficile eseguire il debug, in quanto la mancata corrispondenza non è rilevabile durante la compilazione. Il sistema di proprietà non valuta il valore effettivo di una proprietà in fase di esecuzione, pertanto il risultato della mancata corrispondenza di tipo o la proprietà tipo di valore predefinito è un errore di run-time.       Il valore <xref:System.Windows.DependencyProperty.UnsetValue>ha un significato speciale nel sistema di proprietà e non può essere utilizzato come un valore predefinito di proprietà di dipendenza.</xref:System.Windows.DependencyProperty.UnsetValue>       I valori contrassegnati come flag impostati nel `flags` parametro verrà impostato il valore booleano di <xref:System.Windows.FrameworkPropertyMetadata>le proprietà corrispondenti che <xref:System.Windows.FrameworkPropertyMetadataOptions>nome flag a `true`.</xref:System.Windows.FrameworkPropertyMetadataOptions> </xref:System.Windows.FrameworkPropertyMetadata> È comunque possibile modificare i valori delle proprietà nei metadati, purché i metadati non sono ancora applicato a un&quot;operazione di sistema di proprietà specifici."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Il valore predefinito della proprietà di dipendenza, in genere fornito come un tipo specifico."
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "I flag di opzione di metadati (una combinazione di <xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;> </xref> valori). Queste opzioni specificano le caratteristiche della proprietà di dipendenza che interagiscono con i sistemi, ad esempio associazione dati o layout."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Un riferimento a un&quot;implementazione del gestore del sistema di proprietà che verrà usato ogni volta che cambia il valore effettivo della proprietà."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Un riferimento a un&quot;implementazione del gestore che verrà chiamato ogni volta che il sistema di proprietà chiama <xref:System.Windows.DependencyObject.CoerceValue*>in base a questa proprietà.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>è impostato su <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> classe con le opzioni di metadati predefinito valore e framework, di callback specificato e un valore booleano che può essere usato per impedire l&quot;animazione della proprietà."
  remarks: "Il tipo di valore fornito per `defaultValue` deve corrispondere o essere correlato al tipo specificato nella registrazione originale della proprietà di dipendenza che verranno applicati i metadati. Mancata corrispondenza tra il tipo di valore di metadati predefinito e il tipo della proprietà di dipendenza applicata a può essere difficile eseguire il debug, in quanto la mancata corrispondenza non è rilevabile durante la compilazione. Il sistema di proprietà non valuta il valore effettivo di una proprietà in fase di esecuzione, pertanto il risultato della mancata corrispondenza di tipo o la proprietà tipo di valore predefinito è un errore di run-time.       Il valore <xref:System.Windows.DependencyProperty.UnsetValue>ha un significato speciale nel sistema di proprietà e non può essere utilizzato come un valore predefinito di proprietà di dipendenza.</xref:System.Windows.DependencyProperty.UnsetValue>       Il `isAnimationProhibited` parametro imposta il valore iniziale della <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>proprietà dichiarata dalla classe base immediata <xref:System.Windows.UIPropertyMetadata>classe.</xref:System.Windows.UIPropertyMetadata> </xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>       I valori contrassegnati come flag impostati nel `flags` parametro verrà impostato il valore booleano di <xref:System.Windows.FrameworkPropertyMetadata>le proprietà corrispondenti che <xref:System.Windows.FrameworkPropertyMetadataOptions>nome flag a `true`.</xref:System.Windows.FrameworkPropertyMetadataOptions> </xref:System.Windows.FrameworkPropertyMetadata> È comunque possibile modificare i valori delle proprietà nei metadati, purché i metadati non sono ancora applicato a un&quot;operazione di sistema di proprietà specifici."
  example:
  - "The following example calls this constructor signature:  \n  \n [!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Il valore predefinito della proprietà di dipendenza, in genere fornito come un tipo specifico."
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "I flag di opzione di metadati (una combinazione di <xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;> </xref> valori). Queste opzioni specificano le caratteristiche della proprietà di dipendenza che interagiscono con i sistemi, ad esempio associazione dati o layout."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Un riferimento a un&quot;implementazione del gestore del sistema di proprietà che verrà usato ogni volta che cambia il valore effettivo della proprietà."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Un riferimento a un&quot;implementazione del gestore che verrà chiamato ogni volta che il sistema di proprietà chiama <xref:System.Windows.DependencyObject.CoerceValue*>su questa proprietà di dipendenza.</xref:System.Windows.DependencyObject.CoerceValue*>"
    - id: isAnimationProhibited
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per impedire l&quot;animazione della proprietà che applicati i metadati per il sistema di proprietà. Tali proprietà genererà un&quot;eccezione in fase di esecuzione provenienti dal sistema della proprietà se vengono tentate animazioni di essi. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>per consentire l&quot;animazione della proprietà. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>è impostato su <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  id: '#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)'
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.FrameworkPropertyMetadata&quot;> </xref> classe con i metadati di framework e valore predefinito delle opzioni, callback specificati, un valore booleano che può essere usato per impedire l&quot;animazione della proprietà e valore predefinito di trigger di aggiornamento di data binding."
  remarks: "Il tipo di valore fornito per `defaultValue` deve corrispondere o essere correlato al tipo specificato nella registrazione originale della proprietà di dipendenza che verranno applicati i metadati. Mancata corrispondenza tra il tipo di valore di metadati predefinito e il tipo della proprietà di dipendenza applicata a può essere difficile eseguire il debug, in quanto la mancata corrispondenza non è rilevabile durante la compilazione. Il sistema di proprietà non valuta il valore effettivo di una proprietà in fase di esecuzione, pertanto il risultato della mancata corrispondenza di tipo o la proprietà tipo di valore predefinito è un errore di run-time.       Il valore <xref:System.Windows.DependencyProperty.UnsetValue>ha un significato speciale nel sistema di proprietà e non può essere utilizzato come un valore predefinito di proprietà di dipendenza.</xref:System.Windows.DependencyProperty.UnsetValue>       Il `isAnimationProhibited` parametro imposta il valore iniziale della <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>proprietà dichiarata dalla classe base immediata <xref:System.Windows.UIPropertyMetadata>classe.</xref:System.Windows.UIPropertyMetadata> </xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>       Per ulteriori informazioni sul comportamento di origine di aggiornamento per i binding, vedere [Panoramica del Data Binding](~/add/includes/ajax-current-ext-md.md).       I valori contrassegnati come flag impostati nel `flags` parametro verrà impostato il valore booleano di <xref:System.Windows.FrameworkPropertyMetadata>le proprietà corrispondenti che <xref:System.Windows.FrameworkPropertyMetadataOptions>nome flag a `true`.</xref:System.Windows.FrameworkPropertyMetadataOptions> </xref:System.Windows.FrameworkPropertyMetadata> È comunque possibile modificare i valori delle proprietà nei metadati, purché i metadati non sono ancora applicato a un&quot;operazione di sistema di proprietà specifici."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initfpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initfpm)]  \n[!code-cs[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]"
  syntax:
    content: public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Il valore predefinito della proprietà di dipendenza, in genere fornito come un tipo specifico."
    - id: flags
      type: System.Windows.FrameworkPropertyMetadataOptions
      description: "I flag di opzione di metadati (una combinazione di <xref href=&quot;System.Windows.FrameworkPropertyMetadataOptions&quot;> </xref> valori). Queste opzioni specificano le caratteristiche della proprietà di dipendenza che interagiscono con i sistemi, ad esempio associazione dati o layout."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Un riferimento a un&quot;implementazione del gestore del sistema di proprietà che verrà usato ogni volta che cambia il valore effettivo della proprietà."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Un riferimento a un&quot;implementazione del gestore che verrà chiamato ogni volta che il sistema di proprietà chiama <xref:System.Windows.DependencyObject.CoerceValue*>in base a questa proprietà.</xref:System.Windows.DependencyObject.CoerceValue*>"
    - id: isAnimationProhibited
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per impedire l&quot;animazione della proprietà che applicati i metadati per il sistema di proprietà. Tali proprietà genererà un&quot;eccezione in fase di esecuzione provenienti dal sistema della proprietà se vengono tentate animazioni di essi. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: defaultUpdateSourceTrigger
      type: System.Windows.Data.UpdateSourceTrigger
      description: "Il <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> da utilizzare quando i binding per questa proprietà vengono applicati con i relativi <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> impostato su <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>è impostato su <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  id: AffectsArrange
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se una proprietà di dipendenza può avere effetto sul passaggio di disposizione durante le operazioni del motore di layout."
  remarks: "<xref:System.Windows.FrameworkElement>e <xref:System.Windows.FrameworkContentElement>includono un&quot;implementazione di <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>che esegue il monitoraggio delle modifiche del valore effettivo di tutte le proprietà di dipendenza esistenti su un elemento.</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> </xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement> Come parte di quella logica, impostare le proprietà di dipendenza che modificano il valore effettivo e hanno metadati con AffectsArrange `true` verrà avviata una richiesta differita per invalidare gli oggetti visivi per quell&quot;elemento (una chiamata a <xref:System.Windows.UIElement.InvalidateArrange%2A>).</xref:System.Windows.UIElement.InvalidateArrange%2A> Poiché questa implementazione a livello di framework WPF è già attiva, in genere non è necessario cercare le proprietà di dipendenza con AffectsArrange a meno che non si stia sostituendo o modificando il comportamento di layout a livello di framework WPF.       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A>implementazioni potrebbero scegliere di avere un comportamento simile per le modifiche alle proprietà di dipendenza in cui AffectsArrange è `true`.</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>       Proprietà nelle classi derivate di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati sono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_AffectsArrange&quot;></a># # XAML testo utilizzo membri di questa classe vengono utilizzati in genere non viene [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsArrange { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la proprietà di dipendenza in cui questi metadati può influire sul passaggio di disposizione. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.AffectsArrange*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  id: AffectsMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se una proprietà di dipendenza può avere effetto sul passaggio di misurazione durante le operazioni del motore di layout."
  remarks: "<xref:System.Windows.FrameworkElement>e <xref:System.Windows.FrameworkContentElement>includono un&quot;implementazione di <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>che esegue il monitoraggio delle modifiche del valore effettivo di tutte le proprietà di dipendenza esistenti su un elemento.</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> </xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement> Come parte di quella logica, impostare le proprietà di dipendenza che modificano il valore effettivo e hanno metadati con AffectsMeasure `true` verrà avviata una richiesta differita per invalidare gli oggetti visivi per quell&quot;elemento. Poiché questa implementazione a livello di framework WPF è già attiva, in genere non è necessario cercare le proprietà di dipendenza con AffectsMeasure a meno che non si stia sostituendo o modificando il comportamento di layout a livello di framework WPF.       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A>implementazioni potrebbero scegliere di avere un comportamento simile per le modifiche alle proprietà di dipendenza in cui AffectsMeasure è `true`.</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>       Proprietà nelle classi derivate di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati sono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_AffectsMeasure&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsMeasure { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la proprietà di dipendenza in cui questi metadati può influire sul passaggio di misurazione. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  id: AffectsParentArrange
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se una proprietà di dipendenza può avere effetto sul passaggio di disposizione del layout dell&quot;elemento padre durante le operazioni del motore di layout."
  remarks: "<xref:System.Windows.FrameworkElement>e <xref:System.Windows.FrameworkContentElement>includono un&quot;implementazione di <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>che esegue il monitoraggio delle modifiche del valore effettivo di tutte le proprietà di dipendenza esistenti su un elemento.</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> </xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement> Come parte di quella logica, impostare le proprietà di dipendenza che modificano il valore effettivo e hanno metadati con AffectsParentArrange `true` verrà avviata una richiesta differita per invalidare gli oggetti visivi per l&quot;elemento padre.       In genere, non è necessaria per segnalare le modifiche di un <xref:System.Windows.FrameworkElement>proprietà per un elemento padre utilizzando AffectsParentArrange perché l&quot;elemento stesso ha già un proprio <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>come `true`.</xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> </xref:System.Windows.FrameworkElement> In genere sufficiente, perché le modifiche nell&quot;elemento figlio iniziano in genere un elemento padre disposizione quando appropriato. AffectsParentArrange a volte viene utilizzato per una <xref:System.Windows.FrameworkContentElement>classe derivata</xref:System.Windows.FrameworkContentElement> In questo caso, l&quot;elemento figlio imposta una proprietà, ma un <xref:System.Windows.FrameworkContentElement>classe derivata non controlla il rendering.</xref:System.Windows.FrameworkContentElement> Il rendering è gestito da un <xref:System.Windows.FrameworkElement>elemento padre che funge da host del contenuto.</xref:System.Windows.FrameworkElement> Ad esempio, una modifica al valore del <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName>proprietà associata da un elemento figlio invalida disposizione del padre, perché la posizione dell&quot;elemento figlio dell&quot;elemento padre deve essere modificata.</xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> Pertanto, il <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName>proprietà associata ha metadati dove AffectsParentArrange è `true`.</xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=fullName> Un altro esempio è <xref:System.Windows.Controls.Control.Padding%2A>; Quando questa proprietà viene modificata, l&quot;elemento padre potrebbe modificare il posizionamento dell&quot;elemento figlio, a seconda dello spazio disponibile.</xref:System.Windows.Controls.Control.Padding%2A>       Poiché questa implementazione a livello di framework WPF è già attiva, in genere non è necessario cercare le proprietà di dipendenza con AffectsParentArrange a meno che non si stia sostituendo o modificando il comportamento di layout a livello di framework WPF.       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A>implementazioni potrebbero scegliere di avere un comportamento simile per le modifiche alle proprietà di dipendenza in cui AffectsParentArrange è `true`.</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>       Le proprietà per qualsiasi classe derivata di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati sono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_AffectsParentArrange&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool AffectsParentArrange { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la proprietà di dipendenza in cui questi metadati può influire sul passaggio di disposizione in modo specifico nell&quot;elemento padre. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  id: AffectsParentMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se una proprietà di dipendenza può avere effetto sul passaggio di misurazione del layout dell&quot;elemento padre durante le operazioni del motore di layout."
  remarks: "<xref:System.Windows.FrameworkElement>e <xref:System.Windows.FrameworkContentElement>includono un&quot;implementazione di <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>che esegue il monitoraggio delle modifiche del valore effettivo di tutte le proprietà di dipendenza esistenti su un elemento.</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> </xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement> Come parte di quella logica, impostare le proprietà di dipendenza che modificano il valore effettivo e hanno metadati con AffectsParentMeasure `true` verrà avviata una richiesta differita per invalidare gli oggetti visivi per l&quot;elemento padre. Poiché questa implementazione a livello di framework WPF è già attiva, in genere non è necessario cercare le proprietà di dipendenza con AffectsParentMeasure a meno che non si stia sostituendo o modificando il comportamento di layout a livello di framework WPF.       In genere, non è necessaria per segnalare le modifiche di un <xref:System.Windows.FrameworkElement>proprietà per un elemento padre utilizzando AffectsParentMeasure perché l&quot;elemento stesso ha già un proprio <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>come `true`.</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement> Che è in genere sufficiente, perché le modifiche nell&quot;elemento figlio iniziano in genere un passaggio di misurazione padre quando appropriato. AffectsParentMeasure a volte viene utilizzato per una <xref:System.Windows.FrameworkContentElement>classe derivata</xref:System.Windows.FrameworkContentElement> In questo caso, l&quot;elemento figlio imposta una proprietà, ma un <xref:System.Windows.FrameworkContentElement>classe derivata non controlla il rendering.</xref:System.Windows.FrameworkContentElement> Il rendering è gestito da un <xref:System.Windows.FrameworkElement>elemento padre che funge da host del contenuto.</xref:System.Windows.FrameworkElement> Ad esempio, una modifica al valore del <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName>proprietà da un elemento figlio invalida misura dell&quot;elemento padre, perché lo spazio relativo di paragrafi potrebbe modificare e aumentare o diminuire le dimensioni dell&quot;host del contenuto.</xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName> Pertanto, il <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName>proprietà dispone di metadati in cui AffectsParentMeasure `true`.</xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=fullName>       Elementi host del contenuto anche frequentemente cercano modifiche nelle proprietà di dipendenza in cui è AffectsParentMeasure `true`, come parte della logica di rendering di host del contenuto. Ad esempio, il <xref:System.Windows.Controls.TextBox>elemento deve rispondere a determinate modifiche all&quot;interno del testo che potrebbero richiedere che il rettangolo di selezione del <xref:System.Windows.Controls.TextBox>stesso essere modificato.</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.TextBox>       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A>implementazioni potrebbero scegliere di avere un comportamento simile per le modifiche alle proprietà di dipendenza in cui AffectsParentMeasure è `true`.</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>       Le proprietà per qualsiasi classe derivata di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati sono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_AffectsParentMeasure&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool AffectsParentMeasure { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la proprietà di dipendenza in cui questi metadati può influire sul passaggio di misurazione in modo specifico nell&quot;elemento padre. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender
  id: AffectsRender
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsRender
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se una proprietà di dipendenza può influire sul layout generale in modo che non influenza in modo specifico la disposizione o la misurazione, ma che richiederebbe un nuovo disegno."
  remarks: "<xref:System.Windows.FrameworkElement>e <xref:System.Windows.FrameworkContentElement>includono un&quot;implementazione di <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>che esegue il monitoraggio delle modifiche del valore effettivo di tutte le proprietà di dipendenza esistenti su un elemento.</xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> </xref:System.Windows.FrameworkContentElement></xref:System.Windows.FrameworkElement> Come parte di quella logica, impostare le proprietà di dipendenza che modificano il valore effettivo e hanno metadati con AffectsRender `true` verrà avviata una richiesta differita per invalidare gli oggetti visivi per quell&quot;elemento. Poiché questa implementazione a livello di framework WPF è già attiva, in genere non è necessario cercare le proprietà di dipendenza con AffectsRender a meno che non si stia sostituendo o modificando il comportamento di layout a livello di framework WPF.       Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A>implementazioni potrebbero scegliere di avere un comportamento simile per le modifiche alle proprietà di dipendenza in cui AffectsRender è `true`.</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>       Le proprietà per qualsiasi classe derivata di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati sono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_AffectsRender&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool AffectsRender { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la proprietà di dipendenza per cui esistono il questi metadati influire sul rendering. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.AffectsRender*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  id: BindsTwoWayByDefault
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
  fullName: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se la proprietà esegue l&quot;associazione bidirezionale per impostazione predefinita."
  remarks: "In assenza di questa proprietà sia `true`, gli aggiornamenti dell&quot;associazione sono unidirezionali per impostazione predefinita, in base al comportamento predefinito del <xref:System.Windows.Data.Binding>costruttori o equivalente [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] sintassi.</xref:System.Windows.Data.Binding>       Negli elementi esistenti, si troverà in genere questa proprietà è impostata su `true` nei metadati per le proprietà di dipendenza che segnalano lo stato e modificabili dall&quot;utente, ad esempio <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName>.</xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=fullName>       Questa proprietà restituisce solo le caratteristiche di aggiornamento di associazione predefinito della proprietà di dipendenza in generale. Qualsiasi associazione impostata su questa proprietà su un&quot;istanza locale è possibile impostare il <xref:System.Windows.Data.Binding.Mode%2A>proprietà dell&quot;associazione e modificare il valore predefinito.</xref:System.Windows.Data.Binding.Mode%2A>       Le proprietà per qualsiasi classe derivata di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati sono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_BindsTwoWayByDefault&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool BindsTwoWayByDefault { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la proprietà di dipendenza per cui esistono il questi metadati esegue l&quot;associazione bidirezionale per impostazione predefinita. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  id: DefaultUpdateSourceTrigger
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  fullName: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta il valore predefinito per <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> da utilizzare quando i binding per la proprietà con i metadati vengono applicati, che sono loro <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> impostato su <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>."
  remarks: "Proprietà nelle classi derivate di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati sono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_DefaultUpdateSourceTrigger&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceTrigger
      description: "Valore dell&quot;enumerazione, diverso da <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Questa proprietà è impostata su <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>; il valore impostato divenga un&quot;impostazione predefinita, quando richiesto dalle associazioni."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.Inherits
  id: Inherits
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
  fullName: System.Windows.FrameworkPropertyMetadata.Inherits
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se il valore della proprietà di dipendenza è ereditabile."
  remarks: "Ereditarietà del valore di proprietà è una funzionalità del [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] il sistema di proprietà a livello di framework WPF, in base al quale alcune proprietà di dipendenza può essere locale impostato su un elemento in prossimità della radice di un [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] elemento della struttura ad albero e quindi chiedere loro valore ereditato da tutti gli elementi all&quot;interno dell&quot;albero logico degli elementi figlio che dispone anche di tale proprietà. Ereditarietà del valore di proprietà non è abilitato per impostazione predefinita e abilitarlo hanno alcune implicazioni sulle prestazioni. Per informazioni dettagliate, vedere [ereditarietà del valore di proprietà](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Anche se potrebbe sembrare che ereditarietà del valore di proprietà funziona per le proprietà di dipendenza non associata, il comportamento di ereditarietà per una proprietà non associata tramite determinati reparti oggetto nell&quot;albero della fase di esecuzione sarà indefinito. Utilizzare sempre <xref:System.Windows.DependencyProperty.RegisterAttached%2A>per registrare le proprietà in cui si specifica Inherits nei metadati.</xref:System.Windows.DependencyProperty.RegisterAttached%2A>       Proprietà nelle classi derivate di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati sono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_Inherits&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool Inherits { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il valore della proprietà è ereditabile; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.Inherits*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  id: IsDataBindingAllowed
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
  fullName: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene un valore che indica se l&quot;associazione di dati è supportata per la proprietà di dipendenza."
  remarks: "Questa proprietà indica `false` per uno dei due possibili condizioni: l&quot;associazione dati per una proprietà di dipendenza non è consentita perché la proprietà di dipendenza è di sola lettura (come indicato nell&quot;identificatore della proprietà di dipendenza, non nei metadati), il valore di un&quot;altra proprietà di metadati, o <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, è impostato su `true` nei metadati.</xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> Questa proprietà viene esposta per praticità, in modo che i chiamanti non è necessario verificare entrambi <xref:System.Windows.DependencyProperty.ReadOnly%2A>e <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> </xref:System.Windows.DependencyProperty.ReadOnly%2A>       Se si sta tentando di creare i metadati che specifica che una proprietà di lettura/scrittura in caso contrario non deve supportare l&quot;associazione dati, specificare il flag <xref:System.Windows.FrameworkPropertyMetadataOptions>(si noti la leggera differenza di convenzione di denominazione invece <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> </xref:System.Windows.FrameworkPropertyMetadataOptions>      <a name=&quot;xamlTextUsage_IsDataBindingAllowed&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  example:
  - "The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a \"metadata browser\".  \n  \n [!code-cs[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]\n [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  \n[!code-cs[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/csharp/PropertySystemEsoterics/XAMLAPP/page2.xaml.cs#fpmproperties)]\n[!code-vb[PropertySystemEsoterics#FPMProperties](~/add/codesnippet/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]"
  syntax:
    content: public bool IsDataBindingAllowed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il data binding è supportato nella proprietà di dipendenza a cui si applicano questi metadati; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  id: IsNotDataBindable
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
  fullName: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se la proprietà di dipendenza supporta il data binding."
  remarks: "Si noti che questa proprietà di metadati è impostata su `true` in particolare per le proprietà che non devono supportare l&quot;associazione di dati, nonostante siano di proprietà di lettura / scrittura. È previsto che nella maggior parte dei casi in cui viene dichiarata una proprietà di dipendenza, associazione dati viene considerata, perché l&quot;associazione dati è uno degli scenari chiave in cui una proprietà di dipendenza è utile. A differenza di <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, questo non modifica soltanto un valore predefinito che può essere modificato successivamente in un&quot;associazione specifica.</xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A> Impostazione di questa proprietà `true` nei metadati per una proprietà di dipendenza dei metadati disabiliterà tutte le associazioni dell&quot;applicazione i valori tramite espressioni a tale proprietà di dipendenza.       Le proprietà di dipendenza di sola lettura non supportano l&quot;associazione dati (perché non hanno alcuna funzione set che è possibile applicare i valori modificati), ma vengono comunque report `false` per IsNotDataBindable. In questo modo le proprietà che corrispondono a un <xref:System.Windows.FrameworkPropertyMetadataOptions>valori riporteranno con i metadati come è stata effettivamente stabilito, anziché reporting sempre il comportamento del risultato finale che la denominazione della proprietà potrebbe implicare.</xref:System.Windows.FrameworkPropertyMetadataOptions> Per determinare se una proprietà di dipendenza consente l&quot;associazione di dati, è consigliabile controllare <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>invece.</xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>è utile per la verifica di <xref:System.Windows.DependencyProperty.ReadOnly%2A>e IsNotDataBindable come una singola operazione, producendo il risultato previsto.</xref:System.Windows.DependencyProperty.ReadOnly%2A></xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>       Proprietà nelle classi derivate di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati sono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_IsNotDataBindable&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool IsNotDataBindable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la proprietà non supporta l&quot;associazione dati. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.Journal
  id: Journal
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
  fullName: System.Windows.FrameworkPropertyMetadata.Journal
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se questa proprietà contiene informazioni di inserimento nel journal che le applicazioni possono o devono archiviare come parte di un&quot;implementazione di inserimento nel journal."
  remarks: "Proprietà nelle classi derivate di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati sono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_Journal&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool Journal { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;inserimento nel journal deve essere eseguito nella proprietà di dipendenza che vengono applicati i metadati. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.Journal*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Abilita un merge dei metadati di origine con i metadati di base."
  remarks: "Questo metodo viene utilizzato internamente durante l&quot;override di metadati."
  syntax:
    content: protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "Metadati di base da unire."
    - id: dp
      type: System.Windows.DependencyProperty
      description: "La proprietà di dipendenza per cui vengono applicati metadati."
  overload: System.Windows.FrameworkPropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Chiamata eseguita quando i metadati applicati a una proprietà, che indica che i metadati sono sealed."
  remarks: "Qualsiasi mutabilità della struttura di dati di un <xref:System.Windows.FrameworkPropertyMetadata>istanza deve essere contrassegnata come non modificabile quando questo metodo viene richiamato.</xref:System.Windows.FrameworkPropertyMetadata>"
  syntax:
    content: protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "La proprietà di dipendenza a cui sono stati applicati i metadati."
    - id: targetType
      type: System.Type
      description: "Il tipo associato a questi metadati, se si tratta di metadati specifici del tipo. Se si tratta di metadati predefinito, questo valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  id: OverridesInheritanceBehavior
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
  fullName: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se la valutazione dell&quot;ereditarietà del valore proprietà deve estendersi attraverso determinati limiti di contenuto nell&quot;albero logico degli elementi."
  remarks: "Questi metadati indica una modifica raramente applicata al comportamento di ereditarietà di proprietà valore attraverso i limiti degli elementi figlio dell&quot;elemento padre speciale. L&quot;esempio canonico di tale limite è il contenuto di un <xref:System.Windows.Controls.Frame>, dove il <xref:System.Windows.Controls.Frame>contenuto potrebbe essere ricaricato indipendentemente dall&quot;esistenza di <xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame> </xref:System.Windows.Controls.Frame> </xref:System.Windows.Controls.Frame> Il comportamento del sistema di proprietà desiderato è che ereditarietà del valore di proprietà non deve attraversare il contenuto del <xref:System.Windows.Controls.Frame>, perché questi contenuti potrebbero essere elementi che l&quot;applicazione che ospita il frame non possiede o controlla.</xref:System.Windows.Controls.Frame> Specificare i metadati con OverridesInheritanceBehavior impostato su `true`, specificando anche <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>come `true`, causerà la proprietà in cui i metadati sono applicati sarà ereditabile anche attraverso il <xref:System.Windows.Controls.Frame>limite o limiti simili.</xref:System.Windows.Controls.Frame> </xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>       Proprietà nelle classi derivate di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati sono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_OverridesInheritanceBehavior&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool OverridesInheritanceBehavior { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;ereditarietà del valore di proprietà deve estendersi attraverso determinati limiti di contenuto. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  id: SubPropertiesDoNotAffectRender
  parent: System.Windows.FrameworkPropertyMetadata
  langs:
  - csharp
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  fullName: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se le sottoproprietà della proprietà di dipendenza non influiscono sul rendering dell&quot;oggetto contenitore."
  remarks: "Questa opzione di metadati è pertinente per le proprietà di dipendenza che sono tipi di riferimento, in cui tale tipo ha i valori delle proprietà di un proprio. In genere, la logica del sistema di layout è presupporre che qualsiasi proprietà di dipendenza con sottoproprietà potenzialmente avranno effetto su layout, perché il controllo di tutte le sottoproprietà per le modifiche è più tempo rispetto al effettivamente in esecuzione un&quot;altra passaggio di rendering. Impostazione dell&quot;opzione `true` è utile per ottimizzare le prestazioni dell&quot;implementazione di sistema di layout a livello di framework WPF.       Proprietà nelle classi derivate di <xref:System.Windows.PropertyMetadata>sono in genere definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata> Si tratta pertanto può essere modificate dopo l&quot;inizializzazione dell&quot;istanza. Tuttavia, dopo che i metadati vengono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e proprietà che trasmettono le specifiche dei metadati ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare questa proprietà dopo <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>      <a name=&quot;xamlTextUsage_SubPropertiesDoNotAffectRender&quot;></a># # XAML testo utilizzo membri di questa classe non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public bool SubPropertiesDoNotAffectRender { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se le modifiche ai valori delle sottoproprietà non influiscono sul rendering modificato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "I metadati sono già stati applicati a un&quot;operazione di proprietà di dipendenza, in modo che i metadati sono sealed e non è possibile impostare le proprietà dei metadati."
  platform:
  - net462
references:
- uid: System.Windows.UIPropertyMetadata
  isExternal: false
  name: System.Windows.UIPropertyMetadata
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.FrameworkPropertyMetadata.#ctor
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata()
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata()
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata()
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions)
- uid: System.Windows.FrameworkPropertyMetadataOptions
  parent: System.Windows
  isExternal: false
  name: FrameworkPropertyMetadataOptions
  nameWithType: FrameworkPropertyMetadataOptions
  fullName: System.Windows.FrameworkPropertyMetadataOptions
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
  fullName: System.Windows.FrameworkPropertyMetadata.FrameworkPropertyMetadata(Object,FrameworkPropertyMetadataOptions,PropertyChangedCallback,CoerceValueCallback,Boolean,UpdateSourceTrigger)
- uid: System.Windows.Data.UpdateSourceTrigger
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: UpdateSourceTrigger
  fullName: System.Windows.Data.UpdateSourceTrigger
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
  fullName: System.Windows.FrameworkPropertyMetadata.AffectsRender
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
  fullName: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
  fullName: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
- uid: System.Windows.FrameworkPropertyMetadata.Inherits
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
  fullName: System.Windows.FrameworkPropertyMetadata.Inherits
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
  fullName: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
  fullName: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable
- uid: System.Windows.FrameworkPropertyMetadata.Journal
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
  fullName: System.Windows.FrameworkPropertyMetadata.Journal
- uid: System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.FrameworkPropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.FrameworkPropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
  fullName: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
  fullName: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
- uid: System.Windows.FrameworkPropertyMetadata.#ctor*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: FrameworkPropertyMetadata
  nameWithType: FrameworkPropertyMetadata.FrameworkPropertyMetadata
- uid: System.Windows.FrameworkPropertyMetadata.AffectsArrange*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsArrange
  nameWithType: FrameworkPropertyMetadata.AffectsArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsMeasure*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentArrange*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentArrange
  nameWithType: FrameworkPropertyMetadata.AffectsParentArrange
- uid: System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsParentMeasure
  nameWithType: FrameworkPropertyMetadata.AffectsParentMeasure
- uid: System.Windows.FrameworkPropertyMetadata.AffectsRender*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: AffectsRender
  nameWithType: FrameworkPropertyMetadata.AffectsRender
- uid: System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: BindsTwoWayByDefault
  nameWithType: FrameworkPropertyMetadata.BindsTwoWayByDefault
- uid: System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: DefaultUpdateSourceTrigger
  nameWithType: FrameworkPropertyMetadata.DefaultUpdateSourceTrigger
- uid: System.Windows.FrameworkPropertyMetadata.Inherits*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Inherits
  nameWithType: FrameworkPropertyMetadata.Inherits
- uid: System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsDataBindingAllowed
  nameWithType: FrameworkPropertyMetadata.IsDataBindingAllowed
- uid: System.Windows.FrameworkPropertyMetadata.IsNotDataBindable*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: IsNotDataBindable
  nameWithType: FrameworkPropertyMetadata.IsNotDataBindable
- uid: System.Windows.FrameworkPropertyMetadata.Journal*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Journal
  nameWithType: FrameworkPropertyMetadata.Journal
- uid: System.Windows.FrameworkPropertyMetadata.Merge*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: FrameworkPropertyMetadata.Merge
- uid: System.Windows.FrameworkPropertyMetadata.OnApply*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: FrameworkPropertyMetadata.OnApply
- uid: System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: OverridesInheritanceBehavior
  nameWithType: FrameworkPropertyMetadata.OverridesInheritanceBehavior
- uid: System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender*
  parent: System.Windows.FrameworkPropertyMetadata
  isExternal: false
  name: SubPropertiesDoNotAffectRender
  nameWithType: FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender
