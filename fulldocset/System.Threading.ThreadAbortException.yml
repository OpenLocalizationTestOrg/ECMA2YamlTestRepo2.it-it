### YamlMime:ManagedReference
items:
- uid: System.Threading.ThreadAbortException
  id: ThreadAbortException
  children:
  - System.Threading.ThreadAbortException.ExceptionState
  langs:
  - csharp
  name: ThreadAbortException
  nameWithType: ThreadAbortException
  fullName: System.Threading.ThreadAbortException
  type: Class
  summary: "Eccezione generata quando viene eseguita una chiamata per il <xref:System.Threading.Thread.Abort*>metodo.</xref:System.Threading.Thread.Abort*> Questa classe non può essere ereditata."
  remarks: "Quando viene eseguita una chiamata per il <xref:System.Threading.Thread.Abort%2A>metodo per eliminare un thread, common language runtime genera un&quot;eccezione ThreadAbortException.</xref:System.Threading.Thread.Abort%2A> ThreadAbortException è un&quot;eccezione speciale che può essere intercettata, ma verrà automaticamente generato di nuovo alla fine del `catch` blocco. Quando viene generata questa eccezione, il runtime esegue tutte le `finally` blocchi prima di terminare il thread. Perché il thread può eseguire un calcolo unbounded `finally` blocchi oppure chiamare <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName>per annullare la richiesta di interruzione, non c&quot;è garanzia che il thread terminerà mai.</xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> Se si desidera attendere fino a quando non è terminato il thread interrotto, è possibile chiamare il <xref:System.Threading.Thread.Join%2A?displayProperty=fullName>metodo.</xref:System.Threading.Thread.Join%2A?displayProperty=fullName> <xref:System.Threading.Thread.Join%2A>è una chiamata di blocco non termina finché il thread effettivamente interrompe l&quot;esecuzione.</xref:System.Threading.Thread.Join%2A>      > [!NOTE] > Quando common language runtime (CLR) si arresta tutti i thread in primo piano in un file eseguibile gestito threadsafter di sfondo, non utilizza <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>.</xref:System.Threading.Thread.Abort%2A?displayProperty=fullName> Pertanto, è possibile utilizzare ThreadAbortException per rilevare quando vengono terminati i thread in background da CLR.       ThreadAbortException utilizza HRESULT COR_E_THREADABORTED, il cui valore 0x80131530.      > [!NOTE] > Il valore ereditato <xref:System.Exception.Data%2A>proprietà è sempre `null`.</xref:System.Exception.Data%2A>"
  example:
  - "The following example demonstrates aborting a thread. The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.  \n  \n [!code-cpp[ThreadAbEx#1](~/add/codesnippet/cpp/t-system.threading.threa_4_1.cpp)]\n [!code-vb[ThreadAbEx#1](~/add/codesnippet/visualbasic/t-system.threading.threa_4_1.vb)]\n [!code-cs[ThreadAbEx#1](~/add/codesnippet/csharp/t-system.threading.threa_4_1.cs)]  \n  \n This code produces the following output:  \n  \n```  \nThread - working.  \nMain - aborting my thread.  \nThread - caught ThreadAbortException - resetting.  \nException message: Thread was being aborted.  \nThread - still alive and working.  \nThread - finished working.  \nMain ending.  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ThreadAbortException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.ThreadAbortException.ExceptionState
  id: ExceptionState
  parent: System.Threading.ThreadAbortException
  langs:
  - csharp
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Ottiene un oggetto che contiene informazioni specifiche dell&quot;applicazione correlate all&quot;interruzione del thread."
  remarks: "L&quot;oggetto restituito da questa proprietà viene specificato tramite il `stateInfo` parametro del <xref:System.Threading.Thread.Abort%2A>metodo.</xref:System.Threading.Thread.Abort%2A> Il contenuto esatto e l&quot;utilizzo di questo oggetto è definito; applicazione in genere utilizzato per trasmettere informazioni significative per il thread interrotto."
  example:
  - "The following code example shows how to pass information to a thread that is being aborted.  \n  \n [!code-cs[System.Threading.Thread.Abort2#1](~/add/codesnippet/csharp/p-system.threading.threa_10_1.cs)]\n [!code-cpp[System.Threading.Thread.Abort2#1](~/add/codesnippet/cpp/p-system.threading.threa_10_1.cpp)]\n [!code-vb[System.Threading.Thread.Abort2#1](~/add/codesnippet/visualbasic/p-system.threading.threa_10_1.vb)]"
  syntax:
    content: public object ExceptionState { get; }
    return:
      type: System.Object
      description: "Oggetto contenente informazioni specifiche dell&quot;applicazione."
  overload: System.Threading.ThreadAbortException.ExceptionState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.Threading.ThreadAbortException.ExceptionState
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.ThreadAbortException.ExceptionState*
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
