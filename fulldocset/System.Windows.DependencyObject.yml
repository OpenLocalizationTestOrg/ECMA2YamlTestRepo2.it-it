### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyObject
  id: DependencyObject
  children:
  - System.Windows.DependencyObject.#ctor
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  langs:
  - csharp
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
  type: Class
  summary: "Rappresenta un oggetto che fa parte del sistema di proprietà di dipendenza."
  remarks: "La classe consente DependencyObject [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] servizi di sistema di proprietà nelle varie classi derivate.       Funzione principale del sistema di proprietà è per calcolare i valori delle proprietà e per fornire la notifica di sistema sui valori che sono stati modificati. Un&quot;altra classe principale che fa parte del sistema di proprietà è <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> <xref:System.Windows.DependencyProperty>Abilita la registrazione delle proprietà di dipendenza nel sistema di proprietà e vengono fornite informazioni di identificazione e su ogni proprietà di dipendenza, mentre DependencyObject come classe di base consente agli oggetti di usare le proprietà di dipendenza.</xref:System.Windows.DependencyProperty>       DependencyObject servizi e le caratteristiche includono i seguenti:-supporto per l&quot;hosting delle proprietà di dipendenza. Si registra una proprietà di dipendenza chiamando il <xref:System.Windows.DependencyProperty.Register%2A>metodo e archiviare il valore restituito del metodo come un campo statico pubblico nella classe.</xref:System.Windows.DependencyProperty.Register%2A>      -Proprietà associata supporto per l&quot;hosting. Si registra una proprietà associata chiamando il <xref:System.Windows.DependencyProperty.RegisterAttached%2A>metodo e archiviare il valore restituito del metodo come un campo di sola lettura statico pubblico nella classe.</xref:System.Windows.DependencyProperty.RegisterAttached%2A> (Esistono requisiti di altri membri; si noti che questo rappresenta un [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] implementazione specifica per le proprietà associate. Per informazioni dettagliate, vedere [collegato Cenni preliminari sulle proprietà](~/add/includes/ajax-current-ext-md.md).) Quindi è possibile impostare la proprietà associata su qualsiasi classe derivata da DependencyObject.      -Get, set e cancellare i metodi di utilità per i valori di qualsiasi proprietà di dipendenza che esiste del DependencyObject.      -I metadati, forzare il supporto di valore, proprietà notifica e i callback di sostituzione per le proprietà di dipendenza sono state modificate o le proprietà associate. Inoltre, la classe DependencyObject semplifica i metadati della proprietà per proprietario per una proprietà di dipendenza.      -Una classe di base comune per le classi derivate da <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, o <xref:System.Windows.Media.Visual>.</xref:System.Windows.Media.Visual> </xref:System.Windows.Freezable> </xref:System.Windows.ContentElement> (<xref:System.Windows.UIElement>, un&quot;altra classe di elemento di base, ha una gerarchia di classi che include <xref:System.Windows.Media.Visual>.)</xref:System.Windows.Media.Visual> </xref:System.Windows.UIElement>"
  example:
  - "The following example derives from DependencyObject to create a new abstract class. The class then registers an attached property and includes support members for that attached property.  \n  \n [!code-cs[WPFAquariumSln#DOMain](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#domain)]\n [!code-vb[WPFAquariumSln#DOMain](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#domain)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))]

      [System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))]

      public class DependencyObject : System.Windows.Threading.DispatcherObject
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.DependencyObject.#ctor
  id: '#ctor'
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> classe."
  syntax:
    content: public DependencyObject ();
    parameters: []
  overload: System.Windows.DependencyObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  id: ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Cancella il valore di una proprietà locale. La proprietà da cancellare è specificata da un <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> identificatore."
  remarks: "Cancellare il valore della proprietà chiamando ClearValue non necessariamente fornire una proprietà di dipendenza il valore predefinito specificato nei metadati della proprietà di dipendenza. Deselezionare la proprietà in modo specifico solo Cancella qualsiasi valore locale potrebbe essere state applicate. Per ulteriori informazioni, vedere [precedenza dei valori di proprietà di dipendenza](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example iterates all properties that have local values set on an object, then calls ClearValue to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public void ClearValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "La proprietà di dipendenza da cancellare, identificata da un <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> riferimento all&quot;oggetto."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tentativo di chiamare ClearValue su un oggetto sealed <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  id: ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Cancella il valore locale di una proprietà di sola lettura. La proprietà da cancellare è specificata da un <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref>."
  remarks: "Oggetto <xref:System.Windows.DependencyPropertyKey>identifica una proprietà di dipendenza di sola lettura per le operazioni di sistema di proprietà.</xref:System.Windows.DependencyPropertyKey> Le classi che definiscono le proprietà di dipendenza di sola lettura non devono esporre questa chiave con accesso pubblico. Fornisce un percorso di codice pubblico che nega il carattere di sola lettura della proprietà, se una chiave esposta pubblicamente metodi, ad esempio <xref:System.Windows.DependencyObject.ClearValue%2A>o <xref:System.Windows.DependencyObject.SetValue%2A>può essere chiamata all&quot;esterno della classe o di un assembly, la chiave di riferimento.</xref:System.Windows.DependencyObject.SetValue%2A> </xref:System.Windows.DependencyObject.ClearValue%2A>       Cancellare il valore della proprietà chiamando ClearValue non necessariamente fornire una proprietà di dipendenza il valore predefinito specificato nei metadati della proprietà di dipendenza. La cancellazione del valore in modo specifico solo Cancella qualsiasi valore locale potrebbe essere state applicate. Per ulteriori informazioni, vedere [precedenza dei valori di proprietà di dipendenza](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void ClearValue (System.Windows.DependencyPropertyKey key);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "La chiave per la proprietà di dipendenza da cancellare."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tentativo di chiamare <xref:System.Windows.DependencyObject.ClearValue*>su un oggetto sealed <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>.</xref:System.Windows.DependencyObject.ClearValue*>"
  platform:
  - net462
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  id: CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Assegna il valore della proprietà di dipendenza specificata. Questa operazione viene eseguita richiamando qualsiasi <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> specificato nei metadati di proprietà per la proprietà di dipendenza nello stato attuale per la chiamata di funzione <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Oltre a richiamata in modo esplicito tramite la chiamata, il valore di coercizione di <xref:System.Windows.CoerceValueCallback>per una dipendenza di proprietà viene anche richiamata internamente ogni volta che il valore della proprietà di dipendenza viene rivalutato dal [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] sistema di proprietà.</xref:System.Windows.CoerceValueCallback>       Quando si richiama il metodo il valore di coercizione, si richiama il callback del valore soggetto a coercizione per la proprietà specificati. In genere si richiamerà il valore di coercizione solo se si conosce l&quot;esistenza di un callback di valore soggetto a coercizione e se si conoscono i criteri del callback di coercizione.       Lo scenario più comune per chiamare il valore di coercizione è all&quot;interno di gestione delle classi o i callback di modifica di proprietà di proprietà correlate che influenzano i rispettivi valori in modo dipendente. Per ulteriori informazioni, vedere [convalida e i callback di proprietà di dipendenza](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example calls CoerceValue within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class. This is a common pattern for introducing true value dependencies between dependency properties.  \n  \n [!code-cs[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/csharp/DPCallbackOverride/SDKSampleLibrary/class1.cs#onpccurrent)]\n [!code-vb[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/visualbasic/DPCallbackOverride.sdksamplelibrary/class1.vb#onpccurrent)]"
  syntax:
    content: public void CoerceValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Identificatore della proprietà di dipendenza da assegnare."
  overload: System.Windows.DependencyObject.CoerceValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Specificato <code> dp </code> o il relativo valore non è valido o non esistono."
  platform:
  - net462
- uid: System.Windows.DependencyObject.DependencyObjectType
  id: DependencyObjectType
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ottiene il <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> che esegue il wrapping di [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] tipo di questa istanza."
  remarks: "Questa proprietà è utile se un oggetto restituito da un metodo ha un tipo di valore restituito di <xref:System.Windows.DependencyObject>e si desidera eseguire proprietà specifiche operazioni del sistema, a seconda del tipo.</xref:System.Windows.DependencyObject> Ad esempio risulta più efficiente chiamare <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29>utilizzando il <xref:System.Windows.DependencyObjectType>anziché [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] tipo.</xref:System.Windows.DependencyObjectType> </xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> <xref:System.Windows.DependencyObjectType>facilita le ricerche più veloci.</xref:System.Windows.DependencyObjectType>"
  example:
  - "In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property. The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.  \n  \n `public DOClass() : base()`  \n  \n `{`  \n  \n `__customPropertyCache = (CustomDP)`  \n  \n `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  \n  \n `}`"
  syntax:
    content: public System.Windows.DependencyObjectType DependencyObjectType { get; }
    return:
      type: System.Windows.DependencyObjectType
      description: "Oggetto <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> che esegue il wrapping di [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] tipo di questa istanza."
  overload: System.Windows.DependencyObject.DependencyObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Determina se l&quot;oggetto <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> è equivalente all&quot;oggetto corrente <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Questa implementazione è solo l&quot;uguaglianza dei riferimenti e non tenta di valutare l&quot;uguaglianza di valori delle proprietà contenute."
  syntax:
    content: public override sealed bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Il <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> da confrontare con l&quot;istanza corrente."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se le due istanze sono uguali. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetHashCode
  id: GetHashCode
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ottiene un codice hash per questo <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  syntax:
    content: public override sealed int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Codice hash di un intero con segno a 32 bit."
  overload: System.Windows.DependencyObject.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  id: GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Crea un enumeratore specializzato per determinare quali proprietà di dipendenza sono valori impostati localmente su questo <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Oggetto *valore locale* è qualsiasi valore di proprietà di dipendenza che è stato impostato da <xref:System.Windows.DependencyObject.SetValue%2A>, a differenza di altri aspetti del sistema di proprietà.</xref:System.Windows.DependencyObject.SetValue%2A>       Il <xref:System.Windows.LocalValueEnumerator>ottenuto chiamando il metodo GetLocalValueEnumerator può essere utilizzata per enumerare le proprietà che hanno impostato localmente valore un <xref:System.Windows.DependencyObject>istanza.</xref:System.Windows.DependencyObject> </xref:System.Windows.LocalValueEnumerator> Ogni proprietà è rappresentata nell&quot;enumeratore da un <xref:System.Windows.LocalValueEntry>oggetto le cui proprietà che fanno riferimento specifico <xref:System.Windows.DependencyProperty>e i relativi valori.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> Questa tecnica di enumerazione impostati localmente valori utilizzabile per l&quot;ottimizzazione o per la gestione di altro tipo di valori locali, ad esempio per determinare quali valori di proprietà di un <xref:System.Windows.DependencyObject>comporterebbe la modifica se cancellati.</xref:System.Windows.DependencyObject>      > [!IMPORTANT] > Restituito <xref:System.Windows.LocalValueEnumerator>potrebbe contenere <xref:System.Windows.LocalValueEntry>record per la proprietà di dipendenza che sono di sola lettura, o le proprietà di dipendenza in cui i valori vengono calcolati dal sistema di proprietà.</xref:System.Windows.LocalValueEntry> </xref:System.Windows.LocalValueEnumerator> Ad esempio, un elemento di framework visivo che ha una larghezza stabilita mediante layout indicherà un valore locale per <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</xref:System.Windows.FrameworkElement.ActualWidth%2A> Se si ricevono valori locali per reimpostarli, controllare il <xref:System.Windows.DependencyProperty.ReadOnly%2A>valore nell&quot;identificatore di proprietà di ogni <xref:System.Windows.LocalValueEntry>per verificare che il <xref:System.Windows.DependencyProperty>in questione non è in sola lettura.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> </xref:System.Windows.DependencyProperty.ReadOnly%2A>"
  example:
  - "The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();
    parameters: []
    return:
      type: System.Windows.LocalValueEnumerator
      description: "Un enumeratore specializzato valore locale."
  overload: System.Windows.DependencyObject.GetLocalValueEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  id: GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Restituisce il valore effettivo corrente di una proprietà di dipendenza in questa istanza di un <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Il *valore effettivo* è il valore della proprietà a qualsiasi chiamante che richiede il valore restituito dal sistema di proprietà. Il valore effettivo è il risultato del sistema di proprietà con valutati tutti i possibili input che partecipano alla precedenza dei valori di proprietà del sistema. Ciò include la coercizione e animazione. Per ulteriori informazioni, vedere [precedenza dei valori di proprietà di dipendenza](~/add/includes/ajax-current-ext-md.md).       Questo metodo non restituisce mai <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> Il <xref:System.Windows.DependencyProperty>è un valore di sentinel per il sistema di proprietà utilizzato in vario modo internamente e talvolta anche esposto mediante callback di coercizione.</xref:System.Windows.DependencyProperty>       Se non si conoscono il quale deve essere il tipo della proprietà, è possibile eseguire una query l&quot;identificatore della proprietà di dipendenza richiesta per determinare se è presente più di una specifica <xref:System.Windows.DependencyProperty.PropertyType%2A>che il valore restituito può essere convertito in.</xref:System.Windows.DependencyProperty.PropertyType%2A>"
  syntax:
    content: public object GetValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Il <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> identificatore della proprietà da recuperare il valore."
    return:
      type: System.Object
      description: "Restituisce il valore effettivo corrente."
  overload: System.Windows.DependencyObject.GetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Specificato <code> dp </code> o il relativo valore non è valido oppure l&quot;oggetto specificato <code> dp </code> non esiste."
  platform:
  - net462
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  id: InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Valuta di nuovo il valore effettivo della proprietà di dipendenza specificata"
  remarks: "Quando si chiama InvalidateProperty, qualsiasi associate e applicabili <xref:System.Windows.CoerceValueCallback>o <xref:System.Windows.PropertyChangedCallback>funzioni registrate per tale proprietà di dipendenza può essere richiamata.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       La chiamata di InvalidateProperty su una proprietà che è stato impostato il valore locale avrà alcun effetto, poiché il valore locale ha la precedenza su altri input di sistema di proprietà, ad eccezione delle animazioni. Tuttavia, è possibile chiamare <xref:System.Windows.DependencyObject.ClearValue%2A>, quindi chiamare InvalidateProperty.</xref:System.Windows.DependencyObject.ClearValue%2A> Per ulteriori informazioni, vedere [precedenza dei valori di proprietà di dipendenza](~/add/includes/ajax-current-ext-md.md).       La chiamata InvalidateProperty non è necessariamente applicabile per molti scenari di proprietà di dipendenza. Se una proprietà di dipendenza viene invalidata a causa delle modifiche di valore in uno dei componenti, il sistema di proprietà invalida e Rivaluta automaticamente la proprietà di dipendenza. Tuttavia, sono ancora presenti alcuni scenari appropriati in cui è utile InvalidateProperty. In particolare, è possibile utilizzare InvalidateProperty all&quot;interno di soggetto a coercizione valore o della proprietà modificata callback per una proprietà di dipendenza diversa. È inoltre possibile utilizzare InvalidateProperty per forzare una nuova valutazione di un&quot;associazione in un&quot;origine dati che non è in grado di implementare il <xref:System.ComponentModel.INotifyPropertyChanged>meccanismo di notifica (ad esempio se l&quot;utilizzo di classi di dati che non può essere derivata da, o in cui i dati sono un membro statico).</xref:System.ComponentModel.INotifyPropertyChanged>"
  example:
  - "The following example calls InvalidateProperty on a custom property, whenever properties that are involved in the invalidated property's calculations change. This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.  \n  \n [!code-cs[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/csharp/PropertySystemEsoterics/SDKSampleLibrary/class1.cs#invalidateproperty)]\n [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/visualbasic/PropertySystemEsoterics.sdksamplelibrary/class1.vb#invalidateproperty)]"
  syntax:
    content: public void InvalidateProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Il <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> identificatore della proprietà da invalidare."
  overload: System.Windows.DependencyObject.InvalidateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.IsSealed
  id: IsSealed
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ottiene un valore che indica se questa istanza è attualmente bloccata (sola lettura)."
  remarks: "Questo valore è impostato internamente."
  syntax:
    content: public bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se questa istanza è sealed. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Richiamato ogni volta che il valore effettivo di qualsiasi proprietà di dipendenza in <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> è stato aggiornato. La proprietà di dipendenza specifica modificata viene segnalata nei dati dell&quot;evento."
  remarks: "Questo metodo non è in genere rilevare le modifiche alle singole proprietà o eseguire le convalide di proprietà per ogni caso. OnPropertyChanged è invece destinato alle modifiche del criterio di invalidamento generale, se sono noto determinate informazioni sulle classificazioni generali delle proprietà. Ad esempio, modifica un <xref:System.Windows.Freezable>potrebbero essere modifiche nei tipi di valore del <xref:System.Windows.Freezable>, o potrebbero essere sottoproprietà, in cui le modifiche sono all&quot;interno di altri <xref:System.Windows.Freezable>riferimenti.</xref:System.Windows.Freezable> </xref:System.Windows.Freezable> </xref:System.Windows.Freezable> Il <xref:System.Windows.Freezable>implementazione dell&quot;override di OnPropertyChanged utilizza informazioni interne per determinare se le proprietà sono sottoproprietà e fornisce la logica di classe di base appropriata per entrambi i casi.</xref:System.Windows.Freezable>       OnPropertyChanged è potenzialmente richiamato più volte durante il ciclo di vita di un oggetto. Pertanto, è possibile ottenere un miglioramento delle prestazioni del sistema di proprietà globale se si ignora i metadati di proprietà specifiche e quindi collegare <xref:System.Windows.CoerceValueCallback>o <xref:System.Windows.PropertyChangedCallback>funzioni per le singole proprietà.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback> Tuttavia, utilizzare questo metodo se un <xref:System.Windows.DependencyObject>include un numero significativo di proprietà di dipendenza correlata al valore, o se include la logica, ad esempio il comportamento di rendering, che deve essere ripetuto per diversi casi correlati delle convalide di proprietà.</xref:System.Windows.DependencyObject>"
  syntax:
    content: protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Dati dell&quot;evento che conterranno l&quot;identificatore della proprietà di dipendenza di interesse, i metadati della proprietà per il tipo e i valori vecchi e nuovi."
  overload: System.Windows.DependencyObject.OnPropertyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  id: ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Restituisce il valore locale di una proprietà di dipendenza, se presente."
  remarks: "È consigliabile utilizzare <xref:System.Windows.DependencyObject.GetValue%2A>per le operazioni più comuni di &quot;get&quot; per una proprietà di dipendenza.</xref:System.Windows.DependencyObject.GetValue%2A> ReadLocalValue non restituisce il valore effettivo per un&quot;ampia gamma di circostanze in cui il valore non è impostato localmente.       Valori impostati per gli stili, temi e modelli, il valore predefinito di metadati o ereditarietà del valore di proprietà non vengono considerati come valori locali. Tuttavia, associazioni e altre espressioni sono considerati valori locali, dopo aver valutati.       Quando è impostato alcun valore locale, questo metodo restituisce <xref:System.Windows.DependencyProperty.UnsetValue>.</xref:System.Windows.DependencyProperty.UnsetValue>       Se il valore restituito è diverso da <xref:System.Windows.DependencyProperty.UnsetValue>, è possibile eseguire una query di metadati della proprietà di dipendenza richiesta per determinare se è presente un tipo più specifico che il valore restituito può essere convertito in.</xref:System.Windows.DependencyProperty.UnsetValue>"
  syntax:
    content: public object ReadLocalValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Il <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> identificatore della proprietà da recuperare il valore."
    return:
      type: System.Object
      description: "Restituisce il valore locale oppure il valore di sentinel <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> se è impostato alcun valore locale."
  overload: System.Windows.DependencyObject.ReadLocalValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  id: SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Imposta il valore di una proprietà di dipendenza senza modificare l&quot;origine del valore."
  remarks: "Questo metodo viene utilizzato da un componente che a livello di codice imposta il valore di una delle sue proprietà senza disabilitare utilizzo dichiarato di un&quot;applicazione della proprietà. Il metodo SetCurrentValue modifica il valore effettivo della proprietà, ma i trigger esistenti, le associazioni dati e stili continueranno a funzionare."
  syntax:
    content: public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Identificatore della proprietà di dipendenza da impostare."
    - id: value
      type: System.Object
      description: "Il nuovo valore locale."
  overload: System.Windows.DependencyObject.SetCurrentValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tentativo di modificare una proprietà di dipendenza di sola lettura, o una proprietà in un oggetto sealed <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>non è del tipo corretto registrato per il <code>dp</code> proprietà."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  id: SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Imposta il valore locale di una proprietà di dipendenza specificata dal relativo identificatore di proprietà di dipendenza."
  remarks: "Se il tipo fornito non corrisponde al tipo dichiarato per la proprietà di dipendenza in cui è stata registrata originariamente, viene generata un&quot;eccezione. Il `value` deve sempre essere specificato come tipo appropriato.       Le condizioni di eccezione sono potenzialmente influenzate dal <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>callback esistente nell&quot;identificatore della proprietà di dipendenza viene impostata.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> In caso contrario, il valore fornito potrebbe essersi verificato un errore generale condizioni di controllo dei tipi (ad esempio, passando una stringa quando il tipo nativo è Double)."
  syntax:
    content: public void SetValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Identificatore della proprietà di dipendenza da impostare."
    - id: value
      type: System.Object
      description: "Il nuovo valore locale."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Tentativo di modificare una proprietà di dipendenza di sola lettura, o una proprietà in un oggetto sealed <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>non è del tipo corretto registrato per il <code>dp</code> proprietà."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  id: SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Imposta il valore locale di una proprietà di dipendenza di sola lettura, specificata tramite il <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> identificatore della proprietà di dipendenza."
  remarks: "Questa firma viene in genere utilizzata quando si impostano i valori per le proprietà di dipendenza di sola lettura che sono definiti nelle classi personalizzate. SetValue in genere, viene chiamato solo dal tipo che ha registrato la proprietà di dipendenza, implementa la logica interna che fornisce il valore determinato per la proprietà di dipendenza. Per ulteriori informazioni, vedere [le proprietà di dipendenza di sola lettura](~/add/includes/ajax-current-ext-md.md).       Se il tipo fornito non corrisponde al tipo dichiarato per la proprietà di dipendenza in cui è stata registrata originariamente, viene generata un&quot;eccezione. Il `value` deve sempre essere specificato come tipo appropriato. Le condizioni di eccezione sono potenzialmente influenzate dal <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>callback esistente nell&quot;identificatore della proprietà di dipendenza viene impostata.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>"
  example:
  - "The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] wrapper.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public void SetValue (System.Windows.DependencyPropertyKey key, object value);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "Il <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> identificatore della proprietà da impostare."
    - id: value
      type: System.Object
      description: "Il nuovo valore locale."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  id: ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Restituisce un valore che indica se i processi di serializzazione devono serializzare il valore della proprietà di dipendenza specificata."
  remarks: "L&quot;implementazione predefinita restituisce `true` per tutti i casi in cui una proprietà di dipendenza presenta un valore locale stabilito in <xref:System.Windows.DependencyObject>.</xref:System.Windows.DependencyObject>"
  syntax:
    content: protected virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Identificatore della proprietà di dipendenza che deve essere serializzata."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la proprietà di dipendenza fornita deve essere eseguita la serializzazione del valore. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.ShouldSerializeProperty*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyObject.#ctor
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
- uid: System.Windows.DependencyPropertyKey
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
- uid: System.Windows.DependencyObject.DependencyObjectType
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObjectType
  parent: System.Windows
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals(System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.DependencyObject.GetHashCode
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
- uid: System.Windows.LocalValueEnumerator
  parent: System.Windows
  isExternal: false
  name: LocalValueEnumerator
  nameWithType: LocalValueEnumerator
  fullName: System.Windows.LocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.IsSealed
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.#ctor*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject.DependencyObject
- uid: System.Windows.DependencyObject.ClearValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue
  nameWithType: DependencyObject.ClearValue
- uid: System.Windows.DependencyObject.CoerceValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue
  nameWithType: DependencyObject.CoerceValue
- uid: System.Windows.DependencyObject.DependencyObjectType*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals
  nameWithType: DependencyObject.Equals
- uid: System.Windows.DependencyObject.GetHashCode*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode
  nameWithType: DependencyObject.GetHashCode
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator
  nameWithType: DependencyObject.GetLocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue
  nameWithType: DependencyObject.GetValue
- uid: System.Windows.DependencyObject.InvalidateProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty
  nameWithType: DependencyObject.InvalidateProperty
- uid: System.Windows.DependencyObject.IsSealed*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged
  nameWithType: DependencyObject.OnPropertyChanged
- uid: System.Windows.DependencyObject.ReadLocalValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue
  nameWithType: DependencyObject.ReadLocalValue
- uid: System.Windows.DependencyObject.SetCurrentValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue
  nameWithType: DependencyObject.SetCurrentValue
- uid: System.Windows.DependencyObject.SetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue
  nameWithType: DependencyObject.SetValue
- uid: System.Windows.DependencyObject.ShouldSerializeProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty
  nameWithType: DependencyObject.ShouldSerializeProperty
