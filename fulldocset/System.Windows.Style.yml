### YamlMime:ManagedReference
items:
- uid: System.Windows.Style
  id: Style
  children:
  - System.Windows.Style.#ctor
  - System.Windows.Style.#ctor(System.Type)
  - System.Windows.Style.#ctor(System.Type,System.Windows.Style)
  - System.Windows.Style.BasedOn
  - System.Windows.Style.GetHashCode
  - System.Windows.Style.IsSealed
  - System.Windows.Style.RegisterName(System.String,System.Object)
  - System.Windows.Style.Resources
  - System.Windows.Style.Seal
  - System.Windows.Style.Setters
  - System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)
  - System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)
  - System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)
  - System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.Style.TargetType
  - System.Windows.Style.Triggers
  - System.Windows.Style.UnregisterName(System.String)
  langs:
  - csharp
  name: Style
  nameWithType: Style
  fullName: System.Windows.Style
  type: Class
  summary: "Abilita la condivisione di proprietà, risorse e gestori di eventi tra istanze di un tipo."
  remarks: "È possibile impostare uno stile su qualsiasi elemento che deriva da <xref:System.Windows.FrameworkElement>o <xref:System.Windows.FrameworkContentElement>.</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement> Uno stile più di frequente è dichiarato come una risorsa all&quot;interno di <xref:System.Windows.Application.Resources%2A>sezione.</xref:System.Windows.Application.Resources%2A> Perché gli stili sono risorse, rispettano le stesse regole di ambito che si applicano a tutte le risorse, pertanto se si dichiara uno stile influisce in cui può essere applicato. Se, ad esempio, si dichiara lo stile nell&quot;elemento radice della definizione di applicazione [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] file, lo stile può essere utilizzato in qualsiasi punto nell&quot;applicazione. Se si sta creando un&quot;applicazione di navigazione e lo stile in uno dell&quot;applicazione dichiarato [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] file, lo stile possono essere utilizzati solo in quel [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] file. Per ulteriori informazioni sulle regole per le risorse di ambito, vedere [risorse XAML](~/add/includes/ajax-current-ext-md.md).       La dichiarazione di stile è costituito da un oggetto di stile che contiene una raccolta di uno o più <xref:System.Windows.Setter>oggetti.</xref:System.Windows.Setter> Ogni <xref:System.Windows.Setter>costituito da una <xref:System.Windows.Setter.Property%2A>e una <xref:System.Windows.Setter.Value%2A>.</xref:System.Windows.Setter.Value%2A> </xref:System.Windows.Setter.Property%2A> </xref:System.Windows.Setter> La proprietà è il nome della proprietà dell&quot;elemento lo stile da applicare al. Dopo lo stile è dichiarato come una risorsa, è possibile fare riferimento esattamente come qualsiasi altra risorsa.      > [!NOTE] > Se è più di un metodo di impostazione nella raccolta con lo stesso metodo di impostazione <xref:System.Windows.Setter.Property%2A>viene utilizzato per ultimo valore della proprietà, il metodo di impostazione che è dichiarato.</xref:System.Windows.Setter.Property%2A> Analogamente, se si imposta un valore per la stessa proprietà in uno stile e in un elemento direttamente, il valore impostato per l&quot;elemento direttamente ha la precedenza.       Il [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] modello di stili e modelli consente di manutenzione e la condivisione di un aspetto, nonché la separazione di presentazione e logica. Il modello di stili e modelli include una serie di funzionalità che consentono di personalizzare il [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]. Questo insieme di funzionalità include la classe di stile, nonché le operazioni seguenti:- <xref:System.Windows.Trigger>- <xref:System.Windows.EventTrigger>e <xref:System.Windows.Media.Animation.Storyboard>- <xref:System.Windows.Controls.ControlTemplate>- <xref:System.Windows.DataTemplate>Per ulteriori informazioni, vedere [stili e modelli](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.DataTemplate> </xref:System.Windows.Controls.ControlTemplate> </xref:System.Windows.Media.Animation.Storyboard> </xref:System.Windows.EventTrigger> </xref:System.Windows.Trigger>"
  example:
  - "The following example shows a style declaration that will affect the <xref:System.Windows.Controls.Control.Background%2A> property of a <xref:System.Windows.Controls.Control>.  \n  \n [!code-xml[StyleOvw01#StyleSimple](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#stylesimple)]\n [!code-xml[StyleOvw01#StyleSimple](~/add/codesnippet/xaml/t-system.windows.style_1.xaml)]  \n  \n To apply the above style, do the following:  \n  \n [!code-xml[StyleOvw01#StyleSimpleApplied](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#stylesimpleapplied)]\n [!code-xml[StyleOvw01#StyleSimpleApplied](~/add/codesnippet/xaml/t-system.windows.style_2.xaml)]  \n  \n You can also apply styles to all elements of a given type by using the <xref:System.Windows.Style.TargetType%2A> property. Adding the target type to the style means that you no longer have to fully qualify the property you are setting with the `ClassName.PropertyName` syntax. The following example defines a style that will be applied to every <xref:System.Windows.Controls.TextBlock> element.  \n  \n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/photostore/window1.xaml#1)]\n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/t-system.windows.style_3.xaml)]  \n  \n> [!NOTE]\n>  Many [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact. For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBlock> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBlock> controls in the canvas, even if the <xref:System.Windows.Controls.TextBlock> is part of another control, such as a <xref:System.Windows.Controls.ListBox>.  \n  \n For information on how to extend or inherit from a defined style, see the <xref:System.Windows.Style.BasedOn%2A> page."
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)]

      [System.Windows.Markup.ContentProperty("Setters")]

      [System.Windows.Markup.DictionaryKeyProperty("TargetType")]

      public class Style : System.Windows.Threading.DispatcherObject, System.Windows.Markup.IAddChild, System.Windows.Markup.INameScope, System.Windows.Markup.IQueryAmbient
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements:
  - System.Windows.Markup.IAddChild
  - System.Windows.Markup.INameScope
  - System.Windows.Markup.IQueryAmbient
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Style.#ctor
  id: '#ctor'
  parent: System.Windows.Style
  langs:
  - csharp
  name: Style()
  nameWithType: Style.Style()
  fullName: System.Windows.Style.Style()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.Style&quot;> </xref> classe."
  remarks: "Questa chiamata al costruttore richiede una convalida posticipata della <xref:System.Windows.Style.TargetType%2A>e <xref:System.Windows.Style.BasedOn%2A>applicare uno stile di tipo.</xref:System.Windows.Style.BasedOn%2A> </xref:System.Windows.Style.TargetType%2A> Se viene utilizzato all&quot;esterno del contesto del parser, comportamento sarà indefinito."
  syntax:
    content: public Style ();
    parameters: []
  overload: System.Windows.Style.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Windows.Style
  langs:
  - csharp
  name: Style(Type)
  nameWithType: Style.Style(Type)
  fullName: System.Windows.Style.Style(Type)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.Style&quot;> </xref> classe da utilizzare sul specificata <xref:System.Type>.</xref:System.Type>"
  syntax:
    content: public Style (Type targetType);
    parameters:
    - id: targetType
      type: System.Type
      description: "Il tipo a cui verrà applicato lo stile."
  overload: System.Windows.Style.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.#ctor(System.Type,System.Windows.Style)
  id: '#ctor(System.Type,System.Windows.Style)'
  parent: System.Windows.Style
  langs:
  - csharp
  name: Style(Type,Style)
  nameWithType: Style.Style(Type,Style)
  fullName: System.Windows.Style.Style(Type,Style)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.Style&quot;> </xref> classe da utilizzare sull&quot;oggetto specificato <xref:System.Type>e in base all&quot;opzione <xref href=&quot;System.Windows.Style&quot;> </xref>.</xref:System.Type>"
  syntax:
    content: public Style (Type targetType, System.Windows.Style basedOn);
    parameters:
    - id: targetType
      type: System.Type
      description: "Il tipo a cui verrà applicato lo stile."
    - id: basedOn
      type: System.Windows.Style
      description: "Lo stile su cui basare questo stile."
  overload: System.Windows.Style.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.BasedOn
  id: BasedOn
  parent: System.Windows.Style
  langs:
  - csharp
  name: BasedOn
  nameWithType: Style.BasedOn
  fullName: System.Windows.Style.BasedOn
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta uno stile definito che costituisce la base dello stile corrente."
  remarks: "Ogni stile supporta solo un BasedOn valore.      <a name=&quot;xamlAttributeUsage_BasedOn&quot;></a># # Utilizzo dell&quot;attributo XAML ```   <object BasedOn=&quot;myStyle&quot; .../>   ``` <a name=&quot;xamlValues_BasedOn&quot;> </a> # # valori XAML *myStyle* uno stile esistente.       In genere, si utilizza il [le estensioni di Markup e XAML WPF](~/add/includes/ajax-current-ext-md.md) per fare riferimento a uno stile esistente."
  example:
  - "There are several ways that styles in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] can be extended or inherited. Styles can be based on other styles through this property. When you use this property, the new style will inherit the values of the original style that are not explicitly redefined in the new style. In the following example, `Style2` inherits the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=fullName>value of `Yellow`, and adds a <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=fullName>value of `Blue`.  \n  \n [!code-xml[StyleOvw01#ExtendingStyle](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#extendingstyle)]\n [!code-xml[StyleOvw01#ExtendingStyle](~/add/codesnippet/xaml/p-system.windows.style.b_1.xaml)]  \n  \n Similarly, styles can be based on the style of an existing [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] element, as in the following example where the new style is based on the style of a <xref:System.Windows.Controls.TextBlock> element.  \n  \n [!code-xml[PhotoStoreDemoStyled#2](~/add/codesnippet/xaml/photostore/window1.xaml#2)]\n [!code-xml[PhotoStoreDemoStyled#2](~/add/codesnippet/xaml/p-system.windows.style.b_2.xaml)]  \n  \n> [!NOTE]\n>  If you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the type of the base style.  \n  \n Styles defined for specific types can also be based on other styles, as in the following example.  \n  \n [!code-xml[StyleOvw01#ExtendingStyleTargetType](~/add/codesnippet/xaml/StyleOvw1/Page1.xaml#extendingstyletargettype)]\n [!code-xml[StyleOvw01#ExtendingStyleTargetType](~/add/codesnippet/xaml/p-system.windows.style.b_3.xaml)]"
  syntax:
    content: public System.Windows.Style BasedOn { get; set; }
    return:
      type: System.Windows.Style
      description: "Uno stile definito che costituisce la base dello stile corrente. Il valore predefinito è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Style.BasedOn*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.GetHashCode
  id: GetHashCode
  parent: System.Windows.Style
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Style.GetHashCode()
  fullName: System.Windows.Style.GetHashCode()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Restituisce il codice hash per questo <xref href=&quot;System.Windows.Style&quot;> </xref>."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Il codice hash per questo <xref href=&quot;System.Windows.Style&quot;> </xref>."
  overload: System.Windows.Style.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.IsSealed
  id: IsSealed
  parent: System.Windows.Style
  langs:
  - csharp
  name: IsSealed
  nameWithType: Style.IsSealed
  fullName: System.Windows.Style.IsSealed
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene un valore che indica se lo stile è di sola lettura e non può essere modificato."
  remarks: "Uno stile è bloccato quando un altro stile basato su di esso o quando viene applicato per la prima volta."
  syntax:
    content: public bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se lo stile è sealed. in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Style.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.RegisterName(System.String,System.Object)
  id: RegisterName(System.String,System.Object)
  parent: System.Windows.Style
  langs:
  - csharp
  name: RegisterName(String,Object)
  nameWithType: Style.RegisterName(String,Object)
  fullName: System.Windows.Style.RegisterName(String,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Registra una nuova coppia nome-oggetto nell&quot;ambito dei nomi corrente."
  syntax:
    content: public void RegisterName (string name, object scopedElement);
    parameters:
    - id: name
      type: System.String
      description: "Il nome da registrare."
    - id: scopedElement
      type: System.Object
      description: "L&quot;oggetto per eseguire il mapping all&quot;oggetto specificato `name`."
  overload: System.Windows.Style.RegisterName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Resources
  id: Resources
  parent: System.Windows.Style
  langs:
  - csharp
  name: Resources
  nameWithType: Style.Resources
  fullName: System.Windows.Style.Resources
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta la raccolta di risorse che possono essere utilizzate all&quot;interno dell&quot;ambito di questo stile."
  remarks: "<a name=\"xamlPropertyElementUsage_Resources\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.Resources>  \n    oneOrMoreResourceElements  \n  </object.Resources>  \n</object>  \n- or -   \n<object>  \n  <object.Resources>  \n    <ResourceDictionary Source=\"externalDictionarySource\"/>  \n  </object.Resources>  \n</object>  \n```  \n  \n<a name=\"xamlValues_Resources\"></a>   \n## XAML Values  \n *oneOrMoreResourceElements*  \n One or more resource elements. To be referenced later in either [StaticResource Markup Extension](~/add/includes/ajax-current-ext-md.md) or [DynamicResource Markup Extension](~/add/includes/ajax-current-ext-md.md) syntax in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], a resource element must have an `x:Key` attribute.  \n  \n \\<ResourceDictionary Source=\" *externalDictionarySource*\"/>  \n An external dictionary source. For details, see [Merged Resource Dictionaries](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.ResourceDictionary Resources { get; set; }
    return:
      type: System.Windows.ResourceDictionary
      description: "Le risorse che possono essere utilizzate all&quot;interno dell&quot;ambito di questo stile."
  overload: System.Windows.Style.Resources*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Seal
  id: Seal
  parent: System.Windows.Style
  langs:
  - csharp
  name: Seal()
  nameWithType: Style.Seal()
  fullName: System.Windows.Style.Seal()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Blocca questo stile e tutte le factory e i trigger in modo non possono essere modificate."
  syntax:
    content: public void Seal ();
    parameters: []
  overload: System.Windows.Style.Seal*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Setters
  id: Setters
  parent: System.Windows.Style
  langs:
  - csharp
  name: Setters
  nameWithType: Style.Setters
  fullName: System.Windows.Style.Setters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene una raccolta di <xref href=&quot;System.Windows.Setter&quot;> </xref> e <xref href=&quot;System.Windows.EventSetter&quot;> </xref> oggetti."
  remarks: "La proprietà di metodi di impostazione di un <xref:System.Windows.Style>oggetto può essere costituito solo da oggetti assegnabili a <xref:System.Windows.SetterBase>.</xref:System.Windows.SetterBase> </xref:System.Windows.Style> Aggiunta di un <xref:System.Windows.SetterBase>figlio a un <xref:System.Windows.Style>oggetto aggiunge in modo implicito per il <xref:System.Windows.SetterBaseCollection>per il <xref:System.Windows.Style>oggetto.</xref:System.Windows.Style> </xref:System.Windows.SetterBaseCollection> </xref:System.Windows.Style> </xref:System.Windows.SetterBase>       Utilizzo di un elemento di proprietà espliciti per Setter è abbastanza comune. Si tratta di una decisione di markup di stile che possa aiutare a distinguere i metodi di impostazione da <xref:System.Windows.Style.Resources%2A>e <xref:System.Windows.Style.Triggers%2A>gli elementi in uno stile complesso.</xref:System.Windows.Style.Triggers%2A> </xref:System.Windows.Style.Resources%2A> Ad esempio: ```   <Style>     <Style.Setters>       <!--one or more SetterBase derived object elements here-->     </Style.Setters>   </Style>   ``` <a name=&quot;xamlPropertyElementUsage_Setters&quot;> </a> # # utilizzo dell&quot;elemento di proprietà XAML ```   <object>     oneOrMoreSetters   </object>   ``` <a name=&quot;xamlValues_Setters&quot;> </a> # # valori XAML *oneOrMoreSetters* uno o più <xref:System.Windows.Setter>o <xref:System.Windows.EventSetter>oggetti.</xref:System.Windows.EventSetter> </xref:System.Windows.Setter>            "
  example:
  - "The following example shows how to use this property.  \n  \n [!code-vb[listboxitemstyle#1](~/add/codesnippet/visualbasic/ListBoxItemStyle/Pane1.xaml.vb#1)]\n [!code-cs[listboxitemstyle#1](~/add/codesnippet/csharp/ListBoxItemStyle/Pane1.xaml.cs#1)]  \n  \n Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object. The following <xref:System.Windows.EventSetter> is implicitly added to the <xref:System.Windows.SetterBaseCollection> of the style:  \n  \n [!code-xml[eventovwsupport#XAML2](~/add/codesnippet/xaml/EventOvwSupport/page2.xaml#xaml2)]"
  syntax:
    content: public System.Windows.SetterBaseCollection Setters { get; }
    return:
      type: System.Windows.SetterBaseCollection
      description: "Una raccolta di <xref href=&quot;System.Windows.Setter&quot;> </xref> e <xref href=&quot;System.Windows.EventSetter&quot;> </xref> oggetti. Il valore predefinito è una raccolta vuota."
  overload: System.Windows.Style.Setters*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)
  id: System#Windows#Markup#IAddChild#AddChild(System.Object)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.IAddChild.AddChild(Object)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddChild(Object)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddChild(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Aggiunge un oggetto figlio."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Windows.Style>esegue il cast dell&quot;istanza di un <xref:System.Windows.Markup.IAddChild>interfaccia.</xref:System.Windows.Markup.IAddChild> </xref:System.Windows.Style>"
  syntax:
    content: void IAddChild.AddChild (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Oggetto figlio da aggiungere."
  overload: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)
  id: System#Windows#Markup#IAddChild#AddText(System.String)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.IAddChild.AddText(String)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddText(String)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddText(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Aggiunge il contenuto di un nodo di testo all&quot;oggetto."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Windows.Style>esegue il cast dell&quot;istanza di un <xref:System.Windows.Markup.IAddChild>interfaccia.</xref:System.Windows.Markup.IAddChild> </xref:System.Windows.Style>"
  syntax:
    content: void IAddChild.AddText (string text);
    parameters:
    - id: text
      type: System.String
      description: "Testo da aggiungere all&quot;oggetto."
  overload: System.Windows.Style.System#Windows#Markup#IAddChild#AddText*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)
  id: System#Windows#Markup#INameScope#FindName(System.String)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.INameScope.FindName(String)
  nameWithType: Style.System.Windows.Markup.INameScope.FindName(String)
  fullName: System.Windows.Style.System.Windows.Markup.INameScope.FindName(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Restituisce un oggetto contenente il nome identificativo specificato."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Windows.Style>esegue il cast dell&quot;istanza di un <xref:System.Windows.Markup.INameScope>interfaccia.</xref:System.Windows.Markup.INameScope> </xref:System.Windows.Style>"
  syntax:
    content: object INameScope.FindName (string name);
    parameters:
    - id: name
      type: System.String
      description: "Identificatore del nome per l&quot;oggetto richiesto."
    return:
      type: System.Object
      description: "L&quot;oggetto, se trovato. Restituisce <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se è stato trovato alcun oggetto di tale nome."
  overload: System.Windows.Style.System#Windows#Markup#INameScope#FindName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  id: System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  isEii: true
  parent: System.Windows.Style
  langs:
  - csharp
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  nameWithType: Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Esegue una query se una proprietà di ambiente specificata è disponibile nell&quot;ambito corrente."
  syntax:
    content: bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "Il nome della proprietà di ambiente richiesto."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la proprietà di ambiente richiesta è disponibile. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.TargetType
  id: TargetType
  parent: System.Windows.Style
  langs:
  - csharp
  name: TargetType
  nameWithType: Style.TargetType
  fullName: System.Windows.Style.TargetType
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta il tipo a cui è destinato questo stile."
  remarks: "È possibile impostare uno stile su qualsiasi elemento che deriva da <xref:System.Windows.FrameworkElement>o <xref:System.Windows.FrameworkContentElement>.</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement> Pertanto, il tipo di destinazione può essere qualsiasi di tali elementi. Tuttavia, se si crea uno stile con una proprietà TargetType e basarla su un altro stile che definisce anche una proprietà TargetType, il tipo di destinazione dello stile derivato deve essere uguale o derivare dal tipo di destinazione dello stile di base.       Se non si specifica un TargetType, quindi è necessario specificare un `x:Key` per il <xref:System.Windows.Style>e qualificare le proprietà nello stile con un nome di classe.</xref:System.Windows.Style>      <a name=&quot;xamlAttributeUsage_TargetType&quot;></a># # Utilizzo dell&quot;attributo XAML ```   <object  TargetType=&quot;{x:Type typeName}&quot;/>   -or-   <object  TargetType=&quot;typeName&quot;/>   ``` <a name=&quot;xamlValues_TargetType&quot;> </a> # # valori XAML `{x:Type ...}` un [estensione di Markup X:Type](~/add/includes/ajax-current-ext-md.md) utilizzo dell&quot;estensione di markup.             *typeName* il nome del tipo della classe."
  example:
  - "The following example defines a style that will be applied to all instances of the <xref:System.Windows.Controls.TextBlock> element.  \n  \n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/photostore/window1.xaml#1)]\n [!code-xml[PhotoStoreDemoStyled#1](~/add/codesnippet/xaml/p-system.windows.style.t_0_1.xaml)]  \n  \n Setting the TargetType property to the <xref:System.Windows.Controls.TextBlock> type without setting an `x:Key` implicitly sets the `x:Key` to `{x:Type TextBlock}`. This also means that if you give the above <xref:System.Windows.Style> an `x:Key` value of anything other than `{x:Type TextBlock}`, the <xref:System.Windows.Style> would not be applied to all <xref:System.Windows.Controls.TextBlock> elements automatically. Instead, you need to apply the style to the <xref:System.Windows.Controls.TextBlock> elements explicitly.  \n  \n Many [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact. For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBox> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBox> controls in the canvas, even if the <xref:System.Windows.Controls.TextBox> is part of another control, such as a <xref:System.Windows.Controls.ComboBox>."
  syntax:
    content: public Type TargetType { get; set; }
    return:
      type: System.Type
      description: "Il tipo di destinazione per questo stile."
  overload: System.Windows.Style.TargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.Triggers
  id: Triggers
  parent: System.Windows.Style
  langs:
  - csharp
  name: Triggers
  nameWithType: Style.Triggers
  fullName: System.Windows.Style.Triggers
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene una raccolta di <xref href=&quot;System.Windows.TriggerBase&quot;> </xref> oggetti che vengono applicati i valori delle proprietà in base alle condizioni specificate."
  remarks: "Il [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] modello di stili e modelli consente di specificare i trigger all&quot;interno del <xref:System.Windows.Style>.</xref:System.Windows.Style> In pratica, i trigger sono oggetti che consentono di applicare le modifiche quando determinate condizioni (ad esempio quando un certo valore della proprietà diventa `true`, o quando si verifica un evento) si è soddisfatti.      <a name=&quot;xamlPropertyElementUsage_Triggers&quot;></a># # Utilizzo degli elementi XAML ```   <object>     <object.Triggers>       oneOrMoreTriggers     </object.Triggers>   </object>   ``` <a name=&quot;xamlValues_Triggers&quot;> </a> # # valori XAML *oneOrMoreTriggers* Zero o più elementi di oggetti che sono classi derivanti da <xref:System.Windows.TriggerBase>.</xref:System.Windows.TriggerBase>      "
  example:
  - "The following example shows a named <xref:System.Windows.Style> available to <xref:System.Windows.Controls.Button> controls. The <xref:System.Windows.Style> defines a <xref:System.Windows.Trigger> element that changes the <xref:System.Windows.Controls.Control.Foreground%2A> property of a button when the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property is `true`.  \n  \n [!code-xml[BtnStyles#2](~/add/codesnippet/xaml/ButtonStyles2/app.xaml#2)]"
  syntax:
    content: public System.Windows.TriggerCollection Triggers { get; }
    return:
      type: System.Windows.TriggerCollection
      description: "Una raccolta di <xref href=&quot;System.Windows.TriggerBase&quot;> </xref> oggetti. Il valore predefinito è una raccolta vuota."
  overload: System.Windows.Style.Triggers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Style.UnregisterName(System.String)
  id: UnregisterName(System.String)
  parent: System.Windows.Style
  langs:
  - csharp
  name: UnregisterName(String)
  nameWithType: Style.UnregisterName(String)
  fullName: System.Windows.Style.UnregisterName(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Rimuove un mapping nome-oggetto dall&quot;ambito dei nomi."
  syntax:
    content: public void UnregisterName (string name);
    parameters:
    - id: name
      type: System.String
      description: "Il nome del mapping da rimuovere."
  overload: System.Windows.Style.UnregisterName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.Windows.Style.#ctor
  parent: System.Windows.Style
  isExternal: false
  name: Style()
  nameWithType: Style.Style()
  fullName: System.Windows.Style.Style()
- uid: System.Windows.Style.#ctor(System.Type)
  parent: System.Windows.Style
  isExternal: false
  name: Style(Type)
  nameWithType: Style.Style(Type)
  fullName: System.Windows.Style.Style(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Style.#ctor(System.Type,System.Windows.Style)
  parent: System.Windows.Style
  isExternal: false
  name: Style(Type,Style)
  nameWithType: Style.Style(Type,Style)
  fullName: System.Windows.Style.Style(Type,Style)
- uid: System.Windows.Style
  parent: System.Windows
  isExternal: false
  name: Style
  nameWithType: Style
  fullName: System.Windows.Style
- uid: System.Windows.Style.BasedOn
  parent: System.Windows.Style
  isExternal: false
  name: BasedOn
  nameWithType: Style.BasedOn
  fullName: System.Windows.Style.BasedOn
- uid: System.Windows.Style.GetHashCode
  parent: System.Windows.Style
  isExternal: false
  name: GetHashCode()
  nameWithType: Style.GetHashCode()
  fullName: System.Windows.Style.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Style.IsSealed
  parent: System.Windows.Style
  isExternal: false
  name: IsSealed
  nameWithType: Style.IsSealed
  fullName: System.Windows.Style.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Style.RegisterName(System.String,System.Object)
  parent: System.Windows.Style
  isExternal: false
  name: RegisterName(String,Object)
  nameWithType: Style.RegisterName(String,Object)
  fullName: System.Windows.Style.RegisterName(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Style.Resources
  parent: System.Windows.Style
  isExternal: false
  name: Resources
  nameWithType: Style.Resources
  fullName: System.Windows.Style.Resources
- uid: System.Windows.ResourceDictionary
  parent: System.Windows
  isExternal: false
  name: ResourceDictionary
  nameWithType: ResourceDictionary
  fullName: System.Windows.ResourceDictionary
- uid: System.Windows.Style.Seal
  parent: System.Windows.Style
  isExternal: false
  name: Seal()
  nameWithType: Style.Seal()
  fullName: System.Windows.Style.Seal()
- uid: System.Windows.Style.Setters
  parent: System.Windows.Style
  isExternal: false
  name: Setters
  nameWithType: Style.Setters
  fullName: System.Windows.Style.Setters
- uid: System.Windows.SetterBaseCollection
  parent: System.Windows
  isExternal: false
  name: SetterBaseCollection
  nameWithType: SetterBaseCollection
  fullName: System.Windows.SetterBaseCollection
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddChild(Object)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddChild(Object)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddChild(Object)
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddText(String)
  nameWithType: Style.System.Windows.Markup.IAddChild.AddText(String)
  fullName: System.Windows.Style.System.Windows.Markup.IAddChild.AddText(String)
- uid: System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.INameScope.FindName(String)
  nameWithType: Style.System.Windows.Markup.INameScope.FindName(String)
  fullName: System.Windows.Style.System.Windows.Markup.INameScope.FindName(String)
- uid: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  nameWithType: Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
- uid: System.Windows.Style.TargetType
  parent: System.Windows.Style
  isExternal: false
  name: TargetType
  nameWithType: Style.TargetType
  fullName: System.Windows.Style.TargetType
- uid: System.Windows.Style.Triggers
  parent: System.Windows.Style
  isExternal: false
  name: Triggers
  nameWithType: Style.Triggers
  fullName: System.Windows.Style.Triggers
- uid: System.Windows.TriggerCollection
  parent: System.Windows
  isExternal: false
  name: TriggerCollection
  nameWithType: TriggerCollection
  fullName: System.Windows.TriggerCollection
- uid: System.Windows.Style.UnregisterName(System.String)
  parent: System.Windows.Style
  isExternal: false
  name: UnregisterName(String)
  nameWithType: Style.UnregisterName(String)
  fullName: System.Windows.Style.UnregisterName(String)
- uid: System.Windows.Style.#ctor*
  parent: System.Windows.Style
  isExternal: false
  name: Style
  nameWithType: Style.Style
- uid: System.Windows.Style.BasedOn*
  parent: System.Windows.Style
  isExternal: false
  name: BasedOn
  nameWithType: Style.BasedOn
- uid: System.Windows.Style.GetHashCode*
  parent: System.Windows.Style
  isExternal: false
  name: GetHashCode
  nameWithType: Style.GetHashCode
- uid: System.Windows.Style.IsSealed*
  parent: System.Windows.Style
  isExternal: false
  name: IsSealed
  nameWithType: Style.IsSealed
- uid: System.Windows.Style.RegisterName*
  parent: System.Windows.Style
  isExternal: false
  name: RegisterName
  nameWithType: Style.RegisterName
- uid: System.Windows.Style.Resources*
  parent: System.Windows.Style
  isExternal: false
  name: Resources
  nameWithType: Style.Resources
- uid: System.Windows.Style.Seal*
  parent: System.Windows.Style
  isExternal: false
  name: Seal
  nameWithType: Style.Seal
- uid: System.Windows.Style.Setters*
  parent: System.Windows.Style
  isExternal: false
  name: Setters
  nameWithType: Style.Setters
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddChild*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddChild
  nameWithType: Style.System.Windows.Markup.IAddChild.AddChild
- uid: System.Windows.Style.System#Windows#Markup#IAddChild#AddText*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IAddChild.AddText
  nameWithType: Style.System.Windows.Markup.IAddChild.AddText
- uid: System.Windows.Style.System#Windows#Markup#INameScope#FindName*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.INameScope.FindName
  nameWithType: Style.System.Windows.Markup.INameScope.FindName
- uid: System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*
  parent: System.Windows.Style
  isExternal: false
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable
  nameWithType: Style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable
- uid: System.Windows.Style.TargetType*
  parent: System.Windows.Style
  isExternal: false
  name: TargetType
  nameWithType: Style.TargetType
- uid: System.Windows.Style.Triggers*
  parent: System.Windows.Style
  isExternal: false
  name: Triggers
  nameWithType: Style.Triggers
- uid: System.Windows.Style.UnregisterName*
  parent: System.Windows.Style
  isExternal: false
  name: UnregisterName
  nameWithType: Style.UnregisterName
