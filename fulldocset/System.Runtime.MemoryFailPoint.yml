### YamlMime:ManagedReference
items:
- uid: System.Runtime.MemoryFailPoint
  id: MemoryFailPoint
  children:
  - System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  - System.Runtime.MemoryFailPoint.Dispose
  - System.Runtime.MemoryFailPoint.Finalize
  langs:
  - csharp
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint
  fullName: System.Runtime.MemoryFailPoint
  type: Class
  summary: "Cerca le risorse di memoria sufficienti prima di eseguire un&quot;operazione. Questa classe non può essere ereditata."
  remarks: "> [!NOTE]> Questa classe è destinata all&quot;uso nello sviluppo avanzato.       Creazione di un&quot;istanza della classe MemoryFailPoint crea un gate di memoria. Gate di memoria controlla prima di avviare un&quot;attività che richiede una grande quantità di memoria sufficienti risorse. Superato il controllo comporta un <xref:System.InsufficientMemoryException>venga generata un&quot;eccezione.</xref:System.InsufficientMemoryException> Questa eccezione impedisce un&quot;operazione di avvio e riduce la possibilità di errore a causa di mancanza di risorse. In questo modo si riduzione delle prestazioni per evitare un <xref:System.OutOfMemoryException>eccezione e qualsiasi stato di errore che può derivare da una gestione errata delle eccezioni in posizioni arbitrarie nel codice.</xref:System.OutOfMemoryException>      > [!IMPORTANT] > Questo tipo implementa il <xref:System.IDisposable>interfaccia.</xref:System.IDisposable> Dopo aver utilizzando il tipo, è necessario eliminarlo di esso direttamente o indirettamente. Per eliminare direttamente il tipo, chiamare il relativo <xref:System.IDisposable.Dispose%2A>metodo in un `try` / `catch` blocco.</xref:System.IDisposable.Dispose%2A> Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio, ad esempio `using` (in c#) o `Using` (in Visual Basic). Per ulteriori informazioni, vedere la sezione &quot;Utilizzo di oggetti che implementano IDisposable&quot; nel <xref:System.IDisposable>argomento relativo all&quot;interfaccia.</xref:System.IDisposable>       Generando un <xref:System.InsufficientMemoryException>eccezione, un&quot;applicazione può distinguere tra una stima che un&quot;operazione non sarà in grado di completare e un&quot;operazione parzialmente completata che ha danneggiato lo stato dell&quot;applicazione.</xref:System.InsufficientMemoryException> In questo modo un&quot;applicazione per ridurre la frequenza dei criteri di escalation pessimistico, che possono richiedere lo scaricamento corrente <xref:System.AppDomain>o il riciclo del processo.</xref:System.AppDomain>       MemoryFailPoint controlla per vedere se sono disponibili in garbage collection per tutti gli heap sufficiente memoria e spazio degli indirizzi virtuali consecutivi e può aumentare le dimensioni del file di scambio.  MemoryFailPoint garantisce in alcun relative alla disponibilità della memoria a lungo termine per la durata del controllo, ma i chiamanti devono usare sempre il <xref:System.Runtime.MemoryFailPoint.Dispose%2A>metodo per garantire che vengano rilasciate le risorse associate MemoryFailPoint.</xref:System.Runtime.MemoryFailPoint.Dispose%2A>       Per utilizzare un gate di memoria, è necessario creare un oggetto MemoryFailPoint e specificare il numero di megabyte (MB) di memoria che deve utilizzare l&quot;operazione successiva. Se non è disponibile memoria sufficiente un <xref:System.InsufficientMemoryException>viene generata un&quot;eccezione.</xref:System.InsufficientMemoryException>       Il parametro del costruttore deve essere un numero intero positivo. Un valore negativo genera un <xref:System.ArgumentOutOfRangeException>eccezione.</xref:System.ArgumentOutOfRangeException>       MemoryFailPoint opera con una granularità di 16 MB. Qualsiasi valore inferiore a 16 MB vengono considerati come 16 MB e altri valori vengono considerati come il successivo più grande multiplo di 16 MB."
  example:
  - "MemoryFailPoint enables an application to slow itself to avoid running out of memory in a corrupting manner.  It should be used within a lexical scope.  The following example launches threads to process items in a work queue.  Before each thread is launched, the available memory resources are checked using MemoryFailPoint.  If an exception is thrown, the main method waits until memory is available before launching the next thread.  \n  \n [!code-cs[MemoryFailPoint#1](~/add/codesnippet/csharp/t-system.runtime.memoryf_1.cs)]"
  syntax:
    content: 'public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> (classe), che specifica la quantità di memoria richiesta per la corretta esecuzione."
  remarks: "La quantità di memoria utilizzata dall&quot;applicazione per elaborare un elemento di lavoro può essere determinata empiricamente.  Per stimare la quantità di memoria necessaria per elaborare una richiesta all&quot;applicazione, è consigliabile utilizzare il <xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>metodo per determinare la quantità di memoria disponibile prima e dopo la chiamata al metodo che elabora l&quot;elemento di lavoro.</xref:System.GC.GetTotalMemory%2A?displayProperty=fullName> Vedere il <xref:System.Runtime.MemoryFailPoint>per un esempio di codice che determina in modo dinamico il valore per il `sizeInMegabytes` parametro.</xref:System.Runtime.MemoryFailPoint>"
  example:
  - "The following example demonstrates how to determine the amount of memory a method requires when executing. This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.  \n  \n [!code-cs[MemoryFailPoint#2](~/add/codesnippet/csharp/m-system.runtime.memoryf_1.cs)]"
  syntax:
    content: public MemoryFailPoint (int sizeInMegabytes);
    parameters:
    - id: sizeInMegabytes
      type: System.Int32
      description: "Le dimensioni di memoria necessaria, in megabyte. Deve trattarsi di un valore positivo."
  overload: System.Runtime.MemoryFailPoint.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "La dimensione specificata per la memoria è negativo."
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "Vi è memoria sufficiente per avviare l&quot;esecuzione del codice protetto dalla verifica."
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Dispose
  id: Dispose
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Rilascia tutte le risorse utilizzate da di <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>."
  remarks: "Chiamare Dispose dopo aver terminato di utilizzare <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> Il metodo Dispose lascia il <xref:System.Runtime.MemoryFailPoint>in uno stato inutilizzabile.</xref:System.Runtime.MemoryFailPoint> Dopo la chiamata <xref:System.Runtime.MemoryFailPoint>, è necessario rilasciare tutti i riferimenti al <xref:System.Runtime.MemoryFailPoint>in modo che il garbage collector può recuperare la memoria che di <xref:System.Runtime.MemoryFailPoint>occupata.</xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md) e [implementazione di un metodo Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Chiamare sempre Dispose prima di rilasciare l&quot;ultimo riferimento a <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> In caso contrario, le risorse non vengono liberate finché il garbage collector chiama la <xref:System.Runtime.MemoryFailPoint>dell&quot;oggetto `Finalize` metodo.</xref:System.Runtime.MemoryFailPoint>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Finalize
  id: Finalize
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Garantisce che le risorse vengano liberate e altre operazioni di pulizia vengono eseguite quando il garbage collector recupera la <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> oggetto."
  remarks: "Quando l&quot;oggetto corrente è pronto per essere completato, il garbage collector chiama il metodo Finalize."
  syntax:
    content: ~MemoryFailPoint ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.MemoryFailPoint.Dispose
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
- uid: System.Runtime.MemoryFailPoint.Finalize
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
- uid: System.Runtime.MemoryFailPoint.#ctor*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint.MemoryFailPoint
- uid: System.Runtime.MemoryFailPoint.Dispose*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose
  nameWithType: MemoryFailPoint.Dispose
- uid: System.Runtime.MemoryFailPoint.Finalize*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize
  nameWithType: MemoryFailPoint.Finalize
