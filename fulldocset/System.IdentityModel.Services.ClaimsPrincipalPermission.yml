### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission
  id: ClaimsPrincipalPermission
  children:
  - System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)
  - System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)
  - System.IdentityModel.Services.ClaimsPrincipalPermission.Copy
  - System.IdentityModel.Services.ClaimsPrincipalPermission.Demand
  - System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)
  - System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)
  - System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)
  - System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted
  - System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml
  - System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: ClaimsPrincipalPermission
  nameWithType: ClaimsPrincipalPermission
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission
  type: Class
  summary: "Rappresenta un&quot;autorizzazione che utilizza un <xref href=&quot;System.Security.Claims.ClaimsAuthorizationManager&quot;> </xref> implementazione per determinare se deve essere concesso l&quot;accesso a una risorsa per l&quot;entità attiva. Questa classe non può essere ereditata."
  remarks: "The ClaimsPrincipalPermission class provides the capability to perform imperative access checks by using the <xref:System.Security.Claims.ClaimsAuthorizationManager> that is configured for an application. By invoking the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> method or the static <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> method, you can provide protection to resources from within the execution path of your code according to the authorization policy defined for your claims authentication manager. Declarative access checks can be performed by using the <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> class.  \n  \n> [!IMPORTANT]\n>  The ClaimsPrincipalPermission class uses the claims authorization manager configured by the <xref:System.IdentityModel.Configuration.IdentityConfiguration> that is set under the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName> property. This is true in all cases, even in scenarios where WS-Federation is not used; for example, active (WCF) Web applications and Console applications. You can specify the claims authorization manager either in configuration or programmatically. To specify the claims authorization manager in a configuration file, set the [\\&lt;claimsAuthorizationManager\\&gt;](../Topic/%3CclaimsAuthorizationManager%3E.md) element under an [\\&lt;identityConfiguration\\&gt;](../Topic/%3CidentityConfiguration%3E.md) element and ensure that this identity configuration is referenced by the [\\&lt;federationConfiguration\\&gt;](../Topic/%3CfederationConfiguration%3E.md) element that is loaded by the runtime (for example, by setting the `identityConfigurationName` attribute). To set the claims authorization manager programmatically, provide a handler for the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=fullName> event.  \n  \n On one level, the functionality provided by ClaimsPrincipalPermission is similar to the role-based access checks (RBAC) provided through the <xref:System.Security.Permissions.PrincipalPermission> class; however, the <xref:System.Security.Claims.ClaimsAuthorizationManager> class performs checks based on the claims presented by the active principal. This enables far more granularity than is available through pure RBAC, where many permissions are typically collected under a single role. Perhaps, more importantly, claims-based authorization enables better separation of business logic and authorization policy because permission can be demanded for a specific action on a resource in code and back-end policy can be used to configure which claims the presenting entity must possess in order to satisfy the demand. Like RBAC, ClaimsPrincipalPermission performs a user-based access check, that is, unlike code access security implemented by classes that derive from the <xref:System.Security.CodeAccessPermission> class and use a stack walk to ensure that all callers of the code have been granted a permission, ClaimsPrincipalPermission performs its check only on the current principal.  \n  \n The static <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> method checks access for a specified action on a specified resource. The resource and action are both strings and are typically URIs. You can also initialize an instance of ClaimsPrincipalPermission with an action and a resource and call the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> method. Although the constructor only takes a single resource and action, ClaimsPrincipalPermission objects can be combined through the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> and <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> methods. A permission created by using these methods may contain multiple resource-action pairs.  \n  \n Both methods determine access by invoking the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName> method of the configured claims authorization manager with an <xref:System.Security.Claims.AuthorizationContext> composed of the active principal (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>), the resource, and the action. They throw a <xref:System.Security.SecurityException> if the current principal is not authorized to perform the action on the resource; otherwise, execution proceeds.  \n  \n In the case of a ClaimsPrincipalPermission that contains multiple resource-action pairs, the <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName> method is invoked for each of the resource-action pairs contained in the permission.  For the call to <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> to succeed, the active principal must be authorized for all of the resource-action pairs contained in the permission."
  example:
  - "The following example shows how to protect a resource by using the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> method, the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> method, or a <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> declaration. In each case, the configured <xref:System.Security.Claims.ClaimsAuthorizationManager> is invoked to evaluate the current principal against the specified resource and action. If the current principal is not authorized for the specified action on the specified resource, a <xref:System.Security.SecurityException> is thrown; otherwise, execution proceeds.  \n  \n [!code-cs[WifCppWithCam#1](~/add/codesnippet/csharp/wifcppwithcam/program.cs#1)]  \n  \n The following XML shows the minimum configuration required to use a custom claims authorization manager with the ClaimsPrincipalPermission class. You must, at a minimum, declare both the `system.identityModel` and the `system.identityModel.services` sections in the `<configSection>` element and then specify your authorization manager in a [\\&lt;claimsAuthorizationManager\\&gt;](../Topic/%3CclaimsAuthorizationManager%3E.md) element under the default identity configuration. This will ensure that your authorization manager is referenced from the default federation configuration. Alternatively, you can specify the name of the identity configuration under which your authorization manager is specified in the `identityConfigurationName` attribute of the [\\&lt;federationConfiguration\\&gt;](../Topic/%3CfederationConfiguration%3E.md) element.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n  <configSections>  \n    <!-- WIF configuration sections -->  \n    <section name=\"system.identityModel\" type=\"System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089\"/>  \n    <section name=\"system.identityModel.services\" type=\"System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089\"/>  \n  </configSections>  \n  \n  <startup>  \n    <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n  </startup>  \n  \n  <system.identityModel>  \n    <identityConfiguration>  \n      <claimsAuthorizationManager type =\"MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager\"/>  \n    </identityConfiguration>  \n  </system.identityModel>  \n  \n</configuration>  \n```"
  syntax:
    content: 'public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission'
  inheritance:
  - System.Object
  implements:
  - System.Security.IPermission
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: ClaimsPrincipalPermission(String,String)
  nameWithType: ClaimsPrincipalPermission.ClaimsPrincipalPermission(String,String)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.ClaimsPrincipalPermission(String,String)
  type: Constructor
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Crea una nuova istanza di <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref> classe."
  remarks: "Il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>oggetto viene inizializzato con la coppia di azione di risorsa specificata.</xref:System.IdentityModel.Services.ClaimsPrincipalPermission> È possibile chiamare il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>metodo per eseguire un controllo di accesso.</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>       Anche se il costruttore accetta solo una singola risorsa e un&quot;azione, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>oggetti possono essere combinati tramite il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>e <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>metodi.</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> </xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> </xref:System.IdentityModel.Services.ClaimsPrincipalPermission> L&quot;autorizzazione creata tramite questi metodi può contenere più coppie di azione della risorsa."
  syntax:
    content: public ClaimsPrincipalPermission (string resource, string action);
    parameters:
    - id: resource
      type: System.String
      description: "La risorsa in cui l&quot;entità deve essere autorizzato."
    - id: action
      type: System.String
      description: "L&quot;azione per il quale l&quot;entità deve essere autorizzato."
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>resource</code>è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o una stringa vuota."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>action</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)
  id: CheckAccess(System.String,System.String)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: CheckAccess(String,String)
  nameWithType: ClaimsPrincipalPermission.CheckAccess(String,String)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(String,String)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Controlla se l&quot;entità corrente è autorizzato a eseguire l&quot;azione specificata nella risorsa specificata."
  remarks: "L&quot;entità deve essere autorizzato per l&quot;azione specificata nella risorsa specificata o <xref:System.Security.SecurityException>viene generata un&quot;eccezione.</xref:System.Security.SecurityException>       Il <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName>viene chiamato metodo del gestore di autorizzazione di attestazioni configurato con un <xref:System.Security.Claims.AuthorizationContext>costituito da entità attiva (<xref:System.Threading.Thread.CurrentPrincipal%2A>), la risorsa e l&quot;azione.</xref:System.Threading.Thread.CurrentPrincipal%2A> </xref:System.Security.Claims.AuthorizationContext> </xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName>"
  example:
  - "The following example shows how to protect a resource by using the CheckAccess method. The configured claims authorization manager is invoked to evaluate the current principal against the specified resource and action. If the current principal is not authorized for the specified action on the specified resource, a <xref:System.Security.SecurityException> is thrown; otherwise, execution proceeds.  \n  \n [!code-cs[WifCppWithCam#2](~/add/codesnippet/csharp/wifcppwithcam/program.cs#2)]"
  syntax:
    content: public static void CheckAccess (string resource, string action);
    parameters:
    - id: resource
      type: System.String
      description: "La risorsa in cui l&quot;entità deve essere autorizzato."
    - id: action
      type: System.String
      description: "L&quot;azione per il quale l&quot;entità deve essere autorizzato."
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "L&quot;entità corrente non è assegnabile da <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>.       - oppure - è presente alcun <xref href=&quot;System.Security.Claims.ClaimsAuthorizationManager&quot;> </xref> configurato."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Il controllo dell&quot;autorizzazione non riuscita."
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy
  id: Copy
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: ClaimsPrincipalPermission.Copy()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Restituisce una copia dell&quot;oggetto corrente <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref> istanza."
  syntax:
    content: public System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Oggetto <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref> copiati dall&quot;istanza corrente."
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand
  id: Demand
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: ClaimsPrincipalPermission.Demand()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Controlla se l&quot;entità corrente è autorizzato per le coppie di azione della risorsa associate all&quot;istanza corrente."
  remarks: "L&quot;entità corrente deve essere autorizzato per tutte le coppie di operazione di risorsa associate a questa istanza o <xref:System.Security.SecurityException>viene generata un&quot;eccezione.</xref:System.Security.SecurityException>       Anche se il costruttore accetta solo una singola risorsa e un&quot;azione, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>oggetti possono essere combinati tramite il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A>e <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A>metodi.</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> </xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> </xref:System.IdentityModel.Services.ClaimsPrincipalPermission> L&quot;autorizzazione creata tramite questi metodi può contenere più coppie di azione della risorsa.       Richiama il metodo di richiesta il <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName>metodo di gestione autorizzazioni attestazioni configurato con un <xref:System.Security.Claims.AuthorizationContext>costituito da entità attiva (<xref:System.Threading.Thread.CurrentPrincipal%2A>), la risorsa e l&quot;azione per ognuna delle coppie di azione di risorse contenute nell&quot;autorizzazione.</xref:System.Threading.Thread.CurrentPrincipal%2A> </xref:System.Security.Claims.AuthorizationContext> </xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName> Per la richiesta abbia esito positivo dell&quot;entità attiva deve essere autorizzata per tutte le coppie di azione della risorsa sono contenute nell&quot;autorizzazione."
  example:
  - "The following example shows how to protect a resource by using the Demand method. The configured claims authorization manager is invoked to evaluate the current principal against the specified resource and action. If the current principal is not authorized for the specified action on the specified resource, a <xref:System.Security.SecurityException> is thrown; otherwise, execution proceeds.  \n  \n [!code-cs[WifCppWithCam#3](~/add/codesnippet/csharp/wifcppwithcam/program.cs#3)]"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "L&quot;entità corrente non è assegnabile da <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref>.       - oppure - è presente alcun <xref href=&quot;System.Security.Claims.ClaimsAuthorizationManager&quot;> </xref> configurato."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Il controllo dell&quot;autorizzazione non riuscita."
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: ClaimsPrincipalPermission.FromXml(SecurityElement)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Consente di ricostruire l&quot;autorizzazione corrente e del relativo stato utilizzando la codifica XML."
  remarks: "Ricostruisce un&quot;autorizzazione rispetto alla codifica XML creato da una chiamata per il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A>metodo.</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A>"
  syntax:
    content: public void FromXml (System.Security.SecurityElement element);
    parameters:
    - id: element
      type: System.Security.SecurityElement
      description: "La codifica XML da usare per ricostruire l&quot;autorizzazione."
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La codifica contiene elementi non riconosciuti o gli attributi o XML in formato errato."
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: ClaimsPrincipalPermission.Intersect(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Restituisce un&quot;autorizzazione che rappresenta l&quot;intersezione dell&quot;autorizzazione corrente e l&quot;autorizzazione specificata."
  remarks: "L&quot;autorizzazione che viene restituito ha solo le coppie di azione della risorsa che erano presenti nell&quot;autorizzazione corrente e nell&quot;autorizzazione specificata. Coppie di azione di risorse presenti in uno solo o l&quot;altra delle autorizzazioni non sono incluse. Per un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>riesca, l&quot;autorizzazione di nuovo, l&quot;entità corrente solo deve essere autorizzato per le coppie di azione di risorse che sono stati comuni per l&quot;autorizzazione corrente e l&quot;autorizzazione specificata.</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>"
  syntax:
    content: public System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Autorizzazione da intersecare con l&quot;autorizzazione corrente. Deve essere un&quot;istanza di <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref>."
    return:
      type: System.Security.IPermission
      description: "Un nuovo <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref> che rappresenta l&quot;intersezione dell&quot;autorizzazione corrente e l&quot;autorizzazione specificata; o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se <code> target </code> è <code> null </code> o non è un&quot;istanza di <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref>."
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: ClaimsPrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Restituisce un valore che indica se l&quot;autorizzazione corrente è un subset dell&quot;autorizzazione specificata."
  remarks: "Se tutte le coppie di azione di risorse contenute nell&quot;autorizzazione corrente sono presenti anche nell&quot;autorizzazione specificata, l&quot;autorizzazione corrente è un subset dell&quot;autorizzazione specificata. Se `target` è `null` o non è un&quot;istanza di <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>, restituisce il IsSubsetOf `false`.</xref:System.IdentityModel.Services.ClaimsPrincipalPermission>"
  syntax:
    content: public bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "L&quot;autorizzazione da testare per la relazione del subset. Deve essere un&quot;istanza di <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;autorizzazione corrente è un subset dell&quot;autorizzazione specificata. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: ClaimsPrincipalPermission.IsUnrestricted()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Restituisce un valore che indica se l&quot;autorizzazione è senza restrizioni."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;autorizzazione è senza restrizioni. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Restituisce sempre <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> che indica che l&quot;autorizzazione è senza restrizioni."
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml
  id: ToXml
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: ClaimsPrincipalPermission.ToXml()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Restituisce il codice XML con codifica in forma di autorizzazione corrente e il relativo stato."
  remarks: "L&quot;entità è possibile ricostruire dal formato XML con codificata chiamando il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A>metodo.</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A>"
  syntax:
    content: public System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "Formato con codificata XML dell&quot;autorizzazione corrente e il relativo stato."
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: ClaimsPrincipalPermission.Union(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Union(IPermission)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "Restituisce una nuova autorizzazione che rappresenta l&quot;unione dell&quot;autorizzazione corrente e l&quot;autorizzazione specificata. <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;></xref>oggetto che dispone di tutte le coppie di azione di risorse che sono presenti nell&quot;istanza corrente e l&quot;istanza di destinazione."
  remarks: "L&quot;autorizzazione che viene restituito dispone di tutte le coppie di azione di risorse che sono presenti nell&quot;autorizzazione corrente e tutte le coppie di azione di risorse che sono presenti l&quot;autorizzazione specificata. Per un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>riesca, l&quot;autorizzazione di nuovo, l&quot;entità corrente deve essere autorizzato per tutte le coppie di azione della risorsa esistente con l&quot;autorizzazione corrente e tutte le coppie di azione della risorsa esistente con l&quot;autorizzazione specificata.</xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A>"
  syntax:
    content: public System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Autorizzazione da combinare con l&quot;autorizzazione corrente. Deve essere di tipo <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref>."
    return:
      type: System.Security.IPermission
      description: "Un nuovo <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref> che rappresenta l&quot;unione dell&quot;autorizzazione corrente e l&quot;autorizzazione specificata; o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se <code> target </code> è <code> null </code> o non è un&quot;istanza di <xref href=&quot;System.IdentityModel.Services.ClaimsPrincipalPermission&quot;> </xref>."
  overload: System.IdentityModel.Services.ClaimsPrincipalPermission.Union*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: ClaimsPrincipalPermission(String,String)
  nameWithType: ClaimsPrincipalPermission.ClaimsPrincipalPermission(String,String)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.ClaimsPrincipalPermission(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: CheckAccess(String,String)
  nameWithType: ClaimsPrincipalPermission.CheckAccess(String,String)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(String,String)
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Copy()
  nameWithType: ClaimsPrincipalPermission.Copy()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Demand()
  nameWithType: ClaimsPrincipalPermission.Demand()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand()
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: ClaimsPrincipalPermission.FromXml(SecurityElement)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: ClaimsPrincipalPermission.Intersect(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(IPermission)
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: ClaimsPrincipalPermission.IsSubsetOf(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: ClaimsPrincipalPermission.IsUnrestricted()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted()
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: ToXml()
  nameWithType: ClaimsPrincipalPermission.ToXml()
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml()
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: ClaimsPrincipalPermission.Union(IPermission)
  fullName: System.IdentityModel.Services.ClaimsPrincipalPermission.Union(IPermission)
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: ClaimsPrincipalPermission
  nameWithType: ClaimsPrincipalPermission.ClaimsPrincipalPermission
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: CheckAccess
  nameWithType: ClaimsPrincipalPermission.CheckAccess
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Copy*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Copy
  nameWithType: ClaimsPrincipalPermission.Copy
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Demand*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Demand
  nameWithType: ClaimsPrincipalPermission.Demand
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: FromXml
  nameWithType: ClaimsPrincipalPermission.FromXml
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Intersect
  nameWithType: ClaimsPrincipalPermission.Intersect
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: ClaimsPrincipalPermission.IsSubsetOf
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: ClaimsPrincipalPermission.IsUnrestricted
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: ToXml
  nameWithType: ClaimsPrincipalPermission.ToXml
- uid: System.IdentityModel.Services.ClaimsPrincipalPermission.Union*
  parent: System.IdentityModel.Services.ClaimsPrincipalPermission
  isExternal: false
  name: Union
  nameWithType: ClaimsPrincipalPermission.Union
