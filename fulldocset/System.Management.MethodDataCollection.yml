### YamlMime:ManagedReference
items:
- uid: System.Management.MethodDataCollection
  id: MethodDataCollection
  children:
  - System.Management.MethodDataCollection.Add(System.String)
  - System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  - System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)
  - System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)
  - System.Management.MethodDataCollection.Count
  - System.Management.MethodDataCollection.GetEnumerator
  - System.Management.MethodDataCollection.IsSynchronized
  - System.Management.MethodDataCollection.Item(System.String)
  - System.Management.MethodDataCollection.Remove(System.String)
  - System.Management.MethodDataCollection.SyncRoot
  - System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: MethodDataCollection
  nameWithType: MethodDataCollection
  fullName: System.Management.MethodDataCollection
  type: Class
  summary: "Rappresenta il set di metodi disponibili nella raccolta."
  remarks: ''
  example:
  - "The following example lists information about the **Win32_Process.Create** method using the <xref:System.Management.MethodData> class. For more information on the **Win32_Process** class, see the Windows Management Instrumentation documentation in the MSDN Library at http://msdn.microsoft.com/library.  \n  \n [!code-vb[wminet_MethodDataCollection#1](~/add/codesnippet/visualbasic/t-system.management.meth_1_1.vb)]\n [!code-cs[wminet_MethodDataCollection#1](~/add/codesnippet/csharp/t-system.management.meth_1_1.cs)]"
  syntax:
    content: 'public class MethodDataCollection : System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.Add(System.String)
  id: Add(System.String)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: MethodDataCollection.Add(String)
  fullName: System.Management.MethodDataCollection.Add(String)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Adds a <xref href=&quot;System.Management.MethodData&quot;></xref> to the <xref href=&quot;System.Management.MethodDataCollection&quot;></xref>. Questo overload verrà aggiunto un nuovo metodo senza parametri alla raccolta."
  remarks: "Aggiunta di <xref:System.Management.MethodData>oggetti per il <xref:System.Management.MethodDataCollection>può essere eseguita solo quando la classe non è presenti istanze.</xref:System.Management.MethodDataCollection> </xref:System.Management.MethodData> Qualsiasi altro caso comporterà un&quot;eccezione.      ## .NET framework sicurezza attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile. Per ulteriori informazioni, vedere [utilizzo di librerie da codice parzialmente attendibile](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void Add (string methodName);
    parameters:
    - id: methodName
      type: System.String
      description: "Il nome del metodo da aggiungere."
  overload: System.Management.MethodDataCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  id: Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Add(String,ManagementBaseObject,ManagementBaseObject)
  nameWithType: MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)
  fullName: System.Management.MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Adds a <xref href=&quot;System.Management.MethodData&quot;></xref> to the <xref href=&quot;System.Management.MethodDataCollection&quot;></xref>. Questo overload verrà aggiunto un nuovo metodo con gli oggetti parametro specificato alla raccolta."
  remarks: "Aggiunta di <xref:System.Management.MethodData>oggetti per il <xref:System.Management.MethodDataCollection>può essere eseguita solo quando la classe non è presenti istanze.</xref:System.Management.MethodDataCollection> </xref:System.Management.MethodData> Qualsiasi altro caso comporterà un&quot;eccezione.      ## .NET framework sicurezza attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile. Per ulteriori informazioni, vedere [utilizzo di librerie da codice parzialmente attendibile](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void Add (string methodName, System.Management.ManagementBaseObject inParameters, System.Management.ManagementBaseObject outParameters);
    parameters:
    - id: methodName
      type: System.String
      description: "Il nome del metodo da aggiungere."
    - id: inParameters
      type: System.Management.ManagementBaseObject
      description: "Il <xref href=&quot;System.Management.ManagementBaseObject&quot;> </xref> contenente i parametri di input al metodo."
    - id: outParameters
      type: System.Management.ManagementBaseObject
      description: "Il <xref href=&quot;System.Management.ManagementBaseObject&quot;> </xref> contenente i parametri di output al metodo."
  overload: System.Management.MethodDataCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: MethodDataCollection.CopyTo(Array,Int32)
  fullName: System.Management.MethodDataCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Copie di <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref> in una matrice."
  remarks: "##.NET framework sicurezza attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile. Per ulteriori informazioni, vedere [utilizzo di librerie da codice parzialmente attendibile](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Matrice da cui copiare la raccolta."
    - id: index
      type: System.Int32
      description: "L&quot;indice da cui iniziare."
  overload: System.Management.MethodDataCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)
  id: CopyTo(System.Management.MethodData[],System.Int32)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: CopyTo(MethodData[],Int32)
  nameWithType: MethodDataCollection.CopyTo(MethodData[],Int32)
  fullName: System.Management.MethodDataCollection.CopyTo(MethodData[],Int32)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Copie di <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref> per un tipo specializzato <xref href=&quot;System.Management.MethodData&quot;> </xref> matrice."
  remarks: "##.NET framework sicurezza attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile. Per ulteriori informazioni, vedere [utilizzo di librerie da codice parzialmente attendibile](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void CopyTo (System.Management.MethodData[] methodArray, int index);
    parameters:
    - id: methodArray
      type: System.Management.MethodData[]
      description: "Matrice di destinazione in cui copiare la <xref href=&quot;System.Management.MethodData&quot;> </xref> oggetti."
    - id: index
      type: System.Int32
      description: "L&quot;indice nella matrice di destinazione da cui iniziare la copia."
  overload: System.Management.MethodDataCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.Count
  id: Count
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Count
  nameWithType: MethodDataCollection.Count
  fullName: System.Management.MethodDataCollection.Count
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Ottiene il numero di oggetti di <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref> insieme."
  remarks: "##Il numero di oggetti di <xref:System.Management.MethodDataCollection>.</xref:System.Management.MethodDataCollection> valore della proprietà      ## .NET framework sicurezza attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile. Per ulteriori informazioni, vedere [utilizzo di librerie da codice parzialmente attendibile](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Restituisce un <xref:System.Int32>che rappresenta il numero di oggetti nella raccolta.</xref:System.Int32>"
  overload: System.Management.MethodDataCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: MethodDataCollection.GetEnumerator()
  fullName: System.Management.MethodDataCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Restituisce un enumeratore per il <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref>."
  remarks: "Ogni chiamata a questo metodo restituisce un enumeratore di nuovo la raccolta. È possibile ottenere più enumeratori per lo stesso insieme di metodo. Tuttavia, ogni enumeratore crea uno snapshot della raccolta, in modo non vengono riflesse le modifiche apportate alla raccolta dopo l&quot;enumeratore è stato ottenuto.       È possibile solo eseguire l&quot;iterazione (come in Visual Basic .NET `For Each` istruzione o c# `For` istruzione) tramite un enumeratore di tipo forward-only una sola volta. La memoria che contiene le istanze viene rilasciata da WMI in modo che l&quot;enumeratore non può essere riavvolto. Pertanto, il <xref:System.Management.MethodDataCollection.Count%2A>metodo non può essere utilizzato poiché richiede l&quot;azzeramento dell&quot;enumeratore.</xref:System.Management.MethodDataCollection.Count%2A>       Gli enumeratori forward-only sono in genere molto più veloci e utilizzano meno memoria convenzionali enumeratori, ma non consentono le chiamate a <xref:System.Management.MethodDataCollection.MethodDataEnumerator.Reset%2A>.</xref:System.Management.MethodDataCollection.MethodDataEnumerator.Reset%2A>       Se l&quot;enumeratore è riavvolgibili, gli oggetti nella raccolta rimarrà disponibili per più enumerazioni.      ## .NET framework sicurezza attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile. Per ulteriori informazioni, vedere [utilizzo di librerie da codice parzialmente attendibile](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Management.MethodDataCollection.MethodDataEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Management.MethodDataCollection.MethodDataEnumerator
      description: "Un <xref:System.Collections.IEnumerator>per scorrere la raccolta.</xref:System.Collections.IEnumerator>"
  overload: System.Management.MethodDataCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: MethodDataCollection.IsSynchronized
  fullName: System.Management.MethodDataCollection.IsSynchronized
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Ottiene un valore che indica se l&quot;oggetto è sincronizzato."
  remarks: "##Valore della proprietà `true` se l&quot;oggetto è sincronizzato; in caso contrario, `false`.      ## .NET framework sicurezza attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile. Per ulteriori informazioni, vedere [utilizzo di librerie da codice parzialmente attendibile](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Restituisce un <xref:System.Boolean>valore che indica se l&quot;oggetto è sincronizzato.</xref:System.Boolean>"
  overload: System.Management.MethodDataCollection.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.Item(System.String)
  id: Item(System.String)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: MethodDataCollection.Item(String)
  fullName: System.Management.MethodDataCollection.Item(String)
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Ottiene l&quot;oggetto specificato <xref href=&quot;System.Management.MethodData&quot;> </xref> dal <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref>."
  remarks: "##Proprietà A valore <xref:System.Management.MethodData>contenente tutte le informazioni relative al metodo specificato.</xref:System.Management.MethodData>      ## .NET framework sicurezza attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile. Per ulteriori informazioni, vedere [utilizzo di librerie da codice parzialmente attendibile](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual System.Management.MethodData this[string methodName] { get; }
    parameters:
    - id: methodName
      type: System.String
      description: "Il nome del metodo richiesto."
    return:
      type: System.Management.MethodData
      description: "Restituisce un <xref href=&quot;System.Management.MethodData&quot;> </xref> contenente i dati del metodo per un metodo specificato dalla raccolta."
  overload: System.Management.MethodDataCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: MethodDataCollection.Remove(String)
  fullName: System.Management.MethodDataCollection.Remove(String)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Removes a <xref href=&quot;System.Management.MethodData&quot;></xref> from the <xref href=&quot;System.Management.MethodDataCollection&quot;></xref>."
  remarks: "Rimozione di <xref:System.Management.MethodData>oggetti dal <xref:System.Management.MethodDataCollection>può essere eseguita solo quando la classe non è presenti istanze.</xref:System.Management.MethodDataCollection> </xref:System.Management.MethodData> Qualsiasi altro caso comporterà un&quot;eccezione.      ## .NET framework sicurezza attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile. Per ulteriori informazioni, vedere [utilizzo di librerie da codice parzialmente attendibile](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void Remove (string methodName);
    parameters:
    - id: methodName
      type: System.String
      description: "Il nome del metodo da rimuovere dalla raccolta."
  overload: System.Management.MethodDataCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.SyncRoot
  id: SyncRoot
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: MethodDataCollection.SyncRoot
  fullName: System.Management.MethodDataCollection.SyncRoot
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Ottiene l&quot;oggetto da utilizzare per la sincronizzazione."
  remarks: "##Valore della proprietà oggetto da utilizzare per la sincronizzazione.      ## .NET framework sicurezza attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile. Per ulteriori informazioni, vedere [utilizzo di librerie da codice parzialmente attendibile](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "Restituisce un <xref:System.Object>valore che rappresenta l&quot;oggetto da utilizzare per la sincronizzazione.</xref:System.Object>"
  overload: System.Management.MethodDataCollection.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Management.MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: "Restituisce un <xref:System.Collections.IEnumerator>che scorre la <xref href=&quot;System.Management.MethodDataCollection&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic, c#]       Il `foreach` istruzione del linguaggio c# (`for each` in Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, l&quot;utilizzo `foreach` è consigliabile, anziché la modifica diretta dell&quot;enumeratore.       È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non possono essere utilizzati per modificare la raccolta sottostante.       Inizialmente l&quot;enumeratore è posizionato prima del primo elemento nella raccolta. <xref:System.Collections.IEnumerator.Reset%2A>riporta l&quot;enumeratore in questa posizione.</xref:System.Collections.IEnumerator.Reset%2A> In questa posizione, la chiamata <xref:System.Collections.IEnumerator.Current%2A>genera un&quot;eccezione.</xref:System.Collections.IEnumerator.Current%2A> Pertanto, è necessario chiamare <xref:System.Collections.IEnumerator.MoveNext%2A>per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Restituisce lo stesso oggetto finché non <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>viene chiamato.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>imposta <xref:System.Collections.IEnumerator.Current%2A>all&quot;elemento successivo.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>raggiunge la fine della raccolta, l&quot;enumeratore è posizionato dopo l&quot;ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A>restituisce `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando l&quot;enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A>restituire anche `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se l&quot;ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>restituito `false`, la chiamata <xref:System.Collections.IEnumerator.Current%2A>genera un&quot;eccezione.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Per impostare <xref:System.Collections.IEnumerator.Current%2A>il primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A>seguito dal <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l&quot;enumeratore viene invalidato e la successiva chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>Genera un <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Se la raccolta viene modificata tra <xref:System.Collections.IEnumerator.MoveNext%2A>e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>restituisce l&quot;elemento su cui è stata impostata, anche se l&quot;enumeratore risulta già invalidato.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       L&quot;enumeratore non dispone di accesso esclusivo alla raccolta. Pertanto, l&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.       Questo metodo è un&quot;operazione o (1)."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Management.MethodDataCollection&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Management.MethodDataCollection.Add(System.String)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Add(String)
  nameWithType: MethodDataCollection.Add(String)
  fullName: System.Management.MethodDataCollection.Add(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Add(String,ManagementBaseObject,ManagementBaseObject)
  nameWithType: MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)
  fullName: System.Management.MethodDataCollection.Add(String,ManagementBaseObject,ManagementBaseObject)
- uid: System.Management.ManagementBaseObject
  parent: System.Management
  isExternal: false
  name: ManagementBaseObject
  nameWithType: ManagementBaseObject
  fullName: System.Management.ManagementBaseObject
- uid: System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: MethodDataCollection.CopyTo(Array,Int32)
  fullName: System.Management.MethodDataCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: CopyTo(MethodData[],Int32)
  nameWithType: MethodDataCollection.CopyTo(MethodData[],Int32)
  fullName: System.Management.MethodDataCollection.CopyTo(MethodData[],Int32)
- uid: System.Management.MethodData[]
  parent: System.Management
  isExternal: false
  name: MethodData
  nameWithType: MethodData
  fullName: System.Management.MethodData[]
  spec.csharp:
  - uid: System.Management.MethodData
    name: MethodData
    nameWithType: MethodData
    fullName: MethodData[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Management.MethodDataCollection.Count
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Count
  nameWithType: MethodDataCollection.Count
  fullName: System.Management.MethodDataCollection.Count
- uid: System.Management.MethodDataCollection.GetEnumerator
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: MethodDataCollection.GetEnumerator()
  fullName: System.Management.MethodDataCollection.GetEnumerator()
- uid: System.Management.MethodDataCollection.MethodDataEnumerator
  parent: System.Management
  isExternal: false
  name: MethodDataCollection+MethodDataEnumerator
  nameWithType: MethodDataCollection+MethodDataEnumerator
  fullName: System.Management.MethodDataCollection+MethodDataEnumerator
- uid: System.Management.MethodDataCollection.IsSynchronized
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: MethodDataCollection.IsSynchronized
  fullName: System.Management.MethodDataCollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Management.MethodDataCollection.Item(System.String)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Item(String)
  nameWithType: MethodDataCollection.Item(String)
  fullName: System.Management.MethodDataCollection.Item(String)
- uid: System.Management.MethodData
  parent: System.Management
  isExternal: false
  name: MethodData
  nameWithType: MethodData
  fullName: System.Management.MethodData
- uid: System.Management.MethodDataCollection.Remove(System.String)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Remove(String)
  nameWithType: MethodDataCollection.Remove(String)
  fullName: System.Management.MethodDataCollection.Remove(String)
- uid: System.Management.MethodDataCollection.SyncRoot
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: SyncRoot
  nameWithType: MethodDataCollection.SyncRoot
  fullName: System.Management.MethodDataCollection.SyncRoot
- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Management.MethodDataCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Management.MethodDataCollection.Add*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Add
  nameWithType: MethodDataCollection.Add
- uid: System.Management.MethodDataCollection.CopyTo*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: CopyTo
  nameWithType: MethodDataCollection.CopyTo
- uid: System.Management.MethodDataCollection.Count*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Count
  nameWithType: MethodDataCollection.Count
- uid: System.Management.MethodDataCollection.GetEnumerator*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: MethodDataCollection.GetEnumerator
- uid: System.Management.MethodDataCollection.IsSynchronized*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: MethodDataCollection.IsSynchronized
- uid: System.Management.MethodDataCollection.Item*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Item
  nameWithType: MethodDataCollection.Item
- uid: System.Management.MethodDataCollection.Remove*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Remove
  nameWithType: MethodDataCollection.Remove
- uid: System.Management.MethodDataCollection.SyncRoot*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: SyncRoot
  nameWithType: MethodDataCollection.SyncRoot
- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: MethodDataCollection.System.Collections.IEnumerable.GetEnumerator
