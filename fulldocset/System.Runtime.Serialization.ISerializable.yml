### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.ISerializable
  id: ISerializable
  children:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
  type: Interface
  summary: "Consente a un oggetto controllare la propria serializzazione e deserializzazione."
  remarks: "Qualsiasi classe che può essere serializzato deve essere contrassegnato con <xref:System.SerializableAttribute>.</xref:System.SerializableAttribute> Per controllare il processo di serializzazione, una classe può implementare l&quot;interfaccia ISerializable. Il <xref:System.Runtime.Serialization.Formatter>chiamate di <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>in fase di serializzazione e popola l&quot;oggetto specificato <xref:System.Runtime.Serialization.SerializationInfo>con tutti i dati necessari per rappresentare l&quot;oggetto.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.Formatter> Il <xref:System.Runtime.Serialization.Formatter>Crea un <xref:System.Runtime.Serialization.SerializationInfo>con il tipo dell&quot;oggetto nel grafico.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.Formatter> Gli oggetti che devono inviare proxy per se stessi possono utilizzare il <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>e <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>metodi su <xref:System.Runtime.Serialization.SerializationInfo>per modificare le informazioni trasmesse.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> </xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>       Nel caso di ereditarietà della classe, è possibile serializzare una classe che deriva da una classe di base che implementa ISerializable. In questo caso, la classe derivata deve chiamare l&quot;implementazione della classe di base <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>all&quot;interno dell&quot;implementazione di <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> In caso contrario, non essere serializzati i dati dalla classe di base.       L&quot;interfaccia ISerializable implica un costruttore con la firma constructor (<xref:System.Runtime.Serialization.SerializationInfo> informazioni <xref:System.Runtime.Serialization.StreamingContext>contesto).</xref:System.Runtime.Serialization.StreamingContext> </xref:System.Runtime.Serialization.SerializationInfo> In fase di deserializzazione viene chiamato il costruttore corrente solo dopo i dati di <xref:System.Runtime.Serialization.SerializationInfo>è stato deserializzato dal formattatore.</xref:System.Runtime.Serialization.SerializationInfo> In generale, questo costruttore deve essere protetto se la classe non sealed.       Non è possibile garantire l&quot;ordine in cui gli oggetti vengono deserializzati. Ad esempio, se un tipo fa riferimento a un tipo che non è ancora stato deserializzato, verificherà un&quot;eccezione. Se si creano tipi che dispongono di tali dipendenze, è possibile risolvere il problema mediante l&quot;implementazione di `IDeserializationCallback` interfaccia e `OnDeserialization` metodo.       Architettura di serializzazione gestisce i tipi di oggetti che estendono <xref:System.MarshalByRefObject>come tipi che estendono <xref:System.Object>.</xref:System.Object> </xref:System.MarshalByRefObject> Questi tipi possono essere contrassegnati con il <xref:System.SerializableAttribute>e implementare l&quot;interfaccia ISerializable come qualsiasi altro tipo di oggetto.</xref:System.SerializableAttribute> Lo stato dell&quot;oggetto sarà acquisito e resa persistente nel flusso.       Quando vengono utilizzati questi tipi tramite <xref:System.Runtime.Remoting>, l&quot;infrastruttura remota fornisce un surrogato che ha la precedenza sulla tipica serializzazione e serializza invece un proxy per <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> </xref:System.Runtime.Remoting> Un surrogato è un supporto in grado di serializzare e deserializzare gli oggetti di un determinato tipo. Il proxy, invisibile all&quot;utente nella maggior parte dei casi, sarà di tipo <xref:System.Runtime.Remoting.ObjRef>.</xref:System.Runtime.Remoting.ObjRef>       Come un modello di progettazione generali, sarebbe insolito per una classe di essere contrassegnato con l&quot;attributo serializable ed estendere <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> Gli sviluppatori devono considerare con attenzione i possibili scenari di serializzazione e i servizi remoti durante la combinazione di queste due caratteristiche. È un esempio in cui potrebbe essere applicabile con un <xref:System.IO.MemoryStream>.</xref:System.IO.MemoryStream> Quando la classe di base <xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) si estende da <xref:System.MarshalByRefObject>, è possibile acquisire lo stato di un <xref:System.IO.MemoryStream>e ripristinarlo quando necessario.</xref:System.IO.MemoryStream> </xref:System.MarshalByRefObject> </xref:System.IO.Stream> </xref:System.IO.MemoryStream> Potrebbe, pertanto, essere significativo per serializzare lo stato del flusso in un database e ripristinarlo in un momento successivo nel tempo. Tuttavia, quando utilizzato tramite i servizi remoti, un oggetto di questo tipo sarebbe elaborato.       Per ulteriori informazioni sulla serializzazione delle classi che estendono <xref:System.MarshalByRefObject>, vedere <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector> </xref:System.MarshalByRefObject> Per ulteriori informazioni sull&quot;implementazione di ISerializable, vedere [la serializzazione personalizzata](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the ISerializable interface to define custom serialization behavior for a class.  \n  \n [!code-cpp[ISerializable Interface Example#1](~/add/codesnippet/cpp/t-system.runtime.seriali_4_1.cpp)]\n [!code-cs[ISerializable Interface Example#1](~/add/codesnippet/csharp/t-system.runtime.seriali_4_1.cs)]\n [!code-vb[ISerializable Interface Example#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_4_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ISerializable
  implements: []
  platform:
  - net462
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "Popola un <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> con i dati necessari per serializzare l&quot;oggetto di destinazione."
  remarks: "Tutti gli oggetti inclusi nel <xref:System.Runtime.Serialization.SerializationInfo>vengono automaticamente rilevati e serializzati dal formattatore.</xref:System.Runtime.Serialization.SerializationInfo>       Codice che chiama GetObjectData richiede il <xref:System.Security.Permissions.SecurityPermission>per fornire servizi di serializzazione.</xref:System.Security.Permissions.SecurityPermission> Enumerazione associata: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>      > [!NOTE] > Non è garantito che questo metodo verrà chiamato solo una volta per ogni istanza dell&quot;oggetto durante la serializzazione. Pertanto, il metodo deve essere implementato in modo che il relativo comportamento sarà lo stesso indipendentemente dal numero di volte in cui che viene chiamato."
  example:
  - "The following example uses the GetObjectData method to set alternate values for a serialized object. The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized. Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.  \n  \n [!code-cs[ISerializable_GetObjectData#0](~/add/codesnippet/csharp/8416df17-ca26-45ef-baab-_1.cs)]\n [!code-vb[ISerializable_GetObjectData#0](~/add/codesnippet/visualbasic/8416df17-ca26-45ef-baab-_1.vb)]"
  syntax:
    content: public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Il <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> da popolare con i dati."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "La destinazione (vedere <xref:System.Runtime.Serialization.StreamingContext>) per questa serializzazione.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Runtime.Serialization.ISerializable.GetObjectData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Il chiamante non dispone dell&quot;autorizzazione richiesta."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.Serialization.ISerializable.GetObjectData*
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData
  nameWithType: ISerializable.GetObjectData
