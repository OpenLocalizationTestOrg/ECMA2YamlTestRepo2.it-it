### YamlMime:ManagedReference
items:
- uid: System.Workflow.Activities.SetStateEventArgs
  id: SetStateEventArgs
  children:
  - System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)
  - System.Workflow.Activities.SetStateEventArgs.TargetStateName
  langs:
  - csharp
  name: "SetStateEventArgs"
  nameWithType: SetStateEventArgs
  fullName: System.Workflow.Activities.SetStateEventArgs
  type: Class
  summary: Represents a class that is used as an argument to set the state of a <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity"></see>.
  remarks: "> [!NOTE]\n>  [!INCLUDE[DeprecatedContent](~/add/includes/deprecatedcontent-md.md)]  \n  \n The <xref:System.Workflow.Activities.StateMachineWorkflowActivity> allows for setting the state from the host application. This enables the host application to override the current state of a state machine. This can be accomplished by enqueuing an instance of the SetStateEventArgs class to the WorkflowQueue named by the constant <xref:System.Workflow.Activities.StateMachineWorkflowActivity.SetStateQueueName?displayProperty=fullName>.  \n  \n A simpler way to accomplish this is to use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method in the <xref:System.Workflow.Activities.StateMachineWorkflowInstance> class.  \n  \n You can use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method to perform a SetState operation from the host, or you can do it yourself by enqueuing an event to the state machine workflow as shown in the following example.  \n  \n```  \npublic void SetState(string targetStateName)  \n{  \n      if (targetStateName == null)  \n      {  \n            throw new ArgumentNullException(\"targetStateName\");  \n      }  \n      SetStateEventArgs args1 = new SetStateEventArgs(targetStateName);  \n      this.WorkflowInstance.EnqueueItemOnIdle(\"SetStateQueue\", args1, null, null);  \n}  \n```  \n  \n The state machine workflow uses a special queue called `SetStateQueue` to listen to these special events."
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class SetStateEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Workflow.Activities.SetStateEventArgs
  langs:
  - csharp
  name: "SetStateEventArgs(String)"
  nameWithType: SetStateEventArgs.SetStateEventArgs(String)
  fullName: System.Workflow.Activities.SetStateEventArgs.SetStateEventArgs(String)
  type: Constructor
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: Initializes a new instance of the <see cref="T:System.Workflow.Activities.SetStateEventArgs"></see> class.
  syntax:
    content: public SetStateEventArgs (string targetStateName);
    parameters:
    - id: targetStateName
      type: System.String
      description: "The state to set the  to."
  overload: System.Workflow.Activities.SetStateEventArgs.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Workflow.Activities.SetStateEventArgs.TargetStateName
  id: TargetStateName
  parent: System.Workflow.Activities.SetStateEventArgs
  langs:
  - csharp
  name: "TargetStateName"
  nameWithType: SetStateEventArgs.TargetStateName
  fullName: System.Workflow.Activities.SetStateEventArgs.TargetStateName
  type: Property
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: Gets the state to set the <see cref="T:System.Workflow.Activities.StateActivity"></see> to.
  syntax:
    content: public string TargetStateName { get; }
    return:
      type: System.String
      description: "The state to set the <see cref=&quot;T:System.Workflow.Activities.StateActivity&quot;></see> to."
  overload: System.Workflow.Activities.SetStateEventArgs.TargetStateName*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.EventArgs
  isExternal: false
  name: "System.EventArgs"
- uid: System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)
  parent: System.Workflow.Activities.SetStateEventArgs
  isExternal: false
  name: "SetStateEventArgs(String)"
  nameWithType: SetStateEventArgs.SetStateEventArgs(String)
  fullName: System.Workflow.Activities.SetStateEventArgs.SetStateEventArgs(String)
- uid: System.String
  parent: System
  isExternal: true
  name: "String"
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Activities.SetStateEventArgs.TargetStateName
  parent: System.Workflow.Activities.SetStateEventArgs
  isExternal: false
  name: "TargetStateName"
  nameWithType: SetStateEventArgs.TargetStateName
  fullName: System.Workflow.Activities.SetStateEventArgs.TargetStateName
- uid: System.Workflow.Activities.SetStateEventArgs.#ctor*
  parent: System.Workflow.Activities.SetStateEventArgs
  isExternal: false
  name: "SetStateEventArgs"
  nameWithType: SetStateEventArgs.SetStateEventArgs
- uid: System.Workflow.Activities.SetStateEventArgs.TargetStateName*
  parent: System.Workflow.Activities.SetStateEventArgs
  isExternal: false
  name: "TargetStateName"
  nameWithType: SetStateEventArgs.TargetStateName
