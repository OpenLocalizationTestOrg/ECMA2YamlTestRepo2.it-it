### YamlMime:ManagedReference
items:
- uid: System.Windows.IWeakEventListener
  id: IWeakEventListener
  children:
  - System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  langs:
  - csharp
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
  type: Interface
  summary: "Fornisce il supporto di ascolto dell&quot;evento per le classi che prevede di ricevere eventi tramite il modello WeakEvent e <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref>."
  remarks: "Il <xref:System.Windows.WeakEventManager>(un dispatcher) inoltra un evento chiamando il <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>metodo nelle classi che implementano questa interfaccia e che sono stati aggiunti come listener chiamando <xref:System.Windows.WeakEventManager>metodi in anticipo.</xref:System.Windows.WeakEventManager> </xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> </xref:System.Windows.WeakEventManager>       La ragione principale per seguire il modello WeakEvent è quando l&quot;origine eventi ha una durata di oggetti che potenzialmente indipendente dai listener di eventi. Tramite l&quot;invio dell&quot;evento centrale di un <xref:System.Windows.WeakEventManager>Abilita i gestori per i listener per la garbage collection (o eliminarli manualmente) anche se la durata dell&quot;oggetto di origine si estende oltre i listener.</xref:System.Windows.WeakEventManager> Al contrario, un associazione dell&quot;evento normale utilizzando `+=` o sintassi equivalente eventi specifici della lingua fa sì che l&quot;origine potenzialmente ancora connessa a un riferimento forte ai gestori. In questo modo i riferimenti di listener dalla procedura di garbage collection in modo tempestivo.       Una situazione comune in cui le relazioni tra origini e i listener suggerisce l&quot;utilizzo di questo modello è la gestione degli eventi di aggiornamento provenienti da origini per i data binding.       È possibile utilizzare il modello WeakEvent in ascolto di eventi che sono esterni all&quot;applicazione. È necessario definire un <xref:System.Windows.WeakEventManager>, fornire il comportamento di attesa in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>e utilizzare il <xref:System.Windows.WeakEventManager>per associare il gestore fa riferimento a anziché `+=`.</xref:System.Windows.WeakEventManager> </xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> </xref:System.Windows.WeakEventManager>"
  syntax:
    content: public interface IWeakEventListener
  implements: []
  platform:
  - net462
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  id: ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  parent: System.Windows.IWeakEventListener
  langs:
  - csharp
  name: ReceiveWeakEvent(Type,Object,EventArgs)
  nameWithType: IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
  fullName: System.Windows.IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Riceve gli eventi dal gestore eventi centralizzato."
  remarks: ''
  example:
  - "The following example implements ReceiveWeakEvent to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown). This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`). The implementation returns `false` if the event received is not one that is expected.  \n  \n [!code-cs[CorePseudocode#IWeakEventListener](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#iweakeventlistener)]\n [!code-vb[CorePseudocode#IWeakEventListener](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#iweakeventlistener)]"
  syntax:
    content: public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);
    parameters:
    - id: managerType
      type: System.Type
      description: "Il tipo di <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> chiamare questo metodo."
    - id: sender
      type: System.Object
      description: "Oggetto che ha generato l&quot;evento."
    - id: e
      type: System.EventArgs
      description: "Dati dell&quot;evento."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il listener ha gestito l&quot;evento. Viene considerato un errore per il <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> gestione in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] per registrare un listener per un evento che viene gestito dal listener. In ogni caso, il metodo deve restituire <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se riceve un evento che non riconosce o gestire."
  overload: System.Windows.IWeakEventListener.ReceiveWeakEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)
  parent: System.Windows.IWeakEventListener
  isExternal: false
  name: ReceiveWeakEvent(Type,Object,EventArgs)
  nameWithType: IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
  fullName: System.Windows.IWeakEventListener.ReceiveWeakEvent(Type,Object,EventArgs)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent*
  parent: System.Windows.IWeakEventListener
  isExternal: false
  name: ReceiveWeakEvent
  nameWithType: IWeakEventListener.ReceiveWeakEvent
