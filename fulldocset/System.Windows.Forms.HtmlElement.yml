### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.HtmlElement
  id: HtmlElement
  children:
  - System.Windows.Forms.HtmlElement.All
  - System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlElement.CanHaveChildren
  - System.Windows.Forms.HtmlElement.Children
  - System.Windows.Forms.HtmlElement.Click
  - System.Windows.Forms.HtmlElement.ClientRectangle
  - System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlElement.Document
  - System.Windows.Forms.HtmlElement.DomElement
  - System.Windows.Forms.HtmlElement.DoubleClick
  - System.Windows.Forms.HtmlElement.Drag
  - System.Windows.Forms.HtmlElement.DragEnd
  - System.Windows.Forms.HtmlElement.DragLeave
  - System.Windows.Forms.HtmlElement.DragOver
  - System.Windows.Forms.HtmlElement.Enabled
  - System.Windows.Forms.HtmlElement.Equals(System.Object)
  - System.Windows.Forms.HtmlElement.FirstChild
  - System.Windows.Forms.HtmlElement.Focus
  - System.Windows.Forms.HtmlElement.Focusing
  - System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  - System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  - System.Windows.Forms.HtmlElement.GetHashCode
  - System.Windows.Forms.HtmlElement.GotFocus
  - System.Windows.Forms.HtmlElement.Id
  - System.Windows.Forms.HtmlElement.InnerHtml
  - System.Windows.Forms.HtmlElement.InnerText
  - System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  - System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  - System.Windows.Forms.HtmlElement.KeyDown
  - System.Windows.Forms.HtmlElement.KeyPress
  - System.Windows.Forms.HtmlElement.KeyUp
  - System.Windows.Forms.HtmlElement.LosingFocus
  - System.Windows.Forms.HtmlElement.LostFocus
  - System.Windows.Forms.HtmlElement.MouseDown
  - System.Windows.Forms.HtmlElement.MouseEnter
  - System.Windows.Forms.HtmlElement.MouseLeave
  - System.Windows.Forms.HtmlElement.MouseMove
  - System.Windows.Forms.HtmlElement.MouseOver
  - System.Windows.Forms.HtmlElement.MouseUp
  - System.Windows.Forms.HtmlElement.Name
  - System.Windows.Forms.HtmlElement.NextSibling
  - System.Windows.Forms.HtmlElement.OffsetParent
  - System.Windows.Forms.HtmlElement.OffsetRectangle
  - System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.OuterHtml
  - System.Windows.Forms.HtmlElement.OuterText
  - System.Windows.Forms.HtmlElement.Parent
  - System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  - System.Windows.Forms.HtmlElement.RemoveFocus
  - System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  - System.Windows.Forms.HtmlElement.ScrollLeft
  - System.Windows.Forms.HtmlElement.ScrollRectangle
  - System.Windows.Forms.HtmlElement.ScrollTop
  - System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  - System.Windows.Forms.HtmlElement.Style
  - System.Windows.Forms.HtmlElement.TabIndex
  - System.Windows.Forms.HtmlElement.TagName
  langs:
  - csharp
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: System.Windows.Forms.HtmlElement
  type: Class
  summary: "Rappresenta un elemento HTML all&quot;interno di una pagina Web."
  remarks: "HtmlElement rappresenta qualsiasi tipo di elemento in un documento HTML, ad esempio `BODY`, `TABLE`, e `FORM`, tra gli altri. La classe espone le proprietà più comuni che è possibile prevedere trovare tutti gli elementi.       La maggior parte degli elementi può avere *gli elementi figlio*: altri elementi HTML che vengono posizionate di sotto di essi. Utilizzare il <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>proprietà per verificare se un determinato elemento ha elementi figlio e <xref:System.Windows.Forms.HtmlElement.Children%2A>insieme per scorrere gli.</xref:System.Windows.Forms.HtmlElement.Children%2A> </xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> Il <xref:System.Windows.Forms.HtmlElement.Parent%2A>proprietà restituisce il tipo di HtmlElement in cui è annidato l&quot;elemento corrente.</xref:System.Windows.Forms.HtmlElement.Parent%2A>       È spesso necessario accedere ad attributi, proprietà e metodi per l&quot;elemento sottostante che non sono direttamente esposti da HtmlElement, ad esempio il `SRC` dell&quot;attributo su un `IMG` elemento o `Submit` metodo su un `FORM`. Il <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>e <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>metodi consentono di recuperare e modificare qualsiasi attributo o una proprietà di un elemento specifico, mentre <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>fornisce l&quot;accesso ai metodi non esposti nel modello oggetto gestito documento (DOM).</xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> </xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> </xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> Se l&quot;applicazione dispone di autorizzazione per codice non gestito, è possibile accedere anche non esposti proprietà e metodi con il <xref:System.Windows.Forms.HtmlElement.DomElement%2A>attributo.</xref:System.Windows.Forms.HtmlElement.DomElement%2A>       Utilizzare il <xref:System.Windows.Forms.HtmlElement.TagName%2A>proprietà per verificare se un elemento è di un tipo specifico.</xref:System.Windows.Forms.HtmlElement.TagName%2A>       È possibile modificare qualsiasi documento HTML in fase di esecuzione. È possibile creare nuovi oggetti di tipo HtmlElement con il <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>metodo <xref:System.Windows.Forms.HtmlDocument>e aggiungerli a un altro elemento utilizzando il <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>o <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>metodi.</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> </xref:System.Windows.Forms.HtmlElement.AppendChild%2A> </xref:System.Windows.Forms.HtmlDocument> </xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> È anche possibile creare gli elementi sotto forma di tag HTML e assegnarli a un elemento esistente <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>proprietà.</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>"
  example:
  - "The following code example shows how to examine an arbitrary HTML document and derive a string describing the HTML elements, with indentation and level numbers used to indicate how deeply nested the elements are in the document. This code example requires that your application hosts a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#1)]"
  syntax:
    content: public sealed class HtmlElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.All
  id: All
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: All
  nameWithType: HtmlElement.All
  fullName: System.Windows.Forms.HtmlElement.All
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene un <xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;> </xref> di tutti gli elementi sottostanti all&quot;elemento corrente."
  remarks: "Per accedere solo gli elementi che hanno l&quot;elemento corrente è il padre diretto, utilizzare il <xref:System.Windows.Forms.HtmlElement.Children%2A>raccolta invece.</xref:System.Windows.Forms.HtmlElement.Children%2A>       In questa raccolta di elementi non necessariamente verranno restituiti in ordine di origine."
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection All { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "Raccolta di tutti gli elementi che sono figli diretti o indiretti dell&quot;elemento corrente. Se l&quot;elemento corrente è un `TABLE`, tutte, ad esempio, verranno restituiti ogni `TH`, `TR`, e `TD` elemento all&quot;interno della tabella, oltre a qualsiasi altro elemento, ad esempio `DIV` e `SPAN` elementi, contenuti all&quot;interno delle celle."
  overload: System.Windows.Forms.HtmlElement.All*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  id: AppendChild(System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: AppendChild(HtmlElement)
  nameWithType: HtmlElement.AppendChild(HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.AppendChild(HtmlElement)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Aggiunge un elemento al sottoalbero di un altro elemento."
  remarks: "L&quot;HTML DOM Document Object Model () consente di modificare il contenuto in fase di esecuzione di un file HTML in diversi modi. Utilizzare AppendChild per aggiungere nuovi elementi a un documento esistente o per spostare un elemento nella pagina.       Se un elemento è già stato associato, aggiungendo un elemento a un altro elemento rimuoverà automaticamente quell&quot;elemento dall&quot;elemento padre precedente.       Tutte le aggiunte apportate a un documento in fase di esecuzione utilizzando AppendChild non verrà resi persistenti quando si chiama il <xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A>metodo il <xref:System.Windows.Forms.WebBrowser>controllo.</xref:System.Windows.Forms.WebBrowser> </xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A>"
  example:
  - "The following code example creates a new hyperlink using the <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> method and adds it to end of a page using `AppendChild` on the `BODY` element. The example requires that your application contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#8)]\n [!code-cs[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#8)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement AppendChild (System.Windows.Forms.HtmlElement newElement);
    parameters:
    - id: newElement
      type: System.Windows.Forms.HtmlElement
      description: "Il <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> da aggiungere a questo percorso nell&quot;albero."
    return:
      type: System.Windows.Forms.HtmlElement
      description: "L&quot;elemento dopo che è stato aggiunto all&quot;albero."
  overload: System.Windows.Forms.HtmlElement.AppendChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  id: AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.AttachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Aggiunge un gestore eventi per un evento denominato nel modello oggetto HTML documento (DOM)."
  remarks: "Modello oggetto documento gestito (DOM) espone solo un numero di eventi. La maggior parte degli eventi non esposti vengono definita solo per tipi specifici di elementi. ad esempio il `submit` evento, che è valida solo su `FORM` elementi. Utilizzare AttachEventHandler per aggiungere un gestore eventi per questi eventi non esposti.       Non connettersi un evento al documento o a uno dei relativi oggetti fino a quando il documento ha completato il caricamento. È necessario chiamare questo metodo prima di <xref:System.Windows.Forms.WebBrowser.DocumentCompleted>evento del <xref:System.Windows.Forms.WebBrowser>controllo.</xref:System.Windows.Forms.WebBrowser> </xref:System.Windows.Forms.WebBrowser.DocumentCompleted>       Per ulteriori informazioni sugli eventi non gestiti disponibili, vedere [l&quot;accesso a membri non esposti sul modello a oggetti documento HTML gestito](~/add/includes/ajax-current-ext-md.md) e le interfacce IHTMLElement: [IHTMLElement](http://go.microsoft.com/fwlink/?LinkId=104876), [IHTMLElement2](http://go.microsoft.com/fwlink/?LinkId=104877), [IHTMLElement3](http://go.microsoft.com/fwlink/?LinkId=104878), [IHTMLElement4](http://go.microsoft.com/fwlink/?LinkId=104879)."
  syntax:
    content: public void AttachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "Il nome dell&quot;evento che si desidera gestire."
    - id: eventHandler
      type: System.EventHandler
      description: "Il codice gestito che gestisce l&quot;evento."
  overload: System.Windows.Forms.HtmlElement.AttachEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren
  id: CanHaveChildren
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
  fullName: System.Windows.Forms.HtmlElement.CanHaveChildren
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene un valore che indica se questo elemento può avere elementi figlio."
  remarks: "Alcuni elementi, ad esempio `IMG` e `SCRIPT`, non può avere elementi figlio. Utilizzare questa proprietà prima di chiamare <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>o <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>su un elemento arbitrario.</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> </xref:System.Windows.Forms.HtmlElement.AppendChild%2A>"
  example:
  - "The following code example handles the <xref:System.Windows.Forms.HtmlElement.Click> event on <xref:System.Windows.Forms.HtmlDocument>. If an element was not previous selected using a mouse click, the code assigns the element to a private class variable named `MoveElement`. If an element was selected, the code attempts to append it to the element that was just clicked. This code example requires that your application hosts a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, and that you have already added an event handler for the <xref:System.Windows.Forms.HtmlElement.Click> event on <xref:System.Windows.Forms.HtmlDocument>.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#2](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#2)]\n [!code-cs[System.Windows.Forms.HtmlElement#2](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#2)]"
  syntax:
    content: public bool CanHaveChildren { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;elemento può avere elementi figlio. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.HtmlElement.CanHaveChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Children
  id: Children
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Children
  nameWithType: HtmlElement.Children
  fullName: System.Windows.Forms.HtmlElement.Children
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene un <xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;> </xref> di tutti i figli dell&quot;elemento corrente."
  remarks: "Molti degli elementi all&quot;interno di un file HTML può contenere altri elementi HTML di sotto di essi. La raccolta di elementi figlio fornisce un meccanismo semplice per esplorare la struttura ad albero di un documento.       Gli elementi figlio espone solo gli elementi il cui padre diretto è l&quot;elemento corrente. Se dispone di un <xref:System.Windows.Forms.HtmlElement>per un `TABLE` elemento, elementi figlio fornirà tutti il `TR` elementi (riga) all&quot;interno del `TABLE`.</xref:System.Windows.Forms.HtmlElement> Per recuperare il `TD` elementi (cella) contenuti all&quot;interno del `TR` elementi, è necessario utilizzare l&quot;insieme gli elementi figlio di ogni singolo `TR` elemento oppure utilizzare la <xref:System.Windows.Forms.HtmlElement.All%2A>raccolta <xref:System.Windows.Forms.HtmlElement>.</xref:System.Windows.Forms.HtmlElement> </xref:System.Windows.Forms.HtmlElement.All%2A>       Gli elementi in questa raccolta non è necessariamente in ordine di origine.       Se <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>è `false`, `Children` sarà sempre vuoto.</xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>"
  example:
  - "The following code example examines an arbitrary HTML document and derive a string describing the elements, with indentation and level numbers used to indicate how deeply nested the elements are in the document. It does this by searching the `Children` collection of all elements recursively, starting with the HTML element at the top of the document. This code example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#1)]"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection Children { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "Una raccolta di tutti <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> gli oggetti che hanno l&quot;elemento corrente come padre."
  overload: System.Windows.Forms.HtmlElement.Children*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Click
  id: Click
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Click
  nameWithType: HtmlElement.Click
  fullName: System.Windows.Forms.HtmlElement.Click
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente fa clic sull&quot;elemento con il pulsante sinistro del mouse."
  remarks: "È possibile annullare l&quot;azione predefinita per un evento Click per un elemento impostando la <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Un evento Click per un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Se l&quot;utente fa clic su un elemento non è attualmente con input lo stato attivo, si verificherà l&quot;evento Click dopo il <xref:System.Windows.Forms.HtmlElement.Focusing>evento, ma prima che il <xref:System.Windows.Forms.HtmlElement.LostFocus>evento per quell&quot;elemento.</xref:System.Windows.Forms.HtmlElement.LostFocus> </xref:System.Windows.Forms.HtmlElement.Focusing>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Click event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Click event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#432](~/add/codesnippet/csharp/e-system.windows.forms.h_5_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#432](~/add/codesnippet/visualbasic/e-system.windows.forms.h_5_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Click;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ClientRectangle
  id: ClientRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
  fullName: System.Windows.Forms.HtmlElement.ClientRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene i limiti dell&quot;area client dell&quot;elemento nel documento HTML."
  remarks: "ClientRectangle restituirà i dati di posizione solo per elementi che sono stati assegnati un&quot;esplicita altezza e la larghezza, o che utilizzano il posizionamento assoluto. Un documento è posizionato in modo assoluto se lo stile di posizione è impostato su `absolute`, dopo che può essere posizionata in corrispondenza di qualsiasi coordinata nella pagina HTML."
  example:
  - "Assume you have loaded the following HTML page into a hosted instance of the <xref:System.Windows.Forms.WebBrowser> control.  \n  \n```  \n<HTML>  \n  \n    <BODY>  \n  \n        <DIV id=\"div1\" style=\"position:absolute;top:100px;left:100px;border-      style:solid;border-width:1px;\">  \n            Edit this text.  \n        </DIV>  \n  \n    </BODY>  \n  \n</HTML>  \n```  \n  \n The following code example demonstrates retrieving this element and expanding its dimensions if the client area is less than 400 pixels wide by 50 pixels high, and also sets the `DIV` to the `contentEditable` state so that the user can input text.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#3](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#3)]\n [!code-cs[System.Windows.Forms.HtmlElement#3](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#3)]"
  syntax:
    content: public System.Drawing.Rectangle ClientRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "L&quot;area client occupata dall&quot;elemento meno qualsiasi area occupata da bordi e le barre di scorrimento. Per ottenere la posizione e le dimensioni dell&quot;elemento, inclusi le aree di controllo, utilizzare <xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>invece.</xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>"
  overload: System.Windows.Forms.HtmlElement.ClientRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  id: DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.DetachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Rimuove un gestore eventi da un evento denominato nel modello oggetto HTML documento (DOM)."
  syntax:
    content: public void DetachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "Il nome dell&quot;evento che si desidera gestire."
    - id: eventHandler
      type: System.EventHandler
      description: "Il codice gestito che gestisce l&quot;evento."
  overload: System.Windows.Forms.HtmlElement.DetachEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Document
  id: Document
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Document
  nameWithType: HtmlElement.Document
  fullName: System.Windows.Forms.HtmlElement.Document
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene il <xref href=&quot;System.Windows.Forms.HtmlDocument&quot;> </xref> a cui appartiene questo elemento."
  remarks: "Alcune pagine HTML possono contenere frame utilizzando la `FRAMESET` tag. In questo caso, ogni singolo `FRAME` elemento conterrà la propria istanza di <xref:System.Windows.Forms.HtmlDocument>.</xref:System.Windows.Forms.HtmlDocument> Questa proprietà è particolarmente utile quando si riceve un riferimento a un elemento in un gestore eventi dal <xref:System.Windows.Forms.HtmlElementEventArgs>ed è necessario eseguire alcune azioni sul documento in cui si trova l&quot;elemento.</xref:System.Windows.Forms.HtmlElementEventArgs>"
  syntax:
    content: public System.Windows.Forms.HtmlDocument Document { get; }
    return:
      type: System.Windows.Forms.HtmlDocument
      description: "Documento padre di questo elemento."
  overload: System.Windows.Forms.HtmlElement.Document*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DomElement
  id: DomElement
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DomElement
  nameWithType: HtmlElement.DomElement
  fullName: System.Windows.Forms.HtmlElement.DomElement
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene un puntatore a interfaccia non gestita per questo elemento."
  remarks: "<xref:System.Windows.Forms.HtmlElement>è un wrapper per di Internet Explorer modello DOM (Document Object), che viene scritto utilizzando il modello COM (Component Object).</xref:System.Windows.Forms.HtmlElement> Se si desidera accedere non esposti proprietà o metodi su interfacce COM sottostanti, ad esempio `IHTMLElement`, è possibile utilizzare questo oggetto per eseguire query per loro.       Per utilizzare le interfacce non gestite, è necessario importare la libreria MSHTML (MSHTML) nell&quot;applicazione. Tuttavia, è possibile eseguire anche metodi e proprietà non esposti mediante il `Invoke` metodo."
  example:
  - "The following code example uses unmanaged interfaces to take the currently selected text and convert it into a hyperlink, with the URL chosen by the user. This code was written under the assumption that your form has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, and that you have added the unmanaged MSHTML library as a reference to your project.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#4](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#4)]\n [!code-cs[System.Windows.Forms.HtmlElement#4](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#4)]"
  syntax:
    content: public object DomElement { get; }
    return:
      type: System.Object
      description: "Il componente COM `IUnknown` puntatore per l&quot;elemento che è possibile eseguire il cast a un elemento HTML interfacce, ad esempio `IHTMLElement`."
  overload: System.Windows.Forms.HtmlElement.DomElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DoubleClick
  id: DoubleClick
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DoubleClick
  nameWithType: HtmlElement.DoubleClick
  fullName: System.Windows.Forms.HtmlElement.DoubleClick
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente fa clic sul pulsante sinistro del mouse su un elemento due volte, in rapida successione."
  remarks: "Un doppio clic è determinato dalle impostazioni relative al mouse del sistema operativo dell&quot;utente. L&quot;utente può impostare l&quot;intervallo tra i clic effettuati con un pulsante del mouse che deve essere considerato un doppio clic anziché come due clic distinti.       È possibile annullare l&quot;azione predefinita per un evento DoubleClick su un elemento impostando la <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Un evento DoubleClick su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DoubleClick event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#433](~/add/codesnippet/csharp/e-system.windows.forms.h_26_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#433](~/add/codesnippet/visualbasic/e-system.windows.forms.h_26_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DoubleClick;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Drag
  id: Drag
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Drag
  nameWithType: HtmlElement.Drag
  fullName: System.Windows.Forms.HtmlElement.Drag
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente trascina il testo in diverse posizioni."
  remarks: "Questo evento si verifica quando il testo viene trascinato nei percorsi seguenti: - all&quot;interno o tra pagine HTML contenute nel <xref:System.Windows.Forms.WebBrowser>controllo o Internet Explorer - a un&quot;altra applicazione - per Windows desktop è possibile annullare l&quot;azione predefinita per un evento di trascinamento su un elemento impostando la <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> </xref:System.Windows.Forms.WebBrowser>       Un evento di trascinamento su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Drag event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Drag event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#434](~/add/codesnippet/csharp/e-system.windows.forms.h_11_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#434](~/add/codesnippet/visualbasic/e-system.windows.forms.h_11_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Drag;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragEnd
  id: DragEnd
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragEnd
  nameWithType: HtmlElement.DragEnd
  fullName: System.Windows.Forms.HtmlElement.DragEnd
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando un utente termina un&quot;operazione di trascinamento."
  remarks: "È possibile annullare l&quot;azione predefinita per un evento DragEnd su un elemento impostando la <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Un evento DragEnd su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragEnd event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragEnd event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#435](~/add/codesnippet/csharp/e-system.windows.forms.h_35_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#435](~/add/codesnippet/visualbasic/e-system.windows.forms.h_35_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragEnd;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragLeave
  id: DragLeave
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragLeave
  nameWithType: HtmlElement.DragLeave
  fullName: System.Windows.Forms.HtmlElement.DragLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente interrompe il trascinamento di un elemento è posizionato sull&quot;elemento."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragLeave event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#436](~/add/codesnippet/csharp/e-system.windows.forms.h_21_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#436](~/add/codesnippet/visualbasic/e-system.windows.forms.h_21_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragLeave;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragOver
  id: DragOver
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragOver
  nameWithType: HtmlElement.DragOver
  fullName: System.Windows.Forms.HtmlElement.DragOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente trascina del testo sopra l&quot;elemento."
  remarks: "È possibile annullare l&quot;azione predefinita per un evento con trascinamento su un elemento impostando la <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Un evento con trascinamento su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragOver event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#437](~/add/codesnippet/csharp/e-system.windows.forms.h_31_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#437](~/add/codesnippet/visualbasic/e-system.windows.forms.h_31_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragOver;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Enabled
  id: Enabled
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Enabled
  nameWithType: HtmlElement.Enabled
  fullName: System.Windows.Forms.HtmlElement.Enabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene o imposta se l&quot;utente può immettere dati in questo elemento."
  remarks: "Per `FORM` elementi, ad esempio caselle di testo e pulsanti di opzione, l&quot;impostazione abilitato su `false` impedirà all&quot;utente di utilizzo di questi campi del modulo. Per gli altri elementi, ad esempio `DIV` o `SPAN`, impostare Enabled su `false` causerà tutto il testo all&quot;interno dell&quot;elemento di programmazione; tuttavia, il testo sarà comunque selezionabile. Per annullare la selezione, aggiungere un gestore eventi per il non esposti `onselectstart` eventi utilizzando il <xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A>metodo.</xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A>"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;elemento consente l&quot;input dell&quot;utente; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.HtmlElement.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: HtmlElement.Equals(Object)
  fullName: System.Windows.Forms.HtmlElement.Equals(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Verifica se l&quot;oggetto specificato è uguale all&quot;elemento corrente."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "L&quot;oggetto per verificare l&quot;uguaglianza."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>obj</code> is an <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlElement.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.FirstChild
  id: FirstChild
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
  fullName: System.Windows.Forms.HtmlElement.FirstChild
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene l&quot;elemento immediatamente sottostante di questo elemento nell&quot;albero del documento."
  remarks: "Utilizzare FirstChild in combinazione con <xref:System.Windows.Forms.HtmlElement.NextSibling%2A>per esaminare la struttura di un documento HTML.</xref:System.Windows.Forms.HtmlElement.NextSibling%2A>"
  syntax:
    content: public System.Windows.Forms.HtmlElement FirstChild { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "Un <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> che rappresenta il primo elemento contenuto di sotto l&quot;elemento corrente, in ordine di origine."
  overload: System.Windows.Forms.HtmlElement.FirstChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Focus
  id: Focus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Focus()
  nameWithType: HtmlElement.Focus()
  fullName: System.Windows.Forms.HtmlElement.Focus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Inserisce lo stato attivo dell&quot;input utente per l&quot;elemento corrente."
  remarks: "Impostazione dello stato attivo su un elemento sia tale stato attivo sull&quot;elemento e lo rende l&quot;elemento attivo. ad esempio, l&quot;elemento che ha lo stato attivo venga restituito dalla <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A>proprietà <xref:System.Windows.Forms.HtmlDocument>.</xref:System.Windows.Forms.HtmlDocument> </xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A>       Dopo la chiamata allo stato attivo, la pressione di qualsiasi chiave da un utente verrà inviata a tale elemento."
  syntax:
    content: public void Focus ();
    parameters: []
  overload: System.Windows.Forms.HtmlElement.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Focusing
  id: Focusing
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Focusing
  nameWithType: HtmlElement.Focusing
  fullName: System.Windows.Forms.HtmlElement.Focusing
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;elemento riceve lo stato attivo dell&quot;input utente."
  remarks: "Un elemento con lo stato attivo prima che l&quot;utente passa a un&quot;altra applicazione utilizzando la barra delle applicazioni o i tasti ALT + TAB riceverà il Focusing e <xref:System.Windows.Forms.HtmlElement.GotFocus>eventi nuovamente quando l&quot;utente passa all&quot;applicazione.</xref:System.Windows.Forms.HtmlElement.GotFocus>       È possibile annullare il comportamento predefinito di questo evento. Per rimuovere lo stato attivo da un elemento, chiamare <xref:System.Windows.Forms.HtmlElement.Focus%2A>su un elemento diverso dall&quot;interno di <xref:System.Windows.Forms.HtmlElement.GotFocus>eventi.</xref:System.Windows.Forms.HtmlElement.GotFocus> </xref:System.Windows.Forms.HtmlElement.Focus%2A>       Un evento Focusing su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Focusing event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Focusing event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#438](~/add/codesnippet/csharp/e-system.windows.forms.h_10_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#438](~/add/codesnippet/visualbasic/e-system.windows.forms.h_10_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Focusing;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetAttribute(String)
  nameWithType: HtmlElement.GetAttribute(String)
  fullName: System.Windows.Forms.HtmlElement.GetAttribute(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Recupera il valore dell&quot;attributo denominato sull&quot;elemento."
  remarks: "Un attributo in formato HTML è qualsiasi coppia nome/valore valide per quell&quot;elemento. <xref:System.Windows.Forms.HtmlElement>espone solo gli attributi che sono comuni a tutti gli elementi, escludendo quelli che si applicano solo a determinati tipi di elementi. `SRC` è un attributo predefinito per il `IMG` tag, ad esempio, ma non per il `DIV` tag.</xref:System.Windows.Forms.HtmlElement> Utilizzare GetAttribute e <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>per modificare gli attributi non esposti nel modello oggetto di documento (DOM) gestito.</xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>       GetAttribute e <xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>sono tra maiuscole e minuscole.</xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>"
  example:
  - "The following code example retrieves all of the `META` tags within an HTML document, using GetAttribute to find the `META` tag with the name `Description`. The example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/visualbasic/HtmlDocumentProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/csharp/HtmlDocumentProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public string GetAttribute (string attributeName);
    parameters:
    - id: attributeName
      type: System.String
      description: "Il nome dell&quot;attributo. Questo argomento è tra maiuscole e minuscole."
    return:
      type: System.String
      description: "Il valore di questo attributo sull&quot;elemento, come un <xref:System.String>valore.</xref:System.String> Se l&quot;attributo specificato non esiste per questo elemento, restituisce una stringa vuota."
  overload: System.Windows.Forms.HtmlElement.GetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: HtmlElement.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlElement.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Recupera una raccolta di elementi rappresentati in HTML dal specificato `HTML` tag."
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);
    parameters:
    - id: tagName
      type: System.String
      description: "Il nome del tag i cui <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> si vogliono recuperare gli oggetti."
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "Un <xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;> </xref> contenente tutti gli elementi il cui `HTML` è uguale al nome del tag <code> tagName </code>."
  overload: System.Windows.Forms.HtmlElement.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetHashCode
  id: GetHashCode
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: HtmlElement.GetHashCode()
  fullName: System.Windows.Forms.HtmlElement.GetHashCode()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Funge da funzione hash per un particolare tipo."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Codice hash per l&quot;oggetto corrente <xref:System.Object>.</xref:System.Object>"
  overload: System.Windows.Forms.HtmlElement.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GotFocus
  id: GotFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GotFocus
  nameWithType: HtmlElement.GotFocus
  fullName: System.Windows.Forms.HtmlElement.GotFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;elemento ha ricevuto lo stato attivo dell&quot;input utente."
  remarks: "Non è possibile annullare il comportamento predefinito di questo evento, né impedirne la propagazione. Per rimuovere lo stato attivo da un elemento, chiamare <xref:System.Windows.Forms.HtmlElement.Focus%2A>su un elemento diverso dall&quot;interno dell&quot;evento attivato.</xref:System.Windows.Forms.HtmlElement.Focus%2A>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "Save the following HTML code into a file, and load the file into a <xref:System.Windows.Forms.WebBrowser> control in a Windows Forms project.  \n  \n```  \n<HTML>  \n    <BODY>  \n        <FORM name=\"form1\">  \n            <INPUT type=\"text\" size=20 name=\"text1\">  \n            <INPUT type=\"text\" size=20 name=\"text2\">  \n            <INPUT type=\"text\" size=20 name=\"text3\">  \n        </FORM>  \n    </BODY>  \n</HTML>  \n```  \n  \n The following code example prevents the next `INPUT` element in the tab order from receiving user input focus if the previous element contains less than five characters. The example requires that the previously mentioned HTML file is loaded into an instance of the <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#15](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#15)]\n [!code-cs[System.Windows.Forms.HtmlElement#15](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#15)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler GotFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Id
  id: Id
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Id
  nameWithType: HtmlElement.Id
  fullName: System.Windows.Forms.HtmlElement.Id
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene o imposta un&quot;etichetta con cui identificare l&quot;elemento."
  remarks: "ID deve essere univoco. è possibile avere due elementi con lo stesso Id all&quot;interno dello stesso documento. Utilizzare il <xref:System.Windows.Forms.HtmlElement.Name%2A>proprietà per assegnare lo stesso identificatore a un gruppo di elementi logicamente correlati.</xref:System.Windows.Forms.HtmlElement.Name%2A>"
  syntax:
    content: public string Id { get; set; }
    return:
      type: System.String
      description: "Identificatore univoco per l&quot;elemento."
  overload: System.Windows.Forms.HtmlElement.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InnerHtml
  id: InnerHtml
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
  fullName: System.Windows.Forms.HtmlElement.InnerHtml
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene o imposta il markup HTML sottostante dell&quot;elemento."
  remarks: "Esistono diversi modi per aggiungere nuovi elementi a una pagina HTML esistente, ad esempio il <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>e <xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>metodi.</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> </xref:System.Windows.Forms.HtmlElement.AppendChild%2A> Utilizzando InnerHtml è spesso il modo più rapido per aggiungere il nuovo contenuto quando è necessario impostare numerosi attributi o gli stili per i nuovi elementi.       InnerHtml differisce da <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>InnerHtml non includerà il codice HTML che rappresenta l&quot;oggetto che si sta chiamando.</xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> Vedere <xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>Per ulteriori informazioni sulla differenza tra queste due proprietà.</xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>       Impostazione InnerHtml Elimina definitivamente gli elementi figlio in precedenza è stato aggiunto all&quot;elemento. Se si recupera un elemento da DOM e quindi assegnare nuovi HTML proprietà InnerHtml relativo padre, il riferimento a tale elemento sarà inutile e non è definito il comportamento durante la chiamata a proprietà e metodi.       Per alcuni elementi, l&quot;impostazione InnerHtml non è un&quot;operazione valida. Alcuni tag HTML non presentano alcun tag di chiusura, ad esempio il `IMG` tag e pertanto non può contenere elementi annidati. Alcuni tag, ad esempio il `SCRIPT` tag, può contenere solo contenuto; impostazione InnerHtml si verificherà un errore di testo. Per entrambi i tipi di tag, il <xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>restituirà `false`.</xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> Tuttavia, è possibile impostare la proprietà InnerHtml `TABLE` e `TR` gli elementi, come l&quot;assegnazione di HTML in formato non corretto a questi elementi potrebbe danneggiare il rendering del documento. Utilizzare <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>o `insertRow` e `insertCell` metodi non gestito `IHTMLTable` interfaccia per aggiungere righe e celle a un `TABLE`.</xref:System.Windows.Forms.HtmlElement.AppendChild%2A>       Se è necessario assegnare solo testo in un elemento e non il markup HTML, usare il <xref:System.Windows.Forms.HtmlElement.InnerText%2A>proprietà invece.</xref:System.Windows.Forms.HtmlElement.InnerText%2A>       Assegnare un valore alla proprietà InnerHtml determinerà l&quot;eliminazione di qualsiasi testo i valori assegnati in precedenza mediante <xref:System.Windows.Forms.HtmlElement.InnerText%2A>.</xref:System.Windows.Forms.HtmlElement.InnerText%2A>"
  syntax:
    content: public string InnerHtml { get; set; }
    return:
      type: System.String
      description: "Markup HTML che definisce gli elementi figlio dell&quot;elemento corrente."
  overload: System.Windows.Forms.HtmlElement.InnerHtml*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Creazione di elementi figlio di questo elemento non è consentita."
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InnerText
  id: InnerText
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InnerText
  nameWithType: HtmlElement.InnerText
  fullName: System.Windows.Forms.HtmlElement.InnerText
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene o imposta il testo assegnato all&quot;elemento."
  remarks: "Se si tenta di assegnare un codice HTML a un elemento con InnerText, il codice HTML verrà visualizzata come valori letterali nel documento, così come sono stati visualizzata all&quot;interno di un file di testo. Se si assegna HTML a un elemento utilizzando il <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>proprietà InnerText restituirà tutto il testo in HTML con il markup rimosso.</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>       Assegnare un valore alla proprietà InnerText determinerà l&quot;eliminazione di elementi figlio che appartengono all&quot;elemento."
  example:
  - "The following code creates a new hyperlink using <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>, and assigns text to the link using the InnerText property.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#8)]\n [!code-cs[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#8)]"
  syntax:
    content: public string InnerText { get; set; }
    return:
      type: System.String
      description: "Testo dell&quot;elemento senza markup HTML. Se l&quot;elemento contiene elementi figlio, verrà mantenuto solo il testo in tali elementi figlio."
  overload: System.Windows.Forms.HtmlElement.InnerText*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "L&quot;elemento specificato non può contenere testo (ad esempio, un `IMG` elemento)."
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  id: InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  nameWithType: HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Inserisce un nuovo elemento nel modello oggetto documento (DOM)."
  remarks: "Non chiamare questo metodo fino a quando il <xref:System.Windows.Forms.WebBrowser.DocumentCompleted>evento il <xref:System.Windows.Forms.WebBrowser>controllo si è verificato.</xref:System.Windows.Forms.WebBrowser> </xref:System.Windows.Forms.WebBrowser.DocumentCompleted> Chiamare questo metodo prima di allora può generare un&quot;eccezione, come il documento non hanno terminato il caricamento.       Se un valore di <xref:System.Windows.Forms.HtmlElementInsertionOrientation>valido verrà dipendono dal tipo dell&quot;elemento.</xref:System.Windows.Forms.HtmlElementInsertionOrientation> Ad esempio, <xref:System.Windows.Forms.HtmlElementInsertionOrientation>è valido se l&quot;elemento è un `DIV`, ma se è un `SCRIPT` o `IMG` elemento, nessuno dei quali può contenere elementi figlio.</xref:System.Windows.Forms.HtmlElementInsertionOrientation>"
  example:
  - "The following code example inserts a `DIV` element into the top of every page that users view outside of the ADatum.com server. The example requires that your form contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`. Your sample must also import the namespace <xref:System.Text.RegularExpressions>.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#9](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#9)]\n [!code-cs[System.Windows.Forms.HtmlElement#9](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#9)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement InsertAdjacentElement (System.Windows.Forms.HtmlElementInsertionOrientation orient, System.Windows.Forms.HtmlElement newElement);
    parameters:
    - id: orient
      type: System.Windows.Forms.HtmlElementInsertionOrientation
      description: "Posizione in cui inserire questo elemento in relazione all&quot;elemento corrente."
    - id: newElement
      type: System.Windows.Forms.HtmlElement
      description: "Il nuovo elemento da inserire."
    return:
      type: System.Windows.Forms.HtmlElement
      description: "Il <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> appena inserito. Se l&quot;inserimento ha esito negativo, verrà restituito <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.HtmlElement.InsertAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  id: InvokeMember(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InvokeMember(String)
  nameWithType: HtmlElement.InvokeMember(String)
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Esegue un metodo non esposto sull&quot;elemento DOM sottostante di questo elemento."
  remarks: "Questo metodo può essere utilizzato per chiamare i metodi dall&quot;oggetto modello DOM (Document) che non dispongono di equivalenti in codice gestito. Utilizzare questa versione di InvokeMember per eseguire i metodi non esposti che non accettano argomenti. Per un esempio, vedere <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>.</xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>"
  syntax:
    content: public object InvokeMember (string methodName);
    parameters:
    - id: methodName
      type: System.String
      description: "Il nome della proprietà o del metodo da richiamare."
    return:
      type: System.Object
      description: "L&quot;elemento restituito da questo metodo, rappresentato come un <xref:System.Object>.</xref:System.Object> Se questo <xref:System.Object>è un altro elemento HTML e si dispone di un riferimento alla libreria MSHTML non gestita aggiunta al progetto, è possibile eseguirne il cast alla relativa interfaccia non gestita appropriata.</xref:System.Object>"
  overload: System.Windows.Forms.HtmlElement.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  id: InvokeMember(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InvokeMember(String,Object[])
  nameWithType: HtmlElement.InvokeMember(String,Object[])
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String,Object[])
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Esegue una funzione definita nella pagina HTML corrente mediante un linguaggio di scripting."
  remarks: "Questo metodo può essere utilizzato per chiamare i metodi dall&quot;oggetto modello DOM (Document) che non dispongono di equivalenti in codice gestito. Tutti gli argomenti forniti a InvokeMember verranno convertiti in Win32 `VARIANT` tipi di dati prima di essere passati alla funzione di scripting denominata."
  example:
  - "The following code example gets a `TABLE` called `dataTable` and uses the unexposed `moveRow` method to move a row from the end of the table to the beginning.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#11](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#11)]\n [!code-cs[System.Windows.Forms.HtmlElement#11](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#11)]"
  syntax:
    content: public object InvokeMember (string methodName, object[] parameter);
    parameters:
    - id: methodName
      type: System.String
      description: "Il nome della proprietà o del metodo da richiamare."
    - id: parameter
      type: System.Object[]
      description: "Un elenco di parametri da passare."
    return:
      type: System.Object
      description: "Elemento restituito dalla funzione, rappresentato come un <xref:System.Object>.</xref:System.Object> Se questo <xref:System.Object>è un altro elemento HTML e si dispone di un riferimento alla libreria MSHTML non gestita aggiunta al progetto, è possibile eseguirne il cast alla relativa interfaccia non gestita appropriata.</xref:System.Object>"
  overload: System.Windows.Forms.HtmlElement.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyDown
  id: KeyDown
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyDown
  nameWithType: HtmlElement.KeyDown
  fullName: System.Windows.Forms.HtmlElement.KeyDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente preme un tasto della tastiera."
  remarks: "KeyDown si verifica prima <xref:System.Windows.Forms.HtmlElement.KeyPress>, che si verifica prima <xref:System.Windows.Forms.HtmlElement.KeyUp>.</xref:System.Windows.Forms.HtmlElement.KeyUp> </xref:System.Windows.Forms.HtmlElement.KeyPress>       È possibile annullare l&quot;azione predefinita per un evento KeyDown su un elemento impostando la <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Un evento KeyDown su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyDown event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#442](~/add/codesnippet/csharp/e-system.windows.forms.h_1_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#442](~/add/codesnippet/visualbasic/e-system.windows.forms.h_1_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyDown;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyPress
  id: KeyPress
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyPress
  nameWithType: HtmlElement.KeyPress
  fullName: System.Windows.Forms.HtmlElement.KeyPress
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente preme e rilascia un tasto della tastiera."
  remarks: "KeyPress si verifica dopo <xref:System.Windows.Forms.HtmlElement.KeyDown>e prima di <xref:System.Windows.Forms.HtmlElement.KeyUp>.</xref:System.Windows.Forms.HtmlElement.KeyUp> </xref:System.Windows.Forms.HtmlElement.KeyDown>       È possibile annullare l&quot;azione predefinita per un evento KeyPress su un elemento impostando la <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Un evento KeyPress su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyPress event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyPress event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#443](~/add/codesnippet/csharp/e-system.windows.forms.h_16_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#443](~/add/codesnippet/visualbasic/e-system.windows.forms.h_16_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyPress;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyUp
  id: KeyUp
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyUp
  nameWithType: HtmlElement.KeyUp
  fullName: System.Windows.Forms.HtmlElement.KeyUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente rilascia un tasto della tastiera."
  remarks: "KeyUp si verifica dopo <xref:System.Windows.Forms.HtmlElement.KeyPress>, che si verifica dopo <xref:System.Windows.Forms.HtmlElement.KeyDown>.</xref:System.Windows.Forms.HtmlElement.KeyDown> </xref:System.Windows.Forms.HtmlElement.KeyPress>       È possibile annullare questo evento.       Un evento KeyUp su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyUp event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#444](~/add/codesnippet/csharp/e-system.windows.forms.h_3_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#444](~/add/codesnippet/visualbasic/e-system.windows.forms.h_3_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyUp;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.LosingFocus
  id: LosingFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: LosingFocus
  nameWithType: HtmlElement.LosingFocus
  fullName: System.Windows.Forms.HtmlElement.LosingFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;elemento perde lo stato attivo dell&quot;input utente."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LosingFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the LosingFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#440](~/add/codesnippet/csharp/e-system.windows.forms.h_12_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#440](~/add/codesnippet/visualbasic/e-system.windows.forms.h_12_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.LostFocus
  id: LostFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: LostFocus
  nameWithType: HtmlElement.LostFocus
  fullName: System.Windows.Forms.HtmlElement.LostFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;elemento ha perso lo stato attivo dell&quot;input utente."
  remarks: "Un elemento non riceverà più gli eventi dopo disattivato fino a quando non viene assegnato lo stato attivo, l&quot;utente se è selezionato nella pagina o dall&quot;applicazione che chiama il <xref:System.Windows.Forms.HtmlElement.Focus%2A>metodo su quell&quot;elemento.</xref:System.Windows.Forms.HtmlElement.Focus%2A>       È possibile annullare questo evento.       Un evento disattivato su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LostFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the LostFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#441](~/add/codesnippet/csharp/e-system.windows.forms.h_0_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#441](~/add/codesnippet/visualbasic/e-system.windows.forms.h_0_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler LostFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseDown
  id: MouseDown
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseDown
  nameWithType: HtmlElement.MouseDown
  fullName: System.Windows.Forms.HtmlElement.MouseDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente preme un pulsante del mouse."
  remarks: "È possibile annullare l&quot;azione predefinita per un evento MouseDown su un elemento impostando la <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Un evento MouseDown su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseDown event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#446](~/add/codesnippet/csharp/e-system.windows.forms.h_32_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#446](~/add/codesnippet/visualbasic/e-system.windows.forms.h_32_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseDown;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseEnter
  nameWithType: HtmlElement.MouseEnter
  fullName: System.Windows.Forms.HtmlElement.MouseEnter
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente sposta innanzitutto il cursore del mouse sull&quot;elemento corrente."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseEnter event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseEnter event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#449](~/add/codesnippet/csharp/e-system.windows.forms.h_28_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#449](~/add/codesnippet/visualbasic/e-system.windows.forms.h_28_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseEnter;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseLeave
  nameWithType: HtmlElement.MouseLeave
  fullName: System.Windows.Forms.HtmlElement.MouseLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente sposta il cursore del mouse dall&quot;elemento corrente."
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseLeave event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#450](~/add/codesnippet/csharp/e-system.windows.forms.h_33_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#450](~/add/codesnippet/visualbasic/e-system.windows.forms.h_33_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseMove
  id: MouseMove
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseMove
  nameWithType: HtmlElement.MouseMove
  fullName: System.Windows.Forms.HtmlElement.MouseMove
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente sposta il cursore del mouse sull&quot;elemento."
  remarks: "È possibile annullare questo evento.       Un evento MouseMove su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseMove event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseMove event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#445](~/add/codesnippet/csharp/e-system.windows.forms.h_15_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#445](~/add/codesnippet/visualbasic/e-system.windows.forms.h_15_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseMove;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseOver
  id: MouseOver
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseOver
  nameWithType: HtmlElement.MouseOver
  fullName: System.Windows.Forms.HtmlElement.MouseOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando il cursore del mouse entra nei limiti dell&quot;elemento."
  remarks: "È possibile annullare l&quot;azione predefinita per un evento MouseOver su un elemento impostando la <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Un evento MouseOver su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseOver event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#447](~/add/codesnippet/csharp/e-system.windows.forms.h_29_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#447](~/add/codesnippet/visualbasic/e-system.windows.forms.h_29_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseOver;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseUp
  id: MouseUp
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseUp
  nameWithType: HtmlElement.MouseUp
  fullName: System.Windows.Forms.HtmlElement.MouseUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Si verifica quando l&quot;utente rilascia un pulsante del mouse."
  remarks: "È possibile annullare l&quot;azione predefinita per un evento MouseUp su un elemento impostando la <xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       Un evento MouseUp su un elemento si verificherà anche sugli elementi padre dell&quot;elemento e scegliere la <xref:System.Windows.Forms.HtmlDocument>classe stessa, a meno che non si imposta la <xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>proprietà del <xref:System.Windows.Forms.HtmlElementEventArgs>classe `true`.</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       Per ulteriori informazioni sulla differenza tra l&quot;annullamento della propagazione degli eventi e annullando l&quot;azione predefinita su un evento, vedere [About the DHTML Object Model](http://msdn.microsoft.com/library/ms533022.aspx)."
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseUp event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#448](~/add/codesnippet/csharp/e-system.windows.forms.h_17_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#448](~/add/codesnippet/visualbasic/e-system.windows.forms.h_17_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseUp;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Name
  id: Name
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Name
  nameWithType: HtmlElement.Name
  fullName: System.Windows.Forms.HtmlElement.Name
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene o imposta il nome dell&quot;elemento."
  remarks: "Utilizzare la proprietà Name per recuperare gli elementi da un documento utilizzando il <xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A>metodo sulla <xref:System.Windows.Forms.HtmlElement.All%2A>proprietà <xref:System.Windows.Forms.HtmlDocument>.</xref:System.Windows.Forms.HtmlDocument> </xref:System.Windows.Forms.HtmlElement.All%2A> </xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A>       Quando applicato a `INPUT` elementi, nome definisce il nome della variabile per i dati dell&quot;elemento quando il form viene inviato al server."
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "Oggetto <xref:System.String>che rappresenta il nome dell&quot;elemento.</xref:System.String>"
  overload: System.Windows.Forms.HtmlElement.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.NextSibling
  id: NextSibling
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
  fullName: System.Windows.Forms.HtmlElement.NextSibling
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene il successivo elemento allo stesso livello dell&quot;elemento corrente nell&quot;albero del documento."
  remarks: "Utilizzare NextSibling con <xref:System.Windows.Forms.HtmlElement.FirstChild%2A>per esaminare la struttura di un elemento HTML.</xref:System.Windows.Forms.HtmlElement.FirstChild%2A>"
  syntax:
    content: public System.Windows.Forms.HtmlElement NextSibling { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "Un <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> che rappresenta l&quot;elemento a destra dell&quot;elemento corrente."
  overload: System.Windows.Forms.HtmlElement.NextSibling*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OffsetParent
  id: OffsetParent
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
  fullName: System.Windows.Forms.HtmlElement.OffsetParent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene l&quot;elemento da cui <xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>viene calcolata.</xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>"
  remarks: "Gli elementi possono essere posizionati in una pagina HTML in uno dei tre modi: posizionamento predefinito di flusso; il posizionamento relativo, in cui l&quot;elemento viene spostato da un importo fisso rispetto al padre; e il posizionamento assoluto, in cui l&quot;elemento viene assegnato un fisso coordinare posizione rispetto all&quot;angolo superiore sinistro del documento.       Quando un documento utilizza il posizionamento relativo o assoluto, è possibile utilizzare `OffsetParent` per calcolare la posizione di coordinate di un elemento nell&quot;area client.       Per ulteriori informazioni sull&quot;elemento posizionamento in formato HTML, vedere [sul posizionamento degli elementi](http://msdn.microsoft.com/library/ms533005.aspx)."
  example:
  - "The following code example shows how OffsetParent and <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> differ for `span1`, `span2` and `span3`:  \n  \n```  \n<HTML>  \n    <BODY id=\"documentBody\">  \n  \n        <DIV id=\"div1\">  \n            <SPAN id=\"span1\">Placeholder text 1.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div2\" style=\"position:relative;top:100px;left:100px;\">  \n            <SPAN id=\"span2\">Placeholder text 2.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div3\" style=\"position:absolute;top:200px;left:200px;\">  \n            <DIV id=\"div4\" style=\"position:relative;top:100px;left:100px;\">  \n                <SPAN id=\"span3\">Placeholder text 3.</SPAN>  \n            </DIV>  \n        </DIV>  \n  \n    </BODY>  \n</HTML>  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement OffsetParent { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "Elemento da cui vengono calcolati gli offset.       Se il padre di un elemento o un altro elemento nella gerarchia, Usa il posizionamento relativo o assoluto, <xref uid=&quot;langword_csharp_OffsetParent&quot; name=&quot;OffsetParent&quot; href=&quot;&quot;> </xref> sarà il primo elemento posizionato in modo relativo o assoluto in cui è annidato l&quot;elemento corrente. Se nessuno degli elementi sopra l&quot;elemento corrente è posizionato in modo assoluto o relativo, <xref uid=&quot;langword_csharp_OffsetParent&quot; name=&quot;OffsetParent&quot; href=&quot;&quot;> </xref> sarà il `BODY` tag del documento."
  overload: System.Windows.Forms.HtmlElement.OffsetParent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle
  id: OffsetRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
  fullName: System.Windows.Forms.HtmlElement.OffsetRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene la posizione di un elemento rispetto al padre."
  remarks: "Gli elementi possono essere posizionati in una pagina HTML in uno dei tre modi:-posizionamento predefinito di flusso.      -Posizionamento relativo in cui l&quot;elemento viene spostato da un importo fisso rispetto al padre.      -Posizionamento assoluto, in cui l&quot;elemento viene assegnato un fisso coordinare posizione rispetto all&quot;angolo superiore sinistro del documento.       Per ulteriori informazioni sull&quot;elemento posizionamento in formato HTML, vedere [sul posizionamento degli elementi](http://msdn.microsoft.com/library/ms533005.aspx)."
  example:
  - "The following code example shows how <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> and OffsetRectangle differ for `span1`, `span2` and `span3`:  \n  \n```  \n<HTML>  \n    <BODY id=\"documentBody\">  \n  \n        <DIV id=\"div1\">  \n            <SPAN id=\"span1\">Placeholder text 1.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div2\" style=\"position:relative;top:100px;left:100px;\">  \n            <SPAN id=\"span2\">Placeholder text 2.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div3\" style=\"position:absolute;top:200px;left:200px;\">  \n            <DIV id=\"div4\" style=\"position:relative;top:100px;left:100px;\">  \n                <SPAN id=\"span3\">Placeholder text 3.</SPAN>  \n            </DIV>  \n        </DIV>  \n  \n    </BODY>  \n</HTML>  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public System.Drawing.Rectangle OffsetRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "Le posizioni delle coordinate x e y dell&quot;elemento e la larghezza e l&quot;altezza, in relazione al relativo elemento padre.       Se il padre di un elemento è posizionato in modo relativo o assoluto, OffsetRectangle restituirà l&quot;offset dell&quot;elemento padre. Se l&quot;elemento stesso è posizionato rispetto all&quot;elemento padre, OffsetRectangle restituirà l&quot;offset dal relativo elemento padre."
  overload: System.Windows.Forms.HtmlElement.OffsetRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  id: op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: op_Equality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Equality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Equality(HtmlElement,HtmlElement)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Confronta due elementi per stabilirne l&quot;uguaglianza."
  remarks: "I test di operatore di uguaglianza di `IUnknown` puntatori di oggetti COM sottostanti di cui è stato eseguito il wrapping fornito <xref:System.Windows.Forms.HtmlElement>classi.</xref:System.Windows.Forms.HtmlElement>"
  syntax:
    content: public static bool op_Equality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlElement
      description: "Il primo <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>."
    - id: right
      type: System.Windows.Forms.HtmlElement
      description: "Il secondo <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se entrambi i parametri sono <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, o se entrambi gli elementi hanno la stessa interfaccia COM sottostante; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.HtmlElement.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  id: op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: op_Inequality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Confronta due <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref> oggetti per verificarne la disuguaglianza."
  syntax:
    content: public static bool op_Inequality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlElement
      description: "Il primo <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>."
    - id: right
      type: System.Windows.Forms.HtmlElement
      description: "Il secondo <xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>solo un elemento è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, o i due oggetti non sono uguali; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.HtmlElement.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OuterHtml
  id: OuterHtml
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
  fullName: System.Windows.Forms.HtmlElement.OuterHtml
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene o imposta il codice HTML dell&quot;elemento corrente."
  remarks: "Mentre <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>restituisce tutto il codice HTML contenuto nell&quot;elemento corrente, esclusi i tag dell&quot;elemento corrente, OuterHtml include il tag dell&quot;elemento corrente, nonché il codice HTML che contiene tag, ad esempio: `<HTML>` `<BODY>` `<DIV id=&quot;div1&quot;>` `Hello` `<DIV id=&quot;div2&quot;>` `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>` `</DIV>` `</DIV>` `</BODY>` `</HTML>` In questo esempio, la chiamata OuterHtml su `div2` restituirà: `<DIV id=&quot;div2&quot;>` `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>` `</DIV>` <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>chiamata restituirà: `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>` se si assegna un nuovo valore a OuterHtml, il riferimento all&quot;elemento corrente non sarà più valida; non riflette il nome , il contenuto figlio e proprietà del codice HTML appena assegnato.                     </xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>                                                                                                                        </xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>"
  syntax:
    content: public string OuterHtml { get; set; }
    return:
      type: System.String
      description: "Il codice HTML per l&quot;elemento corrente e i relativi elementi figlio."
  overload: System.Windows.Forms.HtmlElement.OuterHtml*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OuterText
  id: OuterText
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OuterText
  nameWithType: HtmlElement.OuterText
  fullName: System.Windows.Forms.HtmlElement.OuterText
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene o imposta il testo dell&quot;elemento corrente."
  remarks: "Se si tenta di assegnare un codice HTML a un elemento con OuterText, il codice HTML verrà visualizzata come valori letterali nel documento, così come sono stati visualizzata all&quot;interno di un file di testo. Se si assegna HTML a un elemento utilizzando il <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>proprietà OuterText restituirà tutto il testo in HTML con il markup rimosso.</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>       Assegnare un valore a OuterText determinerà l&quot;eliminazione di elementi figlio che appartengono all&quot;elemento."
  syntax:
    content: public string OuterText { get; set; }
    return:
      type: System.String
      description: "Il testo all&quot;interno dell&quot;elemento corrente e negli elementi figlio dell&quot;elemento."
  overload: System.Windows.Forms.HtmlElement.OuterText*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Non è possibile impostare testo di fuori di questo elemento."
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Parent
  id: Parent
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Parent
  nameWithType: HtmlElement.Parent
  fullName: System.Windows.Forms.HtmlElement.Parent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene l&quot;elemento padre dell&quot;elemento corrente."
  remarks: "La proprietà padre consente l&quot;individuazione del contesto di un elemento. È molto utile all&quot;interno di gestori eventi, ad esempio <xref:System.Windows.Forms.HtmlElement.Click>, che può essere generato per qualsiasi elemento in un punto qualsiasi nella gerarchia di oggetti del documento.</xref:System.Windows.Forms.HtmlElement.Click>       La proprietà padre dell&quot;elemento HTML (il principale di un documento HTML) punta a se stesso. Se si chiama padre all&quot;interno di un ciclo, verificare che la condizione del ciclo interruzione confronta il tipo dell&quot;elemento corrente e il tipo di `Parent` proprietà, altrimenti il codice venga eseguito un ciclo infinito."
  example:
  - "The following code example finds all of the `IMG` tags in a document, and uses the Parent property to test whether the `IMG` is hyperlinked to another page; if it is, the code assigns the URL to the `ALT` attribute of the `IMG` tag, so that users can mouse over the image to see where it will take them.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement Parent { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "L&quot;elemento sopra l&quot;elemento corrente nella gerarchia del documento HTML."
  overload: System.Windows.Forms.HtmlElement.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  id: RaiseEvent(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: RaiseEvent(String)
  nameWithType: HtmlElement.RaiseEvent(String)
  fullName: System.Windows.Forms.HtmlElement.RaiseEvent(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Genera l&quot;evento denominato di chiamare tutti i gestori eventi registrati."
  remarks: "Questo metodo viene utilizzato per accedere agli eventi del modello oggetto documento (DOM) HTML. Chiama direttamente il [Ihtmlelement3](http://go.microsoft.com/fwlink/?LinkId=103189) metodo. Per ulteriori informazioni sull&quot;utilizzo del DOM mediante la <xref:System.Windows.Forms.HtmlElement>classe, vedere [l&quot;accesso a membri non esposti sul modello a oggetti documento HTML gestito](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.Forms.HtmlElement>"
  syntax:
    content: public void RaiseEvent (string eventName);
    parameters:
    - id: eventName
      type: System.String
      description: "Il nome dell&quot;evento da generare."
  overload: System.Windows.Forms.HtmlElement.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.RemoveFocus
  id: RemoveFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: RemoveFocus()
  nameWithType: HtmlElement.RemoveFocus()
  fullName: System.Windows.Forms.HtmlElement.RemoveFocus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Rimuove lo stato attivo dall&quot;elemento corrente, se tale elemento ha lo stato attivo."
  remarks: "Chiamare questo metodo genera il <xref:System.Windows.Forms.HtmlElement.LostFocus>eventi per l&quot;elemento.</xref:System.Windows.Forms.HtmlElement.LostFocus>       Quando lo stato attivo viene cancellato da un elemento con questo metodo, gli viene assegnato al documento che contiene l&quot;elemento, non all&quot;elemento successivo nell&quot;ordine di tabulazione."
  syntax:
    content: public void RemoveFocus ();
    parameters: []
  overload: System.Windows.Forms.HtmlElement.RemoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  id: ScrollIntoView(System.Boolean)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollIntoView(Boolean)
  nameWithType: HtmlElement.ScrollIntoView(Boolean)
  fullName: System.Windows.Forms.HtmlElement.ScrollIntoView(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Scorre il documento contenente l&quot;elemento fino ad allineata il bordo superiore o inferiore di questo elemento con la finestra del documento."
  remarks: ''
  example:
  - "The following code example finds an element by name and scrolls through the page so that the top of the element is aligned with the top of the visible page.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#12](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#12)]\n [!code-cs[System.Windows.Forms.HtmlElement#12](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#12)]"
  syntax:
    content: public void ScrollIntoView (bool alignWithTop);
    parameters:
    - id: alignWithTop
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, verrà visualizzato nella parte superiore dell&quot;oggetto nella parte superiore della finestra. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, verrà visualizzata nella parte inferiore dell&quot;oggetto nella parte inferiore della finestra."
  overload: System.Windows.Forms.HtmlElement.ScrollIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollLeft
  id: ScrollLeft
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
  fullName: System.Windows.Forms.HtmlElement.ScrollLeft
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene o imposta la distanza tra il bordo dell&quot;elemento e il bordo sinistro del relativo contenuto."
  remarks: "Le dimensioni dell&quot;area di scorrimento complete sono disponibili tramite <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; `ScrollLeft` e <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A>vengono esposte in modo indipendente, poiché sono solo due proprietà dell&quot;area di scorrimento che gli sviluppatori possono impostare.</xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> </xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>"
  syntax:
    content: public int ScrollLeft { get; set; }
    return:
      type: System.Int32
      description: "La distanza, espressa in pixel, tra il bordo sinistro dell&quot;elemento e il bordo sinistro del relativo contenuto."
  overload: System.Windows.Forms.HtmlElement.ScrollLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle
  id: ScrollRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
  fullName: System.Windows.Forms.HtmlElement.ScrollRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene le dimensioni dell&quot;area di scorrimento di un elemento."
  remarks: "Un elemento dispongono di un&quot;area scorrevole se il relativo contenuto supera le dimensioni delle dimensioni, a meno che non lo stile di overflow per l&quot;elemento impedisce le barre di scorrimento per il rendering.       Non è possibile modificare direttamente le dimensioni dell&quot;area di scorrimento, ma è possibile modificare la distanza tra i bordi dell&quot;area di scorrimento e i bordi dell&quot;elemento. Utilizzare il <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>e <xref:System.Windows.Forms.HtmlElement.ScrollTop%2A>proprietà per ottenere questo risultato.</xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> </xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>"
  syntax:
    content: public System.Drawing.Rectangle ScrollRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "Le dimensione e posizione delle coordinate dell&quot;area di scorrimento di un elemento."
  overload: System.Windows.Forms.HtmlElement.ScrollRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollTop
  id: ScrollTop
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
  fullName: System.Windows.Forms.HtmlElement.ScrollTop
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene o imposta la distanza tra il bordo dell&quot;elemento e il bordo superiore del relativo contenuto."
  remarks: "Le dimensioni dell&quot;area di scorrimento complete sono disponibili tramite <xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; <xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>e `ScrollTop` vengono esposte in modo indipendente, poiché sono solo due proprietà dell&quot;area di scorrimento che gli sviluppatori possono impostare.</xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> </xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>"
  syntax:
    content: public int ScrollTop { get; set; }
    return:
      type: System.Int32
      description: "La distanza, espressa in pixel, tra il bordo superiore dell&quot;elemento e il bordo superiore del relativo contenuto."
  overload: System.Windows.Forms.HtmlElement.ScrollTop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: SetAttribute(String,String)
  nameWithType: HtmlElement.SetAttribute(String,String)
  fullName: System.Windows.Forms.HtmlElement.SetAttribute(String,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Imposta il valore dell&quot;attributo denominato sull&quot;elemento."
  remarks: "Un attributo in formato HTML è qualsiasi coppia nome-valore valido per questo elemento. <xref:System.Windows.Forms.HtmlElement>espone solo gli attributi che sono comuni a tutti gli elementi, escludendo quelli che si applicano solo a determinati tipi di elementi. `SRC` è un attributo predefinito per il `IMG` tag, ad esempio, ma non per il `DIV` tag.</xref:System.Windows.Forms.HtmlElement> Utilizzare <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>e SetAttribute per modificare gli attributi non esposti nel modello oggetto di documento (DOM) gestito.</xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>       Se `attributeName` non è un attributo definito in un elemento, SetAttribute definirà sull&quot;elemento come nuovo attributo.       <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>SetAttribute e tra maiuscole e minuscole.</xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>       Per impostare il `class` dell&quot;attributo su un <xref:System.Windows.Forms.HtmlElement>, è necessario fare riferimento all&quot;attributo come `className` quando si specifica il primo argomento SetAttribute</xref:System.Windows.Forms.HtmlElement>"
  example:
  - "The following code example adds a new `IMG` element to the current document, using SetAttribute to set the `SRC` attribute for the image.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#13](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#13)]\n [!code-cs[System.Windows.Forms.HtmlElement#13](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#13)]"
  syntax:
    content: public void SetAttribute (string attributeName, string value);
    parameters:
    - id: attributeName
      type: System.String
      description: "Il nome dell&quot;attributo da impostare."
    - id: value
      type: System.String
      description: "Il nuovo valore di questo attributo."
  overload: System.Windows.Forms.HtmlElement.SetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Style
  id: Style
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Style
  nameWithType: HtmlElement.Style
  fullName: System.Windows.Forms.HtmlElement.Style
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene o imposta un elenco delimitato da punto e virgola di stili per l&quot;elemento corrente."
  remarks: "L&quot;HTML DOM Document Object Model () utilizza stili come definito nella specifica di fogli di stile CSS dalle World Wide Web per controllare la visualizzazione di un elemento. Stili nella proprietà di stile assumono la forma di coppie nome-valore delimitato da punti, con ogni coppia è separata da un punto e virgola, come indicato di seguito: `style-name1:value1;...;[style-nameN:valueN;]` per impostare il tipo di carattere per un `DIV` elemento 14 punti Times New Roman grassetto, ad esempio, è necessario assegnare la stringa seguente: `font-face:Times New Roman;font-size:14px;font-weight:bold;` per un elenco completo di tutti gli stili disponibili nel DOM HTML, vedere [dell&quot;attributo di stile](http://msdn.microsoft.com/library/ms534651.aspx)."
  syntax:
    content: public string Style { get; set; }
    return:
      type: System.String
      description: "Stringa costituita da tutti gli stili dell&quot;elemento"
  overload: System.Windows.Forms.HtmlElement.Style*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.TabIndex
  id: TabIndex
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
  fullName: System.Windows.Forms.HtmlElement.TabIndex
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene o imposta la posizione dell&quot;elemento corrente nell&quot;ordine di tabulazione."
  remarks: "TabIndex determina quale elemento in un documento HTML riceverà lo stato attivo quando l&quot;utente preme il tasto TAB. Per impostazione predefinita, sono gli unici elementi inclusi nell&quot;ordine di tabulazione `INPUT` elementi, il `SELECT` controllo e qualsiasi elemento il cui `contentEditable` è impostata su `true`. È possibile includere qualsiasi elemento HTML nell&quot;ordine di tabulazione, ad esempio un `DIV`, assegnandole un TabIndex esplicita.       Valori validi per TabIndex compreso tra -32767 e 32767."
  syntax:
    content: public short TabIndex { get; set; }
    return:
      type: System.Int16
      description: "L&quot;indice numerico dell&quot;elemento nell&quot;ordine di tabulazione."
  overload: System.Windows.Forms.HtmlElement.TabIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.TagName
  id: TagName
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: TagName
  nameWithType: HtmlElement.TagName
  fullName: System.Windows.Forms.HtmlElement.TagName
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Ottiene il nome del tag HTML."
  remarks: "Numero di elementi nel modello a oggetti documento HTML è gli attributi, proprietà e metodi che sono univoci per tali elementi. ad esempio il `HREF` attributo il `A` elemento, o `Submit` metodo `FORM`. Utilizzare TagName quando si dispone di un elemento di tipo potenzialmente arbitrario ed è necessario eseguire un&quot;operazione specifica del tipo."
  example:
  - "The following code example finds all of the `IMG` tags in a document, and uses the `TagName` property to test whether the `IMG` is hyperlinked to another page; if it is, the code assigns the URL to the `ALT` attribute of the `IMG` tag, so that users can mouse over the image to see where it will take them.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public string TagName { get; }
    return:
      type: System.String
      description: "Il nome utilizzato per creare questo elemento mediante markup HTML."
  overload: System.Windows.Forms.HtmlElement.TagName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Windows.Forms.HtmlElement.All
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: All
  nameWithType: HtmlElement.All
  fullName: System.Windows.Forms.HtmlElement.All
- uid: System.Windows.Forms.HtmlElementCollection
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementCollection
  nameWithType: HtmlElementCollection
  fullName: System.Windows.Forms.HtmlElementCollection
- uid: System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AppendChild(HtmlElement)
  nameWithType: HtmlElement.AppendChild(HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.AppendChild(HtmlElement)
- uid: System.Windows.Forms.HtmlElement
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: System.Windows.Forms.HtmlElement
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.AttachEventHandler(String,EventHandler)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
  fullName: System.Windows.Forms.HtmlElement.CanHaveChildren
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.HtmlElement.Children
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Children
  nameWithType: HtmlElement.Children
  fullName: System.Windows.Forms.HtmlElement.Children
- uid: System.Windows.Forms.HtmlElement.Click
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Click
  nameWithType: HtmlElement.Click
  fullName: System.Windows.Forms.HtmlElement.Click
- uid: System.Windows.Forms.HtmlElementEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementEventHandler
  nameWithType: HtmlElementEventHandler
  fullName: System.Windows.Forms.HtmlElementEventHandler
- uid: System.Windows.Forms.HtmlElement.ClientRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
  fullName: System.Windows.Forms.HtmlElement.ClientRectangle
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.DetachEventHandler(String,EventHandler)
- uid: System.Windows.Forms.HtmlElement.Document
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Document
  nameWithType: HtmlElement.Document
  fullName: System.Windows.Forms.HtmlElement.Document
- uid: System.Windows.Forms.HtmlDocument
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlDocument
  nameWithType: HtmlDocument
  fullName: System.Windows.Forms.HtmlDocument
- uid: System.Windows.Forms.HtmlElement.DomElement
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DomElement
  nameWithType: HtmlElement.DomElement
  fullName: System.Windows.Forms.HtmlElement.DomElement
- uid: System.Windows.Forms.HtmlElement.DoubleClick
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DoubleClick
  nameWithType: HtmlElement.DoubleClick
  fullName: System.Windows.Forms.HtmlElement.DoubleClick
- uid: System.Windows.Forms.HtmlElement.Drag
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Drag
  nameWithType: HtmlElement.Drag
  fullName: System.Windows.Forms.HtmlElement.Drag
- uid: System.Windows.Forms.HtmlElement.DragEnd
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragEnd
  nameWithType: HtmlElement.DragEnd
  fullName: System.Windows.Forms.HtmlElement.DragEnd
- uid: System.Windows.Forms.HtmlElement.DragLeave
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragLeave
  nameWithType: HtmlElement.DragLeave
  fullName: System.Windows.Forms.HtmlElement.DragLeave
- uid: System.Windows.Forms.HtmlElement.DragOver
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragOver
  nameWithType: HtmlElement.DragOver
  fullName: System.Windows.Forms.HtmlElement.DragOver
- uid: System.Windows.Forms.HtmlElement.Enabled
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Enabled
  nameWithType: HtmlElement.Enabled
  fullName: System.Windows.Forms.HtmlElement.Enabled
- uid: System.Windows.Forms.HtmlElement.Equals(System.Object)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Equals(Object)
  nameWithType: HtmlElement.Equals(Object)
  fullName: System.Windows.Forms.HtmlElement.Equals(Object)
- uid: System.Windows.Forms.HtmlElement.FirstChild
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
  fullName: System.Windows.Forms.HtmlElement.FirstChild
- uid: System.Windows.Forms.HtmlElement.Focus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focus()
  nameWithType: HtmlElement.Focus()
  fullName: System.Windows.Forms.HtmlElement.Focus()
- uid: System.Windows.Forms.HtmlElement.Focusing
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focusing
  nameWithType: HtmlElement.Focusing
  fullName: System.Windows.Forms.HtmlElement.Focusing
- uid: System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetAttribute(String)
  nameWithType: HtmlElement.GetAttribute(String)
  fullName: System.Windows.Forms.HtmlElement.GetAttribute(String)
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: HtmlElement.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlElement.GetElementsByTagName(String)
- uid: System.Windows.Forms.HtmlElement.GetHashCode
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetHashCode()
  nameWithType: HtmlElement.GetHashCode()
  fullName: System.Windows.Forms.HtmlElement.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.HtmlElement.GotFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GotFocus
  nameWithType: HtmlElement.GotFocus
  fullName: System.Windows.Forms.HtmlElement.GotFocus
- uid: System.Windows.Forms.HtmlElement.Id
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Id
  nameWithType: HtmlElement.Id
  fullName: System.Windows.Forms.HtmlElement.Id
- uid: System.Windows.Forms.HtmlElement.InnerHtml
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
  fullName: System.Windows.Forms.HtmlElement.InnerHtml
- uid: System.Windows.Forms.HtmlElement.InnerText
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerText
  nameWithType: HtmlElement.InnerText
  fullName: System.Windows.Forms.HtmlElement.InnerText
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  nameWithType: HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
- uid: System.Windows.Forms.HtmlElementInsertionOrientation
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementInsertionOrientation
  nameWithType: HtmlElementInsertionOrientation
  fullName: System.Windows.Forms.HtmlElementInsertionOrientation
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember(String)
  nameWithType: HtmlElement.InvokeMember(String)
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String)
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember(String,Object[])
  nameWithType: HtmlElement.InvokeMember(String,Object[])
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.HtmlElement.KeyDown
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyDown
  nameWithType: HtmlElement.KeyDown
  fullName: System.Windows.Forms.HtmlElement.KeyDown
- uid: System.Windows.Forms.HtmlElement.KeyPress
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyPress
  nameWithType: HtmlElement.KeyPress
  fullName: System.Windows.Forms.HtmlElement.KeyPress
- uid: System.Windows.Forms.HtmlElement.KeyUp
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyUp
  nameWithType: HtmlElement.KeyUp
  fullName: System.Windows.Forms.HtmlElement.KeyUp
- uid: System.Windows.Forms.HtmlElement.LosingFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: LosingFocus
  nameWithType: HtmlElement.LosingFocus
  fullName: System.Windows.Forms.HtmlElement.LosingFocus
- uid: System.Windows.Forms.HtmlElement.LostFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: LostFocus
  nameWithType: HtmlElement.LostFocus
  fullName: System.Windows.Forms.HtmlElement.LostFocus
- uid: System.Windows.Forms.HtmlElement.MouseDown
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseDown
  nameWithType: HtmlElement.MouseDown
  fullName: System.Windows.Forms.HtmlElement.MouseDown
- uid: System.Windows.Forms.HtmlElement.MouseEnter
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseEnter
  nameWithType: HtmlElement.MouseEnter
  fullName: System.Windows.Forms.HtmlElement.MouseEnter
- uid: System.Windows.Forms.HtmlElement.MouseLeave
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseLeave
  nameWithType: HtmlElement.MouseLeave
  fullName: System.Windows.Forms.HtmlElement.MouseLeave
- uid: System.Windows.Forms.HtmlElement.MouseMove
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseMove
  nameWithType: HtmlElement.MouseMove
  fullName: System.Windows.Forms.HtmlElement.MouseMove
- uid: System.Windows.Forms.HtmlElement.MouseOver
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseOver
  nameWithType: HtmlElement.MouseOver
  fullName: System.Windows.Forms.HtmlElement.MouseOver
- uid: System.Windows.Forms.HtmlElement.MouseUp
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseUp
  nameWithType: HtmlElement.MouseUp
  fullName: System.Windows.Forms.HtmlElement.MouseUp
- uid: System.Windows.Forms.HtmlElement.Name
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Name
  nameWithType: HtmlElement.Name
  fullName: System.Windows.Forms.HtmlElement.Name
- uid: System.Windows.Forms.HtmlElement.NextSibling
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
  fullName: System.Windows.Forms.HtmlElement.NextSibling
- uid: System.Windows.Forms.HtmlElement.OffsetParent
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
  fullName: System.Windows.Forms.HtmlElement.OffsetParent
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
  fullName: System.Windows.Forms.HtmlElement.OffsetRectangle
- uid: System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Equality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Equality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Equality(HtmlElement,HtmlElement)
- uid: System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Inequality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Inequality(HtmlElement,HtmlElement)
- uid: System.Windows.Forms.HtmlElement.OuterHtml
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
  fullName: System.Windows.Forms.HtmlElement.OuterHtml
- uid: System.Windows.Forms.HtmlElement.OuterText
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterText
  nameWithType: HtmlElement.OuterText
  fullName: System.Windows.Forms.HtmlElement.OuterText
- uid: System.Windows.Forms.HtmlElement.Parent
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Parent
  nameWithType: HtmlElement.Parent
  fullName: System.Windows.Forms.HtmlElement.Parent
- uid: System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RaiseEvent(String)
  nameWithType: HtmlElement.RaiseEvent(String)
  fullName: System.Windows.Forms.HtmlElement.RaiseEvent(String)
- uid: System.Windows.Forms.HtmlElement.RemoveFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RemoveFocus()
  nameWithType: HtmlElement.RemoveFocus()
  fullName: System.Windows.Forms.HtmlElement.RemoveFocus()
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollIntoView(Boolean)
  nameWithType: HtmlElement.ScrollIntoView(Boolean)
  fullName: System.Windows.Forms.HtmlElement.ScrollIntoView(Boolean)
- uid: System.Windows.Forms.HtmlElement.ScrollLeft
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
  fullName: System.Windows.Forms.HtmlElement.ScrollLeft
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
  fullName: System.Windows.Forms.HtmlElement.ScrollRectangle
- uid: System.Windows.Forms.HtmlElement.ScrollTop
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
  fullName: System.Windows.Forms.HtmlElement.ScrollTop
- uid: System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: SetAttribute(String,String)
  nameWithType: HtmlElement.SetAttribute(String,String)
  fullName: System.Windows.Forms.HtmlElement.SetAttribute(String,String)
- uid: System.Windows.Forms.HtmlElement.Style
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Style
  nameWithType: HtmlElement.Style
  fullName: System.Windows.Forms.HtmlElement.Style
- uid: System.Windows.Forms.HtmlElement.TabIndex
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
  fullName: System.Windows.Forms.HtmlElement.TabIndex
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Windows.Forms.HtmlElement.TagName
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TagName
  nameWithType: HtmlElement.TagName
  fullName: System.Windows.Forms.HtmlElement.TagName
- uid: System.Windows.Forms.HtmlElement.All*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: All
  nameWithType: HtmlElement.All
- uid: System.Windows.Forms.HtmlElement.AppendChild*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AppendChild
  nameWithType: HtmlElement.AppendChild
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AttachEventHandler
  nameWithType: HtmlElement.AttachEventHandler
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
- uid: System.Windows.Forms.HtmlElement.Children*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Children
  nameWithType: HtmlElement.Children
- uid: System.Windows.Forms.HtmlElement.ClientRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DetachEventHandler
  nameWithType: HtmlElement.DetachEventHandler
- uid: System.Windows.Forms.HtmlElement.Document*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Document
  nameWithType: HtmlElement.Document
- uid: System.Windows.Forms.HtmlElement.DomElement*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DomElement
  nameWithType: HtmlElement.DomElement
- uid: System.Windows.Forms.HtmlElement.Enabled*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Enabled
  nameWithType: HtmlElement.Enabled
- uid: System.Windows.Forms.HtmlElement.Equals*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Equals
  nameWithType: HtmlElement.Equals
- uid: System.Windows.Forms.HtmlElement.FirstChild*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
- uid: System.Windows.Forms.HtmlElement.Focus*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focus
  nameWithType: HtmlElement.Focus
- uid: System.Windows.Forms.HtmlElement.GetAttribute*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetAttribute
  nameWithType: HtmlElement.GetAttribute
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetElementsByTagName
  nameWithType: HtmlElement.GetElementsByTagName
- uid: System.Windows.Forms.HtmlElement.GetHashCode*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetHashCode
  nameWithType: HtmlElement.GetHashCode
- uid: System.Windows.Forms.HtmlElement.Id*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Id
  nameWithType: HtmlElement.Id
- uid: System.Windows.Forms.HtmlElement.InnerHtml*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
- uid: System.Windows.Forms.HtmlElement.InnerText*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerText
  nameWithType: HtmlElement.InnerText
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InsertAdjacentElement
  nameWithType: HtmlElement.InsertAdjacentElement
- uid: System.Windows.Forms.HtmlElement.InvokeMember*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember
  nameWithType: HtmlElement.InvokeMember
- uid: System.Windows.Forms.HtmlElement.Name*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Name
  nameWithType: HtmlElement.Name
- uid: System.Windows.Forms.HtmlElement.NextSibling*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
- uid: System.Windows.Forms.HtmlElement.OffsetParent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
- uid: System.Windows.Forms.HtmlElement.op_Equality*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Equality
  nameWithType: HtmlElement.op_Equality
- uid: System.Windows.Forms.HtmlElement.op_Inequality*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Inequality
  nameWithType: HtmlElement.op_Inequality
- uid: System.Windows.Forms.HtmlElement.OuterHtml*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
- uid: System.Windows.Forms.HtmlElement.OuterText*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterText
  nameWithType: HtmlElement.OuterText
- uid: System.Windows.Forms.HtmlElement.Parent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Parent
  nameWithType: HtmlElement.Parent
- uid: System.Windows.Forms.HtmlElement.RaiseEvent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RaiseEvent
  nameWithType: HtmlElement.RaiseEvent
- uid: System.Windows.Forms.HtmlElement.RemoveFocus*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RemoveFocus
  nameWithType: HtmlElement.RemoveFocus
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollIntoView
  nameWithType: HtmlElement.ScrollIntoView
- uid: System.Windows.Forms.HtmlElement.ScrollLeft*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
- uid: System.Windows.Forms.HtmlElement.ScrollTop*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
- uid: System.Windows.Forms.HtmlElement.SetAttribute*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: SetAttribute
  nameWithType: HtmlElement.SetAttribute
- uid: System.Windows.Forms.HtmlElement.Style*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Style
  nameWithType: HtmlElement.Style
- uid: System.Windows.Forms.HtmlElement.TabIndex*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
- uid: System.Windows.Forms.HtmlElement.TagName*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TagName
  nameWithType: HtmlElement.TagName
