### YamlMime:ManagedReference
items:
- uid: System.Activities.Presentation.Model.EditingScope
  id: EditingScope
  children:
  - System.Activities.Presentation.Model.EditingScope.CanComplete
  - System.Activities.Presentation.Model.EditingScope.Changes
  - System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges
  - System.Activities.Presentation.Model.EditingScope.OnComplete
  - System.Activities.Presentation.Model.EditingScope.OnException(System.Exception)
  - System.Activities.Presentation.Model.EditingScope.OnRevert(System.Boolean)
  langs:
  - csharp
  name: EditingScope
  nameWithType: EditingScope
  fullName: System.Activities.Presentation.Model.EditingScope
  type: Class
  summary: "Un ambito di modifica rappresenta una raccolta di modifiche per il <xref href=&quot;System.Activities.Presentation.Model.ModelItem&quot;> </xref> struttura ad albero che può essere eseguito il commit o rollback come un&quot;unità atomica di lavoro."
  remarks: "Ciò è utile per inviare in batch un set di modifiche a più <xref:System.Activities.Presentation.Model.ModelItem>oggetti.</xref:System.Activities.Presentation.Model.ModelItem> Ad esempio, nelle attività di messaggistica, le modifiche apportate da finestre di dialogo generate influirà più valori di proprietà. Tuttavia, poiché tutte le modifiche provengono dalla finestra di dialogo generata, le modifiche devono essere considerati come un batch e annullate come una singola unità di lavoro. Per ulteriori informazioni sull&quot;utilizzo, vedere l&quot;esempio di ambito di modifica."
  syntax:
    content: 'public class EditingScope : System.Activities.Presentation.Model.ModelEditingScope'
  inheritance:
  - System.Object
  - System.Activities.Presentation.Model.ModelEditingScope
  implements: []
  inheritedMembers:
  - System.Activities.Presentation.Model.ModelEditingScope.Complete
  - System.Activities.Presentation.Model.ModelEditingScope.Description
  - System.Activities.Presentation.Model.ModelEditingScope.Dispose
  - System.Activities.Presentation.Model.ModelEditingScope.Dispose(System.Boolean)
  - System.Activities.Presentation.Model.ModelEditingScope.Revert
  platform:
  - net462
- uid: System.Activities.Presentation.Model.EditingScope.CanComplete
  id: CanComplete
  parent: System.Activities.Presentation.Model.EditingScope
  langs:
  - csharp
  name: CanComplete()
  nameWithType: EditingScope.CanComplete()
  fullName: System.Activities.Presentation.Model.EditingScope.CanComplete()
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Determina se è possibile completare l&quot;istanza di ambito di modifica corrente."
  syntax:
    content: protected override bool CanComplete ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se non è possibile completare l&quot;ambito di modifica; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Activities.Presentation.Model.EditingScope.CanComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.EditingScope.Changes
  id: Changes
  parent: System.Activities.Presentation.Model.EditingScope
  langs:
  - csharp
  name: Changes
  nameWithType: EditingScope.Changes
  fullName: System.Activities.Presentation.Model.EditingScope.Changes
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Ottiene un elenco delle modifiche."
  syntax:
    content: public System.Collections.Generic.List<System.Activities.Presentation.Model.Change> Changes { get; }
    return:
      type: System.Collections.Generic.List{System.Activities.Presentation.Model.Change}
      description: "Restituisce un &lt;xref:System.Collections.Generic.List%601&gt; contenente le modifiche apportate."
  overload: System.Activities.Presentation.Model.EditingScope.Changes*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges
  id: HasEffectiveChanges
  parent: System.Activities.Presentation.Model.EditingScope
  langs:
  - csharp
  name: HasEffectiveChanges
  nameWithType: EditingScope.HasEffectiveChanges
  fullName: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Ottiene un valore booleano che specifica se le modifiche sono state applicate all&quot;ambito di modifica."
  syntax:
    content: public bool HasEffectiveChanges { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se le modifiche sono state applicate all&quot;ambito di modifica; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>..."
  overload: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.EditingScope.OnComplete
  id: OnComplete
  parent: System.Activities.Presentation.Model.EditingScope
  langs:
  - csharp
  name: OnComplete()
  nameWithType: EditingScope.OnComplete()
  fullName: System.Activities.Presentation.Model.EditingScope.OnComplete()
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Genera l&quot;evento di completamento."
  syntax:
    content: protected override void OnComplete ();
    parameters: []
  overload: System.Activities.Presentation.Model.EditingScope.OnComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.EditingScope.OnException(System.Exception)
  id: OnException(System.Exception)
  parent: System.Activities.Presentation.Model.EditingScope
  langs:
  - csharp
  name: OnException(Exception)
  nameWithType: EditingScope.OnException(Exception)
  fullName: System.Activities.Presentation.Model.EditingScope.OnException(Exception)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Gestisce l&quot;eccezione specificata."
  syntax:
    content: protected override bool OnException (Exception e);
    parameters:
    - id: e
      type: System.Exception
      description: "Eccezione da gestire."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;eccezione gestita; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Activities.Presentation.Model.EditingScope.OnException*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.Model.EditingScope.OnRevert(System.Boolean)
  id: OnRevert(System.Boolean)
  parent: System.Activities.Presentation.Model.EditingScope
  langs:
  - csharp
  name: OnRevert(Boolean)
  nameWithType: EditingScope.OnRevert(Boolean)
  fullName: System.Activities.Presentation.Model.EditingScope.OnRevert(Boolean)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Model
  summary: "Genera l&quot;evento di ripristino."
  syntax:
    content: protected override void OnRevert (bool finalizing);
    parameters:
    - id: finalizing
      type: System.Boolean
      description: "Non utilizzato in questa implementazione."
  overload: System.Activities.Presentation.Model.EditingScope.OnRevert*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.Presentation.Model.ModelEditingScope
  isExternal: false
  name: System.Activities.Presentation.Model.ModelEditingScope
- uid: System.Activities.Presentation.Model.EditingScope.CanComplete
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: CanComplete()
  nameWithType: EditingScope.CanComplete()
  fullName: System.Activities.Presentation.Model.EditingScope.CanComplete()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activities.Presentation.Model.EditingScope.Changes
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: Changes
  nameWithType: EditingScope.Changes
  fullName: System.Activities.Presentation.Model.EditingScope.Changes
- uid: System.Collections.Generic.List{System.Activities.Presentation.Model.Change}
  parent: System.Collections.Generic
  isExternal: true
  name: List<Change>
  nameWithType: List<Change>
  fullName: System.Collections.Generic.List<System.Activities.Presentation.Model.Change>
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: List<System.Activities.Presentation.Model.Change>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Presentation.Model.Change
    name: Change
    nameWithType: Change
    fullName: Change
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: HasEffectiveChanges
  nameWithType: EditingScope.HasEffectiveChanges
  fullName: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges
- uid: System.Activities.Presentation.Model.EditingScope.OnComplete
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: OnComplete()
  nameWithType: EditingScope.OnComplete()
  fullName: System.Activities.Presentation.Model.EditingScope.OnComplete()
- uid: System.Activities.Presentation.Model.EditingScope.OnException(System.Exception)
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: OnException(Exception)
  nameWithType: EditingScope.OnException(Exception)
  fullName: System.Activities.Presentation.Model.EditingScope.OnException(Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Activities.Presentation.Model.EditingScope.OnRevert(System.Boolean)
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: OnRevert(Boolean)
  nameWithType: EditingScope.OnRevert(Boolean)
  fullName: System.Activities.Presentation.Model.EditingScope.OnRevert(Boolean)
- uid: System.Activities.Presentation.Model.EditingScope.CanComplete*
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: CanComplete
  nameWithType: EditingScope.CanComplete
- uid: System.Activities.Presentation.Model.EditingScope.Changes*
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: Changes
  nameWithType: EditingScope.Changes
- uid: System.Activities.Presentation.Model.EditingScope.HasEffectiveChanges*
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: HasEffectiveChanges
  nameWithType: EditingScope.HasEffectiveChanges
- uid: System.Activities.Presentation.Model.EditingScope.OnComplete*
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: OnComplete
  nameWithType: EditingScope.OnComplete
- uid: System.Activities.Presentation.Model.EditingScope.OnException*
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: OnException
  nameWithType: EditingScope.OnException
- uid: System.Activities.Presentation.Model.EditingScope.OnRevert*
  parent: System.Activities.Presentation.Model.EditingScope
  isExternal: false
  name: OnRevert
  nameWithType: EditingScope.OnRevert
