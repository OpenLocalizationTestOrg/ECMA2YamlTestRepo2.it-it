### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.ReflectionPermissionAttribute
  id: ReflectionPermissionAttribute
  children:
  - System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  - System.Security.Permissions.ReflectionPermissionAttribute.Flags
  - System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  - System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  - System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  - System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  langs:
  - csharp
  name: ReflectionPermissionAttribute
  nameWithType: ReflectionPermissionAttribute
  fullName: System.Security.Permissions.ReflectionPermissionAttribute
  type: Class
  summary: "Consente di azioni di sicurezza per <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref> da applicare al codice usando la sicurezza dichiarativa."
  remarks: "L&quot;ambito della dichiarazione che è consentita dipende il <xref:System.Security.Permissions.SecurityAction>utilizzato.</xref:System.Security.Permissions.SecurityAction>       Le informazioni di sicurezza dichiarate da un attributo di sicurezza viene archiviate nei metadati dell&quot;attributo di destinazione e si accedono dal sistema in fase di esecuzione. Gli attributi di sicurezza vengono utilizzati solo per la sicurezza dichiarativa. Per la sicurezza imperativa, utilizzare la classe dell&quot;autorizzazione corrispondente."
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ReflectionPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: ReflectionPermissionAttribute(SecurityAction)
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Permissions.ReflectionPermissionAttribute&quot;> </xref> classe con l&quot;oggetto specificato <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>."
  syntax:
    content: public ReflectionPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "Uno del <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref> valori."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: ReflectionPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Crea e restituisce un nuovo <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref>."
  remarks: "Questo metodo deve essere chiamato solo dal sistema di sicurezza, mai dal codice dell&quot;applicazione.       In fase di compilazione, gli attributi convertono le dichiarazioni di sicurezza in un formato serializzato nei metadati. Dati di sicurezza dichiarativa nei metadati vengono creati dall&quot;autorizzazione restituita dal metodo che corrisponde a questo attributo."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Oggetto <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref> che corrisponde a questo attributo."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  id: Flags
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene o imposta gli utilizzi della reflection correnti consentiti."
  syntax:
    content: public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "Uno o più di <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref> combinati tramite un OR bit per bit di valori."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Un tentativo di impostare questa proprietà su un valore non valido. Vedere <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref> per i valori validi."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  id: MemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene o imposta un valore che indica se è consentita la chiamata di operazioni su membri non pubblici."
  syntax:
    content: public bool MemberAccess { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se è consentita la chiamata di operazioni su membri non pubblici. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  id: ReflectionEmit
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene o imposta un valore che indica se l&quot;utilizzo di determinate funzionalità in <xref href=&quot;System.Reflection.Emit&quot;> </xref>, ad esempio la creazione di simboli di debug, è consentito."
  remarks: "> [!NOTE]> Inizia con il [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)], la creazione di codice non richiede più <xref:System.Security.Permissions.ReflectionPermission>con il <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>flag.</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.ReflectionPermission> Alcune funzionalità di reflection emit, ad esempio la creazione di simboli di debug, richiedono ancora il <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>flag.</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> (Vedere [problemi di sicurezza nella Reflection Emit](~/add/includes/ajax-current-ext-md.md).)   >> Per usare questa funzionalità, l&quot;applicazione deve essere destinata la [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] o versione successiva."
  syntax:
    content: public bool ReflectionEmit { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se è consentito l&quot;uso delle funzionalità di interessato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  id: RestrictedMemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene o imposta un valore che indica se è consentita con restrizioni chiamata dei membri non pubblici. Chiamata con restrizioni significa che il set di concessioni dell&quot;assembly che contiene il membro non pubblico che viene richiamato deve essere uguale o è un subset del set di concessioni dell&quot;assembly chiamante."
  remarks: >-
    > [!NOTE]

    >  This property is introduced in the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]. To use this property, your application should target the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] or later.
  syntax:
    content: public bool RestrictedMemberAccess { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la chiamata di membri non pubblici con restrizioni è consentita. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  id: TypeInformation
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene o imposta un valore che indica se è consentita la reflection su membri che non sono visibili."
  remarks: "Questa proprietà è obsoleta. La reflection sui metadati di membri che non sono visibili non richiede <xref:System.Security.Permissions.ReflectionPermission>.</xref:System.Security.Permissions.ReflectionPermission>"
  syntax:
    content: public bool TypeInformation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se è consentita la reflection su membri che non sono visibili. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionPermissionAttribute(SecurityAction)
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: ReflectionPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.Flags
- uid: System.Security.Permissions.ReflectionPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: ReflectionPermissionFlag
  nameWithType: ReflectionPermissionFlag
  fullName: System.Security.Permissions.ReflectionPermissionFlag
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionPermissionAttribute
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: ReflectionPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
