### YamlMime:ManagedReference
items:
- uid: System.Configuration.IPersistComponentSettings
  id: IPersistComponentSettings
  children:
  - System.Configuration.IPersistComponentSettings.LoadComponentSettings
  - System.Configuration.IPersistComponentSettings.ResetComponentSettings
  - System.Configuration.IPersistComponentSettings.SaveComponentSettings
  - System.Configuration.IPersistComponentSettings.SaveSettings
  - System.Configuration.IPersistComponentSettings.SettingsKey
  langs:
  - csharp
  name: IPersistComponentSettings
  nameWithType: IPersistComponentSettings
  fullName: System.Configuration.IPersistComponentSettings
  type: Interface
  summary: "Definisce le funzionalità standard per i controlli o le librerie che archiviano e recuperano le impostazioni dell&quot;applicazione."
  remarks: "In genere, è possibile aggiungere il supporto delle impostazioni dell&quot;applicazione a un&quot;applicazione mediante la creazione di una classe wrapper di impostazioni, derivata da <xref:System.Configuration.ApplicationSettingsBase>, quindi aggiungere proprietà speciali per questa classe.</xref:System.Configuration.ApplicationSettingsBase> Tuttavia, questo approccio non sufficientemente incapsula le impostazioni dell&quot;applicazione per un controllo in modo che il contenitore è schermato dai dettagli. L&quot;interfaccia IPersistComponentSettings fornisce un&quot;applicazione con un&quot;interfaccia standard per comunicare richieste di modifica dello stato di impostazioni applicazione a un modulo di libreria, componente o controllo. Gli strumenti Design-time dipendono anche da questa interfaccia per gestire correttamente i controlli e componenti."
  syntax:
    content: public interface IPersistComponentSettings
  implements: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings
  id: LoadComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: LoadComponentSettings()
  nameWithType: IPersistComponentSettings.LoadComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.LoadComponentSettings()
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Legge le impostazioni del controllo dell&quot;applicazione nelle corrispondenti proprietà e aggiorna lo stato del controllo."
  remarks: "In generale, il metodo LoadComponentSettings vengono eseguite due operazioni fondamentali:-ogni istanza delle impostazioni dell&quot;applicazione contenuti dal controllo per aggiornare i valori delle proprietà delle impostazioni dell&quot;applicazione, in genere chiamando i relativi <xref:System.Configuration.ApplicationSettingsBase.Reload%2A>metodi.</xref:System.Configuration.ApplicationSettingsBase.Reload%2A>      -Se necessario, aggiorna le proprietà generali che variano a seconda delle impostazioni ricaricate proprietà. Ad esempio, se la classe di impostazioni è contenuta una `location` proprietà delle impostazioni, LoadComponentSettings deve assicurarsi che il controllo <xref:System.Windows.Forms.Control.Location%2A>proprietà viene aggiornata per riflettere questa impostazione ricaricata.</xref:System.Windows.Forms.Control.Location%2A>"
  syntax:
    content: public void LoadComponentSettings ();
    parameters: []
  overload: System.Configuration.IPersistComponentSettings.LoadComponentSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings
  id: ResetComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: ResetComponentSettings()
  nameWithType: IPersistComponentSettings.ResetComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.ResetComponentSettings()
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Reimposta le proprietà del controllo dell&quot;applicazione delle impostazioni in base ai valori predefiniti."
  remarks: "L&quot;implementazione del metodo ResetComponentSettings chiama in genere il <xref:System.Configuration.ApplicationSettingsBase.Reset%2A>metodo in ogni istanza di una classe di impostazioni dell&quot;applicazione contiene.</xref:System.Configuration.ApplicationSettingsBase.Reset%2A>"
  syntax:
    content: public void ResetComponentSettings ();
    parameters: []
  overload: System.Configuration.IPersistComponentSettings.ResetComponentSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings
  id: SaveComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: SaveComponentSettings()
  nameWithType: IPersistComponentSettings.SaveComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.SaveComponentSettings()
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Proprietà delle impostazioni dell&quot;applicazione del controllo viene mantenuto."
  remarks: "Il metodo SaveComponentSettings scrive i valori delle proprietà delle impostazioni dell&quot;applicazione del controllo nell&quot;archivio dati associato. La tecnica di memorizzazione e di serializzazione di dati che utilizza il metodo è determinata dal provider di impostazioni associate a ogni classe di impostazioni tramite <xref:System.Configuration.SettingsProviderAttribute>.</xref:System.Configuration.SettingsProviderAttribute> È possibile ignorare la scelta del provider di impostazioni utilizzando il <xref:System.Configuration.ISettingsProviderService>interfaccia.</xref:System.Configuration.ISettingsProviderService>      > [!NOTE] > Se il <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>proprietà `true`, il controllo deve chiamare SaveComponentSettings nella propria <xref:System.Windows.Forms.Control.Dispose%2A>metodo in modo che i dati di configurazione del controllo vengono automaticamente archiviati prima della chiusura dell&quot;applicazione.</xref:System.Windows.Forms.Control.Dispose%2A> </xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>"
  syntax:
    content: public void SaveComponentSettings ();
    parameters: []
  overload: System.Configuration.IPersistComponentSettings.SaveComponentSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.SaveSettings
  id: SaveSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: SaveSettings
  nameWithType: IPersistComponentSettings.SaveSettings
  fullName: System.Configuration.IPersistComponentSettings.SaveSettings
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Ottiene o imposta un valore che indica se il controllo devono essere mantenute automaticamente alle proprietà delle impostazioni dell&quot;applicazione."
  remarks: "Se un controllo contiene dati di configurazione, in genere verranno mantenuti i dati in risposta a una chiamata esplicita al <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A>metodo o a volte in modo implicito quando il controllo <xref:System.Windows.Forms.Control.Dispose%2A>metodo viene richiamato.</xref:System.Windows.Forms.Control.Dispose%2A> </xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> La proprietà SaveSettings determina se un controllo mantiene automaticamente i dati di configurazione quando viene eliminato.       Il valore predefinito di SaveSettings dipende dall&quot;implementazione del controllo. La documentazione per il controllo deve essere indicato se utilizza le impostazioni dell&quot;applicazione, quali dati vengono mantenuti e qual è il valore predefinito della proprietà SaveSettings."
  example:
  - "The following code example shows the proper way for a control to check the value of the SaveSettings property before it attempts to automatically persist its configuration data.  \n  \n `protected override void Dispose( bool disposing ) {`  \n  \n `if(disposing) {`  \n  \n `try {`  \n  \n `if (SaveSettings) {`  \n  \n `SaveComponentSettings();`  \n  \n `}`  \n  \n `}`  \n  \n `finally {`  \n  \n `//...`  \n  \n `}`  \n  \n `}`"
  syntax:
    content: public bool SaveSettings { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il controllo devono essere mantenute automaticamente lo stato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.IPersistComponentSettings.SaveSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.SettingsKey
  id: SettingsKey
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: SettingsKey
  nameWithType: IPersistComponentSettings.SettingsKey
  fullName: System.Configuration.IPersistComponentSettings.SettingsKey
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Ottiene o imposta il valore della chiave di impostazioni dell&quot;applicazione per l&quot;istanza corrente del controllo."
  remarks: "Utilizzare la proprietà SettingsKey per evitare ambiguità nei gruppi di proprietà delle impostazioni dell&quot;applicazione quando sono presenti più istanze della stessa classe wrapper. Ad esempio, se un controllo contiene una classe wrapper associata, quindi l&quot;inserimento di più istanze dello stesso controllo nella stessa applicazione risultano in genere in più istanze della classe wrapper. È necessaria una chiave di impostazioni solo quando i dati di configurazione è diverso per singolo per ogni istanza. ad esempio, la posizione dei controlli posizionati in modo dinamico.       Le regole generali seguenti si applicano all&quot;utilizzo di SettingsKey:-un controllo, come qualsiasi altra classe, può contenere zero o più classi di impostazioni dell&quot;applicazione, derivata da <xref:System.Configuration.ApplicationSettingsBase>.</xref:System.Configuration.ApplicationSettingsBase> Ogni classe di impostazioni contiene la <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName>proprietà, che consente di evitare ambiguità tra più istanze di tale classe.</xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName>      -Un controllo deve separare i dati per ogni istanza e i relativi dati condivisi in classi di impostazioni diverse.      -Per un controllo con i dati di configurazione per istanza, il `get` funzione di accesso della proprietà SettingsKey deve essere predefinito per il <xref:System.Windows.Forms.Control.Name%2A>del controllo.</xref:System.Windows.Forms.Control.Name%2A> Nella maggior parte dei casi il nome del controllo sarà univoco all&quot;interno di un&quot;applicazione. Se il controllo contiene solo dati di configurazione condivisi `get` deve essere predefinito per `null`.      -La `set` funzione di accesso per questa proprietà deve essere implementato per distinguere tra le classi di impostazioni che contengono dati di configurazione condivisa e per ogni istanza. Per ogni classe di impostazioni che contiene dati per ogni istanza, `set` deve essere passata alla <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName>proprietà della classe delle impostazioni.</xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName> Per le classi di impostazioni che contiene dati condivisi, `set` deve eseguire alcuna azione per tale classe di impostazioni."
  syntax:
    content: public string SettingsKey { get; set; }
    return:
      type: System.String
      description: "Oggetto <xref:System.String>contenente la chiave di impostazioni per l&quot;istanza corrente del controllo.</xref:System.String>"
  overload: System.Configuration.IPersistComponentSettings.SettingsKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: LoadComponentSettings()
  nameWithType: IPersistComponentSettings.LoadComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.LoadComponentSettings()
- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: ResetComponentSettings()
  nameWithType: IPersistComponentSettings.ResetComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.ResetComponentSettings()
- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveComponentSettings()
  nameWithType: IPersistComponentSettings.SaveComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.SaveComponentSettings()
- uid: System.Configuration.IPersistComponentSettings.SaveSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveSettings
  nameWithType: IPersistComponentSettings.SaveSettings
  fullName: System.Configuration.IPersistComponentSettings.SaveSettings
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.IPersistComponentSettings.SettingsKey
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SettingsKey
  nameWithType: IPersistComponentSettings.SettingsKey
  fullName: System.Configuration.IPersistComponentSettings.SettingsKey
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: LoadComponentSettings
  nameWithType: IPersistComponentSettings.LoadComponentSettings
- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: ResetComponentSettings
  nameWithType: IPersistComponentSettings.ResetComponentSettings
- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveComponentSettings
  nameWithType: IPersistComponentSettings.SaveComponentSettings
- uid: System.Configuration.IPersistComponentSettings.SaveSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveSettings
  nameWithType: IPersistComponentSettings.SaveSettings
- uid: System.Configuration.IPersistComponentSettings.SettingsKey*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SettingsKey
  nameWithType: IPersistComponentSettings.SettingsKey
