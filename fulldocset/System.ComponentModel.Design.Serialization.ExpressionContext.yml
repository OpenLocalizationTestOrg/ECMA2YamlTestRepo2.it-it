### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.Serialization.ExpressionContext
  id: ExpressionContext
  children:
  - System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  - System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  - System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  - System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  - System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  - System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  langs:
  - csharp
  name: ExpressionContext
  nameWithType: ExpressionContext
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext
  type: Class
  summary: "Consente di passare lo stato di contesto tra i serializzatori. Questa classe non può essere ereditata."
  remarks: "Un ExpressionContext viene inserito nello stack di contesto e contiene l&quot;espressione più importante durante la serializzazione. Il codice c# seguente illustra un&quot;assegnazione.      ```   button1.Text = &quot;Hello&quot;;   ```Durante la serializzazione, diversi serializzatori sono responsabili per la creazione di questa singola istruzione. Uno di questi serializzatori è responsabile per la creazione di &quot;Hello&quot;. Vi sono casi quando potrebbe essere necessario che il serializzatore di conoscere il contesto in cui viene creata la relativa espressione. Nell&quot;esempio precedente, questo contesto non è necessaria. Il codice c# seguente viene illustrata una situazione in cui è necessaria la conoscenza del contesto.      ```   button1.Text = rm.GetString(&quot;button1_Text&quot;);   ```In questo caso, il serializzatore responsabile della creazione dell&quot;espressione di risorsa deve essere informato dei nomi degli oggetti di destinazione. La classe ExpressionContext può essere utilizzata per questo oggetto. Poiché ciascun serializzatore crea un&quot;espressione e richiama un serializzatore per gestire una parte ridotta dell&quot;istruzione nel suo complesso, contesto di un&quot;espressione il serializzatore inserisce nello stack di contesto. Ogni contesto di espressione è una proprietà padre che individua il contesto successivo nello stack. Ciò fornisce un&quot;efficace funzionalità di scorrimento."
  syntax:
    content: public sealed class ExpressionContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  id: '#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)'
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionContext(CodeExpression,Type,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.ComponentModel.Design.Serialization.ExpressionContext&quot;> </xref> classe con l&quot;espressione specificata e il proprietario."
  syntax:
    content: public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner);
    parameters:
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "Espressione codice specificata."
    - id: expressionType
      type: System.Type
      description: "Il tipo dell&quot;espressione codice specificata."
    - id: owner
      type: System.Object
      description: "Proprietario espressione codice specificata."
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  id: '#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)'
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionContext(CodeExpression,Type,Object,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.ComponentModel.Design.Serialization.ExpressionContext&quot;> </xref> classe con un valore corrente."
  syntax:
    content: public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner, object presetValue);
    parameters:
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "Espressione codice specificata."
    - id: expressionType
      type: System.Type
      description: "Il tipo dell&quot;espressione codice specificata."
    - id: owner
      type: System.Object
      description: "Proprietario espressione codice specificata."
    - id: presetValue
      type: System.Object
      description: "Valore predefinito di espressione codice specificata."
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  id: Expression
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: Expression
  nameWithType: ExpressionContext.Expression
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Ottiene l&quot;espressione rappresentata da questo contesto."
  syntax:
    content: public System.CodeDom.CodeExpression Expression { get; }
    return:
      type: System.CodeDom.CodeExpression
      description: "L&quot;espressione rappresentata da questo contesto."
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.Expression*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  id: ExpressionType
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Ottiene il <xref:System.Type>dell&quot;espressione.</xref:System.Type>"
  remarks: "È possibile utilizzare <xref:System.ComponentModel.Design.Serialization.ExpressionContext>per determinare se è necessario un cast durante l&quot;assegnazione all&quot;espressione.</xref:System.ComponentModel.Design.Serialization.ExpressionContext>"
  syntax:
    content: public Type ExpressionType { get; }
    return:
      type: System.Type
      description: "Il <xref:System.Type>dell&quot;espressione.</xref:System.Type>"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  id: Owner
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: Owner
  nameWithType: ExpressionContext.Owner
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Ottiene l&quot;oggetto proprietario di questa espressione."
  remarks: "Se l&quot;espressione è un riferimento alla proprietà di <xref:System.Windows.Forms.Control.Text%2A>proprietà di un&quot;istanza di <xref:System.Windows.Forms.Button>chiamato `button1`, proprietario restituisce `button1`.</xref:System.Windows.Forms.Button> </xref:System.Windows.Forms.Control.Text%2A>"
  syntax:
    content: public object Owner { get; }
    return:
      type: System.Object
      description: "L&quot;oggetto proprietario di questa espressione."
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  id: PresetValue
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Ottiene il valore predefinito di un&quot;espressione."
  remarks: "Contiene il valore predefinito di un&quot;espressione, se ne esiste uno. Ad esempio, se l&quot;espressione è un&quot;espressione di riferimento di proprietà che fa riferimento al <xref:System.Windows.Forms.Control.Controls%2A>proprietà di un <xref:System.Windows.Forms.Button>, la proprietà PresetValue contiene l&quot;istanza del <xref:System.Windows.Forms.Control.Controls%2A>proprietà.</xref:System.Windows.Forms.Control.Controls%2A> </xref:System.Windows.Forms.Button> </xref:System.Windows.Forms.Control.Controls%2A> In questo modo la proprietà è di sola lettura e set di impostazioni per l&quot;oggetto contenga un valore. D&quot;altra parte, una proprietà, ad esempio <xref:System.Windows.Forms.Control.Text%2A>o <xref:System.Windows.Forms.Control.Visible%2A>non dispone di un valore predefinito e pertanto la proprietà PresetValue restituisce `null`.</xref:System.Windows.Forms.Control.Visible%2A> </xref:System.Windows.Forms.Control.Text%2A>       Il codice c# seguente viene illustrato come i serializzatori possono utilizzare queste informazioni per la serializzazione.       [C#]      ```   Padding p = new Padding();   p.Left = 5;   button1.Padding = p;      button1.Padding.Left = 5;   ``` Il serializzatore del <xref:System.Windows.Forms.Padding>struttura deve essere informato se deve generare il primo o secondo form.</xref:System.Windows.Forms.Padding> Per impostazione predefinita, viene generato il primo form. La seconda forma viene generata solo se è presente un <xref:System.ComponentModel.Design.Serialization.ExpressionContext>nello stack di contesto che contiene un PresetValue uguale al valore del <xref:System.Windows.Forms.Padding>in corso la serializzazione.</xref:System.Windows.Forms.Padding> </xref:System.ComponentModel.Design.Serialization.ExpressionContext>"
  syntax:
    content: public object PresetValue { get; }
    return:
      type: System.Object
      description: "Il valore predefinito di questa espressione, o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se non è assegnato."
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext(CodeExpression,Type,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
- uid: System.CodeDom.CodeExpression
  parent: System.CodeDom
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: System.CodeDom.CodeExpression
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext(CodeExpression,Type,Object,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Expression
  nameWithType: ExpressionContext.Expression
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Owner
  nameWithType: ExpressionContext.Owner
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext
  nameWithType: ExpressionContext.ExpressionContext
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Expression
  nameWithType: ExpressionContext.Expression
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Owner
  nameWithType: ExpressionContext.Owner
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
