### YamlMime:ManagedReference
items:
- uid: System.ModuleHandle
  id: ModuleHandle
  children:
  - System.ModuleHandle.EmptyHandle
  - System.ModuleHandle.Equals(System.ModuleHandle)
  - System.ModuleHandle.Equals(System.Object)
  - System.ModuleHandle.GetHashCode
  - System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)
  - System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)
  - System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)
  - System.ModuleHandle.MDStreamVersion
  - System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)
  - System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)
  - System.ModuleHandle.ResolveFieldHandle(System.Int32)
  - System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  - System.ModuleHandle.ResolveMethodHandle(System.Int32)
  - System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  - System.ModuleHandle.ResolveTypeHandle(System.Int32)
  - System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  langs:
  - csharp
  name: "ModuleHandle"
  nameWithType: ModuleHandle
  fullName: System.ModuleHandle
  type: Struct
  summary: Represents a runtime handle for a module.
  remarks: The <xref:System.ModuleHandle.ResolveFieldHandle%2A>, <xref:System.ModuleHandle.ResolveMethodHandle%2A>, and <xref:System.ModuleHandle.ResolveTypeHandle%2A> methods provide efficient resolution of metadata tokens to runtime handles for fields, methods, and types in the current module.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public struct ModuleHandle
  inheritance:
  - System.ValueType
  implements: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.EmptyHandle
  id: EmptyHandle
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "EmptyHandle"
  nameWithType: ModuleHandle.EmptyHandle
  fullName: System.ModuleHandle.EmptyHandle
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents an empty module handle.
  syntax:
    content: public static readonly ModuleHandle EmptyHandle;
    return:
      type: System.ModuleHandle
      description: "To be added."
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.Equals(System.ModuleHandle)
  id: Equals(System.ModuleHandle)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "Equals(ModuleHandle)"
  nameWithType: ModuleHandle.Equals(ModuleHandle)
  fullName: System.ModuleHandle.Equals(ModuleHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a &lt;xref:System.Boolean&gt; value indicating whether the specified <see cref="T:System.ModuleHandle"></see> structure is equal to the current <see cref="T:System.ModuleHandle"></see>.
  syntax:
    content: public bool Equals (ModuleHandle handle);
    parameters:
    - id: handle
      type: System.ModuleHandle
      description: "The  structure to be compared with the current ."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ModuleHandle.Equals*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "Equals(Object)"
  nameWithType: ModuleHandle.Equals(Object)
  fullName: System.ModuleHandle.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a &lt;xref:System.Boolean&gt; value indicating whether the specified object is a <see cref="T:System.ModuleHandle"></see> structure, and equal to the current <see cref="T:System.ModuleHandle"></see>.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "The object to be compared with the current  structure."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ModuleHandle.Equals*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.GetHashCode
  id: GetHashCode
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "GetHashCode()"
  nameWithType: ModuleHandle.GetHashCode()
  fullName: System.ModuleHandle.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "To be added."
  overload: System.ModuleHandle.GetHashCode*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)
  id: GetRuntimeFieldHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "GetRuntimeFieldHandleFromMetadataToken(Int32)"
  nameWithType: ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime handle for the field identified by the specified metadata token.
  syntax:
    content: public RuntimeFieldHandle GetRuntimeFieldHandleFromMetadataToken (int fieldToken);
    parameters:
    - id: fieldToken
      type: System.Int32
      description: "A metadata token that identifies a field in the module."
    return:
      type: System.RuntimeFieldHandle
      description: "To be added."
  overload: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)
  id: GetRuntimeMethodHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "GetRuntimeMethodHandleFromMetadataToken(Int32)"
  nameWithType: ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime method handle for the method or constructor identified by the specified metadata token.
  syntax:
    content: public RuntimeMethodHandle GetRuntimeMethodHandleFromMetadataToken (int methodToken);
    parameters:
    - id: methodToken
      type: System.Int32
      description: "A metadata token that identifies a method or constructor in the module."
    return:
      type: System.RuntimeMethodHandle
      description: "To be added."
  overload: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)
  id: GetRuntimeTypeHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "GetRuntimeTypeHandleFromMetadataToken(Int32)"
  nameWithType: ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime type handle for the type identified by the specified metadata token.
  syntax:
    content: public RuntimeTypeHandle GetRuntimeTypeHandleFromMetadataToken (int typeToken);
    parameters:
    - id: typeToken
      type: System.Int32
      description: "A metadata token that identifies a type in the module."
    return:
      type: System.RuntimeTypeHandle
      description: "To be added."
  overload: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.MDStreamVersion
  id: MDStreamVersion
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "MDStreamVersion"
  nameWithType: ModuleHandle.MDStreamVersion
  fullName: System.ModuleHandle.MDStreamVersion
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the metadata stream version.
  remarks: >-
    > [!NOTE]

    >  For more information on the metadata header, see the Partition II: Metadata Definition and Semantics documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public int MDStreamVersion { get; }
    return:
      type: System.Int32
      description: "A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number."
  overload: System.ModuleHandle.MDStreamVersion*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)
  id: op_Equality(System.ModuleHandle,System.ModuleHandle)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "op_Equality(ModuleHandle,ModuleHandle)"
  nameWithType: ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)
  fullName: System.ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Tests whether two <see cref="T:System.ModuleHandle"></see> structures are equal.
  syntax:
    content: public static bool op_Equality (ModuleHandle left, ModuleHandle right);
    parameters:
    - id: left
      type: System.ModuleHandle
      description: "The  structure to the left of the equality operator."
    - id: right
      type: System.ModuleHandle
      description: "The  structure to the right of the equality operator."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ModuleHandle.op_Equality*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)
  id: op_Inequality(System.ModuleHandle,System.ModuleHandle)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "op_Inequality(ModuleHandle,ModuleHandle)"
  nameWithType: ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)
  fullName: System.ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Tests whether two <see cref="T:System.ModuleHandle"></see> structures are unequal.
  syntax:
    content: public static bool op_Inequality (ModuleHandle left, ModuleHandle right);
    parameters:
    - id: left
      type: System.ModuleHandle
      description: "The  structure to the left of the inequality operator."
    - id: right
      type: System.ModuleHandle
      description: "The  structure to the right of the inequality operator."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.ModuleHandle.op_Inequality*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32)
  id: ResolveFieldHandle(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "ResolveFieldHandle(Int32)"
  nameWithType: ModuleHandle.ResolveFieldHandle(Int32)
  fullName: System.ModuleHandle.ResolveFieldHandle(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime handle for the field identified by the specified metadata token.
  remarks: "To resolve a metadata token that identifies a field whose parent `TypeSpec` has a signature containing element type `var` or `mvar`, use the [ResolveFieldHandle(Int32, RuntimeTypeHandle\\[\\], RuntimeTypeHandle\\[\\])](assetId:///M:System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])?qualifyHint=False&autoUpgrade=False) method overload, which allows you to supply the necessary context.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public RuntimeFieldHandle ResolveFieldHandle (int fieldToken);
    parameters:
    - id: fieldToken
      type: System.Int32
      description: "A metadata token that identifies a field in the module."
    return:
      type: System.RuntimeFieldHandle
      description: "To be added."
  overload: System.ModuleHandle.ResolveFieldHandle*
  exceptions:
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n    metadataToken is not a valid token in the scope of the current module.  \n  \n -or-  \n  \n metadataToken is not a token for a field in the scope of the current module.  \n  \n -or-  \n  \n metadataToken identifies a field whose parent  has a signature containing element type  or ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The method is called on an empty field handle."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  id: ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])"
  nameWithType: ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime field handle for the field identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.
  remarks: >-
    > [!NOTE]

    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public RuntimeFieldHandle ResolveFieldHandle (int fieldToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);
    parameters:
    - id: fieldToken
      type: System.Int32
      description: "A metadata token that identifies a field in the module."
    - id: typeInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: "An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the type where the token is in scope, or  if that type is not generic."
    - id: methodInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: "An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the method where the token is in scope, or  if that method is not generic."
    return:
      type: System.RuntimeFieldHandle
      description: "To be added."
  overload: System.ModuleHandle.ResolveFieldHandle*
  exceptions:
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n    metadataToken is not a valid token in the scope of the current module.  \n  \n -or-  \n  \n metadataToken is not a token for a field in the scope of the current module.  \n  \n -or-  \n  \n metadataToken identifies a field whose parent  has a signature containing element type  or ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The method is called on an empty field handle."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n    fieldToken is not a valid token."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32)
  id: ResolveMethodHandle(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "ResolveMethodHandle(Int32)"
  nameWithType: ModuleHandle.ResolveMethodHandle(Int32)
  fullName: System.ModuleHandle.ResolveMethodHandle(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime method handle for the method or constructor identified by the specified metadata token.
  remarks: "To resolve a metadata token for a `MethodSpec` whose signature contains element type `var` or `mvar`, use the [ResolveMethodHandle(Int32, RuntimeTypeHandle\\[\\], RuntimeTypeHandle\\[\\])](assetId:///M:System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])?qualifyHint=False&autoUpgrade=False) method overload, which allows you to supply the necessary context.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public RuntimeMethodHandle ResolveMethodHandle (int methodToken);
    parameters:
    - id: methodToken
      type: System.Int32
      description: "A metadata token that identifies a method or constructor in the module."
    return:
      type: System.RuntimeMethodHandle
      description: "To be added."
  overload: System.ModuleHandle.ResolveMethodHandle*
  exceptions:
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n    methodToken is not a valid metadata token for a method in the current module.  \n  \n -or-  \n  \n metadataToken is not a token for a method or constructor in the scope of the current module.  \n  \n -or-  \n  \n metadataToken is a  whose signature contains element type  or ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The method is called on an empty method handle."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  id: ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])"
  nameWithType: ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime method handle for the method or constructor identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.
  remarks: >-
    > [!NOTE]

    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public RuntimeMethodHandle ResolveMethodHandle (int methodToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);
    parameters:
    - id: methodToken
      type: System.Int32
      description: "A metadata token that identifies a method or constructor in the module."
    - id: typeInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: "An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the type where the token is in scope, or  if that type is not generic."
    - id: methodInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: "An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the method where the token is in scope, or  if that method is not generic."
    return:
      type: System.RuntimeMethodHandle
      description: "To be added."
  overload: System.ModuleHandle.ResolveMethodHandle*
  exceptions:
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n    methodToken is not a valid metadata token for a method in the current module.  \n  \n -or-  \n  \n metadataToken is not a token for a method or constructor in the scope of the current module.  \n  \n -or-  \n  \n metadataToken is a  whose signature contains element type  or ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The method is called on an empty method handle."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n    methodToken is not a valid token."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32)
  id: ResolveTypeHandle(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "ResolveTypeHandle(Int32)"
  nameWithType: ModuleHandle.ResolveTypeHandle(Int32)
  fullName: System.ModuleHandle.ResolveTypeHandle(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime type handle for the type identified by the specified metadata token.
  remarks: "To resolve a metadata token for a `TypeSpec` whose signature contains element type `var` or `mvar`, use the [ResolveTypeHandle(Int32, RuntimeTypeHandle\\[\\], RuntimeTypeHandle\\[\\])](assetId:///M:System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])?qualifyHint=False&autoUpgrade=False) method overload, which allows you to supply the necessary context.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public RuntimeTypeHandle ResolveTypeHandle (int typeToken);
    parameters:
    - id: typeToken
      type: System.Int32
      description: "A metadata token that identifies a type in the module."
    return:
      type: System.RuntimeTypeHandle
      description: "To be added."
  overload: System.ModuleHandle.ResolveTypeHandle*
  exceptions:
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n    typeToken is not a valid metadata token for a type in the current module.  \n  \n -or-  \n  \n metadataToken is not a token for a type in the scope of the current module.  \n  \n -or-  \n  \n metadataToken is a  whose signature contains element type  or ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The method is called on an empty type handle."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  id: ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  langs:
  - csharp
  name: "ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])"
  nameWithType: ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime type handle for the type identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.
  remarks: >-
    > [!NOTE]

    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public RuntimeTypeHandle ResolveTypeHandle (int typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);
    parameters:
    - id: typeToken
      type: System.Int32
      description: "A metadata token that identifies a type in the module."
    - id: typeInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: "An array of <xref:System.RuntimeTypeHandle> structures representing the generic type arguments of the type where the token is in scope, or  if that type is not generic."
    - id: methodInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: "An array of <xref:System.RuntimeTypeHandle> structures objects representing the generic type arguments of the method where the token is in scope, or  if that method is not generic."
    return:
      type: System.RuntimeTypeHandle
      description: "To be added."
  overload: System.ModuleHandle.ResolveTypeHandle*
  exceptions:
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "\n    typeToken is not a valid metadata token for a type in the current module.  \n  \n -or-  \n  \n metadataToken is not a token for a type in the scope of the current module.  \n  \n -or-  \n  \n metadataToken is a  whose signature contains element type  or ."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The method is called on an empty type handle."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n    typeToken is not a valid token."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ValueType
  isExternal: false
  name: "System.ValueType"
- uid: System.ModuleHandle.EmptyHandle
  parent: System.ModuleHandle
  isExternal: false
  name: "EmptyHandle"
  nameWithType: ModuleHandle.EmptyHandle
  fullName: System.ModuleHandle.EmptyHandle
- uid: System.ModuleHandle
  parent: System
  isExternal: false
  name: "ModuleHandle"
  nameWithType: ModuleHandle
  fullName: System.ModuleHandle
- uid: System.ModuleHandle.Equals(System.ModuleHandle)
  parent: System.ModuleHandle
  isExternal: false
  name: "Equals(ModuleHandle)"
  nameWithType: ModuleHandle.Equals(ModuleHandle)
  fullName: System.ModuleHandle.Equals(ModuleHandle)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: "Boolean"
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ModuleHandle.Equals(System.Object)
  parent: System.ModuleHandle
  isExternal: false
  name: "Equals(Object)"
  nameWithType: ModuleHandle.Equals(Object)
  fullName: System.ModuleHandle.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: "Object"
  nameWithType: Object
  fullName: System.Object
- uid: System.ModuleHandle.GetHashCode
  parent: System.ModuleHandle
  isExternal: false
  name: "GetHashCode()"
  nameWithType: ModuleHandle.GetHashCode()
  fullName: System.ModuleHandle.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: "Int32"
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: "GetRuntimeFieldHandleFromMetadataToken(Int32)"
  nameWithType: ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: true
  name: "RuntimeFieldHandle"
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: "GetRuntimeMethodHandleFromMetadataToken(Int32)"
  nameWithType: ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: true
  name: "RuntimeMethodHandle"
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: "GetRuntimeTypeHandleFromMetadataToken(Int32)"
  nameWithType: ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: "RuntimeTypeHandle"
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.ModuleHandle.MDStreamVersion
  parent: System.ModuleHandle
  isExternal: false
  name: "MDStreamVersion"
  nameWithType: ModuleHandle.MDStreamVersion
  fullName: System.ModuleHandle.MDStreamVersion
- uid: System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)
  parent: System.ModuleHandle
  isExternal: false
  name: "op_Equality(ModuleHandle,ModuleHandle)"
  nameWithType: ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)
  fullName: System.ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)
- uid: System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)
  parent: System.ModuleHandle
  isExternal: false
  name: "op_Inequality(ModuleHandle,ModuleHandle)"
  nameWithType: ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)
  fullName: System.ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)
- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: "ResolveFieldHandle(Int32)"
  nameWithType: ModuleHandle.ResolveFieldHandle(Int32)
  fullName: System.ModuleHandle.ResolveFieldHandle(Int32)
- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  isExternal: false
  name: "ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])"
  nameWithType: ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
- uid: System.RuntimeTypeHandle[]
  parent: System
  isExternal: true
  name: "RuntimeTypeHandle"
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle[]
  spec.csharp:
  - uid: System.RuntimeTypeHandle
    name: "RuntimeTypeHandle"
    nameWithType: RuntimeTypeHandle
    fullName: RuntimeTypeHandle[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: "ResolveMethodHandle(Int32)"
  nameWithType: ModuleHandle.ResolveMethodHandle(Int32)
  fullName: System.ModuleHandle.ResolveMethodHandle(Int32)
- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  isExternal: false
  name: "ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])"
  nameWithType: ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: "ResolveTypeHandle(Int32)"
  nameWithType: ModuleHandle.ResolveTypeHandle(Int32)
  fullName: System.ModuleHandle.ResolveTypeHandle(Int32)
- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  isExternal: false
  name: "ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])"
  nameWithType: ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
- uid: System.ModuleHandle.Equals*
  parent: System.ModuleHandle
  isExternal: false
  name: "Equals"
  nameWithType: ModuleHandle.Equals
- uid: System.ModuleHandle.GetHashCode*
  parent: System.ModuleHandle
  isExternal: false
  name: "GetHashCode"
  nameWithType: ModuleHandle.GetHashCode
- uid: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken*
  parent: System.ModuleHandle
  isExternal: false
  name: "GetRuntimeFieldHandleFromMetadataToken"
  nameWithType: ModuleHandle.GetRuntimeFieldHandleFromMetadataToken
- uid: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken*
  parent: System.ModuleHandle
  isExternal: false
  name: "GetRuntimeMethodHandleFromMetadataToken"
  nameWithType: ModuleHandle.GetRuntimeMethodHandleFromMetadataToken
- uid: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken*
  parent: System.ModuleHandle
  isExternal: false
  name: "GetRuntimeTypeHandleFromMetadataToken"
  nameWithType: ModuleHandle.GetRuntimeTypeHandleFromMetadataToken
- uid: System.ModuleHandle.MDStreamVersion*
  parent: System.ModuleHandle
  isExternal: false
  name: "MDStreamVersion"
  nameWithType: ModuleHandle.MDStreamVersion
- uid: System.ModuleHandle.op_Equality*
  parent: System.ModuleHandle
  isExternal: false
  name: "op_Equality"
  nameWithType: ModuleHandle.op_Equality
- uid: System.ModuleHandle.op_Inequality*
  parent: System.ModuleHandle
  isExternal: false
  name: "op_Inequality"
  nameWithType: ModuleHandle.op_Inequality
- uid: System.ModuleHandle.ResolveFieldHandle*
  parent: System.ModuleHandle
  isExternal: false
  name: "ResolveFieldHandle"
  nameWithType: ModuleHandle.ResolveFieldHandle
- uid: System.ModuleHandle.ResolveMethodHandle*
  parent: System.ModuleHandle
  isExternal: false
  name: "ResolveMethodHandle"
  nameWithType: ModuleHandle.ResolveMethodHandle
- uid: System.ModuleHandle.ResolveTypeHandle*
  parent: System.ModuleHandle
  isExternal: false
  name: "ResolveTypeHandle"
  nameWithType: ModuleHandle.ResolveTypeHandle
