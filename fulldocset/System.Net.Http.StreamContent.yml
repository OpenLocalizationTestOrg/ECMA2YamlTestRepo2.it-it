### YamlMime:ManagedReference
items:
- uid: System.Net.Http.StreamContent
  id: StreamContent
  children:
  - System.Net.Http.StreamContent.#ctor(System.IO.Stream)
  - System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)
  - System.Net.Http.StreamContent.CreateContentReadStreamAsync
  - System.Net.Http.StreamContent.Dispose(System.Boolean)
  - System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.StreamContent.TryComputeLength(System.Int64@)
  langs:
  - csharp
  name: StreamContent
  nameWithType: StreamContent
  fullName: System.Net.Http.StreamContent
  type: Class
  summary: "Fornisce contenuto HTTP in base a un flusso."
  syntax:
    content: 'public class StreamContent : System.Net.Http.HttpContent'
  inheritance:
  - System.Object
  - System.Net.Http.HttpContent
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.Dispose
  - System.Net.Http.HttpContent.Headers
  - System.Net.Http.HttpContent.LoadIntoBufferAsync
  - System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  - System.Net.Http.HttpContent.ReadAsByteArrayAsync
  - System.Net.Http.HttpContent.ReadAsStreamAsync
  - System.Net.Http.HttpContent.ReadAsStringAsync
  platform:
  - net462
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: StreamContent(Stream)
  nameWithType: StreamContent.StreamContent(Stream)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Crea una nuova istanza di <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref> classe."
  syntax:
    content: public StreamContent (System.IO.Stream content);
    parameters:
    - id: content
      type: System.IO.Stream
      description: "Il contenuto utilizzato per inizializzare la <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref>."
  overload: System.Net.Http.StreamContent.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)
  id: '#ctor(System.IO.Stream,System.Int32)'
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: StreamContent(Stream,Int32)
  nameWithType: StreamContent.StreamContent(Stream,Int32)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream,Int32)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Crea una nuova istanza di <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref> classe."
  syntax:
    content: public StreamContent (System.IO.Stream content, int bufferSize);
    parameters:
    - id: content
      type: System.IO.Stream
      description: "Il contenuto utilizzato per inizializzare la <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref>."
    - id: bufferSize
      type: System.Int32
      description: "Le dimensioni, in byte, del buffer per la <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref>."
  overload: System.Net.Http.StreamContent.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>content</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il <code> bufferSize </code> è minore o uguale a zero."
  platform:
  - net462
- uid: System.Net.Http.StreamContent.CreateContentReadStreamAsync
  id: CreateContentReadStreamAsync
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: CreateContentReadStreamAsync()
  nameWithType: StreamContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.StreamContent.CreateContentReadStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Scrivere il contenuto di flusso HTTP in un flusso di memoria come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che tutto il contenuto è stato scritto nel flusso di memoria.</xref:System.Threading.Tasks.Task%601>       Il metodo CreateContentReadStreamAsync memorizza nel buffer il contenuto da un flusso di memoria. Classi derivate possono eseguire l&quot;override di questo comportamento se esiste un modo migliore per recuperare il contenuto come flusso. Impossibile utilizzare un modo più efficiente metodo, ad esempio il wrapping di una proprietà di sola lettura, ad esempio, una matrice di byte o una stringa <xref:System.IO.MemoryStream>intorno al byte o una stringa.)</xref:System.IO.MemoryStream>"
  syntax:
    content: protected override System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.StreamContent.CreateContentReadStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: StreamContent.Dispose(Boolean)
  fullName: System.Net.Http.StreamContent.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref> e, facoltativamente, Elimina le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico `Dispose()` (metodo) e <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A>richiama `Dispose` con `disposing` impostato su `false`. Quando il `disposing` parametro `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Net.Http.StreamContent>riferimenti.</xref:System.Net.Http.StreamContent></xref:System.Object.Finalize%2A> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Net.Http.StreamContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  id: SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: StreamContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.StreamContent.SerializeToStreamAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializza il contenuto HTTP in un flusso come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task>oggetto verrà completato dopo che tutto il contenuto è stato serializzato nel flusso di destinazione.</xref:System.Threading.Tasks.Task>"
  syntax:
    content: protected override System.Threading.Tasks.Task SerializeToStreamAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso di destinazione."
    - id: context
      type: System.Net.TransportContext
      description: "Informazioni sul trasporto (channel binding token, ad esempio). Questo parametro può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.StreamContent.SerializeToStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.TryComputeLength(System.Int64@)
  id: TryComputeLength(System.Int64@)
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: TryComputeLength(Int64)
  nameWithType: StreamContent.TryComputeLength(Int64)
  fullName: System.Net.Http.StreamContent.TryComputeLength(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Determina se il contenuto di flusso ha una lunghezza valida in byte."
  remarks: "Il metodo TryComputeLength consente il contenuto di flusso HTTP di calcolare la lunghezza del contenuto. Ciò è utile per i tipi di contenuto che sono in grado di calcolare facilmente la lunghezza del contenuto. Se calcolare la lunghezza del contenuto non è possibile o costoso (richiede il sistema per memorizzare nel buffer l&quot;intero contenuto in cui la serializzazione è dispendiosa o richiedere al sistema di allocare una quantità elevata di memoria), questo metodo può restituire `false`. Se questo metodo restituisce `false`, ciò implica che è necessario di trasferimento chunked o deve ottenere memorizzato nel buffer il contenuto prima di essere inviati al server."
  syntax:
    content: protected override bool TryComputeLength (out long length);
    parameters:
    - id: length
      type: System.Int64
      description: "La lunghezza in byte del contenuto del flusso."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> length </code> è una lunghezza valida; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Http.StreamContent.TryComputeLength*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Http.HttpContent
  isExternal: false
  name: System.Net.Http.HttpContent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: StreamContent(Stream)
  nameWithType: StreamContent.StreamContent(Stream)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: StreamContent(Stream,Int32)
  nameWithType: StreamContent.StreamContent(Stream,Int32)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Http.StreamContent.CreateContentReadStreamAsync
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: CreateContentReadStreamAsync()
  nameWithType: StreamContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.StreamContent.CreateContentReadStreamAsync()
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.IO.Stream>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.StreamContent.Dispose(System.Boolean)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: StreamContent.Dispose(Boolean)
  fullName: System.Net.Http.StreamContent.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: StreamContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.StreamContent.SerializeToStreamAsync(Stream,TransportContext)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Http.StreamContent.TryComputeLength(System.Int64@)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: TryComputeLength(Int64)
  nameWithType: StreamContent.TryComputeLength(Int64)
  fullName: System.Net.Http.StreamContent.TryComputeLength(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Http.StreamContent.#ctor*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: StreamContent
  nameWithType: StreamContent.StreamContent
- uid: System.Net.Http.StreamContent.CreateContentReadStreamAsync*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: CreateContentReadStreamAsync
  nameWithType: StreamContent.CreateContentReadStreamAsync
- uid: System.Net.Http.StreamContent.Dispose*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: Dispose
  nameWithType: StreamContent.Dispose
- uid: System.Net.Http.StreamContent.SerializeToStreamAsync*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: SerializeToStreamAsync
  nameWithType: StreamContent.SerializeToStreamAsync
- uid: System.Net.Http.StreamContent.TryComputeLength*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: TryComputeLength
  nameWithType: StreamContent.TryComputeLength
