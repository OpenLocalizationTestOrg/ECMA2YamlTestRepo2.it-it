### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceInstaller
  id: ServiceInstaller
  children:
  - System.ServiceProcess.ServiceInstaller.#ctor
  - System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  - System.ServiceProcess.ServiceInstaller.Description
  - System.ServiceProcess.ServiceInstaller.DisplayName
  - System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceInstaller.ServiceName
  - System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  - System.ServiceProcess.ServiceInstaller.StartType
  - System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  langs:
  - csharp
  name: ServiceInstaller
  nameWithType: ServiceInstaller
  fullName: System.ServiceProcess.ServiceInstaller
  type: Class
  summary: "Installa una classe che estende <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> per implementare un servizio. Questa classe viene chiamata dall&quot;utilit√† di installazione quando si installa un&quot;applicazione di servizio."
  remarks: "The ServiceInstaller does work specific to the service with which it is associated. It is used by the installation utility to write registry values associated with the service to a subkey within the HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services registry key. The service is identified by its ServiceName within this subkey. The subkey also includes the name of the executable or .dll to which the service belongs.  \n  \n To install a service, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer> class, and set the <xref:System.ComponentModel.RunInstallerAttribute> attribute on the class to `true`. Within your project, create one <xref:System.ServiceProcess.ServiceProcessInstaller> instance per service application, and one ServiceInstaller instance for each service in the application. Within your project installer class constructor, set the installation properties for the service using the <xref:System.ServiceProcess.ServiceProcessInstaller> and ServiceInstaller instances, and add the instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n> [!NOTE]\n>  It is recommended that you use the constructor for adding installer instances; however, if you need to add to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> method, be sure to perform the same additions to the collection in the <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method.  \n  \n For all classes deriving from the <xref:System.Configuration.Install.Installer> class, the state of the <xref:System.Configuration.Install.Installer.Installers%2A> collection must be the same in the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods. However, you can avoid the maintenance of the collection across the <xref:System.ServiceProcess.ServiceInstaller.Install%2A> and <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> methods if you add installer instances to the <xref:System.Configuration.Install.Installer.Installers%2A> collection in your custom installer class constructor.When the install utility is called, it looks for the <xref:System.ComponentModel.RunInstallerAttribute> attribute. If the attribute is `true`, the utility installs all the services that were added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection that were associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false` or does not exist, the install utility ignores the project installer.  \n  \n The <xref:System.ServiceProcess.ServiceProcessInstaller> associated with your project installation class installs information common to all ServiceInstaller instances in the project. If this service has anything that separates it from the other services in the installation project, that service-specific information is installed by this method.  \n  \n> [!NOTE]\n>  It is crucial that the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> property to locate the service within this executable.  \n  \n You can modify other properties on the ServiceInstaller either before or after adding it to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer. For example, a service's <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> may be set to start the service automatically at reboot or require a user to start the service manually.  \n  \n Normally, you will not call the methods on ServiceInstaller within your code; they are generally called only by the install utility. The install utility automatically calls the <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> and <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> methods during the installation process. It backs out failures, if necessary, by calling <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (or <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) on all previously installed components.  \n  \n The installation utility calls <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> to remove the object.  \n  \n An application's install routine maintains information automatically about the components already installed, using the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>. This state information is continuously updated as the <xref:System.ServiceProcess.ServiceProcessInstaller> instance, and each ServiceInstaller instance is installed by the utility. It is usually unnecessary for your code to modify state information explicitly.  \n  \n When the installation is performed, it automatically creates an <xref:System.Diagnostics.EventLogInstaller> to install the event log source associated with the <xref:System.ServiceProcess.ServiceBase> derived class. The <xref:System.Diagnostics.EventLog.Log%2A> property for this source is set by the <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> constructor to the computer's Application log. When you set the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> of the ServiceInstaller (which should be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the service), the <xref:System.Diagnostics.EventLog.Source%2A> is automatically set to the same value. In an installation failure, the source's installation is rolled-back along with previously installed services.  \n  \n The <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> method tries to stop the service if it is running. Whether this succeeds or not, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> undoes the changes made by <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. If a new source was created for event logging, the source is deleted."
  example:
  - "The following example creates a project installer, called `MyProjectInstaller`, which inherits from <xref:System.Configuration.Install.Installer>. It is assumed there is a service executable that contains two services, \"Hello-World Service 1\" and \"Hello-World Service 2\". Within the constructor for `MyProjectInstaller` (which would be called by the install utility), ServiceInstaller objects are created for each of these services, and a <xref:System.ServiceProcess.ServiceProcessInstaller> is created for the executable. For the install utility to recognize `MyProjectInstaller` as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.  \n  \n Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection. When the install utility accesses `MyProjectInstaller`, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=fullName> will be installed in turn. During the process, the installer maintains state information indicating which objects have been installed, so each can be backed out in turn, if an installation failure occurs.  \n  \n Normally, you would not create an instance of your project installer class explicitly. You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute> attribute to the syntax, but it is the install utility that actually calls, and therefore instantiates, the class.  \n  \n [!code-cpp[Classic ServiceInstaller Example#1](~/add/codesnippet/cpp/t-system.serviceprocess._4_1.cpp)]\n [!code-cs[Classic ServiceInstaller Example#1](~/add/codesnippet/csharp/t-system.serviceprocess._4_1.cs)]\n [!code-vb[Classic ServiceInstaller Example#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._4_1.vb)]"
  syntax:
    content: 'public class ServiceInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.HelpText
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.ServiceProcess.ServiceInstaller&quot;> </xref> classe."
  remarks: "Per installare un servizio, creare una classe di installazione di progetto da cui eredita il <xref:System.Configuration.Install.Installer>, quindi impostare il <xref:System.ComponentModel.RunInstallerAttribute>attributo sulla classe per `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> All&quot;interno del progetto, creare uno <xref:System.ServiceProcess.ServiceProcessInstaller>istanza per ogni applicazione di servizio e una <xref:System.ServiceProcess.ServiceInstaller>istanza per ogni servizio nell&quot;applicazione.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> All&quot;interno del costruttore della classe del programma di installazione dei progetti impostare le propriet√† di installazione per il servizio utilizzando il <xref:System.ServiceProcess.ServiceProcessInstaller>e <xref:System.ServiceProcess.ServiceInstaller>le istanze e aggiungere tutte le istanze di <xref:System.Configuration.Install.Installer.Installers%2A>insieme.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller>       Il costruttore di ServiceInstaller genera automaticamente un&quot;origine del registro eventi la cui <xref:System.Diagnostics.EventLog.Log%2A>propriet√† √® impostata su registro applicazioni del computer e un <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> </xref:System.Diagnostics.EventLog.Log%2A> Quando si imposta la <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>del <xref:System.ServiceProcess.ServiceInstaller>, che deve essere identico al <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>del servizio, il <xref:System.Diagnostics.EventLog.Source%2A>del registro eventi √® automaticamente impostata sullo stesso valore.</xref:System.Diagnostics.EventLog.Source%2A> </xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> L&quot;origine viene eliminato automaticamente nel caso di errore di installazione.       ServiceInstaller costruttore imposta la <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>propriet√† `ServiceStartMode.Manual` per specificare che un utente di avviare il servizio.</xref:System.ServiceProcess.ServiceInstaller.StartType%2A> √à possibile reimpostare la propriet√† `ServiceStartMode.Automatic` per specificare che avviare il servizio al riavvio del computer."
  syntax:
    content: public ServiceInstaller ();
    parameters: []
  overload: System.ServiceProcess.ServiceInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Copia le propriet√† da un&quot;istanza di <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref> al programma di installazione."
  remarks: "Questo metodo viene raramente chiamato all&quot;interno del codice. CopyFromComponent viene in genere chiamato solo da finestre di progettazione.       CopyFromComponent Salva il nome del servizio di `component` parametro per il <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>del <xref:System.ServiceProcess.ServiceInstaller>istanza.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> (Perch√© il parametro deve essere un&quot;istanza di una classe che deriva da <xref:System.ServiceProcess.ServiceBase>, `component` √® garantito che una propriet√† <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName>.)      > [!NOTE] > Se si utilizza la finestra di progettazione di Visual Studio, questo metodo viene chiamato in fase di progettazione quando l&quot;utente fa clic `Add Installer` in un componente specificato di questa classe come proprio programma di installazione.</xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceBase> Il programma di installazione accetta tutte le informazioni pu√≤ dal componente in tempo reale e archiviarlo per l&quot;utilizzo in fase di installazione."
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "Il <xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> da cui copiare."
  overload: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il componente di cui si desidera associare a questo programma di installazione non eredita da <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  id: DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Ottiene o imposta un valore che indica se il servizio deve essere posticipato avvio fino a quando non sono in esecuzione altri servizi avviati automaticamente."
  remarks: "La propriet√† DelayedAutoStart pu√≤ essere applicata a qualsiasi servizio, ma viene ignorato a meno che la modalit√† di avvio del servizio sia <xref:System.ServiceProcess.ServiceStartMode>.</xref:System.ServiceProcess.ServiceStartMode> L&quot;impostazione diventa effettiva al successivo che riavvio del sistema. Gestione controllo servizi non garantisce un&quot;ora specifica per il servizio.       Un servizio di avvio automatico ritardato non pu√≤ essere un membro di un gruppo di ordine di caricamento, ma pu√≤ dipendere da un altro servizio di avvio automatico. Se un&quot;applicazione chiama un servizio di avvio automatico ritardato prima del caricamento, la chiamata ha esito negativo.       Nei sistemi operativi che non supportano l&quot;avvio automatico ritardato, l&quot;impostazione di questa propriet√† non ha alcun effetto."
  syntax:
    content: public bool DelayedAutoStart { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ritardo automatico avvio del servizio. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito √® <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Description
  id: Description
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Ottiene o imposta la descrizione per il servizio."
  remarks: "Utilizzare la propriet√† Description per illustrare lo scopo del servizio installato all&quot;utente. L&quot;utente pu√≤ visualizzare la descrizione del servizio nelle applicazioni che consentono di visualizzare i dettagli per i servizi installati.       Ad esempio, utilizza Windows XP, √® possibile visualizzare la descrizione del servizio con l&quot;utilit√† della riga di comando di controllo del servizio (Sc.exe) oppure √® possibile visualizzare la descrizione del servizio all&quot;interno di **servizi** nodo del **Gestione Computer** console."
  example:
  - "The following code example sets the installation properties for a new Windows service application. The example sets the service name, along with the display name and description. After assigning the installation properties for the service, the example adds the <xref:System.ServiceProcess.ServiceInstaller> object to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n [!code-cs[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/csharp/p-system.serviceprocess._7_1.cs)]\n [!code-vb[ServiceProcess_ServiceInstaller#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._7_1.vb)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "La descrizione del servizio. Il valore predefinito √® una stringa vuota (&quot;&quot;)."
  overload: System.ServiceProcess.ServiceInstaller.Description*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  id: DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Indica il nome descrittivo che identifica il servizio per l&quot;utente."
  remarks: "The DisplayName is used, for example, in the Service Control Manager to provide a user-readable descriptive name for the service. The DisplayName is a registry value, but is never used as a registry key. Therefore, restrictions on the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property value do not apply. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> is used as the HKEY_LOCAL_MACHINES\\System\\CurrentControlSet\\Services registry key, so it is restricted.  \n  \n The display name is never used by the install utility to identify the service, so there are no restrictions on the choice of name, as there is for the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property."
  syntax:
    content: public string DisplayName { get; set; }
    return:
      type: System.String
      description: "Il nome associato al servizio, usato spesso per gli strumenti interattivi."
  overload: System.ServiceProcess.ServiceInstaller.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Installa il servizio mediante la scrittura di informazioni sull&quot;applicazione di servizio nel Registro di sistema. Questo metodo deve essere utilizzata dagli strumenti di installazione che elaborano automaticamente i metodi appropriati."
  remarks: "In genere, non si chiamer√† i metodi su <xref:System.ServiceProcess.ServiceInstaller>all&quot;interno del codice; vengono in genere chiamati solo dall&quot;utilit√† di installazione.</xref:System.ServiceProcess.ServiceInstaller> Utilit√† di installazione chiama automaticamente il metodo di installazione durante l&quot;installazione. Per il ripristino da errori, se necessario, chiamando <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>sull&quot;oggetto che ha generato l&quot;eccezione.</xref:System.ServiceProcess.ServiceInstaller.Rollback%2A>       Routine di installazione di un&quot;applicazione mantiene informazioni automaticamente i componenti che sono stati gi√† installati, con l&quot;installazione di progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Queste informazioni sullo stato, √® passato da installare come il `stateSaver` parametro, viene continuamente aggiornato come il <xref:System.ServiceProcess.ServiceProcessInstaller>istanza e ogni <xref:System.ServiceProcess.ServiceInstaller>istanza viene installata dall&quot;utilit√†.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Non √® in genere necessario per il codice modificare queste informazioni sullo stato in modo esplicito.       Il <xref:System.ServiceProcess.ServiceProcessInstaller>associata con i progetto installazione installa informazioni sulla classe comuni a tutti <xref:System.ServiceProcess.ServiceInstaller>istanze nel progetto.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Se il servizio √® presente alcun elemento che lo separa da altri servizi nel progetto di installazione, le informazioni specifiche del servizio viene installate da questo metodo.       Per installare un servizio, creare una classe di installazione di progetto da cui eredita il <xref:System.Configuration.Install.Installer>, quindi impostare il <xref:System.ComponentModel.RunInstallerAttribute>attributo sulla classe per `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> All&quot;interno del progetto, creare uno <xref:System.ServiceProcess.ServiceProcessInstaller>istanza per ogni applicazione di servizio e una <xref:System.ServiceProcess.ServiceInstaller>istanza per ogni servizio nell&quot;applicazione.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> All&quot;interno del costruttore della classe del programma di installazione dei progetti impostare le propriet√† di installazione per il servizio utilizzando il <xref:System.ServiceProcess.ServiceProcessInstaller>e <xref:System.ServiceProcess.ServiceInstaller>le istanze e aggiungere tutte le istanze di <xref:System.Configuration.Install.Installer.Installers%2A>insieme.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller>      > [!NOTE] > √à consigliabile utilizzare il costruttore per l&quot;aggiunta di istanze del programma di installazione; tuttavia, se √® necessario aggiungere il <xref:System.Configuration.Install.Installer.Installers%2A>insieme nel metodo di installazione, assicurarsi di eseguire le stesse aggiunte alla raccolta nel <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>(metodo).</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> </xref:System.Configuration.Install.Installer.Installers%2A>       Per tutte le classi che derivano dal <xref:System.Configuration.Install.Installer>lo stato della classe di <xref:System.Configuration.Install.Installer.Installers%2A>raccolta deve essere lo stesso durante l&quot;installazione e <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>metodi.</xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> </xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.Configuration.Install.Installer> Tuttavia, √® possibile evitare la manutenzione della raccolta attraverso l&quot;installazione e <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>Se si aggiungono istanze del programma di installazione per i metodi di <xref:System.Configuration.Install.Installer.Installers%2A>insieme nel costruttore della classe del programma di installazione personalizzato.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A>"
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "Un <xref:System.Collections.IDictionary>che contiene le informazioni di contesto associate all&quot;installazione.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Install*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "L&quot;installazione non contiene un <xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;> </xref> per il file eseguibile.       oppure il nome del file per l&quot;assembly √® <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o una stringa vuota.       - oppure - il nome del servizio non √® valido.       - oppure - Impossibile aprire Gestione controllo servizi."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il nome visualizzato per il servizio √® pi√π di 255 caratteri."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema non √® riuscito a generare un handle per il servizio.       - oppure - un servizio con lo stesso nome √® gi√† installato."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Indica se due programmi di installazione installano lo stesso servizio."
  remarks: "IsEquivalentInstaller indica, ad esempio, se due programmi di installazione installano lo stesso servizio con lo stesso account utente."
  syntax:
    content: public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);
    parameters:
    - id: otherInstaller
      type: System.Configuration.Install.ComponentInstaller
      description: "Oggetto <xref href=&quot;System.Configuration.Install.ComponentInstaller&quot;> </xref> a cui si desidera confrontare il programma di installazione corrente."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la chiamata <xref:System.ServiceProcess.ServiceInstaller.Install*>su entrambi i programmi di installazione comporta l&quot;installazione lo stesso servizio; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceProcess.ServiceInstaller.Install*>"
  overload: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Informazioni sull&quot;applicazione di servizio scritti nel Registro di sistema dalla procedura di installazione di rollback. Questo metodo deve essere utilizzata dagli strumenti di installazione che elaborano automaticamente i metodi appropriati."
  remarks: "In genere, non si chiamer√† i metodi su <xref:System.ServiceProcess.ServiceInstaller>all&quot;interno del codice; vengono in genere chiamati solo dall&quot;utilit√† di installazione.</xref:System.ServiceProcess.ServiceInstaller> Utilit√† di installazione chiama automaticamente il <xref:System.ServiceProcess.ServiceInstaller.Install%2A>metodo durante il processo di installazione.</xref:System.ServiceProcess.ServiceInstaller.Install%2A> Per il ripristino da errori, se necessario, tramite la chiamata di Rollback per l&quot;oggetto che ha generato l&quot;eccezione.       Routine di installazione di un&quot;applicazione mantiene automaticamente le informazioni relative ai componenti gi√† installati utilizzando l&quot;installazione di progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Queste informazioni sullo stato, passato come eseguire il Rollback di `savedState` parametro, viene continuamente aggiornato come il <xref:System.ServiceProcess.ServiceProcessInstaller>istanza e ogni <xref:System.ServiceProcess.ServiceInstaller>istanza viene installata dall&quot;utilit√†.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Non √® in genere necessario per il codice modificare queste informazioni sullo stato in modo esplicito."
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "Un <xref:System.Collections.IDictionary>che contiene le informazioni di contesto associate all&quot;installazione.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Indica il nome utilizzato dal sistema per identificare il servizio. Questa propriet√† deve essere identica al &lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName&gt; del servizio che si desidera installare."
  remarks: "It is crucial that the ServiceName be identical to the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> of the class you derived from <xref:System.ServiceProcess.ServiceBase>. Normally, the value of the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> property for the service is set within the Main() function of the service application's executable. The Service Control Manager uses the ServiceName property to locate the service within this executable.  \n  \n When you set the ServiceName of the service installer, the <xref:System.Diagnostics.EventLog.Source%2A> of the associated event log is set to the same value. This allows the service to automatically log service commands (such as Start and Stop) calls to the Application log on the computer.  \n  \n> [!NOTE]\n>  If a source by the same name already exists on the computer, but in a log other than the Application log, an exception will be thrown. If the source exists and is associated with the Application log, that source is used to report command calls to the service, and no exception is thrown.  \n  \n The ServiceName cannot be `null` or have zero length. Its maximum size is 256 characters. It also cannot contain forward or backward slashes, '/' or '\\\\', or characters from the ASCII character set with value less than decimal value 32."
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "Il nome del servizio da installare. Questo valore deve essere impostato prima l&quot;utilit√† di installazione tenti di installare il servizio."
  overload: System.ServiceProcess.ServiceInstaller.ServiceName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La propriet√† ServiceName √® valida."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  id: ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Indica i servizi che devono essere in esecuzione per questo servizio per l&quot;esecuzione."
  remarks: "Un servizio pu√≤ richiedere altri servizi in esecuzione prima di iniziare. Le informazioni di questa propriet√† viene scritto con una chiave del Registro di sistema. Quando l&quot;utente (o il sistema, in caso di avvio automatico) tenta di eseguire il servizio, Gestione controllo servizi (SCM) consente di verificare che ognuno dei servizi nella matrice √® gi√† stato avviato.       Se non viene eseguito quindi qualsiasi servizio nella matrice, il gestore tenter√† di avviarli. Questo include i servizi con `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.</xref:System.ServiceProcess.ServiceInstaller.StartType%2A>       Se qualsiasi servizio da cui dipende questo servizio non viene avviato, il servizio non verr√† avviato. Non viene generata un&quot;eccezione se il sistema non √® stato avviato perch√© non esiste alcuna gestione a livello di sistema per il rilevamento delle eccezioni. Decidere come gestire gli errori di avvio del servizio e implementato nel codice. In genere, una finestra di dialogo viene visualizzata all&quot;utente durante l&quot;esecuzione automatica se non si avvia un servizio.       Se il servizio non viene avviato, viene scritta una voce al registro eventi dell&quot;applicazione.       I servizi da cui dipende questo servizio non √® necessario essere nello stesso eseguibile."
  syntax:
    content: public string[] ServicesDependedOn { get; set; }
    return:
      type: System.String[]
      description: "Matrice di servizi che devono essere in esecuzione prima di poter eseguire il servizio associato a questo programma di installazione."
  overload: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.StartType
  id: StartType
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Indica come e quando il servizio viene avviato."
  remarks: "Impostare StartType per specificare che il servizio deve essere avviato automaticamente dopo il riavvio o che un utente √® necessario avviare manualmente il servizio. √à anche possibile disabilitare un servizio, specificando che non pu√≤ essere avviato, manualmente o a livello di codice, fino a quando non √® abilitato.       Non √® possibile modificare <xref:System.ServiceProcess.ServiceInstaller>i valori delle propriet√† dopo l&quot;installazione.</xref:System.ServiceProcess.ServiceInstaller> Per modificare il StartType, √® necessario disinstallare e reinstallare il servizio o modificare manualmente l&quot;impostazione utilizzando Gestione controllo servizi."
  syntax:
    content: public System.ServiceProcess.ServiceStartMode StartType { get; set; }
    return:
      type: System.ServiceProcess.ServiceStartMode
      description: "Oggetto <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref> che rappresenta il modo in cui il servizio viene avviato. Il valore predefinito √® <xref uid=&quot;langword_csharp_Manual&quot; name=&quot;Manual&quot; href=&quot;&quot;> </xref>, che consente di specificare che il servizio non verr√† avviato automaticamente dopo il riavvio."
  overload: System.ServiceProcess.ServiceInstaller.StartType*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "La modalit√† di avvio non √® un valore di <xref href=&quot;System.ServiceProcess.ServiceStartMode&quot;> </xref> enumerazione."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  id: Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  langs:
  - csharp
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Disinstalla il servizio rimuovendo le informazioni dal Registro di sistema."
  remarks: "Disinstallazione tenta di arrestare il servizio prima di disinstallarlo. Se il servizio non pu√≤ essere arrestato, non viene intercettata alcuna eccezione e il metodo continua con la rimozione del servizio.       In genere, non si chiamer√† i metodi su <xref:System.ServiceProcess.ServiceInstaller>all&quot;interno del codice; vengono in genere chiamati solo dall&quot;utilit√† di installazione.</xref:System.ServiceProcess.ServiceInstaller> InstallUtil viene utilizzato per disinstallare i servizi, nonch√© di installarli; la disinstallazione √® richiesta un&quot;opzione nella riga di comando chiamata.       La routine di disinstallazione di un&quot;applicazione mantiene informazioni automaticamente i componenti da disinstallare, utilizzando l&quot;installazione di progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Queste informazioni sullo stato, passato Disinstalla come il `savedState` parametro, viene continuamente aggiornato come il <xref:System.ServiceProcess.ServiceProcessInstaller>istanza e ogni <xref:System.ServiceProcess.ServiceInstaller>istanza viene installata dall&quot;utilit√†.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Non √® in genere necessario per il codice modificare queste informazioni sullo stato in modo esplicito.       Per tutte le classi che derivano dal <xref:System.Configuration.Install.Installer>classe, lo stato del <xref:System.Configuration.Install.Installer.Installers%2A>raccolta deve essere la stessa nella <xref:System.ServiceProcess.ServiceInstaller.Install%2A>e metodi di disinstallazione.</xref:System.ServiceProcess.ServiceInstaller.Install%2A> </xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.Configuration.Install.Installer> Tuttavia, √® possibile evitare la manutenzione della raccolta nel <xref:System.ServiceProcess.ServiceInstaller.Install%2A>e disinstallare metodi se si aggiungono istanze del programma di installazione per il <xref:System.Configuration.Install.Installer.Installers%2A>insieme nel costruttore della classe del programma di installazione personalizzato.</xref:System.Configuration.Install.Installer.Installers%2A> </xref:System.ServiceProcess.ServiceInstaller.Install%2A>       Non sono presenti meccanismi di rollback per la disinstallazione, pertanto se un servizio non viene eseguita, questa operazione non influenza gli altri servizi (in genere all&quot;interno dello stesso progetto di installazione) da disinstallare."
  syntax:
    content: public override void Uninstall (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "Un <xref:System.Collections.IDictionary>che contiene le informazioni di contesto associate all&quot;installazione.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceInstaller.Uninstall*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Impossibile aprire Gestione controllo servizi.       - oppure - Impossibile ottenere un handle per il servizio."
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ServiceProcess.ServiceInstaller.#ctor
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller()
  nameWithType: ServiceInstaller.ServiceInstaller()
  fullName: System.ServiceProcess.ServiceInstaller.ServiceInstaller()
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
  fullName: System.ServiceProcess.ServiceInstaller.DelayedAutoStart
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceInstaller.Description
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
  fullName: System.ServiceProcess.ServiceInstaller.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceInstaller.DisplayName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
  fullName: System.ServiceProcess.ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: ServiceInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(ComponentInstaller)
- uid: System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: ServiceInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Rollback(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.ServiceName
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
  fullName: System.ServiceProcess.ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceInstaller.ServicesDependedOn
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceInstaller.StartType
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
  fullName: System.ServiceProcess.ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceStartMode
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceStartMode
  nameWithType: ServiceStartMode
  fullName: System.ServiceProcess.ServiceStartMode
- uid: System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall(IDictionary)
  nameWithType: ServiceInstaller.Uninstall(IDictionary)
  fullName: System.ServiceProcess.ServiceInstaller.Uninstall(IDictionary)
- uid: System.ServiceProcess.ServiceInstaller.#ctor*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceInstaller
  nameWithType: ServiceInstaller.ServiceInstaller
- uid: System.ServiceProcess.ServiceInstaller.CopyFromComponent*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: ServiceInstaller.CopyFromComponent
- uid: System.ServiceProcess.ServiceInstaller.DelayedAutoStart*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DelayedAutoStart
  nameWithType: ServiceInstaller.DelayedAutoStart
- uid: System.ServiceProcess.ServiceInstaller.Description*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Description
  nameWithType: ServiceInstaller.Description
- uid: System.ServiceProcess.ServiceInstaller.DisplayName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: DisplayName
  nameWithType: ServiceInstaller.DisplayName
- uid: System.ServiceProcess.ServiceInstaller.Install*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Install
  nameWithType: ServiceInstaller.Install
- uid: System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: IsEquivalentInstaller
  nameWithType: ServiceInstaller.IsEquivalentInstaller
- uid: System.ServiceProcess.ServiceInstaller.Rollback*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Rollback
  nameWithType: ServiceInstaller.Rollback
- uid: System.ServiceProcess.ServiceInstaller.ServiceName*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServiceName
  nameWithType: ServiceInstaller.ServiceName
- uid: System.ServiceProcess.ServiceInstaller.ServicesDependedOn*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceInstaller.ServicesDependedOn
- uid: System.ServiceProcess.ServiceInstaller.StartType*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: StartType
  nameWithType: ServiceInstaller.StartType
- uid: System.ServiceProcess.ServiceInstaller.Uninstall*
  parent: System.ServiceProcess.ServiceInstaller
  isExternal: false
  name: Uninstall
  nameWithType: ServiceInstaller.Uninstall
