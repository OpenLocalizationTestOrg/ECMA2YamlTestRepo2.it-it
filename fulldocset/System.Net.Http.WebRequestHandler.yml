### YamlMime:ManagedReference
items:
- uid: System.Net.Http.WebRequestHandler
  id: WebRequestHandler
  children:
  - System.Net.Http.WebRequestHandler.#ctor
  - System.Net.Http.WebRequestHandler.AllowPipelining
  - System.Net.Http.WebRequestHandler.AuthenticationLevel
  - System.Net.Http.WebRequestHandler.CachePolicy
  - System.Net.Http.WebRequestHandler.ClientCertificates
  - System.Net.Http.WebRequestHandler.ContinueTimeout
  - System.Net.Http.WebRequestHandler.ImpersonationLevel
  - System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  - System.Net.Http.WebRequestHandler.ReadWriteTimeout
  - System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  - System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  langs:
  - csharp
  name: WebRequestHandler
  nameWithType: WebRequestHandler
  fullName: System.Net.Http.WebRequestHandler
  type: Class
  summary: "Fornisce funzionalità di desktop specifiche non disponibili per applicazioni Windows Store o in altri ambienti."
  remarks: "Questa classe implementa un gestore di trasporto utilizzando <xref:System.Net.HttpWebRequest>istanze per inviare richieste HTTP ai server.</xref:System.Net.HttpWebRequest>"
  syntax:
    content: 'public class WebRequestHandler : System.Net.Http.HttpClientHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  - System.Net.Http.HttpClientHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpClientHandler.AllowAutoRedirect
  - System.Net.Http.HttpClientHandler.AutomaticDecompression
  - System.Net.Http.HttpClientHandler.ClientCertificateOptions
  - System.Net.Http.HttpClientHandler.CookieContainer
  - System.Net.Http.HttpClientHandler.Credentials
  - System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  - System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  - System.Net.Http.HttpClientHandler.PreAuthenticate
  - System.Net.Http.HttpClientHandler.Proxy
  - System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  - System.Net.Http.HttpClientHandler.SupportsProxy
  - System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  - System.Net.Http.HttpClientHandler.UseCookies
  - System.Net.Http.HttpClientHandler.UseDefaultCredentials
  - System.Net.Http.HttpClientHandler.UseProxy
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: WebRequestHandler()
  nameWithType: WebRequestHandler.WebRequestHandler()
  fullName: System.Net.Http.WebRequestHandler.WebRequestHandler()
  type: Constructor
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Http.WebRequestHandler&quot;> </xref> classe."
  syntax:
    content: public WebRequestHandler ();
    parameters: []
  overload: System.Net.Http.WebRequestHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.AllowPipelining
  id: AllowPipelining
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
  fullName: System.Net.Http.WebRequestHandler.AllowPipelining
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Ottiene o imposta un valore che indica se il pipeline della richiesta alla risorsa Internet."
  remarks: "Un&quot;applicazione utilizza la proprietà AllowPipelining per indicare una preferenza per le connessioni pipeline. Quando AllowPipelining è `true`, un&quot;applicazione stabilisce le connessioni pipeline ai server che li supportano."
  syntax:
    content: public bool AllowPipelining { get; set; }
    return:
      type: System.Boolean
      description: "Restituisce <xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la richiesta deve essere canalizzata; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Http.WebRequestHandler.AllowPipelining*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel
  id: AuthenticationLevel
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
  fullName: System.Net.Http.WebRequestHandler.AuthenticationLevel
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Ottiene o imposta un valore che indica il livello di autenticazione e rappresentazione utilizzato per la richiesta."
  remarks: "L&quot;autenticazione reciproca, client e server presentare le credenziali per stabilire la propria identità. Il <xref:System.Net.Security.AuthenticationLevel>e <xref:System.Net.Security.AuthenticationLevel>i valori sono rilevanti per l&quot;autenticazione Kerberos.</xref:System.Net.Security.AuthenticationLevel> </xref:System.Net.Security.AuthenticationLevel> L&quot;autenticazione Kerberos può essere supportata direttamente oppure può essere utilizzata se il protocollo di sicurezza Negotiate è utilizzato per selezionare il protocollo di sicurezza effettivo. Per ulteriori informazioni sui protocolli di autenticazione, vedere [l&quot;autenticazione Internet](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Net.Security.AuthenticationLevel AuthenticationLevel { get; set; }
    return:
      type: System.Net.Security.AuthenticationLevel
      description: "Restituisce <xref:System.Net.Security.AuthenticationLevel>.</xref:System.Net.Security.AuthenticationLevel>       Combinazione bit per bit di <xref:System.Net.Security.AuthenticationLevel>valori.</xref:System.Net.Security.AuthenticationLevel>  Il valore predefinito è <xref:System.Net.Security.AuthenticationLevel>.</xref:System.Net.Security.AuthenticationLevel>"
  overload: System.Net.Http.WebRequestHandler.AuthenticationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.CachePolicy
  id: CachePolicy
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
  fullName: System.Net.Http.WebRequestHandler.CachePolicy
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Ottiene o imposta i criteri della cache per la richiesta."
  remarks: "I criteri della cache corrente e la presenza della risorsa richiesta nella cache di determinare se una risposta può essere recuperata dalla cache. Utilizzando in genere risposte memorizzate nella cache migliora le prestazioni dell&quot;applicazione, ma è possibile che la risposta nella cache non corrisponde alla risposta del server.       I criteri predefiniti della cache possono essere specificato nel file di configurazione Machine. config o impostando la <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>proprietà.</xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>       Una copia di una risorsa viene aggiunta solo alla cache se il flusso di risposta per la risorsa viene recuperato e leggere fino alla fine del flusso. Un&quot;altra richiesta per la stessa risorsa potrebbe usare una copia memorizzata nella cache, a seconda del livello di criteri di cache per la richiesta."
  syntax:
    content: public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }
    return:
      type: System.Net.Cache.RequestCachePolicy
      description: "Returns <xref href=&quot;System.Net.Cache.RequestCachePolicy&quot;></xref>.       Oggetto <xref href=&quot;System.Net.Cache.RequestCachePolicy&quot;> </xref> oggetto che definisce i criteri della cache. Il valore predefinito è <xref:System.Net.WebRequest.DefaultCachePolicy*>.</xref:System.Net.WebRequest.DefaultCachePolicy*>"
  overload: System.Net.Http.WebRequestHandler.CachePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ClientCertificates
  id: ClientCertificates
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
  fullName: System.Net.Http.WebRequestHandler.ClientCertificates
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Ottiene o imposta la raccolta dei certificati di sicurezza associati a questa richiesta."
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "Returns <xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;></xref>.       La raccolta dei certificati di sicurezza associato alla richiesta."
  overload: System.Net.Http.WebRequestHandler.ClientCertificates*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout
  id: ContinueTimeout
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
  fullName: System.Net.Http.WebRequestHandler.ContinueTimeout
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Ottiene o imposta la quantità di tempo, espresso in millisecondi, l&quot;applicazione rimarrà in attesa per 100-continua dal server prima di caricare i dati."
  syntax:
    content: public TimeSpan ContinueTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "Restituisce <xref:System.TimeSpan>.</xref:System.TimeSpan>       La quantità di tempo, espresso in millisecondi, l&quot;applicazione dovrà attendere 100-continua dal server prima di caricare i dati. Il valore predefinito è di 350 millisecondi."
  overload: System.Net.Http.WebRequestHandler.ContinueTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
  fullName: System.Net.Http.WebRequestHandler.ImpersonationLevel
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Ottiene o imposta il livello di rappresentazione per la richiesta corrente."
  remarks: "Il livello di rappresentazione determina come il server può utilizzare le credenziali del client."
  syntax:
    content: public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; set; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Restituisce <xref:System.Security.Principal.TokenImpersonationLevel>.</xref:System.Security.Principal.TokenImpersonationLevel>       Il livello di rappresentazione per la richiesta. Il valore predefinito è <xref:System.Security.Principal.TokenImpersonationLevel>.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Http.WebRequestHandler.ImpersonationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  id: MaxResponseHeadersLength
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
  fullName: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Ottiene o imposta la lunghezza massima consentita delle intestazioni di risposta."
  remarks: "La lunghezza dell&quot;intestazione della risposta include la riga dello stato di risposta e caratteri di controllo aggiuntivi che vengono ricevuti come parte del protocollo HTTP. Il valore-1 indica che nessun limite imposto sulle intestazioni di risposta; un valore pari a 0 indica che non soddisfano tutte le richieste.       Se la proprietà MaxResponseHeadersLength non è impostata in modo esplicito, assume il valore di <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A>proprietà.</xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A>       Se la lunghezza dell&quot;intestazione di risposta ricevuto supera il valore della proprietà MaxResponseHeadersLength, viene generata un&quot;eccezione quando si accede alla risposta."
  syntax:
    content: public int MaxResponseHeadersLength { get; set; }
    return:
      type: System.Int32
      description: "Restituisce <xref:System.Int32>.</xref:System.Int32>       La lunghezza, espressa in kilobyte (1024 byte) delle intestazioni di risposta."
  overload: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  id: ReadWriteTimeout
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
  fullName: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Ottiene o imposta un timeout in millisecondi quando si scrive una richiesta o la lettura di una risposta da un server."
  syntax:
    content: public int ReadWriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "Restituisce <xref:System.Int32>.</xref:System.Int32>       Il numero di millisecondi prima del timeout tra la scrittura o lettura. Il valore predefinito è 300.000 millisecondi (5 minuti)."
  overload: System.Net.Http.WebRequestHandler.ReadWriteTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
  fullName: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Ottiene o imposta un metodo di callback per convalidare il certificato del server."
  remarks: "Se il ServerCertificateValidationCallback `null`, il certificato del server sarà convalidato utilizzando le autorità di certificazione ben noti standard."
  syntax:
    content: public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "Returns <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>.       Un metodo di callback per convalidare il certificato del server."
  overload: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  id: UnsafeAuthenticatedConnectionSharing
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "Ottiene o imposta un valore che indica se consentire la condivisione di connessione con autenticazione NTLM ad alta velocità."
  remarks: "Il valore predefinito per questa proprietà è `false`, che comporta la connessione corrente essere chiusa al termine di una richiesta. Ogni volta che genera una nuova richiesta, l&quot;applicazione deve passare attraverso la sequenza di autenticazione. Se questa proprietà è impostata su `true`, la connessione utilizzata per recuperare la risposta rimane aperta dopo l&quot;autenticazione è stata eseguita. In questo caso, altre richieste che dispongono di questa proprietà è impostata su `true` possono utilizzare la connessione senza riautenticazione. In altre parole, se una connessione è stata autenticata per l&quot;utente, l&quot;utente B può usufruire della connessione. per soddisfare la richiesta dell&quot;utente B in base alle credenziali dell&quot;utente A.      > [!CAUTION] > Poiché è possibile che un&quot;applicazione può utilizzare la connessione senza autenticazione, è necessario assicurarsi che non vi sia alcuna vulnerabilità di amministrazione del sistema quando si imposta questa proprietà su `true`. Se l&quot;applicazione invia le richieste per più utenti (rappresenta più account utente) e si basa sull&quot;autenticazione per proteggere le risorse, non impostare questa proprietà su `true` a meno di utilizzare gruppi di connessione come descritto di seguito.       Si consiglia di prendere in considerazione l&quot;abilitazione di questo meccanismo se i problemi di prestazioni e l&quot;applicazione è in esecuzione in un server Web con autenticazione integrata di Windows.       Se si abilita questa impostazione consente di aprire il sistema a rischi di sicurezza. Se si imposta la <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>proprietà `true` assicurarsi di prendere le precauzioni seguenti:-eseguire l&quot;applicazione in un ambiente protetto per evitare possibili utilizzi della connessione.</xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>       Se si ha il controllo il server back-end, in alternativa è possibile disattivare la persistenza dell&quot;autenticazione. Ciò migliora le prestazioni a un livello inferiore, ma è più sicuro. Per ulteriori informazioni, cercare AuthPersistence in MSDN library all&quot;indirizzo [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  syntax:
    content: public bool UnsafeAuthenticatedConnectionSharing { get; set; }
    return:
      type: System.Boolean
      description: "Restituisce <xref:System.Boolean>.</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per tenere aperta la connessione autenticata; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Http.HttpClientHandler
  isExternal: false
  name: System.Net.Http.HttpClientHandler
- uid: System.Net.Http.WebRequestHandler.#ctor
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: WebRequestHandler()
  nameWithType: WebRequestHandler.WebRequestHandler()
  fullName: System.Net.Http.WebRequestHandler.WebRequestHandler()
- uid: System.Net.Http.WebRequestHandler.AllowPipelining
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
  fullName: System.Net.Http.WebRequestHandler.AllowPipelining
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
  fullName: System.Net.Http.WebRequestHandler.AuthenticationLevel
- uid: System.Net.Security.AuthenticationLevel
  parent: System.Net.Security
  isExternal: true
  name: AuthenticationLevel
  nameWithType: AuthenticationLevel
  fullName: System.Net.Security.AuthenticationLevel
- uid: System.Net.Http.WebRequestHandler.CachePolicy
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
  fullName: System.Net.Http.WebRequestHandler.CachePolicy
- uid: System.Net.Cache.RequestCachePolicy
  parent: System.Net.Cache
  isExternal: false
  name: RequestCachePolicy
  nameWithType: RequestCachePolicy
  fullName: System.Net.Cache.RequestCachePolicy
- uid: System.Net.Http.WebRequestHandler.ClientCertificates
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
  fullName: System.Net.Http.WebRequestHandler.ClientCertificates
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  nameWithType: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
  fullName: System.Net.Http.WebRequestHandler.ContinueTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
  fullName: System.Net.Http.WebRequestHandler.ImpersonationLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
  fullName: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
  fullName: System.Net.Http.WebRequestHandler.ReadWriteTimeout
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
  fullName: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
- uid: System.Net.Http.WebRequestHandler.#ctor*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: WebRequestHandler
  nameWithType: WebRequestHandler.WebRequestHandler
- uid: System.Net.Http.WebRequestHandler.AllowPipelining*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
- uid: System.Net.Http.WebRequestHandler.CachePolicy*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
- uid: System.Net.Http.WebRequestHandler.ClientCertificates*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
