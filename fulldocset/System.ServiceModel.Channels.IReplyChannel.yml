### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Channels.IReplyChannel
  id: IReplyChannel
  children:
  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  - System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  - System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  - System.ServiceModel.Channels.IReplyChannel.LocalAddress
  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  - System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  - System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  - System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  langs:
  - csharp
  name: IReplyChannel
  nameWithType: IReplyChannel
  fullName: System.ServiceModel.Channels.IReplyChannel
  type: Interface
  summary: "Definisce l&quot;interfaccia che un canale deve implementare per essere sul lato ricevente di una comunicazione request / reply tra gli endpoint di messaggistica."
  remarks: "L&quot;interfaccia IReplyChannel include varianti sincrone e asincrone di un <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>metodo viene restituito un <xref:System.ServiceModel.Channels.RequestContext>che può essere utilizzato per costruire risposte alle richieste ricevute.</xref:System.ServiceModel.Channels.RequestContext> </xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       Il contratto include varianti sincrone e asincrone, provare di ricezione e attesa di messaggio della funzionalità di ricezione.       Un IReplyChannel non è associata necessariamente a un solo mittente. Altri canali e interfacce di canale forniscono la correlazione tra il mittente e il canale di risposta, ma il contratto di base non implica tale restrizione.       Il modello pull è utilizzato con un IReplyChannel per ricevere messaggi. Questo modello è costituito da chiamare <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>(o una delle relative varianti) e quindi rimanga in attesa dell&quot;arrivo di un messaggio.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>"
  syntax:
    content: 'public interface IReplyChannel : System.ServiceModel.Channels.IChannel'
  implements:
  - System.ServiceModel.Channels.IChannel
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  id: BeginReceiveRequest(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginReceiveRequest(AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Inizia un&quot;operazione asincrona per ricevere una richiesta disponibile con un timeout predefinito."
  remarks: "Il metodo BeginReceiveRequest implementa il modello standard per richiamare <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest>in modo asincrono.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> Il timeout predefinito è 1 minuto. Se sull&quot;associazione utilizzata per configurare la connessione è impostato un timeout di ricezione, tale valore viene utilizzato. Utilizzare <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>Se si desidera specificare un timeout esplicito con la chiamata che esegue l&quot;override di questi altri valori.</xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>       Se il messaggio di richiesta ricevuto è più grande che la dimensione massima del messaggio consentita dall&quot;associazione in uso, un <xref:System.ServiceModel.QuotaExceededException>viene generata un&quot;eccezione.</xref:System.ServiceModel.QuotaExceededException> Dimensione massima del messaggio è l&quot;impostazione di <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>proprietà.</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> Il valore predefinito è 65536 byte."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#1](~/add/codesnippet/csharp/b714b94c-13fc-4c03-a779-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "Il <xref:System.AsyncCallback>delegato che riceve la notifica di asincrona di ricezione che viene completata un&quot;operazione di richiesta.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Un oggetto, specificato dall&quot;applicazione, che contiene informazioni sullo stato associate alla ricezione asincrona di un&quot;operazione di richiesta."
    return:
      type: System.IAsyncResult
      description: "Il <xref:System.IAsyncResult>che fa riferimento alla ricezione asincrona della richiesta.</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Inizia un&quot;operazione asincrona per ricevere una richiesta disponibile con un timeout specificato."
  remarks: "Il metodo BeginReceiveRequest implementa il modello standard per richiamare <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29>in modo asincrono.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> Il timeout impostato per questo metodo esegue l&quot;override di un timeout di ricezione impostato sull&quot;associazione utilizzata per configurare la connessione.       Se il messaggio di richiesta ricevuto è più grande che la dimensione massima del messaggio consentita dall&quot;associazione in uso, un <xref:System.ServiceModel.QuotaExceededException>viene generata un&quot;eccezione.</xref:System.ServiceModel.QuotaExceededException> Dimensione massima del messaggio è l&quot;impostazione di <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>proprietà.</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> Il valore predefinito è 65536 byte."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#2](~/add/codesnippet/csharp/6f48cd8d-c63c-4708-86c4-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Il <xref:System.TimeSpan>che specifica l&quot;intervallo di tempo di attesa per la ricezione di una richiesta disponibile.</xref:System.TimeSpan>"
    - id: callback
      type: System.AsyncCallback
      description: "Il <xref:System.AsyncCallback>delegato che riceve la notifica di asincrona di ricezione che viene completata un&quot;operazione di richiesta.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Un oggetto, specificato dall&quot;applicazione, che contiene informazioni sullo stato associate alla ricezione asincrona di un&quot;operazione di richiesta."
    return:
      type: System.IAsyncResult
      description: "Il <xref:System.IAsyncResult>che fa riferimento alla ricezione asincrona della richiesta.</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Avvia un&quot;operazione asincrona per ricevere un messaggio di richiesta che ha un periodo di timeout specificato e un oggetto di stato associato."
  remarks: "Quando è necessario l&quot;elaborazione dell&quot;applicazione continui senza attendere, utilizzare il metodo BeginTryReceiveRequest asincrono. Utilizzare uno dei sincroni <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>metodi se è accettabile per il thread corrente resti bloccato mentre risponde al messaggio di richiesta o fino a quando l&quot;intervallo di timeout viene superato.</xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29>       Questo metodo riceve mediante un callback la notifica dell&quot;identità del gestore eventi per l&quot;operazione. L&quot;operazione non è completa fino a quando un messaggio diventa disponibile nel canale o si verifica il timeout."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#5](~/add/codesnippet/csharp/cdb71277-0f0f-4e22-85af-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Il <xref:System.TimeSpan>che specifica quanto tempo l&quot;operazione di richiesta di ricezione deve essere completata prima di scadere e restituire <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.TimeSpan>"
    - id: callback
      type: System.AsyncCallback
      description: "Il <xref:System.AsyncCallback>delegato che riceve la notifica di asincrona di ricezione che viene completata un&quot;operazione di richiesta.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Un oggetto, specificato dall&quot;applicazione, che contiene informazioni sullo stato associate alla ricezione asincrona di un&quot;operazione di richiesta."
    return:
      type: System.IAsyncResult
      description: "Il <xref:System.IAsyncResult>che fa riferimento all&quot;operazione di richiesta di ricezione asincrona.</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Avvia un&quot;operazione di richiesta asincrona con un periodo di timeout specificato e un oggetto di stato associato."
  remarks: "Utilizzare sincroni <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29>metodo se è accettabile per il thread corrente resti bloccato mentre attende un messaggio di richiesta in arrivo nella coda.</xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> Il thread è bloccato fino al specificato `timeout`.       Questo metodo riceve mediante un callback la notifica dell&quot;identità del gestore eventi per l&quot;operazione. L&quot;operazione non è completa fino a quando non è disponibile nel canale di un messaggio di richiesta o si verifica il timeout."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#10](~/add/codesnippet/csharp/80573a5a-f5c0-4be0-a875-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Il <xref:System.TimeSpan>che specifica l&quot;intervallo di tempo di attesa per la ricezione di una richiesta disponibile.</xref:System.TimeSpan>"
    - id: callback
      type: System.AsyncCallback
      description: "Il <xref:System.AsyncCallback>delegato che riceve la notifica di asincrona di ricezione che viene completata un&quot;operazione di richiesta.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Un oggetto, specificato dall&quot;applicazione, che contiene informazioni sullo stato associate alla ricezione asincrona di un&quot;operazione di richiesta."
    return:
      type: System.IAsyncResult
      description: "Il <xref:System.IAsyncResult>che fa riferimento all&quot;operazione asincrona per attendere l&quot;arrivo di un messaggio di richiesta.</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  id: EndReceiveRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndReceiveRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Completa un&quot;operazione asincrona per ricevere una richiesta disponibile."
  remarks: "Se il messaggio di richiesta ricevuto è più grande che la dimensione massima del messaggio consentita dall&quot;associazione in uso, un <xref:System.ServiceModel.QuotaExceededException>viene generata un&quot;eccezione.</xref:System.ServiceModel.QuotaExceededException> Dimensione massima del messaggio è l&quot;impostazione di <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>proprietà.</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> Il valore predefinito è 65536 byte."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#3](~/add/codesnippet/csharp/c3561a14-d2f1-46f1-99c2-_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Il <xref:System.IAsyncResult>restituito da una chiamata al <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*>metodo.</xref:System.ServiceModel.Channels.IInputChannel.BeginReceive*> </xref:System.IAsyncResult>"
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "Il <xref:System.ServiceModel.Channels.RequestContext>utilizzato per costruire una risposta alla richiesta.</xref:System.ServiceModel.Channels.RequestContext>"
  overload: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  id: EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndTryReceiveRequest(IAsyncResult,RequestContext)
  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Completa l&quot;operazione asincrona specificata per ricevere un messaggio di richiesta."
  remarks: ''
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#6](~/add/codesnippet/csharp/2c432ec9-bfc6-46e4-8a1c-_1.cs)]"
  syntax:
    content: public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Il <xref:System.IAsyncResult>restituito da una chiamata al &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; metodo.</xref:System.IAsyncResult>"
    - id: context
      type: System.ServiceModel.Channels.RequestContext
      description: "Il <xref:System.ServiceModel.Channels.RequestContext>ricevuto.</xref:System.ServiceModel.Channels.RequestContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se viene ricevuto un messaggio di richiesta prima dell&quot;intervallo di tempo specificato; specificato in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  id: EndWaitForRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: EndWaitForRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Completa l&quot;operazione di messaggio di attesa per la richiesta asincrona specificato."
  remarks: ''
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#11](~/add/codesnippet/csharp/fc7d466d-2acc-417f-aa1b-_1.cs)]"
  syntax:
    content: public bool EndWaitForRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Il <xref:System.IAsyncResult>che identifica il &lt;xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt; operazione per il completamento e da cui recuperare un risultato finale.</xref:System.IAsyncResult>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se viene ricevuta una richiesta prima dell&quot;intervallo di tempo specificato; specificato in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  id: LocalAddress
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
  fullName: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Ottiene l&quot;indirizzo sul quale questo canale di risposta riceve messaggi."
  remarks: ''
  example:
  - "The following code illustrates how to implement this property:  \n  \n [!code-cs[S_UE_MessageInterceptor#0](~/add/codesnippet/csharp/p-system.servicemodel.ch_2_1.cs)]"
  syntax:
    content: public System.ServiceModel.EndpointAddress LocalAddress { get; }
    return:
      type: System.ServiceModel.EndpointAddress
      description: "Il <xref:System.ServiceModel.EndpointAddress>sul quale questo canale di risposta riceve messaggi.</xref:System.ServiceModel.EndpointAddress>"
  overload: System.ServiceModel.Channels.IReplyChannel.LocalAddress*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  id: ReceiveRequest
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: ReceiveRequest()
  nameWithType: IReplyChannel.ReceiveRequest()
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Restituisce il contesto della richiesta ricevuta, se disponibile. Se un contesto non è disponibile, attende fino a quando non disponibile."
  remarks: "<xref:System.ServiceModel.Channels.RequestContext>incapsula il messaggio di richiesta e un meccanismo per la risposta al messaggio.</xref:System.ServiceModel.Channels.RequestContext>       ReceiveRequest può essere chiamato più volte o contemporaneamente. Una sola chiamata ReceiveRequest completa per ogni richiesta ricevuta.       Se il messaggio di richiesta ricevuto è più grande che la dimensione massima del messaggio consentita dall&quot;associazione in uso, un <xref:System.ServiceModel.QuotaExceededException>viene generata un&quot;eccezione.</xref:System.ServiceModel.QuotaExceededException> Dimensione massima del messaggio è l&quot;impostazione di <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>proprietà.</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> Il valore predefinito è 65536 byte."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#7](~/add/codesnippet/csharp/m-system.servicemodel.ch_9_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest ();
    parameters: []
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "Il <xref:System.ServiceModel.Channels.RequestContext>utilizzato per costruire risposte.</xref:System.ServiceModel.Channels.RequestContext>"
  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  id: ReceiveRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: ReceiveRequest(TimeSpan)
  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Restituisce il contesto della richiesta ricevuta, se disponibile. Se un contesto non è disponibile, attende fino a quando non disponibile."
  remarks: "<xref:System.ServiceModel.Channels.RequestContext>incapsula il messaggio di richiesta e un meccanismo per la risposta al messaggio.</xref:System.ServiceModel.Channels.RequestContext>       <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>può essere chiamato più volte o contemporaneamente.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> Un solo <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>completamento della chiamata per ogni richiesta ricevuta.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       Se il messaggio di richiesta ricevuto è più grande che la dimensione massima del messaggio consentita dall&quot;associazione in uso, un <xref:System.ServiceModel.QuotaExceededException>viene generata un&quot;eccezione.</xref:System.ServiceModel.QuotaExceededException> Dimensione massima del messaggio è l&quot;impostazione di <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A>proprietà.</xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> Il valore predefinito è 65536 byte."
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#8](~/add/codesnippet/csharp/m-system.servicemodel.ch_3_1.cs)]"
  syntax:
    content: public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Il <xref:System.TimeSpan>che specifica quanto tempo la ricezione di un&quot;operazione di richiesta deve essere completata prima di scadere e restituire <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.TimeSpan>"
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "Il <xref:System.ServiceModel.Channels.RequestContext>utilizzato per costruire risposte.</xref:System.ServiceModel.Channels.RequestContext>"
  overload: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  id: TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: TryReceiveRequest(TimeSpan,RequestContext)
  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Restituisce un valore che indica se viene ricevuta una richiesta prima di un determinato intervallo di tempo specificato."
  remarks: "Utilizzare TryReceiveRequest quando è accettabile per il thread corrente resti bloccato mentre attende un messaggio di richiesta in arrivo nella coda. Il thread è bloccato fino al specificato `timeout`. Se è necessario l&quot;elaborazione dell&quot;applicazione continui senza attendere, utilizzare asincrona <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>metodo.</xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#4](~/add/codesnippet/csharp/78581c5e-1028-4e54-ba3b-_1.cs)]"
  syntax:
    content: public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Il <xref:System.TimeSpan>che specifica quanto tempo la ricezione di un&quot;operazione di richiesta deve essere completata prima di scadere e restituire <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.TimeSpan>"
    - id: context
      type: System.ServiceModel.Channels.RequestContext
      description: "Il <xref:System.ServiceModel.Channels.RequestContext>ricevuto.</xref:System.ServiceModel.Channels.RequestContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se viene ricevuto un messaggio di richiesta prima dell&quot;intervallo di tempo specificato; specificato in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  id: WaitForRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  langs:
  - csharp
  name: WaitForRequest(TimeSpan)
  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(TimeSpan)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Restituisce un valore che indica se viene ricevuto un messaggio di richiesta prima di un determinato intervallo di tempo specificato."
  remarks: "La chiamata WaitForRequest non produce un messaggio di richiesta venga ricevuto o elaborato in alcun modo.       Il <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>metodo esiste principalmente per gli scenari di transazione in cui l&quot;utente desidera ricevere il messaggio utilizzando una transazione.</xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> Quando si utilizza solo <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>, l&quot;utente deve creare la transazione e quindi chiamare <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>e sperare che il messaggio arrivi prima la transazione scade, che potrebbe non essere possibile.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> </xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       Al contrario, l&quot;utente può chiamare WaitForRequest e specificare il timeout (anche infinito), quindi quando arriva un messaggio, può aprire la transazione, chiamare <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>e avere la certezza che è possibile ottenere il messaggio prima che la transazione scada.</xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A>       Utilizzare WaitForRequest quando è accettabile per il thread corrente resti bloccato mentre è in attesa di un messaggio è arrivato nella coda. Il thread è bloccato fino al specificato `timeout`. Se è necessario l&quot;elaborazione dell&quot;applicazione continui senza attendere, utilizzare asincrona <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>metodo.</xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>"
  example:
  - "The following code illustrates how to implement this method:  \n  \n [!code-cs[S_UE_MessageInterceptor#9](~/add/codesnippet/csharp/m-system.servicemodel.ch_6_1.cs)]"
  syntax:
    content: public bool WaitForRequest (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Il <xref:System.TimeSpan>che specifica quanto tempo una richiesta di operazione deve essere completata prima di scadere e restituire <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.TimeSpan>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se viene ricevuta una richiesta prima dell&quot;intervallo di tempo specificato; specificato in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest(AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(TimeSpan,AsyncCallback,Object)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  nameWithType: IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndReceiveRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndReceiveRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(IAsyncResult)
- uid: System.ServiceModel.Channels.RequestContext
  parent: System.ServiceModel.Channels
  isExternal: true
  name: RequestContext
  nameWithType: RequestContext
  fullName: System.ServiceModel.Channels.RequestContext
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndTryReceiveRequest(IAsyncResult,RequestContext)
  nameWithType: IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(IAsyncResult,RequestContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndWaitForRequest(IAsyncResult)
  nameWithType: IReplyChannel.EndWaitForRequest(IAsyncResult)
  fullName: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(IAsyncResult)
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
  fullName: System.ServiceModel.Channels.IReplyChannel.LocalAddress
- uid: System.ServiceModel.EndpointAddress
  parent: System.ServiceModel
  isExternal: true
  name: EndpointAddress
  nameWithType: EndpointAddress
  fullName: System.ServiceModel.EndpointAddress
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest()
  nameWithType: IReplyChannel.ReceiveRequest()
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest()
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest(TimeSpan)
  nameWithType: IReplyChannel.ReceiveRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(TimeSpan)
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: TryReceiveRequest(TimeSpan,RequestContext)
  nameWithType: IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
  fullName: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(TimeSpan,RequestContext)
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: WaitForRequest(TimeSpan)
  nameWithType: IReplyChannel.WaitForRequest(TimeSpan)
  fullName: System.ServiceModel.Channels.IReplyChannel.WaitForRequest(TimeSpan)
- uid: System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginReceiveRequest
  nameWithType: IReplyChannel.BeginReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginTryReceiveRequest
  nameWithType: IReplyChannel.BeginTryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: BeginWaitForRequest
  nameWithType: IReplyChannel.BeginWaitForRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndReceiveRequest
  nameWithType: IReplyChannel.EndReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndTryReceiveRequest
  nameWithType: IReplyChannel.EndTryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: EndWaitForRequest
  nameWithType: IReplyChannel.EndWaitForRequest
- uid: System.ServiceModel.Channels.IReplyChannel.LocalAddress*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: LocalAddress
  nameWithType: IReplyChannel.LocalAddress
- uid: System.ServiceModel.Channels.IReplyChannel.ReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: ReceiveRequest
  nameWithType: IReplyChannel.ReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: TryReceiveRequest
  nameWithType: IReplyChannel.TryReceiveRequest
- uid: System.ServiceModel.Channels.IReplyChannel.WaitForRequest*
  parent: System.ServiceModel.Channels.IReplyChannel
  isExternal: false
  name: WaitForRequest
  nameWithType: IReplyChannel.WaitForRequest
