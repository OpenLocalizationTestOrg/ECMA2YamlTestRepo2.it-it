### YamlMime:ManagedReference
items:
- uid: System.Web.Security.Roles
  id: Roles
  children:
  - System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  - System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  - System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  - System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  - System.Web.Security.Roles.ApplicationName
  - System.Web.Security.Roles.CacheRolesInCookie
  - System.Web.Security.Roles.CookieName
  - System.Web.Security.Roles.CookiePath
  - System.Web.Security.Roles.CookieProtectionValue
  - System.Web.Security.Roles.CookieRequireSSL
  - System.Web.Security.Roles.CookieSlidingExpiration
  - System.Web.Security.Roles.CookieTimeout
  - System.Web.Security.Roles.CreatePersistentCookie
  - System.Web.Security.Roles.CreateRole(System.String)
  - System.Web.Security.Roles.DeleteCookie
  - System.Web.Security.Roles.DeleteRole(System.String)
  - System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  - System.Web.Security.Roles.Domain
  - System.Web.Security.Roles.Enabled
  - System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  - System.Web.Security.Roles.GetAllRoles
  - System.Web.Security.Roles.GetRolesForUser
  - System.Web.Security.Roles.GetRolesForUser(System.String)
  - System.Web.Security.Roles.GetUsersInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  - System.Web.Security.Roles.MaxCachedResults
  - System.Web.Security.Roles.Provider
  - System.Web.Security.Roles.Providers
  - System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  - System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  - System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  - System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.Security.Roles.RoleExists(System.String)
  langs:
  - csharp
  name: Roles
  nameWithType: Roles
  fullName: System.Web.Security.Roles
  type: Class
  summary: "Gestisce l&quot;appartenenza utente ai ruoli per l&quot;autorizzazione di controllo in un&quot;applicazione ASP.NET. Questa classe non può essere ereditata."
  remarks: "Gestione dei ruoli ASP.NET consente di gestire l&quot;autorizzazione per l&quot;applicazione in base ai gruppi di utenti, chiamati ruoli. Assegnando utenti a ruoli, è possibile controllare l&quot;accesso a diverse parti o caratteristiche dell&quot;applicazione Web in base al ruolo anziché o oltre a, che specifica l&quot;autorizzazione basata su nome utente. Un&quot;applicazione dipendente, ad esempio, potrebbe disporre di ruoli, ad esempio responsabili, dipendenti, amministrazione e così via, in cui vengono specificati i privilegi diversi per ogni ruolo.       Gli utenti possono appartenere a più di un ruolo. Ad esempio, se il sito è un forum di discussione, alcuni utenti potrebbero essere assegnato il ruolo di membri sia moderatori. È possibile definire ogni ruolo per disporre di privilegi diversi per il sito e un utente che in entrambi i ruoli hanno quindi entrambi i set di privilegi.       Per abilitare la gestione dei ruoli per l&quot;applicazione ASP.NET, utilizzare l&quot;elemento del `system.web` sezione nel file Web. config dell&quot;applicazione, come illustrato nell&quot;esempio seguente.      ```   <configuration>     <connectionStrings>       <add name=&quot;SqlServices&quot; connectionString=&quot;Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;&quot; />     </connectionStrings>        <system.web>       <authentication mode=&quot;Forms&quot; >         <forms loginUrl=&quot;login.aspx&quot;         name=&quot;.ASPXFORMSAUTH&quot; />       </authentication>        <roleManager defaultProvider=&quot;SqlProvider&quot;        enabled=&quot;true&quot;       cacheRolesInCookie=&quot;true&quot;       cookieName=&quot;.ASPROLES&quot;       cookieTimeout=&quot;30&quot;       cookiePath=&quot;/&quot;       cookieRequireSSL=&quot;false&quot;       cookieSlidingExpiration=&quot;true&quot;       cookieProtection=&quot;All&quot; >       <providers>         <add           name=&quot;SqlProvider&quot;           type=&quot;System.Web.Security.SqlRoleProvider&quot;           connectionStringName=&quot;SqlServices&quot;           applicationName=&quot;SampleApplication&quot; />         </providers>       </roleManager>     </system.web>   </configuration>   ```È possibile specificare le regole di autorizzazione nel file di configurazione per l&quot;applicazione Web o a livello di programmazione nel codice. Ad esempio, nella sezione seguente da un file Web. config richiede agli utenti di accedere (negando utenti anonimi) e quindi consente solo agli utenti nel ruolo amministratori di accedere.      ```   <authorization>     <deny users=&quot;?&quot; />     <allow roles=&quot;Administrators&quot; />     <deny users=&quot;*&quot; />   </authorization>   ```Se si utilizza il `authorization` sezione nel file Web. config dell&quot;applicazione per specificare l&quot;autorizzazione basata sui ruoli, gli utenti dell&quot;applicazione deve fornire un&quot;identità utente autenticato. È possibile autenticare gli utenti tramite l&quot;autenticazione di Windows o form. Gli utenti anonimi non possono essere assegnati a un ruolo. Ruoli possono essere utilizzati in modo indipendente da o in combinazione con, ASP.NET <xref:System.Web.Security.Membership>classi.</xref:System.Web.Security.Membership>       Per verificare l&quot;appartenenza al ruolo a livello di codice, è possibile utilizzare la classe di ruoli o <xref:System.Web.UI.Page.User%2A?displayProperty=fullName>proprietà con il <xref:System.Web.Security.Roles.IsUserInRole%2A>(metodo), oppure è possibile utilizzare il <xref:System.Web.UI.Page.User%2A?displayProperty=fullName>proprietà con il <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName>metodo.</xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName> </xref:System.Web.UI.Page.User%2A?displayProperty=fullName> </xref:System.Web.Security.Roles.IsUserInRole%2A> </xref:System.Web.UI.Page.User%2A?displayProperty=fullName> Per esempi di codice che a livello di codice controlla l&quot;appartenenza al ruolo, vedere la sezione di esempio in questo argomento.       La classe di ruoli consente inoltre di creare ed eliminare i ruoli e di aggiungere o rimuovere utenti dai ruoli.      > [!NOTE] > Se è stata configurata l&quot;applicazione per utilizzare il <xref:System.Web.Security.WindowsTokenRoleProvider>(classe), è possibile modificare i ruoli o l&quot;appartenenza al ruolo.</xref:System.Web.Security.WindowsTokenRoleProvider> Il <xref:System.Web.Security.WindowsTokenRoleProvider>solo i gruppi di sicurezza di Windows l&quot;appartenenza al classverifies.</xref:System.Web.Security.WindowsTokenRoleProvider> In questo caso, è necessario utilizzare Gestione degli account utente di Windows anziché i ruoli ASP.NET per creare ed eliminare gruppi e gestire l&quot;appartenenza al gruppo.       È possibile archiviare le informazioni sui ruoli in diverse origini dati.      -È possibile usare la <xref:System.Web.Security.WindowsTokenRoleProvider>classe per recuperare informazioni sui ruoli in base all&quot;appartenenza a gruppi di Windows.</xref:System.Web.Security.WindowsTokenRoleProvider>      -È possibile archiviare le informazioni sui ruoli in un database di SQL Server utilizzando la <xref:System.Web.Security.SqlRoleProvider>classe.</xref:System.Web.Security.SqlRoleProvider>      -Se si dispone di informazioni di ruolo esistente o si desidera archiviare le informazioni sui ruoli in e recuperare informazioni sui ruoli da un&quot;origine dati diversa da Windows, un archivio autorizzazioni o SQL Server, è possibile implementare un provider di ruoli personalizzato creando una classe che eredita la <xref:System.Web.Security.RoleProvider>classe astratta.</xref:System.Web.Security.RoleProvider> Per ulteriori informazioni, vedere [implementa un Provider di ruoli](~/add/includes/ajax-current-ext-md.md).       Se il browser dell&quot;utente accetta i cookie, è possibile archiviare le informazioni sui ruoli per l&quot;utente in un cookie sul computer dell&quot;utente. In ogni richiesta di pagina, ASP.NET legge le informazioni sui ruoli per l&quot;utente dal cookie. Questo può migliorare le prestazioni dell&quot;applicazione riducendo la quantità di comunicazione necessaria con l&quot;origine dati per recuperare le informazioni sui ruoli. Se le informazioni sui ruoli per un utente è troppo lunghi per l&quot;archiviazione in un cookie, ASP.NET memorizza solo le informazioni sui ruoli utilizzati di recente nel cookie e quindi cerca informazioni aggiuntive nell&quot;origine dati come richiesto. Se il browser dell&quot;utente non supporta i cookie o i cookie sono disabilitati, le informazioni sui ruoli non memorizzato nella cache un cookie.       È possibile migliorare l&quot;affidabilità dei nomi di ruoli memorizzati in un cookie specificando un <xref:System.Web.Security.Roles.CookieProtectionValue%2A>proprietà quando si configurano i ruoli ASP.NET.</xref:System.Web.Security.Roles.CookieProtectionValue%2A> Il valore predefinito <xref:System.Web.Security.Roles.CookieProtectionValue%2A>è `All`, che crittografa i nomi dei ruoli nel cookie e verifica che il contenuto del cookie non è stato modificato.</xref:System.Web.Security.Roles.CookieProtectionValue%2A>"
  example:
  - "The following example shows the Web.config file for an application configured to use both ASP.NET membership and ASP.NET roles and to use the <xref:System.Web.Security.SqlRoleProvider> to store membership and role information in a SQL Server database. Users are authenticated with forms authentication and only users in the Administrators role are allowed access to the application.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;\" />  \n  </connectionStrings>  \n  \n  <system.web>  \n    <authentication mode=\"Forms\" >  \n      <forms loginUrl=\"login.aspx\"  \n      name=\".ASPXFORMSAUTH\" />  \n    </authentication>  \n  \n    <authorization>  \n      <deny users=\"?\" />  \n      <allow roles=\"Administrators\" />  \n      <deny users=\"*\" />  \n    </authorization>  \n  \n    <membership defaultProvider=\"AspNetSqlProvider\" userIsOnlineTimeWindow=\"15\">  \n    </membership>  \n  \n    <roleManager defaultProvider=\"SqlProvider\"   \n      enabled=\"true\"  \n      cacheRolesInCookie=\"true\"  \n      cookieName=\".ASPROLES\"  \n      cookieTimeout=\"30\"  \n      cookiePath=\"/\"  \n      cookieRequireSSL=\"true\"  \n      cookieSlidingExpiration=\"true\"  \n      cookieProtection=\"All\" >  \n  \n      <providers>  \n        <clear />  \n        <add  \n          name=\"SqlProvider\"  \n          type=\"System.Web.Security.SqlRoleProvider\"  \n          connectionStringName=\"SqlServices\"  \n          applicationName=\"SampleApplication\" />  \n        </providers>  \n  \n    </roleManager>  \n  </system.web>  \n</configuration>  \n```  \n  \n The following code example programmatically checks whether the logged-on user is in the Administrators role before allowing the user to view other users' roles.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static class Roles
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  id: AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRole(String[],String)
  nameWithType: Roles.AddUsersToRole(String[],String)
  fullName: System.Web.Security.Roles.AddUsersToRole(String[],String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Aggiunge utenti specifici al ruolo specificato."
  remarks: "Il metodo AddUsersToRole chiama il provider di ruoli predefinito per associare gli utenti specificati con il ruolo specificato nell&quot;origine dati.       Se l&quot;applicazione usa la <xref:System.Web.Security.SqlRoleProvider>classe, gli aggiornamenti di database che vengono eseguiti durante la chiamata al <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>metodo vengono effettuati all&quot;interno di una transazione.</xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Se si verifica un errore, ad esempio un nome utente che è già in un ruolo specificato, viene eseguito il rollback della transazione e viene eseguito alcun aggiornamento.      > [!NOTE] > Nomi utente e i nomi dei ruoli non può contenere virgole."
  example:
  - "The following code example adds one or more users to a role or removes a user from a role based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_7_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_7_1.aspx)]"
  syntax:
    content: public static void AddUsersToRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Matrice di stringhe di nomi utente da aggiungere al ruolo specificato."
    - id: roleName
      type: System.String
      description: "Ruolo a cui aggiungere i nomi utente specificati."
  overload: System.Web.Security.Roles.AddUsersToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - uno degli elementi in <code>usernames</code> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota o contiene una virgola (,).       - oppure - uno degli elementi in <code>usernames</code> è una stringa vuota o contiene una virgola (,).       - oppure - <code>usernames</code> contiene un elemento duplicato."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRoles(String[],String[])
  nameWithType: Roles.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.Roles.AddUsersToRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Aggiunge utenti specifici ai ruoli specificati."
  remarks: "Il metodo AddUsersToRoles chiama il provider di ruoli predefinito per associare gli utenti specificati ai ruoli specificati nell&quot;origine dati.       Se l&quot;applicazione usa la <xref:System.Web.Security.SqlRoleProvider>classe, gli aggiornamenti di database che vengono eseguiti durante la chiamata al <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>metodo vengono effettuati all&quot;interno di una transazione.</xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Se si verifica un errore, ad esempio un nome utente che è già in un ruolo specificato, viene eseguito il rollback della transazione e viene eseguito alcun aggiornamento.      > [!NOTE] > Nomi utente e i nomi dei ruoli non può contenere virgole."
  example:
  - "The following code example adds one or more users to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_21_1.aspx)]\n [!code-cs[System.Web.Security.Roles#1](~/add/codesnippet/csharp/m-system.web.security.ro_21_1.aspx)]"
  syntax:
    content: public static void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Matrice di stringhe di nomi utente da aggiungere ai ruoli specificati."
    - id: roleNames
      type: System.String[]
      description: "Matrice di stringhe di nomi di ruoli per aggiungere i nomi utente specificati."
  overload: System.Web.Security.Roles.AddUsersToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       One of the users in <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Uno dei ruoli in <code> roleNames </code> è una stringa vuota o contiene una virgola (,).       - oppure - uno degli utenti in <code> usernames </code> è una stringa vuota o contiene una virgola (,).       - oppure - <code> roleNames </code> contiene un elemento duplicato.       - oppure - <code> usernames </code> contiene un elemento duplicato."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  id: AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRole(String,String)
  nameWithType: Roles.AddUserToRole(String,String)
  fullName: System.Web.Security.Roles.AddUserToRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Aggiunge l&quot;utente specificato al ruolo specificato."
  remarks: "Il metodo AddUserToRole chiama il provider di ruoli predefinito per associare l&quot;utente specificato con il ruolo specificato nell&quot;origine dati.      > [!NOTE] > Nomi utente e i nomi dei ruoli non può contenere virgole."
  example:
  - "The following code example adds a user to a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#2](~/add/codesnippet/csharp/m-system.web.security.ro_19_1.aspx)]\n [!code-vb[System.Web.Security.Roles#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_19_1.aspx)]"
  syntax:
    content: public static void AddUserToRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "Il nome utente da aggiungere al ruolo specificato."
    - id: roleName
      type: System.String
      description: "Ruolo a cui aggiungere il nome utente specificato."
  overload: System.Web.Security.Roles.AddUserToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota o contiene una virgola (,).       - oppure - <code>username</code> è una stringa vuota o contiene una virgola (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata.       - oppure - utente è già assegnato al ruolo specificato."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  id: AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRoles(String,String[])
  nameWithType: Roles.AddUserToRoles(String,String[])
  fullName: System.Web.Security.Roles.AddUserToRoles(String,String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Aggiunge l&quot;utente specificato ai ruoli specificati."
  remarks: "Il metodo AddUserToRoles chiama il provider di ruoli predefinito per associare l&quot;utente specificato ai ruoli specificati nell&quot;origine dati.       Se l&quot;applicazione usa il <xref:System.Web.Security.SqlRoleProvider>(classe), gli aggiornamenti di database che vengono eseguiti durante la chiamata al metodo AddUserToRoles vengono eseguiti all&quot;interno di una transazione.</xref:System.Web.Security.SqlRoleProvider> Se si verifica un errore, ad esempio un nome utente che è già in un ruolo specificato, viene eseguito il rollback della transazione e viene eseguito alcun aggiornamento.      > [!NOTE] > Nomi utente e i nomi dei ruoli non può contenere virgole."
  example:
  - "The following code example adds a user to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_20_1.aspx)]\n [!code-cs[System.Web.Security.Roles#3](~/add/codesnippet/csharp/m-system.web.security.ro_20_1.aspx)]"
  syntax:
    content: public static void AddUserToRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: "Il nome utente da aggiungere ai ruoli specificati."
    - id: roleNames
      type: System.String[]
      description: "Matrice di stringhe di ruoli a cui aggiungere il nome utente specificato."
  overload: System.Web.Security.Roles.AddUserToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Uno dei ruoli in <code> roleNames </code> è una stringa vuota o contiene una virgola (,).       - oppure - <code> username </code> è una stringa vuota o contiene una virgola (,).       - oppure - <code> roleNames </code> contiene un elemento duplicato."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.ApplicationName
  id: ApplicationName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: System.Web.Security.Roles.ApplicationName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene o imposta il nome dell&quot;applicazione da archiviare e recuperare informazioni sui ruoli."
  remarks: "La proprietà ApplicationName viene utilizzata il <xref:System.Web.Security.Roles>classe per associare utenti e ruoli ad applicazioni diverse.</xref:System.Web.Security.Roles> In questo modo più applicazioni di utilizzare la stessa origine dati per archiviare informazioni su utenti e ruoli senza che si verifichino conflitti tra nomi utente duplicati o nomi di ruoli duplicati. Più applicazioni ASP.NET è possono utilizzare la stessa origine dati specificando lo stesso valore nella proprietà ApplicationName. È possibile impostare la proprietà ApplicationName a livello di codice oppure è possibile impostarlo in modo dichiarativo nel file di configurazione per l&quot;applicazione Web tramite il `applicationName` attributo.       Se l&quot;applicazione Web utilizza la <xref:System.Web.Security.SqlRoleProvider>classe e un valore non è specificato per il `applicationName` attributo nel file di configurazione, il <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>valore della proprietà per l&quot;oggetto corrente <xref:System.Web.HttpContext.Request%2A?displayProperty=fullName>proprietà viene utilizzata.</xref:System.Web.HttpContext.Request%2A?displayProperty=fullName> </xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName> </xref:System.Web.Security.SqlRoleProvider>      > [!CAUTION] > Poiché un&quot;istanza del provider predefinito singolo ruolo viene utilizzata per tutte le richieste gestite da un <xref:System.Web.HttpApplication>dell&quot;oggetto, è possibile avere più richieste in esecuzione contemporaneamente e si tenta di impostare il valore della proprietà ApplicationName.</xref:System.Web.HttpApplication> La proprietà ApplicationName non è thread-safe per più operazioni di scrittura e modifica il valore della proprietà ApplicationName può causare un comportamento imprevisto per più utenti di un&quot;applicazione. È consigliabile evitare di scrivere codice che consenta agli utenti di impostare la proprietà ApplicationName, a meno che non richiesto. Un esempio di un&quot;applicazione in cui potrebbe essere necessario impostare la proprietà ApplicationName è un&quot;applicazione amministrativa che gestisce i dati del ruolo per più applicazioni. Questo tipo di applicazione deve essere un utente singolo e non è un&quot;applicazione Web."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `applicationName` attribute to `MyApplication`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string ApplicationName { get; set; }
    return:
      type: System.String
      description: "Il nome dell&quot;applicazione da archiviare e recuperare informazioni sui ruoli."
  overload: System.Web.Security.Roles.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CacheRolesInCookie
  id: CacheRolesInCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: System.Web.Security.Roles.CacheRolesInCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un valore che indica se i ruoli dell&quot;utente corrente sono memorizzati in un cookie."
  remarks: "Quando è impostata la proprietà CacheRolesInCookie `true` nel file Web. config, le informazioni sui ruoli per ogni utente viene archiviate in un cookie. Quando la gestione dei ruoli consente di verificare se un utente è in un determinato ruolo, viene controllato il cookie dei ruoli prima di chiamata il provider di ruoli per controllare l&quot;elenco dei ruoli nell&quot;origine dati. Il cookie viene aggiornato in modo dinamico per memorizzare nella cache i nomi di ruolo più recente convalidati.       È possibile migliorare l&quot;affidabilità dei nomi di ruoli memorizzati in un cookie specificando un <xref:System.Web.Security.Roles.CookieProtectionValue%2A>proprietà quando si configurano i ruoli ASP.NET.</xref:System.Web.Security.Roles.CookieProtectionValue%2A> Il valore predefinito <xref:System.Web.Security.Roles.CookieProtectionValue%2A>è `All`, che crittografa i nomi dei ruoli nel cookie e verifica che il contenuto del cookie non è stato modificato.</xref:System.Web.Security.Roles.CookieProtectionValue%2A>      > [!NOTE] > Poiché i nomi dei ruoli possono essere memorizzati nella cache oltre l&quot;origine dati, è possibile che le modifiche per la gestione dei ruoli nell&quot;origine dati non risulteranno in valori memorizzati nella cache. In questo caso, l&quot;utente deve chiudere e riaprire il browser per cancellare il valore del cookie memorizzato nella cache."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cacheRolesInCookie` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n   </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CacheRolesInCookie { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se i ruoli dell&quot;utente corrente vengono memorizzati nella cache in un cookie. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CacheRolesInCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieName
  id: CookieName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: System.Web.Security.Roles.CookieName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene il nome del cookie in cui sono memorizzati i nomi di ruolo."
  remarks: "È possibile specificare il nome del cookie in cui sono memorizzati i ruoli per l&quot;applicazione impostando il `cookieName` attributo nel file Web. config dell&quot;applicazione ASP.NET. Ciò risulta utile quando si desidera identificare in modo univoco un cookie per l&quot;applicazione oppure quando un cookie è condiviso tra più applicazioni, ad esempio un cookie di dominio."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookieName` attribute to .ASPROLES.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookieName { get; }
    return:
      type: System.String
      description: "Il nome del cookie in cui sono memorizzati i nomi di ruolo. Il valore predefinito è. ASPXROLES."
  overload: System.Web.Security.Roles.CookieName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookiePath
  id: CookiePath
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: System.Web.Security.Roles.CookiePath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene il percorso per il cookie dei nomi di ruoli memorizzati."
  remarks: "È possibile specificare il percorso del cookie in cui sono memorizzati i ruoli per l&quot;applicazione impostando il `cookiePath` attributo nel file Web. config dell&quot;applicazione ASP.NET. Per ulteriori informazioni sui percorsi dei cookie, vedere <xref:System.Web.HttpCookie.Path%2A>.</xref:System.Web.HttpCookie.Path%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookiePath` attribute to /MyApplication.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookiePath { get; }
    return:
      type: System.String
      description: "Il percorso del cookie in cui sono memorizzati i nomi di ruolo. Il valore predefinito è /."
  overload: System.Web.Security.Roles.CookiePath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieProtectionValue
  id: CookieProtectionValue
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: System.Web.Security.Roles.CookieProtectionValue
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un valore che indica come vengono protetti i nomi di ruoli memorizzati in un cookie."
  remarks: "È possibile specificare la protezione del cookie in cui sono memorizzati i ruoli per l&quot;applicazione impostando il `cookieProtection` attributo nel file Web. config dell&quot;applicazione ASP.NET. Il `cookieProtection` attributo accetta un <xref:System.Web.Security.CookieProtection>valore di enumerazione che indica se i nomi di ruolo sono crittografati, convalidare, entrambi o nessuno.</xref:System.Web.Security.CookieProtection>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieProtection` attribute to `Encrypted`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static System.Web.Security.CookieProtection CookieProtectionValue { get; }
    return:
      type: System.Web.Security.CookieProtection
      description: "Uno del <xref href=&quot;System.Web.Security.CookieProtection&quot;> </xref> valori di enumerazione che indica come vengono protetti i nomi di ruolo che vengono memorizzati nella cache in un cookie. Il valore predefinito è <xref uid=&quot;langword_csharp_All&quot; name=&quot;All&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieProtectionValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieRequireSSL
  id: CookieRequireSSL
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: System.Web.Security.Roles.CookieRequireSSL
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un valore che indica se il cookie dei nomi di ruoli richiede SSL per la restituzione al server."
  remarks: "È possibile specificare se SSL (Secure Sockets Layer) è necessaria per restituire il cookie dei nomi di ruolo per il server nell&quot;applicazione impostando il `cookieRequireSSL` attributo nel file Web. config dell&quot;applicazione ASP.NET. Per ulteriori informazioni, vedere <xref:System.Web.HttpCookie.Secure%2A>.</xref:System.Web.HttpCookie.Secure%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieRequireSSL` to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieRequireSSL { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se SSL è necessaria per restituire il cookie dei nomi di ruolo al server. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieRequireSSL*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  id: CookieSlidingExpiration
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: System.Web.Security.Roles.CookieSlidingExpiration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Indica se la data di scadenza cookie di nomi di ruolo e l&quot;ora vengono reimpostate periodicamente."
  remarks: "È possibile specificare se la data di scadenza cookie dei nomi di ruoli e ora verrà reimpostato con ogni risposta utilizzando il `cookieSlidingExpiration` attributo nel file Web. config dell&quot;applicazione ASP.NET. Se `true`, la scadenza del cookie verrà inizialmente impostata per la data e ora correnti più il <xref:System.Web.Security.Roles.CookieTimeout%2A>in minuti.</xref:System.Web.Security.Roles.CookieTimeout%2A> Mentre l&quot;utente continua a utilizzare attivamente l&quot;applicazione ASP.NET la data di scadenza del cookie verrà essere aggiornate automaticamente se è minore della metà del <xref:System.Web.Security.Roles.CookieTimeout%2A>rimanenti.</xref:System.Web.Security.Roles.CookieTimeout%2A> Per ulteriori informazioni, vedere il <xref:System.Web.HttpCookie.Expires%2A>proprietà.</xref:System.Web.HttpCookie.Expires%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the CookieSlidingExpiration property to `false`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"false\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieSlidingExpiration { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la data di scadenza cookie di nomi di ruolo e l&quot;ora verranno reimpostate periodicamente; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieSlidingExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieTimeout
  id: CookieTimeout
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: System.Web.Security.Roles.CookieTimeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene il numero di minuti prima della scadenza del cookie."
  remarks: "La proprietà CookieTimeout viene utilizzata quando il <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>proprietà `true` e specifica la durata in minuti del cookie dei ruoli.</xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> Per impostare il valore CookieTimeout, aggiungere il `cookieTimeout` attributo all&quot;elemento nel file Web. config per l&quot;applicazione ASP.NET e specificare un valore intero.       Se <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>è `false`, questa proprietà viene ignorata.</xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the CookieTimeout property to 30 minutes.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n  <add  \n    name=\"SqlProvider\"  \n    type=\"System.Web.Security.SqlRoleProvider\"  \n    connectionStringName=\"SqlServices\"  \n    applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static int CookieTimeout { get; }
    return:
      type: System.Int32
      description: "Scadenza di un numero intero che specifica il numero di minuti prima del cookie dei ruoli. Il valore predefinito è 30 minuti."
  overload: System.Web.Security.Roles.CookieTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CreatePersistentCookie
  id: CreatePersistentCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: System.Web.Security.Roles.CreatePersistentCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un valore che indica se il cookie dei nomi di ruoli è basato sulla sessione o persistente."
  remarks: "Il valore della proprietà CreatePersistentCookie è impostato nella configurazione per un&quot;applicazione ASP.NET utilizzando il `createPersistentCookie` attributo dell&quot;elemento di configurazione.       Quando `false`, il cookie dei nomi di ruolo è un cookie di sessione, vale a dire il cookie viene perso quando il browser viene chiuso. Quando `true`, il cookie dei nomi di ruolo è un cookie permanente è disponibile in più sessioni del browser. La data di scadenza cookie permanenti e l&quot;ora sono impostate per la data e ora correnti più il <xref:System.Web.Security.Roles.CookieTimeout%2A>valore in minuti.</xref:System.Web.Security.Roles.CookieTimeout%2A>"
  syntax:
    content: public static bool CreatePersistentCookie { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il cookie dei nomi di ruoli è persistente; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CreatePersistentCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: System.Web.Security.Roles.CreateRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Aggiunge un nuovo ruolo all&quot;origine dati."
  remarks: "Il metodo CreateRole aggiunge un nome di ruolo all&quot;origine dati. Chiamate CreateRole il <xref:System.Web.Security.RoleProvider.CreateRole%2A>metodo del provider di ruoli predefinito per aggiungere il ruolo specificato per l&quot;origine dati.</xref:System.Web.Security.RoleProvider.CreateRole%2A>      > [!NOTE] > I nomi dei ruoli non può contenere virgole."
  example:
  - "The following code example creates a new role in the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_12_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_12_1.aspx)]"
  syntax:
    content: public static void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Il nome del ruolo da creare."
  overload: System.Web.Security.Roles.CreateRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota.       - oppure - <code>roleName</code> contiene una virgola."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteCookie
  id: DeleteCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: System.Web.Security.Roles.DeleteCookie()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Elimina il cookie in cui sono memorizzati i nomi di ruolo."
  remarks: "Il metodo DeleteCookie Cancella il contenuto del cookie utilizzato per memorizzare i nomi di ruolo. Per ulteriori informazioni sulla memorizzazione nella cache i nomi dei ruoli, vedere <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example calls the DeleteCookie method to clear any cached role names when a user logs in. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.Security.Roles#5](~/add/codesnippet/visualbasic/m-system.web.security.ro_1_1.aspx)]\n [!code-cs[System.Web.Security.Roles#5](~/add/codesnippet/csharp/m-system.web.security.ro_1_1.aspx)]"
  syntax:
    content: public static void DeleteCookie ();
    parameters: []
  overload: System.Web.Security.Roles.DeleteCookie*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  id: DeleteRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: System.Web.Security.Roles.DeleteRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Rimuove un ruolo dall&quot;origine dati."
  remarks: "Il metodo DeleteRole rimuove un nome di ruolo dall&quot;origine dati. Chiamate DeleteRole il <xref:System.Web.Security.RoleProvider.DeleteRole%2A>metodo del provider di ruoli predefinito per rimuovere il ruolo specificato dall&quot;origine dati.</xref:System.Web.Security.RoleProvider.DeleteRole%2A>       Se il ruolo è identificato dal `roleName` parametro non ha uno o più membri, quindi verrà generata un&quot;eccezione e il ruolo non verrà eliminato."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.ro_9_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_9_1.aspx)]"
  syntax:
    content: public static bool DeleteRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Il nome del ruolo da eliminare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> roleName </code> è stato eliminato dall&quot;origine dati; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota o contiene una virgola (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>include uno o più membri.       - oppure - gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String,Boolean)
  nameWithType: Roles.DeleteRole(String,Boolean)
  fullName: System.Web.Security.Roles.DeleteRole(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Rimuove un ruolo dall&quot;origine dati."
  remarks: "Il metodo DeleteRole rimuove un nome di ruolo dall&quot;origine dati. Chiamate DeleteRole il <xref:System.Web.Security.RoleProvider.DeleteRole%2A>metodo del provider di ruoli predefinito per rimuovere il ruolo specificato dall&quot;origine dati.</xref:System.Web.Security.RoleProvider.DeleteRole%2A>       Se `throwOnPopulatedRole` è `true`, verrà generata un&quot;eccezione e il ruolo non viene eliminato se il ruolo è identificato dal `roleName` parametro ha uno o più membri. Se `throwOnPopulatedRole` è `false`, se non è vuoto o non verrà eliminato il ruolo."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.ro_0_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_0_1.aspx)]"
  syntax:
    content: public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: "Il nome del ruolo da eliminare."
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, genera un&quot;eccezione se `roleName` ha uno o più membri."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> roleName </code> è stato eliminato dall&quot;origine dati; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>contiene uno o più membri e <code>throwOnPopulatedRole</code> è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.       - oppure - gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.Domain
  id: Domain
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Domain
  nameWithType: Roles.Domain
  fullName: System.Web.Security.Roles.Domain
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene il valore del dominio del cookie dei nomi di ruoli."
  remarks: "Il valore della proprietà dominio è impostato nella configurazione per un&quot;applicazione ASP.NET utilizzando il `domain` attributo dell&quot;elemento di configurazione.       Se viene specificato alcun valore nella configurazione per l&quot;attributo di dominio, la proprietà Domain restituisce `null` e il dominio del cookie dei nomi di ruoli predefinito per il comportamento del <xref:System.Web.HttpCookie><xref:System.Web.HttpCookie.Domain%2A>proprietà.</xref:System.Web.HttpCookie.Domain%2A></xref:System.Web.HttpCookie>"
  syntax:
    content: public static string Domain { get; }
    return:
      type: System.String
      description: "Il <xref:System.Web.HttpCookie.Domain*>del cookie dei nomi di ruolo.</xref:System.Web.HttpCookie.Domain*>"
  overload: System.Web.Security.Roles.Domain*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.Enabled
  id: Enabled
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: System.Web.Security.Roles.Enabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene o imposta un valore che indica se la gestione dei ruoli è abilitata per l&quot;applicazione Web corrente."
  remarks: ''
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `enabled` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se è abilitata la gestione dei ruoli. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: FindUsersInRole(String,String)
  nameWithType: Roles.FindUsersInRole(String,String)
  fullName: System.Web.Security.Roles.FindUsersInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un elenco di utenti in un ruolo specificato in cui il nome utente contiene il nome utente specificato per la corrispondenza."
  remarks: "FindUsersInRole restituisce un elenco di utenti in un ruolo in cui il nome utente contiene una corrispondenza dell&quot;oggetto fornito `usernameToMatch` per l&quot;applicazione configurata `applicationName`. Ad esempio, se il `usernameToMatch` parametro è impostato su &quot;user&quot;, quindi gli utenti &quot;user1&quot;, &quot;user2&quot;, &quot;utente3&quot; e così via vengono restituiti. Gli utenti vengono restituiti in ordine alfabetico per nome utente.       Il <xref:System.Web.Security.SqlRoleProvider>esegue la ricerca utilizzando una clausola LIKE contro il `usernameToMatch` parametro.</xref:System.Web.Security.SqlRoleProvider> Tutti i caratteri jolly supportati da SQL Server in, ad esempio possibile utilizzare le clausole nel `usernameToMatch` valore del parametro."
  example:
  - "The following code example uses the FindUsersInRole method to display role membership based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.Roles#11](~/add/codesnippet/csharp/m-system.web.security.ro_16_1.aspx)]\n [!code-vb[System.Web.Security.Roles#11](~/add/codesnippet/visualbasic/m-system.web.security.ro_16_1.aspx)]"
  syntax:
    content: public static string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: "Il ruolo di eseguire la ricerca."
    - id: usernameToMatch
      type: System.String
      description: "Il nome utente per la ricerca."
    return:
      type: System.String[]
      description: "Matrice di stringhe contenente i nomi di tutti gli utenti il cui nome utente corrisponde <code> usernameToMatch </code> e che sono membri del ruolo specificato."
  overload: System.Web.Security.Roles.FindUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic).       -or-       <code>usernameToMatch</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota o contiene una virgola (,).       - oppure - <code>usernameToMatch</code> è una stringa vuota."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetAllRoles
  id: GetAllRoles
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: System.Web.Security.Roles.GetAllRoles()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un elenco di tutti i ruoli per l&quot;applicazione."
  remarks: "Le chiamate al metodo GetAllRoles il <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName>metodo del provider di ruoli predefinito per ottenere un elenco di tutti i ruoli dall&quot;origine dati per un&quot;applicazione.</xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName> Solo i ruoli per l&quot;applicazione che è incluso il <xref:System.Web.Security.Roles.ApplicationName%2A>proprietà vengono recuperate.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the GetAllRoles method to get the list of roles for an application and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_18_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_18_1.aspx)]"
  syntax:
    content: public static string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: "Matrice di stringhe contenente i nomi di tutti i ruoli memorizzati nell&quot;origine dati per l&quot;applicazione."
  overload: System.Web.Security.Roles.GetAllRoles*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetRolesForUser
  id: GetRolesForUser
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: System.Web.Security.Roles.GetRolesForUser()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un elenco dei ruoli di cui l&quot;utente attualmente connesso."
  remarks: "Il metodo GetRolesForUser chiama il <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName>metodo del provider di ruoli predefinito per recuperare dall&quot;origine dati, i ruoli di cui l&quot;utente attualmente connesso viene.</xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> L&quot;utente attualmente connesso è identificato dal <xref:System.Web.HttpContext.User%2A?displayProperty=fullName>proprietà dell&quot;oggetto corrente <xref:System.Web.HttpContext?displayProperty=fullName>, o da <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>gli ambienti di hosting non HTTP.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.Web.HttpContext?displayProperty=fullName> </xref:System.Web.HttpContext.User%2A?displayProperty=fullName> Se nessun utente è connesso, verrà generata un&quot;eccezione. Solo i ruoli per l&quot;applicazione che è incluso il <xref:System.Web.Security.Roles.ApplicationName%2A>proprietà vengono recuperate.</xref:System.Web.Security.Roles.ApplicationName%2A>       Se <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>è `true`, quindi i risultati del metodo GetRolesForUser possono essere restituiti dalla cache dei ruoli, anziché il provider di ruoli specificato.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example uses the GetRolesForUser method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_14_1.aspx)]\n [!code-cs[System.Web.Security.Roles#4](~/add/codesnippet/csharp/m-system.web.security.ro_14_1.aspx)]"
  syntax:
    content: public static string[] GetRolesForUser ();
    parameters: []
    return:
      type: System.String[]
      description: "Matrice di stringhe contenente i nomi di tutti i ruoli che l&quot;utente attualmente connesso."
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Nessun utente connesso corrente è."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: System.Web.Security.Roles.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un elenco dei ruoli di cui un utente."
  remarks: "Il metodo GetRolesForUser chiama il <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName>metodo del provider di ruoli predefinito per recuperare dall&quot;origine dati, i ruoli di cui l&quot;utente viene.</xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> Solo i ruoli per l&quot;applicazione che è incluso il <xref:System.Web.Security.Roles.ApplicationName%2A>proprietà vengono recuperate.</xref:System.Web.Security.Roles.ApplicationName%2A>       Se `username` è uguale all&quot;utente corrente connesso e <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>è `true`, memorizzare nella cache i risultati del GetRolesForUser metodo può essere restituito dal ruolo anziché specificata <xref:System.Web.Security.Roles.Provider%2A>.</xref:System.Web.Security.Roles.Provider%2A> </xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_15_1.aspx)]\n [!code-cs[System.Web.Security.Roles#4](~/add/codesnippet/csharp/m-system.web.security.ro_15_1.aspx)]"
  syntax:
    content: public static string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: "L&quot;utente per restituire un elenco di ruoli."
    return:
      type: System.String[]
      description: "Matrice di stringhe contenente i nomi di tutti i ruoli che l&quot;utente specificato."
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>username</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>username</code>contiene una virgola (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: System.Web.Security.Roles.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un elenco di utenti nel ruolo specificato."
  remarks: "Le chiamate al metodo GetUsersInRole il <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A>metodo del provider di ruoli predefinito per recuperare i nomi utente associati a un ruolo dall&quot;origine dati.</xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> Solo i ruoli per l&quot;applicazione che è incluso il <xref:System.Web.Security.Roles.ApplicationName%2A>proprietà vengono recuperate.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the GetUsersInRole method to get a list of the users in a particular role and binds the results to a <xref:System.Web.UI.WebControls.GridView> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_10_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_10_1.aspx)]"
  syntax:
    content: public static string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Il ruolo per ottenere l&quot;elenco di utenti."
    return:
      type: System.String[]
      description: "Matrice di stringhe contenente i nomi di tutti gli utenti che sono membri del ruolo specificato."
  overload: System.Web.Security.Roles.GetUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota o contiene una virgola (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  id: IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: System.Web.Security.Roles.IsUserInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un valore che indica se l&quot;utente attualmente connesso è nel ruolo specificato. L&quot;API solo deve essere chiamato all&quot;interno del contesto di un thread di richiesta ASP.NET e in tale caso d&quot;uso sanzionato è thread-safe."
  remarks: "Le chiamate al metodo IsUserInRole il <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName>metodo del provider per determinare se l&quot;utente attualmente connesso è associato a un ruolo dall&quot;origine dati per l&quot;applicazione specificata nel ruolo predefinito di <xref:System.Web.Security.Roles.ApplicationName%2A>proprietà.</xref:System.Web.Security.Roles.ApplicationName%2A> </xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName> L&quot;utente attualmente connesso è identificato dal <xref:System.Web.HttpContext.User%2A?displayProperty=fullName>proprietà dell&quot;oggetto corrente <xref:System.Web.HttpContext?displayProperty=fullName>, o da <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>gli ambienti di hosting non HTTP.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.Web.HttpContext?displayProperty=fullName> </xref:System.Web.HttpContext.User%2A?displayProperty=fullName> Se nessun utente è connesso, verrà generata un&quot;eccezione. Solo i ruoli per l&quot;applicazione che è incluso il <xref:System.Web.Security.Roles.ApplicationName%2A>proprietà vengono recuperate.</xref:System.Web.Security.Roles.ApplicationName%2A>       Se <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>è `true`, quindi `roleName` può essere confrontato con la cache ruoli anziché il provider di ruoli specificato.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example programmatically checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.ro_2_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_2_1.aspx)]"
  syntax:
    content: public static bool IsUserInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Il nome del ruolo da cercare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;utente attualmente connesso è nel ruolo specificato. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - nessun utente è connesso corrente."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota o contiene una virgola (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: Roles.IsUserInRole(String,String)
  fullName: System.Web.Security.Roles.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un valore che indica se l&quot;utente specificato appartiene al ruolo specificato. L&quot;API solo deve essere chiamato all&quot;interno del contesto di un thread di richiesta ASP.NET e in tale caso d&quot;uso sanzionato è thread-safe."
  remarks: "Le chiamate al metodo IsUserInRole il <xref:System.Web.Security.RoleProvider.IsUserInRole%2A>metodo del provider per determinare se un nome utente è associato a un ruolo dall&quot;origine dati per l&quot;applicazione specificata nel ruolo predefinito di <xref:System.Web.Security.Roles.ApplicationName%2A>proprietà.</xref:System.Web.Security.Roles.ApplicationName%2A> </xref:System.Web.Security.RoleProvider.IsUserInRole%2A>       Se `username` è uguale all&quot;utente corrente connesso e <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>valore della proprietà è `true`, `roleName` potrebbe essere verificato rispetto alla cache dei ruoli anziché specificata <xref:System.Web.Security.Roles.Provider%2A>.</xref:System.Web.Security.Roles.Provider%2A> </xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example programmatically checks whether a user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.ro_11_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_11_1.aspx)]"
  syntax:
    content: public static bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "Il nome dell&quot;utente da cercare."
    - id: roleName
      type: System.String
      description: "Il nome del ruolo da cercare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;utente specificato è nel ruolo specificato. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota o contiene una virgola (,).       - oppure - <code>username</code> contiene una virgola (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.MaxCachedResults
  id: MaxCachedResults
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: System.Web.Security.Roles.MaxCachedResults
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene il numero massimo di nomi di ruoli da memorizzare nella cache per un utente."
  remarks: "La proprietà MaxCachedResults viene impostata utilizzando il `maxCachedResults` attributo di configurazione. Il valore di `maxCachedResults` attributo di configurazione deve essere impostato su un valore intero maggiore di zero."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `maxCachedResults` attribute to 10.  \n  \n```  \n<roleManager  \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\"   \n  maxCachedResults=\"10\" />  \n```"
  syntax:
    content: public static int MaxCachedResults { get; }
    return:
      type: System.Int32
      description: "Il numero massimo di nomi di ruoli da memorizzare nella cache per un utente. Il valore predefinito è 25."
  overload: System.Web.Security.Roles.MaxCachedResults*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.Provider
  id: Provider
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Provider
  nameWithType: Roles.Provider
  fullName: System.Web.Security.Roles.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene il provider di ruoli predefinito per l&quot;applicazione."
  remarks: "La proprietà del Provider consente di fare riferimento direttamente a provider di ruoli predefinito per un&quot;applicazione. Viene in genere utilizzato per accedere ai membri personalizzati del provider di ruoli che non fanno parte della <xref:System.Web.Security.RoleProvider>classe astratta.</xref:System.Web.Security.RoleProvider>       Ad esempio, la <xref:System.Web.Security.WindowsTokenRoleProvider>classe include un overload del <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>metodo che consente di determinare se un utente è un ruolo di Windows comuni tramite un <xref:System.Security.Principal.WindowsBuiltInRole>valore di enumerazione.</xref:System.Security.Principal.WindowsBuiltInRole> </xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> </xref:System.Web.Security.WindowsTokenRoleProvider> Un riferimento alla <xref:System.Web.Security.WindowsTokenRoleProvider>classe per un&quot;applicazione, è possibile ottenere utilizzando la proprietà del Provider e può essere eseguito il cast come un <xref:System.Web.Security.WindowsTokenRoleProvider>per fare riferimento al <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>rapporto di overload.</xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> </xref:System.Web.Security.WindowsTokenRoleProvider> </xref:System.Web.Security.WindowsTokenRoleProvider>       Se più provider di ruoli sono configurati per un&quot;applicazione, è possibile accedere a provider di ruoli diversi utilizzando il <xref:System.Web.Security.Roles.Providers%2A>insieme.</xref:System.Web.Security.Roles.Providers%2A>"
  example:
  - "The following code example casts the default role provider as a <xref:System.Web.Security.WindowsTokenRoleProvider> and checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.WindowsTokenRoleProvider>.  \n  \n [!code-cs[System.Web.Security.WindowsTokenRoleProvider#2](~/add/codesnippet/csharp/p-system.web.security.ro_0_1.aspx)]\n [!code-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/add/codesnippet/visualbasic/p-system.web.security.ro_0_1.aspx)]"
  syntax:
    content: public static System.Web.Security.RoleProvider Provider { get; }
    return:
      type: System.Web.Security.RoleProvider
      description: "Il provider di ruoli predefinito per l&quot;applicazione, che viene esposto come una classe che eredita la <xref:System.Web.Security.RoleProvider>classe astratta.</xref:System.Web.Security.RoleProvider>"
  overload: System.Web.Security.Roles.Provider*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.Providers
  id: Providers
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Providers
  nameWithType: Roles.Providers
  fullName: System.Web.Security.Roles.Providers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene una raccolta di provider di ruoli per l&quot;applicazione ASP.NET."
  remarks: "La proprietà provider fa riferimento a tutti i provider di ruoli abilitati per un&quot;applicazione, inclusi quelli aggiunti nel file Web. config. È possibile controllare il ruolo di cui sono disponibili provider per un&quot;applicazione utilizzando il `providers` elemento della sezione nel file Web. config dell&quot;applicazione.       Nell&quot;esempio seguente viene illustrata una sezione che consente di rimuovere eventuali provider esistenti (ad esempio quelli specificati nel file Machine. config) e aggiunge un <xref:System.Web.Security.SqlRoleProvider>istanza come provider di ruoli per l&quot;applicazione.</xref:System.Web.Security.SqlRoleProvider>      ```   <configuration>     <connectionStrings>       <add name=&quot;SqlServices&quot; connectionString=&quot;Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;&quot; />     </connectionStrings>        <system.web>       <roleManager defaultProvider=&quot;SqlProvider&quot;          enabled=&quot;true&quot;         cacheRolesInCookie=&quot;true&quot;         cookieName=&quot;.ASPROLES&quot;         cookieTimeout=&quot;30&quot;         cookiePath=&quot;/&quot;         cookieRequireSSL=&quot;false&quot;         cookieSlidingExpiration=&quot;true&quot;         cookieProtection=&quot;Encrypted&quot;>            <providers>           <clear/>           <add             name=&quot;SqlProvider&quot;             type=&quot;System.Web.Security.SqlRoleProvider&quot;             connectionStringName=&quot;SqlServices&quot;             applicationName=&quot;MyApplication&quot; />            </providers>          </roleManager>     </system.web>   </configuration>   ```È possibile ottenere un riferimento fortemente tipizzato a un provider dalla raccolta di provider per l&quot;indicizzazione in base al nome del provider di ruoli e viene eseguito il cast al tipo desiderato.       È possibile ottenere un riferimento per il provider predefinito per un&quot;applicazione utilizzando il <xref:System.Web.Security.Roles.Provider%2A>proprietà.</xref:System.Web.Security.Roles.Provider%2A>"
  example:
  - "The following code example lists the providers enabled for an application and their respective types.  \n  \n [!code-cs[System.Web.Security.Roles#7](~/add/codesnippet/csharp/p-system.web.security.ro_4_1.aspx)]\n [!code-vb[System.Web.Security.Roles#7](~/add/codesnippet/visualbasic/p-system.web.security.ro_4_1.aspx)]"
  syntax:
    content: public static System.Web.Security.RoleProviderCollection Providers { get; }
    return:
      type: System.Web.Security.RoleProviderCollection
      description: "Oggetto <xref href=&quot;System.Web.Security.RoleProviderCollection&quot;> </xref> che contiene il provider di ruoli configurati per l&quot;applicazione ASP.NET."
  overload: System.Web.Security.Roles.Providers*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  id: RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRole(String,String)
  nameWithType: Roles.RemoveUserFromRole(String,String)
  fullName: System.Web.Security.Roles.RemoveUserFromRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Rimuove l&quot;utente specificato dal ruolo specificato."
  remarks: "Il metodo RemoveUserFromRole chiama il provider di ruoli predefinito per rimuovere l&quot;utente specificato dal ruolo specificato nell&quot;origine dati."
  example:
  - "The following code example removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_5_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_5_1.aspx)]"
  syntax:
    content: public static void RemoveUserFromRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "L&quot;utente da rimuovere dal ruolo specificato."
    - id: roleName
      type: System.String
      description: "Il ruolo da cui rimuovere l&quot;utente specificato."
  overload: System.Web.Security.Roles.RemoveUserFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota o contiene una virgola (,) <code>username</code> è una stringa vuota o contiene una virgola (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  id: RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRoles(String,String[])
  nameWithType: Roles.RemoveUserFromRoles(String,String[])
  fullName: System.Web.Security.Roles.RemoveUserFromRoles(String,String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Rimuove l&quot;utente specificato dai ruoli specificati."
  remarks: "Il metodo RemoveUserFromRoles chiama il provider di ruoli predefinito per rimuovere l&quot;utente specificato dai ruoli specificati nell&quot;origine dati.       Se l&quot;applicazione è configurata per utilizzare il <xref:System.Web.Security.SqlRoleProvider>(classe), gli aggiornamenti di database che vengono eseguiti durante la chiamata al metodo RemoveUserFromRoles vengono eseguiti all&quot;interno di una transazione.</xref:System.Web.Security.SqlRoleProvider> Se si verifica un errore, ad esempio un nome utente che non è un ruolo specificato, viene eseguito il rollback della transazione e viene eseguito alcun aggiornamento."
  example:
  - "The following code example uses the RemoveUserFromRoles method to remove a user from one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#10](~/add/codesnippet/visualbasic/m-system.web.security.ro_17_1.aspx)]\n [!code-cs[System.Web.Security.Roles#10](~/add/codesnippet/csharp/m-system.web.security.ro_17_1.aspx)]"
  syntax:
    content: public static void RemoveUserFromRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: "L&quot;utente da rimuovere dai ruoli specificati."
    - id: roleNames
      type: System.String[]
      description: "Matrice di stringhe di nomi di ruoli da cui rimuovere l&quot;utente specificato."
  overload: System.Web.Security.Roles.RemoveUserFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Uno dei ruoli in <code> roleNames </code> è una stringa vuota o contiene una virgola (,).       - oppure - <code> username </code> è una stringa vuota o contiene una virgola (,).       - oppure - <code> roleNames </code> contiene un elemento duplicato."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  id: RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRole(String[],String)
  nameWithType: Roles.RemoveUsersFromRole(String[],String)
  fullName: System.Web.Security.Roles.RemoveUsersFromRole(String[],String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Rimuove gli utenti specificati dal ruolo specificato."
  remarks: "Il metodo RemoveUsersFromRole chiama il provider di ruoli predefinito per rimuovere gli utenti specificati dal ruolo specificato nell&quot;origine dati.       Se l&quot;applicazione utilizza la <xref:System.Web.Security.SqlRoleProvider>classe, gli aggiornamenti di database che vengono eseguiti durante la chiamata al <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>metodo vengono effettuati all&quot;interno di una transazione.</xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Se si verifica un errore, ad esempio un nome utente che non è un ruolo specificato, viene eseguito il rollback della transazione e viene eseguito alcun aggiornamento."
  example:
  - "The following code example uses the RemoveUsersFromRole method to remove one or more users from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#9](~/add/codesnippet/csharp/m-system.web.security.ro_13_1.aspx)]\n [!code-vb[System.Web.Security.Roles#9](~/add/codesnippet/visualbasic/m-system.web.security.ro_13_1.aspx)]"
  syntax:
    content: public static void RemoveUsersFromRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Matrice di stringhe di nomi utente da rimuovere dai ruoli specificati."
    - id: roleName
      type: System.String
      description: "Il nome del ruolo da cui rimuovere gli utenti specificati."
  overload: System.Web.Security.Roles.RemoveUsersFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - uno dell&quot;utente nomi in <code>usernames</code> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota o contiene una virgola (,).       - oppure - uno dell&quot;utente nomi in <code>usernames</code> è una stringa vuota o contiene una virgola (,).       - oppure - <code>usernames</code> contiene un elemento duplicato."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.Roles.RemoveUsersFromRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Rimuove i nomi utente specificati dai ruoli specificati."
  remarks: "Il metodo RemoveUsersFromRoles chiama il provider di ruoli predefinito per rimuovere gli utenti specificati dai ruoli specificati nell&quot;origine dati.       Se l&quot;applicazione utilizza la <xref:System.Web.Security.SqlRoleProvider>classe, gli aggiornamenti di database che vengono eseguiti durante la chiamata al <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>metodo vengono effettuati all&quot;interno di una transazione.</xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Se si verifica un errore, ad esempio un nome utente che non è un ruolo specificato, viene eseguito il rollback della transazione e viene eseguito alcun aggiornamento."
  example:
  - "The following code example uses the RemoveUsersFromRoles method to remove one or more users from one or more roles based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#8](~/add/codesnippet/csharp/6dafcb6b-2398-4825-9291-_1.aspx)]\n [!code-vb[System.Web.Security.Roles#8](~/add/codesnippet/visualbasic/6dafcb6b-2398-4825-9291-_1.aspx)]"
  syntax:
    content: public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Matrice di stringhe di nomi utente da rimuovere dai ruoli specificati."
    - id: roleNames
      type: System.String[]
      description: "Matrice di stringhe di nomi di ruoli per rimuovere gli utenti specificati."
  overload: System.Web.Security.Roles.RemoveUsersFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Uno dei ruoli specificati in <code> roleNames </code> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.       Un utente specificato in - oppure - <code> usernames </code> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Uno dei ruoli specificati in <code> roleNames </code> è una stringa vuota o contiene una virgola (,).       Un utente specificato in - oppure - <code> usernames </code> è una stringa vuota o contiene una virgola (,).       - oppure - <code> roleNames </code> contiene un elemento duplicato.       - oppure - <code> usernames </code> contiene un elemento duplicato."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
- uid: System.Web.Security.Roles.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: System.Web.Security.Roles.RoleExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Ottiene un valore che indica se il nome del ruolo specificato esiste già nell&quot;origine dati del ruolo."
  remarks: "Le chiamate al metodo RoleExists il `RoleExists` metodo del provider di ruoli predefinito per determinare se un nome di ruolo esiste nell&quot;origine dati per l&quot;applicazione è incluso il <xref:System.Web.Security.Roles.ApplicationName%2A>proprietà.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the RoleExists method to determine whether a role name already exists before creating the role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_4_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_4_1.aspx)]"
  syntax:
    content: public static bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Il nome del ruolo da cercare nell&quot;origine dati."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il nome del ruolo esiste già nell&quot;origine dati; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.RoleExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>è una stringa vuota o contiene una virgola (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Gestione dei ruoli non è abilitata."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole(String[],String)
  nameWithType: Roles.AddUsersToRole(String[],String)
  fullName: System.Web.Security.Roles.AddUsersToRole(String[],String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles(String[],String[])
  nameWithType: Roles.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.Roles.AddUsersToRoles(String[],String[])
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole(String,String)
  nameWithType: Roles.AddUserToRole(String,String)
  fullName: System.Web.Security.Roles.AddUserToRole(String,String)
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles(String,String[])
  nameWithType: Roles.AddUserToRoles(String,String[])
  fullName: System.Web.Security.Roles.AddUserToRoles(String,String[])
- uid: System.Web.Security.Roles.ApplicationName
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: System.Web.Security.Roles.ApplicationName
- uid: System.Web.Security.Roles.CacheRolesInCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: System.Web.Security.Roles.CacheRolesInCookie
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Security.Roles.CookieName
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: System.Web.Security.Roles.CookieName
- uid: System.Web.Security.Roles.CookiePath
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: System.Web.Security.Roles.CookiePath
- uid: System.Web.Security.Roles.CookieProtectionValue
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: System.Web.Security.Roles.CookieProtectionValue
- uid: System.Web.Security.CookieProtection
  parent: System.Web.Security
  isExternal: false
  name: CookieProtection
  nameWithType: CookieProtection
  fullName: System.Web.Security.CookieProtection
- uid: System.Web.Security.Roles.CookieRequireSSL
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: System.Web.Security.Roles.CookieRequireSSL
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: System.Web.Security.Roles.CookieSlidingExpiration
- uid: System.Web.Security.Roles.CookieTimeout
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: System.Web.Security.Roles.CookieTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Security.Roles.CreatePersistentCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: System.Web.Security.Roles.CreatePersistentCookie
- uid: System.Web.Security.Roles.CreateRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: System.Web.Security.Roles.CreateRole(String)
- uid: System.Web.Security.Roles.DeleteCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: System.Web.Security.Roles.DeleteCookie()
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: System.Web.Security.Roles.DeleteRole(String)
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String,Boolean)
  nameWithType: Roles.DeleteRole(String,Boolean)
  fullName: System.Web.Security.Roles.DeleteRole(String,Boolean)
- uid: System.Web.Security.Roles.Domain
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
  fullName: System.Web.Security.Roles.Domain
- uid: System.Web.Security.Roles.Enabled
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: System.Web.Security.Roles.Enabled
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole(String,String)
  nameWithType: Roles.FindUsersInRole(String,String)
  fullName: System.Web.Security.Roles.FindUsersInRole(String,String)
- uid: System.Web.Security.Roles.GetAllRoles
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: System.Web.Security.Roles.GetAllRoles()
- uid: System.Web.Security.Roles.GetRolesForUser
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: System.Web.Security.Roles.GetRolesForUser()
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: System.Web.Security.Roles.GetRolesForUser(String)
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: System.Web.Security.Roles.GetUsersInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: System.Web.Security.Roles.IsUserInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: Roles.IsUserInRole(String,String)
  fullName: System.Web.Security.Roles.IsUserInRole(String,String)
- uid: System.Web.Security.Roles.MaxCachedResults
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: System.Web.Security.Roles.MaxCachedResults
- uid: System.Web.Security.Roles.Provider
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
  fullName: System.Web.Security.Roles.Provider
- uid: System.Web.Security.RoleProvider
  parent: System.Web.Security
  isExternal: true
  name: RoleProvider
  nameWithType: RoleProvider
  fullName: System.Web.Security.RoleProvider
- uid: System.Web.Security.Roles.Providers
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
  fullName: System.Web.Security.Roles.Providers
- uid: System.Web.Security.RoleProviderCollection
  parent: System.Web.Security
  isExternal: false
  name: RoleProviderCollection
  nameWithType: RoleProviderCollection
  fullName: System.Web.Security.RoleProviderCollection
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole(String,String)
  nameWithType: Roles.RemoveUserFromRole(String,String)
  fullName: System.Web.Security.Roles.RemoveUserFromRole(String,String)
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles(String,String[])
  nameWithType: Roles.RemoveUserFromRoles(String,String[])
  fullName: System.Web.Security.Roles.RemoveUserFromRoles(String,String[])
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole(String[],String)
  nameWithType: Roles.RemoveUsersFromRole(String[],String)
  fullName: System.Web.Security.Roles.RemoveUsersFromRole(String[],String)
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.Roles.RemoveUsersFromRoles(String[],String[])
- uid: System.Web.Security.Roles.RoleExists(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: System.Web.Security.Roles.RoleExists(String)
- uid: System.Web.Security.Roles.AddUsersToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole
  nameWithType: Roles.AddUsersToRole
- uid: System.Web.Security.Roles.AddUsersToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles
  nameWithType: Roles.AddUsersToRoles
- uid: System.Web.Security.Roles.AddUserToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole
  nameWithType: Roles.AddUserToRole
- uid: System.Web.Security.Roles.AddUserToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles
  nameWithType: Roles.AddUserToRoles
- uid: System.Web.Security.Roles.ApplicationName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
- uid: System.Web.Security.Roles.CacheRolesInCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
- uid: System.Web.Security.Roles.CookieName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
- uid: System.Web.Security.Roles.CookiePath*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
- uid: System.Web.Security.Roles.CookieProtectionValue*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
- uid: System.Web.Security.Roles.CookieRequireSSL*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
- uid: System.Web.Security.Roles.CookieSlidingExpiration*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
- uid: System.Web.Security.Roles.CookieTimeout*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
- uid: System.Web.Security.Roles.CreatePersistentCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
- uid: System.Web.Security.Roles.CreateRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole
  nameWithType: Roles.CreateRole
- uid: System.Web.Security.Roles.DeleteCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie
  nameWithType: Roles.DeleteCookie
- uid: System.Web.Security.Roles.DeleteRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole
  nameWithType: Roles.DeleteRole
- uid: System.Web.Security.Roles.Domain*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
- uid: System.Web.Security.Roles.Enabled*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
- uid: System.Web.Security.Roles.FindUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole
  nameWithType: Roles.FindUsersInRole
- uid: System.Web.Security.Roles.GetAllRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles
  nameWithType: Roles.GetAllRoles
- uid: System.Web.Security.Roles.GetRolesForUser*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser
  nameWithType: Roles.GetRolesForUser
- uid: System.Web.Security.Roles.GetUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole
  nameWithType: Roles.GetUsersInRole
- uid: System.Web.Security.Roles.IsUserInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole
  nameWithType: Roles.IsUserInRole
- uid: System.Web.Security.Roles.MaxCachedResults*
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
- uid: System.Web.Security.Roles.Provider*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
- uid: System.Web.Security.Roles.Providers*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
- uid: System.Web.Security.Roles.RemoveUserFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole
  nameWithType: Roles.RemoveUserFromRole
- uid: System.Web.Security.Roles.RemoveUserFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles
  nameWithType: Roles.RemoveUserFromRoles
- uid: System.Web.Security.Roles.RemoveUsersFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole
  nameWithType: Roles.RemoveUsersFromRole
- uid: System.Web.Security.Roles.RemoveUsersFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: Roles.RemoveUsersFromRoles
- uid: System.Web.Security.Roles.RoleExists*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists
  nameWithType: Roles.RoleExists
