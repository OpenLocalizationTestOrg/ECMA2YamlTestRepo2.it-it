### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.IServiceBehavior
  id: IServiceBehavior
  children:
  - System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  - System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  - System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  langs:
  - csharp
  name: IServiceBehavior
  nameWithType: IServiceBehavior
  fullName: System.ServiceModel.Description.IServiceBehavior
  type: Interface
  summary: "Fornisce un meccanismo per modificare o inserire estensioni personalizzate all&quot;interno di un servizio, inclusi il <xref href=&quot;System.ServiceModel.ServiceHostBase&quot;> </xref>."
  remarks: "Implementare IServiceBehavior per modificare, esaminare o estendere aspetti dell&quot;esecuzione a livello di servizio a livello di applicazione:-utilizzare il <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>metodo per modificare i valori delle proprietà in fase di esecuzione o inserire oggetti di estensione personalizzati, ad esempio gestori di errori, intercettatori di messaggi o parametri, estensioni di sicurezza e altri oggetti di estensione personalizzati.</xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>      -Utilizzare il <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>metodo per esaminare la descrizione prima [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] costruisce il servizio in esecuzione per confermare che possono essere eseguite correttamente.</xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>      -Utilizzare il <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>metodo per passare a un elemento di associazione le informazioni personalizzate per il servizio in modo che possa supportare il servizio correttamente.</xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>       Oggetti IServiceBehavior consentono di utilizzare uno di questi metodi, ma spesso solo uno è importante. In questi casi i metodi non utilizzati restituiscano un valore.      > [!NOTE] > Passare tutti i metodi di IServiceBehavior <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>e <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>oggetti come parametri.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> Il <xref:System.ServiceModel.Description.ServiceDescription>parametro per l&quot;analisi solo, se questi oggetti vengono modificati non è definito il comportamento di esecuzione.</xref:System.ServiceModel.Description.ServiceDescription>       Per eseguire l&quot;attività di personalizzazione a cui è destinato, è necessario aggiungere l&quot;oggetto IServiceBehavior per il <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>proprietà prima della costruzione del runtime del servizio.</xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> Esistono tre modi per eseguire questa operazione:: a livello di codice aggiungere il comportamento del servizio personalizzata per il <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>proprietà precedente al punto in cui il <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName>metodo viene chiamato sul <xref:System.ServiceModel.ServiceHost?displayProperty=fullName>oggetto.</xref:System.ServiceModel.ServiceHost?displayProperty=fullName> </xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>      -Creare un attributo personalizzato che implementa IServiceBehavior e utilizzarlo per contrassegnare le classi del servizio da modificare. Quando un <xref:System.ServiceModel.ServiceHost>oggetto costruito [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] utilizza la reflection per individuare gli attributi del tipo di servizio.</xref:System.ServiceModel.ServiceHost> Se gli attributi implementano IServiceBehavior, vengono aggiunti alla raccolta di comportamenti <xref:System.ServiceModel.Description.ServiceDescription>.</xref:System.ServiceModel.Description.ServiceDescription>      -Consente di estendere il <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>classe per supportare la specifica del comportamento in un&quot;applicazione o un file di configurazione macchina.</xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName> Vedere la sezione di esempio per ulteriori informazioni.       Esempi di comportamenti del servizio in [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] includono il <xref:System.ServiceModel.ServiceBehaviorAttribute>attributo, il <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName>e <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName>comportamento.</xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following IServiceBehavior implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public interface IServiceBehavior
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  id: AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Offre la possibilità di passare dati personalizzati a elementi di associazione per supportare l&quot;implementazione del contratto."
  remarks: "Utilizzare il metodo AddBindingParameters per aggiungere oggetti dati personalizzati per il `parameters` raccolta di elementi di associazione consente di acquisire informazioni aggiuntive e abilitare il supporto del contratto.       Questo metodo viene chiamato una volta per ogni URI di ascolto. Ad esempio, se un servizio dispone di quattro endpoint e due di loro hanno lo stesso URI di ascolto, quindi questo metodo viene chiamato tre volte. Il motivo è che il `bindingParameters` ogni stack di canali di destinazione ed è presente uno stack del canale per ogni URI di ascolto. Poiché ogni chiamata riceve gli endpoint dell&quot;URI di ascolto, due chiamate ogni Ottiene un singolo <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>, e una chiamata ottiene una raccolta di due <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>oggetti.</xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>      > [!NOTE] > Tutte le <xref:System.ServiceModel.Description.IServiceBehavior>passano metodi <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>e <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>oggetti come parametri.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> Il <xref:System.ServiceModel.Description.ServiceDescription>parametro è per esaminare e inserire le personalizzazioni solo; se è in caso contrario modificare questi oggetti non è definito il comportamento di esecuzione.</xref:System.ServiceModel.Description.ServiceDescription>"
  syntax:
    content: public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "Descrizione del servizio del servizio."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "L&quot;host del servizio."
    - id: endpoints
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
      description: "Gli endpoint del servizio."
    - id: bindingParameters
      type: System.ServiceModel.Channels.BindingParameterCollection
      description: "Oggetti personalizzati ai cui elementi hanno accesso associazione."
  overload: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Offre la possibilità di modificare i valori delle proprietà in fase di esecuzione o inserire oggetti di estensione personalizzati, ad esempio gestori di errori, intercettatori di messaggi o parametri, estensioni di sicurezza e altri oggetti di estensione personalizzati."
  remarks: "Implementare il metodo ApplyDispatchBehavior per controllare o modificare il <xref:System.ServiceModel.ServiceHostBase>oggetto in fase di costruzione per supportare uno scenario di esecuzione personalizzato.</xref:System.ServiceModel.ServiceHostBase>      > [!NOTE] > Tutte le <xref:System.ServiceModel.Description.IServiceBehavior>passano metodi <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>e <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>oggetti come parametri.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> Il <xref:System.ServiceModel.Description.ServiceDescription>parametro è per esaminare e inserire le personalizzazioni solo; se è in caso contrario modificare questi oggetti non è definito il comportamento di esecuzione.</xref:System.ServiceModel.Description.ServiceDescription>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "Descrizione del servizio."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "L&quot;host è in corso la generazione."
  overload: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Fornisce la possibilità di controllare l&quot;host del servizio e la descrizione del servizio per verificare che il servizio può essere eseguito correttamente."
  remarks: "Utilizzare il metodo di convalida per verificare se il servizio corrente può essere eseguito correttamente in base al proprio scenario.      > [!NOTE] > Tutte le <xref:System.ServiceModel.Description.IServiceBehavior>passano metodi <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>e <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>oggetti come parametri.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> Il <xref:System.ServiceModel.Description.ServiceDescription>parametro è per esaminare e inserire le personalizzazioni solo; se è in caso contrario modificare questi oggetti non è definito il comportamento di esecuzione.</xref:System.ServiceModel.Description.ServiceDescription>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "Descrizione del servizio."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "L&quot;host del servizio in fase di costruzione."
  overload: System.ServiceModel.Description.IServiceBehavior.Validate*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
- uid: System.ServiceModel.Description.ServiceDescription
  parent: System.ServiceModel.Description
  isExternal: false
  name: ServiceDescription
  nameWithType: ServiceDescription
  fullName: System.ServiceModel.Description.ServiceDescription
- uid: System.ServiceModel.ServiceHostBase
  parent: System.ServiceModel
  isExternal: false
  name: ServiceHostBase
  nameWithType: ServiceHostBase
  fullName: System.ServiceModel.ServiceHostBase
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ServiceEndpoint>
  nameWithType: Collection<ServiceEndpoint>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Description.ServiceEndpoint>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.ServiceEndpoint
    name: ServiceEndpoint
    nameWithType: ServiceEndpoint
    fullName: ServiceEndpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Channels.BindingParameterCollection
  parent: System.ServiceModel.Channels
  isExternal: true
  name: BindingParameterCollection
  nameWithType: BindingParameterCollection
  fullName: System.ServiceModel.Channels.BindingParameterCollection
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters
  nameWithType: IServiceBehavior.AddBindingParameters
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior
  nameWithType: IServiceBehavior.ApplyDispatchBehavior
- uid: System.ServiceModel.Description.IServiceBehavior.Validate*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate
  nameWithType: IServiceBehavior.Validate
