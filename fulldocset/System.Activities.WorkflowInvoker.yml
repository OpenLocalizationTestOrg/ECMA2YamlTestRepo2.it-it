### YamlMime:ManagedReference
items:
- uid: System.Activities.WorkflowInvoker
  id: WorkflowInvoker
  children:
  - System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.CancelAsync(System.Object)
  - System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)
  - System.Activities.WorkflowInvoker.Extensions
  - System.Activities.WorkflowInvoker.Invoke
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)
  - System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  - System.Activities.WorkflowInvoker.InvokeAsync
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Object)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  - System.Activities.WorkflowInvoker.InvokeCompleted
  langs:
  - csharp
  name: WorkflowInvoker
  nameWithType: WorkflowInvoker
  fullName: System.Activities.WorkflowInvoker
  type: Class
  summary: "Fornisce un mezzo per richiamare un flusso di lavoro come se fosse una chiamata al metodo."
  remarks: "WorkflowInvoker contiene l&quot;istanza che metodi statici per il richiamo in modo sincrono di flussi di lavoro e metodi di istanza per il richiamo di flussi di lavoro in modo asincrono.       WorkflowInvoker non consente il controllo dell&quot;istanza, ad esempio la persistenza, lo scaricamento o ripresa di segnalibri. Se si desidera il controllo dell&quot;istanza, utilizzare <xref:System.Activities.WorkflowApplication>invece.</xref:System.Activities.WorkflowApplication>       Per eseguire flussi di lavoro in modo sincrono con nessun controllo dell&quot;istanza, chiamare il <xref:System.Activities.WorkflowInvoker.Invoke%2A>metodo.</xref:System.Activities.WorkflowInvoker.Invoke%2A> Per eseguire un flusso di lavoro in modo asincrono con nessun controllo dell&quot;istanza, utilizzare il <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>e <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>coppie di metodi o <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>metodo.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> </xref:System.Activities.WorkflowInvoker.EndInvoke%2A> </xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>"
  example:
  - "The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using WorkflowInvoker.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#1](~/add/codesnippet/csharp/t-system.activities.work_6_1.cs)]"
  syntax:
    content: public sealed class WorkflowInvoker
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)
  id: '#ctor(System.Activities.Activity)'
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: WorkflowInvoker(Activity)
  nameWithType: WorkflowInvoker.WorkflowInvoker(Activity)
  fullName: System.Activities.WorkflowInvoker.WorkflowInvoker(Activity)
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> classe."
  remarks: "<xref:System.Activities.WorkflowInvoker>contiene l&quot;istanza che metodi statici per il richiamo in modo sincrono di flussi di lavoro e metodi di istanza per il richiamo di flussi di lavoro in modo asincrono.</xref:System.Activities.WorkflowInvoker>"
  example:
  - "The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#2](~/add/codesnippet/csharp/m-system.activities.work_18_1.cs)]"
  syntax:
    content: public WorkflowInvoker (System.Activities.Activity workflow);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "La definizione del flusso di lavoro di essere richiamato da questa istanza del flusso di lavoro di <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> classe."
  overload: System.Activities.WorkflowInvoker.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)
  id: BeginInvoke(System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo asincrono utilizzando l&quot;oggetto specificato <xref:System.AsyncCallback>e lo stato fornito dall&quot;utente.</xref:System.AsyncCallback>"
  remarks: "Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>dal `callback` metodo.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>viene chiamato prima che venga completato il flusso di lavoro, si blocca fino a quando non viene completato il flusso di lavoro.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Per configurare un intervallo di timeout, in cui è necessario completare il flusso di lavoro, usare uno degli <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>overload che accettano un <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il <xref:System.IAsyncResult>modello di struttura asincrono.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Cenni preliminari sulla programmazione asincrona](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/094aa761-fc5c-46bd-8404-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/094aa761-fc5c-46bd-8404-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "Il metodo da chiamare quando il flusso di lavoro è stata completata."
    - id: state
      type: System.Object
      description: "Oggetto facoltativo specifico dell&quot;applicazione che contiene informazioni sull&quot;operazione asincrona."
    return:
      type: System.IAsyncResult
      description: "Un riferimento a asincrona operazione invoke."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  id: BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo asincrono utilizzando l&quot;oggetto specificato &lt;xref:System.Collections.Generic.IDictionary%602&gt; dei parametri di input, <xref:System.AsyncCallback>e lo stato fornito dall&quot;utente.</xref:System.AsyncCallback>"
  remarks: "Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>dal `callback` metodo.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>viene chiamato prima che venga completato il flusso di lavoro, si blocca fino a quando non viene completato il flusso di lavoro.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A>  Per configurare un intervallo di timeout, in cui è necessario completare il flusso di lavoro, usare uno degli <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>overload che accettano un <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il <xref:System.IAsyncResult>modello di struttura asincrono.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Cenni preliminari sulla programmazione asincrona](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/f9621cfb-b09b-4086-8161-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/f9621cfb-b09b-4086-8161-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary<string,object> inputs, AsyncCallback callback, object state);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Il dizionario di parametri di input per il flusso di lavoro codificati dal nome dell&quot;argomento."
    - id: callback
      type: System.AsyncCallback
      description: "Il metodo da chiamare quando il flusso di lavoro è stata completata."
    - id: state
      type: System.Object
      description: "Oggetto facoltativo specifico dell&quot;applicazione che contiene informazioni sull&quot;operazione asincrona."
    return:
      type: System.IAsyncResult
      description: "Un riferimento a asincrona operazione invoke."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo asincrono usando l&quot;intervallo di timeout specificato, <xref:System.AsyncCallback>e lo stato fornito dall&quot;utente.</xref:System.AsyncCallback>"
  remarks: "Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>dal `callback` metodo.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>viene chiamato prima che venga completato il flusso di lavoro, si blocca fino a quando non viene completato il flusso di lavoro.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se il flusso di lavoro non viene completata entro l&quot;intervallo di timeout specificato il flusso di lavoro viene interrotto e un <xref:System.TimeoutException>viene generata quando il <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>metodo viene chiamato.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> </xref:System.TimeoutException>      > [!NOTE] > Il <xref:System.TimeoutException>viene generata solo se l&quot;intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l&quot;esecuzione.</xref:System.TimeoutException> Un flusso di lavoro che richiede più tempo rispetto all&quot;intervallo di timeout specificato viene completato correttamente se il flusso di lavoro non diventa inattivo.       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il <xref:System.IAsyncResult>modello di struttura asincrono.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Cenni preliminari sulla programmazione asincrona](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/40384351-3c07-4522-8c26-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/40384351-3c07-4522-8c26-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Intervallo in cui il flusso di lavoro deve essere completata prima che sia interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>"
    - id: callback
      type: System.AsyncCallback
      description: "Il metodo da chiamare quando il flusso di lavoro è stata completata."
    - id: state
      type: System.Object
      description: "Oggetto facoltativo specifico dell&quot;applicazione che contiene informazioni sull&quot;operazione asincrona."
    return:
      type: System.IAsyncResult
      description: "Un riferimento a asincrona operazione invoke."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo asincrono utilizzando l&quot;oggetto specificato &lt;xref:System.Collections.Generic.IDictionary%602&gt; dei parametri di input, intervallo di timeout, <xref:System.AsyncCallback>e lo stato fornito dall&quot;utente.</xref:System.AsyncCallback>"
  remarks: "Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>dal `callback` metodo.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>viene chiamato prima che venga completato il flusso di lavoro, si blocca fino a quando non viene completato il flusso di lavoro.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Se il flusso di lavoro non viene completata entro l&quot;intervallo di timeout specificato il flusso di lavoro viene interrotto e un <xref:System.TimeoutException>viene generata quando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>viene chiamato.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> </xref:System.TimeoutException>      > [!NOTE] > Il <xref:System.TimeoutException>viene generata solo se l&quot;intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l&quot;esecuzione.</xref:System.TimeoutException> Un flusso di lavoro che richiede più tempo rispetto all&quot;intervallo di timeout specificato viene completato correttamente se il flusso di lavoro non diventa inattivo.       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il <xref:System.IAsyncResult>modello di struttura asincrono.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Cenni preliminari sulla programmazione asincrona](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/335b9082-13de-46b1-b93d-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/335b9082-13de-46b1-b93d-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Il dizionario di parametri di input per il flusso di lavoro codificati dal nome dell&quot;argomento."
    - id: timeout
      type: System.TimeSpan
      description: "Intervallo in cui il flusso di lavoro deve essere completata prima che sia interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>"
    - id: callback
      type: System.AsyncCallback
      description: "Il metodo da chiamare quando il flusso di lavoro è stata completata."
    - id: state
      type: System.Object
      description: "Oggetto facoltativo specifico dell&quot;applicazione che contiene informazioni sull&quot;operazione asincrona."
    return:
      type: System.IAsyncResult
      description: "Un riferimento a asincrona operazione invoke."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.CancelAsync(System.Object)
  id: CancelAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: CancelAsync(Object)
  nameWithType: WorkflowInvoker.CancelAsync(Object)
  fullName: System.Activities.WorkflowInvoker.CancelAsync(Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Tenta di annullare il flusso di lavoro che è stato richiamato con l&quot;oggetto specificato <code> userState </code>."
  remarks: "Solo un flusso di lavoro richiamato da uno del <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>overload che accetta un `userState` parametro può essere annullato.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Se l&quot;annullamento ha esito positivo, il <xref:System.ComponentModel.Cancelled%2A>proprietà del <xref:System.Activities.InvokeCompletedEventArgs>passato al <xref:System.Activities.WorkflowInvoker.InvokeCompleted>gestore è impostato su `true`; in caso contrario, viene impostato su `false`.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> </xref:System.Activities.InvokeCompletedEventArgs> </xref:System.ComponentModel.Cancelled%2A>"
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. Once the workflow is invoked, the host attempts to cancel the workflow.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_1_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#34](~/add/codesnippet/csharp/m-system.activities.work_1_2.cs)]"
  syntax:
    content: public void CancelAsync (object userState);
    parameters:
    - id: userState
      type: System.Object
      description: "Il token per annullare il flusso di lavoro."
  overload: System.Activities.WorkflowInvoker.CancelAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: WorkflowInvoker.EndInvoke(IAsyncResult)
  fullName: System.Activities.WorkflowInvoker.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Restituisce i risultati di un flusso di lavoro richiamati utilizzando uno del <xref:System.Activities.WorkflowInvoker.BeginInvoke*>Overload.</xref:System.Activities.WorkflowInvoker.BeginInvoke*>"
  remarks: "Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare EndInvoke dal `callback` specificato da <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> (metodo) Se EndInvoke viene chiamato prima che venga completato il flusso di lavoro, si blocca fino a quando non viene completato il flusso di lavoro.       Questo metodo restituisce il risultato di un flusso di lavoro richiamato in modo asincrono utilizzando il <xref:System.IAsyncResult>modello di struttura asincrono.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Cenni preliminari sulla programmazione asincrona](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling EndInvoke. When the call to EndInvoke returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_22_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/m-system.activities.work_22_2.cs)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> EndInvoke (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Il <xref:System.IAsyncResult>che fa riferimento il <xref:System.Activities.WorkflowInvoker.BeginInvoke*>operazione che ha avviato il flusso di lavoro.</xref:System.Activities.WorkflowInvoker.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Un dizionario dell&quot;attività radice <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valori codificati da un argomento il nome che rappresentano gli output del flusso di lavoro."
  overload: System.Activities.WorkflowInvoker.EndInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Extensions
  id: Extensions
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Extensions
  nameWithType: WorkflowInvoker.Extensions
  fullName: System.Activities.WorkflowInvoker.Extensions
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Ottiene il &lt;xref:System.Collections.ObjectModel.Collection%601&gt; delle estensioni disponibili per i flussi di lavoro richiamati da un <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> istanza."
  remarks: "Questa proprietà viene utilizzata dagli autori dell&quot;host del flusso di lavoro per aggiungere estensioni all&quot; <xref:System.Activities.WorkflowInvoker>istanza in modo da renderle disponibili ai flussi di lavoro richiamati da tale</xref:System.Activities.WorkflowInvoker>"
  example:
  - "The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the Extensions collection of a <xref:System.Activities.WorkflowInvoker> instance. This code example is part of the [Custom Tracking](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#40](~/add/codesnippet/csharp/p-system.activities.work_13_1.cs)]"
  syntax:
    content: public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }
    return:
      type: System.Activities.Hosting.WorkflowInstanceExtensionManager
      description: "Il &lt;xref:System.Collections.ObjectModel.Collection%601&gt; delle estensioni disponibili per i flussi di lavoro richiamati da un <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> istanza."
  overload: System.Activities.WorkflowInvoker.Extensions*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke
  id: Invoke
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke()
  nameWithType: WorkflowInvoker.Invoke()
  fullName: System.Activities.WorkflowInvoker.Invoke()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo sincrono usando la definizione del flusso di lavoro passata al &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; costruttore."
  remarks: "Questo metodo si blocca fino a quando il flusso di lavoro è stata completata, incluso il tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Per configurare un intervallo di timeout, in cui è necessario completare il flusso di lavoro, usare uno degli <xref:System.Activities.WorkflowInvoker.Invoke%2A>overload che accettano un <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `DiceRoll` activity. The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name. The workflow is invoked twice, using the workflow definition passed into to the `WorkflowInvoker` constructor.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#130](~/add/codesnippet/csharp/m-system.activities.work_6_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#31](~/add/codesnippet/csharp/m-system.activities.work_6_2.cs)]  \n  \n If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#2](~/add/codesnippet/csharp/m-system.activities.work_6_3.cs)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke ();
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Un dizionario dell&quot;attività radice <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valori codificati da un argomento il nome che rappresentano gli output del flusso di lavoro."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)
  id: Invoke(System.Activities.Activity)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity)
  nameWithType: WorkflowInvoker.Invoke(Activity)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo sincrono usando la definizione di flusso di lavoro specificata."
  remarks: "Questo metodo si blocca fino a quando il flusso di lavoro è stata completata, incluso il tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Per configurare un intervallo di timeout, in cui è necessario completare il flusso di lavoro, usare uno degli <xref:System.Activities.WorkflowInvoker.Invoke%2A>overload che accettano un <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `DiceRoll` activity. The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#130](~/add/codesnippet/csharp/m-system.activities.work_4_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#30](~/add/codesnippet/csharp/m-system.activities.work_4_2.cs)]  \n  \n If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#1](~/add/codesnippet/csharp/m-system.activities.work_4_3.cs)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "La definizione del flusso di lavoro del flusso di lavoro da richiamare."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Un dizionario dell&quot;attività radice <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valori codificati da un argomento il nome che rappresentano gli output del flusso di lavoro."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama l&quot;attività passata per il &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; costruttore in modo sincrono con l&quot;oggetto specificato &lt;xref:System.Collections.Generic.IDictionary%602&gt; dei parametri di input."
  remarks: "Questo metodo si blocca fino a quando il flusso di lavoro è stata completata, incluso il tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Per configurare un intervallo di timeout, in cui è necessario completare il flusso di lavoro, usare uno degli <xref:System.Activities.WorkflowInvoker.Invoke%2A>overload che accettano un <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#120](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#22](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_2.cs)]  \n  \n If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>. In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#121](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_3.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#23](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_4.cs)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke (System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Il dizionario di parametri di input per il flusso di lavoro codificati dal nome dell&quot;argomento."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Un dizionario dell&quot;attività radice <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valori codificati da un argomento il nome che rappresentano gli output del flusso di lavoro."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)
  id: Invoke(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo sincrono con l&quot;intervallo di timeout specificato."
  remarks: "Questo metodo si blocca fino a quando il flusso di lavoro è stata completata, incluso il tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Se il flusso di lavoro non viene completata entro l&quot;intervallo di timeout specificato il flusso di lavoro viene interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>      > [!NOTE] > Il <xref:System.TimeoutException>viene generata solo se l&quot;intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l&quot;esecuzione.</xref:System.TimeoutException> Un flusso di lavoro che richiede più tempo rispetto all&quot;intervallo di timeout specificato viene completato correttamente se il flusso di lavoro non diventa inattivo."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.  \n  \n```Output  \nThe operation did not complete within the allotted timeout of 00:00:30.   \nThe time allotted to this operation may have been a portion of a longer timeout.  \n```  \n  \n [!code-cs[CFX_WorkflowInvokerExample#51](~/add/codesnippet/csharp/m-system.activities.work_12_1.cs)]  \n  \n For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Intervallo in cui il flusso di lavoro deve essere completata prima che sia interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Un dizionario dell&quot;attività radice <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valori codificati da un argomento il nome che rappresentano gli output del flusso di lavoro."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo sincrono usando la definizione di flusso di lavoro specificata e &lt;xref:System.Collections.Generic.IDictionary%602&gt; dei parametri di input."
  remarks: "Questo metodo si blocca fino a quando il flusso di lavoro è stata completata, incluso il tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Per configurare un intervallo di timeout, in cui è necessario completare il flusso di lavoro, usare uno degli <xref:System.Activities.WorkflowInvoker.Invoke%2A>overload che accettano un <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#120](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#20](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_2.cs)]  \n  \n If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>. In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#121](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_3.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#21](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_4.cs)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "La definizione del flusso di lavoro del flusso di lavoro da richiamare."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Il dizionario di parametri di input per il flusso di lavoro codificati dal nome dell&quot;argomento."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Un dizionario dell&quot;attività radice <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valori codificati da un argomento il nome che rappresentano gli output del flusso di lavoro."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)
  id: Invoke(System.Activities.Activity,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo sincrono usando la definizione di flusso di lavoro specificata e l&quot;intervallo di timeout."
  remarks: "Questo metodo si blocca fino a quando il flusso di lavoro è stata completata, incluso il tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Se il flusso di lavoro non viene completata entro l&quot;intervallo di timeout specificato il flusso di lavoro viene interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>      > [!NOTE] > Il <xref:System.TimeoutException>viene generata solo se l&quot;intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l&quot;esecuzione.</xref:System.TimeoutException> Un flusso di lavoro che richiede più tempo rispetto all&quot;intervallo di timeout specificato viene completato correttamente se il flusso di lavoro non diventa inattivo."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#50](~/add/codesnippet/csharp/c629ab8d-d5ad-4778-bfb5-_1.cs)]  \n  \n For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "La definizione del flusso di lavoro del flusso di lavoro da richiamare."
    - id: timeout
      type: System.TimeSpan
      description: "Intervallo in cui il flusso di lavoro deve essere completata prima che sia interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Un dizionario dell&quot;attività radice <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valori codificati da un argomento il nome che rappresentano gli output del flusso di lavoro."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama l&quot;attività passata per il &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; costruttore in modo sincrono con l&quot;oggetto specificato &lt;xref:System.Collections.Generic.IDictionary%602&gt; di parametri di input e l&quot;intervallo di timeout specificato."
  remarks: "Questo metodo si blocca fino a quando il flusso di lavoro è stata completata, incluso il tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Se il flusso di lavoro non viene completata entro l&quot;intervallo di timeout specificato il flusso di lavoro viene interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>      > [!NOTE] > Il <xref:System.TimeoutException>viene generata solo se l&quot;intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l&quot;esecuzione.</xref:System.TimeoutException> Un flusso di lavoro che richiede più tempo rispetto all&quot;intervallo di timeout specificato viene completato correttamente se il flusso di lavoro non diventa inattivo."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.  \n  \n<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  \n [!code-cs[CFX_WorkflowInvokerExample#51](~/add/codesnippet/csharp/b4c6bab6-3619-4dba-a32f-_1.cs)]  \n  \n For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Il dizionario di parametri di input per il flusso di lavoro codificati dal nome dell&quot;argomento."
    - id: timeout
      type: System.TimeSpan
      description: "Intervallo in cui il flusso di lavoro deve essere completata prima che sia interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Un dizionario dell&quot;attività radice <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valori codificati da un argomento il nome che rappresentano gli output del flusso di lavoro."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo sincrono usando la definizione di flusso di lavoro specificata, &lt;xref:System.Collections.Generic.IDictionary%602&gt; dei parametri di input e l&quot;intervallo di timeout."
  remarks: "Questo metodo si blocca fino a quando il flusso di lavoro è stata completata, incluso il tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Se il flusso di lavoro non viene completata entro l&quot;intervallo di timeout specificato il flusso di lavoro viene interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>      > [!NOTE] > Il <xref:System.TimeoutException>viene generata solo se l&quot;intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l&quot;esecuzione.</xref:System.TimeoutException> Un flusso di lavoro che richiede più tempo rispetto all&quot;intervallo di timeout specificato viene completato correttamente se il flusso di lavoro non diventa inattivo."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#50](~/add/codesnippet/csharp/99f81696-783c-40fe-9cab-_1.cs)]  \n  \n For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "La definizione del flusso di lavoro del flusso di lavoro da richiamare."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Il dizionario di parametri di input per il flusso di lavoro codificati dal nome dell&quot;argomento."
    - id: timeout
      type: System.TimeSpan
      description: "Intervallo in cui il flusso di lavoro deve essere completata prima che sia interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Un dizionario dell&quot;attività radice <xref href=&quot;System.Activities.OutArgument&quot;> </xref> e <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> valori codificati da un argomento il nome che rappresentano gli output del flusso di lavoro."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)
  id: Invoke``1(System.Activities.Activity`1)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "Da aggiungere."
    return:
      type: TResult
      description: "Da aggiungere."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "Da aggiungere."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Da aggiungere."
    return:
      type: TResult
      description: "Da aggiungere."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "Da aggiungere."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Da aggiungere."
    - id: timeout
      type: System.TimeSpan
      description: "Da aggiungere."
    return:
      type: TResult
      description: "Da aggiungere."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs, out System.Collections.Generic.IDictionary<string,object> additionalOutputs, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "Da aggiungere."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Da aggiungere."
    - id: additionalOutputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Da aggiungere."
    - id: timeout
      type: System.TimeSpan
      description: "Da aggiungere."
    return:
      type: TResult
      description: "Da aggiungere."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync
  id: InvokeAsync
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync()
  nameWithType: WorkflowInvoker.InvokeAsync()
  fullName: System.Activities.WorkflowInvoker.InvokeAsync()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama in modo asincrono un flusso di lavoro."
  remarks: "Per essere notificato quando il flusso di lavoro è completo, gestire <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Per configurare un intervallo di timeout, in cui è necessario completare il flusso di lavoro, usare uno degli <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>overload che accettano un <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono basato su eventi. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Panoramica del modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_16_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_16_2.cs)]"
  syntax:
    content: public void InvokeAsync ();
    parameters: []
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo asincrono utilizzando l&quot;oggetto specificato &lt;xref:System.Collections.Generic.IDictionary%602&gt; dei parametri di input."
  remarks: "Per essere notificato quando il flusso di lavoro è completo, gestire <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Per configurare un intervallo di timeout, in cui è necessario completare il flusso di lavoro, usare uno degli <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>overload che accettano un <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono basato su eventi. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Panoramica del modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/112688e8-a059-4fd1-b597-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/112688e8-a059-4fd1-b597-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Il dizionario di parametri di input per il flusso di lavoro codificati dal nome dell&quot;argomento."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Object)
  id: InvokeAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(Object)
  nameWithType: WorkflowInvoker.InvokeAsync(Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo asincrono utilizzando l&quot;identificatore univoco specificato."
  remarks: "Il `userState` parametro deve essere univoco tra tutti attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>operazioni per l&quot;attività corrente.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Se il `userState` parametro non è univoco, un <xref:System.ArgumentException>viene generata un&quot;eccezione.</xref:System.ArgumentException> `userState`viene utilizzato per identificare il flusso di lavoro <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e annullare il flusso di lavoro <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Per essere notificato quando il flusso di lavoro è completo, gestire <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Per configurare un intervallo di timeout, in cui è necessario completare il flusso di lavoro, usare uno degli <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>overload che accettano un <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono basato su eventi. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Panoramica del modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_25_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_25_2.cs)]"
  syntax:
    content: public void InvokeAsync (object userState);
    parameters:
    - id: userState
      type: System.Object
      description: "Un oggetto fornito dall&quot;utente utilizzato per distinguere questa particolare asincrona operazione invoke dalle altre asincrone correnti richiamare le operazioni."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)
  id: InvokeAsync(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo asincrono con l&quot;intervallo di timeout specificato."
  remarks: "Per essere notificato quando il flusso di lavoro è completo, gestire <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Se il flusso di lavoro non viene completata entro l&quot;intervallo di timeout specificato il flusso di lavoro viene interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>      > [!NOTE] > Il <xref:System.TimeoutException>viene generata solo se l&quot;intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l&quot;esecuzione.</xref:System.TimeoutException> Un flusso di lavoro che richiede più tempo rispetto all&quot;intervallo di timeout specificato viene completato correttamente se il flusso di lavoro non diventa inattivo.       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono basato su eventi. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Panoramica del modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_10_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_10_2.cs)]"
  syntax:
    content: public void InvokeAsync (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Intervallo in cui il flusso di lavoro deve essere completata prima che sia interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>"
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo asincrono utilizzando l&quot;oggetto specificato &lt;xref:System.Collections.Generic.IDictionary%602&gt; di parametri di input e un identificatore univoco."
  remarks: "Il `userState` parametro deve essere univoco tra tutti attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>operazioni per l&quot;attività corrente.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Se `userState` non è univoco, un <xref:System.ArgumentException>viene generata un&quot;eccezione.</xref:System.ArgumentException> `userState`viene utilizzato per identificare il flusso di lavoro <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e annullare il flusso di lavoro <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Per essere notificato quando il flusso di lavoro è completo, gestire <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Per configurare un intervallo di timeout, in cui è necessario completare il flusso di lavoro, usare uno degli <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>overload che accettano un <xref:System.TimeSpan>.</xref:System.TimeSpan> </xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono basato su eventi. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Panoramica del modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/a95cbf8c-ccca-42d5-b4d9-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/a95cbf8c-ccca-42d5-b4d9-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, object userState);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Il dizionario di parametri di input per il flusso di lavoro codificati dal nome dell&quot;argomento."
    - id: userState
      type: System.Object
      description: "Un oggetto fornito dall&quot;utente utilizzato per distinguere questa particolare asincrona operazione invoke dalle altre asincrone correnti richiamare le operazioni."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo asincrono con il parametro specificato &lt;xref:System.Collections.Generic.IDictionary%602&gt; di parametri di input e l&quot;intervallo di timeout specificato."
  remarks: "Per essere notificato quando il flusso di lavoro è completo, gestire <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Se il flusso di lavoro non viene completata entro l&quot;intervallo di timeout specificato il flusso di lavoro viene interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>      > [!NOTE] > Il <xref:System.TimeoutException>viene generata solo se l&quot;intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l&quot;esecuzione.</xref:System.TimeoutException> Un flusso di lavoro che richiede più tempo rispetto all&quot;intervallo di timeout specificato viene completato correttamente se il flusso di lavoro non diventa inattivo.       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono basato su eventi. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Panoramica del modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/db1ef47f-8edf-438d-b4fc-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/db1ef47f-8edf-438d-b4fc-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Il dizionario di parametri di input per il flusso di lavoro codificati dal nome dell&quot;argomento."
    - id: timeout
      type: System.TimeSpan
      description: "Intervallo in cui il flusso di lavoro deve essere completata prima che sia interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>"
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)
  id: InvokeAsync(System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo asincrono con l&quot;intervallo di timeout specificato e un identificatore univoco."
  remarks: "Il `userState` parametro deve essere univoco tra tutti attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>operazioni per l&quot;attività corrente.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Se `userState` non è univoco, un <xref:System.ArgumentException>viene generata un&quot;eccezione.</xref:System.ArgumentException> `userState`viene utilizzato per identificare il flusso di lavoro <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e annullare il flusso di lavoro <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Per essere notificato quando il flusso di lavoro è completo, gestire <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Se il flusso di lavoro non viene completata entro l&quot;intervallo di timeout specificato il flusso di lavoro viene interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>      > [!NOTE] > Il <xref:System.TimeoutException>viene generata solo se l&quot;intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l&quot;esecuzione.</xref:System.TimeoutException> Un flusso di lavoro che richiede più tempo rispetto all&quot;intervallo di timeout specificato viene completato correttamente se il flusso di lavoro non diventa inattivo.       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono basato su eventi. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Panoramica del modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_2_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_2_2.cs)]"
  syntax:
    content: public void InvokeAsync (TimeSpan timeout, object userState);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Intervallo in cui il flusso di lavoro deve essere completata prima che sia interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>"
    - id: userState
      type: System.Object
      description: "Un oggetto fornito dall&quot;utente utilizzato per distinguere questa particolare asincrona operazione invoke dalle altre asincrone correnti richiamare le operazioni."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Richiama un flusso di lavoro in modo asincrono con il parametro specificato &lt;xref:System.Collections.Generic.IDictionary%602&gt; di parametri di input, l&quot;intervallo di timeout specificato e un identificatore univoco."
  remarks: "Il `userState` parametro deve essere univoco tra tutti attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>operazioni per l&quot;attività corrente.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Se `userState` non è univoco, un <xref:System.ArgumentException>viene generata un&quot;eccezione.</xref:System.ArgumentException> `userState`viene utilizzato per identificare il flusso di lavoro <xref:System.Activities.WorkflowInvoker.InvokeCompleted>e annullare il flusso di lavoro <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Per essere notificato quando il flusso di lavoro è completo, gestire <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Se il flusso di lavoro non viene completata entro l&quot;intervallo di timeout specificato il flusso di lavoro viene interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>      > [!NOTE] > Il <xref:System.TimeoutException>viene generata solo se l&quot;intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l&quot;esecuzione.</xref:System.TimeoutException> Un flusso di lavoro che richiede più tempo rispetto all&quot;intervallo di timeout specificato viene completato correttamente se il flusso di lavoro non diventa inattivo.       Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono basato su eventi. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Panoramica del modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/7a3dc9a9-66d7-4131-ad3f-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/7a3dc9a9-66d7-4131-ad3f-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout, object userState);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Il dizionario di parametri di input per il flusso di lavoro codificati dal nome dell&quot;argomento."
    - id: timeout
      type: System.TimeSpan
      description: "Intervallo in cui il flusso di lavoro deve essere completata prima che sia interrotto e un <xref:System.TimeoutException>viene generata un&quot;eccezione.</xref:System.TimeoutException>"
    - id: userState
      type: System.Object
      description: "Un oggetto fornito dall&quot;utente utilizzato per distinguere questa particolare asincrona operazione invoke dalle altre asincrone correnti richiamare le operazioni."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeCompleted
  id: InvokeCompleted
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeCompleted
  nameWithType: WorkflowInvoker.InvokeCompleted
  fullName: System.Activities.WorkflowInvoker.InvokeCompleted
  type: Event
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Si verifica quando il flusso di lavoro richiamato da uno del <xref:System.Activities.WorkflowInvoker.InvokeAsync*>overload è stata completata o annullata.</xref:System.Activities.WorkflowInvoker.InvokeAsync*>"
  remarks: "Gestirlo per determinare se un flusso di lavoro richiamato con uno del <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>Overload completato correttamente e per recuperare gli argomenti di output del flusso di lavoro completato.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>"
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the InvokeCompleted handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/e-system.activities.work_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/e-system.activities.work_2.cs)]"
  syntax:
    content: public event EventHandler<System.Activities.InvokeCompletedEventArgs> InvokeCompleted;
    return:
      type: System.EventHandler{System.Activities.InvokeCompletedEventArgs}
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: WorkflowInvoker(Activity)
  nameWithType: WorkflowInvoker.WorkflowInvoker(Activity)
  fullName: System.Activities.WorkflowInvoker.WorkflowInvoker(Activity)
- uid: System.Activities.Activity
  parent: System.Activities
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Activities.Activity
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
- uid: System.Activities.WorkflowInvoker.CancelAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: CancelAsync(Object)
  nameWithType: WorkflowInvoker.CancelAsync(Object)
  fullName: System.Activities.WorkflowInvoker.CancelAsync(Object)
- uid: System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: WorkflowInvoker.EndInvoke(IAsyncResult)
  fullName: System.Activities.WorkflowInvoker.EndInvoke(IAsyncResult)
- uid: System.Activities.WorkflowInvoker.Extensions
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Extensions
  nameWithType: WorkflowInvoker.Extensions
  fullName: System.Activities.WorkflowInvoker.Extensions
- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager
  parent: System.Activities.Hosting
  isExternal: false
  name: WorkflowInstanceExtensionManager
  nameWithType: WorkflowInstanceExtensionManager
  fullName: System.Activities.Hosting.WorkflowInstanceExtensionManager
- uid: System.Activities.WorkflowInvoker.Invoke
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke()
  nameWithType: WorkflowInvoker.Invoke()
  fullName: System.Activities.WorkflowInvoker.Invoke()
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity)
  nameWithType: WorkflowInvoker.Invoke(Activity)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>)
- uid: TResult
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Activities.Activity`1
  parent: System.Activities
  isExternal: false
  name: Activity<TResult>
  nameWithType: Activity<TResult>
  fullName: System.Activities.Activity<TResult>
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.InvokeAsync
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync()
  nameWithType: WorkflowInvoker.InvokeAsync()
  fullName: System.Activities.WorkflowInvoker.InvokeAsync()
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(Object)
  nameWithType: WorkflowInvoker.InvokeAsync(Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(Object)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan,Object)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
- uid: System.Activities.WorkflowInvoker.InvokeCompleted
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeCompleted
  nameWithType: WorkflowInvoker.InvokeCompleted
  fullName: System.Activities.WorkflowInvoker.InvokeCompleted
- uid: System.EventHandler{System.Activities.InvokeCompletedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<InvokeCompletedEventArgs>
  nameWithType: EventHandler<InvokeCompletedEventArgs>
  fullName: System.EventHandler<System.Activities.InvokeCompletedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Activities.InvokeCompletedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.InvokeCompletedEventArgs
    name: InvokeCompletedEventArgs
    nameWithType: InvokeCompletedEventArgs
    fullName: InvokeCompletedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.WorkflowInvoker.#ctor*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: WorkflowInvoker
  nameWithType: WorkflowInvoker.WorkflowInvoker
- uid: System.Activities.WorkflowInvoker.BeginInvoke*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke
  nameWithType: WorkflowInvoker.BeginInvoke
- uid: System.Activities.WorkflowInvoker.CancelAsync*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: CancelAsync
  nameWithType: WorkflowInvoker.CancelAsync
- uid: System.Activities.WorkflowInvoker.EndInvoke*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: EndInvoke
  nameWithType: WorkflowInvoker.EndInvoke
- uid: System.Activities.WorkflowInvoker.Extensions*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Extensions
  nameWithType: WorkflowInvoker.Extensions
- uid: System.Activities.WorkflowInvoker.Invoke*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke
  nameWithType: WorkflowInvoker.Invoke
- uid: System.Activities.WorkflowInvoker.Invoke<TResult>*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke<TResult>
  nameWithType: WorkflowInvoker.Invoke<TResult>
- uid: System.Activities.WorkflowInvoker.InvokeAsync*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync
  nameWithType: WorkflowInvoker.InvokeAsync
