### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider
  id: IInstanceContextProvider
  children:
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  langs:
  - csharp
  name: IInstanceContextProvider
  nameWithType: IInstanceContextProvider
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider
  type: Interface
  summary: "Procedere all&quot;implementazione per partecipare alla creazione o alla scelta di un &lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt; oggetto, soprattutto per abilitare le sessioni condivise."
  remarks: "Implementare l&quot;interfaccia IInstanceContextProvider per fornire appropriata <xref:System.ServiceModel.InstanceContext?displayProperty=fullName>oggetto al sistema.</xref:System.ServiceModel.InstanceContext?displayProperty=fullName> In genere, questa interfaccia viene implementata per supportare sessioni condivise, abilitare il pool di istanza di servizio, controllare la durata delle istanze del servizio o per raggruppare i contesti fra client.       Ad esempio, per implementare la condivisione, inserire un IInstanceContextProvider personalizzata per decidere quale sessione o chiamate da un client sono associata a cui <xref:System.ServiceModel.InstanceContext>oggetto.</xref:System.ServiceModel.InstanceContext> Per un esempio che illustra la condivisione dei contesti di istanza, vedere [InstanceContextSharing](http://msdn.microsoft.com/en-us/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).      > [!NOTE] > IInstanceContextProvider un quando viene inserito in [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)], la proprietà normale che controlla la creazione di <xref:System.ServiceModel.InstanceContext>oggetti (il <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>proprietà) non viene più controllata e non ha alcun effetto.</xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext>       Un meccanismo più generico da cui è possibile inizializzare <xref:System.ServiceModel.InstanceContext>oggetti quando creato (ad esempio, per allegare estensioni personalizzate a ogni <xref:System.ServiceModel.InstanceContext>) è <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=fullName>.</xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext>"
  syntax:
    content: public interface IInstanceContextProvider
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  id: GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: GetExistingInstanceContext(Message,IContextChannel)
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Chiamato quando viene ricevuto un nuovo messaggio."
  remarks: "Il metodo GetExistingInstanceContext viene chiamato quando viene ricevuto un messaggio. Restituire il <xref:System.ServiceModel.InstanceContext>dell&quot;oggetto che si desidera elaborare il messaggio, o `null`.</xref:System.ServiceModel.InstanceContext> In caso di `null`, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] crea un nuovo <xref:System.ServiceModel.InstanceContext>oggetto per il messaggio e quindi chiama il <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A>metodo.</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> </xref:System.ServiceModel.InstanceContext>       Se si restituisce `null`, il nuovo <xref:System.ServiceModel.InstanceContext>oggetto passa attraverso il sistema di limitazione delle richieste e incrementa il conteggio di <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName>.</xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext>"
  syntax:
    content: public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);
    parameters:
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "Il messaggio in arrivo."
    - id: channel
      type: System.ServiceModel.IContextChannel
      description: "Il canale che riceve il messaggio."
    return:
      type: System.ServiceModel.InstanceContext
      description: "Il &lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt; oggetto che viene utilizzato per elaborare il messaggio, restituirà <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per indicare [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] per creare un nuovo <xref:System.ServiceModel.InstanceContext>oggetto.</xref:System.ServiceModel.InstanceContext>"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  id: InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  nameWithType: IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Chiamato quando <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> restituito dal <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*>metodo.</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*>"
  remarks: "InitializeInstanceContext viene chiamato quando <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A>restituisce `null` e un nuovo <xref:System.ServiceModel.InstanceContext>viene creato l&quot;oggetto.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> Questo metodo viene chiamato per notificare che un nuovo <xref:System.ServiceModel.InstanceContext>è stato creato.</xref:System.ServiceModel.InstanceContext>"
  syntax:
    content: public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Il nuovo &lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt; oggetto."
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "Il messaggio in arrivo."
    - id: channel
      type: System.ServiceModel.IContextChannel
      description: "Il canale che riceve il messaggio."
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  id: IsIdle(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: IsIdle(InstanceContext)
  nameWithType: IInstanceContextProvider.IsIdle(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Chiamato quando tutte <xref:System.ServiceModel.InstanceContext>attività sono state completate per consentire agli implementatori di impedire il <xref:System.ServiceModel.InstanceContext>di essere riciclati.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext>"
  remarks: "IsIdle viene chiamato quando [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] sta per chiudere e riciclare un inattività <xref:System.ServiceModel.InstanceContext>dell&quot;oggetto in modo che è possibile informare il runtime se si desidera continuare a svolgere necessaria.</xref:System.ServiceModel.InstanceContext>       Per un esempio che illustra la condivisione dei contesti di istanza, vedere [InstanceContextSharing](http://msdn.microsoft.com/en-us/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)."
  syntax:
    content: public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Il <xref:System.ServiceModel.InstanceContext>oggetto che viene considerato inattivo.</xref:System.ServiceModel.InstanceContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] deve chiudere e riciclare il <xref:System.ServiceModel.InstanceContext>dell&quot;oggetto e modificare il valore di &lt;xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName&gt;; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.InstanceContext>"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  id: NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  nameWithType: IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Chiamato quando il <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*>restituisce <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per consentire agli implementatori di fornire un callback per notificare [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] quando il <xref:System.ServiceModel.InstanceContext>oggetto termina.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*>"
  remarks: "NotifyIdle viene chiamato quando il <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>restituisce `false` che consente di fornire [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] con un <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName>che consentono di informare il runtime dell&quot;oggetto che il <xref:System.ServiceModel.InstanceContext>ha completato l&quot;elaborazione.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName> </xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> Quando il <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName>oggetto notifica il runtime che il <xref:System.ServiceModel.InstanceContext>ha completato l&quot;elaborazione, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] chiamate <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>nuovamente.</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> </xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName> Questo ciclo continua fino a <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>restituisce `true` e il contesto viene chiuso e riciclato.</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>"
  syntax:
    content: public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: callback
      type: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
      description: "Il <xref href=&quot;System.ServiceModel.Dispatcher.InstanceContextIdleCallback&quot;> </xref> oggetto notifica [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] quando il <xref:System.ServiceModel.InstanceContext>oggetto viene chiuso e riciclato.</xref:System.ServiceModel.InstanceContext>"
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "<xref:System.ServiceModel.InstanceContext>.</xref:System.ServiceModel.InstanceContext> Corrente"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: GetExistingInstanceContext(Message,IContextChannel)
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.IContextChannel
  parent: System.ServiceModel
  isExternal: true
  name: IContextChannel
  nameWithType: IContextChannel
  fullName: System.ServiceModel.IContextChannel
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  nameWithType: IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: IsIdle(InstanceContext)
  nameWithType: IInstanceContextProvider.IsIdle(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(InstanceContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  nameWithType: IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
- uid: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: InstanceContextIdleCallback
  nameWithType: InstanceContextIdleCallback
  fullName: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: GetExistingInstanceContext
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: InitializeInstanceContext
  nameWithType: IInstanceContextProvider.InitializeInstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: IsIdle
  nameWithType: IInstanceContextProvider.IsIdle
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: NotifyIdle
  nameWithType: IInstanceContextProvider.NotifyIdle
