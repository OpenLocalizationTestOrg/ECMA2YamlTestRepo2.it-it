### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLog
  id: EventLog
  children:
  - System.Diagnostics.EventLog.#ctor
  - System.Diagnostics.EventLog.#ctor(System.String)
  - System.Diagnostics.EventLog.#ctor(System.String,System.String)
  - System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.EventLog.BeginInit
  - System.Diagnostics.EventLog.Clear
  - System.Diagnostics.EventLog.Close
  - System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)
  - System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)
  - System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)
  - System.Diagnostics.EventLog.Delete(System.String)
  - System.Diagnostics.EventLog.Delete(System.String,System.String)
  - System.Diagnostics.EventLog.DeleteEventSource(System.String)
  - System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)
  - System.Diagnostics.EventLog.Dispose(System.Boolean)
  - System.Diagnostics.EventLog.EnableRaisingEvents
  - System.Diagnostics.EventLog.EndInit
  - System.Diagnostics.EventLog.Entries
  - System.Diagnostics.EventLog.EntryWritten
  - System.Diagnostics.EventLog.Exists(System.String)
  - System.Diagnostics.EventLog.Exists(System.String,System.String)
  - System.Diagnostics.EventLog.GetEventLogs
  - System.Diagnostics.EventLog.GetEventLogs(System.String)
  - System.Diagnostics.EventLog.Log
  - System.Diagnostics.EventLog.LogDisplayName
  - System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)
  - System.Diagnostics.EventLog.MachineName
  - System.Diagnostics.EventLog.MaximumKilobytes
  - System.Diagnostics.EventLog.MinimumRetentionDays
  - System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  - System.Diagnostics.EventLog.OverflowAction
  - System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)
  - System.Diagnostics.EventLog.Source
  - System.Diagnostics.EventLog.SourceExists(System.String)
  - System.Diagnostics.EventLog.SourceExists(System.String,System.String)
  - System.Diagnostics.EventLog.SynchronizingObject
  - System.Diagnostics.EventLog.WriteEntry(System.String)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  - System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  - System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  - System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  - System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  langs:
  - csharp
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
  type: Class
  summary: "Gestisce l&quot;interazione con i registri eventi di Windows."
  remarks: "Registro eventi consente di accedere o personalizzare i registri eventi di Windows, che registra le informazioni sugli eventi importanti del software o hardware. Utilizza EventLog, è possibile leggere i log esistenti, scrivere voci di log, creare o eliminare origini eventi, eliminare i registri e rispondere per le voci di log. È anche possibile creare nuovi log durante la creazione di un&quot;origine evento.      > [!IMPORTANT] > Questo tipo implementa il <xref:System.IDisposable>interfaccia.</xref:System.IDisposable> Dopo aver utilizzando il tipo, è necessario eliminarlo di esso direttamente o indirettamente. Per eliminare direttamente il tipo, chiamare il relativo <xref:System.IDisposable.Dispose%2A>metodo in un `try` / `catch` blocco.</xref:System.IDisposable.Dispose%2A> Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio, ad esempio `using` (in c#) o `Using` (in Visual Basic). Per ulteriori informazioni, vedere la sezione &quot;Utilizzo di oggetti che implementano IDisposable&quot; nel <xref:System.IDisposable>argomento relativo all&quot;interfaccia.</xref:System.IDisposable>       Oltre a fornire l&quot;accesso ai singoli log eventi e le relative voci, la classe EventLog consente di accedere alla raccolta di tutti i registri eventi. È possibile utilizzare il `static` i membri di EventLog per eliminare i log, ottenere elenchi di log, creare o eliminare un&quot;origine o verificare se un computer è già presente una determinata origine.       Esistono tre log eventi predefiniti: applicazione, sistema e sicurezza. Registro di sicurezza è di sola lettura. Altre applicazioni e servizi, che installare, ad esempio Active Directory, potrebbero essere registri aggiuntivi.       Quando si utilizza la classe EventLog, esistono considerazioni sulla sicurezza. EventLog richiede <xref:System.Diagnostics.EventLogPermission>le autorizzazioni per le azioni specifiche in .NET Framework 2.0 e versioni successive o con attendibilità totale in .NET Framework 1.0 e 1.1.</xref:System.Diagnostics.EventLogPermission> È consigliabile che <xref:System.Diagnostics.EventLogPermission>non è concessa a codice parzialmente attendibile.</xref:System.Diagnostics.EventLogPermission>  Non passare mai oggetti di log eventi, inclusi <xref:System.Diagnostics.EventLogEntryCollection>e <xref:System.Diagnostics.EventLogEntry>degli oggetti a codice parzialmente attendibile.</xref:System.Diagnostics.EventLogEntry> </xref:System.Diagnostics.EventLogEntryCollection> Ad esempio, si crea un oggetto EventLog, si scrive una voce e quindi passare il log eventi oggetto a codice parzialmente attendibile può creare un problema di sicurezza, poiché la possibilità di leggere e scrivere nel registro eventi consente al codice eseguire azioni come l&quot;emissione di messaggi del registro eventi nel nome di un&quot;altra applicazione.       A partire da Windows Vista, il controllo dell&quot;Account utente (UAC) determina le credenziali di un utente. Si è un membro del gruppo Administrators predefinito, vengono assegnati due token di accesso in fase di esecuzione: un token di accesso utente standard e un token di accesso di amministratore. Per impostazione predefinita, viene assegnato il ruolo dell&quot;utente standard. Per eseguire il codice che accede al Registro di sicurezza, è necessario elevare le credenziali da utente standard ad amministratore. È possibile farlo quando si avvia un&quot;applicazione, aprire il menu di scelta rapida per l&quot;applicazione (se si usa un mouse, fare doppio clic sull&quot;icona dell&quot;applicazione) e che indica che si desidera eseguire come amministratore.       Registro eventi consente di creare il log eventi personalizzati che è possibile visualizzare tramite il Visualizzatore eventi del server. Utilizzare il <xref:System.Diagnostics.EventLog.RegisterDisplayName%2A>metodo per visualizzare un nome localizzato per il log eventi nel Visualizzatore eventi.</xref:System.Diagnostics.EventLog.RegisterDisplayName%2A> Utilizzare il <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>metodo per configurare il comportamento del log eventi quando raggiunge le dimensioni massime.</xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>       Per leggere da un registro eventi, specificare il nome del log (<xref:System.Diagnostics.EventLog.Log%2A> proprietà) e il nome di computer server (<xref:System.Diagnostics.EventLog.MachineName%2A> proprietà per il registro eventi.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> Se non si specifica il nome del computer server, il computer locale &quot;.&quot;, verrà utilizzato. Non è necessario specificare l&quot;origine evento (<xref:System.Diagnostics.EventLog.Source%2A> proprietà), poiché un&quot;origine è obbligatorio solo per la scrittura nei log.</xref:System.Diagnostics.EventLog.Source%2A> Il <xref:System.Diagnostics.EventLog.Entries%2A>proprietà viene popolata automaticamente con l&quot;elenco delle voci del log eventi.</xref:System.Diagnostics.EventLog.Entries%2A>       Per scrivere in un registro eventi, specificare o creare un&quot;origine evento (<xref:System.Diagnostics.EventLog.Source%2A> proprietà).</xref:System.Diagnostics.EventLog.Source%2A> È necessario disporre delle credenziali amministrative nel computer per creare una nuova origine evento. L&quot;origine evento registra l&quot;applicazione con il registro eventi come origine valida delle voci. È possibile utilizzare l&quot;origine evento per scrivere in un solo log alla volta. Il <xref:System.Diagnostics.EventLog.Source%2A>proprietà può essere qualsiasi stringa, ma il nome deve essere diverso da quello di altre origini nel computer.</xref:System.Diagnostics.EventLog.Source%2A> L&quot;origine evento è in genere il nome dell&quot;applicazione o un&quot;altra stringa di identificazione. Tentativo di creare un duplicato <xref:System.Diagnostics.EventLog.Source%2A>valore genera un&quot;eccezione.</xref:System.Diagnostics.EventLog.Source%2A> Tuttavia, un singolo registro eventi può essere associato a più origini.       Se l&quot;origine evento per il log eventi associato all&quot;istanza EventLog non esiste, viene creata una nuova origine evento. Per creare un&quot;origine evento in Windows Vista e versioni successive o Windows Server 2003, è necessario disporre di credenziali amministrative.       Questo requisito è poiché tutti i registri eventi, inclusi i log di sicurezza, deve essere eseguita la ricerca per determinare se l&quot;origine evento è univoco. A partire da Windows Vista, gli utenti non dispone dell&quot;autorizzazione per accedere al Registro di sicurezza; Pertanto, un <xref:System.Security.SecurityException>viene generata un&quot;eccezione.</xref:System.Security.SecurityException>      > [!IMPORTANT] > Creazione o l&quot;eliminazione di un&quot;origine eventi richiede la sincronizzazione del codice sottostante tramite un mutex denominato. Se un&quot;applicazione con privilegi elevati blocca il mutex denominato, il tentativo di creare o eliminare un&quot;origine evento causa l&quot;applicazione di rispondere fino a quando non viene rilasciato il blocco. Per evitare questo problema, non concedere mai <xref:System.Security.Permissions.SecurityPermissionFlag>dell&quot;autorizzazione per codice non attendibile.</xref:System.Security.Permissions.SecurityPermissionFlag> Inoltre, <xref:System.Security.Permissions.SecurityPermissionFlag>autorizzazione potenzialmente consente di ignorare altre autorizzazioni e deve essere concesso solo a codice altamente attendibile.</xref:System.Security.Permissions.SecurityPermissionFlag>       Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema. Se non si imposta esplicitamente la <xref:System.Diagnostics.EventLog.Log%2A>proprietà, le impostazioni predefinite del registro eventi nel registro applicazione.</xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Nulla per proteggere un&quot;applicazione da scrivere come qualsiasi origine registrata.  Se un&quot;applicazione viene concesso <xref:System.Diagnostics.EventLogPermissionAccess>autorizzazione, è possibile scrivere gli eventi per qualsiasi origine valida registrata nel computer.</xref:System.Diagnostics.EventLogPermissionAccess>       Utilizzare i <xref:System.Diagnostics.EventLog.WriteEvent%2A> <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodi</xref:System.Diagnostics.EventLog.WriteEntry%2A> e per scrivere eventi da un registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> È necessario specificare un&quot;origine eventi per scrivere eventi; è necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine.       Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è stato aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine utilizzando un <xref:System.Diagnostics.EventLogInstaller>oggetto o <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre delle credenziali amministrative nel computer per creare una nuova origine evento.       Ogni origine può scrivere in un solo log eventi alla volta. Tuttavia, l&quot;applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l&quot;applicazione potrebbe richiedere più origini configurate per diversi log eventi o file di risorse diversi. Per modificare i dettagli di configurazione di un&quot;origine esistente, è necessario eliminare l&quot;origine e quindi crearlo nuovamente con la nuova configurazione. Se altre applicazioni o componenti utilizzano l&quot;origine esistente, creare una nuova origine con la configurazione aggiornata anziché eliminare l&quot;origine esistente.       È possibile registrare l&quot;origine evento con le risorse localizzate per le stringhe di categoria e il messaggio di evento. L&quot;applicazione può scrivere voci nel registro eventi tramite identificatori di risorsa, anziché specificare i valori stringa effettivo. Consultare la <xref:System.Diagnostics.EventLogInstaller>e <xref:System.Diagnostics.EventSourceCreationData>Per ulteriori informazioni sulla configurazione dell&quot;origine con i file di risorse.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Se l&quot;applicazione scrive i valori stringa direttamente nel registro eventi, non è necessario impostare le proprietà di file per l&quot;origine di risorsa. L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Quando si scrivono eventi, è necessario specificare almeno una stringa di messaggio o l&quot;identificatore di risorsa per una stringa di messaggio. Altre proprietà di evento sono facoltativi. Esempi di impostazioni di evento facoltativo includono i seguenti:-è possibile impostare il <xref:System.Diagnostics.EventLogEntryType>per specificare l&quot;icona che consente di visualizzare il Visualizzatore eventi per la voce.</xref:System.Diagnostics.EventLogEntryType>      -È possibile specificare un identificatore di categoria per l&quot;evento, se l&quot;applicazione usa categorie per filtrare gli eventi.      -È possibile collegare dati binari alla voce dell&quot;evento, se si desidera associare informazioni aggiuntive a un determinato evento.      > [!IMPORTANT] > La registrazione degli eventi utilizza lo spazio su disco, il tempo del processore e altre risorse di sistema. È importante registrare solo le informazioni essenziali. Si consiglia di inserire le chiamate del log eventi in un percorso di errore, anziché nel percorso del codice principale, in modo non influire negativamente sulle prestazioni.       Per un elenco di valori di proprietà iniziali per un&quot;istanza del registro eventi, vedere il <xref:System.Diagnostics.EventLog.%23ctor%2A>costruttore.</xref:System.Diagnostics.EventLog.%23ctor%2A>"
  example:
  - "The following example creates the event source `MySource` if it doesn't already exist, and writes an entry to the event log `MyNewLog`.  \n  \n> [!NOTE]\n>  Starting with Windows Vista, you must run this application as an administrator.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_0_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_0_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_0_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("EntryWritten")]

      [System.ComponentModel.InstallerType("System.Diagnostics.EventLogInstaller, System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Diagnostics.MonitoringDescription("EventLogDesc")]

      public class EventLog : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog()
  nameWithType: EventLog.EventLog()
  fullName: System.Diagnostics.EventLog.EventLog()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> classe. Associa l&quot;istanza con tutti i log."
  remarks: "Prima di chiamare <xref:System.Diagnostics.EventLog.WriteEntry%2A>, specificare il <xref:System.Diagnostics.EventLog.Source%2A>proprietà del <xref:System.Diagnostics.EventLog>istanza.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> Se si sta leggendo solo <xref:System.Diagnostics.EventLog.Entries%2A>dal log, è possibile specificare solo il <xref:System.Diagnostics.EventLog.Log%2A>e <xref:System.Diagnostics.EventLog.MachineName%2A>proprietà.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Entries%2A>      > [!NOTE] > Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A>, il computer locale (&quot;.&quot;) si presuppone che.</xref:System.Diagnostics.EventLog.MachineName%2A>       La tabella seguente illustra i valori di proprietà iniziali per un&quot;istanza di <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Proprietà | Il valore iniziale |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| Una stringa vuota (&quot;&quot;). | | <xref:System.Diagnostics.EventLog.Log%2A>| Una stringa vuota (&quot;&quot;). | | <xref:System.Diagnostics.EventLog.MachineName%2A>| Il computer locale (&quot;.&quot;). |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_9_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_9_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_9_1.vb)]"
  syntax:
    content: public EventLog ();
    parameters: []
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog(String)
  nameWithType: EventLog.EventLog(String)
  fullName: System.Diagnostics.EventLog.EventLog(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> classe. Associa l&quot;istanza con un log nel computer locale."
  remarks: "Questo overload imposta la <xref:System.Diagnostics.EventLog.Log%2A>proprietà per il `logName` parametro.</xref:System.Diagnostics.EventLog.Log%2A> Prima di chiamare <xref:System.Diagnostics.EventLog.WriteEntry%2A>, specificare il <xref:System.Diagnostics.EventLog.Source%2A>proprietà del <xref:System.Diagnostics.EventLog>istanza.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> Se si sta leggendo solo <xref:System.Diagnostics.EventLog.Entries%2A>dal log, è possibile specificare solo il <xref:System.Diagnostics.EventLog.Log%2A>e <xref:System.Diagnostics.EventLog.MachineName%2A>proprietà.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Entries%2A>      > [!NOTE] > Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A>, il computer locale (&quot;.&quot;) si presuppone che.</xref:System.Diagnostics.EventLog.MachineName%2A> Questo overload del costruttore specifica la <xref:System.Diagnostics.EventLog.Log%2A>proprietà, ma è possibile modificare prima di leggere il <xref:System.Diagnostics.EventLog.Entries%2A>proprietà.</xref:System.Diagnostics.EventLog.Entries%2A> </xref:System.Diagnostics.EventLog.Log%2A>       Se l&quot;origine specifica nel <xref:System.Diagnostics.EventLog.Source%2A>la proprietà è univoca da altre origini nel computer, una chiamata successiva a <xref:System.Diagnostics.EventLog.WriteEntry%2A>Crea un log con il nome specificato, se non esiste già.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>       La tabella seguente illustra i valori di proprietà iniziali per un&quot;istanza di <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Proprietà | Il valore iniziale |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| Una stringa vuota (&quot;&quot;). | | <xref:System.Diagnostics.EventLog.Log%2A>| Il `logName` parametro. |   | <xref:System.Diagnostics.EventLog.MachineName%2A>| Il computer locale (&quot;.&quot;). |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example reads entries in the event log, \"myNewLog\", on the local computer.  \n  \n [!code-cpp[Classic EventLog.EventLog1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_13_1.cpp)]\n [!code-cs[Classic EventLog.EventLog1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_13_1.cs)]\n [!code-vb[Classic EventLog.EventLog1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_13_1.vb)]"
  syntax:
    content: public EventLog (string logName);
    parameters:
    - id: logName
      type: System.String
      description: "Il nome del log nel computer locale."
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Il nome del log <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il nome del log non è valido."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog(String,String)
  nameWithType: EventLog.EventLog(String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> classe. Associa l&quot;istanza con un log nel computer specificato."
  remarks: "Questo overload imposta la <xref:System.Diagnostics.EventLog.Log%2A>proprietà per il `logName` parametro e il <xref:System.Diagnostics.EventLog.MachineName%2A>proprietà per il `machineName` parametro.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> Prima di chiamare <xref:System.Diagnostics.EventLog.WriteEntry%2A>, specificare la <xref:System.Diagnostics.EventLog.Source%2A>proprietà di <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> Se si sta leggendo solo <xref:System.Diagnostics.EventLog.Entries%2A>dal log, è possibile specificare solo il <xref:System.Diagnostics.EventLog.Log%2A>e <xref:System.Diagnostics.EventLog.MachineName%2A>proprietà.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Entries%2A>      > [!NOTE] > Questo overload del costruttore specifica di <xref:System.Diagnostics.EventLog.Log%2A>e <xref:System.Diagnostics.EventLog.MachineName%2A>proprietà, ma è possibile modificare entrambe prima di leggere il <xref:System.Diagnostics.EventLog.Entries%2A>proprietà.</xref:System.Diagnostics.EventLog.Entries%2A> </xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A>       La tabella seguente illustra i valori di proprietà iniziali per un&quot;istanza di <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Proprietà | Il valore iniziale |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| Una stringa vuota (&quot;&quot;). | | <xref:System.Diagnostics.EventLog.Log%2A>| Il `logName` parametro. |   | <xref:System.Diagnostics.EventLog.MachineName%2A>| Il `machineName` parametro. |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example reads entries in the event log, \"myNewLog\", on the computer \"myServer\".  \n  \n [!code-cs[Classic EventLog.EventLog2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_0_1.cs)]\n [!code-cpp[Classic EventLog.EventLog2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_0_1.cpp)]\n [!code-vb[Classic EventLog.EventLog2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_0_1.vb)]"
  syntax:
    content: public EventLog (string logName, string machineName);
    parameters:
    - id: logName
      type: System.String
      description: "Il nome del log nel computer specificato."
    - id: machineName
      type: System.String
      description: "Il computer in cui il log esiste."
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Il nome del log <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il nome del log non è valido.       - oppure - il nome del computer non è valido."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog(String,String,String)
  nameWithType: EventLog.EventLog(String,String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> classe. Associa l&quot;istanza con un log nel computer specificato e crea o assegna l&quot;origine specificata per il <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>."
  remarks: "Questo costruttore imposta la <xref:System.Diagnostics.EventLog.Log%2A>proprietà per il `logName` parametro, il <xref:System.Diagnostics.EventLog.MachineName%2A>proprietà per il `machineName` parametro e il <xref:System.Diagnostics.EventLog.Source%2A>proprietà per il `source` parametro.</xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> La <xref:System.Diagnostics.EventLog.Source%2A>proprietà è obbligatoria quando si scrive in un registro eventi.</xref:System.Diagnostics.EventLog.Source%2A> Tuttavia, se si è solo di leggere da un registro eventi, solo il <xref:System.Diagnostics.EventLog.Log%2A>e <xref:System.Diagnostics.EventLog.MachineName%2A>proprietà sono necessarie (fino a quando il registro eventi sul server è già associato a un&quot;origine).</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> Se si è solo di leggere dal registro eventi, potrebbe essere sufficiente un altro overload del costruttore.       La tabella seguente illustra i valori di proprietà iniziali per un&quot;istanza di <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Proprietà | Il valore iniziale |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| Il `source` parametro. |   | <xref:System.Diagnostics.EventLog.Log%2A>| Il `logName` parametro. |   | <xref:System.Diagnostics.EventLog.MachineName%2A>| Il `machineName` parametro. |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example writes an entry to an event log, \"MyNewLog\", on the local computer, using the source \"MySource\".  \n  \n [!code-cs[Classic EventLog.EventLog3 Example#1](~/add/codesnippet/csharp/fd99d44e-2d79-45f8-97e3-_1.cs)]\n [!code-cpp[Classic EventLog.EventLog3 Example#1](~/add/codesnippet/cpp/fd99d44e-2d79-45f8-97e3-_1.cpp)]\n [!code-vb[Classic EventLog.EventLog3 Example#1](~/add/codesnippet/visualbasic/fd99d44e-2d79-45f8-97e3-_1.vb)]"
  syntax:
    content: public EventLog (string logName, string machineName, string source);
    parameters:
    - id: logName
      type: System.String
      description: "Il nome del log nel computer specificato"
    - id: machineName
      type: System.String
      description: "Il computer in cui il log esiste."
    - id: source
      type: System.String
      description: "L&quot;origine delle voci del registro eventi."
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Il nome del log <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il nome del log non è valido.       - oppure - il nome del computer non è valido."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.BeginInit
  id: BeginInit
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: BeginInit()
  nameWithType: EventLog.BeginInit()
  fullName: System.Diagnostics.EventLog.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Avvia l&quot;inizializzazione di un <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> utilizzato in un form o da un altro componente. L&quot;inizializzazione avviene in fase di esecuzione."
  remarks: "Il [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] ambiente di progettazione questo metodo per avviare l&quot;inizializzazione di un componente utilizzato in un form o da un altro componente. Il <xref:System.Diagnostics.EventLog.EndInit%2A>metodo termina l&quot;inizializzazione.</xref:System.Diagnostics.EventLog.EndInit%2A> Utilizzo di BeginInit e <xref:System.Diagnostics.EventLog.EndInit%2A>metodi impedire che il controllo venga utilizzato prima che venga inizializzato completamente.</xref:System.Diagnostics.EventLog.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Diagnostics.EventLog.BeginInit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Diagnostics.EventLog&quot;></xref>è già inizializzato."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Clear
  id: Clear
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Clear()
  nameWithType: EventLog.Clear()
  fullName: System.Diagnostics.EventLog.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Rimuove tutte le voci del registro eventi."
  remarks: "I registri eventi sono impostati con una dimensione massima che determina il numero di voci possono contenere. Quando un registro eventi è pieno, interrompe la registrazione di informazioni sui nuovi eventi o inizia a sovrascrivere le voci precedenti. Se si arresta la registrazione degli eventi, è possibile utilizzare questo metodo per cancellare il log delle voci esistenti e consente di avviare di nuovo la registrazione eventi. È necessario disporre delle autorizzazioni di amministratore nel computer in cui risiede il log per eliminare le voci del registro eventi.       Deselezionare chiude il log eventi, rilascia gli handle di evento, recupera i nuovi leggere e scrittura gli handle e riapre il log eventi. Gli eventi ricevuti dopo la chiamata al metodo non vengono cancellati insieme agli eventi esistenti."
  example:
  - "The following example clears an event log.  \n  \n> [!CAUTION]\n>  Because Application, System, Security, and other non-custom logs can contain crucial information; be sure to specify a custom log before executing this example code. This example deletes the custom log `myNewLog`.  \n  \n [!code-cs[Classic EventLog.Clear Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_11_1.cs)]\n [!code-vb[Classic EventLog.Clear Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_11_1.vb)]\n [!code-cpp[Classic EventLog.Clear Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_11_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Diagnostics.EventLog.Clear*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il registro eventi non è stato cancellato.       - oppure - Impossibile aprire il log. Un codice di errore di Windows non è disponibile."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Non è stato specificato un valore per il <xref:System.Diagnostics.EventLog.Log*>proprietà.</xref:System.Diagnostics.EventLog.Log*> Verificare che il nome del log non è una stringa vuota."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il log non esiste."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Close
  id: Close
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Close()
  nameWithType: EventLog.Close()
  fullName: System.Diagnostics.EventLog.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Chiude il log eventi e le versioni leggere e scrivere gli handle."
  remarks: "Viene chiamato il metodo Close da protetto <xref:System.ComponentModel.Component.Dispose%2A>metodo.</xref:System.ComponentModel.Component.Dispose%2A> Non è necessario chiamare Close prima di <xref:System.ComponentModel.Component.Dispose%2A>.</xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Diagnostics.EventLog.Close*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "L&quot;handle del registro eventi di lettura o di scrittura non è stato rilasciato correttamente."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)
  id: CreateEventSource(System.Diagnostics.EventSourceCreationData)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: CreateEventSource(EventSourceCreationData)
  nameWithType: EventLog.CreateEventSource(EventSourceCreationData)
  fullName: System.Diagnostics.EventLog.CreateEventSource(EventSourceCreationData)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Stabilisce l&quot;origine eventi valida per la scrittura di evento localizzati messaggi, utilizzando le proprietà di configurazione specificato per l&quot;origine evento e il registro eventi corrispondente."
  remarks: "Use this overload to configure a new source for writing entries to an event log on the local computer or a remote computer. It is not necessary to use this method to read from an event log.  \n  \n The CreateEventSource method uses the input `sourceData`<xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> and <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> properties to create registry values on the target computer for the new source and its associated event log. A new source name cannot match an existing source name or an existing event log name on the target computer. If the <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> property is not set, the source is registered for the Application event log. If the <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> is not set, the source is registered on the local computer.  \n  \n> [!NOTE]\n>  To create an event source in Windows Vista and later or Windows Server 2003, you must have administrative privileges.  \n>   \n>  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. Starting with Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.  \n>   \n>  Starting with Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n Use <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configuration. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLog.Log%2A> property with the \".evt\" file name extension.  \n  \n Each source can only write to only one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.  \n  \n You can register the event source with localized resource file(s) for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log. If your application writes strings values directly to the event log, you do not need to set these properties.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Then create a different source without resource files, and use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n To change the configuration details of an existing source, you must delete the source and then create it with the new configuration. If other applications or components use the existing source, create a new source with the updated configuration rather than deleting the existing source.  \n  \n> [!NOTE]\n>  If a source is configured for an event log, and you reconfigure it for another event log, you must restart the computer for the changes to take effect."
  example:
  - "The following example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/4fd418fb-73e7-42a9-9ba2-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/4fd418fb-73e7-42a9-9ba2-_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/4fd418fb-73e7-42a9-9ba2-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, resource identifier 5001 is defined for the localized name of the event log.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public static void CreateEventSource (System.Diagnostics.EventSourceCreationData sourceData);
    parameters:
    - id: sourceData
      type: System.Diagnostics.EventSourceCreationData
      description: "Le proprietà di configurazione per l&quot;origine evento e il registro eventi di destinazione."
  overload: System.Diagnostics.EventLog.CreateEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The computer name specified in <code>sourceData</code> is not valid.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The log name specified in <code>sourceData</code> is not valid. Event log names must consist of printable characters and cannot include the characters '*', '?', or '\\\\'.  \n  \n \\- or -  \n  \n The log name specified in <code>sourceData</code> is not valid for user log creation. The Event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \n  \n \\- or -  \n  \n The log name matches an existing event source name.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> results in a registry key path longer than 254 characters.  \n  \n \\- or -  \n  \n The first 8 characters of the log name specified in <code>sourceData</code> are not unique.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> is already registered.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> matches an existing event log name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)
  id: CreateEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: CreateEventSource(String,String)
  nameWithType: EventLog.CreateEventSource(String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Imposta il nome di origine specificata come origine eventi valida per la scrittura di voci in un log nel computer locale. Questo metodo consente inoltre di creare un nuovo log personalizzato nel computer locale."
  remarks: "Use this overload to create a custom log or to create and register a <xref:System.Diagnostics.EventLog.Source%2A> to an existing log on the local computer.  \n  \n If `logName` is `null` or an empty string (\"\") when you call <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, the log defaults to the Application log. If the log does not exist on the local computer, the system creates a custom log and registers your application as a <xref:System.Diagnostics.EventLog.Source%2A> for that log.  \n  \n> [!NOTE]\n>  To create an event source in Windows Vista and later or Windows Server 2003, you must have administrative privileges.  \n>   \n>  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. Starting with Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.  \n>   \n>  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n You only need to create an event source if you are writing to the event log. Before writing an entry to an event log, you must register the event source with the event log as a valid source of events. When you write a log entry, the system uses the <xref:System.Diagnostics.EventLog.Source%2A> to find the appropriate log in which to place your entry. If you are reading the event log, you can either specify the <xref:System.Diagnostics.EventLog.Source%2A>, or a <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.MachineName%2A>.  \n  \n> [!NOTE]\n>  You are not required to specify the <xref:System.Diagnostics.EventLog.MachineName%2A> if you are connecting to a log on the local computer. If you do not specify the <xref:System.Diagnostics.EventLog.MachineName%2A> when reading from a log, the local computer (\".\") is assumed.  \n  \n Use <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configuration. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLog.Log%2A> property with the \".evt\" file name extension.  \n  \n The source must be unique on the local computer; a new source name cannot match an existing source name or an existing event log name. Each source can write to only one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Then create a different source without resource files, and use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n To change the configuration details of an existing source, you must delete the source and then create it with the new configuration. If other applications or components use the existing source, create a new source with the updated configuration rather than deleting the existing source.  \n  \n> [!NOTE]\n>  If a source has already been mapped to a log and you remap it to a new log, you must restart the computer for the changes to take effect."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_15_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_15_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_15_1.vb)]"
  syntax:
    content: public static void CreateEventSource (string source, string logName);
    parameters:
    - id: source
      type: System.String
      description: "Il nome di origine con cui l&quot;applicazione è registrata nel computer locale."
    - id: logName
      type: System.String
      description: "Il nome del log vengono scritti le voci dell&quot;origine. I valori possibili sono applicazione, sistema o un log eventi personalizzato."
  overload: System.Diagnostics.EventLog.CreateEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code> is an empty string (\"\") or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>logName</code> is not a valid event log name. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\\\'.  \n  \n \\- or -  \n  \n <code>logName</code> is not valid for user log creation. The event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \n  \n \\- or -  \n  \n The log name matches an existing event source name.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters.  \n  \n \\- or -  \n  \n The first 8 characters of <code>logName</code> match the first 8 characters of an existing event log name.  \n  \n \\- or -  \n  \n The source cannot be registered because it already exists on the local computer.  \n  \n \\- or -  \n  \n The source name matches an existing event log name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi nel computer locale."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)
  id: CreateEventSource(System.String,System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: CreateEventSource(String,String,String)
  nameWithType: EventLog.CreateEventSource(String,String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Imposta il nome di origine specificata come origine eventi valida per la scrittura di voci in un log nel computer specificato. Questo metodo può essere utilizzato anche per creare un nuovo log personalizzato nel computer specificato."
  remarks: "Use this overload to create a custom log or to create and register a <xref:System.Diagnostics.EventLog.Source%2A> to an existing log on the specified computer.  \n  \n If `logName` is `null` or an empty string (\"\") when you call <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, the log defaults to the Application log. If the log does not exist on the specified computer, the system creates a custom log and registers your application as a <xref:System.Diagnostics.EventLog.Source%2A> for that log.  \n  \n You only need to create an event source if you are writing to the event log. Before writing an entry to an event log, you must register the event source with the event log as a valid source of events. When you write a log entry, the system uses the <xref:System.Diagnostics.EventLog.Source%2A> to find the appropriate log in which to place your entry. If you are reading the event log, you can either specify the <xref:System.Diagnostics.EventLog.Source%2A>, or a <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.MachineName%2A>.  \n  \n> [!NOTE]\n>  To create an event source in Windows Vista and later or Windows Server 2003, you must have administrative privileges.  \n>   \n>  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. In Windows Vista and later, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.  \n>   \n>  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n Use <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configuration. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLog.Log%2A> property with the \".evt\" file name extension.  \n  \n The source must be unique on the local computer; a new source name cannot match an existing source name or an existing event log name. Each source can write to only one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Then create a different source without resource files, and use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n To change the configuration details of an existing source, you must delete the source and then create it with the new configuration. If other applications or components use the existing source, create a new source with the updated configuration rather than deleting the existing source.  \n  \n> [!NOTE]\n>  If a source has already been mapped to a log and you remap it to a new log, you must restart the computer for the changes to take effect."
  example:
  - "The following example creates the source `MySource` on the computer `MyServer`, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cpp[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/cpp/86732307-05e6-4c1a-b98e-_1.cpp)]\n [!code-cs[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/csharp/86732307-05e6-4c1a-b98e-_1.cs)]\n [!code-vb[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/visualbasic/86732307-05e6-4c1a-b98e-_1.vb)]"
  syntax:
    content: public static void CreateEventSource (string source, string logName, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "L&quot;origine con cui l&quot;applicazione è registrata nel computer specificato."
    - id: logName
      type: System.String
      description: "Il nome del log vengono scritti le voci dell&quot;origine. I valori possibili sono applicazione, sistema o un log eventi personalizzato. Se non si specifica un valore, `logName` impostazioni predefinite per l&quot;applicazione."
    - id: machineName
      type: System.String
      description: "Il nome del computer per registrare l&quot;origine evento, o &quot;.&quot; per il computer locale."
  overload: System.Diagnostics.EventLog.CreateEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>machineName</code> is not a valid computer name.  \n  \n \\- or -  \n  \n <code>source</code> is an empty string (\"\") or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>logName</code> is not a valid event log name. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\\\'.  \n  \n \\- or -  \n  \n <code>logName</code> is not valid for user log creation. The event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \n  \n \\- or -  \n  \n The log name matches an existing event source name.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters.  \n  \n \\- or -  \n  \n The first 8 characters of <code>logName</code> match the first 8 characters of an existing event log name on the specified computer.  \n  \n \\- or -  \n  \n The source cannot be registered because it already exists on the specified computer.  \n  \n \\- or -  \n  \n The source name matches an existing event source name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi nel computer specificato."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Delete(System.String)
  id: Delete(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Delete(String)
  nameWithType: EventLog.Delete(String)
  fullName: System.Diagnostics.EventLog.Delete(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Rimuove un registro eventi dal computer locale."
  remarks: "Utilizzare questo metodo quando il log di cui che si desidera eliminare è nel computer locale. È possibile eliminare tutti i log nel computer, purché si disponga di autorizzazioni adeguate.       Rimuove il log specificato da `logName` dal computer locale. Se si desidera eliminare solo l&quot;origine registrata in un log, chiamare <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Se si desidera solo eliminare le voci di log, chiamare <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> Eliminare e <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>sono `static` metodi, pertanto possono essere chiamati sulla classe stessa.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Non è necessario creare una nuova istanza della <xref:System.Diagnostics.EventLog>per chiamarli.</xref:System.Diagnostics.EventLog>       Il metodo Delete Elimina il file che contiene il contenuto del log. Quindi accede il Registro di sistema e rimuove tutte le origini evento registrate per tale registro. Se si ricrea il log in un secondo momento, è necessario registrare nuovamente le origini degli eventi in tal caso debba essere riutilizzate. Se non si registrano le origini evento e ad altri utenti di scrivere in un&quot;origine evento senza specificare un nome di log, verrà creato l&quot;origine evento nel registro eventi dell&quot;applicazione. Pertanto, le applicazioni che precedentemente erano in grado di scrivere voci nel log eliminato e ricreato scriverà nel registro applicazioni di invece perché ora contiene l&quot;origine evento.      > [!NOTE] > Ricreare i log eventi può risultare difficile. Evitare di eliminare i log eventi creato dal sistema, ad esempio il registro applicazione.       Automaticamente l&quot;eliminazione di un log tramite una chiamata al metodo Delete Elimina le origini registrate in tale registro. In questo modo di altre applicazioni che utilizzano tale registro non funzionanti."
  example:
  - "The following example deletes a log from the local computer. The example determines the log from its source.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_12_1.cpp)]\n [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_12_1.vb)]\n [!code-cs[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_12_1.cs)]"
  syntax:
    content: public static void Delete (string logName);
    parameters:
    - id: logName
      type: System.String
      description: 'Il nome del registro da eliminare. I valori possibili sono: applicazione, sicurezza, sistema e qualsiasi registro eventi personalizzato nel computer.'
  overload: System.Diagnostics.EventLog.Delete*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>logName</code>è una stringa vuota (&quot;&quot;) o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The registry key for the event log could not be opened on the local computer.  \n  \n \\- or -  \n  \n The log does not exist on the local computer."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il registro eventi non è stato cancellato.       - oppure - Impossibile aprire il log. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Delete(System.String,System.String)
  id: Delete(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Delete(String,String)
  nameWithType: EventLog.Delete(String,String)
  fullName: System.Diagnostics.EventLog.Delete(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Rimuove un registro eventi dal computer specificato."
  remarks: "Utilizzare questo metodo quando il log di cui che si desidera eliminare è in un computer remoto. È possibile eliminare tutti i log nel computer, purché si disponga di autorizzazioni adeguate.       <xref:System.Diagnostics.EventLog.Delete%2A>Rimuove il log specificato da `logName` dal computer specificato dal `machineName`.</xref:System.Diagnostics.EventLog.Delete%2A> Se si desidera eliminare solo l&quot;origine registrata in un log, chiamare <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Se si desidera solo eliminare le voci di log, chiamare <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> <xref:System.Diagnostics.EventLog.Delete%2A>e <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>sono `static` metodi, pertanto possono essere chiamati sulla classe stessa.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A></xref:System.Diagnostics.EventLog.Delete%2A> Non è necessario creare un&quot;istanza di <xref:System.Diagnostics.EventLog>per chiamarli.</xref:System.Diagnostics.EventLog>       Questo metodo prima elimina il file che contiene il contenuto del log. Quindi accede il Registro di sistema e rimuove tutte le origini evento registrate per tale registro. Se si ricrea il log in un secondo momento, è necessario registrare nuovamente le origini degli eventi in tal caso debba essere riutilizzate. Se non si registrano le origini evento e ad altri utenti di scrivere in un&quot;origine evento senza specificare un nome di log, verrà creato l&quot;origine evento nel registro eventi dell&quot;applicazione. Pertanto, le applicazioni che precedentemente erano in grado di scrivere voci nel log eliminato e ricreato scriverà nel registro applicazioni di invece perché ora contiene l&quot;origine evento.      > [!NOTE] > Ricreare i log eventi può risultare difficile. Evitare di eliminare i log eventi creato dal sistema, ad esempio il registro applicazione.       Eliminazione di un log tramite una chiamata a <xref:System.Diagnostics.EventLog.Delete%2A>Elimina automaticamente le origini registrate in tale registro.</xref:System.Diagnostics.EventLog.Delete%2A> In questo modo di altre applicazioni che utilizzano tale registro non funzionanti."
  example:
  - "The following example deletes a log from the specified computer. The example determines the log from its source.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cs[Classic EventLog.Delete1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_17_1.cs)]\n [!code-cpp[Classic EventLog.Delete1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_17_1.cpp)]\n [!code-vb[Classic EventLog.Delete1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_17_1.vb)]"
  syntax:
    content: public static void Delete (string logName, string machineName);
    parameters:
    - id: logName
      type: System.String
      description: 'Il nome del registro da eliminare. I valori possibili sono: applicazione, sicurezza, sistema e qualsiasi registro eventi personalizzato nel computer specificato.'
    - id: machineName
      type: System.String
      description: "Il nome del computer da cui eliminare i log, o &quot;.&quot; per il computer locale."
  overload: System.Diagnostics.EventLog.Delete*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>logName</code> is an empty string (\"\") or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>machineName</code> is not a valid computer name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The registry key for the event log could not be opened on the specified computer.  \n  \n \\- or -  \n  \n The log does not exist on the specified computer."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il registro eventi non è stato cancellato.       - oppure - Impossibile aprire il log. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String)
  id: DeleteEventSource(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: DeleteEventSource(String)
  nameWithType: EventLog.DeleteEventSource(String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Rimuove la registrazione dell&quot;origine evento dal registro eventi del computer locale."
  remarks: "Utilizzare questo metodo per rimuovere la registrazione di un <xref:System.Diagnostics.EventLog.Source%2A>dal computer locale.</xref:System.Diagnostics.EventLog.Source%2A> DeleteEventSource accede il Registro di sistema nel computer locale e rimuove la registrazione dell&quot;applicazione come origine valida degli eventi.       È possibile rimuovere il componente come origine valida degli eventi, se non è più necessario per scrivere voci in tale registro. Ad esempio, è possibile farlo se è necessario modificare il componente da un log a un altro. Poiché un&quot;origine può essere registrata solo in un log alla volta, la modifica del log è necessario rimuovere la registrazione corrente.       DeleteEventSource rimuove solo l&quot;origine registrata in un log. Se si desidera rimuovere il log stesso, chiamare <xref:System.Diagnostics.EventLog.Delete%2A>.</xref:System.Diagnostics.EventLog.Delete%2A> Se si desidera solo eliminare le voci di log, chiamare <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> <xref:System.Diagnostics.EventLog.Delete%2A>e sono DeleteEventSource `static` metodi, pertanto possono essere chiamati sulla classe stessa.</xref:System.Diagnostics.EventLog.Delete%2A> Non è necessario creare un&quot;istanza di <xref:System.Diagnostics.EventLog>per chiamarli.</xref:System.Diagnostics.EventLog>       Eliminazione di un log tramite una chiamata a <xref:System.Diagnostics.EventLog.Delete%2A>Elimina automaticamente le origini registrate in tale registro.</xref:System.Diagnostics.EventLog.Delete%2A> In questo modo di altre applicazioni che utilizzano tale registro non funzionanti.      > [!NOTE] > Se un&quot;origine è già stata mappata a un log e si riesegue il mapping di un nuovo registro, è necessario riavviare il computer rendere effettive le modifiche."
  example:
  - "The following example deletes a source from the local computer. The example determines the log from its source, and then deletes the log.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_8_1.cpp)]\n [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_8_1.vb)]\n [!code-cs[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_8_1.cs)]"
  syntax:
    content: public static void DeleteEventSource (string source);
    parameters:
    - id: source
      type: System.String
      description: "Il nome con cui l&quot;applicazione è registrata nel registro eventi sistema."
  overload: System.Diagnostics.EventLog.DeleteEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> parameter does not exist in the registry of the local computer.  \n  \n \\- or -  \n  \n You do not have write access on the registry key for the event log."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)
  id: DeleteEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: DeleteEventSource(String,String)
  nameWithType: EventLog.DeleteEventSource(String,String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Rimuove una registrazione dell&quot;origine eventi dell&quot;applicazione dal computer specificato."
  remarks: "Utilizzare questo overload per rimuovere la registrazione di un <xref:System.Diagnostics.EventLog.Source%2A>da un computer remoto.</xref:System.Diagnostics.EventLog.Source%2A> <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>accede a Registro di sistema sul computer specificato dal `machineName` e rimuove la registrazione dell&quot;applicazione come origine valida degli eventi.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A>       È possibile rimuovere il componente come origine valida degli eventi, se non è più necessario per scrivere voci in tale registro. Ad esempio, è possibile farlo se è necessario modificare il componente da un log a un altro. Poiché un&quot;origine può essere registrata solo in un log alla volta, la modifica del log è necessario rimuovere la registrazione corrente.       <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>Rimuove solo l&quot;origine registrata in un log.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Se si desidera rimuovere il log stesso, chiamare <xref:System.Diagnostics.EventLog.Delete%2A>.</xref:System.Diagnostics.EventLog.Delete%2A> Se si desidera solo eliminare le voci di log, chiamare <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> <xref:System.Diagnostics.EventLog.Delete%2A>e <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>sono `static` metodi, pertanto possono essere chiamati sulla classe stessa.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A></xref:System.Diagnostics.EventLog.Delete%2A> Non è necessario creare un&quot;istanza di <xref:System.Diagnostics.EventLog>per chiamarli.</xref:System.Diagnostics.EventLog>       Eliminazione di un log tramite una chiamata a <xref:System.Diagnostics.EventLog.Delete%2A>Elimina automaticamente le origini registrate in tale registro.</xref:System.Diagnostics.EventLog.Delete%2A> In questo modo di altre applicazioni che utilizzano tale registro non funzionanti.      > [!NOTE] > Se un&quot;origine è già stata mappata a un log e si riesegue il mapping di un nuovo registro, è necessario riavviare il computer rendere effettive le modifiche."
  example:
  - "The following example deletes a source from the specified computer. The example determines the log from its source, and then deletes the log.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cs[Classic EventLog.Delete1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_6_1.cs)]\n [!code-cpp[Classic EventLog.Delete1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_6_1.cpp)]\n [!code-vb[Classic EventLog.Delete1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_6_1.vb)]"
  syntax:
    content: public static void DeleteEventSource (string source, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "Il nome con cui l&quot;applicazione è registrata nel registro eventi sistema."
    - id: machineName
      type: System.String
      description: "Il nome del computer da cui rimuovere la registrazione, o &quot;.&quot; per il computer locale."
  overload: System.Diagnostics.EventLog.DeleteEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>machineName</code> parameter is invalid.  \n  \n \\- or -  \n  \n The <code>source</code> parameter does not exist in the registry of the specified computer.  \n  \n \\- or -  \n  \n You do not have write access on the registry key for the event log."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>source</code>Impossibile eliminare perché nel Registro di sistema, la chiave del Registro di sistema padre per <code>source</code> non contiene una sottochiave con lo stesso nome."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLog.Dispose(Boolean)
  fullName: System.Diagnostics.EventLog.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico `Dispose()`(metodo) e <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A>richiama `Dispose` con `disposing` impostato su `false`.</xref:System.Object.Finalize%2A>       Quando il `disposing` parametro è true, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Diagnostics.EventLog>riferimenti.</xref:System.Diagnostics.EventLog> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Diagnostics.EventLog.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.EnableRaisingEvents
  id: EnableRaisingEvents
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EnableRaisingEvents
  nameWithType: EventLog.EnableRaisingEvents
  fullName: System.Diagnostics.EventLog.EnableRaisingEvents
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene o imposta un valore che indica se il <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> riceve <xref href=&quot;System.Diagnostics.EventLog.EntryWritten&quot;> </xref> le notifiche degli eventi."
  remarks: "La proprietà EnableRaisingEvents determina se <xref:System.Diagnostics.EventLog>Genera eventi quando vengono scritte voci nel registro.</xref:System.Diagnostics.EventLog> Quando la proprietà è `true`, componenti che ricevono il <xref:System.Diagnostics.EventLog.EntryWritten>evento riceverà una notifica ogni volta che viene scritta una voce nel log specificato nella <xref:System.Diagnostics.EventLog.Log%2A>proprietà.</xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.EntryWritten> Se è EnableRaisingEvents `false`, viene generato alcun evento.      > [!NOTE] > È possibile ricevere le notifiche degli eventi solo quando vengono registrati nel computer locale. È possibile ricevere notifiche per le voci scritte nel computer remoto."
  example:
  - "The following example handles an <xref:System.Diagnostics.EventLog.EntryWritten> event.  \n  \n [!code-cs[Classic EventLog.EnableRaisingEvents Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_32_1.cs)]\n [!code-vb[Classic EventLog.EnableRaisingEvents Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_32_1.vb)]\n [!code-cpp[Classic EventLog.EnableRaisingEvents Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_32_1.cpp)]"
  syntax:
    content: public bool EnableRaisingEvents { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> riceve una notifica quando una voce viene inserita nel log; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.EnableRaisingEvents*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il registro eventi è in un computer remoto."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.EndInit
  id: EndInit
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EndInit()
  nameWithType: EventLog.EndInit()
  fullName: System.Diagnostics.EventLog.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Termina l&quot;inizializzazione di un <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> usato in un form o da un altro componente. L&quot;inizializzazione avviene in fase di esecuzione."
  remarks: "Il [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] ambiente di progettazione questo metodo per terminare l&quot;inizializzazione di un componente utilizzato in un form o da un altro componente. Il <xref:System.Diagnostics.EventLog.BeginInit%2A>metodo avvia l&quot;inizializzazione.</xref:System.Diagnostics.EventLog.BeginInit%2A> Utilizzo di <xref:System.Diagnostics.EventLog.BeginInit%2A>EndInit metodi e impedisce il controllo venga utilizzato prima che il completamento dell&quot;inizializzazione.</xref:System.Diagnostics.EventLog.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Diagnostics.EventLog.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Entries
  id: Entries
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Entries
  nameWithType: EventLog.Entries
  fullName: System.Diagnostics.EventLog.Entries
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene il contenuto del registro eventi."
  remarks: "Utilizzare il membro voci durante la lettura dal registro eventi.       Poiché la proprietà è di sola lettura, è possibile modificare una voce o scrivere nel log utilizzando le voci. Specificare invece un <xref:System.Diagnostics.EventLog.Source%2A>e chiamare <xref:System.Diagnostics.EventLog.WriteEntry%2A>per scrivere una nuova voce di log.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A> È possibile utilizzare le voci per contare il numero di voci nel registro eventi e visualizzare ogni <xref:System.Diagnostics.EventLogEntry>nella raccolta.</xref:System.Diagnostics.EventLogEntry> Utilizzare indicizzata <xref:System.Diagnostics.EventLogEntryCollection.Item%2A>membro per recuperare informazioni su una voce specifica, ad esempio <xref:System.Diagnostics.EventLogEntry.Message%2A>, <xref:System.Diagnostics.EventLogEntry.Category%2A>, <xref:System.Diagnostics.EventLogEntry.TimeWritten%2A>, o <xref:System.Diagnostics.EventLogEntry.EntryType%2A>.</xref:System.Diagnostics.EventLogEntry.EntryType%2A> </xref:System.Diagnostics.EventLogEntry.TimeWritten%2A> </xref:System.Diagnostics.EventLogEntry.Category%2A> </xref:System.Diagnostics.EventLogEntry.Message%2A> </xref:System.Diagnostics.EventLogEntryCollection.Item%2A>       Non è necessario specificare un <xref:System.Diagnostics.EventLog.Source%2A>durante la lettura solo da un registro.</xref:System.Diagnostics.EventLog.Source%2A> È possibile specificare solo il <xref:System.Diagnostics.EventLog.Log%2A>nome e <xref:System.Diagnostics.EventLog.MachineName%2A>proprietà (nome del computer server) per il <xref:System.Diagnostics.EventLog>istanza.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> In entrambi i casi, il membro di voci viene popolato automaticamente con l&quot;elenco delle voci del log eventi. È possibile selezionare l&quot;indice appropriato per un elemento in questo elenco per leggere le singole voci.       Una differenza importante tra lettura e scrittura di voci di log è che non è necessario chiamare in modo esplicito un metodo di lettura. Dopo il <xref:System.Diagnostics.EventLog.Log%2A>e <xref:System.Diagnostics.EventLog.MachineName%2A>specificato, la proprietà di voci viene popolata automaticamente.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> Se si modifica il valore della <xref:System.Diagnostics.EventLog.Log%2A> <xref:System.Diagnostics.EventLog.MachineName%2A>proprietà, le voci ricompilata alla successiva che leggere tale proprietà</xref:System.Diagnostics.EventLog.MachineName%2A> o</xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Non è necessario specificare <xref:System.Diagnostics.EventLog.MachineName%2A>Se ci si connette a un registro.</xref:System.Diagnostics.EventLog.MachineName%2A> Se non si specifica il <xref:System.Diagnostics.EventLog.MachineName%2A>, il computer locale &quot;.&quot;, si presuppone che.</xref:System.Diagnostics.EventLog.MachineName%2A>"
  example:
  - "The following example reads entries in the event log, \"MyNewLog\", on the local computer.  \n  \n [!code-cs[Classic EventLog.Entries Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_23_1.cs)]\n [!code-cpp[Classic EventLog.Entries Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_23_1.cpp)]\n [!code-vb[Classic EventLog.Entries Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_23_1.vb)]"
  syntax:
    content: public System.Diagnostics.EventLogEntryCollection Entries { get; }
    return:
      type: System.Diagnostics.EventLogEntryCollection
      description: "Un <xref href=&quot;System.Diagnostics.EventLogEntryCollection&quot;> </xref> che contiene le voci nel registro eventi. Ogni voce è associata a un&quot;istanza di <xref href=&quot;System.Diagnostics.EventLogEntry&quot;> </xref> classe."
  overload: System.Diagnostics.EventLog.Entries*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.EntryWritten
  id: EntryWritten
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EntryWritten
  nameWithType: EventLog.EntryWritten
  fullName: System.Diagnostics.EventLog.EntryWritten
  type: Event
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Si verifica quando viene scritta una voce nel log eventi nel computer locale."
  remarks: "Per ottenere le notifiche degli eventi, è necessario impostare <xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A>a `true`.</xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A> È possibile ricevere le notifiche degli eventi solo quando le voci vengono scritte nel computer locale. È possibile ricevere notifiche per le voci scritte nel computer remoto.       Quando si crea un delegato EntryWritten, si identifica il metodo che gestirà l&quot;evento. Per associare l&quot;evento al gestore eventi, aggiungere un&quot;istanza del delegato all&quot;evento. Il gestore eventi viene chiamato ogni volta che l&quot;evento si verifica, fino a quando non venga rimosso il delegato. Per ulteriori informazioni sulla gestione degli eventi con i delegati, vedere [eventi](~/add/includes/ajax-current-ext-md.md).       Il sistema risponde a <xref:System.Diagnostics.EventLog.WriteEntry%2A>solo se l&quot;ultimo evento di scrittura si è verificato almeno sei secondi.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Ciò implica che solo riceverà una notifica degli eventi EntryWritten entro un intervallo di sei secondi, anche se più di un registro eventi di modifica. Se si inserisce un intervallo di inattività sufficientemente lungo (circa 10 secondi) tra le chiamate a <xref:System.Diagnostics.EventLog.WriteEntry%2A>, hanno meno probabilità di perdita di un evento.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Tuttavia, se gli eventi di scrittura si verificano più spesso, si potrebbe non ricevere la notifica degli eventi fino al successivo intervallo. In genere, le notifiche degli eventi mancanti non vengono persi, ma ritardati."
  example:
  - "The following example handles an entry written event.  \n  \n [!code-cs[Classic EventLog.EntryWritten Example#1](~/add/codesnippet/csharp/e-system.diagnostics.eve_1.cs)]\n [!code-cpp[Classic EventLog.EntryWritten Example#1](~/add/codesnippet/cpp/e-system.diagnostics.eve_1.cpp)]\n [!code-vb[Classic EventLog.EntryWritten Example#1](~/add/codesnippet/visualbasic/e-system.diagnostics.eve_1.vb)]"
  syntax:
    content: public event System.Diagnostics.EntryWrittenEventHandler EntryWritten;
    return:
      type: System.Diagnostics.EntryWrittenEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Exists(System.String)
  id: Exists(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Exists(String)
  nameWithType: EventLog.Exists(String)
  fullName: System.Diagnostics.EventLog.Exists(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determina se il log esiste nel computer locale."
  remarks: "Utilizzare questo metodo per determinare se un log esiste nel computer locale. Se si desidera determinare la presenza di un&quot;origine nel computer locale, utilizzare <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A>       Poiché questo metodo accede del Registro di sistema, è necessario disporre di autorizzazioni adeguate del computer locale; in caso contrario, la query restituisce `false`.       Poiché è possibile assegnare il nome di un log esistente un nuovo log nello stesso computer, utilizzare questo metodo prima di creare un nuovo log per determinare se l&quot;oggetto specificato `logName` esiste già nel computer locale. Il `logName` parametro non viene fatta distinzione tra maiuscole e minuscole.       Esiste sia una `static` metodo, pertanto può essere chiamato sulla classe stessa. Non è necessario creare un&quot;istanza di <xref:System.Diagnostics.EventLog>chiamare Exists.</xref:System.Diagnostics.EventLog>"
  example:
  - >-
    [!code-cpp[EventLog_Exists_1#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_4_1.cpp)]
     [!code-vb[EventLog_Exists_1#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_4_1.vb)]
     [!code-cs[EventLog_Exists_1#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_4_1.cs)]
  syntax:
    content: public static bool Exists (string logName);
    parameters:
    - id: logName
      type: System.String
      description: 'Il nome del log per la ricerca. I valori possibili sono: applicazione, sicurezza, sistema, altri log specifici dell&quot;applicazione (ad esempio quelli associati ad Active Directory) o qualsiasi log personalizzato nel computer.'
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il log esiste nel computer locale. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.Exists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il parametro logName è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o il valore è vuoto."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Exists(System.String,System.String)
  id: Exists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Exists(String,String)
  nameWithType: EventLog.Exists(String,String)
  fullName: System.Diagnostics.EventLog.Exists(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determina se il log esiste nel computer specificato."
  remarks: "Utilizzare questo metodo per determinare l&quot;esistenza di un log in un computer remoto. Se si desidera determinare la presenza di un&quot;origine in un computer remoto, utilizzare <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A>       Poiché questo metodo accede del Registro di sistema, è necessario disporre di autorizzazioni appropriate del Registro di sistema nel computer specificato; in caso contrario, la query restituisce `false`.       Poiché è possibile assegnare il nome di un log esistente un nuovo log nello stesso computer, utilizzare questo metodo prima di creare un nuovo log per determinare se uno con l&quot;oggetto specificato `logName` esiste già nel server specificato da di `machineName` parametro. Il `logName` e `machineName` i parametri non sono tra maiuscole e minuscole.       <xref:System.Diagnostics.EventLog.Exists%2A>è un `static` metodo, pertanto può essere chiamato sulla classe stessa.</xref:System.Diagnostics.EventLog.Exists%2A> Non è necessario creare una nuova istanza <xref:System.Diagnostics.EventLog>di chiamare <xref:System.Diagnostics.EventLog.Exists%2A>.</xref:System.Diagnostics.EventLog.Exists%2A> </xref:System.Diagnostics.EventLog>"
  syntax:
    content: public static bool Exists (string logName, string machineName);
    parameters:
    - id: logName
      type: System.String
      description: 'Il log per la ricerca. I valori possibili sono: applicazione, sicurezza, sistema, altri log specifici dell&quot;applicazione (ad esempio quelli associati ad Active Directory) o qualsiasi log personalizzato nel computer.'
    - id: machineName
      type: System.String
      description: "Il nome del computer in cui eseguire la ricerca per il log, o &quot;.&quot; per il computer locale."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il log esiste nel computer specificato. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.Exists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> machineName </code> parametro è un formato non valido. Assicurarsi di che aver utilizzato la sintassi corretta per il computer in cui si esegue la ricerca.       - o - <code> logName </code> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o il valore è vuoto."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.GetEventLogs
  id: GetEventLogs
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: GetEventLogs()
  nameWithType: EventLog.GetEventLogs()
  fullName: System.Diagnostics.EventLog.GetEventLogs()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Cerca tutti i registri eventi nel computer locale e crea una matrice di <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> gli oggetti che contengono l&quot;elenco."
  remarks: "Matrice di <xref:System.Diagnostics.EventLog>oggetti è uno snapshot di tutti i registri eventi nel computer locale quando viene effettuata la chiamata a GetEventLogs.</xref:System.Diagnostics.EventLog> Questo non è un insieme dinamico, pertanto non riflette l&quot;eliminazione o la creazione di log in tempo reale. È necessario verificare l&quot;esistenza di un log nella matrice prima di leggere o scrivere a esso. La matrice include in genere almeno tre log: applicazione, sistema e sicurezza. Se si creano log personalizzato nel computer locale, verranno visualizzati anche della matrice.       Per recuperare l&quot;elenco dei registri eventi, è necessario disporre di autorizzazioni adeguate. Queste autorizzazioni sono identiche a quelle necessarie per chiamare <xref:System.Diagnostics.EventLog.Exists%2A>e <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A> </xref:System.Diagnostics.EventLog.Exists%2A>"
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_10_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/m-system.diagnostics.eve_10_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/m-system.diagnostics.eve_10_1.cs)]"
  syntax:
    content: public static System.Diagnostics.EventLog[] GetEventLogs ();
    parameters: []
    return:
      type: System.Diagnostics.EventLog[]
      description: "Matrice di tipo <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> che rappresenta i log nel computer locale."
  overload: System.Diagnostics.EventLog.GetEventLogs*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Non si dispone dell&quot;accesso in lettura al Registro di sistema.       - o - è presente alcun servizio Registro eventi nel computer."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.GetEventLogs(System.String)
  id: GetEventLogs(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: GetEventLogs(String)
  nameWithType: EventLog.GetEventLogs(String)
  fullName: System.Diagnostics.EventLog.GetEventLogs(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Cerca tutti i registri eventi nel computer specificato e crea una matrice di <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> gli oggetti che contengono l&quot;elenco."
  remarks: "Matrice di <xref:System.Diagnostics.EventLog>oggetti è uno snapshot di tutti i registri eventi nel computer specificato per il `machineName` parametro quando la chiamata a <xref:System.Diagnostics.EventLog.GetEventLogs%2A>viene effettuata.</xref:System.Diagnostics.EventLog.GetEventLogs%2A> </xref:System.Diagnostics.EventLog> Questo non è un insieme dinamico, pertanto non riflette l&quot;eliminazione o la creazione di log in tempo reale. È necessario verificare l&quot;esistenza di un log nella matrice prima di leggere o scrivere a esso. La matrice include in genere almeno tre log: applicazione, sistema e sicurezza. Se si creano log personalizzato nel computer specificato, verranno visualizzati anche della matrice.       <xref:System.Diagnostics.EventLog.GetEventLogs%2A>è un `static` metodo, pertanto può essere chiamato sulla <xref:System.Diagnostics.EventLog>classe stessa.</xref:System.Diagnostics.EventLog></xref:System.Diagnostics.EventLog.GetEventLogs%2A> Non è necessario creare un&quot;istanza di un <xref:System.Diagnostics.EventLog>oggetto di effettuare una chiamata al metodo.</xref:System.Diagnostics.EventLog>       Per recuperare l&quot;elenco dei registri eventi, è necessario disporre di autorizzazioni adeguate. Queste autorizzazioni sono identiche a quelle necessarie per chiamare <xref:System.Diagnostics.EventLog.Exists%2A>e <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A> </xref:System.Diagnostics.EventLog.Exists%2A>"
  example:
  - "The following example gets a list of logs on the computer \"myServer\". It then outputs the name of each log.  \n  \n [!code-cpp[Classic EventLog.GetEventLogs1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_18_1.cpp)]\n [!code-cs[Classic EventLog.GetEventLogs1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_18_1.cs)]\n [!code-vb[Classic EventLog.GetEventLogs1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_18_1.vb)]"
  syntax:
    content: public static System.Diagnostics.EventLog[] GetEventLogs (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "Computer in cui eseguire la ricerca dei registri eventi."
    return:
      type: System.Diagnostics.EventLog[]
      description: "Matrice di tipo <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> che rappresenta i log in un dato computer."
  overload: System.Diagnostics.EventLog.GetEventLogs*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> machineName </code> parametro è un nome di computer non valido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Non si dispone dell&quot;accesso in lettura al Registro di sistema.       - o - è presente alcun servizio Registro eventi nel computer."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Log
  id: Log
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Log
  nameWithType: EventLog.Log
  fullName: System.Diagnostics.EventLog.Log
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene o imposta il nome del log da leggere o scrivere."
  remarks: "Three log files exist by default on the server: Application, System, and Security. Applications and services use the Application log file. Device drivers use the System log file. The system generates success and failure audit events in the Security log when auditing is turned on. If you have other applications installed, like Active Directory on Windows servers, there might be other default log files. In addition, you can create custom log files on a local or remote computer. Custom logs help organize your entries in a more detailed way than is allowed when your components write events to the default Application log.  \n  \n> [!NOTE]\n>  Log names are limited to eight characters. According to the system, MyLogSample1 and MyLogSample2 are the same log.  \n  \n If you write to an event log, it is not enough to specify the Log property. You must associate a <xref:System.Diagnostics.EventLog.Source%2A> property with your event log resource to connect it to a particular log. It is not necessary to specify a <xref:System.Diagnostics.EventLog.Source%2A> when only reading from a log, but an event source must be associated with the event log resource in the server's registry. You can specify only the Log name and <xref:System.Diagnostics.EventLog.MachineName%2A> (server computer name) to read from it.  \n  \n> [!NOTE]\n>  You are not required to specify the <xref:System.Diagnostics.EventLog.MachineName%2A> if you are connecting to a log. If you do not specify the <xref:System.Diagnostics.EventLog.MachineName%2A>, the local computer (\".\") is assumed.  \n  \n If the <xref:System.Diagnostics.EventLog.Source%2A> property has not been specified, a call to Log returns an empty string if Log has not been explicitly set (by setting the Log property, or through the constructor). If the <xref:System.Diagnostics.EventLog.Source%2A> has been specified, Log returns the name of the log to which that source was registered.  \n  \n A source can only be registered to one log at a time. If the <xref:System.Diagnostics.EventLog.Source%2A> property was set for an instance of <xref:System.Diagnostics.EventLog>, you cannot change the Log property for that <xref:System.Diagnostics.EventLog> without changing the value of <xref:System.Diagnostics.EventLog.Source%2A> or calling <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> first. If you change the Log property after the <xref:System.Diagnostics.EventLog.Source%2A> property has been set, writing a log entry throws an exception.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the Log property with the \".evt\" file name extension.  \n  \n You cannot create a new log using the Log property alone (without specifying a source for the log). You can call <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, passing in a new log name as a parameter, and then call <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>. However, the intent is usually either to create (and write entries to) new application-specific logs, or to read from existing logs.  \n  \n If the Log value changes, the event log is closed and all event handles are released.  \n  \n> [!CAUTION]\n>  If you set the Log property to the name of a log that does not exist, the system attaches the <xref:System.Diagnostics.EventLog> to the Application log, but does not warn you that it is using a log other than the one you specified."
  example:
  - "The following example reads entries in the event log, \"NewEventLog\", on the local computer.  \n  \n [!code-cpp[Classic EventLog.Log Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_17_1.cpp)]\n [!code-cs[Classic EventLog.Log Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_17_1.cs)]\n [!code-vb[Classic EventLog.Log Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_17_1.vb)]"
  syntax:
    content: public string Log { get; set; }
    return:
      type: System.String
      description: "Il nome del log. Può trattarsi di applicazione, sistema, sicurezza o un nome di log personalizzato. Il valore predefinito è una stringa vuota (&quot;&quot;)."
  overload: System.Diagnostics.EventLog.Log*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.LogDisplayName
  id: LogDisplayName
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: LogDisplayName
  nameWithType: EventLog.LogDisplayName
  fullName: System.Diagnostics.EventLog.LogDisplayName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene nome descrittivo del registro eventi."
  remarks: "> [!NOTE]> In Windows Vista e versioni successive, gli utenti non dispone dell&quot;autorizzazione per accedere al Registro di sicurezza. Se si sta eseguendo Windows Vista o versione successiva come un utente, si otterrà un <xref:System.Security.SecurityException>quando si tenta di accedere al nome visualizzato di un evento nel registro eventi di sicurezza.</xref:System.Security.SecurityException>   >> In Windows Vista e versioni successive, il controllo dell&quot;Account utente (UAC) determina i privilegi di un utente. Si è un membro del gruppo Administrators predefinito, vengono assegnati due token di accesso in fase di esecuzione: un token di accesso utente standard e un token di accesso di amministratore. Per impostazione predefinita, viene assegnato il ruolo dell&quot;utente standard. Per eseguire il codice che accede al Registro di sicurezza, è necessario elevare i privilegi da utente standard ad amministratore. È possibile farlo quando si avvia un&quot;applicazione facendo clic sull&quot;icona dell&quot;applicazione e indicando che si desidera eseguire come amministratore."
  example:
  - "The following example enumerates the event logs defined on the local computer and displays the LogDisplayName for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_29_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_29_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_29_1.cs)]"
  syntax:
    content: public string LogDisplayName { get; }
    return:
      type: System.String
      description: "Un nome che rappresenta il registro eventi nel Visualizzatore eventi del sistema."
  overload: System.Diagnostics.EventLog.LogDisplayName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Specificato <xref:System.Diagnostics.EventLog.Log*>non esiste nel Registro di sistema per questo computer.</xref:System.Diagnostics.EventLog.Log*>"
  platform:
  - net462
- uid: System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)
  id: LogNameFromSourceName(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: LogNameFromSourceName(String,String)
  nameWithType: EventLog.LogNameFromSourceName(String,String)
  fullName: System.Diagnostics.EventLog.LogNameFromSourceName(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene il nome del log a cui è registrata l&quot;origine specificata."
  remarks: "L&quot;origine eventi indica ciò che registra l&quot;evento. È spesso il nome dell&quot;applicazione o il nome del sottocomponente dell&quot;applicazione, se l&quot;applicazione è di grandi dimensioni. Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema.       Quando si crea una nuova origine, che è possibile scrivere solo in un log alla volta, il sistema registra l&quot;applicazione con il registro eventi come origine valida delle voci. Il <xref:System.Diagnostics.EventLog.Source%2A>proprietà può essere qualsiasi stringa, ma il nome non può essere utilizzato da altre origini nel computer.</xref:System.Diagnostics.EventLog.Source%2A> Un tentativo di creare un duplicato <xref:System.Diagnostics.EventLog.Source%2A>valore genera un&quot;eccezione.</xref:System.Diagnostics.EventLog.Source%2A> Tuttavia, un singolo registro eventi può avere molte origini diverse, scrivere in esso."
  example:
  - "The following example deletes a source from the local computer. The example determines the log from its source, and then deletes the log.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_2_1.cpp)]\n [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_2_1.vb)]\n [!code-cs[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_2_1.cs)]"
  syntax:
    content: public static string LogNameFromSourceName (string source, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "Il nome dell&quot;origine evento."
    - id: machineName
      type: System.String
      description: "Il nome del computer in cui cercare oppure &quot;.&quot; per il computer locale."
    return:
      type: System.String
      description: "Il nome del log associato all&quot;origine specificato nel Registro di sistema."
  overload: System.Diagnostics.EventLog.LogNameFromSourceName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.MachineName
  id: MachineName
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: MachineName
  nameWithType: EventLog.MachineName
  fullName: System.Diagnostics.EventLog.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene o imposta il nome del computer in cui leggere o scrivere gli eventi."
  remarks: "Se si scrive in un log eventi, è necessario associare una <xref:System.Diagnostics.EventLog.Source%2A>con l&quot;oggetto registro eventi per la connessione a un registro specifico.</xref:System.Diagnostics.EventLog.Source%2A> Non è necessario specificare la <xref:System.Diagnostics.EventLog.Source%2A>proprietà durante la lettura solo da un registro.</xref:System.Diagnostics.EventLog.Source%2A> È possibile specificare solo il <xref:System.Diagnostics.EventLog.Log%2A>nome e MachineName (nome del computer server).</xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Non è necessario specificare la proprietà MachineName se ci si connette a un log. Se non si specifica la proprietà MachineName, il computer locale (&quot;.&quot;) verrà utilizzato.       Un&quot;origine può essere registrata solo in un log alla volta. Se il <xref:System.Diagnostics.EventLog.Source%2A>proprietà è stata impostata per un&quot;istanza di <xref:System.Diagnostics.EventLog>, per cui non è possibile modificare la proprietà MachineName <xref:System.Diagnostics.EventLog>senza modificare il valore di <xref:System.Diagnostics.EventLog.Source%2A>o chiamare <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>prima.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Se si modifica la proprietà MachineName, il <xref:System.Diagnostics.EventLog>chiude tutti gli handle e ricollegare quest&quot;ultimo per il log e l&quot;origine nel nuovo computer.</xref:System.Diagnostics.EventLog>       Il valore di MachineName non può essere una stringa vuota. Se non è esplicitamente impostato, il valore predefinito nel computer locale (&quot;.&quot;)."
  example:
  - "The following example reads entries in the event log, \"NewEventLog\", on a specified computer.  \n  \n [!code-cs[Classic EventLog.MachineName Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_6_1.cs)]\n [!code-vb[Classic EventLog.MachineName Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_6_1.vb)]\n [!code-cpp[Classic EventLog.MachineName Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_6_1.cpp)]"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "Il nome del server in cui risiede il log eventi. Il valore predefinito è il computer locale (&quot;.&quot;)."
  overload: System.Diagnostics.EventLog.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il nome del computer non è valido."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.MaximumKilobytes
  id: MaximumKilobytes
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: MaximumKilobytes
  nameWithType: EventLog.MaximumKilobytes
  fullName: System.Diagnostics.EventLog.MaximumKilobytes
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene o imposta la dimensione massima del registro eventi in KB."
  remarks: "La proprietà MaximumKilobytes rappresenta il limite delle dimensioni del file di log eventi. Quando il registro eventi raggiunge il limite delle dimensioni, l&quot;applicazione configurato <xref:System.Diagnostics.EventLog.OverflowAction%2A>valore determina se ignorare le nuove voci oppure sovrascrivono le voci meno recenti nuove voci.</xref:System.Diagnostics.EventLog.OverflowAction%2A>      > [!NOTE] > Questa proprietà rappresenta un&quot;impostazione di configurazione per il log eventi rappresentato da questa istanza. Quando il registro eventi raggiunge la dimensione massima, questa proprietà specifica la modalità di gestione delle nuove voci scritte da tutte le origini di eventi registrate per il log eventi del sistema operativo."
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_15_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_15_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_15_1.cs)]"
  syntax:
    content: public long MaximumKilobytes { get; set; }
    return:
      type: System.Int64
      description: "La dimensione massima del registro eventi in kilobyte. Il valore predefinito è 512, che indica una dimensione massima di 512 KB."
  overload: System.Diagnostics.EventLog.MaximumKilobytes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il valore specificato è minore di 64 bit, o maggiore di 4194240 oppure non è un multiplo di 64."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.EventLog.Log*> value is not a valid log name.  \n  \n \\- or -  \n  \n The registry key for the event log could not be opened on the target computer."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.MinimumRetentionDays
  id: MinimumRetentionDays
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: MinimumRetentionDays
  nameWithType: EventLog.MinimumRetentionDays
  fullName: System.Diagnostics.EventLog.MinimumRetentionDays
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene il numero di giorni di conservazione delle voci nel registro eventi."
  remarks: "Utilizzare la proprietà MinimumRetentionDays per esaminare l&quot;impostazione corrente per un registro eventi. Utilizzare <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>per modificare il numero minimo di giorni in cui ogni voce nel registro eventi deve essere mantenuta.</xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>       Il valore di MinimumRetentionDays dipende dal comportamento di overflow configurato del registro eventi. Se il <xref:System.Diagnostics.OverflowAction>per un registro eventi è impostata su <xref:System.Diagnostics.OverflowAction>, il valore MinimumRetentionDays è 0.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.OverflowAction> Se il <xref:System.Diagnostics.OverflowAction>per un registro eventi è impostata su <xref:System.Diagnostics.OverflowAction>, il valore MinimumRetentionDays è -1.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.OverflowAction> Se il <xref:System.Diagnostics.OverflowAction>per un registro eventi è impostata su <xref:System.Diagnostics.OverflowAction>, significa che il valore MinimumRetentionDays è maggiore di zero e rappresenta il numero di giorni per cui le voci del registro eventi quando il registro eventi è pieno.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.OverflowAction>       Il comportamento di overflow si verifica solo quando un registro eventi raggiunge la dimensione massima. Quando un <xref:System.Diagnostics.EventLog>è relativo <xref:System.Diagnostics.EventLog.OverflowAction%2A>impostato su <xref:System.Diagnostics.OverflowAction>e il registro eventi raggiunge la dimensione massima, quindi nuove voci vengono scritte solo se possono sostituire voci precedenti al periodo di MinimumRetentionDays.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.EventLog.OverflowAction%2A> </xref:System.Diagnostics.EventLog> Mantenendo le voci di eventi per un periodo minimo è appropriato quando il registro eventi viene archiviato regolarmente. In caso contrario, si rischia di perdere le nuove voci quando il registro eventi raggiunge il limite. Per evitare la perdita di informazioni sul nuovo evento, impostare i giorni di memorizzazione minimo per gli eventi in base alla pianificazione dell&quot;archiviazione per un determinato registro eventi."
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_12_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_12_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_12_1.cs)]"
  syntax:
    content: public int MinimumRetentionDays { get; }
    return:
      type: System.Int32
      description: "Il numero di giorni durante i quali vengono conservate le voci nel registro eventi. Il valore predefinito è 7."
  overload: System.Diagnostics.EventLog.MinimumRetentionDays*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  id: ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: ModifyOverflowPolicy(OverflowAction,Int32)
  nameWithType: EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
  fullName: System.Diagnostics.EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Modifica il comportamento configurato per la scrittura di nuove voci quando il registro eventi raggiunge la dimensione massima del file."
  remarks: "Il comportamento di overflow per un log eventi specifica che cosa avviene quando le nuove voci vengono scritti in un log che ha raggiunto la dimensione massima del file.      > [!NOTE] > Il comportamento di overflow ha effetto solo quando un registro eventi raggiunge la dimensione massima del file. Il comportamento di overflow non influenza la scrittura di una nuova voce in un log che può contenere voci registro eventi aggiuntivo.       Il metodo ModifyOverflowPolicy consente di configurare il comportamento di overflow di un registro eventi. <xref:System.Diagnostics.EventLog>istanza.</xref:System.Diagnostics.EventLog> Dopo aver chiamato questo metodo per il registro eventi specificato da di <xref:System.Diagnostics.EventLog.Log%2A>proprietà, il <xref:System.Diagnostics.EventLog.OverflowAction%2A>e <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A>i valori delle proprietà riflettono il comportamento di overflow appena configurato.</xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> </xref:System.Diagnostics.EventLog.OverflowAction%2A> </xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Questa proprietà rappresenta un&quot;impostazione di configurazione per il log eventi rappresentato da questa istanza. Quando il registro eventi raggiunge la dimensione massima, questa proprietà specifica la modalità di gestione delle nuove voci scritte da tutte le origini di eventi registrate per il log eventi del sistema operativo.       Impostare il `action` parametro <xref:System.Diagnostics.OverflowAction>per indicare che una voce nuova sovrascrive quella meno recente quando il <xref:System.Diagnostics.EventLog>raggiunge le dimensioni massime.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.OverflowAction> Se il `action` parametro è impostato su <xref:System.Diagnostics.OverflowAction>, `retentionDays` valore del parametro viene ignorato.</xref:System.Diagnostics.OverflowAction>       Impostare il `action` parametro <xref:System.Diagnostics.OverflowAction>per indicare che ogni voce nuova sovrascrive le voci meno recenti quando il <xref:System.Diagnostics.EventLog>raggiunge le dimensioni massime.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.OverflowAction> Specificare il numero di giorni per cui gli eventi devono essere mantenuti nel log utilizzando il `retentionDays` parametro. Gli eventi scritti entro il periodo di conservazione non vengono sovrascritte dalle nuove voci.       Impostare il `action` parametro <xref:System.Diagnostics.OverflowAction>per ignorare i nuovi eventi quando viene raggiunta la dimensione massima del registro.</xref:System.Diagnostics.OverflowAction> Se il `action` parametro è impostato su <xref:System.Diagnostics.OverflowAction>, `retentionDays` valore del parametro viene ignorato.</xref:System.Diagnostics.OverflowAction>      > [!CAUTION] > L&quot;impostazione dei criteri di overflow su <xref:System.Diagnostics.OverflowAction>specifica di ignorare le nuove voci quando il registro eventi è pieno.</xref:System.Diagnostics.OverflowAction> Se si utilizza questa impostazione, verificare il registro eventi viene regolarmente archiviato e chiuso per evitare di raggiungere il limite di dimensioni massime."
  example:
  - "The following example displays the configured overflow policy for a specified event log, and allows the user to select a new overflow policy setting for the event log.  \n  \n [!code-vb[EventLogProperties#3](~/add/codesnippet/visualbasic/0b0fc273-a638-4af9-ae99-_1.vb)]\n [!code-cpp[EventLogProperties#3](~/add/codesnippet/cpp/0b0fc273-a638-4af9-ae99-_1.cpp)]\n [!code-cs[EventLogProperties#3](~/add/codesnippet/csharp/0b0fc273-a638-4af9-ae99-_1.cs)]"
  syntax:
    content: public void ModifyOverflowPolicy (System.Diagnostics.OverflowAction action, int retentionDays);
    parameters:
    - id: action
      type: System.Diagnostics.OverflowAction
      description: "Il comportamento di overflow per la scrittura di nuove voci nel registro eventi."
    - id: retentionDays
      type: System.Int32
      description: "Il numero minimo di giorni per cui che ogni voce del registro eventi viene mantenuto. Questo parametro viene utilizzato solo se `action` è impostato su <xref href=&quot;System.Diagnostics.OverflowAction&quot;> </xref>."
  overload: System.Diagnostics.EventLog.ModifyOverflowPolicy*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>action</code>non è un valido <xref:System.Diagnostics.EventLog.OverflowAction*> valore."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>retentionDays</code>è minore di 1, o maggiore di 365."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.EventLog.Log*> value is not a valid log name.  \n  \n \\- or -  \n  \n The registry key for the event log could not be opened on the target computer."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.OverflowAction
  id: OverflowAction
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: OverflowAction
  nameWithType: EventLog.OverflowAction
  fullName: System.Diagnostics.EventLog.OverflowAction
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene il comportamento configurato per l&quot;archiviazione delle nuove voci quando il registro eventi raggiunge la dimensione massima."
  remarks: "Registri eventi di aumento delle dimensioni come nuovi eventi scritti. Ogni log eventi ha un limite di dimensione massima configurata; il <xref:System.Diagnostics.EventLog.MaximumKilobytes%2A>proprietà definisce il numero massimo di KB consentiti per le dimensioni del file registro eventi.</xref:System.Diagnostics.EventLog.MaximumKilobytes%2A>       Utilizzare il valore della proprietà OverflowAction per esaminare il comportamento di overflow configurato per un log eventi quando la dimensione massima. Utilizzare il <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>metodo per modificare il comportamento di overflow per un registro eventi.</xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>      > [!NOTE] > Il comportamento di overflow ha effetto solo quando un registro eventi raggiunge la dimensione massima del file. Il comportamento di overflow non influenza la scrittura di una nuova voce in un log che può contenere voci registro eventi aggiuntivo."
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_28_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_28_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_28_1.cs)]"
  syntax:
    content: public System.Diagnostics.OverflowAction OverflowAction { get; }
    return:
      type: System.Diagnostics.OverflowAction
      description: "Il <xref href=&quot;System.Diagnostics.OverflowAction&quot;> </xref> valore che specifica il comportamento configurato per l&quot;archiviazione delle nuove voci quando il registro eventi raggiunge la dimensione massima del registro. Il valore predefinito è <xref href=&quot;System.Diagnostics.OverflowAction&quot;> </xref>."
  overload: System.Diagnostics.EventLog.OverflowAction*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)
  id: RegisterDisplayName(System.String,System.Int64)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: RegisterDisplayName(String,Int64)
  nameWithType: EventLog.RegisterDisplayName(String,Int64)
  fullName: System.Diagnostics.EventLog.RegisterDisplayName(String,Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Specifica il nome localizzato del registro eventi, che viene visualizzato nel Visualizzatore eventi del server."
  remarks: "Utilizzare RegisterDisplayName per registrare e un nome localizzato visualizzato nel Visualizzatore eventi per i registri eventi personalizzati.       Identificatore di risorsa specificato deve corrispondere a una stringa localizzata definita nel file di risorse. Il Visualizzatore eventi consente di visualizzare il nome registro eventi personalizzato utilizzando la stringa localizzata e le impostazioni cultura correnti. Ad esempio, è possibile definire più nomi di registro eventi localizzati per diverse impostazioni cultura nel file di risorse. Il Visualizzatore eventi consente di visualizzare la stringa localizzata corrispondente alle impostazioni cultura dell&quot;utente corrente.       Se il Visualizzatore eventi non è possibile caricare la stringa localizzata dal file di risorse o se è stato registrato alcun nome visualizzato per il log eventi, il Visualizzatore eventi visualizza il nome di registro eventi definito in <xref:System.Diagnostics.EventLog.Log%2A>.</xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Non è necessario registrare un nome visualizzato per il log eventi predefiniti. Il sistema operativo registra i nomi visualizzati localizzati per i registri eventi dell&quot;applicazione, sistema e sicurezza."
  example:
  - "The following example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/m-system.diagnostics.eve_1_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_1_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/m-system.diagnostics.eve_1_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, resource identifier 5001 is defined for the localized name of the event log.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public void RegisterDisplayName (string resourceFile, long resourceId);
    parameters:
    - id: resourceFile
      type: System.String
      description: "Il percorso completo di un file di risorse localizzato."
    - id: resourceId
      type: System.Int64
      description: "Identificatore della risorsa che indicizza una stringa localizzata all&quot;interno del file di risorse."
  overload: System.Diagnostics.EventLog.RegisterDisplayName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.EventLog.Log*> value is not a valid log name.  \n  \n \\- or -  \n  \n The registry key for the event log could not be opened on the target computer."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>resourceFile </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Source
  id: Source
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Source
  nameWithType: EventLog.Source
  fullName: System.Diagnostics.EventLog.Source
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene o imposta il nome di origine per registrare e utilizzare durante la scrittura nel registro eventi."
  remarks: "L&quot;origine eventi indica ciò che registra l&quot;evento. È spesso il nome dell&quot;applicazione o il nome del sottocomponente dell&quot;applicazione, se l&quot;applicazione è di grandi dimensioni. Servizi e applicazioni scrivono nel registro applicazioni o in un log personalizzato. I driver di dispositivo devono scrivere nel Registro di sistema.       È necessario solo specificare un&quot;origine evento, se si scrive in un log eventi. Prima di scrivere una voce nel log eventi, è necessario registrare l&quot;origine evento con il registro eventi come origine valida degli eventi. Quando si scrive una voce di log, il sistema utilizza la proprietà di origine per trovare il log in cui inserire la voce appropriato. Se si sta leggendo il registro eventi, è possibile specificare l&quot;origine o un <xref:System.Diagnostics.EventLog.Log%2A>e <xref:System.Diagnostics.EventLog.MachineName%2A>.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A>      > [!NOTE] > Non è necessario specificare il <xref:System.Diagnostics.EventLog.MachineName%2A>Se ci si connette a un log nel computer locale.</xref:System.Diagnostics.EventLog.MachineName%2A> Se non si specifica il <xref:System.Diagnostics.EventLog.MachineName%2A>, il computer locale (&quot;.&quot;) si presuppone che.</xref:System.Diagnostics.EventLog.MachineName%2A>       Utilizzare <xref:System.Diagnostics.EventLog.WriteEvent%2A>e <xref:System.Diagnostics.EventLog.WriteEntry%2A>di scrivere eventi di un registro eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A> È necessario specificare un&quot;origine eventi per scrivere eventi; è necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine.       Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       È possibile creare un&quot;origine evento per un log eventi esistente o un nuovo registro eventi. Quando si crea una nuova origine per un nuovo registro eventi, il sistema registra l&quot;origine di tale log, ma non viene creato il registro fino a quando la prima voce è scritto in essa.       L&quot;origine deve essere univoco nel computer locale. un nuovo nome di origine non può corrispondere un nome di origine esistente o un nome registro eventi esistente. Ogni origine può scrivere in un solo log eventi alla volta. Tuttavia, l&quot;applicazione può utilizzare più origini per scrivere più registri eventi. Ad esempio, l&quot;applicazione potrebbe richiedere più origini configurate per diversi log eventi o file di risorse diversi.       Se si modifica il valore di origine, il <xref:System.Diagnostics.EventLog>a cui è registrato verrà chiuso e tutti gli handle di evento vengono rilasciati.</xref:System.Diagnostics.EventLog>       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Per modificare i dettagli di configurazione di un&quot;origine esistente, è necessario eliminare l&quot;origine e quindi crearlo nuovamente con la nuova configurazione. Se altre applicazioni o componenti utilizzano l&quot;origine esistente, creare una nuova origine con la configurazione aggiornata anziché eliminare l&quot;origine esistente.      > [!NOTE] > Se un&quot;origine è già stata mappata a un log e si riesegue il mapping di un nuovo registro, è necessario riavviare il computer rendere effettive le modifiche."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.Source Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_18_1.cs)]\n [!code-vb[Classic EventLog.Source Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_18_1.vb)]\n [!code-cpp[Classic EventLog.Source Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_18_1.cpp)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "Il nome registrato con il log eventi come origine delle voci. Il valore predefinito è una stringa vuota (&quot;&quot;)."
  overload: System.Diagnostics.EventLog.Source*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "I risultati di nome di origine in un percorso della chiave del Registro di sistema più lungo di 254 caratteri."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.SourceExists(System.String)
  id: SourceExists(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: SourceExists(String)
  nameWithType: EventLog.SourceExists(String)
  fullName: System.Diagnostics.EventLog.SourceExists(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determina se un&quot;origine eventi è registrata nel computer locale."
  remarks: "Utilizzare questo metodo per determinare la presenza di un&quot;origine eventi nel computer locale. Se si desidera determinare la presenza di un log nel computer locale, utilizzare <xref:System.Diagnostics.EventLog.Exists%2A>.</xref:System.Diagnostics.EventLog.Exists%2A>       Poiché questo metodo accede del Registro di sistema, è necessario disporre di autorizzazioni adeguate del computer locale; in caso contrario, un <xref:System.Security.SecurityException>verrà generata.</xref:System.Security.SecurityException>      > [!NOTE] > Per cercare un&quot;origine evento in Windows Vista e versioni successive o Windows Server 2003, è necessario disporre di privilegi amministrativi.   >> Il motivo per il requisito è che tutti i registri eventi, tra cui sicurezza, è necessario eseguire la ricerca per determinare se l&quot;origine evento è univoco. A partire da Windows Vista, gli utenti non dispone dell&quot;autorizzazione per accedere al Registro di sicurezza; Pertanto, un <xref:System.Security.SecurityException>viene generata un&quot;eccezione.</xref:System.Security.SecurityException>   >> A partire da Windows Vista, il controllo dell&quot;Account utente (UAC) determina i privilegi di un utente. Si è un membro del gruppo Administrators predefinito, vengono assegnati due token di accesso in fase di esecuzione: un token di accesso utente standard e un token di accesso di amministratore. Per impostazione predefinita, viene assegnato il ruolo dell&quot;utente standard. Per eseguire il codice che accede ai contatori delle prestazioni, è necessario elevare i privilegi da utente standard ad amministratore. È possibile farlo quando si avvia un&quot;applicazione facendo clic sull&quot;icona dell&quot;applicazione e indicando che si desidera eseguire come amministratore.      > [!NOTE] > Un servizio in esecuzione con il <xref:System.ServiceProcess.ServiceAccount>account non dispone dei privilegi necessari per eseguire questo metodo.</xref:System.ServiceProcess.ServiceAccount> La soluzione consiste nel verificare l&quot;esistenza di origine dell&quot;evento nel <xref:System.ServiceProcess.ServiceInstaller>, e se non esiste, per creare l&quot;origine del programma di installazione.</xref:System.ServiceProcess.ServiceInstaller>       Poiché è possibile assegnare una nuova origine il nome di un&quot;origine esistente nello stesso computer, utilizzare questo metodo prima di tentare di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A>per garantire che un&quot;origine con il nome specificato da `source` non esiste già nel computer locale.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> Il `source` parametro non è tra maiuscole e minuscole."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.Source Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_14_1.cs)]\n [!code-vb[Classic EventLog.Source Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_14_1.vb)]\n [!code-cpp[Classic EventLog.Source Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_14_1.cpp)]"
  syntax:
    content: public static bool SourceExists (string source);
    parameters:
    - id: source
      type: System.String
      description: "Il nome dell&quot;origine evento."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;origine eventi è registrata nel computer locale. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.SourceExists*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<code>source</code>non è stato trovato, ma non è stato possibile cercare alcuni o tutti i registri eventi."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.SourceExists(System.String,System.String)
  id: SourceExists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: SourceExists(String,String)
  nameWithType: EventLog.SourceExists(String,String)
  fullName: System.Diagnostics.EventLog.SourceExists(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Determina se un&quot;origine evento è registrata in un computer specifico."
  remarks: "Utilizzare questo metodo per determinare la presenza di un&quot;origine eventi nel computer specificato per il `machineName` parametro. Se si desidera determinare la presenza di un log nel computer specificato, utilizzare <xref:System.Diagnostics.EventLog.Exists%2A>.</xref:System.Diagnostics.EventLog.Exists%2A>       Poiché questo metodo accede del Registro di sistema, è necessario disporre di autorizzazioni appropriate del Registro di sistema sul server specificato. in caso contrario, un <xref:System.Security.SecurityException>verrà generata.</xref:System.Security.SecurityException>      > [!NOTE] > Per cercare un&quot;origine evento in Windows Vista e versioni successive o Windows Server 2003, è necessario disporre di privilegi amministrativi.   >> Il motivo per il requisito è che tutti i registri eventi, tra cui sicurezza, è necessario eseguire la ricerca per determinare se l&quot;origine evento è univoco. A partire da Windows Vista, gli utenti non dispone dell&quot;autorizzazione per accedere al Registro di sicurezza; Pertanto, un <xref:System.Security.SecurityException>viene generata un&quot;eccezione.</xref:System.Security.SecurityException>   >> A partire da Windows Vista, il controllo dell&quot;Account utente (UAC) determina i privilegi di un utente. Si è un membro del gruppo Administrators predefinito, vengono assegnati due token di accesso in fase di esecuzione: un token di accesso utente standard e un token di accesso di amministratore. Per impostazione predefinita, viene assegnato il ruolo dell&quot;utente standard. Per eseguire il codice che accede ai contatori delle prestazioni, è necessario elevare i privilegi da utente standard ad amministratore. È possibile farlo quando si avvia un&quot;applicazione facendo clic sull&quot;icona dell&quot;applicazione e indicando che si desidera eseguire come amministratore.      > [!NOTE] > Un servizio in esecuzione con il <xref:System.ServiceProcess.ServiceAccount>account non dispone dei privilegi necessari per eseguire questo metodo.</xref:System.ServiceProcess.ServiceAccount> La soluzione consiste nel verificare l&quot;esistenza di origine dell&quot;evento nel <xref:System.ServiceProcess.ServiceInstaller>, e se non esiste, per creare l&quot;origine del programma di installazione.</xref:System.ServiceProcess.ServiceInstaller>       Poiché è possibile assegnare una nuova origine il nome di un&quot;origine esistente nello stesso computer, utilizzare questo metodo prima di tentare di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A>per garantire che un&quot;origine con il nome specificato da `source` non esiste già nel computer.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> Il `source` e `machineName` i parametri non sono tra maiuscole e minuscole.       <xref:System.Diagnostics.EventLog.SourceExists%2A>è un `static` metodo, pertanto può essere chiamato sulla classe stessa.</xref:System.Diagnostics.EventLog.SourceExists%2A> Non è necessario creare un&quot;istanza di <xref:System.Diagnostics.EventLog>chiamare <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A> </xref:System.Diagnostics.EventLog>"
  example:
  - "The following example creates the source `MySource` on the computer `MyServer`, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cpp[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_16_1.cpp)]\n [!code-cs[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_16_1.cs)]\n [!code-vb[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_16_1.vb)]"
  syntax:
    content: public static bool SourceExists (string source, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "Il nome dell&quot;origine evento."
    - id: machineName
      type: System.String
      description: "Il nome del computer in cui cercare oppure &quot;.&quot; per il computer locale."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;origine eventi è registrata nel computer specificato. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.SourceExists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>machineName</code>è un nome di computer non valido."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<code>source</code>non è stato trovato, ma non è stato possibile cercare alcuni o tutti i registri eventi."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.SynchronizingObject
  id: SynchronizingObject
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: SynchronizingObject
  nameWithType: EventLog.SynchronizingObject
  fullName: System.Diagnostics.EventLog.SynchronizingObject
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene o imposta l&quot;oggetto usato per effettuare il marshalling delle chiamate del gestore eventi generate come risultato di un <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> evento scritto della voce."
  remarks: "Quando SynchronizingObject è `null`, metodi che gestiscono il <xref:System.Diagnostics.EventLog.EntryWritten>eventi vengono chiamati su un thread dal pool di thread del sistema.</xref:System.Diagnostics.EventLog.EntryWritten> Per ulteriori informazioni sui pool di thread del sistema, vedere <xref:System.Threading.ThreadPool>.</xref:System.Threading.ThreadPool>       Quando il <xref:System.Diagnostics.EventLog.EntryWritten>evento è gestito da un Windows Form visual componente, ad esempio un pulsante, l&quot;accesso al componente tramite il pool di thread di sistema potrebbe non funzionare o generata un&quot;eccezione.</xref:System.Diagnostics.EventLog.EntryWritten> Evitare questa situazione impostando SynchronizingObject per un componente di Windows Form, che chiama i metodi che gestiscono il <xref:System.Diagnostics.EventLog.EntryWritten>sullo stesso thread in cui il componente è stato creato l&quot;evento.</xref:System.Diagnostics.EventLog.EntryWritten>       Se il <xref:System.Diagnostics.EventLog>viene utilizzata all&quot;interno [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] in una finestra di progettazione Windows Form, SynchronizingObject viene impostata automaticamente per il controllo contenente <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog> Ad esempio, se si inserisce un <xref:System.Diagnostics.EventLog>in una finestra di progettazione Form1 (che eredita da <xref:System.Windows.Forms.Form>) la proprietà SynchronizingObject di <xref:System.Diagnostics.EventLog>è impostato per l&quot;istanza di Form1.</xref:System.Diagnostics.EventLog> </xref:System.Windows.Forms.Form> </xref:System.Diagnostics.EventLog>"
  syntax:
    content: public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
    return:
      type: System.ComponentModel.ISynchronizeInvoke
      description: "Il <xref href=&quot;System.ComponentModel.ISynchronizeInvoke&quot;> </xref> usato per effettuare il marshalling delle chiamate del gestore eventi generate come risultato di un <xref href=&quot;System.Diagnostics.EventLog.EntryWritten&quot;> </xref> evento nel registro eventi."
  overload: System.Diagnostics.EventLog.SynchronizingObject*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String)
  id: WriteEntry(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String)
  nameWithType: EventLog.WriteEntry(String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive una voce di tipo informativo con il testo del messaggio indicato, il registro eventi."
  remarks: "Utilizzare questo metodo per scrivere una voce di informazioni nel registro eventi associato a questo <xref:System.Diagnostics.EventLog>istanza.</xref:System.Diagnostics.EventLog> Se si desidera specificare eventuali altri <xref:System.Diagnostics.EventLogEntryType>usare un overload diverso del <xref:System.Diagnostics.EventLog.WriteEntry%2A>.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLogEntryType>      > [!NOTE] > Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6.       È necessario impostare la <xref:System.Diagnostics.EventLog.Source%2A>proprietà nel <xref:System.Diagnostics.EventLog>componente prima di scrivere voci nel registro.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine.       Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       Se l&quot;origine specificata nella <xref:System.Diagnostics.EventLog.Source%2A>proprietà di questo <xref:System.Diagnostics.EventLog>istanza non è registrata nel computer in cui il componente sta scrivendo <xref:System.Diagnostics.EventLog.WriteEntry%2A>chiamate <xref:System.Diagnostics.EventLog.CreateEventSource%2A>e registra l&quot;origine.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A>per il <xref:System.Diagnostics.EventLog>istanza prima di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A>o <xref:System.Diagnostics.EventLog.WriteEntry%2A>, il computer locale (&quot;.&quot;) si presuppone che.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Se il sistema deve registrare il <xref:System.Diagnostics.EventLog.Source%2A>tramite una chiamata a <xref:System.Diagnostics.EventLog.WriteEntry%2A>e la <xref:System.Diagnostics.EventLog.Log%2A>proprietà non è stata impostata sul <xref:System.Diagnostics.EventLog>istanza, il log per impostazione predefinita il registro applicazioni.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Molte eccezioni elencate in precedenza sono generate da errori generati durante il processo di registrazione <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse messaggio localizzabile.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere eventi utilizzando un file di risorse messaggio localizzato.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se si scrive una voce in un computer remoto, il valore del messaggio (la stringa di testo) potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework.      > [!NOTE] > Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_7_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_7_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_7_1.vb)]"
  syntax:
    content: public void WriteEntry (string message);
    parameters:
    - id: message
      type: System.String
      description: "Stringa da scrivere nel registro eventi."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive un errore, avviso, informazioni, operazioni riuscite o voce di controllo di un errore con il testo del messaggio specificato nel registro eventi."
  remarks: "Utilizzare questo metodo per scrivere una voce di un specificato <xref:System.Diagnostics.EventLogEntryType>nel registro eventi.</xref:System.Diagnostics.EventLogEntryType> Il `type` è indicato da un&quot;icona e il testo nella colonna di tipo nel Visualizzatore eventi per un log.      > [!NOTE] > Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6.       È necessario impostare la <xref:System.Diagnostics.EventLog.Source%2A>proprietà nel <xref:System.Diagnostics.EventLog>componente prima di scrivere voci nel registro.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine.       Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       Se l&quot;origine specificata nella <xref:System.Diagnostics.EventLog.Source%2A>proprietà di questo <xref:System.Diagnostics.EventLog>istanza non è registrata nel computer in cui il componente sta scrivendo <xref:System.Diagnostics.EventLog.WriteEntry%2A>chiamate <xref:System.Diagnostics.EventLog.CreateEventSource%2A>e registra l&quot;origine.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A>per il <xref:System.Diagnostics.EventLog>istanza prima di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A>o <xref:System.Diagnostics.EventLog.WriteEntry%2A>, il computer locale (&quot;.&quot;) si presuppone che.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Se il sistema deve registrare il <xref:System.Diagnostics.EventLog.Source%2A>tramite una chiamata a <xref:System.Diagnostics.EventLog.WriteEntry%2A>e la <xref:System.Diagnostics.EventLog.Log%2A>proprietà non è stata impostata sul <xref:System.Diagnostics.EventLog>istanza, il log per impostazione predefinita il registro applicazioni.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Molte eccezioni elencate in precedenza sono generate da errori generati durante il processo di registrazione <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse messaggio localizzabile.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere eventi utilizzando un file di risorse messaggio localizzato.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se si scrive una voce in un computer remoto, il valore del messaggio (la stringa di testo) potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework.      > [!NOTE] > Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL."
  example:
  - "The following example writes a warning entry to an event log, \"MyNewLog\", on the local computer.  \n  \n [!code-cpp[Classic EventLog.WriteEntry2 Example#1](~/add/codesnippet/cpp/19aeba79-224e-4604-90d9-_1.cpp)]\n [!code-cs[Classic EventLog.WriteEntry2 Example#1](~/add/codesnippet/csharp/19aeba79-224e-4604-90d9-_1.cs)]\n [!code-vb[Classic EventLog.WriteEntry2 Example#1](~/add/codesnippet/visualbasic/19aeba79-224e-4604-90d9-_1.vb)]"
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type);
    parameters:
    - id: message
      type: System.String
      description: "Stringa da scrivere nel registro eventi."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Uno del <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valori."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>non è un valido <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String)
  id: WriteEntry(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String)
  nameWithType: EventLog.WriteEntry(String,String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive una voce di tipo informativo con il testo del messaggio specificato nel registro eventi, utilizzando l&quot;origine eventi registrata specificata."
  remarks: "Utilizzare questo metodo per scrivere una voce di informazioni nel registro eventi, utilizzare un&quot;origine che è già registrata come un&quot;origine evento per il log appropriato. Se si desidera specificare eventuali altri <xref:System.Diagnostics.EventLogEntryType>usare un overload diverso del <xref:System.Diagnostics.EventLog.WriteEntry%2A>.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLogEntryType>       È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine. Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse messaggio localizzabile.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere eventi utilizzando un file di risorse messaggio localizzato.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.   >> Di `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cpp[Classic EventLog.WriteEntry1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_3_1.cpp)]\n [!code-cs[Classic EventLog.WriteEntry1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_3_1.cs)]\n [!code-vb[Classic EventLog.WriteEntry1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_3_1.vb)]"
  syntax:
    content: public static void WriteEntry (string source, string message);
    parameters:
    - id: source
      type: System.String
      description: "L&quot;origine con cui l&quot;applicazione è registrata nel computer specificato."
    - id: message
      type: System.String
      description: "Stringa da scrivere nel registro eventi."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive una voce con il testo del messaggio specificato e un identificatore eventi definito dall&quot;applicazione nel registro eventi."
  remarks: "Utilizzare questo metodo per scrivere una voce con un parametro definito dall&quot;applicazione `eventID` nel registro eventi. Il `eventID` con l&quot;origine identificano in modo univoco un evento. Ogni applicazione è possibile definire i propri eventi numerati e a cui sono associate le stringhe di descrizione. Nei visualizzatori eventi vengono visualizzati questi valori stringa per facilitare la comprensione del problema e suggerire le azioni da intraprendere.      > [!NOTE] > Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6.       Oltre l&quot;identificatore dell&quot;evento, è possibile specificare un <xref:System.Diagnostics.EventLogEntryType>per l&quot;evento da scrivere nel registro eventi.</xref:System.Diagnostics.EventLogEntryType> Il `type` è indicato da un&quot;icona e il testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, operazioni riuscite o operazioni non riuscite.       È necessario impostare la <xref:System.Diagnostics.EventLog.Source%2A>proprietà nel <xref:System.Diagnostics.EventLog>componente prima di scrivere voci nel registro.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine.       Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       Se l&quot;origine specificata nella <xref:System.Diagnostics.EventLog.Source%2A>proprietà di questo <xref:System.Diagnostics.EventLog>istanza non è registrata nel computer in cui il componente sta scrivendo <xref:System.Diagnostics.EventLog.WriteEntry%2A>chiamate <xref:System.Diagnostics.EventLog.CreateEventSource%2A>e registra l&quot;origine.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A>per il <xref:System.Diagnostics.EventLog>istanza prima di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A>o <xref:System.Diagnostics.EventLog.WriteEntry%2A>, il computer locale (&quot;.&quot;) si presuppone che.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Se il sistema deve registrare il <xref:System.Diagnostics.EventLog.Source%2A>tramite una chiamata a <xref:System.Diagnostics.EventLog.WriteEntry%2A>e la <xref:System.Diagnostics.EventLog.Log%2A>proprietà non è stata impostata sul <xref:System.Diagnostics.EventLog>istanza, il log per impostazione predefinita il registro applicazioni.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Molte eccezioni elencate in precedenza sono generate da errori generati durante il processo di registrazione <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse messaggio localizzabile.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere eventi utilizzando un file di risorse messaggio localizzato.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se si scrive una voce in un computer remoto, il valore del messaggio (la stringa di testo) potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework.      > [!NOTE] > Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#3](~/add/codesnippet/cpp/597042ed-6d84-4ccf-a867-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#3](~/add/codesnippet/csharp/597042ed-6d84-4ccf-a867-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#3](~/add/codesnippet/visualbasic/597042ed-6d84-4ccf-a867-_1.vb)]
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID);
    parameters:
    - id: message
      type: System.String
      description: "Stringa da scrivere nel registro eventi."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Uno del <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valori."
    - id: eventID
      type: System.Int32
      description: "Identificatore specifico dell&quot;applicazione per l&quot;evento."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>non è un valido <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive un errore, avviso, informazioni, operazioni riuscite o voce di controllo di un errore con il testo del messaggio specificato nel registro eventi, utilizzando l&quot;origine eventi registrata specificata."
  remarks: "Utilizzare questo metodo per scrivere una voce di un oggetto specificato <xref:System.Diagnostics.EventLogEntryType>nel registro eventi, utilizzando un&quot;origine già registrata come un&quot;origine evento per il log appropriato.</xref:System.Diagnostics.EventLogEntryType> Il `type` è indicato da un&quot;icona e il testo nella colonna di tipo nel Visualizzatore eventi per un log.      > [!NOTE] > Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6.       È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine. Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse messaggio localizzabile.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere eventi utilizzando un file di risorse messaggio localizzato.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL."
  example:
  - "The following example writes a warning entry to an event log, \"MyNewLog\", on the local computer.  \n  \n [!code-cs[Classic EventLog.WriteEntry3 Example#1](~/add/codesnippet/csharp/c03f903c-8fbd-441f-afe0-_1.cs)]\n [!code-vb[Classic EventLog.WriteEntry3 Example#1](~/add/codesnippet/visualbasic/c03f903c-8fbd-441f-afe0-_1.vb)]\n [!code-cpp[Classic EventLog.WriteEntry3 Example#1](~/add/codesnippet/cpp/c03f903c-8fbd-441f-afe0-_1.cpp)]"
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type);
    parameters:
    - id: source
      type: System.String
      description: "L&quot;origine con cui l&quot;applicazione è registrata nel computer specificato."
    - id: message
      type: System.String
      description: "Stringa da scrivere nel registro eventi."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Uno del <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valori."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>non è un valido <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive una voce con il testo del messaggio indicato, l&quot;identificatore eventi definito dall&quot;applicazione e una categoria definita dall&quot;applicazione nel registro eventi."
  remarks: "Utilizzare questo metodo per scrivere una voce con un parametro definito dall&quot;applicazione `category` nel registro eventi. Il Visualizzatore eventi utilizza la categoria per filtrare gli eventi scritti da un&quot;origine evento. Il Visualizzatore eventi consente di visualizzare la categoria come valore numerico oppure è possibile utilizzare la categoria come identificatore di risorsa per visualizzare una stringa di categoria localizzata.      > [!NOTE] > Il `category` parametro deve essere un valore positivo. Valori di categoria negativi vengono visualizzati come un numero positivo complementare nell&quot;evento visualizzatore. Ad esempio – 10 viene visualizzato come 65,526, – 1 come 65.535.      > [!NOTE] > Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6.       Per visualizzare le stringhe di categoria localizzata nel Visualizzatore eventi, è necessario utilizzare un&quot;origine evento configurato con un file di risorse di categoria e impostare il `category` su un identificatore di risorsa nel file di risorse di categoria. Se l&quot;origine evento non dispone di un file di risorse di categoria configurato o quelle specificate `category` indicizza una stringa nel file di risorse di categoria, nel Visualizzatore eventi viene visualizzato il valore numerico di categoria per tale voce. Configurare il file di risorse di categoria, oltre al numero di stringhe di categoria nel file di risorse, utilizzando <xref:System.Diagnostics.EventLogInstaller>o <xref:System.Diagnostics.EventSourceCreationData>classe.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Oltre alla categoria, è possibile specificare un identificatore di evento per l&quot;evento da scrivere nel registro eventi. Identificatori di eventi, insieme all&quot;origine dell&quot;evento identificano in modo univoco un evento. Ogni applicazione è possibile definire i propri eventi numerati e a cui sono associate le stringhe di descrizione. Nei visualizzatori eventi vengono visualizzati questi valori stringa per facilitare la comprensione del problema e suggerire le azioni da intraprendere.       Infine, è possibile specificare un <xref:System.Diagnostics.EventLogEntryType>per l&quot;evento da scrivere nel registro eventi.</xref:System.Diagnostics.EventLogEntryType> Il `type` è indicato da un&quot;icona e il testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, operazioni riuscite o operazioni non riuscite.       È necessario impostare la <xref:System.Diagnostics.EventLog.Source%2A>proprietà nel <xref:System.Diagnostics.EventLog>componente prima di scrivere voci nel registro.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine.       Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       Se l&quot;origine specificata nella <xref:System.Diagnostics.EventLog.Source%2A>proprietà di questo <xref:System.Diagnostics.EventLog>istanza non è registrata nel computer in cui il componente sta scrivendo <xref:System.Diagnostics.EventLog.WriteEntry%2A>chiamate <xref:System.Diagnostics.EventLog.CreateEventSource%2A>e registra l&quot;origine.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A>per il <xref:System.Diagnostics.EventLog>istanza prima di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A>o <xref:System.Diagnostics.EventLog.WriteEntry%2A>, il computer locale (&quot;.&quot;) si presuppone che.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Se il sistema deve registrare il <xref:System.Diagnostics.EventLog.Source%2A>tramite una chiamata a <xref:System.Diagnostics.EventLog.WriteEntry%2A>e la <xref:System.Diagnostics.EventLog.Log%2A>proprietà non è stata impostata sul <xref:System.Diagnostics.EventLog>istanza, il log per impostazione predefinita il registro applicazioni.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Molte eccezioni elencate in precedenza sono generate da errori generati durante il processo di registrazione <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse messaggio localizzabile.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere eventi utilizzando un file di risorse messaggio localizzato.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se si scrive una voce in un computer remoto, il valore del messaggio (la stringa di testo) potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework.      > [!NOTE] > Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#3](~/add/codesnippet/cpp/b3db94bc-a96c-4168-a8f0-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#3](~/add/codesnippet/csharp/b3db94bc-a96c-4168-a8f0-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#3](~/add/codesnippet/visualbasic/b3db94bc-a96c-4168-a8f0-_1.vb)]
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID, short category);
    parameters:
    - id: message
      type: System.String
      description: "Stringa da scrivere nel registro eventi."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Uno del <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valori."
    - id: eventID
      type: System.Int32
      description: "Identificatore specifico dell&quot;applicazione per l&quot;evento."
    - id: category
      type: System.Int16
      description: "La sottocategoria specifici dell&quot;applicazione associata al messaggio."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>non è un valido <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive una voce con il testo del messaggio specificato e un identificatore eventi definito dall&quot;applicazione nel registro eventi, utilizzando l&quot;origine eventi registrata specificata."
  remarks: "Utilizzare questo metodo per scrivere una voce con un parametro definito dall&quot;applicazione `eventID` nel registro eventi, utilizzando un&quot;origine già registrata come un&quot;origine evento per il log appropriato. Il `eventID`, e l&quot;origine, identificano in modo univoco un evento. Ogni applicazione è possibile definire i propri eventi numerati e a cui sono associate le stringhe di descrizione. I visualizzatori eventi presentano le stringhe all&quot;utente per consentire all&quot;utente di comprendere la causa dell&quot;errore e suggerire le azioni da intraprendere.      > [!NOTE] > Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6.       Oltre a identificatore dell&quot;evento, questo overload di <xref:System.Diagnostics.EventLog.WriteEntry%2A>consente di specificare un <xref:System.Diagnostics.EventLogEntryType>per l&quot;evento da scrivere nel registro eventi.</xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.EventLog.WriteEntry%2A> Il `type` è indicato da un&quot;icona e il testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, operazioni riuscite o operazioni non riuscite.       È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine. Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse messaggio localizzabile.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere eventi utilizzando un file di risorse messaggio localizzato.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL."
  example:
  - >-
    [!code-cs[EventLog_WriteEntry_4#1](~/add/codesnippet/csharp/2d8498b8-a54d-48c9-9ee7-_1.cs)]
     [!code-cpp[EventLog_WriteEntry_4#1](~/add/codesnippet/cpp/2d8498b8-a54d-48c9-9ee7-_1.cpp)]
     [!code-vb[EventLog_WriteEntry_4#1](~/add/codesnippet/visualbasic/2d8498b8-a54d-48c9-9ee7-_1.vb)]
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID);
    parameters:
    - id: source
      type: System.String
      description: "L&quot;origine con cui l&quot;applicazione è registrata nel computer specificato."
    - id: message
      type: System.String
      description: "Stringa da scrivere nel registro eventi."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Uno del <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valori."
    - id: eventID
      type: System.Int32
      description: "Identificatore specifico dell&quot;applicazione per l&quot;evento."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>non è un valido <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive una voce con il testo del messaggio indicato, l&quot;identificatore eventi definito dall&quot;applicazione e una categoria definita dall&quot;applicazione nel registro eventi e allega dati binari al messaggio."
  remarks: "Utilizzare questo overload per scrivere i dati specifici dell&quot;evento definito dall&quot;applicazione nel registro eventi. Il Visualizzatore eventi non interpreta questo tipo di dati. dati non elaborati vengono visualizzati solo in un formato esadecimale e testo combinato. Utilizzare i dati specifici dell&quot;evento con cautela, includerlo solo se si è certi che saranno utile a un utente di debug del problema. È inoltre possibile utilizzare dati specifici dell&quot;evento per archiviare le informazioni che dell&quot;applicazione può elaborare in modo indipendente da Visualizzatore eventi. Ad esempio, è Impossibile scrivere un visualizzatore specifico per gli eventi o scrivere un programma che analizza il file di log e crea report che includono informazioni dai dati specifici dell&quot;evento.       Oltre ai dati binari, è possibile specificare una categoria definita dall&quot;applicazione e un identificatore eventi definito dall&quot;applicazione. Il Visualizzatore eventi utilizza la categoria per filtrare gli eventi scritti da un&quot;origine evento. Il Visualizzatore eventi consente di visualizzare la categoria come valore numerico oppure è possibile utilizzare la categoria come identificatore di risorsa per visualizzare una stringa di categoria localizzata.      > [!NOTE] > Il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6.      > [!NOTE] > Il `category` parametro deve essere un valore positivo. Valori di categoria negativi vengono visualizzati come un numero positivo complementare nell&quot;evento visualizzatore. Ad esempio – 10 viene visualizzato come 65,526, – 1 come 65.535.       Per visualizzare le stringhe di categoria localizzata nel Visualizzatore eventi, è necessario utilizzare un&quot;origine evento configurato con un file di risorse di categoria e impostare il `category` su un identificatore di risorsa nel file di risorse di categoria. Se l&quot;origine evento non dispone di un file di risorse di categoria configurato o quelle specificate `category` indicizza una stringa nel file di risorse di categoria, nel Visualizzatore eventi viene visualizzato il valore numerico di categoria per tale voce. Configurare il file di risorse di categoria, oltre al numero di stringhe di categoria nel file di risorse, utilizzando <xref:System.Diagnostics.EventLogInstaller>o <xref:System.Diagnostics.EventSourceCreationData>classe.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Identificatori di eventi, insieme all&quot;origine dell&quot;evento identificano in modo univoco un evento. Ogni applicazione è possibile definire i propri eventi numerati e a cui sono associate le stringhe di descrizione. Nei visualizzatori eventi vengono visualizzati questi valori stringa per facilitare la comprensione del problema e suggerire le azioni da intraprendere.       Infine, è possibile specificare un <xref:System.Diagnostics.EventLogEntryType>per l&quot;evento da scrivere nel registro eventi.</xref:System.Diagnostics.EventLogEntryType> Il `type` è indicato da un&quot;icona e il testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, operazioni riuscite o operazioni non riuscite.       È necessario impostare la <xref:System.Diagnostics.EventLog.Source%2A>proprietà nel <xref:System.Diagnostics.EventLog>componente prima di scrivere voci nel registro.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine.       Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       Se l&quot;origine specificata nella <xref:System.Diagnostics.EventLog.Source%2A>proprietà di questo <xref:System.Diagnostics.EventLog>istanza non è registrata nel computer in cui il componente sta scrivendo <xref:System.Diagnostics.EventLog.WriteEntry%2A>chiamate <xref:System.Diagnostics.EventLog.CreateEventSource%2A>e registra l&quot;origine.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A>per il <xref:System.Diagnostics.EventLog>istanza prima di chiamare <xref:System.Diagnostics.EventLog.CreateEventSource%2A>o <xref:System.Diagnostics.EventLog.WriteEntry%2A>, il computer locale (&quot;.&quot;) si presuppone che.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Se il sistema deve registrare il <xref:System.Diagnostics.EventLog.Source%2A>tramite una chiamata a <xref:System.Diagnostics.EventLog.WriteEntry%2A>e la <xref:System.Diagnostics.EventLog.Log%2A>proprietà non è stata impostata sul <xref:System.Diagnostics.EventLog>istanza, il log per impostazione predefinita il registro applicazioni.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      > [!NOTE] > Molte eccezioni elencate in precedenza sono generate da errori generati durante il processo di registrazione <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse messaggio localizzabile.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere eventi utilizzando un file di risorse messaggio localizzato.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se si scrive una voce in un computer remoto, il valore del messaggio (la stringa di testo) potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework.      > [!NOTE] > Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL."
  example:
  - >-
    [!code-cs[EventLog_WriteEntry_5#1](~/add/codesnippet/csharp/1c6518b6-dc55-4c74-9028-_1.cs)]
     [!code-vb[EventLog_WriteEntry_5#1](~/add/codesnippet/visualbasic/1c6518b6-dc55-4c74-9028-_1.vb)]
     [!code-cpp[EventLog_WriteEntry_5#1](~/add/codesnippet/cpp/1c6518b6-dc55-4c74-9028-_1.cpp)]
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID, short category, byte[] rawData);
    parameters:
    - id: message
      type: System.String
      description: "Stringa da scrivere nel registro eventi."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Uno del <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valori."
    - id: eventID
      type: System.Int32
      description: "Identificatore specifico dell&quot;applicazione per l&quot;evento."
    - id: category
      type: System.Int16
      description: "La sottocategoria specifici dell&quot;applicazione associata al messaggio."
    - id: rawData
      type: System.Byte[]
      description: "Matrice di byte che contiene i dati binari associati alla voce."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>non è un valido <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive una voce con il testo del messaggio indicato, l&quot;identificatore eventi definito dall&quot;applicazione e una categoria definita dall&quot;applicazione nel registro eventi, utilizzando l&quot;origine eventi registrata specificata. Il <code> category </code> utilizzabile dal Visualizzatore eventi per filtrare gli eventi nel registro."
  remarks: "Utilizzare questo metodo per scrivere una voce con un parametro definito dall&quot;applicazione `category` nel registro eventi, utilizzare un&quot;origine che è già registrata come un&quot;origine evento per il log appropriato. Il Visualizzatore eventi utilizza la categoria per filtrare gli eventi scritti da un&quot;origine evento. Il Visualizzatore eventi consente di visualizzare la categoria come valore numerico oppure è possibile utilizzare la categoria come identificatore di risorsa per visualizzare una stringa di categoria localizzata.      > [!NOTE] > Il `category` parametro deve essere un valore positivo. Valori di categoria negativi vengono visualizzati come un numero positivo complementare nell&quot;evento visualizzatore. Ad esempio – 10 viene visualizzato come 65,526, – 1 come 65.535.       Per visualizzare le stringhe di categoria localizzata nel Visualizzatore eventi, è necessario utilizzare un&quot;origine evento configurato con un file di risorse di categoria e impostare il `category` su un identificatore di risorsa nel file di risorse di categoria. Se l&quot;origine evento non dispone di un file di risorse di categoria configurato o quelle specificate `category` indicizza una stringa nel file di risorse di categoria, nel Visualizzatore eventi viene visualizzato il valore numerico di categoria per tale voce. Configurare il file di risorse di categoria, oltre al numero di stringhe di categoria nel file di risorse, utilizzando <xref:System.Diagnostics.EventLogInstaller>o <xref:System.Diagnostics.EventSourceCreationData>classe.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Oltre alla categoria, è possibile specificare un identificatore di evento per l&quot;evento da scrivere nel registro eventi. Identificatori di eventi, insieme all&quot;origine dell&quot;evento identificano in modo univoco un evento. Ogni applicazione è possibile definire i propri eventi numerati e a cui sono associate le stringhe di descrizione. Nei visualizzatori eventi vengono visualizzati questi valori stringa per facilitare la comprensione del problema e suggerire le azioni da intraprendere.       Infine, è possibile specificare un <xref:System.Diagnostics.EventLogEntryType>per l&quot;evento da scrivere nel registro eventi.</xref:System.Diagnostics.EventLogEntryType> Il `type` è indicato da un&quot;icona e il testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, operazioni riuscite o operazioni non riuscite.       È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine. Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse messaggio localizzabile.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere eventi utilizzando un file di risorse messaggio localizzato.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.   >> Di `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#1](~/add/codesnippet/cpp/189fd615-c100-4e72-9c0b-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#1](~/add/codesnippet/csharp/189fd615-c100-4e72-9c0b-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#1](~/add/codesnippet/visualbasic/189fd615-c100-4e72-9c0b-_1.vb)]
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID, short category);
    parameters:
    - id: source
      type: System.String
      description: "L&quot;origine con cui l&quot;applicazione è registrata nel computer specificato."
    - id: message
      type: System.String
      description: "Stringa da scrivere nel registro eventi."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Uno del <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valori."
    - id: eventID
      type: System.Int32
      description: "Identificatore specifico dell&quot;applicazione per l&quot;evento."
    - id: category
      type: System.Int16
      description: "La sottocategoria specifici dell&quot;applicazione associata al messaggio."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>non è un valido <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive una voce con il testo del messaggio indicato, l&quot;identificatore eventi definito dall&quot;applicazione e una categoria definita dall&quot;applicazione nel registro eventi (tramite l&quot;origine eventi registrata specificata) e allega dati binari al messaggio."
  remarks: "Utilizzare questo metodo per scrivere i dati specifici dell&quot;evento definito dall&quot;applicazione nel registro eventi, utilizzando un&quot;origine già registrata come un&quot;origine evento per il log appropriato. Il Visualizzatore eventi non interpreta questo tipo di dati. dati non elaborati vengono visualizzati solo in un formato esadecimale e testo combinato. Utilizzare i dati specifici dell&quot;evento raramente. include solo se si è certi che possa risultare utile. È inoltre possibile utilizzare dati specifici dell&quot;evento per archiviare le informazioni che dell&quot;applicazione può elaborare in modo indipendente da Visualizzatore eventi. Ad esempio, è Impossibile scrivere un visualizzatore specifico per gli eventi o scrivere un programma che analizza il file di log e crea report che includono informazioni dai dati specifici dell&quot;evento.       Oltre ai dati binari, è possibile specificare una categoria definita dall&quot;applicazione e un identificatore eventi definito dall&quot;applicazione. Il Visualizzatore eventi utilizza la categoria per filtrare gli eventi scritti da un&quot;origine evento. Il Visualizzatore eventi consente di visualizzare la categoria come valore numerico oppure è possibile utilizzare la categoria come identificatore di risorsa per visualizzare una stringa di categoria localizzata.      > [!NOTE] > Il `category` parametro deve essere un valore positivo. Valori di categoria negativi vengono visualizzati come un numero positivo complementare nell&quot;evento visualizzatore. – 10, ad esempio, verrà visualizzato come 65,526, – 1 come 65.535.       Per visualizzare le stringhe di categoria localizzata nel Visualizzatore eventi, è necessario utilizzare un&quot;origine evento configurato con un file di risorse di categoria e impostare il `category` su un identificatore di risorsa nel file di risorse di categoria. Se l&quot;origine evento non dispone di un file di risorse di categoria configurato o quelle specificate `category` indicizza una stringa nel file di risorse di categoria, nel Visualizzatore eventi viene visualizzato il valore numerico di categoria per tale voce. Configurare il file di risorse di categoria, oltre al numero di stringhe di categoria nel file di risorse, utilizzando <xref:System.Diagnostics.EventLogInstaller>o <xref:System.Diagnostics.EventSourceCreationData>classe.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Identificatori di eventi, con l&quot;origine evento, identificano in modo univoco un evento. Ogni applicazione è possibile definire i propri eventi numerati e a cui sono associate le stringhe di descrizione. Nei visualizzatori eventi vengono visualizzati questi valori stringa per facilitare la comprensione del problema e suggerire le azioni da intraprendere.       Infine, è possibile specificare un <xref:System.Diagnostics.EventLogEntryType>per l&quot;evento da scrivere nel registro eventi.</xref:System.Diagnostics.EventLogEntryType> Il `type` è indicato da un&quot;icona e il testo nella colonna di tipo nel Visualizzatore eventi per un log. Questo parametro indica se il tipo di evento è errore, avviso, informazioni, operazioni riuscite o operazioni non riuscite.       È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine. Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo scrive la stringa specificata direttamente nel registro eventi di; non utilizza un file di risorse messaggio localizzabile.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Utilizzare il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere eventi utilizzando un file di risorse messaggio localizzato.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se il `message` parametro contiene un carattere null, il messaggio nel registro eventi viene terminato con il carattere NUL.   >> Di `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#2](~/add/codesnippet/cpp/0b90a83a-dcc8-46e6-a8db-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#2](~/add/codesnippet/csharp/0b90a83a-dcc8-46e6-a8db-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#2](~/add/codesnippet/visualbasic/0b90a83a-dcc8-46e6-a8db-_1.vb)]
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID, short category, byte[] rawData);
    parameters:
    - id: source
      type: System.String
      description: "L&quot;origine con cui l&quot;applicazione è registrata nel computer specificato."
    - id: message
      type: System.String
      description: "Stringa da scrivere nel registro eventi."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Uno del <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> valori."
    - id: eventID
      type: System.Int32
      description: "Identificatore specifico dell&quot;applicazione per l&quot;evento."
    - id: category
      type: System.Int16
      description: "La sottocategoria specifici dell&quot;applicazione associata al messaggio."
    - id: rawData
      type: System.Byte[]
      description: "Matrice di byte che contiene i dati binari associati alla voce."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>non è un valido <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  id: WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive una voce localizzata nel registro eventi."
  remarks: "Utilizzare questo metodo per scrivere una voce localizzata nel registro eventi. Specificare le proprietà evento con identificatori di risorsa, anziché i valori stringa. Il Visualizzatore eventi utilizza gli identificatori di risorsa per visualizzare le stringhe corrispondenti dal file di risorse localizzato per <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A> Prima di scrivere eventi tramite identificatori di risorsa, è necessario registrare l&quot;origine con il corrispondente file di risorse.       L&quot;input `instance` istanza specifica il messaggio di evento e le proprietà. Impostare il <xref:System.Diagnostics.EventInstance.InstanceId%2A>del `instance` per il messaggio definito nel file di risorse del messaggio di origine di input.</xref:System.Diagnostics.EventInstance.InstanceId%2A> È possibile impostare facoltativamente il <xref:System.Diagnostics.EventInstance.CategoryId%2A>e <xref:System.Diagnostics.EventInstance.EntryType%2A>del `instance` input per definire il tipo di categoria e l&quot;evento della voce di evento.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> È inoltre possibile specificare una matrice di stringhe indipendenti dal linguaggio per inserire il testo del messaggio. Impostare `values` per `null` se il messaggio di evento non contiene segnaposto di formattazione per le stringhe di sostituzione.       È necessario impostare la <xref:System.Diagnostics.EventLog.Source%2A>proprietà nel <xref:System.Diagnostics.EventLog>componente prima di utilizzare <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> L&quot;origine specificata deve essere configurato per la scrittura di voci localizzate nel log. l&quot;origine deve contenere almeno un file di risorse di messaggio definito.       È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine. Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo se l&quot;applicazione scrive i valori di stringa direttamente nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se si scrive una voce per un computer remoto, il valore di `message` stringa potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework. Inoltre, il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6."
  example:
  - "The following example writes two audit entries to the event log `myNewLog`. The example creates a new event source and a new event log if they do not exist on the local computer. The event message text is specified using a resource identifier in a resource file.  \n  \n [!code-cpp[EventLog_WriteEvent#7](~/add/codesnippet/cpp/6a714dbf-bcbc-4f5a-a8b4-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#7](~/add/codesnippet/visualbasic/6a714dbf-bcbc-4f5a-a8b4-_1.vb)]\n [!code-cs[EventLog_WriteEvent#7](~/add/codesnippet/csharp/6a714dbf-bcbc-4f5a-a8b4-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public void WriteEvent (System.Diagnostics.EventInstance instance, object[] values);
    parameters:
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "Un <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> istanza che rappresenta una voce del registro eventi localizzata."
    - id: values
      type: System.Object[]
      description: "Una matrice di stringhe di unire il testo del messaggio della voce del registro eventi."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  id: WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Byte[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive una voce del registro eventi con i dati dell&quot;evento specifici, le stringhe di sostituzione dei messaggi e i dati binari associati."
  remarks: "Utilizzare questo metodo per scrivere una voce localizzata con altri dati specifici dell&quot;evento nel registro eventi. Specificare le proprietà evento con identificatori di risorsa, anziché i valori stringa. Il Visualizzatore eventi utilizza gli identificatori di risorsa per visualizzare le stringhe corrispondenti dal file di risorse localizzato per <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A> Prima di scrivere eventi tramite identificatori di risorsa, è necessario registrare l&quot;origine con il corrispondente file di risorse.       L&quot;input `instance` istanza specifica il messaggio di evento e le proprietà. Impostare il <xref:System.Diagnostics.EventInstance.InstanceId%2A>del `instance` per il messaggio definito nel file di risorse del messaggio di origine di input.</xref:System.Diagnostics.EventInstance.InstanceId%2A> È possibile impostare facoltativamente il <xref:System.Diagnostics.EventInstance.CategoryId%2A>e <xref:System.Diagnostics.EventInstance.EntryType%2A>del `instance` input per definire il tipo di categoria e l&quot;evento della voce di evento.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> È inoltre possibile specificare una matrice di stringhe indipendenti dal linguaggio per inserire il testo del messaggio. Impostare `values` per `null` se il messaggio di evento non contiene segnaposto di formattazione per le stringhe di sostituzione.       Specificare i dati binari con un evento quando è necessario fornire dettagli aggiuntivi per l&quot;evento. Ad esempio, utilizzare il `data` parametro per includere informazioni su un errore specifico. Il Visualizzatore eventi non interpreta i dati dell&quot;evento associato. Visualizza i dati in un formato esadecimale e testo combinato. Utilizzare i dati specifici dell&quot;evento raramente. include solo se si è certi che possa risultare utile. È inoltre possibile utilizzare dati specifici dell&quot;evento per archiviare le informazioni che dell&quot;applicazione può elaborare in modo indipendente da Visualizzatore eventi. Ad esempio, è Impossibile scrivere un visualizzatore specifico per gli eventi o scrivere un programma che cerca nel registro eventi e crea report che includono informazioni dai dati specifici dell&quot;evento.       È necessario impostare la <xref:System.Diagnostics.EventLog.Source%2A>proprietà nel <xref:System.Diagnostics.EventLog>componente prima utilizzando <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> L&quot;origine specificata deve essere configurato per la scrittura di voci localizzate nel log. l&quot;origine deve contenere almeno un file di risorse di messaggio definito.       È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine. Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.      > [!NOTE] > Se non si specifica un <xref:System.Diagnostics.EventLog.MachineName%2A>per il <xref:System.Diagnostics.EventLog>istanza prima di chiamare <xref:System.Diagnostics.EventLog.WriteEvent%2A>, il computer locale (&quot;.&quot;) si presuppone che.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo se l&quot;applicazione scrive i valori di stringa direttamente nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      > [!NOTE] > Se si scrive una voce per un computer remoto, il valore di `message` stringa potrebbe non essere quelli previsti se il computer remoto non è in esecuzione in .NET Framework. Inoltre, il `message` stringa non può contenere %*n*, dove *n* è un valore intero (ad esempio, %1), perché il Visualizzatore eventi lo considera come una stringa di inserimento. Poiché un protocollo Internet versione 6 (IPv6) indirizzo può contenere questa sequenza di caratteri, è possibile accedere a un messaggio di evento che contiene un indirizzo IPv6."
  example:
  - "The following example writes two audit entries to the event log `myNewLog`. The example creates a new event source and a new event log if they do not exist on the local computer. The event message text is specified using a resource identifier in a resource file.  \n  \n [!code-cpp[EventLog_WriteEvent#7](~/add/codesnippet/cpp/9c997f17-0108-4c5c-b894-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#7](~/add/codesnippet/visualbasic/9c997f17-0108-4c5c-b894-_1.vb)]\n [!code-cs[EventLog_WriteEvent#7](~/add/codesnippet/csharp/9c997f17-0108-4c5c-b894-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public void WriteEvent (System.Diagnostics.EventInstance instance, byte[] data, object[] values);
    parameters:
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "Un <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> istanza che rappresenta una voce del registro eventi localizzata."
    - id: data
      type: System.Byte[]
      description: "Matrice di byte che contiene i dati binari associati alla voce."
    - id: values
      type: System.Object[]
      description: "Una matrice di stringhe di unire il testo del messaggio della voce del registro eventi."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  id: WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(String,EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive una voce del registro eventi con l&quot;evento specifico di dati e messaggio stringhe di sostituzione, utilizzando l&quot;origine eventi registrata specificata."
  remarks: "Utilizzare questo metodo per scrivere una voce localizzata nel registro eventi, utilizzando un&quot;origine già registrata come un&quot;origine evento per il log appropriato. Specificare le proprietà evento con identificatori di risorsa, anziché i valori stringa. Il Visualizzatore eventi utilizza gli identificatori di risorsa per visualizzare le stringhe corrispondenti dal file di risorse localizzato per l&quot;origine. Prima di scrivere eventi tramite identificatori di risorsa, è necessario registrare l&quot;origine con il corrispondente file di risorse.       L&quot;input `instance` istanza specifica il messaggio di evento e le proprietà. Impostare il <xref:System.Diagnostics.EventInstance.InstanceId%2A>del `instance` per il messaggio definito nel file di risorse del messaggio di origine di input.</xref:System.Diagnostics.EventInstance.InstanceId%2A> È possibile impostare facoltativamente il <xref:System.Diagnostics.EventInstance.CategoryId%2A>e <xref:System.Diagnostics.EventInstance.EntryType%2A>del `instance` input per definire il tipo di categoria e l&quot;evento della voce di evento.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> È inoltre possibile specificare una matrice di stringhe indipendenti dal linguaggio per inserire il testo del messaggio. Impostare `values` per `null` se il messaggio di evento non contiene segnaposto di formattazione per le stringhe di sostituzione.       L&quot;origine specificata deve essere registrato per un log eventi prima di utilizzare <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> L&quot;origine specificata deve essere configurato per la scrittura di voci localizzate nel log. l&quot;origine deve contenere almeno un file di risorse di messaggio definito.       È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine. Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo se l&quot;applicazione scrive i valori di stringa direttamente nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>"
  example:
  - "The following example writes an informational event entry and a warning event entry to an existing event log. The event message text is specified using a resource identifier in a resource file. The example assumes the corresponding resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#8](~/add/codesnippet/cpp/a57d89b3-94d2-4b9a-803c-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#8](~/add/codesnippet/visualbasic/a57d89b3-94d2-4b9a-803c-_1.vb)]\n [!code-cs[EventLog_WriteEvent#8](~/add/codesnippet/csharp/a57d89b3-94d2-4b9a-803c-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public static void WriteEvent (string source, System.Diagnostics.EventInstance instance, object[] values);
    parameters:
    - id: source
      type: System.String
      description: "Il nome dell&quot;origine eventi registrata per l&quot;applicazione nel computer specificato."
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "Un <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> istanza che rappresenta una voce del registro eventi localizzata."
    - id: values
      type: System.Object[]
      description: "Una matrice di stringhe di unire il testo del messaggio della voce del registro eventi."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  id: WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(String,EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive un evento con i dati dell&quot;evento specificato, le stringhe di sostituzione dei messaggi, voce di log e i dati binari associati e usando l&quot;oggetto di origine eventi registrata."
  remarks: "Utilizzare questo metodo per scrivere una voce localizzata con altri dati specifici dell&quot;evento nel registro eventi, utilizzando un&quot;origine già registrata come un&quot;origine evento per il log appropriato. Specificare le proprietà evento con identificatori di risorsa, anziché i valori stringa. Il Visualizzatore eventi utilizza gli identificatori di risorsa per visualizzare le stringhe corrispondenti dal file di risorse localizzato per l&quot;origine. Prima di scrivere eventi tramite identificatori di risorsa, è necessario registrare l&quot;origine con il corrispondente file di risorse.       L&quot;input `instance` istanza specifica il messaggio di evento e le proprietà. Impostare il <xref:System.Diagnostics.EventInstance.InstanceId%2A>del `instance` per il messaggio definito nel file di risorse del messaggio di origine di input.</xref:System.Diagnostics.EventInstance.InstanceId%2A> È possibile impostare facoltativamente il <xref:System.Diagnostics.EventInstance.CategoryId%2A>e <xref:System.Diagnostics.EventInstance.EntryType%2A>del `instance` input per definire il tipo di categoria e l&quot;evento della voce di evento.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> È inoltre possibile specificare una matrice di stringhe indipendenti dal linguaggio per inserire il testo del messaggio. Impostare `values` per `null` se il messaggio di evento non contiene segnaposto di formattazione per le stringhe di sostituzione.       Specificare i dati binari con un evento quando è necessario fornire dettagli aggiuntivi per l&quot;evento. Ad esempio, utilizzare il `data` parametro per includere informazioni su un errore specifico. Il Visualizzatore eventi non interpreta i dati dell&quot;evento associato. Visualizza i dati in un formato esadecimale e testo combinato. Utilizzare i dati specifici dell&quot;evento raramente. include solo se si è certi che possa risultare utile. È inoltre possibile utilizzare dati specifici dell&quot;evento per archiviare le informazioni che dell&quot;applicazione può elaborare in modo indipendente da Visualizzatore eventi. Ad esempio, è Impossibile scrivere un visualizzatore specifico per gli eventi o scrivere un programma che cerca nel registro eventi e crea report che includono informazioni dai dati specifici dell&quot;evento.       L&quot;origine specificata deve essere registrato per un log eventi prima di utilizzare <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> L&quot;origine specificata deve essere configurato per la scrittura di voci localizzate nel log. l&quot;origine deve contenere almeno un file di risorse di messaggio definito.       È necessario creare e configurare l&quot;origine evento prima di scrivere la prima voce con l&quot;origine. Creare la nuova origine eventi durante l&quot;installazione dell&quot;applicazione. Questo consente di tempo per il sistema operativo aggiornare l&quot;elenco delle origini eventi registrati e la relativa configurazione. Se il sistema operativo non è aggiornato l&quot;elenco delle origini evento e si tenta di scrivere un evento con la nuova origine, che l&quot;operazione di scrittura avrà esito negativo. È possibile configurare una nuova origine mediante un <xref:System.Diagnostics.EventLogInstaller>, o tramite il <xref:System.Diagnostics.EventLog.CreateEventSource%2A>metodo.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> È necessario disporre dei diritti amministrativi nel computer per creare una nuova origine evento.       L&quot;origine deve essere configurata per la scrittura di voci localizzate o per la scrittura di stringhe dirette. Utilizzare il <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo se l&quot;applicazione scrive i valori di stringa direttamente nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Se l&quot;applicazione scrive voci tramite identificatori di risorsa e i valori stringa, è necessario registrare due origini separate. Ad esempio, configurare un&quot;origine dei file di risorse e quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo per scrivere voci tramite identificatori di risorsa nel registro eventi.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Creare un&quot;origine diversa senza file di risorse, quindi utilizzare tale origine nel <xref:System.Diagnostics.EventLog.WriteEntry%2A>metodo per scrivere stringhe direttamente nel log eventi.</xref:System.Diagnostics.EventLog.WriteEntry%2A>"
  example:
  - "The following example writes an informational event entry and a warning event entry to an existing event log. The event message text is specified using a resource identifier in a resource file. The example assumes the corresponding resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#8](~/add/codesnippet/cpp/d4971002-e0d1-493b-96f8-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#8](~/add/codesnippet/visualbasic/d4971002-e0d1-493b-96f8-_1.vb)]\n [!code-cs[EventLog_WriteEvent#8](~/add/codesnippet/csharp/d4971002-e0d1-493b-96f8-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public static void WriteEvent (string source, System.Diagnostics.EventInstance instance, byte[] data, object[] values);
    parameters:
    - id: source
      type: System.String
      description: "Il nome dell&quot;origine eventi registrata per l&quot;applicazione nel computer specificato."
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "Un <xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> istanza che rappresenta una voce del registro eventi localizzata."
    - id: data
      type: System.Byte[]
      description: "Matrice di byte che contiene i dati binari associati alla voce."
    - id: values
      type: System.Object[]
      description: "Una matrice di stringhe di unire il testo del messaggio della voce del registro eventi."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile aprire la chiave del Registro di sistema per il log eventi."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Il sistema operativo ha segnalato un errore durante la scrittura della voce dell&quot;evento nel registro eventi. Un codice di errore di Windows non è disponibile."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Diagnostics.EventLog.#ctor
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog()
  nameWithType: EventLog.EventLog()
  fullName: System.Diagnostics.EventLog.EventLog()
- uid: System.Diagnostics.EventLog.#ctor(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog(String)
  nameWithType: EventLog.EventLog(String)
  fullName: System.Diagnostics.EventLog.EventLog(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog(String,String)
  nameWithType: EventLog.EventLog(String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String)
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog(String,String,String)
  nameWithType: EventLog.EventLog(String,String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String,String)
- uid: System.Diagnostics.EventLog.BeginInit
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: BeginInit()
  nameWithType: EventLog.BeginInit()
  fullName: System.Diagnostics.EventLog.BeginInit()
- uid: System.Diagnostics.EventLog.Clear
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Clear()
  nameWithType: EventLog.Clear()
  fullName: System.Diagnostics.EventLog.Clear()
- uid: System.Diagnostics.EventLog.Close
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Close()
  nameWithType: EventLog.Close()
  fullName: System.Diagnostics.EventLog.Close()
- uid: System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource(EventSourceCreationData)
  nameWithType: EventLog.CreateEventSource(EventSourceCreationData)
  fullName: System.Diagnostics.EventLog.CreateEventSource(EventSourceCreationData)
- uid: System.Diagnostics.EventSourceCreationData
  parent: System.Diagnostics
  isExternal: false
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData
  fullName: System.Diagnostics.EventSourceCreationData
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource(String,String)
  nameWithType: EventLog.CreateEventSource(String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String)
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource(String,String,String)
  nameWithType: EventLog.CreateEventSource(String,String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String,String)
- uid: System.Diagnostics.EventLog.Delete(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Delete(String)
  nameWithType: EventLog.Delete(String)
  fullName: System.Diagnostics.EventLog.Delete(String)
- uid: System.Diagnostics.EventLog.Delete(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Delete(String,String)
  nameWithType: EventLog.Delete(String,String)
  fullName: System.Diagnostics.EventLog.Delete(String,String)
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: DeleteEventSource(String)
  nameWithType: EventLog.DeleteEventSource(String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String)
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: DeleteEventSource(String,String)
  nameWithType: EventLog.DeleteEventSource(String,String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String,String)
- uid: System.Diagnostics.EventLog.Dispose(System.Boolean)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLog.Dispose(Boolean)
  fullName: System.Diagnostics.EventLog.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLog.EnableRaisingEvents
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: EventLog.EnableRaisingEvents
  fullName: System.Diagnostics.EventLog.EnableRaisingEvents
- uid: System.Diagnostics.EventLog.EndInit
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EndInit()
  nameWithType: EventLog.EndInit()
  fullName: System.Diagnostics.EventLog.EndInit()
- uid: System.Diagnostics.EventLog.Entries
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Entries
  nameWithType: EventLog.Entries
  fullName: System.Diagnostics.EventLog.Entries
- uid: System.Diagnostics.EventLogEntryCollection
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntryCollection
  nameWithType: EventLogEntryCollection
  fullName: System.Diagnostics.EventLogEntryCollection
- uid: System.Diagnostics.EventLog.EntryWritten
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EntryWritten
  nameWithType: EventLog.EntryWritten
  fullName: System.Diagnostics.EventLog.EntryWritten
- uid: System.Diagnostics.EntryWrittenEventHandler
  parent: System.Diagnostics
  isExternal: false
  name: EntryWrittenEventHandler
  nameWithType: EntryWrittenEventHandler
  fullName: System.Diagnostics.EntryWrittenEventHandler
- uid: System.Diagnostics.EventLog.Exists(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Exists(String)
  nameWithType: EventLog.Exists(String)
  fullName: System.Diagnostics.EventLog.Exists(String)
- uid: System.Diagnostics.EventLog.Exists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Exists(String,String)
  nameWithType: EventLog.Exists(String,String)
  fullName: System.Diagnostics.EventLog.Exists(String,String)
- uid: System.Diagnostics.EventLog.GetEventLogs
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: GetEventLogs()
  nameWithType: EventLog.GetEventLogs()
  fullName: System.Diagnostics.EventLog.GetEventLogs()
- uid: System.Diagnostics.EventLog[]
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog[]
  spec.csharp:
  - uid: System.Diagnostics.EventLog
    name: EventLog
    nameWithType: EventLog
    fullName: EventLog[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLog.GetEventLogs(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: GetEventLogs(String)
  nameWithType: EventLog.GetEventLogs(String)
  fullName: System.Diagnostics.EventLog.GetEventLogs(String)
- uid: System.Diagnostics.EventLog.Log
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Log
  nameWithType: EventLog.Log
  fullName: System.Diagnostics.EventLog.Log
- uid: System.Diagnostics.EventLog.LogDisplayName
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogDisplayName
  nameWithType: EventLog.LogDisplayName
  fullName: System.Diagnostics.EventLog.LogDisplayName
- uid: System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogNameFromSourceName(String,String)
  nameWithType: EventLog.LogNameFromSourceName(String,String)
  fullName: System.Diagnostics.EventLog.LogNameFromSourceName(String,String)
- uid: System.Diagnostics.EventLog.MachineName
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MachineName
  nameWithType: EventLog.MachineName
  fullName: System.Diagnostics.EventLog.MachineName
- uid: System.Diagnostics.EventLog.MaximumKilobytes
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MaximumKilobytes
  nameWithType: EventLog.MaximumKilobytes
  fullName: System.Diagnostics.EventLog.MaximumKilobytes
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics.EventLog.MinimumRetentionDays
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MinimumRetentionDays
  nameWithType: EventLog.MinimumRetentionDays
  fullName: System.Diagnostics.EventLog.MinimumRetentionDays
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: ModifyOverflowPolicy(OverflowAction,Int32)
  nameWithType: EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
  fullName: System.Diagnostics.EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
- uid: System.Diagnostics.OverflowAction
  parent: System.Diagnostics
  isExternal: false
  name: OverflowAction
  nameWithType: OverflowAction
  fullName: System.Diagnostics.OverflowAction
- uid: System.Diagnostics.EventLog.OverflowAction
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: OverflowAction
  nameWithType: EventLog.OverflowAction
  fullName: System.Diagnostics.EventLog.OverflowAction
- uid: System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: RegisterDisplayName(String,Int64)
  nameWithType: EventLog.RegisterDisplayName(String,Int64)
  fullName: System.Diagnostics.EventLog.RegisterDisplayName(String,Int64)
- uid: System.Diagnostics.EventLog.Source
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Source
  nameWithType: EventLog.Source
  fullName: System.Diagnostics.EventLog.Source
- uid: System.Diagnostics.EventLog.SourceExists(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SourceExists(String)
  nameWithType: EventLog.SourceExists(String)
  fullName: System.Diagnostics.EventLog.SourceExists(String)
- uid: System.Diagnostics.EventLog.SourceExists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SourceExists(String,String)
  nameWithType: EventLog.SourceExists(String,String)
  fullName: System.Diagnostics.EventLog.SourceExists(String,String)
- uid: System.Diagnostics.EventLog.SynchronizingObject
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SynchronizingObject
  nameWithType: EventLog.SynchronizingObject
  fullName: System.Diagnostics.EventLog.SynchronizingObject
- uid: System.ComponentModel.ISynchronizeInvoke
  parent: System.ComponentModel
  isExternal: false
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
- uid: System.Diagnostics.EventLog.WriteEntry(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String)
  nameWithType: EventLog.WriteEntry(String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType)
- uid: System.Diagnostics.EventLogEntryType
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntryType
  nameWithType: EventLogEntryType
  fullName: System.Diagnostics.EventLogEntryType
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String)
  nameWithType: EventLog.WriteEntry(String,String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Object[])
- uid: System.Diagnostics.EventInstance
  parent: System.Diagnostics
  isExternal: false
  name: EventInstance
  nameWithType: EventInstance
  fullName: System.Diagnostics.EventInstance
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Byte[],Object[])
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(String,EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Object[])
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(String,EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
- uid: System.Diagnostics.EventLog.#ctor*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog
  nameWithType: EventLog.EventLog
- uid: System.Diagnostics.EventLog.BeginInit*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: BeginInit
  nameWithType: EventLog.BeginInit
- uid: System.Diagnostics.EventLog.Clear*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Clear
  nameWithType: EventLog.Clear
- uid: System.Diagnostics.EventLog.Close*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Close
  nameWithType: EventLog.Close
- uid: System.Diagnostics.EventLog.CreateEventSource*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource
  nameWithType: EventLog.CreateEventSource
- uid: System.Diagnostics.EventLog.Delete*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Delete
  nameWithType: EventLog.Delete
- uid: System.Diagnostics.EventLog.DeleteEventSource*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: DeleteEventSource
  nameWithType: EventLog.DeleteEventSource
- uid: System.Diagnostics.EventLog.Dispose*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Dispose
  nameWithType: EventLog.Dispose
- uid: System.Diagnostics.EventLog.EnableRaisingEvents*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: EventLog.EnableRaisingEvents
- uid: System.Diagnostics.EventLog.EndInit*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EndInit
  nameWithType: EventLog.EndInit
- uid: System.Diagnostics.EventLog.Entries*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Entries
  nameWithType: EventLog.Entries
- uid: System.Diagnostics.EventLog.Exists*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Exists
  nameWithType: EventLog.Exists
- uid: System.Diagnostics.EventLog.GetEventLogs*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: GetEventLogs
  nameWithType: EventLog.GetEventLogs
- uid: System.Diagnostics.EventLog.Log*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Log
  nameWithType: EventLog.Log
- uid: System.Diagnostics.EventLog.LogDisplayName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogDisplayName
  nameWithType: EventLog.LogDisplayName
- uid: System.Diagnostics.EventLog.LogNameFromSourceName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogNameFromSourceName
  nameWithType: EventLog.LogNameFromSourceName
- uid: System.Diagnostics.EventLog.MachineName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MachineName
  nameWithType: EventLog.MachineName
- uid: System.Diagnostics.EventLog.MaximumKilobytes*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MaximumKilobytes
  nameWithType: EventLog.MaximumKilobytes
- uid: System.Diagnostics.EventLog.MinimumRetentionDays*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MinimumRetentionDays
  nameWithType: EventLog.MinimumRetentionDays
- uid: System.Diagnostics.EventLog.ModifyOverflowPolicy*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: ModifyOverflowPolicy
  nameWithType: EventLog.ModifyOverflowPolicy
- uid: System.Diagnostics.EventLog.OverflowAction*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: OverflowAction
  nameWithType: EventLog.OverflowAction
- uid: System.Diagnostics.EventLog.RegisterDisplayName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: RegisterDisplayName
  nameWithType: EventLog.RegisterDisplayName
- uid: System.Diagnostics.EventLog.Source*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Source
  nameWithType: EventLog.Source
- uid: System.Diagnostics.EventLog.SourceExists*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SourceExists
  nameWithType: EventLog.SourceExists
- uid: System.Diagnostics.EventLog.SynchronizingObject*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SynchronizingObject
  nameWithType: EventLog.SynchronizingObject
- uid: System.Diagnostics.EventLog.WriteEntry*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry
  nameWithType: EventLog.WriteEntry
- uid: System.Diagnostics.EventLog.WriteEvent*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent
  nameWithType: EventLog.WriteEvent
