### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.TcpListener
  id: TcpListener
  children:
  - System.Net.Sockets.TcpListener.#ctor(System.Int32)
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.TcpListener.AcceptSocket
  - System.Net.Sockets.TcpListener.AcceptSocketAsync
  - System.Net.Sockets.TcpListener.AcceptTcpClient
  - System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  - System.Net.Sockets.TcpListener.Active
  - System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
  - System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)
  - System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  - System.Net.Sockets.TcpListener.Create(System.Int32)
  - System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)
  - System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)
  - System.Net.Sockets.TcpListener.ExclusiveAddressUse
  - System.Net.Sockets.TcpListener.LocalEndpoint
  - System.Net.Sockets.TcpListener.Pending
  - System.Net.Sockets.TcpListener.Server
  - System.Net.Sockets.TcpListener.Start
  - System.Net.Sockets.TcpListener.Start(System.Int32)
  - System.Net.Sockets.TcpListener.Stop
  langs:
  - csharp
  name: TcpListener
  nameWithType: TcpListener
  fullName: System.Net.Sockets.TcpListener
  type: Class
  summary: "È in ascolto per le connessioni da client di rete TCP."
  remarks: "La classe TcpListener fornisce semplici metodi che attendono e accettano le richieste di connessione in ingresso in modalità sincrona di blocco. È possibile utilizzare un <xref:System.Net.Sockets.TcpClient>o <xref:System.Net.Sockets.Socket>per la connessione con una TcpListener.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpClient> Creare un oggetto TcpListener utilizzando un <xref:System.Net.IPEndPoint>, un indirizzo IP locale e il numero di porta o un numero di porta.</xref:System.Net.IPEndPoint> Specificare <xref:System.Net.IPAddress.Any>per l&quot;indirizzo IP locale e 0 per il numero di porta locale se si desidera il provider del servizio sottostante per assegnare i valori per l&quot;utente.</xref:System.Net.IPAddress.Any> Se si sceglie di eseguire questa operazione, è possibile utilizzare il <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>proprietà per identificare le informazioni assegnate, dopo la connessione del socket.</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>       Utilizzare il <xref:System.Net.Sockets.TcpListener.Start%2A>metodo può mettersi in ascolto delle richieste di connessione in ingresso.</xref:System.Net.Sockets.TcpListener.Start%2A> <xref:System.Net.Sockets.TcpListener.Start%2A>le connessioni in ingresso coda finché non si chiamerà il <xref:System.Net.Sockets.TcpListener.Stop%2A>metodo o all&quot;accodamento <xref:System.Net.Sockets.SocketOptionName>.</xref:System.Net.Sockets.SocketOptionName> </xref:System.Net.Sockets.TcpListener.Stop%2A></xref:System.Net.Sockets.TcpListener.Start%2A> Utilizzare uno <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>o <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>per estrarre una connessione dalla coda di richieste di connessione in ingresso.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Questi due metodi verranno bloccata. Se si desidera evitare il blocco, è possibile utilizzare il <xref:System.Net.Sockets.TcpListener.Pending%2A>metodo per determinare se sono disponibili nella coda di richieste di connessione.</xref:System.Net.Sockets.TcpListener.Pending%2A>       Chiamare il <xref:System.Net.Sockets.TcpListener.Stop%2A>metodo per chiudere il TcpListener.</xref:System.Net.Sockets.TcpListener.Stop%2A>      > [!NOTE] > Il <xref:System.Net.Sockets.TcpListener.Stop%2A>metodo non chiude le connessioni accettate.</xref:System.Net.Sockets.TcpListener.Stop%2A> È responsabili della chiusura questi separatamente."
  example:
  - "The following code example creates a TcpListener.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener#1](~/add/codesnippet/cpp/t-system.net.sockets.tcp_0_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener#1](~/add/codesnippet/csharp/t-system.net.sockets.tcp_0_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener#1](~/add/codesnippet/visualbasic/t-system.net.sockets.tcp_0_1.vb)]  \n  \n See <xref:System.Net.Sockets.TcpClient> for a client example."
  syntax:
    content: public class TcpListener
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: TcpListener(Int32)
  nameWithType: TcpListener.TcpListener(Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> classe che è in ascolto sulla porta specificata."
  remarks: "Questo costruttore è obsoleto. Utilizzo di <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName>o <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>costruttori.</xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> </xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName>       Questo costruttore consente di specificare il numero di porta su cui restare in attesa per i tentativi di connessione in ingresso. Con questo costruttore, il provider del servizio sottostante assegna l&quot;indirizzo di rete più appropriato. Se non si desidera eseguire la porta locale utilizzata, è possibile specificare 0 per il numero di porta. In questo caso, il provider del servizio verrà assegnato un numero di porta disponibile tra 1024 e 5000. Se si utilizza questo approccio, è possibile individuare il numero di porta e indirizzo di rete locale è stato assegnato utilizzando il <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>proprietà.</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>       Chiamare il <xref:System.Net.Sockets.TcpListener.Start%2A>(metodo) deve rimanere in attesa per i tentativi di connessione in ingresso.</xref:System.Net.Sockets.TcpListener.Start%2A>"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.TcpListener> using a local port number.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_18_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_18_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_18_1.vb)]"
  syntax:
    content: public TcpListener (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "La porta su cui restare in attesa per i tentativi di connessione in ingresso."
  overload: System.Net.Sockets.TcpListener.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>non è compreso tra <xref:System.Net.IPEndPoint.MinPort> e <xref:System.Net.IPEndPoint.MaxPort>."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: TcpListener(IPEndPoint)
  nameWithType: TcpListener.TcpListener(IPEndPoint)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> classe con l&quot;endpoint locale specificato."
  remarks: "Questo costruttore consente di specificare l&quot;indirizzo IP locale e tenta di numero di porta su cui restare in attesa per la connessione in ingresso. Prima di utilizzare questo costruttore, è necessario creare un <xref:System.Net.IPEndPoint>utilizzando il numero porta e indirizzo IP locale desiderato.</xref:System.Net.IPEndPoint> Passare la variabile <xref:System.Net.IPEndPoint>al costruttore come il `localEP` parametro.</xref:System.Net.IPEndPoint>       Se non si desidera viene assegnato l&quot;indirizzo locale, è possibile creare un <xref:System.Net.IPEndPoint>utilizzando <xref:System.Net.IPAddress.Any?displayProperty=fullName>come parametro l&quot;indirizzo e il servizio sottostante provider verrà assegnato l&quot;indirizzo di rete più appropriato.</xref:System.Net.IPAddress.Any?displayProperty=fullName> </xref:System.Net.IPEndPoint> In questo modo è possibile semplificare l&quot;applicazione se si dispongono di più interfacce di rete. Se non si desidera eseguire la porta locale utilizzata, è possibile creare un <xref:System.Net.IPEndPoint>utilizzando 0 per il numero di porta.</xref:System.Net.IPEndPoint> In questo caso, il provider del servizio verrà assegnato un numero di porta disponibile tra 1024 e 5000. Se si utilizza questo approccio, è possibile individuare il numero di porta e indirizzo di rete locale è stato assegnato utilizzando il <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>proprietà.</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>       Chiamare il <xref:System.Net.Sockets.TcpListener.Start%2A>(metodo) deve rimanere in attesa per i tentativi di connessione in ingresso.</xref:System.Net.Sockets.TcpListener.Start%2A>      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using the local endpoint.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_20_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_20_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_20_1.vb)]"
  syntax:
    content: public TcpListener (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "Un <xref:System.Net.IPEndPoint>che rappresenta l&quot;endpoint locale a cui associare il listener <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.TcpListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localEP</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  id: '#ctor(System.Net.IPAddress,System.Int32)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: TcpListener(IPAddress,Int32)
  nameWithType: TcpListener.TcpListener(IPAddress,Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPAddress,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> tenta di classe che è in attesa di connessione in ingresso al numero porta e indirizzo IP locale specificato."
  remarks: "Questo costruttore consente di specificare l&quot;indirizzo IP locale e tenta di numero di porta su cui restare in attesa per la connessione in ingresso. Prima di chiamare questo costruttore è necessario creare innanzitutto un <xref:System.Net.IPAddress>utilizzando l&quot;indirizzo locale desiderato.</xref:System.Net.IPAddress> Passare la variabile <xref:System.Net.IPAddress>al costruttore come il `localaddr` parametro.</xref:System.Net.IPAddress> Se non si desidera viene assegnato l&quot;indirizzo locale, specificare <xref:System.Net.IPAddress.Any?displayProperty=fullName>per il `localaddr` parametro e il provider del servizio sottostante assegnerà l&quot;indirizzo di rete più appropriato.</xref:System.Net.IPAddress.Any?displayProperty=fullName> In questo modo è possibile semplificare l&quot;applicazione se si dispongono di più interfacce di rete. Se non si desidera eseguire la porta locale utilizzata, è possibile specificare 0 per il numero di porta. In questo caso, il provider del servizio verrà assegnato un numero di porta disponibile tra 1024 e 5000. Se si utilizza questo approccio, è possibile individuare il numero di porta e indirizzo di rete locale è stato assegnato utilizzando il <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>proprietà.</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>       Chiamare il <xref:System.Net.Sockets.TcpListener.Start%2A>(metodo) deve rimanere in attesa per i tentativi di connessione in ingresso.</xref:System.Net.Sockets.TcpListener.Start%2A>      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using a local IP address and port number.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.tcp_19_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.tcp_19_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_19_1.vb)]"
  syntax:
    content: public TcpListener (System.Net.IPAddress localaddr, int port);
    parameters:
    - id: localaddr
      type: System.Net.IPAddress
      description: "Un <xref:System.Net.IPAddress>che rappresenta l&quot;indirizzo IP locale.</xref:System.Net.IPAddress>"
    - id: port
      type: System.Int32
      description: "La porta su cui restare in attesa per i tentativi di connessione in ingresso."
  overload: System.Net.Sockets.TcpListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localaddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>non è compreso tra <xref:System.Net.IPEndPoint.MinPort> e <xref:System.Net.IPEndPoint.MaxPort>."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptSocket
  id: AcceptSocket
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptSocket()
  nameWithType: TcpListener.AcceptSocket()
  fullName: System.Net.Sockets.TcpListener.AcceptSocket()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Accetta una richiesta di connessione in sospeso."
  remarks: "AcceptSocket è un metodo di blocco che restituisce un <xref:System.Net.Sockets.Socket>che è possibile utilizzare per inviare e ricevere dati.</xref:System.Net.Sockets.Socket> Se si desidera evitare il blocco, utilizzare il <xref:System.Net.Sockets.TcpListener.Pending%2A>metodo per determinare se le richieste di connessione sono disponibili nella coda di connessione in ingresso.</xref:System.Net.Sockets.TcpListener.Pending%2A>       Il <xref:System.Net.Sockets.Socket>restituito viene inizializzato con il numero di porta e indirizzo IP dell&quot;host remoto.</xref:System.Net.Sockets.Socket> È possibile utilizzare uno qualsiasi del <xref:System.Net.Sockets.Socket.Send%2A>e <xref:System.Net.Sockets.Socket.Receive%2A>metodi disponibili nel <xref:System.Net.Sockets.Socket>classe per comunicare con l&quot;host remoto.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket.Receive%2A> </xref:System.Net.Sockets.Socket.Send%2A> Quando si è finito utilizzando il <xref:System.Net.Sockets.Socket>, verificare di chiamare il relativo <xref:System.Net.Sockets.Socket.Close%2A>metodo.</xref:System.Net.Sockets.Socket.Close%2A> </xref:System.Net.Sockets.Socket> Se l&quot;applicazione è relativamente semplice, considerare l&quot;utilizzo di <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>metodo anziché il metodo AcceptSocket.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> <xref:System.Net.Sockets.TcpClient>fornisce metodi semplici per l&quot;invio e ricezione di dati in una rete in modalità sincrona di blocco.</xref:System.Net.Sockets.TcpClient>      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "In the following code example, the AcceptSocket method is used to return a <xref:System.Net.Sockets.Socket>. This <xref:System.Net.Sockets.Socket> is used to communicate with the newly connected client.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.tcp_7_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.tcp_7_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_7_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket AcceptSocket ();
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: "Oggetto <xref:System.Net.Sockets.Socket>utilizzato per inviare e ricevere dati.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.TcpListener.AcceptSocket*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il listener non è stato avviato con una chiamata a <xref:System.Net.Sockets.TcpListener.Start*>.</xref:System.Net.Sockets.TcpListener.Start*>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync
  id: AcceptSocketAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptSocketAsync()
  nameWithType: TcpListener.AcceptSocketAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Accetta una richiesta di connessione in sospeso come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che la connessione socket è stata accettata.</xref:System.Threading.Tasks.Task%601>       Il <xref:System.Net.Sockets.Socket>restituito in <xref:System.Threading.Tasks.Task%601>viene inizializzato con il numero di porta e indirizzo IP dell&quot;host remoto.</xref:System.Threading.Tasks.Task%601> </xref:System.Net.Sockets.Socket> È possibile utilizzare uno qualsiasi del <xref:System.Net.Sockets.Socket.Send%2A>e <xref:System.Net.Sockets.Socket.Receive%2A>metodi disponibili nel <xref:System.Net.Sockets.Socket>classe per comunicare con l&quot;host remoto.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket.Receive%2A> </xref:System.Net.Sockets.Socket.Send%2A> Quando si è finito utilizzando il <xref:System.Net.Sockets.Socket>, verificare di chiamare il relativo <xref:System.Net.Sockets.Socket.Close%2A>metodo.</xref:System.Net.Sockets.Socket.Close%2A> </xref:System.Net.Sockets.Socket> Se l&quot;applicazione è relativamente semplice, considerare l&quot;utilizzo di <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>metodo anziché il metodo AcceptSocketAsync.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> <xref:System.Net.Sockets.TcpClient>fornisce metodi semplici per l&quot;invio e ricezione di dati in una rete in modalità sincrona di blocco.</xref:System.Net.Sockets.TcpClient>      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.Socket> AcceptSocketAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.Socket}
      description: "Restituisce &lt;xref:System.Threading.Tasks.Task%601&gt; oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona. Il &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; proprietà nell&quot;oggetto attività restituisce un <xref:System.Net.Sockets.Socket>utilizzato per inviare e ricevere dati.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.TcpListener.AcceptSocketAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il listener non è stato avviato con una chiamata a <xref:System.Net.Sockets.TcpListener.Start*>.</xref:System.Net.Sockets.TcpListener.Start*>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptTcpClient
  id: AcceptTcpClient
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptTcpClient()
  nameWithType: TcpListener.AcceptTcpClient()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClient()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Accetta una richiesta di connessione in sospeso."
  remarks: "AcceptTcpClient è un metodo di blocco che restituisce un <xref:System.Net.Sockets.TcpClient>che è possibile utilizzare per inviare e ricevere dati.</xref:System.Net.Sockets.TcpClient> Utilizzare il <xref:System.Net.Sockets.TcpListener.Pending%2A>metodo per determinare se le richieste di connessione sono disponibili nella coda di connessione in ingresso, se si desidera evitare il blocco.</xref:System.Net.Sockets.TcpListener.Pending%2A>       Utilizzare il <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName>metodo per ottenere la sottostante <xref:System.Net.Sockets.NetworkStream>restituito <xref:System.Net.Sockets.TcpClient>.</xref:System.Net.Sockets.TcpClient> </xref:System.Net.Sockets.NetworkStream> </xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> Il <xref:System.Net.Sockets.NetworkStream>fornirà i metodi per l&quot;invio e ricezione con l&quot;host remoto.</xref:System.Net.Sockets.NetworkStream> Quando si è tramite il <xref:System.Net.Sockets.TcpClient>, verificare di chiamare il relativo <xref:System.Net.Sockets.TcpClient.Close%2A>metodo.</xref:System.Net.Sockets.TcpClient.Close%2A> </xref:System.Net.Sockets.TcpClient> Se si desidera maggiore flessibilità rispetto a un <xref:System.Net.Sockets.TcpClient>offre, è consigliabile utilizzare <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> </xref:System.Net.Sockets.TcpClient>      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "In the following code example, the AcceptTcpClient method is used to return a <xref:System.Net.Sockets.TcpClient>. This <xref:System.Net.Sockets.TcpClient> is used to communicate with the newly connected client.  \n  \n [!code-cs[Classic TcpListenerExample#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_15_1.cs)]\n [!code-cpp[Classic TcpListenerExample#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_15_1.cpp)]\n [!code-vb[Classic TcpListenerExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_15_1.vb)]"
  syntax:
    content: public System.Net.Sockets.TcpClient AcceptTcpClient ();
    parameters: []
    return:
      type: System.Net.Sockets.TcpClient
      description: "Oggetto <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref> utilizzato per inviare e ricevere dati."
  overload: System.Net.Sockets.TcpListener.AcceptTcpClient*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il listener non è stato avviato con una chiamata a <xref:System.Net.Sockets.TcpListener.Start*>.</xref:System.Net.Sockets.TcpListener.Start*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Utilizzare il &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; proprietà per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  id: AcceptTcpClientAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptTcpClientAsync()
  nameWithType: TcpListener.AcceptTcpClientAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Accetta una richiesta di connessione in sospeso come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che è stata accettata la connessione TCP.</xref:System.Threading.Tasks.Task%601>       Utilizzare il <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName>metodo per ottenere la sottostante <xref:System.Net.Sockets.NetworkStream>dello restituito <xref:System.Net.Sockets.TcpClient>in <xref:System.Threading.Tasks.Task%601>.</xref:System.Threading.Tasks.Task%601> </xref:System.Net.Sockets.TcpClient> </xref:System.Net.Sockets.NetworkStream> </xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> Il <xref:System.Net.Sockets.NetworkStream>fornirà i metodi per l&quot;invio e ricezione con l&quot;host remoto.</xref:System.Net.Sockets.NetworkStream> Quando si è tramite il <xref:System.Net.Sockets.TcpClient>, verificare di chiamare il relativo <xref:System.Net.Sockets.TcpClient.Close%2A>metodo.</xref:System.Net.Sockets.TcpClient.Close%2A> </xref:System.Net.Sockets.TcpClient> Se si desidera maggiore flessibilità rispetto a un <xref:System.Net.Sockets.TcpClient>offre, è consigliabile utilizzare <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>o <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.</xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> </xref:System.Net.Sockets.TcpClient>      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.TcpClient> AcceptTcpClientAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
      description: "Restituisce &lt;xref:System.Threading.Tasks.Task%601&gt; oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona. Il &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; proprietà nell&quot;oggetto attività restituisce un <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref> utilizzato per inviare e ricevere dati."
  overload: System.Net.Sockets.TcpListener.AcceptTcpClientAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il listener non è stato avviato con una chiamata a <xref:System.Net.Sockets.TcpListener.Start*>.</xref:System.Net.Sockets.TcpListener.Start*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Utilizzare il &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; proprietà per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Active
  id: Active
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Active
  nameWithType: TcpListener.Active
  fullName: System.Net.Sockets.TcpListener.Active
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene un valore che indica se <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> è attivamente in ascolto per le connessioni client."
  remarks: "Le classi che derivano da <xref:System.Net.Sockets.TcpListener>può utilizzare questa proprietà per determinare se il <xref:System.Net.Sockets.Socket>è attualmente in attesa per i tentativi di connessione in ingresso.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener> Il <xref:System.Net.Sockets.TcpClient.Active%2A>proprietà può essere utilizzata per evitare la ridondanza <xref:System.Net.Sockets.TcpListener.Start%2A>tenta.</xref:System.Net.Sockets.TcpListener.Start%2A> </xref:System.Net.Sockets.TcpClient.Active%2A>"
  syntax:
    content: protected bool Active { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> attivamente in attesa; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.TcpListener.Active*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
  id: AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AllowNatTraversal(Boolean)
  nameWithType: TcpListener.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.TcpListener.AllowNatTraversal(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Abilita o disabilita l&quot;attraversamento Network Address Translation (NAT) in un <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> istanza."
  remarks: "Il metodo AllowNatTraversal viene utilizzato per abilitare o disabilitare l&quot;attraversamento NAT per un <xref:System.Net.Sockets.TcpListener>istanza.</xref:System.Net.Sockets.TcpListener> È possibile specificare l&quot;attraversamento NAT con Teredo, 6to4 o un tunnel ISATAP.       Quando il `allowed` parametro è false, l&quot; <xref:System.Net.Sockets.SocketOptionName>opzione sul socket associato è impostata su <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Disabilita in modo esplicito l&quot;attraversamento NAT per un <xref:System.Net.Sockets.TcpListener>istanza.</xref:System.Net.Sockets.TcpListener>       Quando il `allowed` parametro è true, l&quot; <xref:System.Net.Sockets.SocketOptionName>opzione sul socket associato è impostata su <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Può consentire l&quot;attraversamento NAT per un <xref:System.Net.Sockets.TcpListener>a seconda delle regole del firewall sul posto del sistema.</xref:System.Net.Sockets.TcpListener>       Il metodo AllowNatTraversal deve essere richiamato prima di chiamare il <xref:System.Net.Sockets.TcpListener.Start%2A>metodo può mettersi in ascolto delle richieste di connessione in ingresso (prima che venga associato il socket).</xref:System.Net.Sockets.TcpListener.Start%2A> Se viene chiamato il metodo AllowNatTraversal dopo il <xref:System.Net.Sockets.TcpListener.Start%2A>(metodo), quindi un <xref:System.InvalidOperationException>verrà generata.</xref:System.InvalidOperationException> </xref:System.Net.Sockets.TcpListener.Start%2A>       Un indirizzo Teredo è un indirizzo IPv6 con il prefisso 2001::/ / 32. Gli indirizzi Teredo possono essere restituiti tramite normale risoluzione dei nomi DNS o enumerati come un indirizzo IPv6 assegnato a un&quot;interfaccia locale."
  syntax:
    content: public void AllowNatTraversal (bool allowed);
    parameters:
    - id: allowed
      type: System.Boolean
      description: "Valore booleano che specifica se abilitare o disabilitare l&quot;attraversamento NAT."
  overload: System.Net.Sockets.TcpListener.AllowNatTraversal*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il metodo AllowNatTraversal è stato chiamato dopo la chiamata al <xref:System.Net.Sockets.TcpListener.Start*>metodo</xref:System.Net.Sockets.TcpListener.Start*>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)
  id: BeginAcceptSocket(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: BeginAcceptSocket(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptSocket(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptSocket(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Avvia un&quot;operazione asincrona per accettare un tentativo di connessione in ingresso."
  remarks: "L&quot;operazione asincrona di BeginAcceptSocket deve essere completata chiamando il <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>metodo.</xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> In genere, il metodo viene richiamato da di `callback` delegato.       Questo metodo si blocca fino al completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare il <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>metodo.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>       Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > È possibile chiamare il <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>proprietà dell&quot;oggetto restituito <xref:System.Net.Sockets.Socket>per identificare il numero porta e indirizzo di rete dell&quot;host remoto.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>proprietà per ottenere il codice di errore specifico e fare riferimento alla documentazione codici di errore di Windows Sockets versione 2 API in MSDN library all&quot;indirizzo [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) per una descrizione dettagliata dell&quot;errore.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the BeginAcceptSocket method to create and connect a socket. The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/cpp/1d0c3046-b366-41a2-aab6-_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/csharp/1d0c3046-b366-41a2-aab6-_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/visualbasic/1d0c3046-b366-41a2-aab6-_1.vb)]"
  syntax:
    content: public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;operazione è stata completata.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Oggetto definito dall&quot;utente contenente informazioni sull&quot;operazione di accettazione. Questo oggetto viene passato per il `callback` delegato quando l&quot;operazione è stata completata."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che fa riferimento alla creazione asincrona di <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.IAsyncResult>"
  overload: System.Net.Sockets.TcpListener.BeginAcceptSocket*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante il tentativo di accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  id: BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: BeginAcceptTcpClient(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Avvia un&quot;operazione asincrona per accettare un tentativo di connessione in ingresso."
  remarks: "L&quot;operazione asincrona di BeginAcceptTcpClient deve essere completata chiamando il <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>metodo.</xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> In genere, il metodo viene richiamato da di `callback` delegato.       Questo metodo si blocca fino al completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare il <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>metodo.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>       Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>proprietà per ottenere il codice di errore specifico e fare riferimento alla documentazione codici di errore di Windows Sockets versione 2 API in MSDN library all&quot;indirizzo [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) per una descrizione dettagliata dell&quot;errore.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the BeginAcceptTcpClient method to create and connect a socket. The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/cpp/5290dfb8-7e8f-4cf6-b64e-_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/csharp/5290dfb8-7e8f-4cf6-b64e-_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/visualbasic/5290dfb8-7e8f-4cf6-b64e-_1.vb)]"
  syntax:
    content: public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;operazione è stata completata.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Oggetto definito dall&quot;utente contenente informazioni sull&quot;operazione di accettazione. Questo oggetto viene passato per il `callback` delegato quando l&quot;operazione è stata completata."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che fa riferimento alla creazione asincrona del <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref>.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.TcpListener.BeginAcceptTcpClient*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante il tentativo di accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Create(System.Int32)
  id: Create(System.Int32)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Create(Int32)
  nameWithType: TcpListener.Create(Int32)
  fullName: System.Net.Sockets.TcpListener.Create(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Crea un nuovo <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> istanza in ascolto sulla porta specificata."
  syntax:
    content: public static System.Net.Sockets.TcpListener Create (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "La porta su cui restare in attesa per i tentativi di connessione in ingresso."
    return:
      type: System.Net.Sockets.TcpListener
      description: "Returns <xref href=&quot;System.Net.Sockets.TcpListener&quot;></xref>.       Un nuovo <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> istanza in ascolto sulla porta specificata."
  overload: System.Net.Sockets.TcpListener.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)
  id: EndAcceptSocket(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: EndAcceptSocket(IAsyncResult)
  nameWithType: TcpListener.EndAcceptSocket(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptSocket(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Accetta un tentativo di connessione in ingresso in modo asincrono e crea un nuovo <xref:System.Net.Sockets.Socket>per gestire la comunicazione tra host remoto.</xref:System.Net.Sockets.Socket>"
  remarks: "Questo metodo si blocca fino a quando l&quot;operazione è completata. Per eseguire questa operazione in modo sincrono, utilizzare il <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>metodo.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>      > [!NOTE] > È possibile chiamare il <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>proprietà dell&quot;oggetto restituito <xref:System.Net.Sockets.Socket>per identificare il numero porta e indirizzo di rete dell&quot;host remoto.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>proprietà per ottenere il codice di errore specifico e fare riferimento alla documentazione codici di errore di Windows Sockets versione 2 API in MSDN library all&quot;indirizzo [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) per una descrizione dettagliata dell&quot;errore.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket. The callback delegate calls the EndAcceptSocket method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/cpp/m-system.net.sockets.tcp_14_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/csharp/m-system.net.sockets.tcp_14_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_14_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>restituito da una chiamata a di <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*>metodo.</xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*> </xref:System.IAsyncResult>"
    return:
      type: System.Net.Sockets.Socket
      description: "A <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>       Il <xref:System.Net.Sockets.Socket>utilizzato per inviare e ricevere dati.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.TcpListener.EndAcceptSocket*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>asyncResult</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> asyncResult </code> parametro non è stato creato da una chiamata al <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*>metodo.</xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il metodo EndAcceptSocket sia stato precedentemente chiamato."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante il tentativo di accedere a <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)
  id: EndAcceptTcpClient(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: EndAcceptTcpClient(IAsyncResult)
  nameWithType: TcpListener.EndAcceptTcpClient(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptTcpClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Accetta un tentativo di connessione in ingresso in modo asincrono e crea un nuovo <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref> per gestire la comunicazione tra host remoto."
  remarks: "Questo metodo si blocca fino a quando l&quot;operazione è completata. Per eseguire questa operazione in modo sincrono, utilizzare il <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>metodo.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>      > [!NOTE] > È possibile chiamare il <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>proprietà del socket sottostante (<xref:System.Net.Sockets.TcpClient.Client%2A>) per identificare il numero porta e indirizzo di rete dell&quot;host remoto.</xref:System.Net.Sockets.TcpClient.Client%2A> </xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>proprietà per ottenere il codice di errore specifico e fare riferimento alla documentazione codici di errore di Windows Sockets versione 2 API in MSDN library all&quot;indirizzo [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) per una descrizione dettagliata dell&quot;errore.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket. The callback delegate calls the EndAcceptTcpClient method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/cpp/m-system.net.sockets.tcp_8_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/csharp/m-system.net.sockets.tcp_8_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_8_1.vb)]"
  syntax:
    content: public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>restituito da una chiamata al <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient*>metodo.</xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient*> </xref:System.IAsyncResult>"
    return:
      type: System.Net.Sockets.TcpClient
      description: "A <xref href=&quot;System.Net.Sockets.TcpClient&quot;></xref>.       Il <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref> utilizzato per inviare e ricevere dati."
  overload: System.Net.Sockets.TcpListener.EndAcceptTcpClient*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: TcpListener.ExclusiveAddressUse
  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene o imposta un <xref:System.Boolean>valore che specifica se il <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> consente un solo socket sottostante per l&quot;ascolto di una porta specifica</xref:System.Boolean>"
  remarks: "Per impostazione predefinita, più listener può restare in ascolto su una porta specifica. Tuttavia, solo uno dei listener può eseguire operazioni sul traffico di rete inviato alla porta. Se più di un listener tenta di associare a una porta specifica, quella con l&quot;indirizzo IP più specifico gestisce il traffico di rete inviato alla porta. È possibile utilizzare la <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>proprietà per impedire che più listener in ascolto di una porta specifica.</xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>       Impostare questa proprietà prima di chiamare <xref:System.Net.Sockets.TcpListener.Start%2A>, oppure chiamare il <xref:System.Net.Sockets.TcpListener.Stop%2A>(metodo) e quindi impostare questa proprietà.</xref:System.Net.Sockets.TcpListener.Stop%2A> </xref:System.Net.Sockets.TcpListener.Start%2A>"
  example:
  - "The following code example gets and sets the ExclusiveAddressUse property.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/cpp/p-system.net.sockets.tcp_9_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/csharp/p-system.net.sockets.tcp_9_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_9_1.vb)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> consente a un solo <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> per l&quot;ascolto su una porta specifica; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. . Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> per Windows Server 2003 e Windows XP Service Pack 2 e versioni successive, e <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per tutte le altre versioni."
  overload: System.Net.Sockets.TcpListener.ExclusiveAddressUse*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref> è stato avviato. Chiamare il <xref href=&quot;System.Net.Sockets.TcpListener.Stop&quot;> </xref> (metodo) e quindi impostare il <xref:System.Net.Sockets.Socket.ExclusiveAddressUse*>proprietà.</xref:System.Net.Sockets.Socket.ExclusiveAddressUse*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante il tentativo di accesso al socket sottostante."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.LocalEndpoint
  id: LocalEndpoint
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: LocalEndpoint
  nameWithType: TcpListener.LocalEndpoint
  fullName: System.Net.Sockets.TcpListener.LocalEndpoint
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene l&quot;oggetto sottostante <xref:System.Net.EndPoint>corrente <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref>.</xref:System.Net.EndPoint>"
  remarks: "È possibile utilizzare la proprietà LocalEndpoint per identificare il numero di porta e di interfaccia di rete locale utilizzato per l&quot;ascolto delle richieste di connessione client in ingresso, una volta stabilita una connessione socket. È innanzitutto necessario eseguire il cast questo <xref:System.Net.EndPoint>a un <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.EndPoint> È quindi possibile chiamare il <xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName>proprietà per recuperare l&quot;indirizzo IP locale e <xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName>proprietà per recuperare il numero di porta locale.</xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName> </xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName>"
  example:
  - "The following code example displays the local IP address and port number on which the <xref:System.Net.Sockets.TcpListener> is listening for incoming connection requests.  \n  \n [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/cpp/p-system.net.sockets.tcp_5_1.cpp)]\n [!code-cs[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/csharp/p-system.net.sockets.tcp_5_1.cs)]\n [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_5_1.vb)]"
  syntax:
    content: public System.Net.EndPoint LocalEndpoint { get; }
    return:
      type: System.Net.EndPoint
      description: "Il <xref:System.Net.EndPoint>a cui il <xref:System.Net.Sockets.Socket>è associato.</xref:System.Net.Sockets.Socket> </xref:System.Net.EndPoint>"
  overload: System.Net.Sockets.TcpListener.LocalEndpoint*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Pending
  id: Pending
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Pending()
  nameWithType: TcpListener.Pending()
  fullName: System.Net.Sockets.TcpListener.Pending()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Determina se sono presenti richieste di connessione in sospeso."
  remarks: "Questo metodo non bloccante determina se vi sono richieste di connessione in sospeso. Poiché il <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>e <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>metodi bloccano l&quot;esecuzione fino a quando il <xref:System.Net.Sockets.TcpListener.Start%2A>metodo è in coda una richiesta di connessione in ingresso, il metodo in sospeso può essere utilizzato per determinare se sono disponibili connessioni prima di tentare di accettarle.</xref:System.Net.Sockets.TcpListener.Start%2A> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>"
  example:
  - "The following code example checks the Pending method. If a connection request is waiting to be accepted, then a call to the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is made.  \n  \n [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_5_1.cpp)]\n [!code-cs[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_5_1.cs)]\n [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_5_1.vb)]"
  syntax:
    content: public bool Pending ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se le connessioni sono in sospeso; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.TcpListener.Pending*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il listener non è stato avviato con una chiamata a <xref:System.Net.Sockets.TcpListener.Start*>.</xref:System.Net.Sockets.TcpListener.Start*>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Server
  id: Server
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Server
  nameWithType: TcpListener.Server
  fullName: System.Net.Sockets.TcpListener.Server
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene la rete sottostante <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  remarks: "<xref:System.Net.Sockets.TcpListener>Crea un <xref:System.Net.Sockets.Socket>ascoltare le richieste di connessione client in ingresso.</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.TcpListener> Classi che derivano da <xref:System.Net.Sockets.TcpListener>questa proprietà per ottenere questo <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener> Utilizzare sottostante <xref:System.Net.Sockets.Socket>restituita dalla proprietà Server, se è necessario accedere oltre a quelli che <xref:System.Net.Sockets.TcpListener>fornisce.</xref:System.Net.Sockets.TcpListener> </xref:System.Net.Sockets.Socket>      > [!NOTE] > Il Server restituisce solo il <xref:System.Net.Sockets.Socket>utilizzati per l&quot;ascolto delle richieste di connessione client in ingresso.</xref:System.Net.Sockets.Socket> Utilizzare il <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>metodo per accettare una richiesta di connessione in sospeso e ottenere un <xref:System.Net.Sockets.Socket>per l&quot;invio e ricezione di dati.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> È inoltre possibile utilizzare il <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>metodo per accettare una richiesta di connessione in sospeso e ottenere un <xref:System.Net.Sockets.TcpClient>per l&quot;invio e ricezione di dati.</xref:System.Net.Sockets.TcpClient> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>"
  example:
  - "The following code example demonstrates the use of the Server property. The underlying <xref:System.Net.Sockets.Socket> is retrieved and the <xref:System.Net.Sockets.SocketOptionName><xref:System.Net.Sockets.Socket> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.  \n  \n [!code-vb[TcpListenerProtectedMembers1#1](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_10_1.vb)]\n [!code-cs[TcpListenerProtectedMembers1#1](~/add/codesnippet/csharp/p-system.net.sockets.tcp_10_1.cs)]"
  syntax:
    content: public System.Net.Sockets.Socket Server { get; }
    return:
      type: System.Net.Sockets.Socket
      description: "<xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> Sottostante"
  overload: System.Net.Sockets.TcpListener.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Start
  id: Start
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Start()
  nameWithType: TcpListener.Start()
  fullName: System.Net.Sockets.TcpListener.Start()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Avvia l&quot;ascolto delle richieste di connessione in ingresso."
  remarks: "Il metodo di avvio Inizializza sottostante <xref:System.Net.Sockets.Socket>, viene associata a un endpoint locale e resta in attesa di tentativi di connessione in ingresso.</xref:System.Net.Sockets.Socket> Se viene ricevuta una richiesta di connessione, il metodo di avvio verrà accodare la richiesta e continuerà ad attendere ulteriori richieste finché non si chiama il <xref:System.Net.Sockets.TcpListener.Stop%2A>metodo.</xref:System.Net.Sockets.TcpListener.Stop%2A> Se <xref:System.Net.Sockets.TcpListener>riceve una richiesta di connessione dopo aver accodato già il numero massimo di connessioni, verrà generata una <xref:System.Net.Sockets.SocketException>sul client.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.TcpListener>       Per rimuovere una connessione dalla coda di connessioni in ingresso, utilizzare il <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>metodo o <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>metodo.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Il <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>metodo rimuovere una connessione dalla coda e restituirà un <xref:System.Net.Sockets.TcpClient>che è possibile utilizzare per inviare e ricevere dati.</xref:System.Net.Sockets.TcpClient> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Il <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>metodo restituirà un <xref:System.Net.Sockets.Socket>che è possibile utilizzare per eseguire la stessa operazione.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Se l&quot;applicazione richiede solo i/o sincrono, utilizzare <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Per un controllo più dettagliato del funzionamento, utilizzare <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Entrambi questi metodi bloccata fino a quando non è disponibile nella coda di una richiesta di connessione.       Utilizzo di <xref:System.Net.Sockets.TcpListener.Stop%2A>metodo per chiudere la <xref:System.Net.Sockets.TcpListener>e interrompono l&quot;ascolto.</xref:System.Net.Sockets.TcpListener> </xref:System.Net.Sockets.TcpListener.Stop%2A> Si è responsabili della chiusura delle connessioni accettate separatamente.      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how Start is used to listen for incoming client connection attempts.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_6_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_6_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_6_1.vb)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Net.Sockets.TcpListener.Start*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Utilizzare il &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; proprietà per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Start(System.Int32)
  id: Start(System.Int32)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Start(Int32)
  nameWithType: TcpListener.Start(Int32)
  fullName: System.Net.Sockets.TcpListener.Start(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Avvia l&quot;ascolto delle richieste di connessione in ingresso con un numero massimo di connessioni in sospeso."
  remarks: "Il <xref:System.Net.Sockets.TcpListener.Start%2A>metodo inizializza sottostante <xref:System.Net.Sockets.Socket>, viene associata a un endpoint locale e resta in attesa di tentativi di connessione in ingresso.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener.Start%2A> Se viene ricevuta una richiesta di connessione, <xref:System.Net.Sockets.TcpListener.Start%2A>verrà accodare la richiesta e continuerà ad attendere ulteriori richieste finché non si chiama il <xref:System.Net.Sockets.TcpListener.Stop%2A>metodo.</xref:System.Net.Sockets.TcpListener.Stop%2A> </xref:System.Net.Sockets.TcpListener.Start%2A> Se <xref:System.Net.Sockets.TcpListener>riceve una richiesta di connessione dopo aver accodato già il numero massimo di connessioni, genererà un <xref:System.Net.Sockets.SocketException>sul client.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.TcpListener>       Per rimuovere una connessione dalla coda di connessioni in ingresso, utilizzare il <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>metodo o <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>metodo.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Il <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>metodo rimuovere una connessione dalla coda e restituirà un <xref:System.Net.Sockets.TcpClient>che è possibile utilizzare per inviare e ricevere dati.</xref:System.Net.Sockets.TcpClient> </xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Il <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>metodo restituirà un <xref:System.Net.Sockets.Socket>che è possibile utilizzare per eseguire la stessa operazione.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Se l&quot;applicazione richiede solo i/o sincrono, utilizzare il <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Per informazioni dettagliate controllo del funzionamento, utilizzare <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>metodo.</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Entrambi questi metodi bloccata fino a quando non è disponibile nella coda di una richiesta di connessione.       Utilizzo di <xref:System.Net.Sockets.TcpListener.Stop%2A>metodo per chiudere la <xref:System.Net.Sockets.TcpListener>e interrompono l&quot;ascolto.</xref:System.Net.Sockets.TcpListener> </xref:System.Net.Sockets.TcpListener.Stop%2A> Si è responsabili della chiusura delle connessioni accettate separatamente.      > [!NOTE] > Utilizzo di <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>proprietà per ottenere il codice di errore specifico e fare riferimento alla documentazione codici di errore di Windows Sockets versione 2 API in MSDN library al [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) per una descrizione dettagliata dell&quot;errore.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_17_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_17_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_17_1.vb)]"
  syntax:
    content: public void Start (int backlog);
    parameters:
    - id: backlog
      type: System.Int32
      description: "La lunghezza massima della coda di connessioni in sospeso."
  overload: System.Net.Sockets.TcpListener.Start*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il<code>  backlog </code> parametro è minore di zero o supera il numero massimo di connessioni consentite."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è null.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Stop
  id: Stop
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Stop()
  nameWithType: TcpListener.Stop()
  fullName: System.Net.Sockets.TcpListener.Stop()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Chiude il listener."
  remarks: "Arresto chiude il listener. Le richieste di connessione non accettato nella coda andranno perse. Gli host remoti in attesa di una connessione di essere accettati genereranno un <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Si è responsabili della chiusura delle connessioni accettate separatamente.      > [!NOTE] > Questo membro genera informazioni di traccia quando si abilita la tracciatura della rete nell&quot;applicazione. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates using the Stop method to close the underlying <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_9_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_9_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_9_1.vb)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Net.Sockets.TcpListener.Stop*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Utilizzare il &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt; proprietà per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.Sockets.TcpListener.#ctor(System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener(Int32)
  nameWithType: TcpListener.TcpListener(Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener(IPEndPoint)
  nameWithType: TcpListener.TcpListener(IPEndPoint)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener(IPAddress,Int32)
  nameWithType: TcpListener.TcpListener(IPAddress,Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.TcpListener.AcceptSocket
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocket()
  nameWithType: TcpListener.AcceptSocket()
  fullName: System.Net.Sockets.TcpListener.AcceptSocket()
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocketAsync()
  nameWithType: TcpListener.AcceptSocketAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.Socket}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Socket>
  nameWithType: Task<Socket>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.Socket>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.Socket>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: Socket
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.TcpListener.AcceptTcpClient
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClient()
  nameWithType: TcpListener.AcceptTcpClient()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClient()
- uid: System.Net.Sockets.TcpClient
  parent: System.Net.Sockets
  isExternal: false
  name: TcpClient
  nameWithType: TcpClient
  fullName: System.Net.Sockets.TcpClient
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClientAsync()
  nameWithType: TcpListener.AcceptTcpClientAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<TcpClient>
  nameWithType: Task<TcpClient>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.TcpClient>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.TcpClient>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.TcpClient
    name: TcpClient
    nameWithType: TcpClient
    fullName: TcpClient
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.TcpListener.Active
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Active
  nameWithType: TcpListener.Active
  fullName: System.Net.Sockets.TcpListener.Active
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AllowNatTraversal(Boolean)
  nameWithType: TcpListener.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.TcpListener.AllowNatTraversal(Boolean)
- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptSocket(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptSocket(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptSocket(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptTcpClient(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
- uid: System.Net.Sockets.TcpListener.Create(System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Create(Int32)
  nameWithType: TcpListener.Create(Int32)
  fullName: System.Net.Sockets.TcpListener.Create(Int32)
- uid: System.Net.Sockets.TcpListener
  parent: System.Net.Sockets
  isExternal: false
  name: TcpListener
  nameWithType: TcpListener
  fullName: System.Net.Sockets.TcpListener
- uid: System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptSocket(IAsyncResult)
  nameWithType: TcpListener.EndAcceptSocket(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptSocket(IAsyncResult)
- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptTcpClient(IAsyncResult)
  nameWithType: TcpListener.EndAcceptTcpClient(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptTcpClient(IAsyncResult)
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: TcpListener.ExclusiveAddressUse
  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse
- uid: System.Net.Sockets.TcpListener.LocalEndpoint
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: LocalEndpoint
  nameWithType: TcpListener.LocalEndpoint
  fullName: System.Net.Sockets.TcpListener.LocalEndpoint
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: true
  name: EndPoint
  nameWithType: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net.Sockets.TcpListener.Pending
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Pending()
  nameWithType: TcpListener.Pending()
  fullName: System.Net.Sockets.TcpListener.Pending()
- uid: System.Net.Sockets.TcpListener.Server
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Server
  nameWithType: TcpListener.Server
  fullName: System.Net.Sockets.TcpListener.Server
- uid: System.Net.Sockets.TcpListener.Start
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Start()
  nameWithType: TcpListener.Start()
  fullName: System.Net.Sockets.TcpListener.Start()
- uid: System.Net.Sockets.TcpListener.Start(System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Start(Int32)
  nameWithType: TcpListener.Start(Int32)
  fullName: System.Net.Sockets.TcpListener.Start(Int32)
- uid: System.Net.Sockets.TcpListener.Stop
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Stop()
  nameWithType: TcpListener.Stop()
  fullName: System.Net.Sockets.TcpListener.Stop()
- uid: System.Net.Sockets.TcpListener.#ctor*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener
  nameWithType: TcpListener.TcpListener
- uid: System.Net.Sockets.TcpListener.AcceptSocket*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocket
  nameWithType: TcpListener.AcceptSocket
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocketAsync
  nameWithType: TcpListener.AcceptSocketAsync
- uid: System.Net.Sockets.TcpListener.AcceptTcpClient*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClient
  nameWithType: TcpListener.AcceptTcpClient
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClientAsync
  nameWithType: TcpListener.AcceptTcpClientAsync
- uid: System.Net.Sockets.TcpListener.Active*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Active
  nameWithType: TcpListener.Active
- uid: System.Net.Sockets.TcpListener.AllowNatTraversal*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AllowNatTraversal
  nameWithType: TcpListener.AllowNatTraversal
- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptSocket
  nameWithType: TcpListener.BeginAcceptSocket
- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptTcpClient
  nameWithType: TcpListener.BeginAcceptTcpClient
- uid: System.Net.Sockets.TcpListener.Create*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Create
  nameWithType: TcpListener.Create
- uid: System.Net.Sockets.TcpListener.EndAcceptSocket*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptSocket
  nameWithType: TcpListener.EndAcceptSocket
- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptTcpClient
  nameWithType: TcpListener.EndAcceptTcpClient
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: TcpListener.ExclusiveAddressUse
- uid: System.Net.Sockets.TcpListener.LocalEndpoint*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: LocalEndpoint
  nameWithType: TcpListener.LocalEndpoint
- uid: System.Net.Sockets.TcpListener.Pending*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Pending
  nameWithType: TcpListener.Pending
- uid: System.Net.Sockets.TcpListener.Server*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Server
  nameWithType: TcpListener.Server
- uid: System.Net.Sockets.TcpListener.Start*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Start
  nameWithType: TcpListener.Start
- uid: System.Net.Sockets.TcpListener.Stop*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Stop
  nameWithType: TcpListener.Stop
