### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.ListDictionary
  id: ListDictionary
  children:
  - System.Collections.Specialized.ListDictionary.#ctor
  - System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  - System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  - System.Collections.Specialized.ListDictionary.Clear
  - System.Collections.Specialized.ListDictionary.Contains(System.Object)
  - System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.ListDictionary.Count
  - System.Collections.Specialized.ListDictionary.GetEnumerator
  - System.Collections.Specialized.ListDictionary.IsFixedSize
  - System.Collections.Specialized.ListDictionary.IsReadOnly
  - System.Collections.Specialized.ListDictionary.IsSynchronized
  - System.Collections.Specialized.ListDictionary.Item(System.Object)
  - System.Collections.Specialized.ListDictionary.Keys
  - System.Collections.Specialized.ListDictionary.Remove(System.Object)
  - System.Collections.Specialized.ListDictionary.SyncRoot
  - System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Specialized.ListDictionary.Values
  langs:
  - csharp
  name: ListDictionary
  nameWithType: ListDictionary
  fullName: System.Collections.Specialized.ListDictionary
  type: Class
  summary: "Implementa <xref uid=&quot;langword_csharp_IDictionary&quot; name=&quot;IDictionary&quot; href=&quot;&quot;> </xref> utilizzando un elenco collegato singolarmente. Consigliato per le raccolte che includono meno di 10 voci."
  remarks: "Si tratta di una semplice implementazione del <xref:System.Collections.IDictionary>utilizzando un elenco collegato singolarmente.</xref:System.Collections.IDictionary> È più piccoli e veloci rispetto a un <xref:System.Collections.Hashtable>Se il numero di elementi inferiore o uguale a 10.</xref:System.Collections.Hashtable> Questo non deve essere utilizzato se le prestazioni sono importanti per un numero elevato di elementi.       Gli elementi di un oggetto ListDictionary non sono in alcun ordine garantito; codice non deve dipendere dall&quot;ordine corrente. L&quot;oggetto ListDictionary viene implementato per il recupero rapido delle chiavi; l&quot;ordine interno effettivo degli elementi è dipendente dall&quot;implementazione e potrebbe cambiare nelle future versioni del prodotto.       I membri, ad esempio <xref:System.Collections.Specialized.ListDictionary.Item%2A>, <xref:System.Collections.Specialized.ListDictionary.Add%2A>, <xref:System.Collections.Specialized.ListDictionary.Remove%2A>, e <xref:System.Collections.Specialized.ListDictionary.Contains%2A>sono basati su O (`n`) operazioni, in cui `n` è <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A> </xref:System.Collections.Specialized.ListDictionary.Contains%2A> </xref:System.Collections.Specialized.ListDictionary.Remove%2A> </xref:System.Collections.Specialized.ListDictionary.Add%2A> </xref:System.Collections.Specialized.ListDictionary.Item%2A>       Non può essere una chiave `null`, ma un valore possibile.       Il `foreach` istruzione del linguaggio c# (`for each` in Visual Basic) restituisce un oggetto di tipo degli elementi nella raccolta. Poiché ogni elemento di ListDictionary è una coppia chiave/valore, il tipo di elemento non è il tipo della chiave o il tipo del valore. Al contrario, il tipo di elemento è <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Ad esempio: [!code-cs [System.Collections.Specialized.ListDictionary2#3](~/add/codesnippet/csharp/t-system.collections.spe_9_1.cs)][!code-cpp[System.Collections.Specialized.ListDictionary2#3](~/add/codesnippet/cpp/t-system.collections.spe_9_1.cpp)][!code-vb[System.Collections.Specialized.ListDictionary2#3](~/add/codesnippet/visualbasic/t-system.collections.spe_9_1.vb) ] il `foreach` istruzione è un wrapper per l&quot;enumeratore, che consente solo di leggere da, non la scrittura, la raccolta.    "
  example:
  - "The following code example demonstrates several of the properties and methods of ListDictionary.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/cpp/t-system.collections.spe_9_2.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/csharp/t-system.collections.spe_9_2.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/visualbasic/t-system.collections.spe_9_2.vb)]"
  syntax:
    content: 'public class ListDictionary : System.Collections.IDictionary'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: ListDictionary()
  nameWithType: ListDictionary.ListDictionary()
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Crea un oggetto vuoto <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> utilizzando l&quot;operatore di confronto predefinito."
  remarks: "L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Specialized.ListDictionary>deve essere univoco.</xref:System.Collections.Specialized.ListDictionary> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Questo costruttore è un&quot;operazione o (1)."
  example:
  - "The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/cpp/m-system.collections.spe_8_1.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/csharp/m-system.collections.spe_8_1.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/add/codesnippet/visualbasic/m-system.collections.spe_8_1.vb)]"
  syntax:
    content: public ListDictionary ();
    parameters: []
  overload: System.Collections.Specialized.ListDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: ListDictionary(IComparer)
  nameWithType: ListDictionary.ListDictionary(IComparer)
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary(IComparer)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Crea un oggetto vuoto <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> utilizzando l&quot;operatore di confronto specificato."
  remarks: "L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Specialized.ListDictionary>deve essere univoco.</xref:System.Collections.Specialized.ListDictionary> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       L&quot;operatore di confronto personalizzato consente scenari quali ricerche con distinzione tra maiuscole e stringhe.       Questo costruttore è un&quot;operazione o (1)."
  syntax:
    content: public ListDictionary (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>da usare per determinare se due chiavi sono uguali.</xref:System.Collections.IComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare l&quot;operatore di confronto predefinito, ovvero l&quot;implementazione di ogni chiave di &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Specialized.ListDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: ListDictionary.Add(Object,Object)
  fullName: System.Collections.Specialized.ListDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Aggiunge una voce con la chiave specificata e il valore di <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  remarks: "Oggetto che non dispone di alcuna correlazione tra il proprio stato e il relativo valore di codice hash deve in genere non utilizzabile come chiave. Ad esempio, gli oggetti stringa sono migliori rispetto agli oggetti StringBuilder per l&quot;utilizzo come chiavi.       È inoltre possibile utilizzare il <xref:System.Collections.Specialized.ListDictionary.Item%2A>proprietà per aggiungere nuovi elementi impostando il valore di una chiave che non esiste nel <xref:System.Collections.Specialized.ListDictionary>, ad esempio `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Collections.Specialized.ListDictionary.Item%2A> Tuttavia, se la chiave specificata esiste già nel <xref:System.Collections.Specialized.ListDictionary>, impostando il <xref:System.Collections.Specialized.ListDictionary.Item%2A>proprietà sovrascrive il vecchio valore.</xref:System.Collections.Specialized.ListDictionary.Item%2A> </xref:System.Collections.Specialized.ListDictionary> Al contrario, il metodo Add di non modificare gli elementi esistenti.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A>"
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_26_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_26_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_26_1.cs)]"
  syntax:
    content: public void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "La chiave della voce da aggiungere."
    - id: value
      type: System.Object
      description: "Il valore della voce da aggiungere. Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Esiste già una voce con la stessa chiave nel <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Clear
  id: Clear
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Clear()
  nameWithType: ListDictionary.Clear()
  fullName: System.Collections.Specialized.ListDictionary.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Rimuove tutte le voci di <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  remarks: "<xref:System.Collections.Specialized.ListDictionary.Count%2A>è impostato su zero e vengono rilasciati anche i riferimenti ad altri oggetti da elementi della raccolta.</xref:System.Collections.Specialized.ListDictionary.Count%2A>       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_43_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_43_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_43_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Specialized.ListDictionary.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: ListDictionary.Contains(Object)
  fullName: System.Collections.Specialized.ListDictionary.Contains(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Determina se il <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> contiene una chiave specifica."
  remarks: "Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `key` per determinare se `item` esiste.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example searches for an element in a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Contains#1](~/add/codesnippet/cpp/m-system.collections.spe_22_1.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Contains#1](~/add/codesnippet/csharp/m-system.collections.spe_22_1.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Contains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_22_1.vb)]"
  syntax:
    content: public bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Chiave da individuare nel <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> contiene una voce con la chiave; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ListDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.ListDictionary.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Copie di <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> voci in un oggetto unidimensionale <xref:System.Array>istanza in corrispondenza dell&quot;indice specificato.</xref:System.Array>"
  remarks: "Gli elementi vengono copiati lo <xref:System.Array>nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Array>       Per copiare solo le chiavi di <xref:System.Collections.Specialized.ListDictionary>, utilizzare `ListDictionary.Keys.CopyTo`.</xref:System.Collections.Specialized.ListDictionary>       Per copiare solo i valori di <xref:System.Collections.Specialized.ListDictionary>, utilizzare `ListDictionary.Values.CopyTo`.</xref:System.Collections.Specialized.ListDictionary>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A>"
  example:
  - "The following code example copies the elements of a <xref:System.Collections.Specialized.ListDictionary> to an array.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/add/codesnippet/cpp/9aabfe2b-669c-468b-9ada-_1.cpp)]\n [!code-cs[System.Collections.Specialized.ListDictionary_CopyTo#1](~/add/codesnippet/csharp/9aabfe2b-669c-468b-9ada-_1.cs)]\n [!code-vb[System.Collections.Specialized.ListDictionary_CopyTo#1](~/add/codesnippet/visualbasic/9aabfe2b-669c-468b-9ada-_1.vb)]"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Oggetto unidimensionale <xref:System.Array>che rappresenta la destinazione del <xref:System.Collections.DictionaryEntry>oggetti copiati dal <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> Il <xref:System.Array>deve avere un&quot;indicizzazione in base zero.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Indice in base zero `array` da cui avviare la copia."
  overload: System.Collections.Specialized.ListDictionary.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>è multidimensionale.       - oppure - il numero di elementi nell&quot;origine <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> è maggiore dello spazio disponibile da <code>index</code> alla fine della destinazione <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Il tipo di origine <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> non può essere eseguire automaticamente il cast al tipo della destinazione <code> array </code>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Count
  id: Count
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Count
  nameWithType: ListDictionary.Count
  fullName: System.Collections.Specialized.ListDictionary.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Ottiene il numero di coppie chiave/valore contenute nel <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  remarks: "Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_2_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_2_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_2_1.cs)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Il numero di coppie chiave/valore contenute nel <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ListDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Restituisce un <xref:System.Collections.IDictionaryEnumerator>che scorre la <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "Il `foreach` istruzione del linguaggio c# (`for each` in Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, l&quot;utilizzo `foreach` è consigliabile, anziché la modifica diretta dell&quot;enumeratore.       È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non possono essere utilizzati per modificare la raccolta sottostante.       Inizialmente l&quot;enumeratore è posizionato prima del primo elemento nella raccolta. <xref:System.Collections.IEnumerator.Reset%2A>riporta l&quot;enumeratore in questa posizione.</xref:System.Collections.IEnumerator.Reset%2A>  In questa posizione, <xref:System.Collections.IEnumerator.Current%2A>è definito.</xref:System.Collections.IEnumerator.Current%2A> Pertanto, è necessario chiamare <xref:System.Collections.IEnumerator.MoveNext%2A>per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Restituisce lo stesso oggetto finché non <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>viene chiamato.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>imposta <xref:System.Collections.IEnumerator.Current%2A>all&quot;elemento successivo.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>raggiunge la fine della raccolta, l&quot;enumeratore è posizionato dopo l&quot;ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A>restituisce `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando l&quot;enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A>restituire anche `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se l&quot;ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>restituito `false`, <xref:System.Collections.IEnumerator.Current%2A>è definito.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Per impostare <xref:System.Collections.IEnumerator.Current%2A>il primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A>seguito dal <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l&quot;enumeratore viene invalidato e il relativo comportamento sarà indefinito.       L&quot;enumeratore non dispone di accesso esclusivo alla raccolta. Pertanto, l&quot;enumerazione di una raccolta non è quindi una procedura thread-safe.  Per garantire la protezione dei thread durante l&quot;enumerazione, è possibile bloccare la raccolta per l&quot;intera enumerazione.  Per consentire la raccolta a cui accedere da più thread per la lettura e scrittura, è necessario implementare la propria sincronizzazione.       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/m-system.collections.spe_6_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/m-system.collections.spe_6_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/m-system.collections.spe_6_1.cs)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Specialized.ListDictionary.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: ListDictionary.IsFixedSize
  fullName: System.Collections.Specialized.ListDictionary.IsFixedSize
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> ha dimensioni fisse."
  remarks: "<xref:System.Collections.Specialized.ListDictionary>implementa la proprietà IsFixedSize perché è necessaria per il <xref:System.Collections.IDictionary?displayProperty=fullName>interfaccia.</xref:System.Collections.IDictionary?displayProperty=fullName></xref:System.Collections.Specialized.ListDictionary>       Una raccolta con dimensioni fisse non consente l&quot;aggiunta o la rimozione di elementi dopo la sua creazione, ma consente la modifica degli elementi esistenti.       Una raccolta con una dimensione fissa è semplicemente una raccolta con un wrapper che impedisce l&quot;aggiunta e rimozione di elementi. Pertanto, se vengono apportate modifiche alla raccolta sottostante, incluse l&quot;aggiunta o la rimozione di elementi, la raccolta a dimensione fissa riflette le modifiche.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: public bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "Questa proprietà restituisce sempre <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ListDictionary.IsReadOnly
  fullName: System.Collections.Specialized.ListDictionary.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> è di sola lettura."
  remarks: "<xref:System.Collections.Specialized.ListDictionary>implementa la proprietà IsReadOnly perché è necessaria per il <xref:System.Collections.IDictionary?displayProperty=fullName>interfaccia.</xref:System.Collections.IDictionary?displayProperty=fullName></xref:System.Collections.Specialized.ListDictionary>       Una raccolta di sola lettura non consente l&quot;aggiunta, rimozione o modifica di elementi dopo la sua creazione.       Una raccolta di sola lettura è semplicemente una raccolta con un wrapper che impedisce la modifica. Pertanto, se vengono apportate modifiche alla raccolta sottostante, la raccolta di sola lettura riflette le modifiche.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Questa proprietà restituisce sempre <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ListDictionary.IsSynchronized
  fullName: System.Collections.Specialized.ListDictionary.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref> è sincronizzato (thread-safe)."
  remarks: "<xref:System.Collections.Specialized.ListDictionary>implementa la proprietà IsSynchronized perché è necessaria per il <xref:System.Collections.ICollection?displayProperty=fullName>interfaccia.</xref:System.Collections.ICollection?displayProperty=fullName></xref:System.Collections.Specialized.ListDictionary>       Classi derivate possono fornire una versione sincronizzata del <xref:System.Collections.Specialized.ListDictionary>utilizzando il <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A>proprietà.</xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> </xref:System.Collections.Specialized.ListDictionary>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cs[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/csharp/p-system.collections.spe_6_1.cs)]\n [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/cpp/p-system.collections.spe_6_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_6_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Questa proprietà restituisce sempre <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Item(Object)
  nameWithType: ListDictionary.Item(Object)
  fullName: System.Collections.Specialized.ListDictionary.Item(Object)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Ottiene o imposta il valore associato alla chiave specificata."
  remarks: "Questa proprietà consente di accedere a un elemento specifico nella raccolta utilizzando la sintassi seguente: `myCollection[key]`.       È inoltre possibile utilizzare la proprietà dell&quot;elemento per aggiungere nuovi elementi impostando il valore di una chiave che non esiste nel <xref:System.Collections.Specialized.ListDictionary>, ad esempio `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Specialized.ListDictionary> Tuttavia, se la chiave specificata esiste già nel <xref:System.Collections.Specialized.ListDictionary>, impostando la proprietà dell&quot;elemento sovrascrive il vecchio valore.</xref:System.Collections.Specialized.ListDictionary> Al contrario, il <xref:System.Collections.Specialized.ListDictionary.Add%2A>metodo non modifica gli elementi esistenti.</xref:System.Collections.Specialized.ListDictionary.Add%2A>       Non può essere una chiave `null`, ma un valore possibile. Per distinguere tra `null` restituito perché non è stata trovata la chiave specificata e `null` restituito perché il valore della chiave specificata è `null`, utilizzare il <xref:System.Collections.Specialized.ListDictionary.Contains%2A>per determinare se la chiave è presente nell&quot;elenco.</xref:System.Collections.Specialized.ListDictionary.Contains%2A>       Nel linguaggio c# viene utilizzata la parola chiave per definire gli indicizzatori anziché implementare la proprietà dell&quot;elemento. Visual Basic implementa elemento come una proprietà predefinita, che fornisce la stessa funzionalità di indicizzazione.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A>"
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_11_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_11_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_11_1.cs)]"
  syntax:
    content: public object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "La chiave il cui valore da ottenere o impostare."
    return:
      type: System.Object
      description: "Il valore associato alla chiave specificata. Se la chiave specificata non viene trovata, tentando di ottenerla viene restituito <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, e tentando di impostarla viene creata una nuova voce con la chiave specificata."
  overload: System.Collections.Specialized.ListDictionary.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Keys
  id: Keys
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Keys
  nameWithType: ListDictionary.Keys
  fullName: System.Collections.Specialized.ListDictionary.Keys
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Ottiene un <xref:System.Collections.ICollection>contenente le chiavi di <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "L&quot;ordine dei valori nel <xref:System.Collections.ICollection>non è specificato, ma è stesso ordine dei valori associati nel <xref:System.Collections.ICollection>restituito dal <xref:System.Collections.Specialized.ListDictionary.Values%2A>metodo.</xref:System.Collections.Specialized.ListDictionary.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       L&quot;oggetto restituito <xref:System.Collections.ICollection>non è una copia statica, bensì <xref:System.Collections.ICollection>fa riferimento alle chiavi nell&quot;originale <xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Modifiche <xref:System.Collections.Specialized.ListDictionary>apportate in <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Specialized.ListDictionary>       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_28_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_28_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_28_1.cs)]"
  syntax:
    content: public System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Un <xref:System.Collections.ICollection>contenente le chiavi di <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Specialized.ListDictionary.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: ListDictionary.Remove(Object)
  fullName: System.Collections.Specialized.ListDictionary.Remove(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Rimuove la voce con la chiave specificata dal <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  remarks: "Se il <xref:System.Collections.Specialized.ListDictionary>non contiene un elemento con la chiave specificata, il <xref:System.Collections.Specialized.ListDictionary>rimane invariato.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Collections.Specialized.ListDictionary> Viene generata alcuna eccezione.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</xref:System.Collections.Specialized.ListDictionary.Count%2A>"
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_21_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_21_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_21_1.cs)]"
  syntax:
    content: public void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "La chiave della voce da rimuovere."
  overload: System.Collections.Specialized.ListDictionary.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.SyncRoot
  id: SyncRoot
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ListDictionary.SyncRoot
  fullName: System.Collections.Specialized.ListDictionary.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Ottiene un oggetto che può essere utilizzato per sincronizzare l&quot;accesso al <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  remarks: "Classi derivate possono fornire una propria versione sincronizzata del <xref:System.Collections.Specialized.ListDictionary>utilizzando la proprietà SyncRoot.</xref:System.Collections.Specialized.ListDictionary> Il codice di sincronizzazione deve essere eseguite nella radice di sincronizzazione del <xref:System.Collections.Specialized.ListDictionary>, non direttamente sulla <xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Collections.Specialized.ListDictionary> In questo modo si garantisce il corretto funzionamento delle raccolte derivate da altri oggetti. In particolare, viene mantenuta la sincronizzazione con altri thread che potrebbero modificare contemporaneamente il <xref:System.Collections.Specialized.ListDictionary>oggetto.</xref:System.Collections.Specialized.ListDictionary>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cs[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/csharp/p-system.collections.spe_1_1.cs)]\n [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/cpp/p-system.collections.spe_1_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/add/codesnippet/visualbasic/p-system.collections.spe_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "Oggetto che può essere utilizzato per sincronizzare l&quot;accesso al <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>."
  overload: System.Collections.Specialized.ListDictionary.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ListDictionary.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Restituisce un <xref:System.Collections.IEnumerator>che scorre la <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "Il `foreach` istruzione del linguaggio c# (`for each` in Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, l&quot;utilizzo `foreach` è consigliabile, anziché la modifica diretta dell&quot;enumeratore.       È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non possono essere utilizzati per modificare la raccolta sottostante.       Inizialmente l&quot;enumeratore è posizionato prima del primo elemento nella raccolta. <xref:System.Collections.IEnumerator.Reset%2A>riporta l&quot;enumeratore in questa posizione.</xref:System.Collections.IEnumerator.Reset%2A> In questa posizione, la chiamata <xref:System.Collections.IEnumerator.Current%2A>genera un&quot;eccezione.</xref:System.Collections.IEnumerator.Current%2A> Pertanto, è necessario chiamare <xref:System.Collections.IEnumerator.MoveNext%2A>per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Restituisce lo stesso oggetto finché non <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>viene chiamato.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>imposta <xref:System.Collections.IEnumerator.Current%2A>all&quot;elemento successivo.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>raggiunge la fine della raccolta, l&quot;enumeratore è posizionato dopo l&quot;ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A>restituisce `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando l&quot;enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A>restituire anche `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se l&quot;ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>restituito `false`, la chiamata <xref:System.Collections.IEnumerator.Current%2A>genera un&quot;eccezione.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Per impostare <xref:System.Collections.IEnumerator.Current%2A>il primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A>seguito dal <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l&quot;enumeratore viene invalidato e la successiva chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>Genera un <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Se la raccolta viene modificata tra <xref:System.Collections.IEnumerator.MoveNext%2A>e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>restituisce l&quot;elemento su cui è stata impostata, anche se l&quot;enumeratore risulta già invalidato.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       L&quot;enumeratore non dispone di accesso esclusivo alla raccolta. Pertanto, l&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/98b866c7-b98f-4af5-b9e4-_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/98b866c7-b98f-4af5-b9e4-_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/98b866c7-b98f-4af5-b9e4-_1.cs)]"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.ListDictionary.Values
  id: Values
  parent: System.Collections.Specialized.ListDictionary
  langs:
  - csharp
  name: Values
  nameWithType: ListDictionary.Values
  fullName: System.Collections.Specialized.ListDictionary.Values
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "Ottiene un <xref:System.Collections.ICollection>contenente i valori di <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "L&quot;ordine dei valori nel <xref:System.Collections.ICollection>non è specificato, ma è lo stesso ordine delle chiavi associate nel <xref:System.Collections.ICollection>restituito dal <xref:System.Collections.Specialized.ListDictionary.Keys%2A>metodo.</xref:System.Collections.Specialized.ListDictionary.Keys%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       L&quot;oggetto restituito <xref:System.Collections.ICollection>non è una copia statica, bensì <xref:System.Collections.ICollection>fa riferimento ai valori dell&quot;originale <xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Modifiche <xref:System.Collections.Specialized.ListDictionary>apportate in <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Specialized.ListDictionary>       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_26_1.cpp)]\n [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_26_1.vb)]\n [!code-cs[System.Collections.Specialized.ListDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_26_1.cs)]"
  syntax:
    content: public System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Un <xref:System.Collections.ICollection>contenente i valori di <xref href=&quot;System.Collections.Specialized.ListDictionary&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Specialized.ListDictionary.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.Specialized.ListDictionary.#ctor
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: ListDictionary()
  nameWithType: ListDictionary.ListDictionary()
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary()
- uid: System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: ListDictionary(IComparer)
  nameWithType: ListDictionary.ListDictionary(IComparer)
  fullName: System.Collections.Specialized.ListDictionary.ListDictionary(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Add(Object,Object)
  nameWithType: ListDictionary.Add(Object,Object)
  fullName: System.Collections.Specialized.ListDictionary.Add(Object,Object)
- uid: System.Collections.Specialized.ListDictionary.Clear
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Clear()
  nameWithType: ListDictionary.Clear()
  fullName: System.Collections.Specialized.ListDictionary.Clear()
- uid: System.Collections.Specialized.ListDictionary.Contains(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Contains(Object)
  nameWithType: ListDictionary.Contains(Object)
  fullName: System.Collections.Specialized.ListDictionary.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ListDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.ListDictionary.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Specialized.ListDictionary.Count
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Count
  nameWithType: ListDictionary.Count
  fullName: System.Collections.Specialized.ListDictionary.Count
- uid: System.Collections.Specialized.ListDictionary.GetEnumerator
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: GetEnumerator()
  nameWithType: ListDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.ListDictionary.IsFixedSize
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsFixedSize
  nameWithType: ListDictionary.IsFixedSize
  fullName: System.Collections.Specialized.ListDictionary.IsFixedSize
- uid: System.Collections.Specialized.ListDictionary.IsReadOnly
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsReadOnly
  nameWithType: ListDictionary.IsReadOnly
  fullName: System.Collections.Specialized.ListDictionary.IsReadOnly
- uid: System.Collections.Specialized.ListDictionary.IsSynchronized
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: ListDictionary.IsSynchronized
  fullName: System.Collections.Specialized.ListDictionary.IsSynchronized
- uid: System.Collections.Specialized.ListDictionary.Item(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Item(Object)
  nameWithType: ListDictionary.Item(Object)
  fullName: System.Collections.Specialized.ListDictionary.Item(Object)
- uid: System.Collections.Specialized.ListDictionary.Keys
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Keys
  nameWithType: ListDictionary.Keys
  fullName: System.Collections.Specialized.ListDictionary.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Specialized.ListDictionary.Remove(System.Object)
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Remove(Object)
  nameWithType: ListDictionary.Remove(Object)
  fullName: System.Collections.Specialized.ListDictionary.Remove(Object)
- uid: System.Collections.Specialized.ListDictionary.SyncRoot
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: ListDictionary.SyncRoot
  fullName: System.Collections.Specialized.ListDictionary.SyncRoot
- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ListDictionary.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.ListDictionary.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Specialized.ListDictionary.Values
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Values
  nameWithType: ListDictionary.Values
  fullName: System.Collections.Specialized.ListDictionary.Values
- uid: System.Collections.Specialized.ListDictionary.#ctor*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: ListDictionary
  nameWithType: ListDictionary.ListDictionary
- uid: System.Collections.Specialized.ListDictionary.Add*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Add
  nameWithType: ListDictionary.Add
- uid: System.Collections.Specialized.ListDictionary.Clear*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Clear
  nameWithType: ListDictionary.Clear
- uid: System.Collections.Specialized.ListDictionary.Contains*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Contains
  nameWithType: ListDictionary.Contains
- uid: System.Collections.Specialized.ListDictionary.CopyTo*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: CopyTo
  nameWithType: ListDictionary.CopyTo
- uid: System.Collections.Specialized.ListDictionary.Count*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Count
  nameWithType: ListDictionary.Count
- uid: System.Collections.Specialized.ListDictionary.GetEnumerator*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: GetEnumerator
  nameWithType: ListDictionary.GetEnumerator
- uid: System.Collections.Specialized.ListDictionary.IsFixedSize*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsFixedSize
  nameWithType: ListDictionary.IsFixedSize
- uid: System.Collections.Specialized.ListDictionary.IsReadOnly*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsReadOnly
  nameWithType: ListDictionary.IsReadOnly
- uid: System.Collections.Specialized.ListDictionary.IsSynchronized*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: ListDictionary.IsSynchronized
- uid: System.Collections.Specialized.ListDictionary.Item*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Item
  nameWithType: ListDictionary.Item
- uid: System.Collections.Specialized.ListDictionary.Keys*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Keys
  nameWithType: ListDictionary.Keys
- uid: System.Collections.Specialized.ListDictionary.Remove*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Remove
  nameWithType: ListDictionary.Remove
- uid: System.Collections.Specialized.ListDictionary.SyncRoot*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: ListDictionary.SyncRoot
- uid: System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ListDictionary.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Specialized.ListDictionary.Values*
  parent: System.Collections.Specialized.ListDictionary
  isExternal: false
  name: Values
  nameWithType: ListDictionary.Values
