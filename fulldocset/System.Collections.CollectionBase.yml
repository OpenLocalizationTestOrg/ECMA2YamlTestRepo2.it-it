### YamlMime:ManagedReference
items:
- uid: System.Collections.CollectionBase
  id: CollectionBase
  children:
  - System.Collections.CollectionBase.#ctor
  - System.Collections.CollectionBase.#ctor(System.Int32)
  - System.Collections.CollectionBase.Capacity
  - System.Collections.CollectionBase.Clear
  - System.Collections.CollectionBase.Count
  - System.Collections.CollectionBase.GetEnumerator
  - System.Collections.CollectionBase.InnerList
  - System.Collections.CollectionBase.List
  - System.Collections.CollectionBase.OnClear
  - System.Collections.CollectionBase.OnClearComplete
  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnValidate(System.Object)
  - System.Collections.CollectionBase.RemoveAt(System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: CollectionBase
  nameWithType: CollectionBase
  fullName: System.Collections.CollectionBase
  type: Class
  summary: "Fornisce il <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;> </xref> classe di base per una raccolta fortemente tipizzata."
  remarks: "Un&quot;istanza di CollectionBase sempre è modificabile. Vedere <xref:System.Collections.ReadOnlyCollectionBase>per una versione di sola lettura di questa classe.</xref:System.Collections.ReadOnlyCollectionBase>       La capacità di un CollectionBase è il numero di elementi che di CollectionBase può contenere. Se gli elementi vengono aggiunti a un CollectionBase, la capacità viene aumentata automaticamente in base alle necessità, tramite riallocazione. È possibile diminuire la capacità impostando il <xref:System.Collections.CollectionBase.Capacity%2A>proprietà in modo esplicito.</xref:System.Collections.CollectionBase.Capacity%2A>"
  example:
  - "The following code example implements the CollectionBase class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/t-system.collections.col_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/t-system.collections.col_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/t-system.collections.col_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class CollectionBase : System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: CollectionBase()
  nameWithType: CollectionBase.CollectionBase()
  fullName: System.Collections.CollectionBase.CollectionBase()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> classe con la capacità iniziale predefinita."
  remarks: "La capacità di un <xref:System.Collections.CollectionBase>è il numero di elementi che la <xref:System.Collections.CollectionBase>può contenere.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> Quando gli elementi vengono aggiunti a un <xref:System.Collections.CollectionBase>, incrementata automaticamente come richiesto tramite la riallocazione della matrice interna.</xref:System.Collections.CollectionBase>       Se è possibile stimare le dimensioni della raccolta, specificando la capacità iniziale si elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi a <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase>       Questo costruttore è un&quot;operazione o (1)."
  syntax:
    content: protected CollectionBase ();
    parameters: []
  overload: System.Collections.CollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: CollectionBase(Int32)
  nameWithType: CollectionBase.CollectionBase(Int32)
  fullName: System.Collections.CollectionBase.CollectionBase(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> classe con la capacità specificata."
  remarks: "La capacità di un <xref:System.Collections.CollectionBase>è il numero di elementi che la <xref:System.Collections.CollectionBase>può contenere.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> Quando gli elementi vengono aggiunti a un <xref:System.Collections.CollectionBase>, incrementata automaticamente come richiesto tramite la riallocazione della matrice interna.</xref:System.Collections.CollectionBase>       Se è possibile stimare le dimensioni della raccolta, specificando la capacità iniziale si elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi a <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è `capacity`."
  syntax:
    content: protected CollectionBase (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Il numero di elementi che può essere archiviati inizialmente nel nuovo elenco."
  overload: System.Collections.CollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.Capacity
  id: Capacity
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Capacity
  nameWithType: CollectionBase.Capacity
  fullName: System.Collections.CollectionBase.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene o imposta il numero di elementi che la <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> può contenere."
  remarks: "Capacità è il numero di elementi che la <xref:System.Collections.CollectionBase>archiviabili.</xref:System.Collections.CollectionBase> <xref:System.Collections.CollectionBase.Count%2A>è il numero di elementi effettivamente contenuti nella <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase></xref:System.Collections.CollectionBase.Count%2A>       Capacità è sempre maggiore di o uguale a <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A> Se <xref:System.Collections.CollectionBase.Count%2A>supera la capacità durante l&quot;aggiunta di elementi, la capacità viene aumentata automaticamente tramite la riallocazione della matrice interna prima di copiare gli elementi e aggiunta di nuovi elementi.</xref:System.Collections.CollectionBase.Count%2A>       La capacità può essere ridotta mediante l&quot;impostazione della proprietà di capacità in modo esplicito. Quando il valore di capacità è impostato in modo esplicito, la matrice interna viene riallocata anche per consentire la capacità specificata.       Il recupero del valore di questa proprietà è un&quot;operazione o (1). l&quot;impostazione della proprietà è un&quot;operazione O (`n`) operazione, in cui `n` è la nuova capacità."
  syntax:
    content: public int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Il numero di elementi che la <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> può contenere."
  overload: System.Collections.CollectionBase.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Capacità è impostata su un valore che è minore di <xref:System.Collections.CollectionBase.Count*>.</xref:System.Collections.CollectionBase.Count*>"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Non c&quot;è sufficiente memoria disponibile nel sistema."
  platform:
  - net462
- uid: System.Collections.CollectionBase.Clear
  id: Clear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Clear()
  nameWithType: CollectionBase.Clear()
  fullName: System.Collections.CollectionBase.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove tutti gli oggetti dal <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza. Impossibile eseguire l&quot;override di questo metodo."
  remarks: "<xref:System.Collections.CollectionBase.Count%2A>è impostato su zero.</xref:System.Collections.CollectionBase.Count%2A>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Per eseguire azioni personalizzate prima o dopo la raccolta viene cancellata, eseguire l&quot;override protetto <xref:System.Collections.CollectionBase.OnClear%2A>o <xref:System.Collections.CollectionBase.OnClearComplete%2A>metodo.</xref:System.Collections.CollectionBase.OnClearComplete%2A> </xref:System.Collections.CollectionBase.OnClear%2A>"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.CollectionBase.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.Count
  id: Count
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Count
  nameWithType: CollectionBase.Count
  fullName: System.Collections.CollectionBase.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene il numero di elementi contenuti nella <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza. Questa proprietà non può essere sottoposto a override."
  remarks: ''
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/p-system.collections.col_0_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/p-system.collections.col_0_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.col_0_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Il numero di elementi contenuti nella <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  overload: System.Collections.CollectionBase.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: CollectionBase.GetEnumerator()
  fullName: System.Collections.CollectionBase.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un enumeratore che scorre la <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza."
  remarks: "[Visual Basic, c#]       Il `foreach` istruzione del linguaggio c# (`for each` in Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, l&quot;utilizzo `foreach` è consigliabile, anziché la modifica diretta dell&quot;enumeratore.       È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non possono essere utilizzati per modificare la raccolta sottostante.       Inizialmente l&quot;enumeratore è posizionato prima del primo elemento nella raccolta. <xref:System.Collections.IEnumerator.Reset%2A>riporta l&quot;enumeratore in questa posizione.</xref:System.Collections.IEnumerator.Reset%2A> In questa posizione, la chiamata <xref:System.Collections.IEnumerator.Current%2A>genera un&quot;eccezione.</xref:System.Collections.IEnumerator.Current%2A> Pertanto, è necessario chiamare <xref:System.Collections.IEnumerator.MoveNext%2A>per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Restituisce lo stesso oggetto finché non <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>viene chiamato.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>imposta <xref:System.Collections.IEnumerator.Current%2A>all&quot;elemento successivo.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>raggiunge la fine della raccolta, l&quot;enumeratore è posizionato dopo l&quot;ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A>restituisce `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando l&quot;enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A>restituire anche `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se l&quot;ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>restituito `false`, la chiamata <xref:System.Collections.IEnumerator.Current%2A>genera un&quot;eccezione.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Per impostare <xref:System.Collections.IEnumerator.Current%2A>il primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A>seguito dal <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l&quot;enumeratore viene invalidato e la successiva chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>Genera un <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Se la raccolta viene modificata tra <xref:System.Collections.IEnumerator.MoveNext%2A>e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>restituisce l&quot;elemento su cui è stata impostata, anche se l&quot;enumeratore risulta già invalidato.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       L&quot;enumeratore non dispone di accesso esclusivo alla raccolta. Pertanto, l&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.       Il metodo GetEnumerator non è visibile ai client COM per impostazione predefinita, eredita la <xref:System.Collections.CollectionBase>classe può esporre quest&quot;ultimo e può causare un comportamento indesiderato nei client COM.</xref:System.Collections.CollectionBase>       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_2_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_2_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_2_1.vb)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Un <xref:System.Collections.IEnumerator>per il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.CollectionBase.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.InnerList
  id: InnerList
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: InnerList
  nameWithType: CollectionBase.InnerList
  fullName: System.Collections.CollectionBase.InnerList
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un <xref href=&quot;System.Collections.ArrayList&quot;> </xref> contenente l&quot;elenco di elementi di <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza."
  remarks: "I metodi On * vengono richiamati solo per l&quot;istanza restituita dal <xref:System.Collections.CollectionBase.List%2A>proprietà, ma non sull&quot;istanza restituita dalla proprietà InnerList.</xref:System.Collections.CollectionBase.List%2A>"
  syntax:
    content: protected System.Collections.ArrayList InnerList { get; }
    return:
      type: System.Collections.ArrayList
      description: "Un <xref href=&quot;System.Collections.ArrayList&quot;> </xref> che rappresenta il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza stessa.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  overload: System.Collections.CollectionBase.InnerList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.List
  id: List
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: List
  nameWithType: CollectionBase.List
  fullName: System.Collections.CollectionBase.List
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un <xref:System.Collections.IList>contenente l&quot;elenco di elementi di <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza.</xref:System.Collections.IList>"
  remarks: "I metodi On * vengono richiamati solo sull&quot;istanza restituita dalla proprietà elenco, ma non sull&quot;istanza restituita dal <xref:System.Collections.CollectionBase.InnerList%2A>proprietà.</xref:System.Collections.CollectionBase.InnerList%2A>       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/p-system.collections.col_1_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/p-system.collections.col_1_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.col_1_1.vb)]"
  syntax:
    content: protected System.Collections.IList List { get; }
    return:
      type: System.Collections.IList
      description: "Un <xref:System.Collections.IList>che rappresenta il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza stessa.</xref:System.Collections.IList>"
  overload: System.Collections.CollectionBase.List*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnClear
  id: OnClear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnClear()
  nameWithType: CollectionBase.OnClear()
  fullName: System.Collections.CollectionBase.OnClear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Esegue processi personalizzati aggiuntivi quando viene cancellato il contenuto del <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza."
  remarks: "L&quot;implementazione predefinita di questo metodo deve essere sottoposta a override da una classe derivata per eseguire un&quot;azione prima che la raccolta viene cancellata.       I metodi On * vengono richiamati solo per l&quot;istanza restituita dal <xref:System.Collections.CollectionBase.List%2A>proprietà, ma non sull&quot;istanza restituita dal <xref:System.Collections.CollectionBase.InnerList%2A>proprietà.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Se il processo non riesce, la raccolta, vengono ripristinate allo stato precedente.       L&quot;implementazione predefinita di questo metodo è un&quot;operazione o (1)."
  syntax:
    content: protected virtual void OnClear ();
    parameters: []
  overload: System.Collections.CollectionBase.OnClear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnClearComplete
  id: OnClearComplete
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnClearComplete()
  nameWithType: CollectionBase.OnClearComplete()
  fullName: System.Collections.CollectionBase.OnClearComplete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Esegue processi personalizzati aggiuntivi dopo aver cancellato il contenuto del <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza."
  remarks: "L&quot;implementazione predefinita di questo metodo deve essere sottoposta a override da una classe derivata per eseguire un&quot;azione dopo la raccolta viene cancellata.       I metodi On * vengono richiamati solo per l&quot;istanza restituita dal <xref:System.Collections.CollectionBase.List%2A>proprietà, ma non sull&quot;istanza restituita dal <xref:System.Collections.CollectionBase.InnerList%2A>proprietà.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       L&quot;implementazione predefinita di questo metodo è un&quot;operazione o (1)."
  syntax:
    content: protected virtual void OnClearComplete ();
    parameters: []
  overload: System.Collections.CollectionBase.OnClearComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  id: OnInsert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnInsert(Int32,Object)
  nameWithType: CollectionBase.OnInsert(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Esegue procedure personalizzate aggiuntive prima di inserire un nuovo elemento nel <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza."
  remarks: "L&quot;implementazione predefinita di questo metodo deve essere sottoposta a override da una classe derivata per eseguire un&quot;azione prima che venga inserito l&quot;elemento specificato.       I metodi On * vengono richiamati solo per l&quot;istanza restituita dal <xref:System.Collections.CollectionBase.List%2A>proprietà, ma non sull&quot;istanza restituita dal <xref:System.Collections.CollectionBase.InnerList%2A>proprietà.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Se il processo non riesce, la raccolta, vengono ripristinate allo stato precedente.       L&quot;implementazione predefinita di questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_1_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_1_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_1_1.vb)]"
  syntax:
    content: protected virtual void OnInsert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero in corrispondenza del quale inserire `value`."
    - id: value
      type: System.Object
      description: "Il nuovo valore dell&quot;elemento in `index`."
  overload: System.Collections.CollectionBase.OnInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  id: OnInsertComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnInsertComplete(Int32,Object)
  nameWithType: CollectionBase.OnInsertComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsertComplete(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Esegue processi personalizzati aggiuntivi dopo aver inserito un nuovo elemento nel <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza."
  remarks: "L&quot;implementazione predefinita di questo metodo deve essere sottoposta a override da una classe derivata per eseguire un&quot;azione quando viene inserito l&quot;elemento specificato.       I metodi On * vengono richiamati solo per l&quot;istanza restituita dal <xref:System.Collections.CollectionBase.List%2A>proprietà, ma non sull&quot;istanza restituita dal <xref:System.Collections.CollectionBase.InnerList%2A>proprietà.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       La raccolta, vengono ripristinate allo stato precedente se si verifica una delle operazioni seguenti:-il processo non riesce.      -Questo metodo viene sottoposto a override per generare un&quot;eccezione.       L&quot;implementazione predefinita di questo metodo è un&quot;operazione o (1)."
  syntax:
    content: protected virtual void OnInsertComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero in corrispondenza del quale inserire `value`."
    - id: value
      type: System.Object
      description: "Il nuovo valore dell&quot;elemento in `index`."
  overload: System.Collections.CollectionBase.OnInsertComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  id: OnRemove(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnRemove(Int32,Object)
  nameWithType: CollectionBase.OnRemove(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemove(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Esegue processi personalizzati aggiuntivi quando si rimuove un elemento di <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza."
  remarks: "L&quot;implementazione predefinita di questo metodo deve essere sottoposta a override da una classe derivata per eseguire un&quot;azione prima che venga rimosso l&quot;elemento specificato.       I metodi On * vengono richiamati solo per l&quot;istanza restituita dal <xref:System.Collections.CollectionBase.List%2A>proprietà, ma non sull&quot;istanza restituita dal <xref:System.Collections.CollectionBase.InnerList%2A>proprietà.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Se il processo non riesce, la raccolta, vengono ripristinate allo stato precedente.       L&quot;implementazione predefinita di questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_0_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_0_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_0_1.vb)]"
  syntax:
    content: protected virtual void OnRemove (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "L&quot;indice in base zero in corrispondenza del quale `value` sono disponibili."
    - id: value
      type: System.Object
      description: "Il valore dell&quot;elemento da rimuovere da `index`."
  overload: System.Collections.CollectionBase.OnRemove*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  id: OnRemoveComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnRemoveComplete(Int32,Object)
  nameWithType: CollectionBase.OnRemoveComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemoveComplete(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Esegue processi personalizzati aggiuntivi dopo la rimozione di un elemento di <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza."
  remarks: "L&quot;implementazione predefinita di questo metodo deve essere sottoposta a override da una classe derivata per eseguire un&quot;azione dopo aver rimosso l&quot;elemento specificato.       I metodi On * vengono richiamati solo per l&quot;istanza restituita dal <xref:System.Collections.CollectionBase.List%2A>proprietà, ma non sull&quot;istanza restituita dal <xref:System.Collections.CollectionBase.InnerList%2A>proprietà.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       La raccolta, vengono ripristinate allo stato precedente se si verifica una delle operazioni seguenti:-il processo non riesce.      -Questo metodo viene sottoposto a override per generare un&quot;eccezione.       L&quot;implementazione predefinita di questo metodo è un&quot;operazione o (1)."
  syntax:
    content: protected virtual void OnRemoveComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "L&quot;indice in base zero in corrispondenza del quale `value` sono disponibili."
    - id: value
      type: System.Object
      description: "Il valore dell&quot;elemento da rimuovere da `index`."
  overload: System.Collections.CollectionBase.OnRemoveComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  id: OnSet(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnSet(Int32,Object,Object)
  nameWithType: CollectionBase.OnSet(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSet(Int32,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Esegue procedure personalizzate aggiuntive prima di impostare un valore <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza."
  remarks: "L&quot;implementazione predefinita di questo metodo deve essere sottoposta a override da una classe derivata per eseguire un&quot;azione prima di imposta l&quot;elemento specificato.       I metodi On * vengono richiamati solo per l&quot;istanza restituita dal <xref:System.Collections.CollectionBase.List%2A>proprietà, ma non sull&quot;istanza restituita dal <xref:System.Collections.CollectionBase.InnerList%2A>proprietà.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Se il processo non riesce, la raccolta, vengono ripristinate allo stato precedente.       L&quot;implementazione predefinita di questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/b38eea40-0898-4372-aa13-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/b38eea40-0898-4372-aa13-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/b38eea40-0898-4372-aa13-_1.vb)]"
  syntax:
    content: protected virtual void OnSet (int index, object oldValue, object newValue);
    parameters:
    - id: index
      type: System.Int32
      description: "L&quot;indice in base zero in corrispondenza del quale `oldValue` sono disponibili."
    - id: oldValue
      type: System.Object
      description: "Il valore da sostituire con `newValue`."
    - id: newValue
      type: System.Object
      description: "Il nuovo valore dell&quot;elemento in `index`."
  overload: System.Collections.CollectionBase.OnSet*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  id: OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnSetComplete(Int32,Object,Object)
  nameWithType: CollectionBase.OnSetComplete(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSetComplete(Int32,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Esegue processi personalizzati aggiuntivi dopo aver impostato un valore nel <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza."
  remarks: "L&quot;implementazione predefinita di questo metodo deve essere sottoposta a override da una classe derivata per eseguire un&quot;azione dopo aver impostato l&quot;elemento specificato.       I metodi On * vengono richiamati solo per l&quot;istanza restituita dal <xref:System.Collections.CollectionBase.List%2A>proprietà, ma non sull&quot;istanza restituita dal <xref:System.Collections.CollectionBase.InnerList%2A>proprietà.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       La raccolta, vengono ripristinate allo stato precedente se si verifica una delle operazioni seguenti:-il processo non riesce.      -Questo metodo viene sottoposto a override per generare un&quot;eccezione.       L&quot;implementazione predefinita di questo metodo è un&quot;operazione o (1)."
  syntax:
    content: protected virtual void OnSetComplete (int index, object oldValue, object newValue);
    parameters:
    - id: index
      type: System.Int32
      description: "L&quot;indice in base zero in corrispondenza del quale `oldValue` sono disponibili."
    - id: oldValue
      type: System.Object
      description: "Il valore da sostituire con `newValue`."
    - id: newValue
      type: System.Object
      description: "Il nuovo valore dell&quot;elemento in `index`."
  overload: System.Collections.CollectionBase.OnSetComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnValidate(System.Object)
  id: OnValidate(System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnValidate(Object)
  nameWithType: CollectionBase.OnValidate(Object)
  fullName: System.Collections.CollectionBase.OnValidate(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Esegue processi personalizzati aggiuntivi durante la convalida di un valore."
  remarks: "L&quot;implementazione predefinita di questo metodo determina se `value` è `null`e, in caso affermativo, genera <xref:System.ArgumentNullException>.</xref:System.ArgumentNullException> È progettato per essere sottoposto a override da una classe derivata per eseguire ulteriori operazioni quando l&quot;elemento specificato viene convalidato.       I metodi On * vengono richiamati solo per l&quot;istanza restituita dal <xref:System.Collections.CollectionBase.List%2A>proprietà, ma non sull&quot;istanza restituita dal <xref:System.Collections.CollectionBase.InnerList%2A>proprietà.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       L&quot;implementazione predefinita di questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_3_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_3_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_3_1.vb)]"
  syntax:
    content: protected virtual void OnValidate (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Oggetto da convalidare."
  overload: System.Collections.CollectionBase.OnValidate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: CollectionBase.RemoveAt(Int32)
  fullName: System.Collections.CollectionBase.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove l&quot;elemento in corrispondenza dell&quot;indice specificato del <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> istanza. Questo metodo non è sottoponibile a override."
  remarks: "In raccolte di elementi adiacenti, quali gli elenchi, gli elementi che seguono l&quot;elemento rimosso Sposta su per occupare la posizione rimasta vuota. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente in bucket, come una tabella hash.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero dell&quot;elemento da rimuovere."
  overload: System.Collections.CollectionBase.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>index</code> è maggiore o uguale a <xref:System.Collections.CollectionBase.Count*>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia l&quot;intero <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> in una matrice unidimensionale compatibile <xref:System.Array>, a partire dall&quot;indice specificato della matrice di destinazione.</xref:System.Array>"
  remarks: "La matrice specificata deve essere di un tipo compatibile.       Questo metodo utilizza <xref:System.Array.Copy%2A?displayProperty=fullName>per copiare gli elementi.</xref:System.Array.Copy%2A?displayProperty=fullName>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Oggetto unidimensionale <xref:System.Array>che rappresenta la destinazione degli elementi copiati da <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Array> Il <xref:System.Array>deve avere un&quot;indicizzazione in base zero.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Indice in base zero `array` da cui avviare la copia."
  overload: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>è multidimensionale.       - oppure - il numero di elementi nell&quot;origine <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> è maggiore dello spazio disponibile da <code>index</code> alla fine della destinazione <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Il tipo di origine <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> non può essere eseguire automaticamente il cast al tipo della destinazione <code> array </code>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se l&quot;accesso per il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> è sincronizzato (thread-safe)."
  remarks: "Oggetto <xref:System.Collections.CollectionBase>istanza non è sincronizzata.</xref:System.Collections.CollectionBase> Classi derivate possono fornire una versione sincronizzata del <xref:System.Collections.CollectionBase>utilizzando il <xref:System.Collections.ICollection.SyncRoot%2A>proprietà.</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.CollectionBase>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.       Esempio di codice seguente viene illustrato come bloccare la raccolta utilizzando la <xref:System.Collections.ICollection.SyncRoot%2A>durante l&quot;intera enumerazione: [!code-cpp [System.Collections.CollectionBase#2](~/add/codesnippet/cpp/c3b5b435-5577-4ea3-8822-_1.cpp)][!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/c3b5b435-5577-4ea3-8822-_1.cs)][!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/c3b5b435-5577-4ea3-8822-_1.vb) ] il recupero del valore di questa proprietà è un&quot;operazione o (1).    </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;accesso al <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> è sincronizzato (thread-safe); in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un oggetto che può essere utilizzato per sincronizzare l&quot;accesso al <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  remarks: "Classi derivate possono fornire una propria versione sincronizzata del <xref:System.Collections.CollectionBase>utilizzando il <xref:System.Collections.ICollection.SyncRoot%2A>proprietà.</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.CollectionBase> Il codice di sincronizzazione è necessario eseguire operazioni sul <xref:System.Collections.ICollection.SyncRoot%2A>del <xref:System.Collections.CollectionBase>, non direttamente sulla <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> </xref:System.Collections.ICollection.SyncRoot%2A> In questo modo si garantisce il corretto funzionamento delle raccolte derivate da altri oggetti. In particolare, viene mantenuta la sincronizzazione con altri thread che potrebbero modificare contemporaneamente il <xref:System.Collections.CollectionBase>oggetto.</xref:System.Collections.CollectionBase>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.       Esempio di codice seguente viene illustrato come bloccare la raccolta utilizzando la <xref:System.Collections.ICollection.SyncRoot%2A>durante l&quot;intera enumerazione: [!code-cpp [System.Collections.CollectionBase#2](~/add/codesnippet/cpp/cacfe8dc-771f-47eb-a7e1-_1.cpp)][!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/cacfe8dc-771f-47eb-a7e1-_1.cs)][!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/cacfe8dc-771f-47eb-a7e1-_1.vb) ] il recupero del valore di questa proprietà è un&quot;operazione o (1).    </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Oggetto che può essere utilizzato per sincronizzare l&quot;accesso al <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: CollectionBase.System.Collections.IList.Add(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aggiunge un oggetto alla fine di <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  remarks: "Se <xref:System.Collections.CollectionBase.Count%2A>già pari alla capacità, la capacità dell&quot;elenco viene raddoppiata tramite la riallocazione della matrice interna e copia gli elementi esistenti nella nuova matrice prima che il nuovo elemento viene aggiunto automaticamente.</xref:System.Collections.CollectionBase.Count%2A>       Se <xref:System.Collections.CollectionBase.Count%2A>è minore della capacità, questo metodo è un&quot;operazione o (1).</xref:System.Collections.CollectionBase.Count%2A> Se la capacità deve essere incrementata per far posto al nuovo elemento, questo metodo diventa un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/9be064c1-54ea-4721-8714-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/9be064c1-54ea-4721-8714-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/9be064c1-54ea-4721-8714-_1.vb)]"
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>da aggiungere alla fine di <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
    return:
      type: System.Int32
      description: "Il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> indice in corrispondenza del quale il <code> value </code> è stato aggiunto."
  overload: System.Collections.CollectionBase.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: CollectionBase.System.Collections.IList.Contains(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> contiene un elemento specifico."
  remarks: "Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Questo metodo determina l&quot;uguaglianza chiamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se `item` esiste.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/c05c77a6-90e8-47cd-a625-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/c05c77a6-90e8-47cd-a625-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/c05c77a6-90e8-47cd-a625-_1.vb)]"
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>per individuare il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> contiene l&quot;oggetto specificato <code> value </code>; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: CollectionBase.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cerca l&quot;oggetto specificato <xref:System.Object>e restituisce l&quot;indice in base zero della prima occorrenza all&quot;interno dell&quot;intero <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
  remarks: "Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Questo metodo determina l&quot;uguaglianza chiamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se `item` esiste.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/154015bb-f734-471d-93de-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/154015bb-f734-471d-93de-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/154015bb-f734-471d-93de-_1.vb)]"
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>per individuare il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
    return:
      type: System.Int32
      description: "L&quot;indice in base zero della prima occorrenza di <code> value </code> all&quot;interno dell&quot;intero <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>, se presente; in caso contrario, -1."
  overload: System.Collections.CollectionBase.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: CollectionBase.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inserisce un elemento nel <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> in corrispondenza dell&quot;indice specificato."
  remarks: "Se <xref:System.Collections.CollectionBase.Count%2A>già pari alla capacità, la capacità dell&quot;elenco viene raddoppiata automaticamente mediante la riallocazione della matrice interna prima che venga inserito il nuovo elemento.</xref:System.Collections.CollectionBase.Count%2A>       Se `index` è uguale a <xref:System.Collections.CollectionBase.Count%2A>, `value` viene aggiunto alla fine di <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase.Count%2A>       In raccolte di elementi adiacenti, quali gli elenchi, gli elementi successivi al punto di inserimento vengono spostati verso il basso per consentire l&quot;inserimento del nuovo elemento. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente in bucket, come una tabella hash.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/f8b730a7-8cec-40ed-9d7e-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/f8b730a7-8cec-40ed-9d7e-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/f8b730a7-8cec-40ed-9d7e-_1.vb)]"
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "L&quot;indice in base zero in corrispondenza del quale `value` deve essere inserito."
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>da inserire.</xref:System.Object>"
  overload: System.Collections.CollectionBase.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>index</code> è maggiore di <xref:System.Collections.CollectionBase.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> ha dimensioni fisse."
  remarks: "Una raccolta con dimensioni fisse non consente l&quot;aggiunta o la rimozione di elementi dopo la sua creazione, ma consente la modifica degli elementi esistenti.       Una raccolta con una dimensione fissa è semplicemente una raccolta con un wrapper che impedisce l&quot;aggiunta e rimozione di elementi. Pertanto, se vengono apportate modifiche alla raccolta sottostante, incluse l&quot;aggiunta o la rimozione di elementi, la raccolta a dimensione fissa riflette le modifiche.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> sono fisse dimensioni; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> è di sola lettura."
  remarks: "Una raccolta di sola lettura non consente l&quot;aggiunta, rimozione o modifica di elementi dopo la sua creazione.       Una raccolta di sola lettura è semplicemente una raccolta con un wrapper che impedisce la modifica. Pertanto, se vengono apportate modifiche alla raccolta sottostante, la raccolta di sola lettura riflette le modifiche.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> è di sola lettura; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: CollectionBase.System.Collections.IList.Item(Int32)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene o imposta l&quot;elemento in corrispondenza dell&quot;indice specificato."
  remarks: "Questa proprietà consente di accedere a un elemento specifico nella raccolta utilizzando la sintassi seguente: `myCollection[index]`.       Il recupero del valore di questa proprietà è un&quot;operazione o (1). l&quot;impostazione della proprietà è un&quot;operazione o (1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/83a912ba-0bf4-468a-a9c4-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/83a912ba-0bf4-468a-a9c4-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/83a912ba-0bf4-468a-a9c4-_1.vb)]"
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero dell&quot;elemento da ottenere o impostare."
    return:
      type: System.Object
      description: "L&quot;elemento in corrispondenza dell&quot;indice specificato."
  overload: System.Collections.CollectionBase.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>index</code> è maggiore o uguale a <xref:System.Collections.CollectionBase.Count*>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: CollectionBase.System.Collections.IList.Remove(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove la prima occorrenza di un oggetto specifico dal <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  remarks: "Se il <xref:System.Collections.CollectionBase>non contiene l&quot;oggetto specificato, il <xref:System.Collections.CollectionBase>rimane invariato.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> Viene generata alcuna eccezione.       Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Questo metodo determina l&quot;uguaglianza chiamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       In raccolte di elementi adiacenti, quali gli elenchi, gli elementi che seguono l&quot;elemento rimosso Sposta su per occupare la posizione rimasta vuota. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente in bucket, come una tabella hash."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/92a20c91-2133-45e3-9527-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/92a20c91-2133-45e3-9527-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/92a20c91-2133-45e3-9527-_1.vb)]"
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>per rimuovere il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.CollectionBase.System#Collections#IList#Remove*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> value </code> in non è stato trovato alcun parametro di <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> oggetto."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Collections.CollectionBase.#ctor
  parent: System.Collections.CollectionBase
  isExternal: false
  name: CollectionBase()
  nameWithType: CollectionBase.CollectionBase()
  fullName: System.Collections.CollectionBase.CollectionBase()
- uid: System.Collections.CollectionBase.#ctor(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: CollectionBase(Int32)
  nameWithType: CollectionBase.CollectionBase(Int32)
  fullName: System.Collections.CollectionBase.CollectionBase(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.CollectionBase.Capacity
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Capacity
  nameWithType: CollectionBase.Capacity
  fullName: System.Collections.CollectionBase.Capacity
- uid: System.Collections.CollectionBase.Clear
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Clear()
  nameWithType: CollectionBase.Clear()
  fullName: System.Collections.CollectionBase.Clear()
- uid: System.Collections.CollectionBase.Count
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Count
  nameWithType: CollectionBase.Count
  fullName: System.Collections.CollectionBase.Count
- uid: System.Collections.CollectionBase.GetEnumerator
  parent: System.Collections.CollectionBase
  isExternal: false
  name: GetEnumerator()
  nameWithType: CollectionBase.GetEnumerator()
  fullName: System.Collections.CollectionBase.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.CollectionBase.InnerList
  parent: System.Collections.CollectionBase
  isExternal: false
  name: InnerList
  nameWithType: CollectionBase.InnerList
  fullName: System.Collections.CollectionBase.InnerList
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.CollectionBase.List
  parent: System.Collections.CollectionBase
  isExternal: false
  name: List
  nameWithType: CollectionBase.List
  fullName: System.Collections.CollectionBase.List
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.CollectionBase.OnClear
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClear()
  nameWithType: CollectionBase.OnClear()
  fullName: System.Collections.CollectionBase.OnClear()
- uid: System.Collections.CollectionBase.OnClearComplete
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClearComplete()
  nameWithType: CollectionBase.OnClearComplete()
  fullName: System.Collections.CollectionBase.OnClearComplete()
- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsert(Int32,Object)
  nameWithType: CollectionBase.OnInsert(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsert(Int32,Object)
- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsertComplete(Int32,Object)
  nameWithType: CollectionBase.OnInsertComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsertComplete(Int32,Object)
- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemove(Int32,Object)
  nameWithType: CollectionBase.OnRemove(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemove(Int32,Object)
- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemoveComplete(Int32,Object)
  nameWithType: CollectionBase.OnRemoveComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemoveComplete(Int32,Object)
- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSet(Int32,Object,Object)
  nameWithType: CollectionBase.OnSet(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSet(Int32,Object,Object)
- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSetComplete(Int32,Object,Object)
  nameWithType: CollectionBase.OnSetComplete(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSetComplete(Int32,Object,Object)
- uid: System.Collections.CollectionBase.OnValidate(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnValidate(Object)
  nameWithType: CollectionBase.OnValidate(Object)
  fullName: System.Collections.CollectionBase.OnValidate(Object)
- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: CollectionBase.RemoveAt(Int32)
  fullName: System.Collections.CollectionBase.RemoveAt(Int32)
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: CollectionBase.System.Collections.IList.Add(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: CollectionBase.System.Collections.IList.Contains(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: CollectionBase.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: CollectionBase.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(Int32,Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly
- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: CollectionBase.System.Collections.IList.Item(Int32)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Item(Int32)
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: CollectionBase.System.Collections.IList.Remove(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(Object)
- uid: System.Collections.CollectionBase.#ctor*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: CollectionBase
  nameWithType: CollectionBase.CollectionBase
- uid: System.Collections.CollectionBase.Capacity*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Capacity
  nameWithType: CollectionBase.Capacity
- uid: System.Collections.CollectionBase.Clear*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Clear
  nameWithType: CollectionBase.Clear
- uid: System.Collections.CollectionBase.Count*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Count
  nameWithType: CollectionBase.Count
- uid: System.Collections.CollectionBase.GetEnumerator*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: GetEnumerator
  nameWithType: CollectionBase.GetEnumerator
- uid: System.Collections.CollectionBase.InnerList*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: InnerList
  nameWithType: CollectionBase.InnerList
- uid: System.Collections.CollectionBase.List*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: List
  nameWithType: CollectionBase.List
- uid: System.Collections.CollectionBase.OnClear*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClear
  nameWithType: CollectionBase.OnClear
- uid: System.Collections.CollectionBase.OnClearComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClearComplete
  nameWithType: CollectionBase.OnClearComplete
- uid: System.Collections.CollectionBase.OnInsert*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsert
  nameWithType: CollectionBase.OnInsert
- uid: System.Collections.CollectionBase.OnInsertComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsertComplete
  nameWithType: CollectionBase.OnInsertComplete
- uid: System.Collections.CollectionBase.OnRemove*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemove
  nameWithType: CollectionBase.OnRemove
- uid: System.Collections.CollectionBase.OnRemoveComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemoveComplete
  nameWithType: CollectionBase.OnRemoveComplete
- uid: System.Collections.CollectionBase.OnSet*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSet
  nameWithType: CollectionBase.OnSet
- uid: System.Collections.CollectionBase.OnSetComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSetComplete
  nameWithType: CollectionBase.OnSetComplete
- uid: System.Collections.CollectionBase.OnValidate*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnValidate
  nameWithType: CollectionBase.OnValidate
- uid: System.Collections.CollectionBase.RemoveAt*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: RemoveAt
  nameWithType: CollectionBase.RemoveAt
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.CollectionBase.System#Collections#IList#Add*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: CollectionBase.System.Collections.IList.Add
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: CollectionBase.System.Collections.IList.Contains
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: CollectionBase.System.Collections.IList.IndexOf
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: CollectionBase.System.Collections.IList.Insert
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly
- uid: System.Collections.CollectionBase.System#Collections#IList#Item*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: CollectionBase.System.Collections.IList.Item
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: CollectionBase.System.Collections.IList.Remove
