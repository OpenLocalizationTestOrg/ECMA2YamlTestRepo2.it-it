### YamlMime:ManagedReference
items:
- uid: System.Data.DataColumn
  id: DataColumn
  children:
  - System.Data.DataColumn.#ctor
  - System.Data.DataColumn.#ctor(System.String)
  - System.Data.DataColumn.#ctor(System.String,System.Type)
  - System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  - System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  - System.Data.DataColumn.AllowDBNull
  - System.Data.DataColumn.AutoIncrement
  - System.Data.DataColumn.AutoIncrementSeed
  - System.Data.DataColumn.AutoIncrementStep
  - System.Data.DataColumn.Caption
  - System.Data.DataColumn.CheckNotAllowNull
  - System.Data.DataColumn.CheckUnique
  - System.Data.DataColumn.ColumnMapping
  - System.Data.DataColumn.ColumnName
  - System.Data.DataColumn.DataType
  - System.Data.DataColumn.DateTimeMode
  - System.Data.DataColumn.DefaultValue
  - System.Data.DataColumn.Expression
  - System.Data.DataColumn.ExtendedProperties
  - System.Data.DataColumn.MaxLength
  - System.Data.DataColumn.Namespace
  - System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataColumn.Ordinal
  - System.Data.DataColumn.Prefix
  - System.Data.DataColumn.RaisePropertyChanging(System.String)
  - System.Data.DataColumn.ReadOnly
  - System.Data.DataColumn.SetOrdinal(System.Int32)
  - System.Data.DataColumn.Table
  - System.Data.DataColumn.ToString
  - System.Data.DataColumn.Unique
  langs:
  - csharp
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
  type: Class
  summary: "Rappresenta lo schema di una colonna in un <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "DataColumn è il blocco predefinito fondamentale per la creazione dello schema di un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Lo schema viene compilato mediante l&quot;aggiunta di uno o più oggetti DataColumn a <xref:System.Data.DataColumnCollection>.</xref:System.Data.DataColumnCollection> Per ulteriori informazioni, vedere [aggiunta di colonne a un oggetto DataTable](~/add/includes/ajax-current-ext-md.md).       Ogni DataColumn ha un <xref:System.Data.DataColumn.DataType%2A>contiene proprietà che determina il tipo di dati di DataColumn.</xref:System.Data.DataColumn.DataType%2A> Ad esempio, è possibile limitare il tipo di dati per valori integer, stringhe o numeri decimali. Poiché i dati contenuti dal <xref:System.Data.DataTable>viene in genere unita all&quot;origine dati originale, è necessario far corrispondere i tipi di dati a quelli nell&quot;origine dati.</xref:System.Data.DataTable> Per ulteriori informazioni, vedere [mapping dei tipi di dati in ADO.NET](~/add/includes/ajax-current-ext-md.md).       Proprietà, ad esempio <xref:System.Data.DataColumn.AllowDBNull%2A>, <xref:System.Data.DataColumn.Unique%2A>, e <xref:System.Data.DataColumn.ReadOnly%2A>imporre restrizioni la voce e all&quot;aggiornamento dei dati, consentendo in tal modo per garantire l&quot;integrità dei dati.</xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> È inoltre possibile utilizzare il <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, e <xref:System.Data.DataColumn.AutoIncrementStep%2A>proprietà per controllare la generazione automatica dei dati.</xref:System.Data.DataColumn.AutoIncrementStep%2A> </xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrement%2A> Per ulteriori informazioni su <xref:System.Data.DataColumn.AutoIncrement%2A>colonne, vedere [la creazione di colonne AutoIncrement](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataColumn.AutoIncrement%2A> Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/add/includes/ajax-current-ext-md.md).       È inoltre possibile assicurarsi che i valori in una colonna di dati siano univoci creando un <xref:System.Data.UniqueConstraint>e aggiungendolo al <xref:System.Data.ConstraintCollection>del <xref:System.Data.DataTable>a cui appartiene la DataColumn.</xref:System.Data.DataTable> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint> Per ulteriori informazioni, vedere [vincoli DataTable](~/add/includes/ajax-current-ext-md.md).       Per creare una relazione tra oggetti DataColumn, creare un <xref:System.Data.DataRelation>oggetto e aggiungerlo al <xref:System.Data.DataRelationCollection>un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRelationCollection> </xref:System.Data.DataRelation>       È possibile utilizzare il <xref:System.Data.DataColumn.Expression%2A>proprietà dell&quot;oggetto DataColumn per calcolare i valori in una colonna o creare una colonna aggregata.</xref:System.Data.DataColumn.Expression%2A> Per ulteriori informazioni, vedere [la creazione di colonne espressioni](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Data.DataTable> with several DataColumn objects.  \n  \n [!code-cs[Classic WebData DataColumn Example#1](~/add/codesnippet/csharp/t-system.data.datacolumn_1.cs)]\n [!code-vb[Classic WebData DataColumn Example#1](~/add/codesnippet/visualbasic/t-system.data.datacolumn_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("ColumnName")]

      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(false)]

      public class DataColumn : System.ComponentModel.MarshalByValueComponent
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements: []
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  - System.ComponentModel.MarshalByValueComponent.Site
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor
  id: '#ctor'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn()
  nameWithType: DataColumn.DataColumn()
  fullName: System.Data.DataColumn.DataColumn()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di un <xref href=&quot;System.Data.DataColumn&quot;> </xref> classe come tipo string."
  remarks: "Creazione, un <xref:System.Data.DataColumn>oggetto non ha alcun valore predefinito <xref:System.Data.DataColumn.ColumnName%2A>o <xref:System.Data.DataColumn.Caption%2A>.</xref:System.Data.DataColumn.Caption%2A> </xref:System.Data.DataColumn.ColumnName%2A> </xref:System.Data.DataColumn> Quando si aggiunge a un oggetto <xref:System.Data.DataColumnCollection>verrà generato un nome predefinito (&quot;Column1&quot;, &quot;Column2&quot; e così via) se non è stato assegnato un nome al <xref:System.Data.DataColumn.ColumnName%2A>.</xref:System.Data.DataColumn.ColumnName%2A> </xref:System.Data.DataColumnCollection>"
  example:
  - "The following example creates a new <xref:System.Data.DataColumn>, sets various properties, and adds it to a <xref:System.Data.DataColumnCollection> for the <xref:System.Data.DataTable> object.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_13_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_13_1.cs)]"
  syntax:
    content: public DataColumn ();
    parameters: []
  overload: System.Data.DataColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String)
  nameWithType: DataColumn.DataColumn(String)
  fullName: System.Data.DataColumn.DataColumn(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DataColumn&quot;> </xref> (classe), come tipo string, utilizzando il nome della colonna specificata."
  remarks: "Per impostazione predefinita, il nome specifico a una colonna diventa il <xref:System.Data.DataColumn.Caption%2A>valore della proprietà.</xref:System.Data.DataColumn.Caption%2A>"
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> with a specified <xref:System.Data.DataColumn.ColumnName%2A>.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_6_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn1 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_6_1.cs)]"
  syntax:
    content: public DataColumn (string columnName);
    parameters:
    - id: columnName
      type: System.String
      description: "Stringa che rappresenta il nome della colonna da creare. Se impostato su <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o una stringa vuota (&quot;&quot;), verrà specificato un nome predefinito, quando aggiunto all&quot;insieme di colonne."
  overload: System.Data.DataColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type)
  id: '#ctor(System.String,System.Type)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type)
  nameWithType: DataColumn.DataColumn(String,Type)
  fullName: System.Data.DataColumn.DataColumn(String,Type)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DataColumn&quot;> </xref> classe utilizzando il tipo di dati e nome di colonna specificata."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> with a specified <xref:System.Data.DataColumn.ColumnName%2A> and <xref:System.Data.DataColumn.DataType%2A>.  \n  \n [!code-cs[Classic WebData DataColumn.DataColumn2 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_15_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_15_1.vb)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType);
    parameters:
    - id: columnName
      type: System.String
      description: "Stringa che rappresenta il nome della colonna da creare. Se impostato su <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o una stringa vuota (&quot;&quot;), verrà specificato un nome predefinito, quando aggiunto all&quot;insieme di colonne."
    - id: dataType
      type: System.Type
      description: "Un <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*> supportati"
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Non <code> dataType </code> è stato specificato."
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  id: '#ctor(System.String,System.Type,System.String)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type,String)
  nameWithType: DataColumn.DataColumn(String,Type,String)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DataColumn&quot;> </xref> classe utilizzando l&quot;espressione, un tipo di dati e un nome specificato."
  remarks: ''
  example:
  - "The following example creates a computed column.  \n  \n [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_8_1.vb)]\n [!code-cs[Classic WebData DataColumn.DataColumn3 Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_8_1.cs)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType, string expr);
    parameters:
    - id: columnName
      type: System.String
      description: "Stringa che rappresenta il nome della colonna da creare. Se impostato su <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o una stringa vuota (&quot;&quot;), verrà specificato un nome predefinito, quando aggiunto all&quot;insieme di colonne."
    - id: dataType
      type: System.Type
      description: "Un <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*> supportati"
    - id: expr
      type: System.String
      description: "L&quot;espressione utilizzata per creare questa colonna. Per ulteriori informazioni, vedere il <xref:System.Data.DataColumn.Expression*>proprietà.</xref:System.Data.DataColumn.Expression*>"
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Non <code> dataType </code> è stato specificato."
  platform:
  - net462
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  id: '#ctor(System.String,System.Type,System.String,System.Data.MappingType)'
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataColumn(String,Type,String,MappingType)
  nameWithType: DataColumn.DataColumn(String,Type,String,MappingType)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String,MappingType)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DataColumn&quot;> </xref> classe utilizzando il nome specificato, tipo di dati, l&quot;espressione e valore che determina se la colonna è un attributo."
  remarks: "The `type` argument sets the <xref:System.Data.DataColumn.ColumnMapping%2A> property. The property specifies how a <xref:System.Data.DataColumn> is mapped when a <xref:System.Data.DataSet> is transformed into an XML document. For example, if the column is named \"fName,\" and the value it contains is \"Bob,\" and `type` is set to `MappingType.Attribute`, the XML element would be as follows:  \n  \n \\<Name fName = 'Bob'/>  \n  \n For more information about how columns are mapped to elements or attributes, see the <xref:System.Data.DataColumn.ColumnMapping%2A> property."
  example:
  - "The following example constructs a computed column.  \n  \n [!code-cs[Classic WebData DataColumn.DataColumn4 Example#1](~/add/codesnippet/csharp/0bebed42-c35c-4bf3-9757-_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/add/codesnippet/visualbasic/0bebed42-c35c-4bf3-9757-_1.vb)]"
  syntax:
    content: public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);
    parameters:
    - id: columnName
      type: System.String
      description: "Stringa che rappresenta il nome della colonna da creare. Se impostato su <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o una stringa vuota (&quot;&quot;), verrà specificato un nome predefinito, quando aggiunto all&quot;insieme di colonne."
    - id: dataType
      type: System.Type
      description: "Un <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*> supportati"
    - id: expr
      type: System.String
      description: "L&quot;espressione utilizzata per creare questa colonna. Per ulteriori informazioni, vedere il <xref:System.Data.DataColumn.Expression*>proprietà.</xref:System.Data.DataColumn.Expression*>"
    - id: type
      type: System.Data.MappingType
      description: "Uno del <xref href=&quot;System.Data.MappingType&quot;> </xref> valori."
  overload: System.Data.DataColumn.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Non <code> dataType </code> è stato specificato."
  platform:
  - net462
- uid: System.Data.DataColumn.AllowDBNull
  id: AllowDBNull
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
  fullName: System.Data.DataColumn.AllowDBNull
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta un valore che indica se in questa colonna sono consentiti valori null per le righe che appartengono alla tabella."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataColumn> and sets its AllowDBNull property to `true`.  \n  \n [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_2_1.vb)]\n [!code-cs[Classic WebData DataColumn.AllowDBNull Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_2_1.cs)]"
  syntax:
    content: public bool AllowDBNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se sono consentiti valori null; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.AllowDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrement
  id: AutoIncrement
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
  fullName: System.Data.DataColumn.AutoIncrement
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta un valore che indica se la colonna viene incrementato automaticamente il valore della colonna per le nuove righe aggiunte alla tabella."
  remarks: "Se il tipo di questa colonna non è Int16, Int32 o Int64 quando questa proprietà è impostata, il <xref:System.Data.DataColumn.DataType%2A>proprietà è impostata forzatamente su Int32.</xref:System.Data.DataColumn.DataType%2A> Se si tratta di una colonna calcolata, viene generata un&quot;eccezione. Il <xref:System.Data.DataColumn.Expression%2A>proprietà è impostata.</xref:System.Data.DataColumn.Expression%2A> Il valore incrementato viene utilizzato solo se il valore della riga per questa colonna, quando aggiunto all&quot;insieme di colonne, è uguale al valore predefinito.       È possibile creare una nuova riga utilizzando il <xref:System.Data.DataRow.ItemArray%2A>proprietà la <xref:System.Data.DataRow>classe e passando una matrice di valori.</xref:System.Data.DataRow> </xref:System.Data.DataRow.ItemArray%2A> Si tratta di un potenziale problema per una colonna con il relativo incremento automatico è impostato su `true`, perché il relativo valore viene generato automaticamente. Utilizzare il <xref:System.Data.DataRow.ItemArray%2A>proprietà, posto `null` nella posizione della colonna nella matrice.</xref:System.Data.DataRow.ItemArray%2A> Per ulteriori informazioni, vedere la <xref:System.Data.DataRow.ItemArray%2A>proprietà di <xref:System.Data.DataRow>classe.</xref:System.Data.DataRow> </xref:System.Data.DataRow.ItemArray%2A>       Se il tipo della colonna è <xref:System.Data.SqlTypes.SqlInt16>o <xref:System.Data.SqlTypes.SqlInt32>, incremento automatico non funzionerà.</xref:System.Data.SqlTypes.SqlInt32> </xref:System.Data.SqlTypes.SqlInt16> Utilizzare invece Int16 o Int32.       Se il tipo della colonna è <xref:System.Data.SqlTypes.SqlInt64>o <xref:System.Data.SqlTypes.SqlDecimal>, AutoIncrement funzionerà solo parzialmente.</xref:System.Data.SqlTypes.SqlDecimal> </xref:System.Data.SqlTypes.SqlInt64> Utilizzare invece Int64 o decimale.       Quando il <xref:System.Data.DataColumn.AutoIncrementStep%2A>valore viene aggiunto al valore corrente, viene eliminato il controllo dell&quot;overflow.</xref:System.Data.DataColumn.AutoIncrementStep%2A>"
  example:
  - "The following example sets the AutoIncrement, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_13_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_13_1.cs)]"
  syntax:
    content: public bool AutoIncrement { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il valore della colonna viene incrementato automaticamente. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.AutoIncrement*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La colonna è una colonna calcolata."
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrementSeed
  id: AutoIncrementSeed
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
  fullName: System.Data.DataColumn.AutoIncrementSeed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta il valore iniziale di una colonna con il relativo <xref:System.Data.DataColumn.AutoIncrement*>proprietà impostata su <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Data.DataColumn.AutoIncrement*> Il valore predefinito è 0."
  remarks: ''
  example:
  - "The following example sets the <xref:System.Data.DataColumn.AutoIncrement%2A>, AutoIncrementSeed, and <xref:System.Data.DataColumn.AutoIncrementStep%2A> properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_15_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_15_1.cs)]"
  syntax:
    content: public long AutoIncrementSeed { get; set; }
    return:
      type: System.Int64
      description: "Il valore iniziale per il <xref:System.Data.DataColumn.AutoIncrement*>funzionalità.</xref:System.Data.DataColumn.AutoIncrement*>"
  overload: System.Data.DataColumn.AutoIncrementSeed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.AutoIncrementStep
  id: AutoIncrementStep
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
  fullName: System.Data.DataColumn.AutoIncrementStep
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta l&quot;incremento utilizzato da una colonna con il relativo <xref:System.Data.DataColumn.AutoIncrement*>proprietà impostata su <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Data.DataColumn.AutoIncrement*>"
  remarks: ''
  example:
  - "The following example sets the <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, and AutoIncrementStep properties.  \n  \n [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_7_1.vb)]\n [!code-cs[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_7_1.cs)]"
  syntax:
    content: public long AutoIncrementStep { get; set; }
    return:
      type: System.Int64
      description: "Numero con cui il valore della colonna è incrementato automaticamente. Il valore predefinito è 1."
  overload: System.Data.DataColumn.AutoIncrementStep*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il valore impostato è zero."
  platform:
  - net462
- uid: System.Data.DataColumn.Caption
  id: Caption
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Caption
  nameWithType: DataColumn.Caption
  fullName: System.Data.DataColumn.Caption
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta la didascalia per la colonna."
  remarks: "È possibile utilizzare la proprietà Caption per visualizzare un nome descrittivo per un <xref:System.Data.DataColumn>.</xref:System.Data.DataColumn>"
  example:
  - "The following example creates a new <xref:System.Data.DataTable>. It then adds three <xref:System.Data.DataColumn> objects to a <xref:System.Data.DataColumnCollection> and sets the Caption property for each <xref:System.Data.DataColumn>.  \n  \n [!code-cs[Classic WebData DataColumn.Caption Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_5_1.cs)]\n [!code-vb[Classic WebData DataColumn.Caption Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_5_1.vb)]"
  syntax:
    content: public string Caption { get; set; }
    return:
      type: System.String
      description: "La didascalia della colonna. Se non è impostato, restituisce il <xref:System.Data.DataColumn.ColumnName*>valore.</xref:System.Data.DataColumn.ColumnName*>"
  overload: System.Data.DataColumn.Caption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.CheckNotAllowNull
  id: CheckNotAllowNull
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: CheckNotAllowNull()
  nameWithType: DataColumn.CheckNotAllowNull()
  fullName: System.Data.DataColumn.CheckNotAllowNull()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Questo membro supporta l&quot;infrastruttura .NET Framework e non deve essere utilizzato direttamente dal codice."
  syntax:
    content: protected void CheckNotAllowNull ();
    parameters: []
  overload: System.Data.DataColumn.CheckNotAllowNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.CheckUnique
  id: CheckUnique
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: CheckUnique()
  nameWithType: DataColumn.CheckUnique()
  fullName: System.Data.DataColumn.CheckUnique()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Questo membro supporta l&quot;infrastruttura .NET Framework e non deve essere utilizzato direttamente dal codice."
  syntax:
    content: protected void CheckUnique ();
    parameters: []
  overload: System.Data.DataColumn.CheckUnique*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ColumnMapping
  id: ColumnMapping
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
  fullName: System.Data.DataColumn.ColumnMapping
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta il <xref href=&quot;System.Data.MappingType&quot;> </xref> della colonna."
  remarks: "La proprietà ColumnMapping determina come un <xref:System.Data.DataColumn>viene mappato quando un <xref:System.Data.DataSet>viene salvato come un documento XML usando il <xref:System.Data.DataSet.WriteXml%2A>(metodo).</xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataColumn>       Ad esempio, se un <xref:System.Data.DataColumn>denominato &quot;customerID&quot; e il relativo ColumnMapping è impostata su `MappingType.Element`, il valore della colonna produrrà il seguente codice XML: ```   <Customers>    <customerID>ALFKI</customerID>   ......    </Customers>    <Orders>    <OrderID>12345</OrderID>    <customerID>ALFKI</customerID>   ......    </Orders>   ``` , tuttavia, se la stessa colonna è mappata a `MappingType.Attribute`, viene prodotto il seguente codice XML: ```   <Customers customerID=&quot;ALFKI&quot;........more attributes.....>    <Order orderID=&quot;1234&quot;....more attributes..../>    <Order orderID=&quot;1234&quot;....more attributes..../>   ...... More orders for this customer    </Customers>   ``` utilizzare il <xref:System.Data.DataColumn.%23ctor%2A>costruttore contenente il `type` argomento per specificare come il <xref:System.Data.DataColumn>viene mappato quando relativo <xref:System.Data.DataSet>viene trasformato in un documento XML.</xref:System.Data.DataSet> </xref:System.Data.DataColumn> </xref:System.Data.DataColumn.%23ctor%2A> </xref:System.Data.DataColumn>       La proprietà ColumnMapping corrisponde all&quot;argomento del costruttore `type`."
  example:
  - "The following example sets the ColumnMapping type property of new <xref:System.Data.DataColumn>.  \n  \n [!code-cs[Classic WebData DataColumn.ColumnMapping Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_9_1.cs)]\n [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_9_1.vb)]"
  syntax:
    content: public virtual System.Data.MappingType ColumnMapping { get; set; }
    return:
      type: System.Data.MappingType
      description: "Uno del <xref href=&quot;System.Data.MappingType&quot;> </xref> valori."
  overload: System.Data.DataColumn.ColumnMapping*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ColumnName
  id: ColumnName
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ColumnName
  nameWithType: DataColumn.ColumnName
  fullName: System.Data.DataColumn.ColumnName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta il nome della colonna di <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref>."
  remarks: "Quando un <xref:System.Data.DataColumn>viene creato, non ha alcun valore ColumnName.</xref:System.Data.DataColumn> Tuttavia, quando il <xref:System.Data.DataColumn>viene aggiunto a un <xref:System.Data.DataColumnCollection>per un <xref:System.Data.DataTable>dell&quot;oggetto, gli viene assegnato un nome predefinito (&quot;Column1&quot;, &quot;Column2&quot; e così via).</xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> </xref:System.Data.DataColumn>       Per impostazione predefinita, il <xref:System.Data.DataColumn.Caption%2A>è impostato sul valore ColumnName.</xref:System.Data.DataColumn.Caption%2A>"
  example:
  - "The following examples gets the ColumnName for every column in every table in a <xref:System.Data.DataSet>. The example also shows how to create a <xref:System.Data.DataColumn> with a new ColumnName.  \n  \n [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_8_1.vb)]\n [!code-cs[Classic WebData DataColumn.ColumnName Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_8_1.cs)]"
  syntax:
    content: public string ColumnName { get; set; }
    return:
      type: System.String
      description: "Il nome della colonna."
  overload: System.Data.DataColumn.ColumnName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La proprietà è impostata su <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o una stringa vuota e la colonna appartiene a una raccolta."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "Una colonna con lo stesso nome esiste già nella raccolta. Il confronto di nome non viene fatta distinzione tra maiuscole e minuscole."
  platform:
  - net462
- uid: System.Data.DataColumn.DataType
  id: DataType
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DataType
  nameWithType: DataColumn.DataType
  fullName: System.Data.DataColumn.DataType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta il tipo di dati archiviati nella colonna."
  remarks: "L&quot;impostazione del valore di tipo di dati è molto importante per garantire la corretta creazione e aggiornamento dei dati in un&quot;origine dati.       La proprietà DataType supporta i tipi di dati di base .NET Framework seguenti:- <xref:System.Boolean>- <xref:System.Byte>- <xref:System.Char>- <xref:System.DateTime>- <xref:System.Decimal>- <xref:System.Double>- <xref:System.Guid>- <xref:System.Int16>- <xref:System.Int32>- <xref:System.Int64>- <xref:System.SByte>- <xref:System.Single>- <xref:System.String>- <xref:System.TimeSpan>- <xref:System.UInt16>- <xref:System.UInt32>- <xref:System.UInt64>nonché il tipo di matrice seguenti:- `Byte[]` viene generata un&quot;eccezione quando si modifica questa proprietà dopo la colonna è iniziata l&quot;archiviazione dei dati.</xref:System.UInt64> </xref:System.UInt32> </xref:System.UInt16> </xref:System.TimeSpan> </xref:System.String> </xref:System.Single> </xref:System.SByte> </xref:System.Int64> </xref:System.Int32> </xref:System.Int16> </xref:System.Guid> </xref:System.Double> </xref:System.Decimal> </xref:System.DateTime> </xref:System.Char> </xref:System.Byte> </xref:System.Boolean>       Se <xref:System.Data.DataColumn.AutoIncrement%2A>è impostato su `true` prima di impostare la proprietà del tipo di dati e si tenta di impostare il tipo su un valore diverso da un tipo integer, viene generata un&quot;eccezione.</xref:System.Data.DataColumn.AutoIncrement%2A>      > [!NOTE] > Una colonna di tipo di dati `Byte[]` richiede un trattamento speciale in alcuni casi poiché, a differenza dei tipi di dati .NET Framework di base, è un tipo di dati di riferimento. Se una colonna di tipo di dati `Byte[]` viene utilizzato come un <xref:System.Data.DataTable.PrimaryKey%2A>, o come un <xref:System.Data.DataView.Sort%2A>o <xref:System.Data.DataView.RowFilter%2A>chiave per un <xref:System.Data.DataView>, qualsiasi modifica al valore della colonna deve implicare l&quot;assegnazione di `Byte[]` valore della colonna a un&quot;istanza separatamente `Byte[]` oggetto.</xref:System.Data.DataView> </xref:System.Data.DataView.RowFilter%2A> </xref:System.Data.DataView.Sort%2A> </xref:System.Data.DataTable.PrimaryKey%2A> Questa assegnazione è necessario attivare l&quot;aggiornamento degli indici interni utilizzata da operazioni di ordinamento, filtro e operazioni relative alla chiave primarie. Questo comportamento è illustrato nell&quot;esempio seguente: ```   byte[] columnValue = (byte[])myDataTable.Rows[0][0];   byte[] newValue = (byte[])columnValue.Clone();   newValue[1] = 2;   myDataTable.Rows[0][0] = newValue;   ```       >  [!NOTE] > anche se è possibile definire una colonna con tipo di dati diverso da tipi di dati .NET Framework di base e `Byte[]`, tale colonna verrà considerata come un tipo definito dall&quot;utente, soggetto alle seguenti limitazioni di utilizzo. (Per ulteriori informazioni sui tipi definiti dall&quot;utente, vedere [Creating and User-Defined Type](http://msdn.microsoft.com/en-us/ec0266d2-7e5b-47e4-938a-85ac9d04fa40).)      -La colonna non può essere parte di un <xref:System.Data.DataView.RowFilter%2A>o <xref:System.Data.DataTable.Select%2A>expression.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataView.RowFilter%2A>      -Se la colonna viene utilizzata come un <xref:System.Data.DataTable.PrimaryKey%2A>, o come un <xref:System.Data.DataView.Sort%2A>o per un <xref:System.Data.DataView>, deve essere considerata come un campo non modificabile; i dati della colonna non devono essere modificati dopo che è stato aggiunto alla tabella.</xref:System.Data.DataView> </xref:System.Data.DataView.Sort%2A> </xref:System.Data.DataTable.PrimaryKey%2A>      -La <xref:System.Data.DataColumn.ColumnMapping%2A>può essere impostato solo su `MappingType.Element`.</xref:System.Data.DataColumn.ColumnMapping%2A>      -La classe che implementa il tipo di dati della colonna deve essere contrassegnati con il <xref:System.SerializableAttribute>, e se necessario, implementare il <xref:System.Runtime.Serialization.ISerializable>o <xref:System.Xml.Serialization.IXmlSerializable>interfaccia.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Runtime.Serialization.ISerializable> </xref:System.SerializableAttribute>      -Supporto per il rilevamento delle modifiche è limitato. Utilizzare il <xref:System.Data.DataTable>meccanismo di rilevamento modifiche della classe, la classe che implementa il tipo di dati della colonna deve implementare il <xref:System.ComponentModel.IChangeTracking>interfaccia o assumere la responsabilità per informare il <xref:System.Data.DataRow>quando il valore della colonna è stato modificato, chiamando <xref:System.Data.DataRow.SetModified%2A>sulla riga o l&quot;assegnazione dell&quot;oggetto di valore di colonna a un oggetto valore colonna separatamente istanziato.</xref:System.Data.DataRow.SetModified%2A> </xref:System.Data.DataRow> </xref:System.ComponentModel.IChangeTracking> </xref:System.Data.DataTable>"
  example:
  - "The following example adds columns of several data types to a <xref:System.Data.DataTable>, and then adds one row to the table.  \n  \n [!code-cs[Classic WebData DataColumn.DataType Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_4_1.cs)]\n [!code-vb[Classic WebData DataColumn.DataType Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_4_1.vb)]"
  syntax:
    content: public Type DataType { get; set; }
    return:
      type: System.Type
      description: "Oggetto <xref:System.Type>oggetto che rappresenta il tipo di dati della colonna.</xref:System.Type>"
  overload: System.Data.DataColumn.DataType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La colonna dispone già di dati archiviati."
  platform:
  - net462
- uid: System.Data.DataColumn.DateTimeMode
  id: DateTimeMode
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
  fullName: System.Data.DataColumn.DateTimeMode
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta il <xref uid=&quot;langword_csharp_DateTimeMode&quot; name=&quot;DateTimeMode&quot; href=&quot;&quot;> </xref> per la colonna."
  remarks: "La proprietà DateTimeMode non può essere modificata dopo l&quot;aggiungono di righe per un <xref:System.Data.DataColumn>, ad eccezione di modifica da <xref:System.Data.DataSetDateTime>e <xref:System.Data.DataSetDateTime>o viceversa.</xref:System.Data.DataSetDateTime> </xref:System.Data.DataSetDateTime> </xref:System.Data.DataColumn> La modifica da `UnspecifiedLocal` a `Unspecified` e viceversa è consentita in quanto la differenza tra queste due opzioni solo durante la serializzazione e non influisce sull&quot;archiviazione."
  syntax:
    content: public System.Data.DataSetDateTime DateTimeMode { get; set; }
    return:
      type: System.Data.DataSetDateTime
      description: "Il <xref href=&quot;System.Data.DataSetDateTime&quot;> </xref> per la colonna specificata."
  overload: System.Data.DataColumn.DateTimeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.DefaultValue
  id: DefaultValue
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
  fullName: System.Data.DataColumn.DefaultValue
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta il valore predefinito per la colonna durante la creazione di nuove righe."
  remarks: "Un valore predefinito è il valore assegnato alla colonna automaticamente quando un <xref:System.Data.DataRow>viene creato (ad esempio, la data e l&quot;ora di <xref:System.Data.DataRow>è stato creato.</xref:System.Data.DataRow> </xref:System.Data.DataRow>       Quando <xref:System.Data.DataColumn.AutoIncrement%2A>è impostata su true, non può esistere alcun valore predefinito.</xref:System.Data.DataColumn.AutoIncrement%2A>       È possibile creare una nuova riga utilizzando il <xref:System.Data.DataRow.ItemArray%2A>proprietà la <xref:System.Data.DataRow>classe e passando il metodo di una matrice di valori.</xref:System.Data.DataRow> </xref:System.Data.DataRow.ItemArray%2A> Si tratta di un potenziale problema per una colonna con un valore predefinito perché il relativo valore viene generato automaticamente. Utilizzare il <xref:System.Data.DataRow.ItemArray%2A>proprietà con una colonna, posizionare `null` nella posizione della colonna nella matrice.</xref:System.Data.DataRow.ItemArray%2A> Per ulteriori informazioni, vedere il <xref:System.Data.DataRow.ItemArray%2A>proprietà.</xref:System.Data.DataRow.ItemArray%2A>"
  example:
  - "The following example creates several <xref:System.Data.DataColumn> objects that have different data types, and sets appropriate default values to each column.  \n  \n [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_0_1.vb)]"
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "Un valore appropriato per la colonna <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*>"
  overload: System.Data.DataColumn.DefaultValue*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Quando si aggiunge una riga, il valore predefinito non è un&quot;istanza del tipo di dati della colonna."
  platform:
  - net462
- uid: System.Data.DataColumn.Expression
  id: Expression
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Expression
  nameWithType: DataColumn.Expression
  fullName: System.Data.DataColumn.Expression
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta l&quot;espressione utilizzata per filtrare le righe, calcolare i valori in una colonna o creare una colonna aggregata."
  remarks: "One use of the Expression property is to create calculated columns. For example, to calculate a tax value, the unit price is multiplied by a tax rate of a specific region. Because tax rates vary from region to region, it would be impossible to put a single tax rate in a column; instead, the value is calculated using the Expression property, as shown in the Visual Basic code in the following section:  \n  \n DataSet1.Tables(\"Products\").Columns(\"tax\").Expression = \"UnitPrice * 0.086\"  \n  \n A second use is to create an aggregate column. Similar to a calculated value, an aggregate performs an operation based on the complete set of rows in the <xref:System.Data.DataTable>. A simple example is to count the number of rows returned in the set. This is the method you would use to count the number of transactions completed by a particular salesperson, as shown in this Visual Basic code:  \n  \n```  \nDataSet1.Tables(\"Orders\").Columns(\"OrderCount\").Expression = \"Count(OrderID)\"  \n```  \n  \n## Expression Syntax  \n When you create an expression, use the <xref:System.Data.DataColumn.ColumnName%2A> property to refer to columns. For example, if the <xref:System.Data.DataColumn.ColumnName%2A> for one column is \"UnitPrice\", and another \"Quantity\", the expression would be as follows:  \n  \n \"UnitPrice * Quantity\"  \n  \n> [!NOTE]\n>  If a column is used in an expression, then the expression is said to have a dependency on that column. If a dependent column is renamed or removed, no exception is thrown. An exception will be thrown when the now-broken expression column is accessed.  \n  \n When you create an expression for a filter, enclose strings with single quotation marks:  \n  \n \"LastName = 'Jones'\"  \n  \n If a column name contains any non-alphanumeric characters or starts with a digit or matches (case-insensitively) any of the following reserved words, it requires special handling, as described in the following paragraphs.  \n  \n And  \n  \n Between  \n  \n Child  \n  \n False  \n  \n In  \n  \n Is  \n  \n Like  \n  \n Not  \n  \n Null  \n  \n Or  \n  \n Parent  \n  \n True  \n  \n If a column name satisfies one of the above conditions, it must be wrapped in either square brackets or the \"`\" (grave accent) quotes. For example, to use a column named \"Column#\" in an expression, you would write either \"[Column#]\":  \n  \n Total * [Column#]  \n  \n or \"\\`Column#`\":  \n  \n Total * \\`Column#`  \n  \n If the column name is enclosed in square brackets then any ']' and '\\\\' characters (but not any other characters) in it must be escaped by prepending them with the backslash (\"\\\\\") character. If the column name is enclosed in grave accent characters then it must not contain any grave accent characters in it. For example, a column named \"Column[]\\\\\" would be written:  \n  \n Total * [Column[\\\\]\\\\\\\\]  \n  \n or  \n  \n Total * \\`Column[]\\\\`  \n  \n## User-Defined Values  \n User-defined values may be used within expressions to be compared with column values. String values should be enclosed within single quotation marks (and each single quotation character in a string value has to be escaped by prepending it with another single quotation character). Date values should be enclosed within pound signs (#) or single quotes (') based on the data provider. Decimals and scientific notation are permissible for numeric values. For example:  \n  \n \"FirstName = 'John'\"  \n  \n \"Price <= 50.00\"  \n  \n \"Birthdate < #1/31/82#\"  \n  \n For columns that contain enumeration values, cast the value to an integer data type. For example:  \n  \n \"EnumColumn = 5\"  \n  \n## Parsing Literal Expressions  \n All literal expressions must be expressed in the invariant culture locale. When `DataSet` parses and converts literal expressions, it always uses the invariant culture, not the current culture.  \n  \n String literals are identified when there are single quotes surrounding the value. For example:  \n  \n 'John'  \n  \n `Boolean` literals are true and false; they are not quoted in expressions.  \n  \n `Integer` literals [+-]?[0-9]+ are treated as `System.Int32`, `System.Int64` or `System.Double`. `System.Double` can lose precision depending on how large the number is. For example, if the number in the literal is 2147483650, `DataSet` will first attempt to parse the number as an `Int32`. This will not succeed because the number is too large. In this case `DataSet` will parse the number as an `Int64`, which will succeed. If the literal was a number larger than the maximum value of an Int64, `DataSet` will parse the literal using `Double`.  \n  \n Real literals using scientific notation, such as 4.42372E-30, are parsed using `System.Double`.  \n  \n Real literals without scientific notation, but with a decimal point, are treated as `System.Decimal`. If the number exceeds the maximum or minimum values supported by `System.Decimal`, then it is parsed as a `System.Double`. For example:  \n  \n 142526.144524 will be converted to a `Decimal`.  \n  \n 345262.78036719560925667 will be treated as a `Double`.  \n  \n## Operators  \n Concatenation is allowed using Boolean AND, OR, and NOT operators. You can use parentheses to group clauses and force precedence. The AND operator has precedence over other operators. For example:  \n  \n (LastName = 'Smith' OR LastName = 'Jones') AND FirstName = 'John'  \n  \n When you create comparison expressions, the following operators are allowed:  \n  \n <  \n  \n \\>  \n  \n <=  \n  \n \\>=  \n  \n <>  \n  \n =  \n  \n IN  \n  \n LIKE  \n  \n The following arithmetic operators are also supported in expressions:  \n  \n \\+ (addition)  \n  \n \\- (subtraction)  \n  \n \\* (multiplication)  \n  \n / (division)  \n  \n % (modulus)  \n  \n## String Operators  \n To concatenate a string, use the + character. The value of the <xref:System.Data.DataSet.CaseSensitive%2A> property of the <xref:System.Data.DataSet> class determines whether string comparisons are case-sensitive. However, you can override that value with the <xref:System.Data.DataTable.CaseSensitive%2A> property of the <xref:System.Data.DataTable> class.  \n  \n## Wildcard Characters  \n Both the * and % can be used interchangeably for wildcard characters in a LIKE comparison. If the string in a LIKE clause contains a \\* or %, those characters should be enclosed in brackets ([]). If a bracket is in the clause, each bracket character should be enclosed in brackets (for example [[] or []]). A wildcard is allowed at the start and end of a pattern, or at the end of a pattern, or at the start of a pattern. For example:  \n  \n \"ItemName LIKE '*product\\*'\"  \n  \n \"ItemName LIKE '*product'\"  \n  \n \"ItemName LIKE 'product*'\"  \n  \n Wildcard characters are not allowed in the middle of a string. For example, 'te*xt' is not allowed.  \n  \n## Parent/Child Relation Referencing  \n A parent table may be referenced in an expression by prepending the column name with `Parent`. For example, the `Parent.Price` references the parent table's column named `Price`.  \n  \n When a child has more than one parent row, use Parent(RelationName).ColumnName. For example, the Parent(RelationName).Price references the parent table’s column named Price via the relation.  \n  \n A column in a child table may be referenced in an expression by prepending the column name with `Child`. However, because child relationships may return multiple rows, you must include the reference to the child column in an aggregate function. For example, `Sum(Child.Price)` would return the sum of the column named `Price` in the child table.  \n  \n If a table has more than one child, the syntax is: `Child(RelationName)`. For example, if a table has two child tables named `Customers` and `Orders`, and the <xref:System.Data.DataRelation> object is named `Customers2Orders`, the reference would be as follows:  \n  \n Avg(Child(Customers2Orders).Quantity)  \n  \n## Aggregates  \n The following aggregate types are supported:  \n  \n Sum (Sum)  \n  \n Avg (Average)  \n  \n Min (Minimum)  \n  \n Max (Maximum)  \n  \n Count (Count)  \n  \n StDev (Statistical standard deviation)  \n  \n Var (Statistical variance).  \n  \n Aggregates are ordinarily performed along relationships. Create an aggregate expression by using one of the functions listed earlier and a child table column as detailed in Parent/Child Relation Referencing that was discussed earlier. For example:  \n  \n Avg(Child.Price)  \n  \n Avg(Child(Orders2Details).Price)  \n  \n An aggregate can also be performed on a single table. For example, to create a summary of figures in a column named \"Price\":  \n  \n Sum(Price)  \n  \n> [!NOTE]\n>  If you use a single table to create an aggregate, there would be no group-by functionality. Instead, all rows would display the same value in the column.  \n  \n If a table has no rows, the aggregate functions will return `null`.  \n  \n Data types can always be determined by examining the <xref:System.Data.DataColumn.DataType%2A> property of a column. You can also convert data types using the Convert function, shown in the following section.  \n  \n An aggregate can only be applied to a single column and no other expressions can be used inside the aggregate.  \n  \n## Functions  \n The following functions are also supported:  \n  \n `CONVERT`  \n  \n|||  \n|-|-|  \n|Description|Converts particular expression to a specified .NET Framework Type.|  \n|Syntax|Convert(`expression`, `type`)|  \n|Arguments|`expression` -- The expression to convert.<br /><br /> `type` -- The .NET Framework type to which the value will be converted.|  \n  \n Example: myDataColumn.Expression=\"Convert(total, 'System.Int32')\"  \n  \n All conversions are valid with the following exceptions: `Boolean` can be coerced to and from `Byte`, `SByte`, `Int16`, `Int32`, `Int64`, `UInt16`, `UInt32`, `UInt64`, `String` and itself only. `Char` can be coerced to and from `Int32`, `UInt32`, `String`, and itself only. `DateTime` can be coerced to and from `String` and itself only. `TimeSpan` can be coerced to and from `String` and itself only.  \n  \n `LEN`  \n  \n|||  \n|-|-|  \n|Description|Gets the length of a string|  \n|Syntax|LEN(`expression`)|  \n|Arguments|`expression` -- The string to be evaluated.|  \n  \n Example: myDataColumn.Expression=\"Len(ItemName)\"  \n  \n `ISNULL`  \n  \n|||  \n|-|-|  \n|Description|Checks an expression and either returns the checked expression or a replacement value.|  \n|Syntax|ISNULL(`expression`, `replacementvalue`)|  \n|Arguments|`expression` -- The expression to check.<br /><br /> `replacementvalue` -- If expression is `null`, `replacementvalue` is returned.|  \n  \n Example: myDataColumn.Expression=\"IsNull(price, -1)\"  \n  \n `IIF`  \n  \n|||  \n|-|-|  \n|Description|Gets one of two values depending on the result of a logical expression.|  \n|Syntax|IIF(`expr`, `truepart`, `falsepart`)|  \n|Arguments|`expr` -- The expression to evaluate.<br /><br /> `truepart` -- The value to return if the expression is true.<br /><br /> `falsepart` -- The value to return if the expression is false.|  \n  \n Example: myDataColumn.Expression = \"IIF(total>1000, 'expensive', 'dear')  \n  \n `TRIM`  \n  \n|||  \n|-|-|  \n|Description|Removes all leading and trailing blank characters like \\r, \\n, \\t, ' '|  \n|Syntax|TRIM(`expression`)|  \n|Arguments|`expression` -- The expression to trim.|  \n  \n `SUBSTRING`  \n  \n|||  \n|-|-|  \n|Description|Gets a sub-string of a specified length, starting at a specified point in the string.|  \n|Syntax|SUBSTRING(`expression`, `start`, `length`)|  \n|Arguments|`expression` -- The source string for the substring.<br /><br /> `start` -- Integer that specifies where the substring starts.<br /><br /> `length` -- Integer that specifies the length of the substring.|  \n  \n Example: myDataColumn.Expression = \"SUBSTRING(phone, 7, 8)\"  \n  \n> [!NOTE]\n>  You can reset the Expression property by assigning it a null value or empty string. If a default value is set on the expression column, all previously filled rows are assigned the default value after the Expression property is reset."
  example:
  - "The following example creates three columns in a <xref:System.Data.DataTable>. The second and third columns contain expressions; the second calculates tax using a variable tax rate, and the third adds the result of the calculation to the value of the first column. The resulting table is displayed in a <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-cs[Classic WebData DataColumn.Expression Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_1_1.cs)]\n [!code-vb[Classic WebData DataColumn.Expression Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_1_1.vb)]"
  syntax:
    content: public string Expression { get; set; }
    return:
      type: System.String
      description: "Un&quot;espressione per calcolare il valore di una colonna o creare una colonna aggregata. Il tipo restituito di un&quot;espressione è determinato dal <xref:System.Data.DataColumn.DataType*>della colonna.</xref:System.Data.DataColumn.DataType*>"
  overload: System.Data.DataColumn.Expression*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <>*> or <>*> property is set to <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "Quando si utilizza la funzione CONVERT, l&quot;espressione restituisce una stringa, ma la stringa non contiene una rappresentazione che può essere convertita in parametro di tipo."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Quando si utilizza la funzione CONVERT, eseguire il cast richiesto non è possibile. Vedere la funzione di conversione nella sezione seguente per informazioni dettagliate sui cast possibili."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Quando si utilizza la funzione SUBSTRING, l&quot;argomento di avvio è compreso nell&quot;intervallo.       - Oppure - quando si utilizza la funzione SUBSTRING, l&quot;argomento length è compreso nell&quot;intervallo."
  - type: System.Exception
    commentId: T:System.Exception
    description: "Quando si utilizza la funzione LEN o la funzione TRIM, l&quot;espressione non restituisce una stringa. Incluse le espressioni che restituiscono <xref:System.Char>.</xref:System.Char>"
  platform:
  - net462
- uid: System.Data.DataColumn.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
  fullName: System.Data.DataColumn.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene la raccolta di informazioni utente personalizzata associate a un <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  remarks: "La proprietà ExtendedProperties consente di archiviare informazioni personalizzate con l&quot;oggetto. Ad esempio, è possibile archiviare un tempo quando i dati devono essere aggiornati.       Proprietà estese devono essere di tipo <xref:System.String>.</xref:System.String> Le proprietà che non sono di tipo <xref:System.String>non vengono mantenuti quando il <xref:System.Data.DataColumn>è scritto in formato XML.</xref:System.Data.DataColumn> </xref:System.String>"
  example:
  - "The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the ExtendedProperties property. The second example retrieves the custom property.  \n  \n [!code-cs[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_10_1.cs)]\n [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_10_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "Oggetto <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> di informazioni personalizzate."
  overload: System.Data.DataColumn.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.MaxLength
  id: MaxLength
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: MaxLength
  nameWithType: DataColumn.MaxLength
  fullName: System.Data.DataColumn.MaxLength
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta la lunghezza massima di una colonna di testo."
  remarks: "La proprietà MaxLength viene ignorata per le colonne non di testo. Oggetto <xref:System.ArgumentException>eccezione viene generata se si assegna MaxLength a una colonna non di tipo stringa.</xref:System.ArgumentException>"
  syntax:
    content: public int MaxLength { get; set; }
    return:
      type: System.Int32
      description: "La lunghezza massima della colonna in caratteri. Se la colonna non dispone di alcuna lunghezza massima, il valore è -1 (impostazione predefinita)."
  overload: System.Data.DataColumn.MaxLength*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Namespace
  id: Namespace
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Namespace
  nameWithType: DataColumn.Namespace
  fullName: System.Data.DataColumn.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta lo spazio dei nomi di <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  remarks: "La proprietà Namespace viene utilizzata durante la lettura e scrittura di un XML documento in un <xref:System.Data.DataTable>nel <xref:System.Data.DataSet>utilizzando il <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, o <xref:System.Data.DataSet.WriteXmlSchema%2A>metodi.</xref:System.Data.DataSet.WriteXmlSchema%2A> </xref:System.Data.DataSet.ReadXmlSchema%2A> </xref:System.Data.DataSet.WriteXml%2A> </xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable>       Lo spazio dei nomi di un documento XML viene utilizzato per definire l&quot;ambito di attributi ed elementi durante la lettura in un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> XML Ad esempio, un <xref:System.Data.DataSet>contiene uno schema letto da un documento con lo spazio dei nomi &quot;myCompany&quot; e viene effettuato un tentativo di leggere i dati (con il <xref:System.Data.DataSet.ReadXml%2A>metodo) da un documento con lo spazio dei nomi &quot;theirCompany&quot;.</xref:System.Data.DataSet.ReadXml%2A> </xref:System.Data.DataSet> Tutti i dati che non corrispondano allo schema esistente verranno ignorati."
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "Lo spazio dei nomi di <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  overload: System.Data.DataColumn.Namespace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Lo spazio dei nomi contiene già dei dati."
  platform:
  - net462
- uid: System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Questo membro supporta l&quot;infrastruttura .NET Framework e non deve essere utilizzato direttamente dal codice."
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "Riferimento ai parametri."
  overload: System.Data.DataColumn.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Ordinal
  id: Ordinal
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Ordinal
  nameWithType: DataColumn.Ordinal
  fullName: System.Data.DataColumn.Ordinal
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene la posizione della colonna (in base zero) il <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref> insieme."
  remarks: ''
  example:
  - "The following example returns the column name, ordinal, and data type of a column.  \n  \n [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_16_1.vb)]\n [!code-cs[Classic WebData DataColumn.Ordinal Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_16_1.cs)]"
  syntax:
    content: public int Ordinal { get; }
    return:
      type: System.Int32
      description: "La posizione della colonna. Restituisce -1 se la colonna non è un membro di una raccolta."
  overload: System.Data.DataColumn.Ordinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Prefix
  id: Prefix
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Prefix
  nameWithType: DataColumn.Prefix
  fullName: System.Data.DataColumn.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta un prefisso XML che rappresenta l&quot;alias lo spazio dei nomi di <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.Prefix%2A>è utilizzata in un documento XML per identificare gli elementi che appartengono allo spazio dei nomi per un <xref:System.Data.DataSet>oggetto (secondo l&quot;impostazione di <xref:System.Data.DataSet.Namespace%2A>proprietà).</xref:System.Data.DataSet.Namespace%2A> </xref:System.Data.DataSet> </xref:System.Data.DataTable.Prefix%2A>"
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "Il prefisso XML per il <xref href=&quot;System.Data.DataTable&quot;> </xref> dello spazio dei nomi."
  overload: System.Data.DataColumn.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataColumn.RaisePropertyChanging(String)
  fullName: System.Data.DataColumn.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Questo membro supporta l&quot;infrastruttura .NET Framework e non deve essere utilizzato direttamente dal codice."
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "Riferimento ai parametri."
  overload: System.Data.DataColumn.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ReadOnly
  id: ReadOnly
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
  fullName: System.Data.DataColumn.ReadOnly
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta un valore che indica se la colonna consente le modifiche non appena è stata aggiunta una riga alla tabella."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Data.DataColumn> and sets its ReadOnly property `true`.  \n  \n [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_12_1.vb)]\n [!code-cs[Classic WebData DataColumn.ReadOnly Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_12_1.cs)]"
  syntax:
    content: public bool ReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la colonna è di sola lettura; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.ReadOnly*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La proprietà è impostata su <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> su una colonna calcolata."
  platform:
  - net462
- uid: System.Data.DataColumn.SetOrdinal(System.Int32)
  id: SetOrdinal(System.Int32)
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: SetOrdinal(Int32)
  nameWithType: DataColumn.SetOrdinal(Int32)
  fullName: System.Data.DataColumn.SetOrdinal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Modifica il numero ordinale o la posizione del <xref href=&quot;System.Data.DataColumn&quot;> </xref> per l&quot;ordinale specificato o la posizione."
  remarks: "Modifica il numero ordinale o la posizione del <xref:System.Data.DataColumn>per l&quot;ordinale specificato o la posizione.</xref:System.Data.DataColumn> Se l&quot;ordinale è minore di 0 o maggiore del numero di colonne, ovvero 1 (oltre il numero ordinale dell&quot;ultima colonna) esistenti quindi un oggetto non valido <xref:System.ArgumentException>viene generata un&quot;eccezione.</xref:System.ArgumentException>       Quando si modifica l&quot;ordinale di una colonna, la colonna viene spostata nella nuova posizione nella raccolta di colonne. Tutte le colonne tra il numero ordinale precedente e nuovo verranno rinumerate per regolare numero ordinale di una colonna nuova."
  syntax:
    content: public void SetOrdinal (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "Il numero ordinale specificato."
  overload: System.Data.DataColumn.SetOrdinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Table
  id: Table
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Table
  nameWithType: DataColumn.Table
  fullName: System.Data.DataColumn.Table
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene il <xref href=&quot;System.Data.DataTable&quot;> </xref> a cui appartiene la colonna."
  remarks: ''
  example:
  - "The following example returns the parent table of a <xref:System.Data.DataColumn> through its Table property.  \n  \n [!code-vb[Classic WebData DataColumn.Table Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_6_1.vb)]\n [!code-cs[Classic WebData DataColumn.Table Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_6_1.cs)]"
  syntax:
    content: public System.Data.DataTable Table { get; }
    return:
      type: System.Data.DataTable
      description: "Il <xref href=&quot;System.Data.DataTable&quot;> </xref> che il <xref href=&quot;System.Data.DataColumn&quot;> </xref> appartiene."
  overload: System.Data.DataColumn.Table*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.ToString
  id: ToString
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: ToString()
  nameWithType: DataColumn.ToString()
  fullName: System.Data.DataColumn.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene il <xref:System.Data.DataColumn.Expression*>della colonna, se presente.</xref:System.Data.DataColumn.Expression*>"
  remarks: ''
  example:
  - "The following example uses the ToString property to return the default string of each member of a collection of <xref:System.Data.DataColumn> objects.  \n  \n [!code-vb[Classic WebData DataColumn.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datacolumn_1_1.vb)]\n [!code-cs[Classic WebData DataColumn.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datacolumn_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Il <> </> *> valore, se la proprietà è impostata; in caso contrario, il <> </> *> proprietà."
  overload: System.Data.DataColumn.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataColumn.Unique
  id: Unique
  parent: System.Data.DataColumn
  langs:
  - csharp
  name: Unique
  nameWithType: DataColumn.Unique
  fullName: System.Data.DataColumn.Unique
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta un valore che indica se i valori in ogni riga della colonna devono essere univoci."
  remarks: "Non appena questa proprietà viene modificata da false a true, verrà creato un vincolo univoco in questa colonna per assicurarsi che i valori siano univoci."
  example:
  - "The following example creates new <xref:System.Data.DataColumn>, sets its properties, and adds it to a table's columns collection.  \n  \n [!code-cs[Classic WebData DataColumn.Unique Example#1](~/add/codesnippet/csharp/p-system.data.datacolumn_3_1.cs)]\n [!code-vb[Classic WebData DataColumn.Unique Example#1](~/add/codesnippet/visualbasic/p-system.data.datacolumn_3_1.vb)]"
  syntax:
    content: public bool Unique { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il valore deve essere univoco. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataColumn.Unique*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La colonna è una colonna calcolata."
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Data.DataColumn.#ctor
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn()
  nameWithType: DataColumn.DataColumn()
  fullName: System.Data.DataColumn.DataColumn()
- uid: System.Data.DataColumn.#ctor(System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String)
  nameWithType: DataColumn.DataColumn(String)
  fullName: System.Data.DataColumn.DataColumn(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataColumn.#ctor(System.String,System.Type)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type)
  nameWithType: DataColumn.DataColumn(String,Type)
  fullName: System.Data.DataColumn.DataColumn(String,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type,String)
  nameWithType: DataColumn.DataColumn(String,Type,String)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String)
- uid: System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn(String,Type,String,MappingType)
  nameWithType: DataColumn.DataColumn(String,Type,String,MappingType)
  fullName: System.Data.DataColumn.DataColumn(String,Type,String,MappingType)
- uid: System.Data.MappingType
  parent: System.Data
  isExternal: false
  name: MappingType
  nameWithType: MappingType
  fullName: System.Data.MappingType
- uid: System.Data.DataColumn.AllowDBNull
  parent: System.Data.DataColumn
  isExternal: false
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
  fullName: System.Data.DataColumn.AllowDBNull
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataColumn.AutoIncrement
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
  fullName: System.Data.DataColumn.AutoIncrement
- uid: System.Data.DataColumn.AutoIncrementSeed
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
  fullName: System.Data.DataColumn.AutoIncrementSeed
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Data.DataColumn.AutoIncrementStep
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
  fullName: System.Data.DataColumn.AutoIncrementStep
- uid: System.Data.DataColumn.Caption
  parent: System.Data.DataColumn
  isExternal: false
  name: Caption
  nameWithType: DataColumn.Caption
  fullName: System.Data.DataColumn.Caption
- uid: System.Data.DataColumn.CheckNotAllowNull
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckNotAllowNull()
  nameWithType: DataColumn.CheckNotAllowNull()
  fullName: System.Data.DataColumn.CheckNotAllowNull()
- uid: System.Data.DataColumn.CheckUnique
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckUnique()
  nameWithType: DataColumn.CheckUnique()
  fullName: System.Data.DataColumn.CheckUnique()
- uid: System.Data.DataColumn.ColumnMapping
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
  fullName: System.Data.DataColumn.ColumnMapping
- uid: System.Data.DataColumn.ColumnName
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnName
  nameWithType: DataColumn.ColumnName
  fullName: System.Data.DataColumn.ColumnName
- uid: System.Data.DataColumn.DataType
  parent: System.Data.DataColumn
  isExternal: false
  name: DataType
  nameWithType: DataColumn.DataType
  fullName: System.Data.DataColumn.DataType
- uid: System.Data.DataColumn.DateTimeMode
  parent: System.Data.DataColumn
  isExternal: false
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
  fullName: System.Data.DataColumn.DateTimeMode
- uid: System.Data.DataSetDateTime
  parent: System.Data
  isExternal: false
  name: DataSetDateTime
  nameWithType: DataSetDateTime
  fullName: System.Data.DataSetDateTime
- uid: System.Data.DataColumn.DefaultValue
  parent: System.Data.DataColumn
  isExternal: false
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
  fullName: System.Data.DataColumn.DefaultValue
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataColumn.Expression
  parent: System.Data.DataColumn
  isExternal: false
  name: Expression
  nameWithType: DataColumn.Expression
  fullName: System.Data.DataColumn.Expression
- uid: System.Data.DataColumn.ExtendedProperties
  parent: System.Data.DataColumn
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
  fullName: System.Data.DataColumn.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataColumn.MaxLength
  parent: System.Data.DataColumn
  isExternal: false
  name: MaxLength
  nameWithType: DataColumn.MaxLength
  fullName: System.Data.DataColumn.MaxLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataColumn.Namespace
  parent: System.Data.DataColumn
  isExternal: false
  name: Namespace
  nameWithType: DataColumn.Namespace
  fullName: System.Data.DataColumn.Namespace
- uid: System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataColumn
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataColumn.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataColumn.Ordinal
  parent: System.Data.DataColumn
  isExternal: false
  name: Ordinal
  nameWithType: DataColumn.Ordinal
  fullName: System.Data.DataColumn.Ordinal
- uid: System.Data.DataColumn.Prefix
  parent: System.Data.DataColumn
  isExternal: false
  name: Prefix
  nameWithType: DataColumn.Prefix
  fullName: System.Data.DataColumn.Prefix
- uid: System.Data.DataColumn.RaisePropertyChanging(System.String)
  parent: System.Data.DataColumn
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataColumn.RaisePropertyChanging(String)
  fullName: System.Data.DataColumn.RaisePropertyChanging(String)
- uid: System.Data.DataColumn.ReadOnly
  parent: System.Data.DataColumn
  isExternal: false
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
  fullName: System.Data.DataColumn.ReadOnly
- uid: System.Data.DataColumn.SetOrdinal(System.Int32)
  parent: System.Data.DataColumn
  isExternal: false
  name: SetOrdinal(Int32)
  nameWithType: DataColumn.SetOrdinal(Int32)
  fullName: System.Data.DataColumn.SetOrdinal(Int32)
- uid: System.Data.DataColumn.Table
  parent: System.Data.DataColumn
  isExternal: false
  name: Table
  nameWithType: DataColumn.Table
  fullName: System.Data.DataColumn.Table
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataColumn.ToString
  parent: System.Data.DataColumn
  isExternal: false
  name: ToString()
  nameWithType: DataColumn.ToString()
  fullName: System.Data.DataColumn.ToString()
- uid: System.Data.DataColumn.Unique
  parent: System.Data.DataColumn
  isExternal: false
  name: Unique
  nameWithType: DataColumn.Unique
  fullName: System.Data.DataColumn.Unique
- uid: System.Data.DataColumn.#ctor*
  parent: System.Data.DataColumn
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn.DataColumn
- uid: System.Data.DataColumn.AllowDBNull*
  parent: System.Data.DataColumn
  isExternal: false
  name: AllowDBNull
  nameWithType: DataColumn.AllowDBNull
- uid: System.Data.DataColumn.AutoIncrement*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrement
  nameWithType: DataColumn.AutoIncrement
- uid: System.Data.DataColumn.AutoIncrementSeed*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementSeed
  nameWithType: DataColumn.AutoIncrementSeed
- uid: System.Data.DataColumn.AutoIncrementStep*
  parent: System.Data.DataColumn
  isExternal: false
  name: AutoIncrementStep
  nameWithType: DataColumn.AutoIncrementStep
- uid: System.Data.DataColumn.Caption*
  parent: System.Data.DataColumn
  isExternal: false
  name: Caption
  nameWithType: DataColumn.Caption
- uid: System.Data.DataColumn.CheckNotAllowNull*
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckNotAllowNull
  nameWithType: DataColumn.CheckNotAllowNull
- uid: System.Data.DataColumn.CheckUnique*
  parent: System.Data.DataColumn
  isExternal: false
  name: CheckUnique
  nameWithType: DataColumn.CheckUnique
- uid: System.Data.DataColumn.ColumnMapping*
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnMapping
  nameWithType: DataColumn.ColumnMapping
- uid: System.Data.DataColumn.ColumnName*
  parent: System.Data.DataColumn
  isExternal: false
  name: ColumnName
  nameWithType: DataColumn.ColumnName
- uid: System.Data.DataColumn.DataType*
  parent: System.Data.DataColumn
  isExternal: false
  name: DataType
  nameWithType: DataColumn.DataType
- uid: System.Data.DataColumn.DateTimeMode*
  parent: System.Data.DataColumn
  isExternal: false
  name: DateTimeMode
  nameWithType: DataColumn.DateTimeMode
- uid: System.Data.DataColumn.DefaultValue*
  parent: System.Data.DataColumn
  isExternal: false
  name: DefaultValue
  nameWithType: DataColumn.DefaultValue
- uid: System.Data.DataColumn.Expression*
  parent: System.Data.DataColumn
  isExternal: false
  name: Expression
  nameWithType: DataColumn.Expression
- uid: System.Data.DataColumn.ExtendedProperties*
  parent: System.Data.DataColumn
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataColumn.ExtendedProperties
- uid: System.Data.DataColumn.MaxLength*
  parent: System.Data.DataColumn
  isExternal: false
  name: MaxLength
  nameWithType: DataColumn.MaxLength
- uid: System.Data.DataColumn.Namespace*
  parent: System.Data.DataColumn
  isExternal: false
  name: Namespace
  nameWithType: DataColumn.Namespace
- uid: System.Data.DataColumn.OnPropertyChanging*
  parent: System.Data.DataColumn
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataColumn.OnPropertyChanging
- uid: System.Data.DataColumn.Ordinal*
  parent: System.Data.DataColumn
  isExternal: false
  name: Ordinal
  nameWithType: DataColumn.Ordinal
- uid: System.Data.DataColumn.Prefix*
  parent: System.Data.DataColumn
  isExternal: false
  name: Prefix
  nameWithType: DataColumn.Prefix
- uid: System.Data.DataColumn.RaisePropertyChanging*
  parent: System.Data.DataColumn
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataColumn.RaisePropertyChanging
- uid: System.Data.DataColumn.ReadOnly*
  parent: System.Data.DataColumn
  isExternal: false
  name: ReadOnly
  nameWithType: DataColumn.ReadOnly
- uid: System.Data.DataColumn.SetOrdinal*
  parent: System.Data.DataColumn
  isExternal: false
  name: SetOrdinal
  nameWithType: DataColumn.SetOrdinal
- uid: System.Data.DataColumn.Table*
  parent: System.Data.DataColumn
  isExternal: false
  name: Table
  nameWithType: DataColumn.Table
- uid: System.Data.DataColumn.ToString*
  parent: System.Data.DataColumn
  isExternal: false
  name: ToString
  nameWithType: DataColumn.ToString
- uid: System.Data.DataColumn.Unique*
  parent: System.Data.DataColumn
  isExternal: false
  name: Unique
  nameWithType: DataColumn.Unique
