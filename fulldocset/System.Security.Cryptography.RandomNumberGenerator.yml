### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RandomNumberGenerator
  id: RandomNumberGenerator
  children:
  - System.Security.Cryptography.RandomNumberGenerator.#ctor
  - System.Security.Cryptography.RandomNumberGenerator.Create
  - System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  - System.Security.Cryptography.RandomNumberGenerator.Dispose
  - System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  langs:
  - csharp
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
  type: Class
  summary: "Rappresenta la classe astratta dalla quale derivano tutte le implementazioni del servizio di crittografia generatori di numeri casuali."
  remarks: "I generatori di numeri casuali di crittografia creano valori casuali crittograficamente sicuri.       Il codice dell&quot;applicazione non utilizza direttamente la classe. Questa classe astratta viene fornita come classe base per tutti i generatori di numeri casuali crittografia.       Per un&quot;implementazione di un generatore di numeri casuali di crittografia, utilizzare la classe derivata <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.</xref:System.Security.Cryptography.RNGCryptoServiceProvider>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class RandomNumberGenerator : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: RandomNumberGenerator()
  nameWithType: RandomNumberGenerator.RandomNumberGenerator()
  fullName: System.Security.Cryptography.RandomNumberGenerator.RandomNumberGenerator()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza della <xref href=&quot;System.Security.Cryptography.RandomNumberGenerator&quot;> </xref>."
  remarks: "È possibile creare un&quot;istanza di una classe astratta. Il codice dell&quot;applicazione verrà creata una nuova istanza di una classe derivata. Per un&quot;implementazione di un generatore di numeri casuali di crittografia, utilizzare la classe derivata <xref:System.Security.Cryptography.RNGCryptoServiceProvider>.</xref:System.Security.Cryptography.RNGCryptoServiceProvider>"
  syntax:
    content: protected RandomNumberGenerator ();
    parameters: []
  overload: System.Security.Cryptography.RandomNumberGenerator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Create
  id: Create
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Create()
  nameWithType: RandomNumberGenerator.Create()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, crea un&quot;istanza dell&quot;implementazione predefinita di un generatore di numeri casuali di crittografia che può essere utilizzato per generare dati casuali."
  syntax:
    content: public static System.Security.Cryptography.RandomNumberGenerator Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: "Una nuova istanza di un generatore di numeri casuali di crittografia."
  overload: System.Security.Cryptography.RandomNumberGenerator.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Create(String)
  nameWithType: RandomNumberGenerator.Create(String)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, crea un&quot;istanza dell&quot;implementazione specificata di un generatore di numeri casuali di crittografia."
  syntax:
    content: public static System.Security.Cryptography.RandomNumberGenerator Create (string rngName);
    parameters:
    - id: rngName
      type: System.String
      description: "Il nome dell&quot;implementazione generatore numeri casuali da usare."
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: "Una nuova istanza di un generatore di numeri casuali di crittografia."
  overload: System.Security.Cryptography.RandomNumberGenerator.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose
  id: Dispose
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: RandomNumberGenerator.Dispose()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, rilascia tutte le risorse usate dall&quot;istanza corrente del <xref href=&quot;System.Security.Cryptography.RandomNumberGenerator&quot;> </xref> classe."
  remarks: "Chiamare `Dispose` quando si è terminato di utilizzare <xref:System.Security.Cryptography.RandomNumberGenerator>.</xref:System.Security.Cryptography.RandomNumberGenerator> Il `Dispose` metodo lascia la <xref:System.Security.Cryptography.RandomNumberGenerator>in uno stato inutilizzabile.</xref:System.Security.Cryptography.RandomNumberGenerator> Dopo la chiamata `Dispose`, è necessario rilasciare tutti i riferimenti al <xref:System.Security.Cryptography.RandomNumberGenerator>in modo che il garbage collector può recuperare la memoria che di <xref:System.Security.Cryptography.RandomNumberGenerator>occupata.</xref:System.Security.Cryptography.RandomNumberGenerator> </xref:System.Security.Cryptography.RandomNumberGenerator>       Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md) e [implementazione di un metodo Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Chiamare sempre `Dispose` prima di rilasciare l&quot;ultimo riferimento a <xref:System.Security.Cryptography.RandomNumberGenerator>.</xref:System.Security.Cryptography.RandomNumberGenerator> In caso contrario, le risorse non vengono liberate finché il garbage collector chiama la <xref:System.Security.Cryptography.RandomNumberGenerator>dell&quot;oggetto `Finalize` metodo.</xref:System.Security.Cryptography.RandomNumberGenerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: RandomNumberGenerator.Dispose(Boolean)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, rilascia le risorse non gestite usate dal <xref href=&quot;System.Security.Cryptography.RandomNumberGenerator&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico `Dispose()` (metodo) e `Finalize` metodo. `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. `Finalize`richiama `Dispose` con `disposing` impostato su `false`.       Quando il `disposing` parametro `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Security.Cryptography.RandomNumberGenerator>riferimenti.</xref:System.Security.Cryptography.RandomNumberGenerator> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  id: GetBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, riempie una matrice di byte con una sequenza di valori casuali crittograficamente sicura."
  remarks: "La lunghezza della matrice di byte determina il numero di byte caso generato."
  example:
  - "The following example creates a random sequence 100 bytes long and stores it in `random`.  \n  \n [!code-cs[Classic RandomNumberGenerator.GetBytes Example#1](~/add/codesnippet/csharp/m-system.security.crypto_63_1.cs)]\n [!code-cpp[Classic RandomNumberGenerator.GetBytes Example#1](~/add/codesnippet/cpp/m-system.security.crypto_63_1.cpp)]\n [!code-vb[Classic RandomNumberGenerator.GetBytes Example#1](~/add/codesnippet/visualbasic/m-system.security.crypto_63_1.vb)]"
  syntax:
    content: public abstract void GetBytes (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Matrice da riempire con byte casuali resistenti."
  overload: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetBytes(Byte[],Int32,Int32)
  nameWithType: RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Riempie la matrice di byte specificata con una sequenza di valori casuali crittograficamente sicura."
  syntax:
    content: public virtual void GetBytes (byte[] data, int offset, int count);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Matrice da riempire con byte casuali resistenti."
    - id: offset
      type: System.Int32
      description: "Indice della matrice da cui iniziare l&quot;operazione di riempimento."
    - id: count
      type: System.Int32
      description: "Il numero di byte da riempire."
  overload: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>o <code>count</code> è minore di 0"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>Oltre a <code>count</code> supera la lunghezza di <code>data</code>."
  platform:
  - net462
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  id: GetNonZeroBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  name: GetNonZeroBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetNonZeroBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, riempie una matrice di byte con una sequenza casuale crittograficamente complessa di valori diversi da zero."
  remarks: "La lunghezza della matrice di byte determina il numero di byte caso generato."
  example:
  - "The following example creates a random sequence of 100 nonzero bytes and stores it in `random`.  \n  \n [!code-cpp[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/cpp/cf0179cb-fbea-47fb-bad6-_1.cpp)]\n [!code-cs[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/csharp/cf0179cb-fbea-47fb-bad6-_1.cs)]\n [!code-vb[Classic RandomNumberGenerator.GetNonZeroBytes Example#1](~/add/codesnippet/visualbasic/cf0179cb-fbea-47fb-bad6-_1.vb)]"
  syntax:
    content: public virtual void GetNonZeroBytes (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Matrice da riempire con byte diverso da zero casuali resistenti."
  overload: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: RandomNumberGenerator()
  nameWithType: RandomNumberGenerator.RandomNumberGenerator()
  fullName: System.Security.Cryptography.RandomNumberGenerator.RandomNumberGenerator()
- uid: System.Security.Cryptography.RandomNumberGenerator.Create
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create()
  nameWithType: RandomNumberGenerator.Create()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create()
- uid: System.Security.Cryptography.RandomNumberGenerator
  parent: System.Security.Cryptography
  isExternal: false
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
- uid: System.Security.Cryptography.RandomNumberGenerator.Create(System.String)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create(String)
  nameWithType: RandomNumberGenerator.Create(String)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose()
  nameWithType: RandomNumberGenerator.Dispose()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose()
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: RandomNumberGenerator.Dispose(Boolean)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes(Byte[],Int32,Int32)
  nameWithType: RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetNonZeroBytes(Byte[])
  nameWithType: RandomNumberGenerator.GetNonZeroBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(Byte[])
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator.RandomNumberGenerator
- uid: System.Security.Cryptography.RandomNumberGenerator.Create*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Create
  nameWithType: RandomNumberGenerator.Create
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: Dispose
  nameWithType: RandomNumberGenerator.Dispose
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetBytes
  nameWithType: RandomNumberGenerator.GetBytes
- uid: System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes*
  parent: System.Security.Cryptography.RandomNumberGenerator
  isExternal: false
  name: GetNonZeroBytes
  nameWithType: RandomNumberGenerator.GetNonZeroBytes
