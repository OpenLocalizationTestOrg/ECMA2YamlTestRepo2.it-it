### YamlMime:ManagedReference
items:
- uid: System.Runtime.Caching.MemoryCache
  id: MemoryCache
  children:
  - System.Runtime.Caching.MemoryCache.#ctor(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Runtime.Caching.MemoryCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  - System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  - System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)
  - System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  - System.Runtime.Caching.MemoryCache.CacheMemoryLimit
  - System.Runtime.Caching.MemoryCache.Contains(System.String,System.String)
  - System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)
  - System.Runtime.Caching.MemoryCache.Default
  - System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities
  - System.Runtime.Caching.MemoryCache.Dispose
  - System.Runtime.Caching.MemoryCache.Get(System.String,System.String)
  - System.Runtime.Caching.MemoryCache.GetCacheItem(System.String,System.String)
  - System.Runtime.Caching.MemoryCache.GetCount(System.String)
  - System.Runtime.Caching.MemoryCache.GetEnumerator
  - System.Runtime.Caching.MemoryCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)
  - System.Runtime.Caching.MemoryCache.Item(System.String)
  - System.Runtime.Caching.MemoryCache.Name
  - System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit
  - System.Runtime.Caching.MemoryCache.PollingInterval
  - System.Runtime.Caching.MemoryCache.Remove(System.String,System.String)
  - System.Runtime.Caching.MemoryCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  - System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)
  - System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  - System.Runtime.Caching.MemoryCache.System#Collections#IEnumerable#GetEnumerator
  - System.Runtime.Caching.MemoryCache.Trim(System.Int32)
  langs:
  - csharp
  name: "MemoryCache"
  nameWithType: MemoryCache
  fullName: System.Runtime.Caching.MemoryCache
  type: Class
  summary: Represents the type that implements an in-memory cache.
  remarks: "The MemoryCache class is a concrete implementation of the abstract <xref:System.Runtime.Caching.ObjectCache> class.  \n  \n> [!NOTE]\n>  The MemoryCache class is similar to the ASP.NET <xref:System.Web.Caching.Cache> class. The MemoryCache class has many properties and methods for accessing the cache that will be familiar to you if you have used the ASP.NET <xref:System.Web.Caching.Cache> class. The main differences between the <xref:System.Web.Caching.Cache> and MemoryCache classes are that the MemoryCache class has been changed to make it usable by [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] applications that are not ASP.NET applications. For example, the MemoryCache class has no dependencies on the `System.Web` assembly. Another difference is that you can create multiple instances of the MemoryCache class for use in the same application and in the same <xref:System.AppDomain> instance.  \n  \n The MemoryCache class does not allow `null` as a value in the cache. Any attempt to add or change a cache entry with a value of `null` will fail.  \n  \n The MemoryCache type does not implement *cache regions*. Therefore, when you call MemoryCache methods that implement base methods that contain a parameter for regions, do not pass a value for the parameter. The methods that use the region parameter all supply a default `null` value. For example, the <xref:System.Runtime.Caching.MemoryCache.AddOrGetExisting%2A?displayProperty=fullName> method overload has a `regionName` parameter whose default value is `null`."
  example:
  - "The following example declares a reference to the default memory cache instance. The cache entry uses a <xref:System.Runtime.Caching.CacheItemPolicy> object to provide eviction and expiration details for the cache entry. It also uses a <xref:System.Runtime.Caching.ChangeMonitor> object to monitor the state of the source data (which is a file) on the file system.  \n  \n```vb#  \nPrivate Sub btnGet_Click(ByVal sender As Object, ByVal e As EventArgs)   \n    Dim cache As ObjectCache = MemoryCache.[Default]   \n    Dim fileContents As String = TryCast(cache(\"filecontents\"), String)   \n  \n    If fileContents Is Nothing Then   \n        Dim policy As New CacheItemPolicy()   \n        Dim filePaths As New List(Of String)()   \n        filePaths.Add(\"c:\\cache\\example.txt\")   \n  \n        policy.ChangeMonitors.Add(New HostFileChangeMonitor(filePaths))   \n  \n        ' Fetch the file contents.  \n        fileContents = File.ReadAllText(\"c:\\cache\\example.txt\")   \n  \n        cache.[Set](\"filecontents\", fileContents, policy)   \n    End If   \n  \n    Label1.Text = fileContents  \nEnd Sub  \n```  \n  \n```c#  \nprivate void btnGet_Click(object sender, EventArgs e)  \n{  \n    ObjectCache cache = MemoryCache.Default;  \n    string fileContents = cache[\"filecontents\"] as string;  \n  \n    if (fileContents == null)  \n    {  \n        CacheItemPolicy policy = new CacheItemPolicy();  \n  \n        List<string> filePaths = new List<string>();  \n        filePaths.Add(\"c:\\\\cache\\\\example.txt\");  \n  \n        policy.ChangeMonitors.Add(new   \n        HostFileChangeMonitor(filePaths));  \n  \n        // Fetch the file contents.  \n        fileContents =   \n            File.ReadAllText(\"c:\\\\cache\\\\example.txt\");  \n  \n        cache.Set(\"filecontents\", fileContents, policy);  \n    }  \n  \n    Label1.Text = fileContents;  \n}  \n```"
  syntax:
    content: 'public class MemoryCache : System.Runtime.Caching.ObjectCache, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.Caching.ObjectCache
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.DateTimeOffset,System.String)
  - System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  - System.Runtime.Caching.ObjectCache.GetValues(System.String,System.String[])
  - System.Runtime.Caching.ObjectCache.Host
  - System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration
  - System.Runtime.Caching.ObjectCache.NoSlidingExpiration
  - System.Runtime.Caching.ObjectCache.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.#ctor(System.String,System.Collections.Specialized.NameValueCollection)
  id: '#ctor(System.String,System.Collections.Specialized.NameValueCollection)'
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "MemoryCache(String,NameValueCollection)"
  nameWithType: MemoryCache.MemoryCache(String,NameValueCollection)
  fullName: System.Runtime.Caching.MemoryCache.MemoryCache(String,NameValueCollection)
  type: Constructor
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Initializes a new instance of the <see cref="T:System.Runtime.Caching.MemoryCache"></see> class.
  remarks: "When the <xref:System.Runtime.Caching.MemoryCache> class is initialized, it checks for configuration entries that might have been overridden by using the optional `config` parameter in the constructor. You can pass the following parameters in the `config` parameter. All values can be passed as integers.  \n  \n-   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.CacheMemoryLimitMegabytes%2A>  \n  \n-   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PhysicalMemoryLimitPercentage%2A>  \n  \n-   <xref:System.Runtime.Caching.Configuration.MemoryCacheElement.PollingInterval%2A>  \n  \n When this constructor is invoked, configuration settings are first retrieved from application configuration files. If no configuration entries exist in the application configuration file, only the settings provided in `config` are applied. If the configuration entries in the application configuration exist, and if information is also passed in `config`, the information in the `config` overrides the information that is read from the configuration file.  \n  \n The name value that is assigned to a cache instance is used in two ways:  \n  \n-   To help you keep track of multiple cache instances when more than one instance exists.  \n  \n-   To reference settings in the configuration file when the <xref:System.Runtime.Caching.MemoryCache> instance is initialized.  \n  \n    > [!NOTE]\n    >  There is no mechanism to enforce unique names for cache instances. Therefore, it is possible to have multiple cache instances with the same name.  \n  \n    > [!CAUTION]\n    >  Do not create <xref:System.Runtime.Caching.MemoryCache> instances unless it is required. If you create cache instances in client and Web applications, the <xref:System.Runtime.Caching.MemoryCache> instances should be created early in the application life cycle. You must create only the number of cache instances that will be used in your application, and store references to the cache instances in variables that can be accessed globally. For example, in ASP.NET applications, you can store the references in application state. If you create only a single cache instance in your application, use the default cache and get a reference to it from the <xref:System.Runtime.Caching.MemoryCache.Default%2A> property when you need to access the cache."
  syntax:
    content: public MemoryCache (string name, System.Collections.Specialized.NameValueCollection config = null);
    parameters:
    - id: name
      type: System.String
      description: "The name to use to look up configuration information.       `Note` It is not required for configuration information to exist for every name.       If a matching configuration entry exists, the configuration information is used to configure the  instance. If a matching configuration entry does not exist, the name can be accessed through the <xref:System.Runtime.Caching.MemoryCache.Name%2A> property, because the specified name is associated with the  instance. For information about memory cache configuration, see ."
    - id: config
      type: System.Collections.Specialized.NameValueCollection
      description: "A collection of name/value pairs of configuration information to use for configuring the cache."
  overload: System.Runtime.Caching.MemoryCache.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    name is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A name or value in the config parameter could not be parsed."
  - type: System.Configuration.ConfigurationException
    commentId: T:System.Configuration.ConfigurationException
    description: "A value in the config collection is invalid."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  id: Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Add(CacheItem,CacheItemPolicy)"
  nameWithType: MemoryCache.Add(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.MemoryCache.Add(CacheItem,CacheItemPolicy)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Inserts a cache entry into the cache as a <see cref="T:System.Runtime.Caching.CacheItem"></see> instance, and adds details about how the entry should be evicted.
  remarks: >-
    > [!WARNING]

    >  The <xref:System.Runtime.Caching.ObjectCache.Add%2A> and <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads do not support the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property. Therefore, to set the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property for a cache entry, use the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads instead.
  syntax:
    content: public override bool Add (System.Runtime.Caching.CacheItem item, System.Runtime.Caching.CacheItemPolicy policy);
    parameters:
    - id: item
      type: System.Runtime.Caching.CacheItem
      description: "The object to add."
    - id: policy
      type: System.Runtime.Caching.CacheItemPolicy
      description: "An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.Add*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  id: AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "AddOrGetExisting(CacheItem,CacheItemPolicy)"
  nameWithType: MemoryCache.AddOrGetExisting(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(CacheItem,CacheItemPolicy)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Adds a cache entry into the cache using the specified <see cref="T:System.Runtime.Caching.CacheItem"></see> instance and details about how to evict the entry.
  remarks: "The `item` parameter supplies the key and the value that is used by the method. If the cache has a cache entry with the same key as the key of the `item` parameter, the method returns the existing entry as a <xref:System.Runtime.Caching.CacheItem> instance. If there is no existing cache entry, the method creates a new one by using the key and value supplied by the `item` parameter, and with the eviction details specified by `policy`.  \n  \n> [!WARNING]\n>  The <xref:System.Runtime.Caching.ObjectCache.Add%2A> and <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads do not support the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property. Therefore, to set the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property for a cache entry, use the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads instead."
  syntax:
    content: public override System.Runtime.Caching.CacheItem AddOrGetExisting (System.Runtime.Caching.CacheItem item, System.Runtime.Caching.CacheItemPolicy policy);
    parameters:
    - id: item
      type: System.Runtime.Caching.CacheItem
      description: "The object to add."
    - id: policy
      type: System.Runtime.Caching.CacheItemPolicy
      description: "An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration."
    return:
      type: System.Runtime.Caching.CacheItem
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.AddOrGetExisting*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref:System.Runtime.Caching.CacheItem.Value%2A> property is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Both the absolute and sliding expiration values for the  object are set to values other than the defaults of  and  fields. The  class cannot set expiration policy based on a combination of an absolute expiration and a sliding expiration. Only one expiration setting can be explicitly set when you use the  instance. The other expiration setting must be set to  field or  field."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> property is set to a value less than <xref:System.TimeSpan.Zero>.       -or-       The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> property is set to a value greater than one year.       -or-       The <xref:System.Runtime.Caching.CacheItemPolicy.Priority%2A> property is not a value of the  enumeration."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)
  id: AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "AddOrGetExisting(String,Object,DateTimeOffset,String)"
  nameWithType: MemoryCache.AddOrGetExisting(String,Object,DateTimeOffset,String)
  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(String,Object,DateTimeOffset,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Adds a cache entry into the cache using the specified key and a value and an absolute expiration value.
  remarks: "If the cache does not have a cache entry whose key matches the `key` parameter, a new cache entry is created, and the AddOrGetExisting method overload returns `null`. If a matching cache entry exists, the existing entry is returned.  \n  \n> [!WARNING]\n>  The <xref:System.Runtime.Caching.ObjectCache.Add%2A> and <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads do not support the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property. Therefore, to set the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property for a cache entry, use the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads instead."
  syntax:
    content: public override object AddOrGetExisting (string key, object value, DateTimeOffset absoluteExpiration, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "A unique identifier for the cache entry to add."
    - id: value
      type: System.Object
      description: "The data for the cache entry."
    - id: absoluteExpiration
      type: System.DateTimeOffset
      description: "The fixed date and time at which the cache entry will expire."
    - id: regionName
      type: System.String
      description: "A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is  by default, because the  class does not implement regions."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.AddOrGetExisting*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    value is not ."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    regionName is not ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'Both the absolute and sliding expiration values for the  object are set to values other than the defaults of  and  fields. The  class cannot set expiration policy based on a combination of an absolute expiration and a sliding expiration. Only one expiration setting can be explicitly set when you use the  instance. The other expiration setting must be set to  or '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> property is set to a value less than <xref:System.TimeSpan.Zero>.       -or-       The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> property is set to a value greater than one year.       -or-       The <xref:System.Runtime.Caching.CacheItemPolicy.Priority%2A> property is not a value of the  enumeration."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  id: AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "AddOrGetExisting(String,Object,CacheItemPolicy,String)"
  nameWithType: MemoryCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)
  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Inserts a cache entry into the cache using the specified key and value and the specified details for how it is to be evicted.
  remarks: >-
    > [!WARNING]

    >  The <xref:System.Runtime.Caching.ObjectCache.Add%2A> and <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads do not support the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property. Therefore, to set the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property for a cache entry, use the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads instead.
  syntax:
    content: public override object AddOrGetExisting (string key, object value, System.Runtime.Caching.CacheItemPolicy policy, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "A unique identifier for the cache entry to add or get."
    - id: value
      type: System.Object
      description: "The data for the cache entry."
    - id: policy
      type: System.Runtime.Caching.CacheItemPolicy
      description: "An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration."
    - id: regionName
      type: System.String
      description: "A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. By default, this parameter is , because the  class does not implement regions."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.AddOrGetExisting*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    value is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Both the absolute and sliding expiration values of  object are set to values other than the defaults of  and . The  class cannot set expiration policy based on a combination of both an absolute and a sliding expiration. Only one expiration setting can be explicitly set when you use the  class. The other setting must be set to  or .       -or-       Both the removal callback and the update callback have been specified for . The  only supports using one type of callback per cache entry."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> property is set to a value less than <xref:System.TimeSpan.Zero>.       -or-       The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> has been set to a value greater than one year.       -or-       The <xref:System.Runtime.Caching.CacheItemPolicy.Priority%2A> property is not a value of the  enumeration."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.CacheMemoryLimit
  id: CacheMemoryLimit
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "CacheMemoryLimit"
  nameWithType: MemoryCache.CacheMemoryLimit
  fullName: System.Runtime.Caching.MemoryCache.CacheMemoryLimit
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets the amount of memory on the computer, in bytes, that can be used by the cache.
  remarks: "If the current instance of the cache exceeds the limit on memory set by the CacheMemoryLimit property, the cache implementation removes cache entries. Each cache instance in the application can use the amount of memory that is specified by the CacheMemoryLimit property.  \n  \n The settings for the CacheMemoryLimit property can be specified in the application configuration file. Alternatively, they can be passed in the constructor when the <xref:System.Runtime.Caching.MemoryCache> class is initialized. For more information about how to configure this property, see [\\<namedCaches> Element (Cache Settings)](../Topic/%3CnamedCaches%3E%20Element%20\\(Cache%20Settings\\).md). For more information about how to set this value when the <xref:System.Runtime.Caching.MemoryCache> class is being initialized, see the <xref:System.Runtime.Caching.MemoryCache.%23ctor%2A> method.  \n  \n <xref:System.Runtime.Caching.MemoryCache> does not instantly enforce CacheMemoryLimit each time a new item is added to a <xref:System.Runtime.Caching.MemoryCache> instance. The internal heuristics which evicts extra items from the <xref:System.Runtime.Caching.MemoryCache> does it gradually and takes into account information from the garbage collector (see [Garbage Collection](../Topic/Garbage%20Collection.md)) and other factors such as current cache size and overall system memory pressure. Therefore even though the <xref:System.Runtime.Caching.MemoryCache> tries to keep the cache size within the configured CacheMemoryLimit it is possible to temporarily exceed the limit by adding cache items at a very high rate."
  syntax:
    content: public long CacheMemoryLimit { get; }
    return:
      type: System.Int64
      description: "The amount of memory in bytes."
  overload: System.Runtime.Caching.MemoryCache.CacheMemoryLimit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Contains(System.String,System.String)
  id: Contains(System.String,System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Contains(String,String)"
  nameWithType: MemoryCache.Contains(String,String)
  fullName: System.Runtime.Caching.MemoryCache.Contains(String,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Determines whether a cache entry exists in the cache.
  syntax:
    content: public override bool Contains (string key, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "A unique identifier for the cache entry to search for."
    - id: regionName
      type: System.String
      description: "A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is  by default, because the  class does not implement regions."
    return:
      type: System.Boolean
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    key is ."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    regionName is not ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)
  id: CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "CreateCacheEntryChangeMonitor(IEnumerable<String>,String)"
  nameWithType: MemoryCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)
  fullName: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Creates a <see cref="T:System.Runtime.Caching.CacheEntryChangeMonitor"></see> object that can trigger events in response to changes to specified cache entries.
  remarks: "The CreateCacheEntryChangeMonitor method creates a <xref:System.Runtime.Caching.CacheEntryChangeMonitor> instance. This specialized change monitor is used to monitor the cache entries that are specified in the `keys` collection and to trigger events when the entries change.  \n  \n A monitored entry is considered to have changed for any of the following reasons:  \n  \n-   The key does not exist at the time of the call to the CreateCacheEntryChangeMonitor method. In that case, the resulting <xref:System.Runtime.Caching.CacheEntryChangeMonitor> instance is immediately set to a changed state. This means that when code subsequently binds a change-notification callback, the callback is triggered immediately.  \n  \n-   The associated cache entry was removed from the cache. This can occur if the entry is explicitly removed, if it expires, or if it is evicted to recover memory"
  syntax:
    content: public override System.Runtime.Caching.CacheEntryChangeMonitor CreateCacheEntryChangeMonitor (System.Collections.Generic.IEnumerable<string> keys, string regionName = null);
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "An enumeration of unique cache entry keys for the  object."
    - id: regionName
      type: System.String
      description: "A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is  by default, because the  class does not implement regions."
    return:
      type: System.Runtime.Caching.CacheEntryChangeMonitor
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    regionName is not ."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    keys is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An item in the keys collection is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Default
  id: Default
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Default"
  nameWithType: MemoryCache.Default
  fullName: System.Runtime.Caching.MemoryCache.Default
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets a reference to the default <see cref="T:System.Runtime.Caching.MemoryCache"></see> instance.
  remarks: "This property always returns a reference to the default cache instance. For typical application scenarios, only one instance of <xref:System.Runtime.Caching.MemoryCache> is required.  \n  \n Because the default cache instance is not created by the constructor, you must use configuration to explicitly set the memory and polling values for the default cache instance. For more information, see [\\<memoryCache> Element (Cache Settings)](../Topic/%3CmemoryCache%3E%20Element%20\\(Cache%20Settings\\).md)."
  syntax:
    content: public static System.Runtime.Caching.MemoryCache Default { get; }
    return:
      type: System.Runtime.Caching.MemoryCache
      description: "The default instance of the cache."
  overload: System.Runtime.Caching.MemoryCache.Default*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities
  id: DefaultCacheCapabilities
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "DefaultCacheCapabilities"
  nameWithType: MemoryCache.DefaultCacheCapabilities
  fullName: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets a description of the features that the cache provides.
  remarks: "The capabilities of a cache implementation are a combination of the following values:  \n  \n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>  \n  \n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>  \n  \n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>  \n  \n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>  \n  \n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>  \n  \n-   <xref:System.Runtime.Caching.DefaultCacheCapabilities>"
  syntax:
    content: public override System.Runtime.Caching.DefaultCacheCapabilities DefaultCacheCapabilities { get; }
    return:
      type: System.Runtime.Caching.DefaultCacheCapabilities
      description: "A bitwise combination of flags that indicate the default capabilities of the cache implementation."
  overload: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Dispose
  id: Dispose
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Dispose()"
  nameWithType: MemoryCache.Dispose()
  fullName: System.Runtime.Caching.MemoryCache.Dispose()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.MemoryCache"></see> class.
  remarks: "Each <xref:System.Runtime.Caching.MemoryCache> instance is bound to the <xref:System.Web.Compilation.ClientBuildManager.AppDomainUnloaded> event. However, during application-domain shutdown, if a memory-based cache has not been explicitly disposed, the cache instance will automatically call the Dispose method.  \n  \n The disposed cache instance is shut down using the following steps:  \n  \n1.  The state of the cache is set to indicate that the cache is disposed. Any attempt to call public caching methods that change the state of the cache, such as methods that add, remove, or retrieve cache entries, might cause unexpected behavior. For example, if you call the <xref:System.Runtime.Caching.MemoryCache.Set%2A> method after the cache is disposed, a no-op error occurs. If you attempt to retrieve items from the cache, the <xref:System.Runtime.Caching.MemoryCache.Get%2A> method will always return `null`.  \n  \n2.  Performance counter information is no longer raised from the current cache instance.  \n  \n3.  All references to cached objects held by the current cache instance are released.  \n  \n4.  Any <xref:System.Runtime.Caching.CacheEntryChangeMonitor> instances that are currently monitoring entries in the cache are notified.  \n  \n5.  Callback objects that provide notification of changes for those monitors are called.  \n  \n6.  Any <xref:System.Web.Caching.CacheItemRemovedCallback> instances that are registered with entries in the cache are called. The removal reason that is passed to the callbacks is <xref:System.Runtime.Caching.CacheEntryRemovedReason>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.Caching.MemoryCache.Dispose*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Get(System.String,System.String)
  id: Get(System.String,System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Get(String,String)"
  nameWithType: MemoryCache.Get(String,String)
  fullName: System.Runtime.Caching.MemoryCache.Get(String,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Returns an entry from the cache.
  syntax:
    content: public override object Get (string key, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "A unique identifier for the cache entry to get."
    - id: regionName
      type: System.String
      description: "A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is  by default, because the  class does not implement regions."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.Get*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    regionName is not ."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    key is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.GetCacheItem(System.String,System.String)
  id: GetCacheItem(System.String,System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "GetCacheItem(String,String)"
  nameWithType: MemoryCache.GetCacheItem(String,String)
  fullName: System.Runtime.Caching.MemoryCache.GetCacheItem(String,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Returns the specified entry from the cache as a <see cref="T:System.Runtime.Caching.CacheItem"></see> instance.
  remarks: If the cache entry specified by `key` exists in the cache, the GetCacheItem method returns it as a <xref:System.Runtime.Caching.CacheItem> instance. The <xref:System.Runtime.Caching.CacheItem.Key%2A> and <xref:System.Runtime.Caching.CacheItem.Value%2A> properties of the <xref:System.Runtime.Caching.CacheItem> instance will be set. However, the <xref:System.Runtime.Caching.CacheItem.RegionName%2A> property will be `null`, because regions are not implemented in the <xref:System.Runtime.Caching.MemoryCache> class.
  syntax:
    content: public override System.Runtime.Caching.CacheItem GetCacheItem (string key, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "A unique identifier for the cache entry to get."
    - id: regionName
      type: System.String
      description: "A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is  by default, because the  class does not implement regions."
    return:
      type: System.Runtime.Caching.CacheItem
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.GetCacheItem*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    regionName is not ."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    key is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.GetCount(System.String)
  id: GetCount(System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "GetCount(String)"
  nameWithType: MemoryCache.GetCount(String)
  fullName: System.Runtime.Caching.MemoryCache.GetCount(String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Returns the total number of cache entries in the cache.
  syntax:
    content: public override long GetCount (string regionName = null);
    parameters:
    - id: regionName
      type: System.String
      description: "A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is  by default, because the  class does not implement regions."
    return:
      type: System.Int64
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.GetCount*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    regionName is not ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.GetEnumerator
  id: GetEnumerator
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "GetEnumerator()"
  nameWithType: MemoryCache.GetEnumerator()
  fullName: System.Runtime.Caching.MemoryCache.GetEnumerator()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Creates an enumerator that can be used to iterate through a collection of cache entries.
  remarks: "The enumerator that is returned by the GetEnumerator method can be used to iterate over entries in the cache.  \n  \n> [!IMPORTANT]\n>  Retrieving an enumerator for a <xref:System.Runtime.Caching.MemoryCache> instance is a resource-intensive and blocking operation. Therefore, the enumerator should not be used in production applications."
  syntax:
    content: protected override System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,object>> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)
  id: GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "GetValues(IEnumerable<String>,String)"
  nameWithType: MemoryCache.GetValues(IEnumerable<String>,String)
  fullName: System.Runtime.Caching.MemoryCache.GetValues(IEnumerable<String>,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Returns a set of cache entries that correspond to the specified keys.
  remarks: If a cache entry that is represented by the `keys` does not exist, the corresponding value for the returned object in the dictionary is set to `null`. Therefore, the returned dictionary always has the same number of items as the number of elements in `keys`.
  syntax:
    content: public override System.Collections.Generic.IDictionary<string,object> GetValues (System.Collections.Generic.IEnumerable<string> keys, string regionName = null);
    parameters:
    - id: keys
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "A set of unique identifiers for the cache entries to return."
    - id: regionName
      type: System.String
      description: "A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is  by default, because the  class does not implement regions."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.GetValues*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    regionName is not ."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    keys is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An individual key in the collection is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Item(System.String)
  id: Item(System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Item(String)"
  nameWithType: MemoryCache.Item(String)
  fullName: System.Runtime.Caching.MemoryCache.Item(String)
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets or sets a value in the cache by using the default indexer property for an instance of the <see cref="T:System.Runtime.Caching.MemoryCache"></see> class.
  remarks: When you set this property, the value is inserted into the cache. The expiration policy for the cache entry is set to <xref:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration>. If a cache entry with a matching key already exists, its value is updated.
  syntax:
    content: public override object this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: "A unique identifier for the cache value to get or set."
    return:
      type: System.Object
      description: "The value in the cache instance for the specified key, if the entry exists; otherwise, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Runtime.Caching.MemoryCache.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    key is .  \n  \n -or-  \n  \n The inserted value is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Name
  id: Name
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Name"
  nameWithType: MemoryCache.Name
  fullName: System.Runtime.Caching.MemoryCache.Name
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets the name of the cache.
  remarks: The Name property returns the name of the current instance of the <xref:System.Runtime.Caching.MemoryCache> class. In an application that uses multiple cache instances, you can use the Name property to help distinguish instances. For more information, see the <xref:System.Runtime.Caching.MemoryCache.%23ctor%28System.String%2CSystem.Collections.Specialized.NameValueCollection%29?displayProperty=fullName> method. The default memory-based cache returns the default name.
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "The name of the cache."
  overload: System.Runtime.Caching.MemoryCache.Name*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit
  id: PhysicalMemoryLimit
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "PhysicalMemoryLimit"
  nameWithType: MemoryCache.PhysicalMemoryLimit
  fullName: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets the percentage of physical memory that the cache can use.
  remarks: "The PhysicalMemoryLimit property returns the percentage of total physical computer memory that can be used by a single instance of the <xref:System.Runtime.Caching.MemoryCache> class. If the cache instance exceeds the specified limit, cache entries are removed.  \n  \n The settings for the PhysicalMemoryLimit property can be specified in the application configuration file. Alternatively, they can be passed by a caller when the <xref:System.Runtime.Caching.MemoryCache> class is initialized. For more information about how to configure this property, see [\\<namedCaches> Element (Cache Settings)](../Topic/%3CnamedCaches%3E%20Element%20\\(Cache%20Settings\\).md). For more information about how to configure the property when the <xref:System.Runtime.Caching.MemoryCache> class is being initialized, see the <xref:System.Runtime.Caching.MemoryCache.%23ctor%28System.String%2CSystem.Collections.Specialized.NameValueCollection%29?displayProperty=fullName> method."
  syntax:
    content: public long PhysicalMemoryLimit { get; }
    return:
      type: System.Int64
      description: "The percentage of physical memory that the cache can use."
  overload: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.PollingInterval
  id: PollingInterval
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "PollingInterval"
  nameWithType: MemoryCache.PollingInterval
  fullName: System.Runtime.Caching.MemoryCache.PollingInterval
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets the maximum time after which the cache updates its memory statistics.
  remarks: The settings for the PollingInterval property can be specified in the application configuration file. Alternatively they can be passed when the <xref:System.Runtime.Caching.MemoryCache> class is initialized. For more information about how to configure this property, see [\<namedCaches> Element (Cache Settings)](../Topic/%3CnamedCaches%3E%20Element%20\(Cache%20Settings\).md). For more information about how to configure the property when the <xref:System.Runtime.Caching.MemoryCache> class is being initialized, see the <xref:System.Runtime.Caching.MemoryCache.%23ctor%28System.String%2CSystem.Collections.Specialized.NameValueCollection%29?displayProperty=fullName> method.
  syntax:
    content: public TimeSpan PollingInterval { get; }
    return:
      type: System.TimeSpan
      description: "The maximum time that can occur before memory statistics are updated."
  overload: System.Runtime.Caching.MemoryCache.PollingInterval*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Remove(System.String,System.String)
  id: Remove(System.String,System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Remove(String,String)"
  nameWithType: MemoryCache.Remove(String,String)
  fullName: System.Runtime.Caching.MemoryCache.Remove(String,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Removes a cache entry from the cache.
  remarks: If the entry specified by `key` exists in the cache, removing the item triggers any associated change monitors. If the removed item was associated with a <xref:System.Web.Caching.CacheItemUpdateCallback> object or a <xref:System.Web.Caching.CacheItemRemovedCallback> object, the reason passed to the callback is <xref:System.Runtime.Caching.CacheEntryRemovedReason>.
  syntax:
    content: public override object Remove (string key, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "A unique identifier for the cache entry to remove."
    - id: regionName
      type: System.String
      description: "A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is  by default, because the  class does not implement regions."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    regionName is not ."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    key is ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  id: Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Set(CacheItem,CacheItemPolicy)"
  nameWithType: MemoryCache.Set(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.MemoryCache.Set(CacheItem,CacheItemPolicy)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Inserts a cache entry into the cache by using a <see cref="T:System.Runtime.Caching.CacheItem"></see> instance to supply the key and value for the cache entry.
  remarks: Like other <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads, the Set method always puts a cache value in the cache, regardless whether an entry already exists that has the same key. If the specified entry does not exist in the cache, a new cache entry is inserted. If the specified entry already exists, its value is updated.
  syntax:
    content: public override void Set (System.Runtime.Caching.CacheItem item, System.Runtime.Caching.CacheItemPolicy policy);
    parameters:
    - id: item
      type: System.Runtime.Caching.CacheItem
      description: "An object that represents a cache entry to insert."
    - id: policy
      type: System.Runtime.Caching.CacheItemPolicy
      description: "An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration."
  overload: System.Runtime.Caching.MemoryCache.Set*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    item is .  \n  \n -or-  \n  \n The <xref:System.Runtime.Caching.CacheItem.Key%2A> property is .  \n  \n -or-  \n  \n The <xref:System.Runtime.Caching.CacheItem.Value%2A> property is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An invalid combination of arguments for the cache entry was passed. This occurs if the following expiration details are set on the policy object for the cache entry:      -   If both the absolute and sliding expiration values of the  object are set to values other than the defaults of  and  fields. The  class cannot set expiration policy based on both an absolute expiration and a sliding expiration. Only one expiration setting can be explicitly set when you use the  class. The other setting must be set to  or  property.      -   If both the removal callback and the update callback are specified for  object. The  class only supports using one type of callback per cache entry."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> property is set to a value less than <xref:System.TimeSpan.Zero>.       -or-       The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> property is set to a value greater than one year.       -or-       The <xref:System.Runtime.Caching.CacheItemPolicy.Priority%2A> is not a value of the  enumeration."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)
  id: Set(System.String,System.Object,System.DateTimeOffset,System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Set(String,Object,DateTimeOffset,String)"
  nameWithType: MemoryCache.Set(String,Object,DateTimeOffset,String)
  fullName: System.Runtime.Caching.MemoryCache.Set(String,Object,DateTimeOffset,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Inserts a cache entry into the cache by using a key and a value and specifies time-based expiration details.
  remarks: "Like other <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads, the Set method always puts a cache value in the cache, regardless whether an entry already exists with the same key. If the specified entry does not exist, a new cache entry is inserted. If the specified entry exists, it is updated.  \n  \n The `absoluteExpiration` parameter indicates when the entry should be removed from the cache.  \n  \n Removing an entry triggers any associated change monitors. If the removed item was associated with a <xref:System.Web.Caching.CacheItemUpdateCallback> object or <xref:System.Web.Caching.CacheItemRemovedCallback> object, the reason for removal that is passed to the callbacks is contained in the <xref:System.Runtime.Caching.CacheEntryRemovedReason> property."
  syntax:
    content: public override void Set (string key, object value, DateTimeOffset absoluteExpiration, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "A unique identifier for the cache entry to insert."
    - id: value
      type: System.Object
      description: "The data for the cache entry."
    - id: absoluteExpiration
      type: System.DateTimeOffset
      description: "The fixed date and time at which the cache entry will expire."
    - id: regionName
      type: System.String
      description: "A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is  by default, because the  class does not implement regions."
  overload: System.Runtime.Caching.MemoryCache.Set*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    regionName is not ."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    key is .  \n  \n -or-  \n  \n Value is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-   An invalid combination of arguments for the cache entry was passed. This occurs if the following expiration details are set on the policy object for the cache entry:      -   If both the absolute and sliding expiration values on  object are set to values other than the defaults of  and . This occurs because the  class does not support expiring entries based on both an absolute and a sliding expiration. Only one expiration setting can be explicitly set when you use the  class. The other setting must be set to  or .      -   If both the removal callback and the update callback are specified on  object. The  class only supports using one type of callback per cache entry."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> property is set to a value less than <xref:System.TimeSpan.Zero>.       -or-       The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> property is set to a value greater than one year.       -or-      -   The <xref:System.Runtime.Caching.CacheItemPolicy.Priority%2A> property is not a value of the  enumeration."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  id: Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Set(String,Object,CacheItemPolicy,String)"
  nameWithType: MemoryCache.Set(String,Object,CacheItemPolicy,String)
  fullName: System.Runtime.Caching.MemoryCache.Set(String,Object,CacheItemPolicy,String)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Inserts a cache entry into the cache by using a key and a value and eviction.
  remarks: "Like other <xref:System.Runtime.Caching.MemoryCache.Set%2A> method overloads, the Set method always puts a cache value in the cache, regardless whether a matching entry already exists. If the specified entry does not exist in the cache, a new cache entry is inserted. If the specified entry exists, it is updated.  \n  \n Removing an entry triggers any associated change monitors. If the removed item was associated with a <xref:System.Web.Caching.CacheItemUpdateCallback> object or <xref:System.Web.Caching.CacheItemRemovedCallback> object, the reason for removal that is passed to the callbacks is contained in the <xref:System.Runtime.Caching.CacheEntryRemovedReason> property."
  syntax:
    content: public override void Set (string key, object value, System.Runtime.Caching.CacheItemPolicy policy, string regionName = null);
    parameters:
    - id: key
      type: System.String
      description: "A unique identifier for the cache entry to insert."
    - id: value
      type: System.Object
      description: "The data for the cache entry."
    - id: policy
      type: System.Runtime.Caching.CacheItemPolicy
      description: "An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration."
    - id: regionName
      type: System.String
      description: "A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is  by default, because the  class does not implement regions."
  overload: System.Runtime.Caching.MemoryCache.Set*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n    key is .  \n  \n -or-  \n  \n value is   \n  \n -or-  \n  \n The callback reference that was passed to the helper method in the <xref:System.Runtime.Caching.CacheItemPolicy.UpdateCallback%2A> property is ."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-   An invalid combination of arguments for the cache entry exists. This occurs if the following expiration details are set on the policy object for the cache entry:      -   If both the absolute and sliding expiration values on  object are set to values other than the defaults of  and . This is because the  class does not support expiring entries based on both an absolute and a sliding expiration. Only one expiration setting can be explicitly set when you use the  class. The other setting must be set to  or .      -   If both the removal callback and the update callback are specified on  class. The  class only supports using one type of callback per cache entry."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> property is set to a value less than <xref:System.TimeSpan.Zero>.       -or-       The <xref:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration%2A> property is set to a value greater than one year.       -or-       The <xref:System.Runtime.Caching.CacheItemPolicy.Priority%2A> property is not a value of the  enumeration."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n    regionName is not ."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "System.Collections.IEnumerable.GetEnumerator()"
  nameWithType: MemoryCache.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Runtime.Caching.MemoryCache.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Provides support for iteration over a generic collection.
  remarks: "This member is an explicit interface member implementation. It can be used only when a <xref:System.Runtime.Caching.MemoryCache> instance is cast to an <xref:System.Collections.IEnumerable> interface.  \n  \n You can use this method to iterate through a generic collection of cache entries."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.Caching.MemoryCache.Trim(System.Int32)
  id: Trim(System.Int32)
  parent: System.Runtime.Caching.MemoryCache
  langs:
  - csharp
  name: "Trim(Int32)"
  nameWithType: MemoryCache.Trim(Int32)
  fullName: System.Runtime.Caching.MemoryCache.Trim(Int32)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Removes a specified percentage of cache entries from the cache object.
  remarks: "The Trim property first removes entries that have exceeded either an absolute or sliding expiration. Any callbacks that are registered for items that are removed will be passed a removed reason of <xref:System.Web.Caching.CacheItemRemovedReason>.  \n  \n If removing expired entries is insufficient to reach the specified trim percentage, additional entries will be removed from the cache based on a least-recently used (LRU) algorithm until the requested trim percentage is reached. Any callbacks that are registered for items that are removed this way will be passed a remove reason of <xref:System.Runtime.Caching.CacheEntryRemovedReason>."
  syntax:
    content: public long Trim (int percent);
    parameters:
    - id: percent
      type: System.Int32
      description: "The percentage of total cache entries to remove."
    return:
      type: System.Int64
      description: "To be added."
  overload: System.Runtime.Caching.MemoryCache.Trim*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Runtime.Caching.ObjectCache
  isExternal: false
  name: "System.Runtime.Caching.ObjectCache"
- uid: System.Runtime.Caching.MemoryCache.#ctor(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "MemoryCache(String,NameValueCollection)"
  nameWithType: MemoryCache.MemoryCache(String,NameValueCollection)
  fullName: System.Runtime.Caching.MemoryCache.MemoryCache(String,NameValueCollection)
- uid: System.String
  parent: System
  isExternal: true
  name: "String"
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: "NameValueCollection"
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Runtime.Caching.MemoryCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Add(CacheItem,CacheItemPolicy)"
  nameWithType: MemoryCache.Add(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.MemoryCache.Add(CacheItem,CacheItemPolicy)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: "Boolean"
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Caching.CacheItem
  parent: System.Runtime.Caching
  isExternal: false
  name: "CacheItem"
  nameWithType: CacheItem
  fullName: System.Runtime.Caching.CacheItem
- uid: System.Runtime.Caching.CacheItemPolicy
  parent: System.Runtime.Caching
  isExternal: false
  name: "CacheItemPolicy"
  nameWithType: CacheItemPolicy
  fullName: System.Runtime.Caching.CacheItemPolicy
- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "AddOrGetExisting(CacheItem,CacheItemPolicy)"
  nameWithType: MemoryCache.AddOrGetExisting(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(CacheItem,CacheItemPolicy)
- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "AddOrGetExisting(String,Object,DateTimeOffset,String)"
  nameWithType: MemoryCache.AddOrGetExisting(String,Object,DateTimeOffset,String)
  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(String,Object,DateTimeOffset,String)
- uid: System.Object
  parent: System
  isExternal: true
  name: "Object"
  nameWithType: Object
  fullName: System.Object
- uid: System.DateTimeOffset
  parent: System
  isExternal: true
  name: "DateTimeOffset"
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "AddOrGetExisting(String,Object,CacheItemPolicy,String)"
  nameWithType: MemoryCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)
  fullName: System.Runtime.Caching.MemoryCache.AddOrGetExisting(String,Object,CacheItemPolicy,String)
- uid: System.Runtime.Caching.MemoryCache.CacheMemoryLimit
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "CacheMemoryLimit"
  nameWithType: MemoryCache.CacheMemoryLimit
  fullName: System.Runtime.Caching.MemoryCache.CacheMemoryLimit
- uid: System.Int64
  parent: System
  isExternal: true
  name: "Int64"
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Runtime.Caching.MemoryCache.Contains(System.String,System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Contains(String,String)"
  nameWithType: MemoryCache.Contains(String,String)
  fullName: System.Runtime.Caching.MemoryCache.Contains(String,String)
- uid: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "CreateCacheEntryChangeMonitor(IEnumerable<String>,String)"
  nameWithType: MemoryCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)
  fullName: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor(IEnumerable<String>,String)
- uid: System.Runtime.Caching.CacheEntryChangeMonitor
  parent: System.Runtime.Caching
  isExternal: false
  name: "CacheEntryChangeMonitor"
  nameWithType: CacheEntryChangeMonitor
  fullName: System.Runtime.Caching.CacheEntryChangeMonitor
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: "IEnumerable<String>"
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "IEnumerable"
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: "<"
    nameWithType: <
    fullName: <
  - uid: System.String
    name: "String"
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Caching.MemoryCache.Default
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Default"
  nameWithType: MemoryCache.Default
  fullName: System.Runtime.Caching.MemoryCache.Default
- uid: System.Runtime.Caching.MemoryCache
  parent: System.Runtime.Caching
  isExternal: false
  name: "MemoryCache"
  nameWithType: MemoryCache
  fullName: System.Runtime.Caching.MemoryCache
- uid: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "DefaultCacheCapabilities"
  nameWithType: MemoryCache.DefaultCacheCapabilities
  fullName: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities
- uid: System.Runtime.Caching.DefaultCacheCapabilities
  parent: System.Runtime.Caching
  isExternal: false
  name: "DefaultCacheCapabilities"
  nameWithType: DefaultCacheCapabilities
  fullName: System.Runtime.Caching.DefaultCacheCapabilities
- uid: System.Runtime.Caching.MemoryCache.Dispose
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Dispose()"
  nameWithType: MemoryCache.Dispose()
  fullName: System.Runtime.Caching.MemoryCache.Dispose()
- uid: System.Runtime.Caching.MemoryCache.Get(System.String,System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Get(String,String)"
  nameWithType: MemoryCache.Get(String,String)
  fullName: System.Runtime.Caching.MemoryCache.Get(String,String)
- uid: System.Runtime.Caching.MemoryCache.GetCacheItem(System.String,System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "GetCacheItem(String,String)"
  nameWithType: MemoryCache.GetCacheItem(String,String)
  fullName: System.Runtime.Caching.MemoryCache.GetCacheItem(String,String)
- uid: System.Runtime.Caching.MemoryCache.GetCount(System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "GetCount(String)"
  nameWithType: MemoryCache.GetCount(String)
  fullName: System.Runtime.Caching.MemoryCache.GetCount(String)
- uid: System.Runtime.Caching.MemoryCache.GetEnumerator
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "GetEnumerator()"
  nameWithType: MemoryCache.GetEnumerator()
  fullName: System.Runtime.Caching.MemoryCache.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  isExternal: true
  name: "IEnumerator<KeyValuePair<String,Object>>"
  nameWithType: IEnumerator<KeyValuePair<String,Object>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: "IEnumerator"
    nameWithType: IEnumerator
    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  - name: "<"
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: "KeyValuePair"
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Object>
  - name: "<"
    nameWithType: <
    fullName: <
  - uid: System.String
    name: "String"
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: "Object"
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Caching.MemoryCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "GetValues(IEnumerable<String>,String)"
  nameWithType: MemoryCache.GetValues(IEnumerable<String>,String)
  fullName: System.Runtime.Caching.MemoryCache.GetValues(IEnumerable<String>,String)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: "IDictionary<String,Object>"
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: "IDictionary"
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: "<"
    nameWithType: <
    fullName: <
  - uid: System.String
    name: "String"
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: "Object"
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Caching.MemoryCache.Item(System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Item(String)"
  nameWithType: MemoryCache.Item(String)
  fullName: System.Runtime.Caching.MemoryCache.Item(String)
- uid: System.Runtime.Caching.MemoryCache.Name
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Name"
  nameWithType: MemoryCache.Name
  fullName: System.Runtime.Caching.MemoryCache.Name
- uid: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "PhysicalMemoryLimit"
  nameWithType: MemoryCache.PhysicalMemoryLimit
  fullName: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit
- uid: System.Runtime.Caching.MemoryCache.PollingInterval
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "PollingInterval"
  nameWithType: MemoryCache.PollingInterval
  fullName: System.Runtime.Caching.MemoryCache.PollingInterval
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: "TimeSpan"
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Runtime.Caching.MemoryCache.Remove(System.String,System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Remove(String,String)"
  nameWithType: MemoryCache.Remove(String,String)
  fullName: System.Runtime.Caching.MemoryCache.Remove(String,String)
- uid: System.Runtime.Caching.MemoryCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Set(CacheItem,CacheItemPolicy)"
  nameWithType: MemoryCache.Set(CacheItem,CacheItemPolicy)
  fullName: System.Runtime.Caching.MemoryCache.Set(CacheItem,CacheItemPolicy)
- uid: System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Set(String,Object,DateTimeOffset,String)"
  nameWithType: MemoryCache.Set(String,Object,DateTimeOffset,String)
  fullName: System.Runtime.Caching.MemoryCache.Set(String,Object,DateTimeOffset,String)
- uid: System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Set(String,Object,CacheItemPolicy,String)"
  nameWithType: MemoryCache.Set(String,Object,CacheItemPolicy,String)
  fullName: System.Runtime.Caching.MemoryCache.Set(String,Object,CacheItemPolicy,String)
- uid: System.Runtime.Caching.MemoryCache.System#Collections#IEnumerable#GetEnumerator
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "System.Collections.IEnumerable.GetEnumerator()"
  nameWithType: MemoryCache.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Runtime.Caching.MemoryCache.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: "IEnumerator"
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Runtime.Caching.MemoryCache.Trim(System.Int32)
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Trim(Int32)"
  nameWithType: MemoryCache.Trim(Int32)
  fullName: System.Runtime.Caching.MemoryCache.Trim(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: "Int32"
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.Caching.MemoryCache.#ctor*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "MemoryCache"
  nameWithType: MemoryCache.MemoryCache
- uid: System.Runtime.Caching.MemoryCache.Add*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Add"
  nameWithType: MemoryCache.Add
- uid: System.Runtime.Caching.MemoryCache.AddOrGetExisting*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "AddOrGetExisting"
  nameWithType: MemoryCache.AddOrGetExisting
- uid: System.Runtime.Caching.MemoryCache.CacheMemoryLimit*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "CacheMemoryLimit"
  nameWithType: MemoryCache.CacheMemoryLimit
- uid: System.Runtime.Caching.MemoryCache.Contains*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Contains"
  nameWithType: MemoryCache.Contains
- uid: System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "CreateCacheEntryChangeMonitor"
  nameWithType: MemoryCache.CreateCacheEntryChangeMonitor
- uid: System.Runtime.Caching.MemoryCache.Default*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Default"
  nameWithType: MemoryCache.Default
- uid: System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "DefaultCacheCapabilities"
  nameWithType: MemoryCache.DefaultCacheCapabilities
- uid: System.Runtime.Caching.MemoryCache.Dispose*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Dispose"
  nameWithType: MemoryCache.Dispose
- uid: System.Runtime.Caching.MemoryCache.Get*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Get"
  nameWithType: MemoryCache.Get
- uid: System.Runtime.Caching.MemoryCache.GetCacheItem*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "GetCacheItem"
  nameWithType: MemoryCache.GetCacheItem
- uid: System.Runtime.Caching.MemoryCache.GetCount*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "GetCount"
  nameWithType: MemoryCache.GetCount
- uid: System.Runtime.Caching.MemoryCache.GetEnumerator*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "GetEnumerator"
  nameWithType: MemoryCache.GetEnumerator
- uid: System.Runtime.Caching.MemoryCache.GetValues*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "GetValues"
  nameWithType: MemoryCache.GetValues
- uid: System.Runtime.Caching.MemoryCache.Item*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Item"
  nameWithType: MemoryCache.Item
- uid: System.Runtime.Caching.MemoryCache.Name*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Name"
  nameWithType: MemoryCache.Name
- uid: System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "PhysicalMemoryLimit"
  nameWithType: MemoryCache.PhysicalMemoryLimit
- uid: System.Runtime.Caching.MemoryCache.PollingInterval*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "PollingInterval"
  nameWithType: MemoryCache.PollingInterval
- uid: System.Runtime.Caching.MemoryCache.Remove*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Remove"
  nameWithType: MemoryCache.Remove
- uid: System.Runtime.Caching.MemoryCache.Set*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Set"
  nameWithType: MemoryCache.Set
- uid: System.Runtime.Caching.MemoryCache.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "System.Collections.IEnumerable.GetEnumerator"
  nameWithType: MemoryCache.System.Collections.IEnumerable.GetEnumerator
- uid: System.Runtime.Caching.MemoryCache.Trim*
  parent: System.Runtime.Caching.MemoryCache
  isExternal: false
  name: "Trim"
  nameWithType: MemoryCache.Trim
