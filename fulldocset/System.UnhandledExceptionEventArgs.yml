### YamlMime:ManagedReference
items:
- uid: System.UnhandledExceptionEventArgs
  id: UnhandledExceptionEventArgs
  children:
  - System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  - System.UnhandledExceptionEventArgs.ExceptionObject
  - System.UnhandledExceptionEventArgs.IsTerminating
  langs:
  - csharp
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs
  fullName: System.UnhandledExceptionEventArgs
  type: Class
  summary: "Fornisce dati per l&quot;evento generato quando si verifica un&quot;eccezione non gestita in qualsiasi dominio applicazione."
  remarks: "UnhandledExceptionEventArgs fornisce l&quot;accesso all&quot;oggetto eccezione e un flag che indica se common language runtime sta terminando. Il UnhandledExceptionEventArgs è uno dei parametri passati a <xref:System.UnhandledExceptionEventHandler>per il <xref:System.AppDomain.UnhandledException?displayProperty=fullName>evento.</xref:System.AppDomain.UnhandledException?displayProperty=fullName> </xref:System.UnhandledExceptionEventHandler>       Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class UnhandledExceptionEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  id: '#ctor(System.Object,System.Boolean)'
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.UnhandledExceptionEventArgs&quot;> </xref> classe con l&quot;oggetto eccezione e un flag di terminazione di common language runtime."
  syntax:
    content: public UnhandledExceptionEventArgs (object exception, bool isTerminating);
    parameters:
    - id: exception
      type: System.Object
      description: "Eccezione non gestita."
    - id: isTerminating
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il runtime sta terminando; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.UnhandledExceptionEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  id: ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Ottiene l&quot;oggetto eccezione non gestita."
  remarks: "Questa proprietà restituisce un oggetto di tipo <xref:System.Object>anziché una derivata da <xref:System.Exception>.</xref:System.Exception> </xref:System.Object> Anche se Common Language Specification richiede che tutti i tipi di eccezione derivano da <xref:System.Exception>, è possibile chiamare i metodi generare le eccezioni con gli oggetti non derivati da <xref:System.Exception>.</xref:System.Exception> </xref:System.Exception> È possibile eseguire le operazioni seguenti per funzionare con l&quot;eccezione seguente:-applicare il <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>attributo con un <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName>valore `true` all&quot;assembly che contiene il gestore dell&quot;evento.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName> </xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> Si esegue il wrapping di tutte le eccezioni non derivate dalla <xref:System.Exception>classe un <xref:System.Runtime.CompilerServices.RuntimeWrappedException>oggetto.</xref:System.Runtime.CompilerServices.RuntimeWrappedException> </xref:System.Exception> È possibile quindi in modo sicuro il cast (in c#) o convertire (in Visual Basic) l&quot;oggetto restituito da questa proprietà per un <xref:System.Exception>dell&quot;oggetto e recuperare l&quot;oggetto eccezione originale il <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName>proprietà.</xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName> </xref:System.Exception> Si noti che alcuni compilatori, ad esempio i compilatori c# e Visual Basic, applicano automaticamente questo attributo.      -Esegue il cast dell&quot;oggetto restituito da questa proprietà per un <xref:System.Exception>oggetto.</xref:System.Exception>"
  example:
  - "The following example demonstrates the <xref:System.AppDomain.UnhandledException> event. It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain. It then throws two exceptions. The first is handled by a **try/catch** block. The second is unhandled and invokes the `MyHandle` routine before the application terminates.  \n  \n [!code-cs[AppDomain_UnhandledException#1](~/add/codesnippet/csharp/p-system.unhandledexcept_1.cs)]\n [!code-vb[AppDomain_UnhandledException#1](~/add/codesnippet/visualbasic/p-system.unhandledexcept_1.vb)]\n [!code-cpp[AppDomain_UnhandledException#1](~/add/codesnippet/cpp/p-system.unhandledexcept_1.cpp)]"
  syntax:
    content: public object ExceptionObject { get; }
    return:
      type: System.Object
      description: "L&quot;oggetto eccezione non gestita."
  overload: System.UnhandledExceptionEventArgs.ExceptionObject*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  id: IsTerminating
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Indica se common language runtime sta terminando."
  remarks: "A partire da .NET Framework versione 2.0, questa proprietà restituisce `true` per la maggior parte le eccezioni non gestite, a meno che non viene utilizzato un flag di compatibilità dell&quot;applicazione per ripristinare il comportamento delle versioni 1.0 e 1.1. Il motivo è che è consentite proseguire normalmente, più eccezioni non gestite nei thread, inclusi i thread del pool, che in genere comporta la terminazione dell&quot;applicazione. Per ulteriori informazioni, incluso un elenco di casi in cui il runtime non viene terminato, vedere [eccezioni in thread gestiti](~/add/includes/ajax-current-ext-md.md).      ## Informazioni sulla versione quanto segue si applica alle versioni di .NET Framework 1.0 e 1.1: questa proprietà restituisce `true` quando viene ricevuta in, un&quot;eccezione ma non è gestita da, thread principale di un&quot;applicazione. Questa proprietà restituisce inoltre `true` se un thread non gestito esegue codice gestito e riceve un&quot;eccezione non gestita. Infine, questa proprietà restituisce `false` per i thread del pool e i thread gestiti creati da un&quot;applicazione, perché le versioni 1.0 e 1.1 rilevano le eccezioni non gestite in tali thread e ignorano."
  syntax:
    content: public bool IsTerminating { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il runtime sta terminando; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.UnhandledExceptionEventArgs.IsTerminating*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
- uid: System.UnhandledExceptionEventArgs.#ctor*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs
- uid: System.UnhandledExceptionEventArgs.ExceptionObject*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
