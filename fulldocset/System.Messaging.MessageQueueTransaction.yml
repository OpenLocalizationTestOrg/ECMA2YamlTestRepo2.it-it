### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueTransaction
  id: MessageQueueTransaction
  children:
  - System.Messaging.MessageQueueTransaction.#ctor
  - System.Messaging.MessageQueueTransaction.Abort
  - System.Messaging.MessageQueueTransaction.Begin
  - System.Messaging.MessageQueueTransaction.Commit
  - System.Messaging.MessageQueueTransaction.Dispose
  - System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  - System.Messaging.MessageQueueTransaction.Finalize
  - System.Messaging.MessageQueueTransaction.Status
  langs:
  - csharp
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
  type: Class
  summary: "Fornisce una transazione interna di Accodamento messaggi."
  remarks: "Per inviare o ricevere un messaggio come parte di una transazione, è possibile utilizzare la classe MessageQueueTransaction per creare una transazione e passarlo a un overload di <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>metodo o <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>metodo che accetta un `transaction` parametro.</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> I messaggi inviati come parte di una transazione devono essere inviati alle code transazionali. I messaggi ricevuti dalle code transazionali devono essere ricevuti utilizzando la transazione specificata.       Oltre al <xref:System.Messaging.MessageQueue.Receive%2A>(metodo), è possibile ricevere messaggi con un identificatore o identificatore di correlazione specificato.</xref:System.Messaging.MessageQueue.Receive%2A> Vedere il <xref:System.Messaging.MessageQueue.ReceiveById%2A>e <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>metodi per ulteriori informazioni sulla ricezione in modo selettivo i messaggi dalle code transazionali.</xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> </xref:System.Messaging.MessageQueue.ReceiveById%2A>       Se viene eseguito il commit della transazione, i messaggi inviati alle code transazionali vengono rimosse. Analogamente, i messaggi ricevuti dalle code transazionali vengono restituiti alla coda se viene eseguito il rollback della transazione.       Se si crea un&quot;istanza di una classe MessageQueueTransaction e passarlo a un overload applicabile del <xref:System.Messaging.MessageQueue.Send%2A>metodo o <xref:System.Messaging.MessageQueue.Receive%2A>metodo per inviare un messaggio a una coda non transazionale o di ricevere un messaggio da una coda non transazionale, il metodo genera un&quot;eccezione che indica &quot;Utilizzo delle transazioni non corretto&quot;.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue.Send%2A>       [Visual Basic]       MessageQueueTransaction è riconosce il threading apartment, pertanto se lo stato dell&quot;apartment è `STA`, è possibile utilizzare la transazione in più thread. Visual Basic imposta lo stato del thread principale di `STA`, pertanto è necessario applicare il <xref:System.MTAThreadAttribute>nel `Main` subroutine.</xref:System.MTAThreadAttribute> In caso contrario, l&quot;invio di un messaggio transazionale mediante un altro thread genererà un <xref:System.Messaging.MessageQueueException>eccezione.</xref:System.Messaging.MessageQueueException> Si applica il <xref:System.MTAThreadAttribute>utilizzando il seguente frammento.</xref:System.MTAThreadAttribute>      ```   <System.MTAThreadAttribute>    public sub Main()   ```      ```vb#      ```"
  syntax:
    content: 'public class MessageQueueTransaction : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.#ctor
  id: '#ctor'
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> classe."
  remarks: "Questo costruttore imposta la <xref:System.Messaging.MessageQueueTransaction.Status%2A>proprietà `Initialized`.</xref:System.Messaging.MessageQueueTransaction.Status%2A>"
  syntax:
    content: public MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Abort
  id: Abort
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Eseguire il rollback della transazione interna in sospeso."
  remarks: "Interruzione contrassegna il mancato completamento di un processo iniziato una chiamata a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>       In genere, si effettua una chiamata a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>all&quot;interno di un `Try...Catch` blocco di gestione delle eccezioni, inserire una chiamata a <xref:System.Messaging.MessageQueueTransaction.Commit%2A>nel `Try` clausola e una chiamata di interruzione nel `Catch` clausola.</xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>       Interruzione rollback dell&quot;intera transazione. Sono inclusi tutti i messaggi inviati o ricevuti dopo la chiamata a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La transazione interna che si sta tentando di eseguire il rollback non è stato avviato."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Si verifica un errore interno di Accodamento messaggi."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Begin
  id: Begin
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Avvia una nuova transazione interna di Accodamento messaggi."
  remarks: "Iniziare i segni di inizio dell&quot;elaborazione che verrà eseguito il commit o rollback, a seconda dell&quot;esito della transazione. Se si verifica un&quot;eccezione durante l&quot;elaborazione, viene eseguito il rollback dell&quot;intera transazione. Sono inclusi tutti i messaggi inviati o ricevuti dopo la chiamata a Begin.       In genere, si effettua una chiamata a Begin all&quot;interno di un `Try...Catch` blocco di gestione delle eccezioni, inserire una chiamata a <xref:System.Messaging.MessageQueueTransaction.Commit%2A>nel `Try` clausola e una chiamata a <xref:System.Messaging.MessageQueueTransaction.Abort%2A>nel `Catch` clausola.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A>"
  syntax:
    content: public void Begin ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Begin*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La transazione è già stata avviata."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Si verifica un errore interno di Accodamento messaggi."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Commit
  id: Commit
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Esegue il commit di una transazione interna in sospeso."
  remarks: "Commit contrassegna il completamento di un&quot;elaborazione iniziata una chiamata a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A> Se si verifica un&quot;eccezione tra la chiamata di <xref:System.Messaging.MessageQueueTransaction.Begin%2A>e la chiamata a Commit, l&quot;intera transazione viene eseguito il rollback.</xref:System.Messaging.MessageQueueTransaction.Begin%2A> Sono inclusi tutti i messaggi inviati o ricevuti dopo la chiamata a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>       In genere, si effettua una chiamata a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>all&quot;interno di un `Try...Catch` blocco di gestione delle eccezioni, inserire una chiamata a Commit nel `Try` clausola e una chiamata a <xref:System.Messaging.MessageQueueTransaction.Abort%2A>nel `Catch` clausola.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Commit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La transazione di cui che si sta tentando di eseguire il commit non è stato avviato."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Si verifica un errore interno di Accodamento messaggi."
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rilascia tutte le risorse usate dal <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>."
  remarks: "La chiamata a Dispose consente le risorse usate dal <xref:System.Messaging.MessageQueueTransaction>riallocazione per altri scopi.</xref:System.Messaging.MessageQueueTransaction> Per ulteriori informazioni su `Dispose`, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md).       Rollback in sospeso transazioni interne sono dal metodo Dispose."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rilascia le risorse non gestite usate da di <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>metodo e <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageQueueTransaction.Dispose%2A> `Dispose`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A>richiama `Dispose` con `disposing` impostato su `false`.</xref:System.Object.Finalize%2A>       Quando il `disposing` parametro `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Messaging.MessageQueueTransaction>riferimenti.</xref:System.Messaging.MessageQueueTransaction> Questo metodo richiama il `Dispose` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Finalize
  id: Finalize
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rilascia le risorse contenute nell&quot;istanza corrente."
  remarks: "Questo metodo esegue l&quot;override <xref:System.Object.Finalize%2A?displayProperty=fullName>.</xref:System.Object.Finalize%2A?displayProperty=fullName> Il codice dell&quot;applicazione non deve chiamare questo metodo. metodo Finalize di un oggetto viene richiamato automaticamente durante l&quot;operazione di garbage collection, a meno che la finalizzazione del garbage collector non è stata disabilitata da una chiamata al <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>metodo.</xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>       Per ulteriori informazioni, vedere [metodi Finalize e distruttori](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md), e [si esegue l&quot;override del metodo Finalize](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."
  syntax:
    content: ~MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Status
  id: Status
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene lo stato della transazione."
  remarks: "Quando un&quot;istanza di <xref:System.Messaging.MessageQueueTransaction>classe è stata creata, lo stato viene impostato dal costruttore per `Initialized`.</xref:System.Messaging.MessageQueueTransaction> Dopo una chiamata a <xref:System.Messaging.MessageQueueTransaction.Begin%2A>ma prima di chiamare <xref:System.Messaging.MessageQueueTransaction.Commit%2A>o <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, lo stato è `Pending`.</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public System.Messaging.MessageQueueTransactionStatus Status { get; }
    return:
      type: System.Messaging.MessageQueueTransactionStatus
      description: "Uno del <xref href=&quot;System.Messaging.MessageQueueTransactionStatus&quot;> </xref> valori che indica se la transazione è stato eseguito il commit, interrotta, inizializzata, o è in sospeso."
  overload: System.Messaging.MessageQueueTransaction.Status*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.MessageQueueTransaction.#ctor
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
- uid: System.Messaging.MessageQueueTransaction.Abort
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
- uid: System.Messaging.MessageQueueTransaction.Begin
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
- uid: System.Messaging.MessageQueueTransaction.Commit
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
- uid: System.Messaging.MessageQueueTransaction.Dispose
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueTransaction.Finalize
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
- uid: System.Messaging.MessageQueueTransaction.Status
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
- uid: System.Messaging.MessageQueueTransactionStatus
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionStatus
  nameWithType: MessageQueueTransactionStatus
  fullName: System.Messaging.MessageQueueTransactionStatus
- uid: System.Messaging.MessageQueueTransaction.#ctor*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction.MessageQueueTransaction
- uid: System.Messaging.MessageQueueTransaction.Abort*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort
  nameWithType: MessageQueueTransaction.Abort
- uid: System.Messaging.MessageQueueTransaction.Begin*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin
  nameWithType: MessageQueueTransaction.Begin
- uid: System.Messaging.MessageQueueTransaction.Commit*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit
  nameWithType: MessageQueueTransaction.Commit
- uid: System.Messaging.MessageQueueTransaction.Dispose*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueTransaction.Dispose
- uid: System.Messaging.MessageQueueTransaction.Finalize*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize
  nameWithType: MessageQueueTransaction.Finalize
- uid: System.Messaging.MessageQueueTransaction.Status*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
