### YamlMime:ManagedReference
items:
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem
  id: IDebugVsaScriptCodeItem
  children:
  - Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  - Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  langs:
  - csharp
  name: IDebugVsaScriptCodeItem
  nameWithType: IDebugVsaScriptCodeItem
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem
  type: Interface
  summary: "Definisce i metodi che valutano le espressioni e analizzare le stringhe. Questa interfaccia viene implementata in genere da un oggetto che rappresenta un blocco di codice, e viene in genere chiamato da un debugger. Questa interfaccia fornisce funzionalità aggiuntive che è necessario un host IActiveScript."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")]

      public interface IDebugVsaScriptCodeItem
  implements: []
  platform:
  - net462
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  id: Evaluate
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  langs:
  - csharp
  name: Evaluate()
  nameWithType: IDebugVsaScriptCodeItem.Evaluate()
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate()
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Quando viene implementato in una classe, valuta il blocco, espressione o istruzione rappresentata dall&quot;elemento di codice e restituisce il valore. In genere viene chiamato da un debugger che è necessario valutare un&quot;espressione (nella finestra Espressioni di controllo, ad esempio). Per le espressioni, il valore è il risultato dell&quot;espressione. Per istruzioni e blocchi, l&quot;espressione risulta è l&quot;ultima espressione calcolata per il blocco o l&quot;istruzione."
  remarks: "Si noti che il metodo Evaluate è funzionalmente identico al <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A>metodo.</xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> Solo gli attributi di marshalling diversi. Questa versione dell&quot;interfaccia consente a un debugger gestito ottenere il valore restituito come un `IUnknown` puntatore anziché `VARIANT`."
  syntax:
    content: public object Evaluate ();
    parameters: []
    return:
      type: System.Object
      description: "Restituisce un valore che rappresenta la valutazione dell&quot;istruzione, l&quot;espressione o blocco."
  overload: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  id: ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  langs:
  - csharp
  name: ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: 'Quando viene implementato in una classe, analizza le stringhe e restituisce le informazioni analizzato. Questo metodo viene chiamato in genere da un debugger che è necessario analizzare le informazioni su un punto di interruzione è rappresentato come un <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref>. Il debugger potrebbe avere un punto di interruzione digitato dall&quot;utente nel formato *nomefunzione-argomenti-ILoffset*. Nome di un punto di interruzione denominato può avere un formato complesso, ad esempio, `F.B(C.D[], int, arg : double ) : C.Abc + 123.` l&quot;elenco di parametri è facoltativo, come l&quot;offset IL.'
  syntax:
    content: public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);
    parameters:
    - id: input
      type: System.String
      description: "Una stringa di punto di interruzione denominato ben formato fornendo una funzione, elenco di argomenti facoltativi e l&quot;offset IL parametro facoltativo."
    - id: functionName
      type: System.String
      description: "Parametro out che restituisce il nome della funzione analizzato dalla stringa di input o una stringa vuota se la stringa di input non è corretto."
    - id: nargs
      type: System.Int32
      description: "Parametro out che restituisce il numero di argomenti nell&quot;elenco di argomenti facoltativi. Restituisce zero se è presente alcun elenco di argomenti o se la stringa non è corretto."
    - id: arguments
      type: System.String
      description: "Parametro out che restituisce un elenco separato da spazi dei nomi dei tipi di tutti gli argomenti nell&quot;elenco di argomenti, o una stringa vuota se l&quot;elenco di argomenti è manca o la stringa di input non è corretto."
    - id: returnType
      type: System.String
      description: "Parametro out che restituisce una stringa contenente il tipo restituito della funzione denominata nell&quot;input, o una stringa vuota se il tipo restituito è mancano oppure la stringa di input non è corretto."
    - id: offset
      type: System.UInt64
      description: "Intero lungo senza segno fornisce l&quot;offset IL dalla stringa di input oppure zero se non esiste alcun offset IL o la stringa non è corretto."
    return:
      type: System.Boolean
      description: "Restituisce <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> se il punto di interruzione denominato viene riconvertito correttamente, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> in caso contrario."
  overload: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: Evaluate()
  nameWithType: IDebugVsaScriptCodeItem.Evaluate()
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
  fullName: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(String,String,Int32,String,String,UInt64)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate*
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: Evaluate
  nameWithType: IDebugVsaScriptCodeItem.Evaluate
- uid: Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint*
  parent: Microsoft.JScript.IDebugVsaScriptCodeItem
  isExternal: false
  name: ParseNamedBreakPoint
  nameWithType: IDebugVsaScriptCodeItem.ParseNamedBreakPoint
