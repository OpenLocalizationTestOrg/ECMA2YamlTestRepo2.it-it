### YamlMime:ManagedReference
items:
- uid: System.Windows.CoerceValueCallback
  id: CoerceValueCallback
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
  type: Delegate
  summary: "Fornisce un modello per un metodo che viene chiamato ogni volta che un valore di proprietà di dipendenza viene rivalutato o coercizione specificamente richiesto."
  remarks: "I callback basati su CoerceValueCallback possono essere assegnati a una proprietà di dipendenza tramite alcune tecniche diverse. Ognuna di queste tecniche è necessario creare innanzitutto un nuovo oggetto di metadati di proprietà (<xref:System.Windows.PropertyMetadata>, o una classe derivata, ad esempio <xref:System.Windows.FrameworkPropertyMetadata>).</xref:System.Windows.FrameworkPropertyMetadata> </xref:System.Windows.PropertyMetadata> Creare l&quot;oggetto di metadati utilizzando una firma del costruttore che accetta il `coerceValueCallback` parametro e assegnare tale parametro al gestore del callback. O creare i metadati da qualsiasi firma e un set di <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>proprietà prima di portare i metadati in uso.</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       Quando si dispone di questi metadati, è possibile:-definire una nuova proprietà di dipendenza in una nuova classe, utilizzando la firma di <xref:System.Windows.DependencyProperty.Register%2A>, fornendo i metadati come il `typeMetadata` valore.</xref:System.Windows.DependencyProperty.Register%2A>      -Eseguire l&quot;override dei metadati (chiamare <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) per una proprietà di dipendenza esistente, quando si deriva dalla classe cui appartiene la proprietà di dipendenza.</xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>      -Aggiungere una proprietà di dipendenza esistente in una nuova <xref:System.Windows.DependencyObject>classe, utilizzando i nuovi metadati, chiamando <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> </xref:System.Windows.DependencyObject>       Le implementazioni di questo callback devono controllare il valore `baseValue` e determinare in base il valore o il tipo se si tratta di un valore che deve essere ulteriormente assegnato.       Il <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>per una dipendenza di proprietà viene richiamata ogni volta che il sistema di proprietà o altri chiamanti chiamano <xref:System.Windows.DependencyObject.CoerceValue%2A>su un <xref:System.Windows.DependencyObject>istanza, specificando l&quot;identificatore della proprietà come il `dp`.</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.CoerceValue%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       Le modifiche al valore della proprietà potrebbero provenire da un partecipante possibili nel sistema di proprietà. Sono inclusi gli stili, invalidazione generica, trigger, ereditarietà del valore di proprietà e impostazione del valore locale.       In genere, è consigliabile evitare di specificare più di una <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>per una determinata proprietà di dipendenza (si esegue l&quot;override o l&quot;aggiunta di nuovi metadati per una proprietà di dipendenza che dispone già di un <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> Solo uno dei callback sarà in grado di agire. Il callback che agisce sarà quello che è stato applicato alla classe più derivata nell&quot;ereditarietà rispetto al <xref:System.Windows.DependencyObject>chiamante.</xref:System.Windows.DependencyObject> Quando viene eseguito l&quot;override dei metadati, vengono sostituiti gli altri callback assegnati ai metadati per la proprietà di dipendenza esistenti superiore nella gerarchia del proprietario."
  example:
  - "The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value. In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] (not shown) to remove that dropdown from the effective choices.  \n  \n [!code-cs[DPCustom#CoerceValueCallback](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#coercevaluecallback)]\n [!code-vb[DPCustom#CoerceValueCallback](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#coercevaluecallback)]"
  syntax:
    content: public delegate object CoerceValueCallback(DependencyObject d, object baseValue);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
