### YamlMime:ManagedReference
items:
- uid: System.Collections.Hashtable
  id: Hashtable
  children:
  - System.Collections.Hashtable.#ctor
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  - System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  - System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  - System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.Add(System.Object,System.Object)
  - System.Collections.Hashtable.Clear
  - System.Collections.Hashtable.Clone
  - System.Collections.Hashtable.comparer
  - System.Collections.Hashtable.Contains(System.Object)
  - System.Collections.Hashtable.ContainsKey(System.Object)
  - System.Collections.Hashtable.ContainsValue(System.Object)
  - System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  - System.Collections.Hashtable.Count
  - System.Collections.Hashtable.EqualityComparer
  - System.Collections.Hashtable.GetEnumerator
  - System.Collections.Hashtable.GetHash(System.Object)
  - System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Hashtable.hcp
  - System.Collections.Hashtable.IsFixedSize
  - System.Collections.Hashtable.IsReadOnly
  - System.Collections.Hashtable.IsSynchronized
  - System.Collections.Hashtable.Item(System.Object)
  - System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  - System.Collections.Hashtable.Keys
  - System.Collections.Hashtable.OnDeserialization(System.Object)
  - System.Collections.Hashtable.Remove(System.Object)
  - System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  - System.Collections.Hashtable.SyncRoot
  - System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Hashtable.Values
  langs:
  - csharp
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
  type: Class
  summary: "Rappresenta una raccolta di coppie chiave/valore organizzate in base al codice hash della chiave.       Per esaminare il codice sorgente di .NET Framework per questo tipo, vedere il [origine riferimento](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)."
  remarks: "> [!NOTE]> Per visualizzare il codice sorgente di .NET Framework per questo tipo, vedere il [origine riferimento](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd). È possibile esplorare il codice sorgente online, scaricare i riferimenti per la visualizzazione offline e scorrere le origini (inclusi aggiornamenti e patch) durante l&quot;esecuzione del debug. vedere [istruzioni](http://referencesource.microsoft.com/).       Ogni elemento è una coppia chiave/valore archiviata in un <xref:System.Collections.DictionaryEntry>oggetto.</xref:System.Collections.DictionaryEntry> Non può essere una chiave `null`, ma può essere un valore.       Gli oggetti utilizzati come chiavi da una tabella hash sono necessarie per eseguire l&quot;override di <xref:System.Object.GetHashCode%2A?displayProperty=fullName>(metodo) (o <xref:System.Collections.IHashCodeProvider>interfaccia) e <xref:System.Object.Equals%2A?displayProperty=fullName>(metodo) (o <xref:System.Collections.IComparer>interfaccia).</xref:System.Collections.IComparer> </xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Collections.IHashCodeProvider> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> L&quot;implementazione di interfacce e metodi deve gestire distinzione maiuscole/minuscole allo stesso modo; in caso contrario, la tabella hash potrebbe funzionare in modo non corretto. Ad esempio, quando si crea una tabella hash, è necessario utilizzare il <xref:System.Collections.CaseInsensitiveHashCodeProvider>classe (o qualsiasi distinzione <xref:System.Collections.IHashCodeProvider>implementazione) con il <xref:System.Collections.CaseInsensitiveComparer>classe (o qualsiasi distinzione <xref:System.Collections.IComparer>implementazione).</xref:System.Collections.IComparer> </xref:System.Collections.CaseInsensitiveComparer> </xref:System.Collections.IHashCodeProvider> </xref:System.Collections.CaseInsensitiveHashCodeProvider>       Inoltre, è necessario che questi metodi producano gli stessi risultati quando viene chiamato con gli stessi parametri, mentre la chiave esiste nella tabella hash. In alternativa è possibile utilizzare un costruttore di tabella hash con un <xref:System.Collections.IEqualityComparer>parametro.</xref:System.Collections.IEqualityComparer> Se l&quot;uguaglianza delle chiavi è semplicemente un&quot;uguaglianza, l&quot;implementazione ereditata di <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>basterebbe.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Gli oggetti chiave devono essere non modificabili, come vengono utilizzati come chiavi nella tabella hash.       Quando si aggiunge un elemento per la tabella hash, l&quot;elemento viene posizionato in un bucket in base al codice hash della chiave. Le ricerche successive della chiave utilizzano il codice hash della chiave per la ricerca in un solo determinato bucket, riducendo notevolmente il numero di chiavi confronti necessari per trovare un elemento.       Il fattore di caricamento di una tabella hash determina il rapporto massimo tra elementi e bucket. Fattori di carico più piccolo causano tempi di tempi di ricerca medi aumentando tuttavia il consumo di memoria maggiore. Il fattore di carico predefinito pari a 1,0 in genere fornisce il migliore bilanciamento tra velocità e dimensioni. Un fattore di carico diversi può anche essere specificato quando viene creata la tabella hash.       Se gli elementi vengono aggiunti a un oggetto Hashtable, aumenta il fattore di carico effettivo della tabella hash. Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket nella tabella hash viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket di tabella hash.       Ogni oggetto chiave nella tabella hash deve fornire la propria funzione hash, che è possibile accedere chiamando <xref:System.Collections.Hashtable.GetHash%2A>.</xref:System.Collections.Hashtable.GetHash%2A> Tuttavia, qualsiasi oggetto che implementa <xref:System.Collections.IHashCodeProvider>può essere passato a un costruttore Hashtable e viene utilizzata la funzione hash per tutti gli oggetti nella tabella.</xref:System.Collections.IHashCodeProvider>       La capacità di una tabella hash è il numero di elementi che può contenere la tabella hash. Se gli elementi vengono aggiunti a una tabella hash, la capacità viene aumentata automaticamente in base alle necessità, tramite riallocazione.       Per gli oggetti Hashtable molto grandi, è possibile aumentare la capacità massima a 2 miliardi di elementi in un sistema a 64 bit impostando il `enabled` attributo dell&quot;elemento di configurazione per `true` nell&quot;ambiente di runtime.       Il `foreach` istruzione del linguaggio c# (`For Each` in Visual Basic) restituisce un oggetto di tipo degli elementi nella raccolta. Poiché ogni elemento della tabella hash è una coppia chiave/valore, il tipo di elemento non è il tipo della chiave o il tipo del valore. Al contrario, il tipo di elemento è <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Ad esempio: [!code-cpp [System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/cpp/t-system.collections.has_1.cpp)][!code-cs[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/csharp/t-system.collections.has_1.cs)][!code-vb[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/visualbasic/t-system.collections.has_1.vb) ] il `foreach` istruzione è un wrapper per l&quot;enumeratore, che consente solo di leggere da, non la scrittura, la raccolta.           Poiché la serializzazione e deserializzazione di un enumeratore per una tabella hash può causare i riordinamento degli elementi, non è possibile continuare l&quot;enumerazione senza chiamare il <xref:System.Collections.IEnumerator.Reset%2A>metodo.</xref:System.Collections.IEnumerator.Reset%2A>      > [!NOTE] > Perché le chiavi possono essere ereditate e modificato il comportamento, non può essere garantirne l&quot;univocità assoluta mediante confronti eseguiti utilizzando il <xref:System.Type.Equals%2A>metodo.</xref:System.Type.Equals%2A>"
  example:
  - "The following example shows how to create, initialize and perform various functions to a Hashtable and how to print out its keys and values.  \n  \n [!code-cpp[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/cpp/t-system.collections.has_2.cpp)]\n [!code-cs[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/csharp/t-system.collections.has_2.cs)]\n [!code-vb[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/visualbasic/t-system.collections.has_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Hashtable/HashtableDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class Hashtable : ICloneable, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor
  id: '#ctor'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable()
  nameWithType: Hashtable.Hashtable()
  fullName: System.Collections.Hashtable.Hashtable()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza vuota del <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando la capacità iniziale predefinita, il carico fattore, provider di codice hash e operatore di confronto."
  remarks: "Capacità di una tabella hash viene utilizzata per calcolare il numero ottimale di bucket nella tabella hash in base al fattore di carico. Viene incrementata automaticamente in base alle necessità.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il provider di codice hash fornisce codici hash per le chiavi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Questo costruttore è un&quot;operazione o (1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_4_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_4_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_4_1.vb)]"
  syntax:
    content: public Hashtable ();
    parameters: []
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary)
  nameWithType: Hashtable.Hashtable(IDictionary)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando gli elementi dal dizionario specificato nel nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto. Il nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto ha una capacità iniziale uguale al numero di elementi copiati e Usa il fattore di carico predefinito, provider di codice hash e l&quot;operatore di confronto."
  remarks: "La capacità iniziale è impostata per il numero di elementi nel dizionario di origine. E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il provider di codice hash fornisce codici hash per le chiavi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Gli elementi della nuova <xref:System.Collections.Hashtable>vengono ordinati nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.IDictionary>oggetto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi di `d` parametro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.has_1_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.has_1_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.has_1_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "Il <xref:System.Collections.IDictionary>oggetto da copiare in un nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto.</xref:System.Collections.IDictionary>"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza vuota del <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando la capacità iniziale predefinita e caricare i fattori e il valore specificato <xref:System.Collections.IEqualityComparer>oggetto.</xref:System.Collections.IEqualityComparer>"
  remarks: "Capacità di una tabella hash viene utilizzata per calcolare il numero ottimale di bucket nella tabella hash in base al fattore di carico. Viene incrementata automaticamente in base alle necessità.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il <xref:System.Collections.IEqualityComparer>oggetto include sia il provider di codice hash e l&quot;operatore di confronto.</xref:System.Collections.IEqualityComparer> Se un <xref:System.Collections.IEqualityComparer>viene utilizzata per il <xref:System.Collections.Hashtable>costruttore, gli oggetti utilizzati come chiavi nel <xref:System.Collections.Hashtable>oggetto non è necessario eseguire l&quot;override di <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>metodi.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Il provider di codice hash fornisce i codici hash per le chiavi in <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Il <xref:System.Collections.IEqualityComparer>consente scenari come eseguendo ricerche con distinzione tra maiuscole e stringhe.</xref:System.Collections.IEqualityComparer>       Questo costruttore è un&quot;operazione o (1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_5_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_5_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_5_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "Il <xref:System.Collections.IEqualityComparer>oggetto che definisce il provider di codice hash e l&quot;operatore di confronto da utilizzare con il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto.</xref:System.Collections.IEqualityComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> come utilizzare il provider di codice hash e l&quot;operatore di confronto predefinito. Il provider di codice hash predefinito è l&quot;implementazione di ogni chiave di &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e l&quot;operatore di confronto predefinito è l&quot;implementazione di ogni chiave di &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32)
  nameWithType: Hashtable.Hashtable(Int32)
  fullName: System.Collections.Hashtable.Hashtable(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza vuota del <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe utilizzando la capacità iniziale specificata e il fattore di carico predefinito, provider di codice hash e operatore di confronto."
  remarks: "Specificare la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il provider di codice hash fornisce i codici hash per le chiavi in <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è `capacity`."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.has_2_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.has_2_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.has_2_1.vb)]"
  syntax:
    content: public Hashtable (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Il numero approssimativo di elementi che la <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto può contenere inizialmente."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>è minore di zero."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando gli elementi dal dizionario specificato in un nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto. Il nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto ha una capacità iniziale uguale al numero di elementi copiati e Usa il fattore di carico predefinito e il valore specificato <xref:System.Collections.IEqualityComparer>oggetto.</xref:System.Collections.IEqualityComparer>"
  remarks: "La capacità iniziale è impostata per il numero di elementi nel dizionario di origine. E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il <xref:System.Collections.IEqualityComparer>oggetto include sia il provider di codice hash e l&quot;operatore di confronto.</xref:System.Collections.IEqualityComparer> Se un <xref:System.Collections.IEqualityComparer>viene utilizzata per il <xref:System.Collections.Hashtable>costruttore, gli oggetti utilizzati come chiavi nel <xref:System.Collections.Hashtable>oggetto non è necessario eseguire l&quot;override di <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>metodi.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Il provider di codice hash fornisce i codici hash per le chiavi in <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Il <xref:System.Collections.IEqualityComparer>consente scenari come eseguendo ricerche con distinzione tra maiuscole e stringhe.</xref:System.Collections.IEqualityComparer>       Gli elementi della nuova <xref:System.Collections.Hashtable>vengono ordinati nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.IDictionary>oggetto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi di `d` parametro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/81cd87de-02b7-42cc-8fdd-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/81cd87de-02b7-42cc-8fdd-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/81cd87de-02b7-42cc-8fdd-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "Il <xref:System.Collections.IDictionary>oggetto da copiare in un nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto.</xref:System.Collections.IDictionary>"
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "Il <xref:System.Collections.IEqualityComparer>oggetto che definisce il provider di codice hash e l&quot;operatore di confronto da utilizzare con il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> come utilizzare il provider di codice hash e l&quot;operatore di confronto predefinito. Il provider di codice hash predefinito è l&quot;implementazione di ogni chiave di &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e l&quot;operatore di confronto predefinito è l&quot;implementazione di ogni chiave di &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  id: '#ctor(System.Collections.IDictionary,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single)
  nameWithType: Hashtable.Hashtable(IDictionary,Single)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando gli elementi dal dizionario specificato nel nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto. Il nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto ha una capacità iniziale uguale al numero di elementi copiati e Usa il fattore di carico specificato e il provider di codice hash e l&quot;operatore di confronto."
  remarks: "La capacità iniziale è impostata per il numero di elementi nel dizionario di origine. E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria. Un fattore di carico pari a 1,0 è il migliore bilanciamento tra velocità e dimensioni.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il provider di codice hash fornisce codici hash per le chiavi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Gli elementi della nuova <xref:System.Collections.Hashtable>vengono ordinati nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.IDictionary>oggetto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi di `d` parametro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/fb1cfbc8-7454-4619-a6e7-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/fb1cfbc8-7454-4619-a6e7-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/fb1cfbc8-7454-4619-a6e7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "Il <xref:System.Collections.IDictionary>oggetto da copiare in un nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Un numero compreso nell&quot;intervallo da 0,1 a 1,0 moltiplicato per il valore predefinito, che offre le migliori prestazioni. Il risultato è il rapporto massimo tra elementi e bucket."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>è minore di 0,1.       - oppure - <code>loadFactor</code> è maggiore di 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza vuota del <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando la capacità iniziale predefinita e caricare fattore e il provider di codice hash e l&quot;operatore di confronto."
  remarks: "Capacità di una tabella hash viene utilizzata per calcolare il numero ottimale di bucket nella tabella hash in base al fattore di carico. Viene incrementata automaticamente in base alle necessità.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il provider di codice hash fornisce codici hash per le chiavi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Il provider di codice hash e l&quot;operatore di confronto consentono scenari, ad esempio eseguendo ricerche con distinzione tra maiuscole e stringhe.       Questo costruttore è un&quot;operazione o (1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/1ff65986-0234-4702-94b7-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/1ff65986-0234-4702-94b7-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/1ff65986-0234-4702-94b7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "Il <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> codici di oggetto che fornisce il valore hash per tutte le chiavi di <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto.       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare il provider di codice hash, che rappresenta l&quot;implementazione di ogni chiave di &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>oggetto da usare per determinare se due chiavi sono uguali.</xref:System.Collections.IComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare l&quot;operatore di confronto predefinito, ovvero l&quot;implementazione di ogni chiave di &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza vuota del <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando la capacità iniziale specificata e <xref:System.Collections.IEqualityComparer>e il fattore di carico.</xref:System.Collections.IEqualityComparer>"
  remarks: "Specificare la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il <xref:System.Collections.IEqualityComparer>oggetto include sia il provider di codice hash e l&quot;operatore di confronto.</xref:System.Collections.IEqualityComparer> Se un <xref:System.Collections.IEqualityComparer>viene utilizzata per il <xref:System.Collections.Hashtable>costruttore, gli oggetti utilizzati come chiavi nel <xref:System.Collections.Hashtable>non è necessario eseguire l&quot;override di <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>metodi.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Il provider di codice hash fornisce i codici hash per le chiavi in <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Il <xref:System.Collections.IEqualityComparer>consente scenari come eseguendo ricerche con distinzione tra maiuscole e stringhe.</xref:System.Collections.IEqualityComparer>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il `capacity` parametro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/5067e9ac-cd98-4da8-9418-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/5067e9ac-cd98-4da8-9418-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/5067e9ac-cd98-4da8-9418-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Il numero approssimativo di elementi che la <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto può contenere inizialmente."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "Il <xref:System.Collections.IEqualityComparer>oggetto che definisce il provider di codice hash e l&quot;operatore di confronto da utilizzare con il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> come utilizzare il provider di codice hash e l&quot;operatore di confronto predefinito. Il provider di codice hash predefinito è l&quot;implementazione di ogni chiave di &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e l&quot;operatore di confronto predefinito è l&quot;implementazione di ogni chiave di &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>è minore di zero."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  id: '#ctor(System.Int32,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single)
  nameWithType: Hashtable.Hashtable(Int32,Single)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza vuota del <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando la capacità iniziale specificata e caricare fattore e il provider di codice hash e l&quot;operatore di confronto."
  remarks: "Specificare la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria. Un fattore di carico pari a 1,0 è il migliore bilanciamento tra velocità e dimensioni.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il provider di codice hash fornisce i codici hash per le chiavi in <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il `capacity` parametro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/m-system.collections.has_8_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/m-system.collections.has_8_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/m-system.collections.has_8_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Il numero approssimativo di elementi che la <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto può contenere inizialmente."
    - id: loadFactor
      type: System.Single
      description: "Un numero compreso nell&quot;intervallo da 0,1 a 1,0 moltiplicato per il valore predefinito, che offre le migliori prestazioni. Il risultato è il rapporto massimo tra elementi e bucket."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>è minore di zero.       - oppure - <code>loadFactor</code> è minore di 0,1.       - oppure - <code>loadFactor</code> è maggiore di 1.0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>capacity</code>causa un overflow."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza vuota del <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe serializzabile utilizzando l&quot;oggetto specificato <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> e <xref:System.Runtime.Serialization.StreamingContext>oggetti.</xref:System.Runtime.Serialization.StreamingContext>"
  remarks: "Capacità di una tabella hash viene utilizzata per calcolare il numero ottimale di bucket nella tabella hash in base al fattore di carico. Viene incrementata automaticamente in base alle necessità.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il provider di codice hash fornisce codici hash per le chiavi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       Poiché la serializzazione e deserializzazione di un enumeratore per un <xref:System.Collections.Hashtable>può causare i riordinamento degli elementi, non è possibile continuare l&quot;enumerazione senza chiamare il <xref:System.Collections.IEnumerator.Reset%2A>metodo.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  syntax:
    content: protected Hashtable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Oggetto <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> oggetto contenente le informazioni necessarie per serializzare il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Oggetto <xref:System.Runtime.Serialization.StreamingContext>oggetto contenente l&quot;origine e destinazione del flusso serializzato associato il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando gli elementi dal dizionario specificato nel nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto. Il nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto ha una capacità iniziale uguale al numero di elementi copiati e Usa il fattore di carico predefinito e il provider di codice hash e l&quot;operatore di confronto. Questa API è obsoleta. Per un&quot;alternativa, vedere &lt;xref:System.Collections.Hashtable.%23ctor%2A&gt;."
  remarks: "La capacità iniziale è impostata per il numero di elementi nel dizionario di origine. E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il provider di codice hash fornisce codici hash per le chiavi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Il provider di codice hash e l&quot;operatore di confronto consentono scenari, ad esempio eseguendo ricerche con distinzione tra maiuscole e stringhe.       Gli elementi della nuova <xref:System.Collections.Hashtable>vengono ordinati nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.IDictionary>oggetto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi di `d` parametro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/9a30e378-7c34-4854-b12f-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/9a30e378-7c34-4854-b12f-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/9a30e378-7c34-4854-b12f-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "Il <xref:System.Collections.IDictionary>oggetto da copiare in un nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto.</xref:System.Collections.IDictionary>"
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "Il <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> codici di oggetto che fornisce il valore hash per tutte le chiavi di <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare il provider di codice hash, che rappresenta l&quot;implementazione di ogni chiave di &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>oggetto da usare per determinare se due chiavi sono uguali.</xref:System.Collections.IComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare l&quot;operatore di confronto predefinito, ovvero l&quot;implementazione di ogni chiave di &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando gli elementi dal dizionario specificato nel nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto. Il nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto ha una capacità iniziale uguale al numero di elementi copiati e Usa il fattore di carico e <xref:System.Collections.IEqualityComparer>oggetto.</xref:System.Collections.IEqualityComparer>"
  remarks: "La capacità iniziale è impostata per il numero di elementi nel dizionario di origine. E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria. Un fattore di carico pari a 1,0 è il migliore bilanciamento tra velocità e dimensioni.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il <xref:System.Collections.IEqualityComparer>oggetto include sia il provider di codice hash e l&quot;operatore di confronto.</xref:System.Collections.IEqualityComparer> Se un <xref:System.Collections.IEqualityComparer>viene utilizzata per il <xref:System.Collections.Hashtable>costruttore, gli oggetti utilizzati come chiavi nel <xref:System.Collections.Hashtable>oggetto non è necessario eseguire l&quot;override di <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>metodi.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Il provider di codice hash fornisce i codici hash per le chiavi in <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Il <xref:System.Collections.IEqualityComparer>consente scenari come eseguendo ricerche con distinzione tra maiuscole e stringhe.</xref:System.Collections.IEqualityComparer>       Gli elementi della nuova <xref:System.Collections.Hashtable>vengono ordinati nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.IDictionary>oggetto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi di `d` parametro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/a92f83be-9de4-470a-8cbb-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/a92f83be-9de4-470a-8cbb-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/a92f83be-9de4-470a-8cbb-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "Il <xref:System.Collections.IDictionary>oggetto da copiare in un nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Un numero compreso nell&quot;intervallo da 0,1 a 1,0 moltiplicato per il valore predefinito, che offre le migliori prestazioni. Il risultato è il rapporto massimo tra elementi e bucket."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "Il <xref:System.Collections.IEqualityComparer>oggetto che definisce il provider di codice hash e l&quot;operatore di confronto da utilizzare con il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> come utilizzare il provider di codice hash e l&quot;operatore di confronto predefinito. Il provider di codice hash predefinito è l&quot;implementazione di ogni chiave di &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e l&quot;operatore di confronto predefinito è l&quot;implementazione di ogni chiave di &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>è minore di 0,1.       - oppure - <code>loadFactor</code> è maggiore di 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza vuota del <xref href=&quot;System.Collections.Hashtable&quot;> </xref> usando la capacità iniziale specificata, il provider di codice hash, operatore di confronto e il fattore di carico."
  remarks: "Specificare la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il provider di codice hash fornisce i codici hash per le chiavi in <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Il provider di codice hash e l&quot;operatore di confronto consentono scenari, ad esempio eseguendo ricerche con distinzione tra maiuscole e stringhe.       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il `capacity` parametro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/2154dba0-3cc6-41f7-aa9b-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/2154dba0-3cc6-41f7-aa9b-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/2154dba0-3cc6-41f7-aa9b-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Il numero approssimativo di elementi che la <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto può contenere inizialmente."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "Il <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> codici di oggetto che fornisce il valore hash per tutte le chiavi di <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare il provider di codice hash, che rappresenta l&quot;implementazione di ogni chiave di &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>oggetto da usare per determinare se due chiavi sono uguali.</xref:System.Collections.IComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare l&quot;operatore di confronto predefinito, ovvero l&quot;implementazione di ogni chiave di &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>è minore di zero."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza vuota del <xref href=&quot;System.Collections.Hashtable&quot;> </xref> usando la capacità iniziale specificata, il fattore di carico e <xref:System.Collections.IEqualityComparer>oggetto.</xref:System.Collections.IEqualityComparer>"
  remarks: "Specificare la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria. Un fattore di carico pari a 1,0 è il migliore bilanciamento tra velocità e dimensioni.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il <xref:System.Collections.IEqualityComparer>oggetto include sia il provider di codice hash e l&quot;operatore di confronto.</xref:System.Collections.IEqualityComparer> Se un <xref:System.Collections.IEqualityComparer>viene utilizzata per il <xref:System.Collections.Hashtable>costruttore, gli oggetti utilizzati come chiavi nel <xref:System.Collections.Hashtable>non è necessario eseguire l&quot;override di <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>metodi.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Il provider di codice hash fornisce i codici hash per le chiavi in <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Il <xref:System.Collections.IEqualityComparer>consente scenari come eseguendo ricerche con distinzione tra maiuscole e stringhe.</xref:System.Collections.IEqualityComparer>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il `capacity` parametro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/30b60c47-7bce-44a2-8d17-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/30b60c47-7bce-44a2-8d17-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/30b60c47-7bce-44a2-8d17-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Il numero approssimativo di elementi che la <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto può contenere inizialmente."
    - id: loadFactor
      type: System.Single
      description: "Un numero compreso nell&quot;intervallo da 0,1 a 1,0 moltiplicato per il valore predefinito, che offre le migliori prestazioni. Il risultato è il rapporto massimo tra elementi e bucket."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "Il <xref:System.Collections.IEqualityComparer>oggetto che definisce il provider di codice hash e l&quot;operatore di confronto da utilizzare con il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> come utilizzare il provider di codice hash e l&quot;operatore di confronto predefinito. Il provider di codice hash predefinito è l&quot;implementazione di ogni chiave di &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; e l&quot;operatore di confronto predefinito è l&quot;implementazione di ogni chiave di &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>è minore di zero.       - oppure - <code>loadFactor</code> è minore di 0,1.       - oppure - <code>loadFactor</code> è maggiore di 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe copiando gli elementi dal dizionario specificato nel nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto. Il nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto ha una capacità iniziale uguale al numero di elementi copiati e Usa il fattore di carico, un provider di codice hash e un operatore di confronto."
  remarks: "La capacità iniziale è impostata per il numero di elementi nel dizionario di origine. E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria. Un fattore di carico pari a 1,0 è il migliore bilanciamento tra velocità e dimensioni.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il provider di codice hash fornisce codici hash per le chiavi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Il provider di codice hash e l&quot;operatore di confronto consentono scenari, ad esempio eseguendo ricerche con distinzione tra maiuscole e stringhe.       Gli elementi della nuova <xref:System.Collections.Hashtable>vengono ordinati nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.IDictionary>oggetto.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi di `d` parametro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/c67b166f-bc6a-49e5-9bd7-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/c67b166f-bc6a-49e5-9bd7-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/c67b166f-bc6a-49e5-9bd7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "Il <xref:System.Collections.IDictionary>oggetto da copiare in un nuovo <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Un numero compreso nell&quot;intervallo da 0,1 a 1,0 moltiplicato per il valore predefinito, che offre le migliori prestazioni. Il risultato è il rapporto massimo tra elementi e bucket."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "Il <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> codici di oggetto che fornisce il valore hash per tutte le chiavi di <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare il provider di codice hash, che rappresenta l&quot;implementazione di ogni chiave di &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>oggetto da usare per determinare se due chiavi sono uguali.</xref:System.Collections.IComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare l&quot;operatore di confronto predefinito, ovvero l&quot;implementazione di ogni chiave di &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>è minore di 0,1.       - oppure - <code>loadFactor</code> è maggiore di 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza vuota del <xref href=&quot;System.Collections.Hashtable&quot;> </xref> classe usando la capacità iniziale specificata, il carico fattore, provider di codice hash e operatore di confronto."
  remarks: "Specificare la capacità iniziale Elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi di <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable> E viene automaticamente aumentato come richiesto in base al fattore di carico.       Il fattore di carico è il rapporto massimo tra elementi e bucket. Un fattore di carico inferiore determina tempi di ricerca al costo di maggiore utilizzo di memoria. Un fattore di carico pari a 1,0 è il migliore bilanciamento tra velocità e dimensioni.       Quando il fattore di carico effettivo raggiunge il fattore di carico, il numero di bucket viene automaticamente aumentato al più piccolo numero primo maggiore di due volte il numero corrente di bucket.       Il provider di codice hash fornisce i codici hash per le chiavi in <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Il provider di codice hash predefinito è l&quot;implementazione della chiave <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       L&quot;operatore di confronto determina se due chiavi sono uguali. Ogni chiave in un <xref:System.Collections.Hashtable>deve essere univoco.</xref:System.Collections.Hashtable> Operatore di confronto predefinito è l&quot;implementazione della chiave <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Il provider di codice hash e l&quot;operatore di confronto consentono scenari, ad esempio eseguendo ricerche con distinzione tra maiuscole e stringhe.       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il `capacity` parametro."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/86ed2545-c9ee-4654-a1a4-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/86ed2545-c9ee-4654-a1a4-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/86ed2545-c9ee-4654-a1a4-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Il numero approssimativo di elementi che la <xref href=&quot;System.Collections.Hashtable&quot;> </xref> oggetto può contenere inizialmente."
    - id: loadFactor
      type: System.Single
      description: "Un numero compreso nell&quot;intervallo da 0,1 a 1,0 moltiplicato per il valore predefinito, che offre le migliori prestazioni. Il risultato è il rapporto massimo tra elementi e bucket."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "Il <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> codici di oggetto che fornisce il valore hash per tutte le chiavi di <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare il provider di codice hash, che rappresenta l&quot;implementazione di ogni chiave di &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>oggetto da usare per determinare se due chiavi sono uguali.</xref:System.Collections.IComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare l&quot;operatore di confronto predefinito, ovvero l&quot;implementazione di ogni chiave di &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>è minore di zero.       - oppure - <code>loadFactor</code> è minore di 0,1.       - oppure - <code>loadFactor</code> è maggiore di 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: Hashtable.Add(Object,Object)
  fullName: System.Collections.Hashtable.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aggiunge un elemento con la chiave specificata e il valore di <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Non può essere una chiave `null`, ma può essere un valore.       Oggetto che non dispone di alcuna correlazione tra il proprio stato e il relativo valore di codice hash deve in genere non utilizzabile come chiave. Ad esempio, gli oggetti stringa sono migliori rispetto agli oggetti StringBuilder per l&quot;utilizzo come chiavi.       È inoltre possibile utilizzare il <xref:System.Collections.Hashtable.Item%2A>proprietà per aggiungere nuovi elementi impostando il valore di una chiave che non esiste nel <xref:System.Collections.Hashtable>, ad esempio `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable.Item%2A> Tuttavia, se la chiave specificata esiste già nel <xref:System.Collections.Hashtable>, impostando il <xref:System.Collections.Hashtable.Item%2A>proprietà sovrascrive il vecchio valore.</xref:System.Collections.Hashtable.Item%2A> </xref:System.Collections.Hashtable> Al contrario, il metodo Add di non modificare gli elementi esistenti.       Se <xref:System.Collections.Hashtable.Count%2A>è inferiore alla capacità del <xref:System.Collections.Hashtable>, questo metodo è un&quot;operazione o (1).</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable.Count%2A> Se la capacità deve essere incrementata per far posto al nuovo elemento, questo metodo diventa un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to add elements to the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Add Example#1](~/add/codesnippet/cpp/m-system.collections.has_6_1.cpp)]\n [!code-cs[Classic Hashtable.Add Example#1](~/add/codesnippet/csharp/m-system.collections.has_6_1.cs)]\n [!code-vb[Classic Hashtable.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_6_1.vb)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "Chiave dell&quot;elemento da aggiungere."
    - id: value
      type: System.Object
      description: "Il valore dell&quot;elemento da aggiungere. Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Un elemento con la stessa chiave esiste già nel <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.Hashtable&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.Hashtable.Clear
  id: Clear
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Clear()
  nameWithType: Hashtable.Clear()
  fullName: System.Collections.Hashtable.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove tutti gli elementi dal <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "<xref:System.Collections.Hashtable.Count%2A>è impostato su zero e vengono rilasciati anche i riferimenti ad altri oggetti da elementi della raccolta.</xref:System.Collections.Hashtable.Count%2A> La capacità rimane invariata.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to clear the values of the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.has_10_1.cpp)]\n [!code-vb[Classic Hashtable.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_10_1.vb)]\n [!code-cs[Classic Hashtable.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.has_10_1.cs)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.Hashtable.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> è di sola lettura."
  platform:
  - net462
- uid: System.Collections.Hashtable.Clone
  id: Clone
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Clone()
  nameWithType: Hashtable.Clone()
  fullName: System.Collections.Hashtable.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Crea una copia superficiale del <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Una copia superficiale di un insieme copia solo gli elementi della raccolta, indipendentemente che siano tipi riferimento o tipi di valore, ma non copia gli oggetti che fanno riferimento i riferimenti a. I riferimenti nella nuova raccolta puntano agli stessi oggetti che puntano i riferimenti nella raccolta originale.       Al contrario, una copia completa di una raccolta copia gli elementi e tutti gli elementi direttamente o indirettamente a cui fa riferimento gli elementi.       Il <xref:System.Collections.Hashtable>clone ha lo stesso conteggio, la stessa capacità, la stessa <xref:System.Collections.IHashCodeProvider>implementazione e la stessa <xref:System.Collections.IComparer>implementazione originale <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.IComparer> </xref:System.Collections.IHashCodeProvider> </xref:System.Collections.Hashtable>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Una copia dei riferimenti di <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.comparer
  id: comparer
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: comparer
  nameWithType: Hashtable.comparer
  fullName: System.Collections.Hashtable.comparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene o imposta il <xref:System.Collections.IComparer>da utilizzare per il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IComparer>"
  remarks: "Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: protected System.Collections.IComparer comparer { get; set; }
    return:
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>da utilizzare per il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IComparer>"
  overload: System.Collections.Hashtable.comparer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La proprietà è impostata su un valore, ma la tabella hash è stata creata utilizzando un <xref:System.Collections.IEqualityComparer>.</xref:System.Collections.IEqualityComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: Hashtable.Contains(Object)
  fullName: System.Collections.Hashtable.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contiene una chiave specifica."
  remarks: "Contiene implementa <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> Si comporta esattamente come <xref:System.Collections.Hashtable.ContainsKey%2A>.</xref:System.Collections.Hashtable.ContainsKey%2A>       Questo metodo è un&quot;operazione o (1).       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_12_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_12_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Chiave da individuare nel <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contiene un elemento con l&quot;oggetto chiave; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: Hashtable.ContainsKey(Object)
  fullName: System.Collections.Hashtable.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contiene una chiave specifica."
  remarks: "Questo metodo funziona esattamente come <xref:System.Collections.Hashtable.Contains%2A>.</xref:System.Collections.Hashtable.Contains%2A>       Questo metodo è un&quot;operazione o (1).       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_7_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_7_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_7_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Chiave da individuare nel <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contiene un elemento con l&quot;oggetto chiave; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: Hashtable.ContainsValue(Object)
  fullName: System.Collections.Hashtable.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contiene un valore specifico."
  remarks: "I valori degli elementi del <xref:System.Collections.Hashtable>vengono confrontati con il valore specificato utilizzando il <xref:System.Object.Equals%2A?displayProperty=fullName>metodo.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Collections.Hashtable>       Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_9_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_9_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_9_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Il valore da individuare nella <xref href=&quot;System.Collections.Hashtable&quot;> </xref>. Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> contiene un elemento con la proprietà specificata <code> value </code>; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: Hashtable.CopyTo(Array,Int32)
  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copie di <xref href=&quot;System.Collections.Hashtable&quot;> </xref> elementi in un oggetto unidimensionale <xref:System.Array>istanza in corrispondenza dell&quot;indice specificato.</xref:System.Array>"
  remarks: "Gli elementi vengono copiati lo <xref:System.Array>nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Array>       Per copiare solo le chiavi di <xref:System.Collections.Hashtable>, utilizzare `Hashtable.Keys.CopyTo`.</xref:System.Collections.Hashtable>       Per copiare solo i valori di <xref:System.Collections.Hashtable>, utilizzare `Hashtable.Values.CopyTo`.</xref:System.Collections.Hashtable>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to copy the list of keys or the list of values in a <xref:System.Collections.Hashtable> into a one-dimensional <xref:System.Array>.  \n  \n [!code-cs[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.has_0_1.cs)]\n [!code-vb[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_0_1.vb)]\n [!code-cpp[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.has_0_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "Oggetto unidimensionale <xref:System.Array>che rappresenta la destinazione del <xref:System.Collections.DictionaryEntry>oggetti copiati dal <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> Il <xref:System.Array>deve avere un&quot;indicizzazione in base zero.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "Indice in base zero `array` da cui avviare la copia."
  overload: System.Collections.Hashtable.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>è multidimensionale.       - oppure - il numero di elementi nell&quot;origine <xref href=&quot;System.Collections.Hashtable&quot;> </xref> è maggiore dello spazio disponibile da <code>arrayIndex</code> alla fine della destinazione <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Il tipo di origine <xref href=&quot;System.Collections.Hashtable&quot;> </xref> non può essere eseguire automaticamente il cast al tipo della destinazione <code> array </code>."
  platform:
  - net462
- uid: System.Collections.Hashtable.Count
  id: Count
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Count
  nameWithType: Hashtable.Count
  fullName: System.Collections.Hashtable.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene il numero di coppie chiave/valore contenute nel <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Il numero di coppie chiave/valore contenute nel <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.EqualityComparer
  id: EqualityComparer
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
  fullName: System.Collections.Hashtable.EqualityComparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene il <xref:System.Collections.IEqualityComparer>da utilizzare per il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>"
  remarks: "Il <xref:System.Collections.IEqualityComparer>include sia l&quot;operatore di confronto e il provider di codice hash.</xref:System.Collections.IEqualityComparer> Se un <xref:System.Collections.IEqualityComparer>viene utilizzata per il <xref:System.Collections.Hashtable>costruttore, gli oggetti utilizzati come chiavi nel <xref:System.Collections.Hashtable>non è necessario eseguire l&quot;override di <xref:System.Object.GetHashCode%2A?displayProperty=fullName>e <xref:System.Object.Equals%2A?displayProperty=fullName>metodi.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: protected System.Collections.IEqualityComparer EqualityComparer { get; }
    return:
      type: System.Collections.IEqualityComparer
      description: "Il <xref:System.Collections.IEqualityComparer>da utilizzare per il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>"
  overload: System.Collections.Hashtable.EqualityComparer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La proprietà è impostata su un valore, ma la tabella hash è stata creata con un <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> e un <xref:System.Collections.IComparer>.</xref:System.Collections.IComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Hashtable.GetEnumerator()
  fullName: System.Collections.Hashtable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un <xref:System.Collections.IDictionaryEnumerator>che scorre la <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "[Visual Basic, c#]       Il `foreach` istruzione del linguaggio c# (`for each` in Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, l&quot;utilizzo `foreach` è consigliabile, anziché la modifica diretta dell&quot;enumeratore.       È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non possono essere utilizzati per modificare la raccolta sottostante.       Inizialmente l&quot;enumeratore è posizionato prima del primo elemento nella raccolta. <xref:System.Collections.IEnumerator.Reset%2A>riporta l&quot;enumeratore in questa posizione.</xref:System.Collections.IEnumerator.Reset%2A>  In questa posizione, <xref:System.Collections.IEnumerator.Current%2A>è definito.</xref:System.Collections.IEnumerator.Current%2A> Pertanto, è necessario chiamare <xref:System.Collections.IEnumerator.MoveNext%2A>per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Restituisce lo stesso oggetto finché non <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>viene chiamato.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>imposta <xref:System.Collections.IEnumerator.Current%2A>all&quot;elemento successivo.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>raggiunge la fine della raccolta, l&quot;enumeratore è posizionato dopo l&quot;ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A>restituisce `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando l&quot;enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A>restituire anche `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se l&quot;ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>restituito `false`, <xref:System.Collections.IEnumerator.Current%2A>è definito.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Per impostare <xref:System.Collections.IEnumerator.Current%2A>il primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A>seguito dal <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l&quot;enumeratore viene invalidato e il relativo comportamento sarà indefinito.       L&quot;enumeratore non dispone di accesso esclusivo alla raccolta. Pertanto, l&quot;enumerazione di una raccolta non è quindi una procedura thread-safe.  Per garantire la protezione dei thread durante l&quot;enumerazione, è possibile bloccare la raccolta per l&quot;intera enumerazione.  Per consentire la raccolta a cui accedere da più thread per la lettura e scrittura, è necessario implementare la propria sincronizzazione.       Questo metodo è un&quot;operazione o (1).       Poiché la serializzazione e deserializzazione di un enumeratore per un <xref:System.Collections.Hashtable>può causare i riordinamento degli elementi, non è possibile continuare l&quot;enumerazione senza chiamare il <xref:System.Collections.IEnumerator.Reset%2A>metodo.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  example:
  - "The following example compares the use of GetEnumerator and `foreach` to enumerate the contents of a <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable Example#2](~/add/codesnippet/cpp/m-system.collections.has_3_1.cpp)]\n [!code-cs[Classic Hashtable Example#2](~/add/codesnippet/csharp/m-system.collections.has_3_1.cs)]\n [!code-vb[Classic Hashtable Example#2](~/add/codesnippet/visualbasic/m-system.collections.has_3_1.vb)]"
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=&quot;System.Collections.Hashtable&quot;></xref>.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Hashtable.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.GetHash(System.Object)
  id: GetHash(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetHash(Object)
  nameWithType: Hashtable.GetHash(Object)
  fullName: System.Collections.Hashtable.GetHash(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce il codice hash per la chiave specificata."
  remarks: "Se la tabella hash è stata creata con uno specifico <xref:System.Collections.IHashCodeProvider>implementazione, questo metodo utilizza il provider di codice hash; in caso contrario, viene utilizzato il <xref:System.Object.GetHashCode%2A?displayProperty=fullName>implementazione di `key`.</xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.IHashCodeProvider>       Questo metodo è un&quot;operazione o (1)."
  syntax:
    content: protected virtual int GetHash (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Il <xref:System.Object>per cui deve essere restituito un codice hash.</xref:System.Object>"
    return:
      type: System.Int32
      description: "Il codice hash per <code> key </code>."
  overload: System.Collections.Hashtable.GetHash*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Implementa il <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> l&quot;interfaccia e restituisce i dati necessari per serializzare il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Oggetto <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> oggetto contenente le informazioni necessarie per serializzare il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Oggetto <xref:System.Runtime.Serialization.StreamingContext>oggetto contenente l&quot;origine e destinazione del flusso serializzato associato il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Collections.Hashtable.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La raccolta è stata modificata."
  platform:
  - net462
- uid: System.Collections.Hashtable.hcp
  id: hcp
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: hcp
  nameWithType: Hashtable.hcp
  fullName: System.Collections.Hashtable.hcp
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene o imposta l&quot;oggetto che può essere distribuiti i codici hash."
  remarks: "Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: protected System.Collections.IHashCodeProvider hcp { get; set; }
    return:
      type: System.Collections.IHashCodeProvider
      description: "Oggetto che può essere distribuiti i codici hash."
  overload: System.Collections.Hashtable.hcp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La proprietà è impostata su un valore, ma la tabella hash è stata creata utilizzando un <xref:System.Collections.IEqualityComparer>.</xref:System.Collections.IEqualityComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
  fullName: System.Collections.Hashtable.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> ha dimensioni fisse."
  remarks: "Una raccolta con dimensioni fisse non consente l&quot;aggiunta o la rimozione di elementi dopo la sua creazione, ma consente la modifica degli elementi esistenti.       Una raccolta con una dimensione fissa è semplicemente una raccolta con un wrapper che impedisce l&quot;aggiunta e rimozione di elementi. Pertanto, se vengono apportate modifiche alla raccolta sottostante, incluse l&quot;aggiunta o la rimozione di elementi, la raccolta a dimensione fissa riflette le modifiche.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> sono fisse dimensioni; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
  fullName: System.Collections.Hashtable.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> è di sola lettura."
  remarks: "Una raccolta di sola lettura non consente l&quot;aggiunta, rimozione o modifica di elementi dopo la sua creazione.       Una raccolta di sola lettura è semplicemente una raccolta con un wrapper che impedisce la modifica. Pertanto, se vengono apportate modifiche alla raccolta sottostante, la raccolta di sola lettura riflette le modifiche.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> è di sola lettura; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
  fullName: System.Collections.Hashtable.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se l&quot;accesso per il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> è sincronizzato (thread-safe)."
  remarks: "Oggetto <xref:System.Collections.Hashtable>può supportare un writer e più lettori contemporaneamente.</xref:System.Collections.Hashtable> Per supportare più writer, tutte le operazioni devono essere eseguite tramite il wrapper restituito dal <xref:System.Collections.Hashtable.Synchronized%2A>metodo.</xref:System.Collections.Hashtable.Synchronized%2A>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.       Esempio di codice seguente viene illustrato come bloccare la raccolta utilizzando la <xref:System.Collections.Hashtable.SyncRoot%2A>durante l&quot;intera enumerazione: [!code-cpp [classico Hashtable.IsSynchronized esempio n.&2;](~/add/codesnippet/cpp/p-system.collections.has_1_1.cpp)][!code-vb[classico Hashtable.IsSynchronized esempio n.&2;](~/add/codesnippet/visualbasic/p-system.collections.has_1_1.vb)][!code-cs[classico Hashtable.IsSynchronized esempio n.&2;](~/add/codesnippet/csharp/p-system.collections.has_1_1.cs) ]     </xref:System.Collections.Hashtable.SyncRoot%2A>"
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \n  \n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.has_1_2.cs)]\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.has_1_2.cpp)]\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.has_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;accesso al <xref href=&quot;System.Collections.Hashtable&quot;> </xref> è sincronizzato (thread-safe); in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Item(Object)
  nameWithType: Hashtable.Item(Object)
  fullName: System.Collections.Hashtable.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene o imposta il valore associato alla chiave specificata."
  remarks: "Questa proprietà consente di accedere a un elemento specifico nella raccolta utilizzando la sintassi seguente: `myCollection[key]`.       È inoltre possibile utilizzare la proprietà dell&quot;elemento per aggiungere nuovi elementi impostando il valore di una chiave che non esiste nel <xref:System.Collections.Hashtable>, ad esempio `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Hashtable> Tuttavia, se la chiave specificata esiste già nel <xref:System.Collections.Hashtable>, impostando la proprietà dell&quot;elemento sovrascrive il vecchio valore.</xref:System.Collections.Hashtable> Al contrario, il <xref:System.Collections.Hashtable.Add%2A>metodo non modifica gli elementi esistenti.</xref:System.Collections.Hashtable.Add%2A>       Non può essere una chiave `null`, ma può essere un valore. Per distinguere tra `null` restituito perché non è stata trovata la chiave specificata e `null` restituito perché il valore della chiave specificata è `null`, utilizzare il <xref:System.Collections.Hashtable.Contains%2A>metodo o <xref:System.Collections.Hashtable.ContainsKey%2A>per determinare se la chiave è presente nell&quot;elenco.</xref:System.Collections.Hashtable.ContainsKey%2A> </xref:System.Collections.Hashtable.Contains%2A>       Il recupero del valore di questa proprietà è un&quot;operazione o (1). l&quot;impostazione della proprietà è un&quot;operazione o (1).       Nel linguaggio c# viene utilizzata la parola chiave per definire gli indicizzatori anziché implementare la <xref:System.Collections.IList.Item%2A>proprietà.</xref:System.Collections.IList.Item%2A> Visual Basic implementa elemento come una proprietà predefinita, che fornisce la stessa funzionalità di indicizzazione."
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "La chiave il cui valore da ottenere o impostare."
    return:
      type: System.Object
      description: "Il valore associato alla chiave specificata. Se la chiave specificata non viene trovata, tentando di ottenerla viene restituito <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, mentre tentando di impostarla viene creato un nuovo elemento con la chiave specificata."
  overload: System.Collections.Hashtable.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "La proprietà è impostata e <xref href=&quot;System.Collections.Hashtable&quot;> </xref> è di sola lettura.       - oppure - la proprietà è impostata, <code> key </code> non esiste nella raccolta e <xref href=&quot;System.Collections.Hashtable&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  id: KeyEquals(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: KeyEquals(Object,Object)
  nameWithType: Hashtable.KeyEquals(Object,Object)
  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Confronta un oggetto specifico <xref:System.Object>con una chiave specifica nella <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Object>"
  remarks: "Se la tabella hash è stata creata con uno specifico <xref:System.Collections.IComparer>implementazione, questo metodo utilizza tale operatore di confronto; ovvero, <xref:System.Collections.IComparer.Compare%2A>(`item`, `key`).</xref:System.Collections.IComparer.Compare%2A> </xref:System.Collections.IComparer> In caso contrario, viene utilizzato `item.Equals(key)`.       Questo metodo è un&quot;operazione o (1)."
  syntax:
    content: protected virtual bool KeyEquals (object item, object key);
    parameters:
    - id: item
      type: System.Object
      description: "Il <xref:System.Object>da confrontare con `key`.</xref:System.Object>"
    - id: key
      type: System.Object
      description: "La chiave di <xref href=&quot;System.Collections.Hashtable&quot;> </xref> da confrontare con `item`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> and <code>key</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Hashtable.KeyEquals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>item</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.Keys
  id: Keys
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Keys
  nameWithType: Hashtable.Keys
  fullName: System.Collections.Hashtable.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un <xref:System.Collections.ICollection>contenente le chiavi di <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "L&quot;ordine delle chiavi nel <xref:System.Collections.ICollection>non è specificato, ma è stesso ordine dei valori associati nel <xref:System.Collections.ICollection>restituito dal <xref:System.Collections.Hashtable.Values%2A>metodo.</xref:System.Collections.Hashtable.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       L&quot;oggetto restituito <xref:System.Collections.ICollection>non è una copia statica, bensì <xref:System.Collections.ICollection>fa riferimento alle chiavi nell&quot;originale <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Modifiche <xref:System.Collections.Hashtable>apportate in <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Hashtable>       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Un <xref:System.Collections.ICollection>contenente le chiavi di <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Hashtable.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: Hashtable.OnDeserialization(Object)
  fullName: System.Collections.Hashtable.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Implementa il <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> l&quot;interfaccia e genera l&quot;evento di deserializzazione quando la deserializzazione è completa."
  remarks: "Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       Poiché la serializzazione e deserializzazione di un enumeratore per un <xref:System.Collections.Hashtable>può causare i riordinamento degli elementi, non è possibile continuare l&quot;enumerazione senza chiamare il <xref:System.Collections.IEnumerator.Reset%2A>metodo.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  syntax:
    content: public virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "Origine dell&quot;evento di deserializzazione."
  overload: System.Collections.Hashtable.OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "Il <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> oggetto associato all&quot;oggetto corrente <xref href=&quot;System.Collections.Hashtable&quot;> </xref> non è valido."
  platform:
  - net462
- uid: System.Collections.Hashtable.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: Hashtable.Remove(Object)
  fullName: System.Collections.Hashtable.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove l&quot;elemento con la chiave specificata dal <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Se il <xref:System.Collections.Hashtable>non contiene un elemento con la chiave specificata, il <xref:System.Collections.Hashtable>rimane invariato.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> Viene generata alcuna eccezione.       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following example shows how to remove elements from the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.has_13_1.cpp)]\n [!code-cs[Classic Hashtable.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.has_13_1.cs)]\n [!code-vb[Classic Hashtable.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_13_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Chiave dell&quot;elemento da rimuovere."
  overload: System.Collections.Hashtable.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.Hashtable&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  id: Synchronized(System.Collections.Hashtable)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Synchronized(Hashtable)
  nameWithType: Hashtable.Synchronized(Hashtable)
  fullName: System.Collections.Hashtable.Synchronized(Hashtable)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un wrapper sincronizzato (thread-safe) per il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Il metodo sincronizzato è thread-safe per più lettori e writer. Inoltre, il wrapper sincronizzato assicura che sia presente un solo writer, la scrittura in un momento.       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.       Esempio di codice seguente viene illustrato come bloccare la raccolta utilizzando la <xref:System.Collections.Hashtable.SyncRoot%2A>durante l&quot;intera enumerazione: [!code-cpp [classico Hashtable.IsSynchronized esempio n.&2;](~/add/codesnippet/cpp/m-system.collections.has_11_1.cpp)][!code-vb[classico Hashtable.IsSynchronized esempio n.&2;](~/add/codesnippet/visualbasic/m-system.collections.has_11_1.vb)][!code-cs[classico Hashtable.IsSynchronized esempio n.&2;](~/add/codesnippet/csharp/m-system.collections.has_11_1.cs) ] questo metodo è un&quot;operazione o (1).    </xref:System.Collections.Hashtable.SyncRoot%2A>"
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \n  \n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.has_11_2.cs)]\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.has_11_2.cpp)]\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_11_2.vb)]"
  syntax:
    content: public static System.Collections.Hashtable Synchronized (System.Collections.Hashtable table);
    parameters:
    - id: table
      type: System.Collections.Hashtable
      description: "Il <xref href=&quot;System.Collections.Hashtable&quot;> </xref> per la sincronizzazione."
    return:
      type: System.Collections.Hashtable
      description: "Sincronizzato (thread-safe) wrapper per il <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>table</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.SyncRoot
  id: SyncRoot
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
  fullName: System.Collections.Hashtable.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un oggetto che può essere utilizzato per sincronizzare l&quot;accesso al <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Per creare una versione sincronizzata del <xref:System.Collections.Hashtable>, utilizzare il <xref:System.Collections.Hashtable.Synchronized%2A>metodo.</xref:System.Collections.Hashtable.Synchronized%2A> </xref:System.Collections.Hashtable> Tuttavia, le classi derivate possono fornire una propria versione sincronizzata del <xref:System.Collections.Hashtable>utilizzando la proprietà SyncRoot.</xref:System.Collections.Hashtable> Il codice di sincronizzazione deve essere eseguite nella radice di sincronizzazione del <xref:System.Collections.Hashtable>, non direttamente sulla <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> In questo modo si garantisce il corretto funzionamento delle raccolte derivate da altri oggetti. In particolare, viene mantenuta la sincronizzazione con altri thread che potrebbero modificare contemporaneamente il <xref:System.Collections.Hashtable>oggetto.</xref:System.Collections.Hashtable>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.       Esempio di codice seguente viene illustrato come bloccare la raccolta utilizzando SyncRoot durante l&quot;intera enumerazione: [!code-cpp [classico Hashtable.IsSynchronized esempio n.&2;](~/add/codesnippet/cpp/p-system.collections.has_0_1.cpp)][!code-vb[classico Hashtable.IsSynchronized esempio n.&2;](~/add/codesnippet/visualbasic/p-system.collections.has_0_1.vb)][!code-cs[classico Hashtable.IsSynchronized esempio n.&2;    ](~/add/codesnippet/csharp/p-system.collections.has_0_1.cs)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Oggetto che può essere utilizzato per sincronizzare l&quot;accesso al <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un enumeratore che scorre una raccolta."
  remarks: "[Visual Basic, c#]       Il `foreach` istruzione del linguaggio c# (`for each` in Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, l&quot;utilizzo `foreach` è consigliabile, anziché la modifica diretta dell&quot;enumeratore.       È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non possono essere utilizzati per modificare la raccolta sottostante.       Inizialmente l&quot;enumeratore è posizionato prima del primo elemento nella raccolta. <xref:System.Collections.IEnumerator.Reset%2A>riporta l&quot;enumeratore in questa posizione.</xref:System.Collections.IEnumerator.Reset%2A> In questa posizione, la chiamata <xref:System.Collections.IEnumerator.Current%2A>genera un&quot;eccezione.</xref:System.Collections.IEnumerator.Current%2A> Pertanto, è necessario chiamare <xref:System.Collections.IEnumerator.MoveNext%2A>per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Restituisce lo stesso oggetto finché non <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>viene chiamato.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>imposta <xref:System.Collections.IEnumerator.Current%2A>all&quot;elemento successivo.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>raggiunge la fine della raccolta, l&quot;enumeratore è posizionato dopo l&quot;ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A>restituisce `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando l&quot;enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A>restituire anche `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se l&quot;ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>restituito `false`, la chiamata <xref:System.Collections.IEnumerator.Current%2A>genera un&quot;eccezione.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Per impostare <xref:System.Collections.IEnumerator.Current%2A>il primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A>seguito dal <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l&quot;enumeratore può essere invalidato e la successiva chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>Genera un <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Se la raccolta viene modificata tra <xref:System.Collections.IEnumerator.MoveNext%2A>e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>restituisce l&quot;elemento su cui è stata impostata, anche se l&quot;enumeratore risulta già invalidato.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       L&quot;enumeratore non dispone di accesso esclusivo alla raccolta. Pertanto, l&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.       Questo metodo è un&quot;operazione o (1)."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Un <xref:System.Collections.IEnumerator>che può essere utilizzato per scorrere la raccolta.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.Values
  id: Values
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Values
  nameWithType: Hashtable.Values
  fullName: System.Collections.Hashtable.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un <xref:System.Collections.ICollection>contenente i valori di <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "L&quot;ordine dei valori nel <xref:System.Collections.ICollection>non è specificato, ma è lo stesso ordine delle chiavi associate nel <xref:System.Collections.ICollection>restituito dal <xref:System.Collections.Hashtable.Keys%2A>metodo.</xref:System.Collections.Hashtable.Keys%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       L&quot;oggetto restituito <xref:System.Collections.ICollection>non è una copia statica, bensì <xref:System.Collections.ICollection>fa riferimento ai valori dell&quot;originale <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Modifiche <xref:System.Collections.Hashtable>apportate in <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Hashtable>       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Un <xref:System.Collections.ICollection>contenente i valori di <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Hashtable.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Runtime.Serialization.SerializationException
  isExternal: true
  name: System.Runtime.Serialization.SerializationException
- uid: System.Collections.Hashtable.#ctor
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable()
  nameWithType: Hashtable.Hashtable()
  fullName: System.Collections.Hashtable.Hashtable()
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary)
  nameWithType: Hashtable.Hashtable(IDictionary)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: true
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.Hashtable.#ctor(System.Int32)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32)
  nameWithType: Hashtable.Hashtable(Int32)
  fullName: System.Collections.Hashtable.Hashtable(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single)
  nameWithType: Hashtable.Hashtable(IDictionary,Single)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)
- uid: System.Collections.IHashCodeProvider
  parent: System.Collections
  isExternal: false
  name: IHashCodeProvider
  nameWithType: IHashCodeProvider
  fullName: System.Collections.IHashCodeProvider
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single)
  nameWithType: Hashtable.Hashtable(Int32,Single)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)
- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.Add(System.Object,System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Add(Object,Object)
  nameWithType: Hashtable.Add(Object,Object)
  fullName: System.Collections.Hashtable.Add(Object,Object)
- uid: System.Collections.Hashtable.Clear
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clear()
  nameWithType: Hashtable.Clear()
  fullName: System.Collections.Hashtable.Clear()
- uid: System.Collections.Hashtable.Clone
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clone()
  nameWithType: Hashtable.Clone()
  fullName: System.Collections.Hashtable.Clone()
- uid: System.Collections.Hashtable.comparer
  parent: System.Collections.Hashtable
  isExternal: false
  name: comparer
  nameWithType: Hashtable.comparer
  fullName: System.Collections.Hashtable.comparer
- uid: System.Collections.Hashtable.Contains(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Contains(Object)
  nameWithType: Hashtable.Contains(Object)
  fullName: System.Collections.Hashtable.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Hashtable.ContainsKey(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: Hashtable.ContainsKey(Object)
  fullName: System.Collections.Hashtable.ContainsKey(Object)
- uid: System.Collections.Hashtable.ContainsValue(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: Hashtable.ContainsValue(Object)
  fullName: System.Collections.Hashtable.ContainsValue(Object)
- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Hashtable
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: Hashtable.CopyTo(Array,Int32)
  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Hashtable.Count
  parent: System.Collections.Hashtable
  isExternal: false
  name: Count
  nameWithType: Hashtable.Count
  fullName: System.Collections.Hashtable.Count
- uid: System.Collections.Hashtable.EqualityComparer
  parent: System.Collections.Hashtable
  isExternal: false
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
  fullName: System.Collections.Hashtable.EqualityComparer
- uid: System.Collections.Hashtable.GetEnumerator
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetEnumerator()
  nameWithType: Hashtable.GetEnumerator()
  fullName: System.Collections.Hashtable.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Hashtable.GetHash(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetHash(Object)
  nameWithType: Hashtable.GetHash(Object)
  fullName: System.Collections.Hashtable.GetHash(Object)
- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Hashtable.hcp
  parent: System.Collections.Hashtable
  isExternal: false
  name: hcp
  nameWithType: Hashtable.hcp
  fullName: System.Collections.Hashtable.hcp
- uid: System.Collections.Hashtable.IsFixedSize
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
  fullName: System.Collections.Hashtable.IsFixedSize
- uid: System.Collections.Hashtable.IsReadOnly
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
  fullName: System.Collections.Hashtable.IsReadOnly
- uid: System.Collections.Hashtable.IsSynchronized
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
  fullName: System.Collections.Hashtable.IsSynchronized
- uid: System.Collections.Hashtable.Item(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Item(Object)
  nameWithType: Hashtable.Item(Object)
  fullName: System.Collections.Hashtable.Item(Object)
- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: KeyEquals(Object,Object)
  nameWithType: Hashtable.KeyEquals(Object,Object)
  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)
- uid: System.Collections.Hashtable.Keys
  parent: System.Collections.Hashtable
  isExternal: false
  name: Keys
  nameWithType: Hashtable.Keys
  fullName: System.Collections.Hashtable.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Hashtable.OnDeserialization(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: Hashtable.OnDeserialization(Object)
  fullName: System.Collections.Hashtable.OnDeserialization(Object)
- uid: System.Collections.Hashtable.Remove(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Remove(Object)
  nameWithType: Hashtable.Remove(Object)
  fullName: System.Collections.Hashtable.Remove(Object)
- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Synchronized(Hashtable)
  nameWithType: Hashtable.Synchronized(Hashtable)
  fullName: System.Collections.Hashtable.Synchronized(Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections.Hashtable.SyncRoot
  parent: System.Collections.Hashtable
  isExternal: false
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
  fullName: System.Collections.Hashtable.SyncRoot
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Hashtable
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Hashtable.Values
  parent: System.Collections.Hashtable
  isExternal: false
  name: Values
  nameWithType: Hashtable.Values
  fullName: System.Collections.Hashtable.Values
- uid: System.Collections.Hashtable.#ctor*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable.Hashtable
- uid: System.Collections.Hashtable.Add*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Add
  nameWithType: Hashtable.Add
- uid: System.Collections.Hashtable.Clear*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clear
  nameWithType: Hashtable.Clear
- uid: System.Collections.Hashtable.Clone*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clone
  nameWithType: Hashtable.Clone
- uid: System.Collections.Hashtable.comparer*
  parent: System.Collections.Hashtable
  isExternal: false
  name: comparer
  nameWithType: Hashtable.comparer
- uid: System.Collections.Hashtable.Contains*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Contains
  nameWithType: Hashtable.Contains
- uid: System.Collections.Hashtable.ContainsKey*
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsKey
  nameWithType: Hashtable.ContainsKey
- uid: System.Collections.Hashtable.ContainsValue*
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsValue
  nameWithType: Hashtable.ContainsValue
- uid: System.Collections.Hashtable.CopyTo*
  parent: System.Collections.Hashtable
  isExternal: false
  name: CopyTo
  nameWithType: Hashtable.CopyTo
- uid: System.Collections.Hashtable.Count*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Count
  nameWithType: Hashtable.Count
- uid: System.Collections.Hashtable.EqualityComparer*
  parent: System.Collections.Hashtable
  isExternal: false
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
- uid: System.Collections.Hashtable.GetEnumerator*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetEnumerator
  nameWithType: Hashtable.GetEnumerator
- uid: System.Collections.Hashtable.GetHash*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetHash
  nameWithType: Hashtable.GetHash
- uid: System.Collections.Hashtable.GetObjectData*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetObjectData
  nameWithType: Hashtable.GetObjectData
- uid: System.Collections.Hashtable.hcp*
  parent: System.Collections.Hashtable
  isExternal: false
  name: hcp
  nameWithType: Hashtable.hcp
- uid: System.Collections.Hashtable.IsFixedSize*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
- uid: System.Collections.Hashtable.IsReadOnly*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
- uid: System.Collections.Hashtable.IsSynchronized*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
- uid: System.Collections.Hashtable.Item*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Item
  nameWithType: Hashtable.Item
- uid: System.Collections.Hashtable.KeyEquals*
  parent: System.Collections.Hashtable
  isExternal: false
  name: KeyEquals
  nameWithType: Hashtable.KeyEquals
- uid: System.Collections.Hashtable.Keys*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Keys
  nameWithType: Hashtable.Keys
- uid: System.Collections.Hashtable.OnDeserialization*
  parent: System.Collections.Hashtable
  isExternal: false
  name: OnDeserialization
  nameWithType: Hashtable.OnDeserialization
- uid: System.Collections.Hashtable.Remove*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Remove
  nameWithType: Hashtable.Remove
- uid: System.Collections.Hashtable.Synchronized*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Synchronized
  nameWithType: Hashtable.Synchronized
- uid: System.Collections.Hashtable.SyncRoot*
  parent: System.Collections.Hashtable
  isExternal: false
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Hashtable
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Hashtable.Values*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Values
  nameWithType: Hashtable.Values
