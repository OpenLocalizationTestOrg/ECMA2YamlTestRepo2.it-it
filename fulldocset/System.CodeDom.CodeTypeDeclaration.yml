### YamlMime:ManagedReference
items:
- uid: System.CodeDom.CodeTypeDeclaration
  id: CodeTypeDeclaration
  children:
  - System.CodeDom.CodeTypeDeclaration.#ctor
  - System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  - System.CodeDom.CodeTypeDeclaration.BaseTypes
  - System.CodeDom.CodeTypeDeclaration.IsClass
  - System.CodeDom.CodeTypeDeclaration.IsEnum
  - System.CodeDom.CodeTypeDeclaration.IsInterface
  - System.CodeDom.CodeTypeDeclaration.IsPartial
  - System.CodeDom.CodeTypeDeclaration.IsStruct
  - System.CodeDom.CodeTypeDeclaration.Members
  - System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  - System.CodeDom.CodeTypeDeclaration.PopulateMembers
  - System.CodeDom.CodeTypeDeclaration.TypeAttributes
  - System.CodeDom.CodeTypeDeclaration.TypeParameters
  langs:
  - csharp
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration
  fullName: System.CodeDom.CodeTypeDeclaration
  type: Class
  summary: "Rappresenta una dichiarazione di tipo per una classe, struttura, interfaccia o enumerazione."
  remarks: "CodeTypeDeclaration può essere utilizzato per rappresentare il codice che dichiara una classe, struttura, interfaccia o enumerazione. CodeTypeDeclaration può essere utilizzato per dichiarare un tipo annidato in un altro tipo.       Il <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A>proprietà specifica il tipo di base o tipi di base del tipo dichiarato.</xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> Il <xref:System.CodeDom.CodeTypeDeclaration.Members%2A>proprietà contiene i membri del tipo che possono includere metodi, campi, proprietà, i commenti e altri tipi.</xref:System.CodeDom.CodeTypeDeclaration.Members%2A> Il <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A>proprietà indica il <xref:System.Reflection.TypeAttributes>i valori per la dichiarazione del tipo, che indicano la categoria del tipo.</xref:System.Reflection.TypeAttributes> </xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> Il <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, e <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A>indicano se il tipo è una classe, struttura, enumerazione o tipo di interfaccia, rispettivamente.</xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> </xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A> </xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A> </xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>      > [!NOTE] > Alcuni linguaggi di programmazione supportano solo la dichiarazione di tipi di riferimento o classi. Per controllare un generatore di codice specifico del linguaggio CodeDOM per il supporto per la dichiarazione di interfacce, enumerazioni o tipi di valore, chiamare il <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>metodo da testare per appropriata <xref:System.CodeDom.Compiler.GeneratorSupport>flag.</xref:System.CodeDom.Compiler.GeneratorSupport> </xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> <xref:System.CodeDom.Compiler.GeneratorSupport>indica il supporto per le interfacce, <xref:System.CodeDom.Compiler.GeneratorSupport>indica il supporto per le enumerazioni, e <xref:System.CodeDom.Compiler.GeneratorSupport>indica il supporto per i tipi di valore, ad esempio strutture.</xref:System.CodeDom.Compiler.GeneratorSupport> </xref:System.CodeDom.Compiler.GeneratorSupport></xref:System.CodeDom.Compiler.GeneratorSupport>       È possibile compilare una classe o un&quot;implementazione di struttura in una dichiarazione completa o suddividere l&quot;implementazione tra più dichiarazioni. Il <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A>proprietà indica se la dichiarazione del tipo è completo o parziale.</xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> Non tutti i generatori di codice supportano le dichiarazioni di tipo parziali, pertanto è necessario verificare questo supporto chiamando il <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>metodo con il flag <xref:System.CodeDom.Compiler.GeneratorSupport>.</xref:System.CodeDom.Compiler.GeneratorSupport> </xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>"
  example:
  - "This example demonstrates using a CodeTypeDeclaration to declare a type.  \n  \n [!code-cs[CodeTypeDeclarationExample#2](~/add/codesnippet/csharp/t-system.codedom.codetyp_7_1.cs)]\n [!code-vb[CodeTypeDeclarationExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codetyp_7_1.vb)]\n [!code-cpp[CodeTypeDeclarationExample#2](~/add/codesnippet/cpp/t-system.codedom.codetyp_7_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember
  inheritance:
  - System.Object
  - System.CodeDom.CodeObject
  - System.CodeDom.CodeTypeMember
  implements: []
  inheritedMembers:
  - System.CodeDom.CodeObject.UserData
  - System.CodeDom.CodeTypeMember.Attributes
  - System.CodeDom.CodeTypeMember.Comments
  - System.CodeDom.CodeTypeMember.CustomAttributes
  - System.CodeDom.CodeTypeMember.EndDirectives
  - System.CodeDom.CodeTypeMember.LinePragma
  - System.CodeDom.CodeTypeMember.Name
  - System.CodeDom.CodeTypeMember.StartDirectives
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.#ctor
  id: '#ctor'
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: CodeTypeDeclaration()
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration()
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration()
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;> </xref> classe."
  syntax:
    content: public CodeTypeDeclaration ();
    parameters: []
  overload: System.CodeDom.CodeTypeDeclaration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: CodeTypeDeclaration(String)
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration(String)
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;> </xref> classe con il nome specificato."
  syntax:
    content: public CodeTypeDeclaration (string name);
    parameters:
    - id: name
      type: System.String
      description: "Il nome per il nuovo tipo."
  overload: System.CodeDom.CodeTypeDeclaration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes
  id: BaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.BaseTypes
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Ottiene i tipi di base del tipo."
  remarks: "Per generare una classe in Visual Basic che non eredita da un tipo di base, ma che implementa una o più interfacce, è necessario includere <xref:System.Object>come primo elemento nella raccolta BaseTypes.</xref:System.Object>      > [!NOTE] > In .NET Framework versione 2.0 non è necessario il <xref:System.CodeDom.CodeTypeReference>per <xref:System.Object>Se l&quot;interfaccia si implementa già esiste e si fa riferimento a esso dal tipo.</xref:System.Object> </xref:System.CodeDom.CodeTypeReference> Ad esempio, se si implementa il <xref:System.Collections.ICollection>l&quot;interfaccia e aggiungerlo alla raccolta con questa istruzione, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, non è necessario che la precede `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` istruzione.</xref:System.Collections.ICollection>       Il codice seguente viene illustrata l&quot;aggiunta di un <xref:System.CodeDom.CodeTypeReference>insieme che fa riferimento a <xref:System.Object>.</xref:System.Object> </xref:System.CodeDom.CodeTypeReference>       [Visual Basic]      ```   Dim ctd As New CodeTypeDeclaration(&quot;Class1&quot;)   ctd.IsClass = True   ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))   ctd.BaseTypes.Add(New CodeTypeReference(&quot;Interface1&quot;))   ``` [C#] ```   CodeTypeDeclaration ctd = new CodeTypeDeclaration(&quot;Class1&quot;);   ctd.IsClass = true;   ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));   ctd.BaseTypes.Add(new CodeTypeReference(&quot;Interface1&quot;));   ``` il codice precedente produce l&quot;equivalente del codice Visual Basic seguente.      ```   Public Class Class1   Implements Interface1   ```Tuttavia, il codice di Visual Basic effettivamente generato è il seguente.      ```   Public Class Class1   Inherits Object   Implements Interface1   ```"
  syntax:
    content: public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }
    return:
      type: System.CodeDom.CodeTypeReferenceCollection
      description: "Oggetto <xref href=&quot;System.CodeDom.CodeTypeReferenceCollection&quot;> </xref> che indica i tipi di base del tipo."
  overload: System.CodeDom.CodeTypeDeclaration.BaseTypes*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsClass
  id: IsClass
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
  fullName: System.CodeDom.CodeTypeDeclaration.IsClass
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Ottiene o imposta un valore che indica se il tipo è un classe o tipo di riferimento."
  syntax:
    content: public bool IsClass { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il tipo è un tipo di classe o riferimento. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CodeDom.CodeTypeDeclaration.IsClass*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum
  id: IsEnum
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
  fullName: System.CodeDom.CodeTypeDeclaration.IsEnum
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Ottiene o imposta un valore che indica se il tipo è un&quot;enumerazione."
  syntax:
    content: public bool IsEnum { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il tipo è un&quot;enumerazione. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CodeDom.CodeTypeDeclaration.IsEnum*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface
  id: IsInterface
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
  fullName: System.CodeDom.CodeTypeDeclaration.IsInterface
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Ottiene o imposta un valore che indica se il tipo è un&quot;interfaccia."
  syntax:
    content: public bool IsInterface { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il tipo è un&quot;interfaccia. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CodeDom.CodeTypeDeclaration.IsInterface*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial
  id: IsPartial
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
  fullName: System.CodeDom.CodeTypeDeclaration.IsPartial
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Ottiene o imposta un valore che indica se la dichiarazione del tipo completo o parziale."
  remarks: "È possibile creare una classe o struttura di implementazione in una dichiarazione completa o suddividere l&quot;implementazione tra più dichiarazioni. Le implementazioni in genere vengono fornite nella dichiarazione di un tipo completo. In questo caso, impostare la proprietà di tipo di dichiarazione IsPartial `false`, che indica che la dichiarazione del tipo rappresenta tutti i dettagli per l&quot;implementazione della classe o struttura.       Una dichiarazione di tipo parziale rende più semplice creare le diverse parti di un&quot;implementazione di classe o struttura in moduli diversi dell&quot;applicazione. Le dichiarazioni di tipo parziale possono essere archiviate in un file di origine o distribuite tra più file di origine da compilare insieme per formare l&quot;implementazione del tipo combinato.       Linguaggio c# supporta le dichiarazioni di tipo parziale delle classi e le strutture attraverso il `partial` (parola chiave). Visual Basic supporta le dichiarazioni di tipo parziale delle classi e le strutture con il `Partial` (parola chiave). Non tutti i generatori di codice supportano le dichiarazioni di tipo parziali, pertanto è necessario verificare questo supporto chiamando il <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>metodo con il flag <xref:System.CodeDom.Compiler.GeneratorSupport>.</xref:System.CodeDom.Compiler.GeneratorSupport> </xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A>      > [!NOTE] > Dichiarazioni di tipi parziali sono supportate per le classi e strutture. Se si specifica una dichiarazione di tipo parziale per un&quot;interfaccia o enumerazione, il codice generato produce gli errori del compilatore.       Quando si fornisce un&quot;implementazione di classe o struttura tra più dichiarazioni, impostare la proprietà IsPartial `true` per la dichiarazione iniziale e tutte le dichiarazioni supplementari. La dichiarazione iniziale deve specificare completamente il tipo di firma, tra cui i modificatori di accesso, i tipi ereditati e le interfacce implementate. Le dichiarazioni supplementari non è necessario specificare di nuovo la firma di tipo. Un errore del compilatore comporta in genere se si ridefinisce la firma di tipo in una dichiarazione supplementare.       Visual Studio 2005 utilizza tipi parziali per separare il codice utente generato dal codice della finestra di progettazione. Nei progetti di applicazione Windows di Visual Basic, il codice utente viene inserito in una classe parziale che non è qualificata tramite il `Partial` (parola chiave); progettazione fornito dal codice viene visualizzato nella classe parziale che dispone di `Partial` (parola chiave). In c#, il codice utente e codice di progettazione vengono visualizzati in classi parziali identificate dal `partial` (parola chiave)."
  example:
  - "This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations. The example builds the initial class declaration statement and sets the IsPartial property to `true`.  \n  \n [!code-cpp[CodeDomPartialTypeExample#3](~/add/codesnippet/cpp/p-system.codedom.codetyp_2_1.cpp)]\n [!code-cs[CodeDomPartialTypeExample#3](~/add/codesnippet/csharp/p-system.codedom.codetyp_2_1.cs)]\n [!code-vb[CodeDomPartialTypeExample#3](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_2_1.vb)]  \n  \n A different method in the example extends the class implementation. This method builds a new type declaration statement for the existing class and sets the IsPartial property to `true`. The compiler combines the two partial type declarations together for the complete class implementation.  \n  \n [!code-cpp[CodeDomPartialTypeExample#7](~/add/codesnippet/cpp/p-system.codedom.codetyp_2_2.cpp)]\n [!code-cs[CodeDomPartialTypeExample#7](~/add/codesnippet/csharp/p-system.codedom.codetyp_2_2.cs)]\n [!code-vb[CodeDomPartialTypeExample#7](~/add/codesnippet/visualbasic/p-system.codedom.codetyp_2_2.vb)]"
  syntax:
    content: public bool IsPartial { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la dichiarazione di classe o struttura è una rappresentazione parziale dell&quot;implementazione. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se la dichiarazione è un&quot;implementazione completa della classe o struttura. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CodeDom.CodeTypeDeclaration.IsPartial*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct
  id: IsStruct
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
  fullName: System.CodeDom.CodeTypeDeclaration.IsStruct
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Ottiene o imposta un valore che indica se il tipo è un tipo di valore (struct)."
  syntax:
    content: public bool IsStruct { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il tipo è un tipo di valore. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CodeDom.CodeTypeDeclaration.IsStruct*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.Members
  id: Members
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: Members
  nameWithType: CodeTypeDeclaration.Members
  fullName: System.CodeDom.CodeTypeDeclaration.Members
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Ottiene la raccolta dei membri della classe per il tipo rappresentato."
  syntax:
    content: public System.CodeDom.CodeTypeMemberCollection Members { get; }
    return:
      type: System.CodeDom.CodeTypeMemberCollection
      description: "Oggetto <xref href=&quot;System.CodeDom.CodeTypeMemberCollection&quot;> </xref> che indica i membri della classe."
  overload: System.CodeDom.CodeTypeDeclaration.Members*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  id: PopulateBaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: PopulateBaseTypes
  nameWithType: CodeTypeDeclaration.PopulateBaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  type: Event
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Si verifica quando il <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*>raccolta è accessibile per la prima volta.</xref:System.CodeDom.CodeTypeDeclaration.BaseTypes*>"
  syntax:
    content: public event EventHandler PopulateBaseTypes;
    return:
      type: System.EventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  id: PopulateMembers
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: PopulateMembers
  nameWithType: CodeTypeDeclaration.PopulateMembers
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  type: Event
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Si verifica quando il <xref:System.CodeDom.CodeTypeDeclaration.Members*>raccolta è accessibile per la prima volta.</xref:System.CodeDom.CodeTypeDeclaration.Members*>"
  syntax:
    content: public event EventHandler PopulateMembers;
    return:
      type: System.EventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  id: TypeAttributes
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
  fullName: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Ottiene o imposta gli attributi del tipo."
  remarks: "Il <xref:System.Reflection.TypeAttributes>proprietà contiene lo stesso tipo di valori utilizzati da <xref:System.Reflection>durante l&quot;analisi di un tipo in fase di esecuzione.</xref:System.Reflection> </xref:System.Reflection.TypeAttributes> Molti di questi flag non corrispondono per la sintassi di dichiarazione di tipo per alcune lingue. Di conseguenza, solo i flag seguenti sono significativi per <xref:System.CodeDom.CodeTypeDeclaration>: <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>, <xref:System.Reflection.TypeAttributes>e <xref:System.Reflection.TypeAttributes>.</xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.Reflection.TypeAttributes> </xref:System.CodeDom.CodeTypeDeclaration>      > [!NOTE] > Alcuni flag, ad esempio <xref:System.Reflection.TypeAttributes>si sovrappongono al significato dei flag nella <xref:System.CodeDom.CodeTypeMember.Attributes%2A>proprietà <xref:System.CodeDom.CodeTypeDeclaration>ereditata da <xref:System.CodeDom.CodeTypeMember>.</xref:System.CodeDom.CodeTypeMember> </xref:System.CodeDom.CodeTypeDeclaration> </xref:System.CodeDom.CodeTypeMember.Attributes%2A> </xref:System.Reflection.TypeAttributes> Il <xref:System.CodeDom.CodeTypeMember.Attributes%2A>proprietà è un effetto collaterale del <xref:System.CodeDom.CodeTypeDeclaration>classe che eredita da <xref:System.CodeDom.CodeTypeMember>in modo che le classi possono essere annidate.</xref:System.CodeDom.CodeTypeMember> </xref:System.CodeDom.CodeTypeDeclaration> </xref:System.CodeDom.CodeTypeMember.Attributes%2A> I flag nella proprietà TypeAttributes devono essere utilizzati invece i flag di <xref:System.CodeDom.CodeTypeMember.Attributes%2A>proprietà.</xref:System.CodeDom.CodeTypeMember.Attributes%2A>      > [!NOTE] > Per impostare i flag di visibilità (flag che contengono le parole `Public` o `Nested`) consiste nel nascondere la visibilità di tutti i flag di utilizzo di <xref:System.Reflection.TypeAttributes>e quindi impostare il flag di visibilità desiderato.</xref:System.Reflection.TypeAttributes> Ad esempio, il codice istruzione c# per identificare il <xref:System.CodeDom.CodeTypeDeclaration>(denominato `cd`) come classe interna è `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</xref:System.CodeDom.CodeTypeDeclaration>  Il codice per impostare lo stesso valore in Visual Basic è `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`. Imposta la proprietà TypeAttributes direttamente un flag di visibilità (`cd.TypeAttributes = TypeAttributes.NotPublic;`) Cancella tutti gli altri flag che possono essere impostati."
  syntax:
    content: public System.Reflection.TypeAttributes TypeAttributes { get; set; }
    return:
      type: System.Reflection.TypeAttributes
      description: "Oggetto <xref:System.Reflection.TypeAttributes>che indica gli attributi del tipo.</xref:System.Reflection.TypeAttributes>"
  overload: System.CodeDom.CodeTypeDeclaration.TypeAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters
  id: TypeParameters
  parent: System.CodeDom.CodeTypeDeclaration
  langs:
  - csharp
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
  fullName: System.CodeDom.CodeTypeDeclaration.TypeParameters
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "Ottiene i parametri di tipo per la dichiarazione del tipo."
  remarks: "Una dichiarazione di tipo generico contiene uno o più tipi noti come parametri di tipo non specificati. Il nome di un parametro di tipo rappresenta il tipo all&quot;interno del corpo della dichiarazione generica. Ad esempio, la dichiarazione generica per la <xref:System.Collections.Generic.List%601>classe contiene il parametro di tipo `T`.</xref:System.Collections.Generic.List%601>       Per ulteriori informazioni sui generics, vedere [Generics nella libreria di classi .NET Framework](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }
    return:
      type: System.CodeDom.CodeTypeParameterCollection
      description: "Oggetto <xref href=&quot;System.CodeDom.CodeTypeParameterCollection&quot;> </xref> che contiene i parametri di tipo per la dichiarazione del tipo."
  overload: System.CodeDom.CodeTypeDeclaration.TypeParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.CodeDom.CodeTypeMember
  isExternal: false
  name: System.CodeDom.CodeTypeMember
- uid: System.CodeDom.CodeTypeDeclaration.#ctor
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration()
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration()
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration()
- uid: System.CodeDom.CodeTypeDeclaration.#ctor(System.String)
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration(String)
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration(String)
  fullName: System.CodeDom.CodeTypeDeclaration.CodeTypeDeclaration(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.BaseTypes
- uid: System.CodeDom.CodeTypeReferenceCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeReferenceCollection
  nameWithType: CodeTypeReferenceCollection
  fullName: System.CodeDom.CodeTypeReferenceCollection
- uid: System.CodeDom.CodeTypeDeclaration.IsClass
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
  fullName: System.CodeDom.CodeTypeDeclaration.IsClass
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
  fullName: System.CodeDom.CodeTypeDeclaration.IsEnum
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
  fullName: System.CodeDom.CodeTypeDeclaration.IsInterface
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
  fullName: System.CodeDom.CodeTypeDeclaration.IsPartial
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
  fullName: System.CodeDom.CodeTypeDeclaration.IsStruct
- uid: System.CodeDom.CodeTypeDeclaration.Members
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: Members
  nameWithType: CodeTypeDeclaration.Members
  fullName: System.CodeDom.CodeTypeDeclaration.Members
- uid: System.CodeDom.CodeTypeMemberCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeMemberCollection
  nameWithType: CodeTypeMemberCollection
  fullName: System.CodeDom.CodeTypeMemberCollection
- uid: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: PopulateBaseTypes
  nameWithType: CodeTypeDeclaration.PopulateBaseTypes
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.CodeDom.CodeTypeDeclaration.PopulateMembers
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: PopulateMembers
  nameWithType: CodeTypeDeclaration.PopulateMembers
  fullName: System.CodeDom.CodeTypeDeclaration.PopulateMembers
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
  fullName: System.CodeDom.CodeTypeDeclaration.TypeAttributes
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: true
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
  fullName: System.CodeDom.CodeTypeDeclaration.TypeParameters
- uid: System.CodeDom.CodeTypeParameterCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeParameterCollection
  nameWithType: CodeTypeParameterCollection
  fullName: System.CodeDom.CodeTypeParameterCollection
- uid: System.CodeDom.CodeTypeDeclaration.#ctor*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration.CodeTypeDeclaration
- uid: System.CodeDom.CodeTypeDeclaration.BaseTypes*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: BaseTypes
  nameWithType: CodeTypeDeclaration.BaseTypes
- uid: System.CodeDom.CodeTypeDeclaration.IsClass*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsClass
  nameWithType: CodeTypeDeclaration.IsClass
- uid: System.CodeDom.CodeTypeDeclaration.IsEnum*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsEnum
  nameWithType: CodeTypeDeclaration.IsEnum
- uid: System.CodeDom.CodeTypeDeclaration.IsInterface*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsInterface
  nameWithType: CodeTypeDeclaration.IsInterface
- uid: System.CodeDom.CodeTypeDeclaration.IsPartial*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsPartial
  nameWithType: CodeTypeDeclaration.IsPartial
- uid: System.CodeDom.CodeTypeDeclaration.IsStruct*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: IsStruct
  nameWithType: CodeTypeDeclaration.IsStruct
- uid: System.CodeDom.CodeTypeDeclaration.Members*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: Members
  nameWithType: CodeTypeDeclaration.Members
- uid: System.CodeDom.CodeTypeDeclaration.TypeAttributes*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeAttributes
  nameWithType: CodeTypeDeclaration.TypeAttributes
- uid: System.CodeDom.CodeTypeDeclaration.TypeParameters*
  parent: System.CodeDom.CodeTypeDeclaration
  isExternal: false
  name: TypeParameters
  nameWithType: CodeTypeDeclaration.TypeParameters
