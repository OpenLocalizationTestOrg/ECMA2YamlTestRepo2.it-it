### YamlMime:ManagedReference
items:
- uid: System.Messaging.Cursor
  id: Cursor
  children:
  - System.Messaging.Cursor.Close
  - System.Messaging.Cursor.Dispose
  langs:
  - csharp
  name: Cursor
  nameWithType: Cursor
  fullName: System.Messaging.Cursor
  type: Class
  summary: "Un cursore viene utilizzato per mantenere una posizione specifica in un <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> durante la lettura dei messaggi della coda."
  remarks: "Per ottenere un cursore per un <xref:System.Messaging.MessageQueue>, chiamare il <xref:System.Messaging.MessageQueue.CreateCursor%2A>metodo per tale coda.</xref:System.Messaging.MessageQueue.CreateCursor%2A> </xref:System.Messaging.MessageQueue>       Viene utilizzato un cursore con metodi come <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29>e <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29>quando è necessario leggere i messaggi che non si trovano all&quot;inizio della coda.</xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> </xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> Ciò include la lettura dei messaggi in modo sincrono o asincrono. I cursori non è necessario essere usato per leggere il primo messaggio in una coda.       Durante la lettura dei messaggi all&quot;interno di una transazione, Accodamento messaggi non ripristina lo spostamento del cursore se la transazione viene interrotta. Si supponga, ad esempio, che è una coda con due messaggi, A1 e A2. Se si rimuove il messaggio A1 in una transazione, Accodamento messaggi sposta il cursore al messaggio A2. Tuttavia, se la transazione viene interrotta per qualsiasi motivo, messaggio che a1 viene inserito nuovamente nella coda, ma il cursore rimane puntamento al messaggio A2.       Per chiudere il cursore, chiamare <xref:System.Messaging.Cursor.Close%2A>.</xref:System.Messaging.Cursor.Close%2A>"
  syntax:
    content: 'public sealed class Cursor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.Cursor.Close
  id: Close
  parent: System.Messaging.Cursor
  langs:
  - csharp
  name: Close()
  nameWithType: Cursor.Close()
  fullName: System.Messaging.Cursor.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Chiude il cursore, consentendo di rilasciare le risorse associate."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.Cursor.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Cursor.Dispose
  id: Dispose
  parent: System.Messaging.Cursor
  langs:
  - csharp
  name: Dispose()
  nameWithType: Cursor.Dispose()
  fullName: System.Messaging.Cursor.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rilascia tutte le risorse usate dal <xref href=&quot;System.Messaging.Cursor&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.Cursor.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Messaging.Cursor.Close
  parent: System.Messaging.Cursor
  isExternal: false
  name: Close()
  nameWithType: Cursor.Close()
  fullName: System.Messaging.Cursor.Close()
- uid: System.Messaging.Cursor.Dispose
  parent: System.Messaging.Cursor
  isExternal: false
  name: Dispose()
  nameWithType: Cursor.Dispose()
  fullName: System.Messaging.Cursor.Dispose()
- uid: System.Messaging.Cursor.Close*
  parent: System.Messaging.Cursor
  isExternal: false
  name: Close
  nameWithType: Cursor.Close
- uid: System.Messaging.Cursor.Dispose*
  parent: System.Messaging.Cursor
  isExternal: false
  name: Dispose
  nameWithType: Cursor.Dispose
