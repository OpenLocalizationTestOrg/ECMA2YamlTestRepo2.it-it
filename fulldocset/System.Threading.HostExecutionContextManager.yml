### YamlMime:ManagedReference
items:
- uid: System.Threading.HostExecutionContextManager
  id: HostExecutionContextManager
  children:
  - System.Threading.HostExecutionContextManager.#ctor
  - System.Threading.HostExecutionContextManager.Capture
  - System.Threading.HostExecutionContextManager.Revert(System.Object)
  - System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext)
  langs:
  - csharp
  name: HostExecutionContextManager
  nameWithType: HostExecutionContextManager
  fullName: System.Threading.HostExecutionContextManager
  type: Class
  summary: "Fornisce la funzionalità che consente a un host di common language runtime di partecipare al flusso o la migrazione, del contesto di esecuzione."
  remarks: "Se corrente <xref:System.AppDomainManager>contiene un riferimento a un HostExecutionContextManager nel relativo <xref:System.AppDomainManager.HostExecutionContextManager%2A>proprietà, quindi common language runtime chiama il gestore ogni volta che una chiamata al <xref:System.Threading.ExecutionContext.Run%2A?displayProperty=fullName>metodo si verifica, per consentire all&quot;host di partecipare al flusso del contesto di esecuzione.</xref:System.Threading.ExecutionContext.Run%2A?displayProperty=fullName> </xref:System.AppDomainManager.HostExecutionContextManager%2A> </xref:System.AppDomainManager>"
  syntax:
    content: public class HostExecutionContextManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.#ctor
  id: '#ctor'
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: HostExecutionContextManager()
  nameWithType: HostExecutionContextManager.HostExecutionContextManager()
  fullName: System.Threading.HostExecutionContextManager.HostExecutionContextManager()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Threading.HostExecutionContextManager&quot;> </xref> classe."
  syntax:
    content: public HostExecutionContextManager ();
    parameters: []
  overload: System.Threading.HostExecutionContextManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.Capture
  id: Capture
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: Capture()
  nameWithType: HostExecutionContextManager.Capture()
  fullName: System.Threading.HostExecutionContextManager.Capture()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Acquisisce il contesto di esecuzione host dal thread corrente."
  remarks: "Il <xref:System.Threading.HostExecutionContext>viene creato utilizzando un handle safe che contiene il `IUnknown` puntatore per l&quot;host esegue il thread corrente.</xref:System.Threading.HostExecutionContext>"
  syntax:
    content: public virtual System.Threading.HostExecutionContext Capture ();
    parameters: []
    return:
      type: System.Threading.HostExecutionContext
      description: "Oggetto <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> oggetto che rappresenta il contesto di esecuzione di host del thread corrente."
  overload: System.Threading.HostExecutionContextManager.Capture*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.Revert(System.Object)
  id: Revert(System.Object)
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: Revert(Object)
  nameWithType: HostExecutionContextManager.Revert(Object)
  fullName: System.Threading.HostExecutionContextManager.Revert(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Ripristina il contesto di esecuzione host allo stato precedente."
  remarks: '`previousState`deve essere l&quot;oggetto restituito dal <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A>metodo.</xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A>'
  syntax:
    content: public virtual void Revert (object previousState);
    parameters:
    - id: previousState
      type: System.Object
      description: "Lo stato precedente del contesto da ripristinare."
  overload: System.Threading.HostExecutionContextManager.Revert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>previousState</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - <code>previousState</code> non è stato creato nel thread corrente.       - oppure - <code>previousState</code> non è l&quot;ultimo stato per il <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref>."
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext)
  id: SetHostExecutionContext(System.Threading.HostExecutionContext)
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: SetHostExecutionContext(HostExecutionContext)
  nameWithType: HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
  fullName: System.Threading.HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Imposta il contesto di esecuzione host corrente per il contesto di esecuzione host specificato."
  remarks: "Il metodo SetHostExecutionContext imposta il contesto di esecuzione host per l&quot;oggetto corrente <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext>  Oggetto <xref:System.Threading.HostExecutionContext>che è stato utilizzato come l&quot;argomento di un&quot;altra chiamata al metodo SetHostExecutionContext non può essere passato come parametro per questo metodo.</xref:System.Threading.HostExecutionContext> Utilizzare invece il <xref:System.Threading.HostExecutionContext.CreateCopy%2A?displayProperty=fullName>metodo per creare una copia di un <xref:System.Threading.HostExecutionContext>dell&quot;oggetto e quindi utilizzare la copia per impostare il contesto di esecuzione di host.</xref:System.Threading.HostExecutionContext> </xref:System.Threading.HostExecutionContext.CreateCopy%2A?displayProperty=fullName>       Chiamare il <xref:System.Threading.HostExecutionContextManager.Revert%2A>metodo usando l&quot;oggetto restituito da questo metodo per ripristinare il <xref:System.Threading.HostExecutionContext>allo stato precedente.</xref:System.Threading.HostExecutionContext> </xref:System.Threading.HostExecutionContextManager.Revert%2A>"
  syntax:
    content: public virtual object SetHostExecutionContext (System.Threading.HostExecutionContext hostExecutionContext);
    parameters:
    - id: hostExecutionContext
      type: System.Threading.HostExecutionContext
      description: "Il <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> da impostare."
    return:
      type: System.Object
      description: "Un oggetto per il ripristino di <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> allo stato precedente."
  overload: System.Threading.HostExecutionContextManager.SetHostExecutionContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>hostExecutionContext</code>non è stato acquisito tramite un&quot;operazione di acquisizione.       - oppure - <code>hostExecutionContext</code> è stato l&quot;argomento di una precedente chiamata al metodo SetHostExecutionContext."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Threading.HostExecutionContextManager.#ctor
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: HostExecutionContextManager()
  nameWithType: HostExecutionContextManager.HostExecutionContextManager()
  fullName: System.Threading.HostExecutionContextManager.HostExecutionContextManager()
- uid: System.Threading.HostExecutionContextManager.Capture
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Capture()
  nameWithType: HostExecutionContextManager.Capture()
  fullName: System.Threading.HostExecutionContextManager.Capture()
- uid: System.Threading.HostExecutionContext
  parent: System.Threading
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
- uid: System.Threading.HostExecutionContextManager.Revert(System.Object)
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Revert(Object)
  nameWithType: HostExecutionContextManager.Revert(Object)
  fullName: System.Threading.HostExecutionContextManager.Revert(Object)
- uid: System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext)
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: SetHostExecutionContext(HostExecutionContext)
  nameWithType: HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
  fullName: System.Threading.HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
- uid: System.Threading.HostExecutionContextManager.#ctor*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: HostExecutionContextManager
  nameWithType: HostExecutionContextManager.HostExecutionContextManager
- uid: System.Threading.HostExecutionContextManager.Capture*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Capture
  nameWithType: HostExecutionContextManager.Capture
- uid: System.Threading.HostExecutionContextManager.Revert*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Revert
  nameWithType: HostExecutionContextManager.Revert
- uid: System.Threading.HostExecutionContextManager.SetHostExecutionContext*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: SetHostExecutionContext
  nameWithType: HostExecutionContextManager.SetHostExecutionContext
