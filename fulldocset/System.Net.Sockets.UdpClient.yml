### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.UdpClient
  id: UdpClient
  children:
  - System.Net.Sockets.UdpClient.#ctor
  - System.Net.Sockets.UdpClient.#ctor(System.Int32)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Active
  - System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  - System.Net.Sockets.UdpClient.Available
  - System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.Client
  - System.Net.Sockets.UdpClient.Close
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Dispose
  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  - System.Net.Sockets.UdpClient.DontFragment
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.EnableBroadcast
  - System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  - System.Net.Sockets.UdpClient.ExclusiveAddressUse
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.MulticastLoopback
  - System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.ReceiveAsync
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Ttl
  langs:
  - csharp
  name: UdpClient
  nameWithType: UdpClient
  fullName: System.Net.Sockets.UdpClient
  type: Class
  summary: "Fornisce servizi di rete di protocollo UDP (User Datagram)."
  remarks: "The UdpClient class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  \n  \n-   Create an instance of the UdpClient class using the remote host name and port number as parameters.  \n  \n-   Create an instance of the UdpClient class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.  \n  \n You can use any of the send methods provided in the UdpClient to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.  \n  \n> [!NOTE]\n>  Do not call [Send(Byte\\[\\], Int32, IPEndPoint)](assetId:///M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)?qualifyHint=False&autoUpgrade=True) using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, UdpClient will throw an exception.  \n  \n UdpClient methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a UdpClient to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a UdpClient from a multicast group."
  example:
  - "The following example establishes a UdpClient connection using the host name www.contoso.com on port 11000. A small string message is sent to two separate remote host machines. The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received. Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.  \n  \n [!code-vb[Classic UdpClientExample#1](~/add/codesnippet/visualbasic/t-system.net.sockets.udp_1.vb)]\n [!code-cpp[Classic UdpClientExample#1](~/add/codesnippet/cpp/t-system.net.sockets.udp_1.cpp)]\n [!code-cs[Classic UdpClientExample#1](~/add/codesnippet/csharp/t-system.net.sockets.udp_1.cs)]"
  syntax:
    content: 'public class UdpClient : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe."
  remarks: "Questo costruttore crea un nuovo <xref:System.Net.Sockets.UdpClient>e consente al provider del servizio sottostante assegnare il numero porta e indirizzo IPv4 locale più appropriato.</xref:System.Net.Sockets.UdpClient> Se si utilizza questo costruttore, il <xref:System.Net.Sockets.UdpClient>istanza viene impostata con una famiglia di indirizzi di IPv4 che non può essere modificata o sovrascritto da una chiamata al metodo connect con una destinazione di IPv6.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore.       Questo costruttore non è adatto per l&quot;aggiunta di un gruppo multicast perché non è possibile eseguire il binding di socket. Inoltre, funziona solo con tipi di indirizzi IPv4."
  example:
  - "The following example demonstrates how to use the default constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.udp_11_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.udp_11_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_11_1.vb)]"
  syntax:
    content: public UdpClient ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe e lo associa al numero di porta locale specificato."
  remarks: "Questo costruttore crea un oggetto sottostante <xref:System.Net.Sockets.Socket>e lo associa al numero di porta da cui si desidera comunicare.</xref:System.Net.Sockets.Socket> Utilizzare questo costruttore se desidera solo impostando il numero di porta locale. Il provider del servizio sottostante assegnerà l&quot;indirizzo IP locale. Se si passa 0 al costruttore, il provider del servizio sottostante assegnerà un numero di porta. Se si utilizza questo costruttore, il <xref:System.Net.Sockets.UdpClient>istanza viene impostata con una famiglia di indirizzi di IPv4 che non può essere modificata o sovrascritto da una chiamata al metodo connect con una destinazione di IPv6.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore.       Questo costruttore funziona solo con tipi di indirizzi IPv4."
  example:
  - "The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_4_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_4_1.vb)]"
  syntax:
    content: public UdpClient (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "Numero di porta locale da cui si desidera comunicare."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il <code> port </code> parametro è maggiore <xref:System.Net.IPEndPoint.MaxPort>o minore di <xref:System.Net.IPEndPoint.MinPort>.</xref:System.Net.IPEndPoint.MinPort> </xref:System.Net.IPEndPoint.MaxPort>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe e la associa all&quot;endpoint locale specificato."
  remarks: "Questo costruttore crea un nuovo <xref:System.Net.Sockets.UdpClient>e li associa al <xref:System.Net.IPEndPoint>specificato per il `localEP` parametro.</xref:System.Net.IPEndPoint> </xref:System.Net.Sockets.UdpClient> Prima di chiamare questo costruttore, è necessario creare un <xref:System.Net.IPEndPoint>utilizzando il numero di porta e indirizzo IP da cui si desidera inviare e ricevere dati.</xref:System.Net.IPEndPoint> Non è necessario specificare un numero di porta e indirizzo IP locale per l&quot;invio e ricezione di dati. In caso contrario, il provider del servizio sottostante assegnerà il numero porta e indirizzo IP locale più appropriato.       Se si utilizza questo costruttore, il <xref:System.Net.Sockets.UdpClient>istanza viene impostata con la famiglia di indirizzi specificata per il `localEP` parametro che non può essere modificata o sovrascritto da una chiamata al metodo connect con una famiglia di indirizzi diverso.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_9_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_9_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_9_1.vb)]"
  syntax:
    content: public UdpClient (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "Un <xref:System.Net.IPEndPoint>che rappresenta l&quot;endpoint locale a cui associare la connessione UDP.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localEP</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe."
  remarks: "Il `family` parametro determina se il listener utilizza un indirizzo IP versione 4 (IPv4) o una IP versione 6 (IPv6) indirizzo. Per utilizzare un indirizzo IPv4, passare il <xref:System.Net.Sockets.AddressFamily>valore.</xref:System.Net.Sockets.AddressFamily> Per utilizzare un indirizzo IPv6, passare il <xref:System.Net.Sockets.AddressFamily>valore.</xref:System.Net.Sockets.AddressFamily> Il passaggio di qualsiasi altro valore, il metodo per generare un <xref:System.ArgumentException>.</xref:System.ArgumentException> genererà       Se si utilizza questo costruttore, il <xref:System.Net.Sockets.UdpClient>istanza viene impostata con la famiglia di indirizzi specificata per il `family` parametro che non può essere modificata o sovrascritto da una chiamata al metodo connect con una famiglia di indirizzi diverso.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore.       La classe UdpClient non è adatto per l&quot;aggiunta di un gruppo multicast perché non è possibile eseguire il binding di socket."
  syntax:
    content: public UdpClient (System.Net.Sockets.AddressFamily family);
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "Uno del <xref:System.Net.Sockets.AddressFamily>valori che specifica lo schema di indirizzamento del socket.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe e lo associa al numero di porta locale specificato."
  remarks: "Questo costruttore crea un oggetto sottostante <xref:System.Net.Sockets.Socket>e lo associa al numero di porta da cui si desidera comunicare.</xref:System.Net.Sockets.Socket>       Il `family` parametro determina se il listener utilizza un indirizzo IP versione 4 (IPv4) o una IP versione 6 (IPv6) indirizzo. Per utilizzare un indirizzo IPv4, passare il <xref:System.Net.Sockets.AddressFamily>valore.</xref:System.Net.Sockets.AddressFamily> Per utilizzare un indirizzo IPv6, passare il <xref:System.Net.Sockets.AddressFamily>valore.</xref:System.Net.Sockets.AddressFamily> Il passaggio di qualsiasi altro valore, il metodo per generare un <xref:System.ArgumentException>.</xref:System.ArgumentException> genererà       Se si utilizza questo costruttore, il <xref:System.Net.Sockets.UdpClient>istanza viene impostata con la famiglia di indirizzi specificata per il `family` parametro che non può essere modificata o sovrascritto da una chiamata al metodo connect con una famiglia di indirizzi diverso.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, fare riferimento alla documentazione relativa ai codici di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  example:
  - "The following code example shows how to create a UDP client to use in a multicast group.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/cpp/c2c91fdb-fd73-47cc-8239-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/visualbasic/c2c91fdb-fd73-47cc-8239-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/csharp/c2c91fdb-fd73-47cc-8239-_1.cs)]"
  syntax:
    content: public UdpClient (int port, System.Net.Sockets.AddressFamily family);
    parameters:
    - id: port
      type: System.Int32
      description: "La porta su cui restare in attesa per i tentativi di connessione in ingresso."
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "Uno del <xref:System.Net.Sockets.AddressFamily>valori che specifica lo schema di indirizzamento del socket.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>è maggiore di <xref:System.Net.IPEndPoint.MaxPort> o minore di <xref:System.Net.IPEndPoint.MinPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> classe e stabilisce un host remoto predefinito."
  remarks: "Questo costruttore inizializza un nuovo <xref:System.Net.Sockets.UdpClient>e stabilisce un host remoto utilizzando il `hostname` e `port` parametri.</xref:System.Net.Sockets.UdpClient> La definizione di un host remoto predefinito è facoltativa. Se si utilizza questo costruttore, non è necessario specificare un host remoto in ogni chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A>metodo.</xref:System.Net.Sockets.UdpClient.Send%2A> Specifica un host remoto predefinito si limita a tale host. È possibile modificare l&quot;host remoto predefinito in qualsiasi momento chiamando la <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se si desidera specificare un host remoto nella chiamata per il <xref:System.Net.Sockets.UdpClient.Send%2A>(metodo), non utilizzare questo costruttore.</xref:System.Net.Sockets.UdpClient.Send%2A>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.udp_7_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.udp_7_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_7_1.vb)]"
  syntax:
    content: public UdpClient (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "Il nome dell&quot;host DNS remoto a cui si intende connettersi."
    - id: port
      type: System.Int32
      description: "Il numero di porta remota a cui si intende connettersi."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hostname</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>non è compreso tra <xref:System.Net.IPEndPoint.MinPort> e <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Active
  id: Active
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene o imposta un valore che indica se un host remoto predefinito è stato stabilito."
  remarks: "Le classi che derivano da <xref:System.Net.Sockets.UdpClient>può utilizzare questa proprietà per determinare se è stato stabilito un host remoto predefinito.</xref:System.Net.Sockets.UdpClient> È possibile stabilire un host remoto predefinito utilizzando il costruttore appropriato o chiamando il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se si stabilisce un host remoto predefinito, è possibile specificare un host remoto nella chiamata a <xref:System.Net.Sockets.UdpClient.Send%2A>.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  syntax:
    content: protected bool Active { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se è attiva una connessione; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.Active*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  id: AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Abilita o disabilita l&quot;attraversamento Network Address Translation (NAT) in un <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> istanza."
  remarks: "Il metodo AllowNatTraversal viene utilizzato per abilitare o disabilitare l&quot;attraversamento NAT per un <xref:System.Net.Sockets.UdpClient>istanza.</xref:System.Net.Sockets.UdpClient> È possibile specificare l&quot;attraversamento NAT con Teredo, 6to4 o un tunnel ISATAP.       Quando il `allowed` parametro è false, l&quot; <xref:System.Net.Sockets.SocketOptionName>opzione sul socket associato è impostata su <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Disabilita in modo esplicito l&quot;attraversamento NAT per un <xref:System.Net.Sockets.UdpClient>istanza.</xref:System.Net.Sockets.UdpClient>       Quando il `allowed` parametro è true, l&quot; <xref:System.Net.Sockets.SocketOptionName>opzione sul socket associato è impostata su <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Può consentire l&quot;attraversamento NAT per un <xref:System.Net.Sockets.UdpClient>a seconda delle regole del firewall sul posto del sistema.</xref:System.Net.Sockets.UdpClient>       Un indirizzo Teredo è un indirizzo IPv6 con il prefisso 2001::/ / 32. Gli indirizzi Teredo possono essere restituiti tramite normale risoluzione dei nomi DNS o enumerati come un indirizzo IPv6 assegnato a un&quot;interfaccia locale."
  syntax:
    content: public void AllowNatTraversal (bool allowed);
    parameters:
    - id: allowed
      type: System.Boolean
      description: "Valore booleano che specifica se abilitare o disabilitare l&quot;attraversamento NAT."
  overload: System.Net.Sockets.UdpClient.AllowNatTraversal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Available
  id: Available
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene la quantità di dati ricevuti dalla rete a cui è disponibile per la lettura."
  remarks: "Le proprietà disponibili viene utilizzata per determinare che la quantità di dati accodati nel buffer di rete per la lettura. Se sono disponibili i dati, chiamare <xref:System.Net.Sockets.NetworkStream.Read%2A>per ottenere i dati.</xref:System.Net.Sockets.NetworkStream.Read%2A> Se non sono disponibili dati, la proprietà disponibile restituisce 0.       Se l&quot;host remoto Arresta o chiude la connessione, la proprietà disponibile genera un <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico e fare riferimento alla documentazione codici di errore di Windows Sockets versione 2 API in MSDN library all&quot;indirizzo [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)per una descrizione dettagliata dell&quot;errore.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>"
  example:
  - "The following code example shows the use of the Available property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_1_1.cpp)]"
  syntax:
    content: public int Available { get; }
    return:
      type: System.Int32
      description: "Il numero di byte di dati ricevuti dalla rete."
  overload: System.Net.Sockets.UdpClient.Available*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante il tentativo di accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  id: BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Riceve un datagramma da un host remoto in modo asincrono."
  remarks: "L&quot;operazione asincrona di BeginReceive deve essere completata chiamando il <xref:System.Net.Sockets.UdpClient.EndReceive%2A>metodo.</xref:System.Net.Sockets.UdpClient.EndReceive%2A> In genere, il metodo viene richiamato dal `requestCallback` delegato.       Questo metodo non è bloccata fino al completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare il <xref:System.Net.Sockets.UdpClient.Receive%2A>metodo.</xref:System.Net.Sockets.UdpClient.Receive%2A>       Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginReceive to asynchronously receive a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_12_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_12_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);
    parameters:
    - id: requestCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;operazione è stata completata.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Un oggetto definito dall&quot;utente che contiene informazioni sull&quot;operazione di ricezione. Questo oggetto viene passato per il `requestCallback` delegato quando l&quot;operazione è stata completata."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che fa riferimento alla ricezione asincrona.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginReceive*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Invia un datagramma a un host remoto in modo asincrono. La destinazione è stata specificata in precedenza da una chiamata a <xref:System.Net.Sockets.UdpClient.Connect*>.</xref:System.Net.Sockets.UdpClient.Connect*>"
  remarks: "L&quot;operazione asincrona di BeginSend deve essere completata chiamando il <xref:System.Net.Sockets.UdpClient.EndSend%2A>metodo.</xref:System.Net.Sockets.UdpClient.EndSend%2A> In genere, il metodo viene richiamato dal `requestCallback` delegato.       Questo metodo si blocca fino al completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Sockets.UdpClient.Send%2A>overload del metodo.</xref:System.Net.Sockets.UdpClient.Send%2A>       Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginSend to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Oggetto <xref:System.Byte>matrice che contiene i dati da inviare.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Il numero di byte da inviare."
    - id: requestCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;operazione è stata completata.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Un oggetto definito dall&quot;utente che contiene informazioni sull&quot;operazione di invio. Questo oggetto viene passato per il `requestCallback` delegato quando l&quot;operazione è stata completata."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che fa riferimento l&quot;invio asincrono.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Invia un datagramma a una destinazione in modo asincrono. La destinazione è specificata da un <xref:System.Net.EndPoint>.</xref:System.Net.EndPoint>"
  remarks: "L&quot;operazione asincrona di BeginSend deve essere completata chiamando il <xref:System.Net.Sockets.UdpClient.EndSend%2A>metodo.</xref:System.Net.Sockets.UdpClient.EndSend%2A> In genere, il metodo viene richiamato dal `requestCallback` delegato.       Questo metodo non è bloccata fino al completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Sockets.UdpClient.Send%2A>overload del metodo.</xref:System.Net.Sockets.UdpClient.Send%2A>       Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Oggetto <xref:System.Byte>matrice che contiene i dati da inviare.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Il numero di byte da inviare."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "Il <xref:System.Net.EndPoint>che rappresenta la destinazione per i dati.</xref:System.Net.EndPoint>"
    - id: requestCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;operazione è stata completata.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Un oggetto definito dall&quot;utente che contiene informazioni sull&quot;operazione di invio. Questo oggetto viene passato per il `requestCallback` delegato quando l&quot;operazione è stata completata."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che fa riferimento l&quot;invio asincrono.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Invia un datagramma a una destinazione in modo asincrono. La destinazione è specificata dal nome dell&quot;host e numero di porta."
  remarks: "L&quot;operazione asincrona di BeginSend deve essere completata chiamando il <xref:System.Net.Sockets.UdpClient.EndSend%2A>metodo.</xref:System.Net.Sockets.UdpClient.EndSend%2A> In genere, il metodo viene richiamato dal `requestCallback` delegato.       Questo metodo non è bloccata fino al completamento dell&quot;operazione. Per il blocco fino al completamento dell&quot;operazione, utilizzare uno del <xref:System.Net.Sockets.UdpClient.Send%2A>overload del metodo.</xref:System.Net.Sockets.UdpClient.Send%2A>       Per informazioni dettagliate sull&quot;uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Oggetto <xref:System.Byte>matrice che contiene i dati da inviare.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Il numero di byte da inviare."
    - id: hostname
      type: System.String
      description: "L&quot;host di destinazione."
    - id: port
      type: System.Int32
      description: "Il numero di porta di destinazione."
    - id: requestCallback
      type: System.AsyncCallback
      description: "Un <xref:System.AsyncCallback>delegato che fa riferimento al metodo da richiamare quando l&quot;operazione è stata completata.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Un oggetto definito dall&quot;utente che contiene informazioni sull&quot;operazione di invio. Questo oggetto viene passato per il `requestCallback` delegato quando l&quot;operazione è stata completata."
    return:
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>che fa riferimento l&quot;invio asincrono.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Client
  id: Client
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene o imposta la rete sottostante <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  remarks: "<xref:System.Net.Sockets.UdpClient>Crea un <xref:System.Net.Sockets.Socket>utilizzato per inviare e ricevere dati in rete.</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient> Classi che derivano da <xref:System.Net.Sockets.UdpClient>questa proprietà per ottenere o impostare questo <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient> Utilizzare sottostante <xref:System.Net.Sockets.Socket>restituita dal Client se si richiede un accesso oltre a quelli che <xref:System.Net.Sockets.UdpClient>fornisce.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.Socket> È anche possibile utilizzare Client per impostare il sottostante <xref:System.Net.Sockets.Socket>a un <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> esistente</xref:System.Net.Sockets.Socket> Ciò è utile se si desidera sfruttare la semplicità di <xref:System.Net.Sockets.UdpClient>utilizzo preesistente <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>"
  example:
  - "The following example demonstrates the use of the Client property. In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cs[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_0_1.cs)]\n [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_0_1.cpp)]\n [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/p-system.net.sockets.udp_0_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket Client { get; set; }
    return:
      type: System.Net.Sockets.Socket
      description: "La rete sottostante <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.UdpClient.Client*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Close
  id: Close
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Chiude la connessione UDP."
  remarks: "Alla chiusura disabilita il sottostante <xref:System.Net.Sockets.Socket>e rilascia tutte le risorse gestite sia associate a <xref:System.Net.Sockets.UdpClient>.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.Socket>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  example:
  - "The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the Close method.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/csharp/m-system.net.sockets.udp_10_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/cpp/m-system.net.sockets.udp_10_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_10_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Close*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  id: Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Stabilisce un host remoto predefinito utilizzando l&quot;endpoint di rete specificata."
  remarks: "Il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo stabilisce un host remoto predefinito utilizzando il valore specificato nel `endPoint` parametro.</xref:System.Net.Sockets.UdpClient.Connect%2A> Una volta stabilita, non è necessario specificare un host remoto in ogni chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A>metodo.</xref:System.Net.Sockets.UdpClient.Send%2A>       La definizione di un host remoto predefinito è facoltativa. Specifica un host remoto predefinito si limita a tale host. Se si desidera inviare datagrammi in un altro host remoto, è necessario eseguire un&quot;altra chiamata al <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo o creare un altro <xref:System.Net.Sockets.UdpClient>senza un host remoto predefinito.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> Se è stato stabilito un computer remoto predefinito host e anche specificare un host remoto nella chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A>metodo, <xref:System.Net.Sockets.UdpClient.Send%2A>verrà generata una <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore.       Se si chiama il <xref:System.Net.Sockets.Socket.Connect%2A>(metodo), tutti i datagrammi provenienti da un indirizzo diverso verrà eliminato il valore predefinito specificato.</xref:System.Net.Sockets.Socket.Connect%2A> Non è possibile impostare l&quot;host remoto predefinito per un indirizzo di broadcast utilizzando questo metodo, a meno che non si eredita da <xref:System.Net.Sockets.UdpClient>, utilizzare il metodo di Client per ottenere l&quot;oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l&quot;opzione di socket per <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       È tuttavia possibile trasmettere i dati per il valore predefinito indirizzo di broadcast, 255.255.255.255, se si specifica <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>nella chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A>metodo.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Se l&quot;applicazione richiede un maggiore controllo sull&quot;indirizzo di broadcast, è possibile anche ripristinare utilizzando la <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Protocollo UDP il poiché è orientato alla connessione, il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo non blocca.</xref:System.Net.Sockets.UdpClient.Connect%2A> Non chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo se si prevede di ricevere datagrammi multicast.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/csharp/m-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/cpp/m-system.net.sockets.udp_1_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_1_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPEndPoint endPoint);
    parameters:
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "Un <xref:System.Net.IPEndPoint>che specifica l&quot;endpoint di rete a cui si desidera inviare i dati.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>endPoint</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> è chiuso."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Stabilisce un host remoto predefinito utilizzando il numero di porta e indirizzo IP specificato."
  remarks: "Il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo stabilisce un host remoto predefinito utilizzando i valori specificati nel `addr` e `port` parametri.</xref:System.Net.Sockets.UdpClient.Connect%2A> Una volta stabilita, non è necessario specificare un host remoto in ogni chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A>metodo.</xref:System.Net.Sockets.UdpClient.Send%2A>       La definizione di un host remoto predefinito è facoltativa. Specifica un host remoto predefinito si limita a tale host. Se si desidera inviare datagrammi in un altro host remoto, è necessario eseguire un&quot;altra chiamata al <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo o creare un altro <xref:System.Net.Sockets.UdpClient>senza un host remoto predefinito.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> Se è stato stabilito un computer remoto predefinito host e anche specificare un host remoto nella chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A>metodo, <xref:System.Net.Sockets.UdpClient.Send%2A>verrà generata una <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore.       Se si chiama il <xref:System.Net.Sockets.Socket.Connect%2A>(metodo), tutti i datagrammi provenienti da un indirizzo diverso verrà eliminato il valore predefinito specificato.</xref:System.Net.Sockets.Socket.Connect%2A> Non è possibile impostare l&quot;host remoto predefinito per un indirizzo di broadcast utilizzando questo metodo, a meno che non si eredita da <xref:System.Net.Sockets.UdpClient>, utilizzare il metodo di client per ottenere l&quot;oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l&quot;opzione di socket per <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       È tuttavia possibile trasmettere i dati per il valore predefinito indirizzo di broadcast, 255.255.255.255, se si specifica <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>nella chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A>metodo.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Se l&quot;applicazione richiede un maggiore controllo sull&quot;indirizzo di broadcast, è possibile anche ripristinare utilizzando la <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Protocollo UDP il poiché è orientato alla connessione, il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo non blocca.</xref:System.Net.Sockets.UdpClient.Connect%2A> Non chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo se si prevede di ricevere datagrammi multicast.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an IP address and port number to connect with a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/csharp/m-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/cpp/m-system.net.sockets.udp_6_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_6_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPAddress addr, int port);
    parameters:
    - id: addr
      type: System.Net.IPAddress
      description: "Il <xref:System.Net.IPAddress>dell&quot;host remoto a cui si desidera inviare i dati.</xref:System.Net.IPAddress>"
    - id: port
      type: System.Int32
      description: "Il numero di porta a cui si desidera inviare i dati."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>è chiuso."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>addr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>non è compreso tra <xref:System.Net.IPEndPoint.MinPort> e <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Stabilisce un host remoto predefinito utilizzando il nome e numero porta host."
  remarks: "Il metodo Connect stabilisce un host remoto predefinito utilizzando i valori specificati nel `port` e `hostname` parametri. Una volta stabilita, non è necessario specificare un host remoto in ogni chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A>metodo.</xref:System.Net.Sockets.UdpClient.Send%2A>       La definizione di un host remoto predefinito è facoltativa. Specifica un host remoto predefinito si limita a tale host. Se si desidera inviare datagrammi in un altro host remoto, è necessario apportare un&quot;altra chiamata al metodo di connessione o creare un altro <xref:System.Net.Sockets.UdpClient>senza un host remoto predefinito.</xref:System.Net.Sockets.UdpClient>       Se è stato stabilito un computer remoto predefinito host e anche specificare un host remoto nella chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A>metodo, <xref:System.Net.Sockets.UdpClient.Send%2A>verrà generata una <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore.       Se si chiama il <xref:System.Net.Sockets.Socket.Connect%2A>(metodo), tutti i datagrammi provenienti da un indirizzo diverso verrà eliminato il valore predefinito specificato.</xref:System.Net.Sockets.Socket.Connect%2A> Non è possibile impostare l&quot;host remoto predefinito per un indirizzo di broadcast utilizzando questo metodo, a meno che non si eredita da <xref:System.Net.Sockets.UdpClient>, utilizzare il metodo di client per ottenere l&quot;oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l&quot;opzione di socket per <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       È tuttavia possibile trasmettere i dati per il valore predefinito indirizzo di broadcast, 255.255.255.255, se si specifica <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>nella chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A>metodo.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Se l&quot;applicazione richiede un maggiore controllo sull&quot;indirizzo di broadcast, è possibile anche ripristinare utilizzando la <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Protocollo UDP il perché è privo di connessione, il metodo Connect non blocca. Non chiamare il metodo Connect, se si prevede di ricevere datagrammi multicast."
  example:
  - "The following example uses the host name and port number to connect to a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/csharp/m-system.net.sockets.udp_13_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/cpp/m-system.net.sockets.udp_13_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_13_1.vb)]"
  syntax:
    content: public void Connect (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "Il nome DNS dell&quot;host remoto a cui si desidera inviare i dati."
    - id: port
      type: System.Int32
      description: "Il numero di porta dell&quot;host remoto a cui si desidera inviare i dati."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> è chiuso."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>non è compreso tra <xref:System.Net.IPEndPoint.MinPort> e <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Rilascia le risorse gestite e non gestite usate dal <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Rilascia le risorse non gestite usate da di <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico `Dispose()`(metodo) e <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A>richiama `Dispose` con `disposing` impostato su `false`.</xref:System.Object.Finalize%2A>       Quando il `disposing` parametro è true, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Net.Sockets.UdpClient>riferimenti.</xref:System.Net.Sockets.UdpClient> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene o imposta un <xref:System.Boolean>valore che specifica se il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> consente la frammentazione dei datagrammi IP (Internet Protocol).</xref:System.Boolean>"
  remarks: "I datagrammi richiedono la frammentazione quando le dimensioni superano l&quot;unità MTU (Maximum Transfer) del mezzo di trasmissione. Essi possono essere frammentati dall&quot;host di invio o da un router intermedio. Se un datagramma deve essere frammentato e <xref:System.Net.Sockets.Socket.DontFragment%2A>opzione è impostata, il datagramma viene eliminato e viene inviato un messaggio di errore di controllo messaggio protocollo ICMP (Internet) al mittente del datagramma.</xref:System.Net.Sockets.Socket.DontFragment%2A>"
  example:
  - "The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#2](~/add/codesnippet/csharp/p-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#2](~/add/codesnippet/cpp/p-system.net.sockets.udp_5_1.cpp)]"
  syntax:
    content: public bool DontFragment { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> consente la frammentazione dei datagrammi; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.DontFragment*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Questa proprietà può essere impostata solo per socket che utilizzano il <xref:System.Net.Sockets.AddressFamily>flag o <xref:System.Net.Sockets.AddressFamily>flag.</xref:System.Net.Sockets.AddressFamily> </xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  id: DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Lascia un gruppo multicast."
  remarks: "Il metodo di DropMulticastGroup estrae <xref:System.Net.Sockets.UdpClient>dal gruppo multicast identificato da specificata <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> Dopo aver chiamato il metodo DropMulticastGroup, sottostante <xref:System.Net.Sockets.Socket>Invia un pacchetto (IGMP (Internet Group Management Protocol) per il router, rimuovendo il router dal gruppo multicast.</xref:System.Net.Sockets.Socket> Dopo un <xref:System.Net.Sockets.UdpClient>viene estratta dal gruppo, non saranno in grado di ricevere datagrammi inviati a tale gruppo.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  example:
  - "The following example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_3_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_3_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_3_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Il <xref:System.Net.IPAddress>del gruppo multicast per lasciare.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "L&quot;indirizzo IP non è compatibile con il <xref:System.Net.Sockets.AddressFamily>valore che definisce lo schema di indirizzamento del socket.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Lascia un gruppo multicast."
  remarks: "Il metodo di DropMulticastGroup estrae <xref:System.Net.Sockets.UdpClient>dal gruppo multicast identificato da specificata <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> Dopo aver chiamato il metodo DropMulticastGroup, sottostante <xref:System.Net.Sockets.Socket>Invia un pacchetto (IGMP (Internet Group Management Protocol) per il router, rimuovendo il router dal gruppo multicast.</xref:System.Net.Sockets.Socket> Dopo un <xref:System.Net.Sockets.UdpClient>viene estratta dal gruppo, non saranno in grado di ricevere datagrammi inviati a tale gruppo.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>proprietà per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  example:
  - "The following code example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/d83f3217-6e3e-43a5-a5d8-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/d83f3217-6e3e-43a5-a5d8-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/d83f3217-6e3e-43a5-a5d8-_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Il <xref:System.Net.IPAddress>del gruppo multicast per lasciare.</xref:System.Net.IPAddress>"
    - id: ifindex
      type: System.Int32
      description: "L&quot;indirizzo locale del gruppo multicast uscire."
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "L&quot;indirizzo IP non è compatibile con il <xref:System.Net.Sockets.AddressFamily>valore che definisce lo schema di indirizzamento del socket.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene o imposta un <xref:System.Boolean>valore che specifica se il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> può inviare o ricevere pacchetti broadcast.</xref:System.Boolean>"
  remarks: "La trasmissione è limitata a una subnet specifica. È possibile trasmettere alla subnet locale mediante l&quot;invio di un pacchetto all&quot;indirizzo 255.255.255.255; In alternativa, è possibile utilizzare l&quot;indirizzo broadcast con riferimento, ovvero la parte di rete di un indirizzo IP (Internet Protocol) con tutti i bit impostati nella sezione host. Ad esempio, se l&quot;indirizzo IP è 192.168.1.40 (un indirizzo di classe C, con la parte di rete come i primi tre ottetti e la parte host è l&quot;ultimo ottetto), l&quot;indirizzo di broadcast diretto è 192.168.1.255."
  example:
  - "The following code example shows the use of the EnableBroadcast property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#3](~/add/codesnippet/csharp/p-system.net.sockets.udp_3_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#3](~/add/codesnippet/cpp/p-system.net.sockets.udp_3_1.cpp)]"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> consente i pacchetti broadcast; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.EnableBroadcast*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  id: EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Termina una ricezione asincrona in sospeso."
  remarks: "Questo metodo si blocca fino a quando l&quot;operazione è completata.       Per eseguire questa operazione in modo sincrono, utilizzare il <xref:System.Net.Sockets.UdpClient.Receive%2A>metodo.</xref:System.Net.Sockets.UdpClient.Receive%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/5ace0ab2-d0e9-4f1f-a415-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/5ace0ab2-d0e9-4f1f-a415-_1.cs)]"
  syntax:
    content: public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>oggetto restituito da una chiamata a <xref:System.Net.Sockets.UdpClient.BeginReceive*>.</xref:System.Net.Sockets.UdpClient.BeginReceive*> </xref:System.IAsyncResult>"
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "L&quot;endpoint remoto specificato."
    return:
      type: System.Byte[]
      description: "Se ha esito positivo, il numero di byte ricevuti. In caso contrario, questo metodo restituisce 0."
  overload: System.Net.Sockets.UdpClient.EndReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>non è stato restituito da una chiamata al <xref:System.Net.Sockets.UdpClient.BeginReceive*> metodo."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndReceive è stato chiamato in precedenza per la lettura asincrona."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante il tentativo di accedere a sottostante <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> Per ulteriori informazioni, vedere la sezione Osservazioni."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  id: EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Termina una trasmissione asincrona in sospeso."
  remarks: "Questo metodo si blocca fino a quando l&quot;operazione è completata.       Per eseguire questa operazione in modo sincrono, utilizzare il <xref:System.Net.Sockets.UdpClient.Send%2A>metodo.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_0_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_0_1.cs)]"
  syntax:
    content: public int EndSend (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Un <xref:System.IAsyncResult>oggetto restituito da una chiamata a <xref:System.Net.Sockets.UdpClient.BeginSend*>.</xref:System.Net.Sockets.UdpClient.BeginSend*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "Se ha esito positivo, il numero di byte inviati per la <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.EndSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>non è stato restituito da una chiamata al <xref:System.Net.Sockets.Socket.BeginSend*> metodo."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.Socket.EndSend*>è stato chiamato in precedenza per la lettura asincrona.</xref:System.Net.Sockets.Socket.EndSend*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante il tentativo di accesso al socket sottostante. Per ulteriori informazioni, vedere la sezione Osservazioni."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene o imposta un <xref:System.Boolean>valore che specifica se il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> consente un solo client di utilizzare una porta.</xref:System.Boolean>"
  remarks: "Per impostazione predefinita, più client possono utilizzare una porta specifica. Tuttavia, solo uno dei client possa eseguire operazioni sul traffico di rete inviato alla porta. È possibile utilizzare la proprietà ExclusiveAddressUse per impedire che più client utilizzando una porta specifica.       Questa proprietà deve essere impostata prima di socket sottostante è associato a una porta del client. Se si chiama <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, la porta del client viene associata come effetto collaterale del costruttore, e successivamente non è possibile impostare la proprietà ExclusiveAddressUse</xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the ExclusiveAddressUse property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#4](~/add/codesnippet/csharp/p-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#4](~/add/codesnippet/cpp/p-system.net.sockets.udp_4_1.cpp)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> consente un solo client di utilizzare una porta specifica; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> per Windows Server 2003 e Windows XP Service Pack 2 e versioni successive, e <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per tutte le altre versioni."
  overload: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante il tentativo di accesso al socket sottostante."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Aggiunge un <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> a un gruppo multicast."
  remarks: "Il metodo JoinMulticastGroup effettua la sottoscrizione <xref:System.Net.Sockets.UdpClient>a un gruppo multicast utilizzando specificata <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> Dopo aver chiamato il metodo JoinMulticastGroup, sottostante <xref:System.Net.Sockets.Socket>Invia un pacchetto (IGMP (Internet Group Management Protocol) per il router che richiede l&quot;appartenenza al gruppo multicast.</xref:System.Net.Sockets.Socket> L&quot;intervallo di indirizzi multicast è tra 224.0.0.0 e 239.255.255.255. Se si specifica un indirizzo esterno all&quot;intervallo o se il router a cui viene effettuata la richiesta non esegue il multicast abilitata, <xref:System.Net.Sockets.UdpClient>verrà generata una <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient> Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore. Una volta il <xref:System.Net.Sockets.UdpClient>sia elencato con il router come membro del gruppo multicast, sarà in grado di ricevere datagrammi multicast inviati a specificato <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient>      > [!NOTE] > È necessario creare il <xref:System.Net.Sockets.UdpClient>utilizzando il numero di porta multicast; in caso contrario, non sarà in grado di ricevere datagrammi multicast.</xref:System.Net.Sockets.UdpClient> Non chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo prima di chiamare il metodo JoinMulticastGroup, o <xref:System.Net.Sockets.UdpClient.Receive%2A>metodo avrà esito negativo.</xref:System.Net.Sockets.UdpClient.Receive%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Non è necessario appartenere a un gruppo multicast per inviare datagrammi a un indirizzo IP multicast.       Prima di unire un gruppo multicast, assicurarsi che il socket è associato alla porta o l&quot;endpoint. Tale scopo, è una chiamata a uno dei costruttori che accettano una porta o un endpoint come parametro.       Per arrestare la ricezione di datagrammi multicast, chiamare il <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>metodo e fornire il <xref:System.Net.IPAddress>di gruppo da cui si.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      > [!NOTE] > In caso di IPv6, sono disponibili è possibile scegliere tra diversi intervalli di indirizzi multicast. Consultare la specifica IETF RFC 2375.      > [!NOTE] > Non è possibile chiamare <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>in un <xref:System.Net.Sockets.UdpClient>creata senza una specifica porta locale (ovvero, che utilizza il <xref:System.Net.Sockets.UdpClient.%23ctor>o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>costruttore).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example demonstrates how to join a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_8_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_8_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_8_1.cs)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Il multicast <xref:System.Net.IPAddress>del gruppo di cui si desidera aggiungere.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "L&quot;indirizzo IP non è compatibile con il <xref:System.Net.Sockets.AddressFamily>valore che definisce lo schema di indirizzamento del socket.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Aggiunge un <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> a un gruppo multicast."
  remarks: "Prima di unire un gruppo multicast, assicurarsi che il socket è associato alla porta o l&quot;endpoint. È possibile farlo chiamando uno dei costruttori che accettano una porta o un endpoint come parametro.       Il `infindex` parametro viene utilizzato per identificare un&quot;interfaccia hardware nello stesso collegamento.      > [!NOTE] > Esistono più intervalli di indirizzi multicast da selezionare. Fare riferimento alla specifica IETF RFC 2375.      > [!NOTE] > Non è possibile chiamare <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>in un <xref:System.Net.Sockets.UdpClient>creata senza una specifica porta locale (ovvero, che utilizza il <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName>o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName>costruttore).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - >-
    [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/cpp/f675abdc-8a60-48f5-a8c6-_1.cpp)]
     [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/visualbasic/f675abdc-8a60-48f5-a8c6-_1.vb)]
     [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/csharp/f675abdc-8a60-48f5-a8c6-_1.cs)]
  syntax:
    content: public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);
    parameters:
    - id: ifindex
      type: System.Int32
      description: "L&quot;indice di interfaccia associata all&quot;indirizzo IP locale in cui si desidera aggiungere al gruppo multicast."
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Il multicast <xref:System.Net.IPAddress>del gruppo di cui si desidera aggiungere.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Aggiunge un <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> a un gruppo multicast con il tempo specificato per Live (TTL)."
  remarks: "Il <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>metodo esegue la sottoscrizione <xref:System.Net.Sockets.UdpClient>a un gruppo multicast utilizzando specificata <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> Dopo la chiamata di <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>metodo sottostante <xref:System.Net.Sockets.Socket>Invia un pacchetto (IGMP (Internet Group Management Protocol) per il router che richiede l&quot;appartenenza al gruppo multicast.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> L&quot;intervallo di indirizzi multicast è tra 224.0.0.0 e 239.255.255.255. Se si specifica un indirizzo esterno all&quot;intervallo o se il router a cui viene effettuata la richiesta non esegue il multicast abilitata, <xref:System.Net.Sockets.UdpClient>verrà generata una <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient> Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore. Il `timeToLive` parametro specifica il numero di hop router sarà consentito per un datagramma multicast prima di essere eliminato. Una volta il <xref:System.Net.Sockets.UdpClient>sia elencato con il router come membro del gruppo multicast, sarà in grado di ricevere datagrammi multicast inviati a specificato <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient>      > [!NOTE] > È necessario creare il <xref:System.Net.Sockets.UdpClient>utilizzando il numero di porta multicast in caso contrario non sarà in grado di ricevere datagrammi multicast.</xref:System.Net.Sockets.UdpClient> Non chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo prima di chiamare il <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>metodo o il metodo di ricezione non funzionerà.</xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Non è necessario appartenere a un gruppo multicast per inviare datagrammi a un indirizzo IP multicast.       Prima di unire un gruppo multicast assicurarsi che il socket è associato alla porta o l&quot;endpoint. Tale scopo, è una chiamata a uno dei costruttori che accettano come parametro una porta o un endpoint.       Per arrestare la ricezione di datagrammi multicast, chiamare il <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>metodo e fornire il <xref:System.Net.IPAddress>di gruppo da cui si.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      > [!NOTE] > Non è possibile chiamare <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>in un <xref:System.Net.Sockets.UdpClient>creata senza una specifica porta locale (ovvero, che utilizza il <xref:System.Net.Sockets.UdpClient.%23ctor>o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>costruttore).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/csharp/2ab5d1d5-1bd6-4398-ae63-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/cpp/2ab5d1d5-1bd6-4398-ae63-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/visualbasic/2ab5d1d5-1bd6-4398-ae63-_1.vb)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Il <xref:System.Net.IPAddress>del gruppo multicast per creare un join.</xref:System.Net.IPAddress>"
    - id: timeToLive
      type: System.Int32
      description: "Il Time to Live (TTL), misurato in hop router."
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "La durata (TTL) fornito non è compreso tra 0 e 255"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "L&quot;indirizzo IP non è compatibile con il <xref:System.Net.Sockets.AddressFamily>valore che definisce lo schema di indirizzamento del socket.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Aggiunge un <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> a un gruppo multicast."
  remarks: "Prima di aggiungere un gruppo multicast, assicurarsi che il socket è associato alla porta o l&quot;endpoint. È possibile farlo chiamando uno dei costruttori che accettano una porta o un endpoint come parametro.      > [!NOTE] > Esistono più intervalli di indirizzi multicast da selezionare. È possibile trovarli in specifica IETF RFC 2375.      > [!NOTE] > Non è possibile chiamare <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>in un <xref:System.Net.Sockets.UdpClient>creata senza una specifica porta locale (ovvero, che utilizza il <xref:System.Net.Sockets.UdpClient.%23ctor>o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>costruttore).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example shows the use of the JoinMulticastGroup method.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#6](~/add/codesnippet/csharp/83ef7d63-bccd-4c55-a88d-_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#6](~/add/codesnippet/cpp/83ef7d63-bccd-4c55-a88d-_1.cpp)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Il multicast <xref:System.Net.IPAddress>del gruppo di cui si desidera aggiungere.</xref:System.Net.IPAddress>"
    - id: localAddress
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> Locale"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene o imposta un <xref:System.Boolean>valore che specifica se i pacchetti multicast in uscita recapitati all&quot;applicazione mittente.</xref:System.Boolean>"
  remarks: "Il multicast è un metodo scalabile per la comunicazione di molti-a-molti su Internet. Se un processo esegue la sottoscrizione a un indirizzo multicast, tutti i pacchetti inviati da quel processo vengono ricevuti da ogni altro processo che ha sottoscritto l&quot;indirizzo multicast."
  example:
  - "The following code example shows the use of the MulticastLoopback property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#7](~/add/codesnippet/csharp/p-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#7](~/add/codesnippet/cpp/p-system.net.sockets.udp_2_1.cpp)]"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> riceve pacchetti multicast; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.MulticastLoopback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  id: Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Restituisce un datagramma UDP a cui è stato inviato da un host remoto."
  remarks: "Il metodo di ricezione verrà bloccata finché non arriva un datagramma da un host remoto. Quando sono disponibili i dati, il metodo Receive leggerà il primo datagramma e restituirà la parte di dati come una matrice di byte. Questo metodo consente di popolare il `remoteEP` parametro con il <xref:System.Net.IPAddress>e il numero di porta del mittente.</xref:System.Net.IPAddress>       Se si specifica un host remoto predefinito nel <xref:System.Net.Sockets.UdpClient.Connect%2A>(metodo), il metodo Receive accetterà datagrammi solo da tale host.</xref:System.Net.Sockets.UdpClient.Connect%2A> Tutti gli altri datagrammi verranno eliminati.       Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore.      > [!NOTE] > Se si prevede di ricevere datagrammi multicast, non viene chiamato il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo prima di chiamare il metodo Receive.</xref:System.Net.Sockets.UdpClient.Connect%2A> Il <xref:System.Net.Sockets.UdpClient>utilizzata per ricevere datagrammi deve essere creata utilizzando il numero di porta multicast.</xref:System.Net.Sockets.UdpClient>"
  example:
  - "The following example demonstrates the Receive method. The Receive method blocks execution until it receives a message. Using the <xref:System.Net.IPEndPoint> passed to Receive, the identity of the responding host is revealed.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/csharp/m-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/cpp/m-system.net.sockets.udp_5_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_5_1.vb)]"
  syntax:
    content: public byte[] Receive (ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "Un <xref:System.Net.IPEndPoint>che rappresenta l&quot;host remoto da cui i dati sono stati inviati.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Byte[]
      description: "Matrice di tipo <xref:System.Byte>che contiene i dati di datagramma.</xref:System.Byte>"
  overload: System.Net.Sockets.UdpClient.Receive*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  id: ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Restituisce un datagramma UDP in modo asincrono che è stato inviato da un host remoto."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>> oggetto verrà completato dopo che è stato ricevuto il pacchetto UDP.</xref:System.Threading.Tasks.Task%601>       Se si specifica un host remoto predefinito nel <xref:System.Net.Sockets.UdpClient.Connect%2A>(metodo), questo metodo accetterà datagrammi solo da tale host.</xref:System.Net.Sockets.UdpClient.Connect%2A> Tutti gli altri datagrammi verranno eliminati.       Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore.      > [!WARNING] > Se si prevede di ricevere datagrammi multicast, non viene chiamato il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo prima di chiamare questo metodo.</xref:System.Net.Sockets.UdpClient.Connect%2A> Il <xref:System.Net.Sockets.UdpClient>utilizzata per ricevere datagrammi deve essere creata utilizzando il numero di porta multicast.</xref:System.Net.Sockets.UdpClient>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
      description: "Restituisce &lt;xref:System.Threading.Tasks.Task%601&gt;.       Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Sockets.UdpClient.ReceiveAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Sottostante <xref:System.Net.Sockets.Socket>è stata chiusa.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  id: Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Invia un datagramma UDP a un host remoto."
  remarks: "Questo overload invia datagrammi all&quot;host remoto stabilito nel <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo e restituisce il numero di byte inviato.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se non viene chiamato <xref:System.Net.Sockets.UdpClient.Connect%2A>prima di chiamare questo overload, il <xref:System.Net.Sockets.UdpClient.Send%2A>metodo genererà un <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore.       Se si desidera inviare datagrammi in un altro host remoto, è necessario chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A>(metodo) e specificare l&quot;host remoto desiderato.</xref:System.Net.Sockets.UdpClient.Connect%2A> Utilizzare una delle altre <xref:System.Net.Sockets.UdpClient.Send%2A>overload del metodo per inviare datagrammi a un indirizzo di broadcast.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. You must establish a default remote host prior to using this overload.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/csharp/m-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/cpp/m-system.net.sockets.udp_2_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_2_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Matrice di tipo <xref:System.Byte>che specifica il datagramma UDP da inviare, rappresentato come una matrice di byte.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Il numero di byte nel datagramma."
    return:
      type: System.Int32
      description: "Il numero di byte inviati."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> ha già stabilito un host remoto predefinito."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> è chiuso."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Invia un datagramma UDP all&quot;host all&quot;endpoint remoto specificato."
  remarks: "Il metodo di trasmissione invia datagrammi all&quot;endpoint specificato e restituisce il numero di byte inviati. Prima di chiamare questo overload, è necessario creare innanzitutto un <xref:System.Net.IPEndPoint>utilizzando il numero di porta e indirizzo IP dell&quot;host remoto a cui verranno inviati i datagrammi.</xref:System.Net.IPEndPoint> È possibile inviare datagrammi all&quot;indirizzo di broadcast predefinito, 255.255.255.255, specificando <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>per la <xref:System.Net.IPAddress.Address%2A>proprietà di <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.IPAddress.Address%2A> </xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> Dopo aver creato questo <xref:System.Net.IPEndPoint>, passarlo al metodo di trasmissione, come il `endPoint` parametro.</xref:System.Net.IPEndPoint>       Se si desidera inviare datagrammi a qualsiasi altro indirizzo di broadcast, utilizzare il <xref:System.Net.Sockets.UdpClient.Client%2A>per ottenere l&quot;oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l&quot;opzione di socket per <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> È inoltre possibile ripristinare utilizzando la <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Non forniscono un `endPoint` parametro a questo metodo se è già stato stabilito un host remoto con il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo.</xref:System.Net.Sockets.UdpClient.Connect%2A> In caso contrario, il metodo di trasmissione genererà un <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  example:
  - "The following example demonstrates the Send method. This example uses an <xref:System.Net.IPEndPoint> to specify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/csharp/2c594ef1-b462-42a1-adc5-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/cpp/2c594ef1-b462-42a1-adc5-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/visualbasic/2c594ef1-b462-42a1-adc5-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Matrice di tipo <xref:System.Byte>che specifica il datagramma UDP che si desidera inviare, rappresentato come una matrice di byte.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Il numero di byte nel datagramma."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "Un <xref:System.Net.IPEndPoint>che rappresenta l&quot;host e la porta a cui inviare il datagramma.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Int32
      description: "Il numero di byte inviati."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>ha già stabilito un host remoto predefinito."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>è chiuso."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  id: Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Invia un datagramma UDP a una porta specificata in un host remoto specificato."
  remarks: "Il <xref:System.Net.Sockets.UdpClient.Send%2A>metodo invia datagrammi ai valori specificati per il `hostname` e `port` parametri e restituisce il numero di byte inviati.</xref:System.Net.Sockets.UdpClient.Send%2A> È possibile inviare datagrammi all&quot;indirizzo di broadcast predefinito specificando &quot;255.255.255.255&quot; per il `hostname` valore del parametro.       Se si desidera inviare datagrammi a qualsiasi altro indirizzo di broadcast, utilizzare il <xref:System.Net.Sockets.UdpClient.Client%2A>per ottenere l&quot;oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l&quot;opzione di socket per <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> È inoltre possibile ripristinare utilizzando la <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Non fornire un nome host o la porta numero da questo metodo se è già stato stabilito un host remoto con il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo.</xref:System.Net.Sockets.UdpClient.Connect%2A> In caso contrario, il <xref:System.Net.Sockets.UdpClient.Send%2A>metodo genererà un <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. This example uses a host name and a port number to identify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/csharp/5d28964f-8575-4595-a91e-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/cpp/5d28964f-8575-4595-a91e-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/visualbasic/5d28964f-8575-4595-a91e-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, string hostname, int port);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Matrice di tipo <xref:System.Byte>che specifica il datagramma UDP da inviare, rappresentato come una matrice di byte.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Il numero di byte nel datagramma."
    - id: hostname
      type: System.String
      description: "Il nome dell&quot;host remoto a cui si desidera inviare il datagramma."
    - id: port
      type: System.Int32
      description: "Il numero di porta remota con cui si desidera comunicare."
    return:
      type: System.Int32
      description: "Il numero di byte inviati."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> ha già stabilito un host remoto predefinito."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> è chiuso."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  id: SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Invia un datagramma UDP in modo asincrono a un host remoto."
  remarks: "Questo overload invia datagrammi all&quot;host remoto stabilito nel <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo.</xref:System.Net.Sockets.UdpClient.Connect%2A> Se non è necessario chiamare <xref:System.Net.Sockets.UdpClient.Connect%2A>prima di chiamare questo overload, il metodo genererà un <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Connect%2A> Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore.       Se si desidera inviare datagrammi in un altro host remoto, è necessario chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A>(metodo) e specificare l&quot;host remoto desiderato.</xref:System.Net.Sockets.UdpClient.Connect%2A> Utilizzare una delle altre <xref:System.Net.Sockets.UdpClient.SendAsync%2A>overload del metodo per inviare datagrammi a un indirizzo di broadcast.</xref:System.Net.Sockets.UdpClient.SendAsync%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Matrice di tipo <xref:System.Byte>che specifica il datagramma UDP da inviare, rappresentato come una matrice di byte.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Il numero di byte nel datagramma."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Restituisce &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> ha già stabilito un host remoto predefinito."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> è chiuso."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Invia un datagramma UDP in modo asincrono a un host remoto."
  remarks: "Questo metodo invia datagrammi all&quot;endpoint specificato. Prima di chiamare questo overload, è necessario creare innanzitutto un <xref:System.Net.IPEndPoint>utilizzando il numero di porta e indirizzo IP dell&quot;host remoto a cui verranno inviati i datagrammi.</xref:System.Net.IPEndPoint> È possibile inviare datagrammi all&quot;indirizzo di broadcast predefinito, 255.255.255.255, specificando <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>per la <xref:System.Net.IPAddress.Address%2A>proprietà di <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.IPAddress.Address%2A> </xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> Dopo aver creato questo <xref:System.Net.IPEndPoint>, passare a questo metodo come la `endPoint` parametro.</xref:System.Net.IPEndPoint>       Se si desidera inviare datagrammi a qualsiasi altro indirizzo di broadcast, utilizzare il <xref:System.Net.Sockets.UdpClient.Client%2A>per ottenere l&quot;oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l&quot;opzione di socket per <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> È inoltre possibile ripristinare utilizzando la <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!WARNING] > Non forniscono un `endPoint` parametro a questo metodo se è già stato stabilito un host remoto con il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo.</xref:System.Net.Sockets.UdpClient.Connect%2A> In caso contrario, questo metodo genererà un <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Matrice di tipo <xref:System.Byte>che specifica il datagramma UDP da inviare, rappresentato come una matrice di byte.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Il numero di byte nel datagramma."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "Un <xref:System.Net.IPEndPoint>che rappresenta l&quot;host e la porta a cui inviare il datagramma.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Restituisce &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>ha già stabilito un host remoto predefinito."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>è chiuso."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Invia un datagramma UDP in modo asincrono a un host remoto."
  remarks: "Questo metodo invia datagrammi ai valori specificati per il `hostname` e `port` parametri. È possibile inviare datagrammi all&quot;indirizzo di broadcast predefinito specificando &quot;255.255.255.255&quot; per il `hostname` valore del parametro.       Se si desidera inviare datagrammi a qualsiasi altro indirizzo di broadcast, utilizzare il <xref:System.Net.Sockets.UdpClient.Client%2A>per ottenere l&quot;oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l&quot;opzione di socket per <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> È inoltre possibile ripristinare utilizzando la <xref:System.Net.Sockets.Socket>classe.</xref:System.Net.Sockets.Socket>      > [!WARNING] > Non fornire un nome host o la porta numero da questo metodo se è già stato stabilito un host remoto con il <xref:System.Net.Sockets.UdpClient.Connect%2A>metodo.</xref:System.Net.Sockets.UdpClient.Connect%2A> In caso contrario, questo metodo genererà un <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>per ottenere il codice di errore specifico.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell&quot;API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell&quot;errore."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, string hostname, int port);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Matrice di tipo <xref:System.Byte>che specifica il datagramma UDP da inviare, rappresentato come una matrice di byte.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Il numero di byte nel datagramma."
    - id: hostname
      type: System.String
      description: "Il nome dell&quot;host remoto a cui si desidera inviare il datagramma."
    - id: port
      type: System.Int32
      description: "Il numero di porta remota con cui si desidera comunicare."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Restituisce &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> ha già stabilito un host remoto predefinito."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> è chiuso."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Si è verificato un errore durante l&quot;accesso al socket. Per ulteriori informazioni, vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Ttl
  id: Ttl
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ottiene o imposta un valore che specifica il valore Time to Live (TTL) dei pacchetti IP (Internet Protocol) inviati dal <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  remarks: "Il valore di durata (TTL) indica il numero massimo di router, un pacchetto può attraversare prima che il router ignora il pacchetto e un messaggio di protocollo ICMP (Internet Control) &quot;TTL superato&quot; messaggio di errore viene restituito al mittente."
  example:
  - "The following code example shows the use of the Ttl property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#5](~/add/codesnippet/csharp/p-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#5](~/add/codesnippet/cpp/p-system.net.sockets.udp_6_1.cpp)]"
  syntax:
    content: public short Ttl { get; set; }
    return:
      type: System.Int16
      description: "Il valore di durata (TTL)."
  overload: System.Net.Sockets.UdpClient.Ttl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Sockets.UdpClient.#ctor
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: true
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Sockets.UdpClient.Active
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
- uid: System.Net.Sockets.UdpClient.Available
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.Client
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.UdpClient.Close
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
- uid: System.Net.Sockets.UdpClient.Dispose
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
- uid: System.Net.Sockets.UdpClient.DontFragment
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<UdpReceiveResult>
  nameWithType: Task<UdpReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.UdpReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: UdpReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.Ttl
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.UdpClient.#ctor*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient
  nameWithType: UdpClient.UdpClient
- uid: System.Net.Sockets.UdpClient.Active*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal
  nameWithType: UdpClient.AllowNatTraversal
- uid: System.Net.Sockets.UdpClient.Available*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive
  nameWithType: UdpClient.BeginReceive
- uid: System.Net.Sockets.UdpClient.BeginSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend
  nameWithType: UdpClient.BeginSend
- uid: System.Net.Sockets.UdpClient.Client*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
- uid: System.Net.Sockets.UdpClient.Close*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close
  nameWithType: UdpClient.Close
- uid: System.Net.Sockets.UdpClient.Connect*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect
  nameWithType: UdpClient.Connect
- uid: System.Net.Sockets.UdpClient.Dispose*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose
  nameWithType: UdpClient.Dispose
- uid: System.Net.Sockets.UdpClient.DontFragment*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup
  nameWithType: UdpClient.DropMulticastGroup
- uid: System.Net.Sockets.UdpClient.EnableBroadcast*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive
  nameWithType: UdpClient.EndReceive
- uid: System.Net.Sockets.UdpClient.EndSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend
  nameWithType: UdpClient.EndSend
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup
  nameWithType: UdpClient.JoinMulticastGroup
- uid: System.Net.Sockets.UdpClient.MulticastLoopback*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive
  nameWithType: UdpClient.Receive
- uid: System.Net.Sockets.UdpClient.ReceiveAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync
  nameWithType: UdpClient.ReceiveAsync
- uid: System.Net.Sockets.UdpClient.Send*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send
  nameWithType: UdpClient.Send
- uid: System.Net.Sockets.UdpClient.SendAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync
  nameWithType: UdpClient.SendAsync
- uid: System.Net.Sockets.UdpClient.Ttl*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
