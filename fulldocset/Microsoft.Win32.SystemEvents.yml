### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.SystemEvents
  id: SystemEvents
  children:
  - Microsoft.Win32.SystemEvents.CreateTimer(System.Int32)
  - Microsoft.Win32.SystemEvents.DisplaySettingsChanged
  - Microsoft.Win32.SystemEvents.DisplaySettingsChanging
  - Microsoft.Win32.SystemEvents.EventsThreadShutdown
  - Microsoft.Win32.SystemEvents.InstalledFontsChanged
  - Microsoft.Win32.SystemEvents.InvokeOnEventsThread(System.Delegate)
  - Microsoft.Win32.SystemEvents.KillTimer(System.IntPtr)
  - Microsoft.Win32.SystemEvents.LowMemory
  - Microsoft.Win32.SystemEvents.PaletteChanged
  - Microsoft.Win32.SystemEvents.PowerModeChanged
  - Microsoft.Win32.SystemEvents.SessionEnded
  - Microsoft.Win32.SystemEvents.SessionEnding
  - Microsoft.Win32.SystemEvents.SessionSwitch
  - Microsoft.Win32.SystemEvents.TimeChanged
  - Microsoft.Win32.SystemEvents.TimerElapsed
  - Microsoft.Win32.SystemEvents.UserPreferenceChanged
  - Microsoft.Win32.SystemEvents.UserPreferenceChanging
  langs:
  - csharp
  name: "SystemEvents"
  nameWithType: SystemEvents
  fullName: Microsoft.Win32.SystemEvents
  type: Class
  summary: Provides access to system event notifications. This class cannot be inherited.
  remarks: "The SystemEvents class provides the ability to respond to specific types of system events.  \n  \n When a system event is raised, any delegates attached to the event are called using the thread that monitors for system events. Therefore, you should make any calls from your event handlers thread-safe. If you need to call a system event that is not exposed as a member of this class, you can use the <xref:Microsoft.Win32.SystemEvents.InvokeOnEventsThread%2A> method.  \n  \n> [!CAUTION]\n>  Do not perform time-consuming processing on the thread that raises a system event handler because it might prevent other applications from functioning.  \n  \n> [!NOTE]\n>  Some system events might not be raised on [!INCLUDE[windowsver](~/add/includes/windowsver-md.md)]. Be sure to verify that your application works as expected on [!INCLUDE[windowsver](~/add/includes/windowsver-md.md)]."
  example:
  - "This section contains two examples. The first example shows how to use system events in an ordinary application, and the second example shows how to use system events in a Windows service.  \n  \n **Example 1**  \n  \n The following code example registers interest in some system events and then waits for any of those events to occur. The output shown occurs if the user changes the display resolution.  \n  \n [!code-cpp[SystemEvents#1](~/add/codesnippet/CPP/t-microsoft.win32.system_1.cpp)]\n [!code-cs[SystemEvents#1](~/add/codesnippet/CSharp/t-microsoft.win32.system_1.cs)]\n [!code-vb[SystemEvents#1](~/add/codesnippet/VisualBasic/t-microsoft.win32.system_1.vb)]  \n  \n **Example 2**  \n  \n The following code example demonstrates a very simple Windows service that handles the <xref:Microsoft.Win32.SystemEvents.TimeChanged> and <xref:Microsoft.Win32.SystemEvents.UserPreferenceChanged> events. The example includes a service named `SimpleService`, a form named `HiddenForm`, and an installer. The form provides the message loop that is required by system events.  \n  \n> [!NOTE]\n>  Services do not have message loops, unless they are allowed to interact with the desktop. If the message loop is not provided by a hidden form, as in this example, the service must be run under the local system account, and manual intervention is required to enable interaction with the desktop. That is, the administrator must manually check the **Allow service to interact with desktop** check box on the **Log On** tab of the service properties dialog box. In that case, a message loop is automatically provided. This option is available only when the service is run under the local system account. Interaction with the desktop cannot be enabled programmatically.  \n  \n The service in this example starts a thread that runs an instance of `HiddenForm`. The events are hooked up and handled in the form. The events must be hooked up in the load event of the form, to make sure that the form is completely loaded first; otherwise the events will not be raised.  \n  \n> [!NOTE]\n>  The example provides all the necessary code, including the form initialization code typically generated by [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] designers. If you are developing your service in [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)], you can omit the second partial class and use the **Properties** window to set the height and width of the hidden form to zero, the border style to <xref:System.Windows.Forms.FormBorderStyle?displayProperty=fullName>, and the window state to <xref:System.Windows.Forms.FormWindowState?displayProperty=fullName>.  \n  \n To run the example:  \n  \n1.  Compile the code from the command line. The name that you use for the source file is not important.  \n  \n2.  Install the service from the command line using the [Installutil.exe (Installer Tool)](../Topic/Installutil.exe%20\\(Installer%20Tool\\).md) utility. For example, `InstallUtil example.exe` if the source file name is `example.cs` or `example.vb`. You must be an administrator to install the service.  \n  \n3.  Use the Services console to start the service.  \n  \n4.  Change the system time, or change user preferences, such as mouse properties.  \n  \n5.  View the messages in the **Application** category of Event Viewer.  \n  \n6.  Use the Services console to stop the service.  \n  \n7.  Uninstall the service from the command line by using the `/u` option. For example, `InstallUtil /u example.exe`.  \n  \n [!code-vb[ManagedWindowsService#1](~/add/codesnippet/VisualBasic/t-microsoft.win32.system_2.vb)]\n [!code-cs[ManagedWindowsService#1](~/add/codesnippet/CSharp/t-microsoft.win32.system_2.cs)]"
  syntax:
    content: public sealed class SystemEvents
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.CreateTimer(System.Int32)
  id: CreateTimer(System.Int32)
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "CreateTimer(Int32)"
  nameWithType: SystemEvents.CreateTimer(Int32)
  fullName: Microsoft.Win32.SystemEvents.CreateTimer(Int32)
  type: Method
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Creates a new window timer associated with the system events window.
  syntax:
    content: public static IntPtr CreateTimer (int interval);
    parameters:
    - id: interval
      type: System.Int32
      description: "Specifies the interval between timer notifications, in milliseconds."
    return:
      type: System.IntPtr
      description: "To be added."
  overload: Microsoft.Win32.SystemEvents.CreateTimer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The interval is less than or equal to zero."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed, or the attempt to create the timer did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.DisplaySettingsChanged
  id: DisplaySettingsChanged
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "DisplaySettingsChanged"
  nameWithType: SystemEvents.DisplaySettingsChanged
  fullName: Microsoft.Win32.SystemEvents.DisplaySettingsChanged
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when the user changes the display settings.
  remarks: >-
    > [!CAUTION]

    >  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.
  example:
  - "The following code example demonstrates how to monitor the DisplaySettingsChanged event. This code example is part of a larger example provided for the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n [!code-cpp[SystemEvents#2](~/add/codesnippet/CPP/e-microsoft.win32.system_1_1.cpp)]\n [!code-cs[SystemEvents#2](~/add/codesnippet/CSharp/e-microsoft.win32.system_1_1.cs)]\n [!code-vb[SystemEvents#2](~/add/codesnippet/VisualBasic/e-microsoft.win32.system_1_1.vb)]"
  syntax:
    content: public static event EventHandler DisplaySettingsChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.DisplaySettingsChanging
  id: DisplaySettingsChanging
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "DisplaySettingsChanging"
  nameWithType: SystemEvents.DisplaySettingsChanging
  fullName: Microsoft.Win32.SystemEvents.DisplaySettingsChanging
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when the display settings are changing.
  remarks: >-
    > [!CAUTION]

    >  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.
  syntax:
    content: public static event EventHandler DisplaySettingsChanging;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.EventsThreadShutdown
  id: EventsThreadShutdown
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "EventsThreadShutdown"
  nameWithType: SystemEvents.EventsThreadShutdown
  fullName: Microsoft.Win32.SystemEvents.EventsThreadShutdown
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs before the thread that listens for system events is terminated.
  remarks: "This event is raised as the thread that listens for system events is about to be terminated. System event delegates are invoked using the thread that listens for system events.  \n  \n> [!CAUTION]\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."
  syntax:
    content: public static event EventHandler EventsThreadShutdown;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.InstalledFontsChanged
  id: InstalledFontsChanged
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "InstalledFontsChanged"
  nameWithType: SystemEvents.InstalledFontsChanged
  fullName: Microsoft.Win32.SystemEvents.InstalledFontsChanged
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when the user adds fonts to or removes fonts from the system.
  remarks: >-
    > [!CAUTION]

    >  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.
  syntax:
    content: public static event EventHandler InstalledFontsChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.InvokeOnEventsThread(System.Delegate)
  id: InvokeOnEventsThread(System.Delegate)
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "InvokeOnEventsThread(Delegate)"
  nameWithType: SystemEvents.InvokeOnEventsThread(Delegate)
  fullName: Microsoft.Win32.SystemEvents.InvokeOnEventsThread(Delegate)
  type: Method
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Invokes the specified delegate using the thread that listens for system events.
  remarks: "You can use this method any time that you need to handle a system event that is not exposed otherwise by the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n When you call this method, the specified delegate will be invoked by the thread that your application is using to process system events."
  syntax:
    content: public static void InvokeOnEventsThread (Delegate method);
    parameters:
    - id: method
      type: System.Delegate
      description: "A delegate to invoke using the thread that listens for system events."
  overload: Microsoft.Win32.SystemEvents.InvokeOnEventsThread*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.KillTimer(System.IntPtr)
  id: KillTimer(System.IntPtr)
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "KillTimer(IntPtr)"
  nameWithType: SystemEvents.KillTimer(IntPtr)
  fullName: Microsoft.Win32.SystemEvents.KillTimer(IntPtr)
  type: Method
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Terminates the timer specified by the given id.
  syntax:
    content: public static void KillTimer (IntPtr timerId);
    parameters:
    - id: timerId
      type: System.IntPtr
      description: "The ID of the timer to terminate."
  overload: Microsoft.Win32.SystemEvents.KillTimer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed, or the attempt to terminate the timer did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.LowMemory
  id: LowMemory
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "LowMemory"
  nameWithType: SystemEvents.LowMemory
  fullName: Microsoft.Win32.SystemEvents.LowMemory
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when the system is running out of available RAM.
  remarks: "This event wraps the WM_COMPACTING message. This message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.  \n  \n> [!NOTE]\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n> [!CAUTION]\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."
  syntax:
    content: public static event EventHandler LowMemory;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.PaletteChanged
  id: PaletteChanged
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "PaletteChanged"
  nameWithType: SystemEvents.PaletteChanged
  fullName: Microsoft.Win32.SystemEvents.PaletteChanged
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when the user switches to an application that uses a different palette.
  remarks: "> [!NOTE]\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n> [!CAUTION]\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."
  example:
  - "The following code example demonstrates how to monitor the PaletteChanged event. This code example is part of a larger example provided for the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n [!code-cpp[SystemEvents#2](~/add/codesnippet/CPP/e-microsoft.win32.system_2_1.cpp)]\n [!code-cs[SystemEvents#2](~/add/codesnippet/CSharp/e-microsoft.win32.system_2_1.cs)]\n [!code-vb[SystemEvents#2](~/add/codesnippet/VisualBasic/e-microsoft.win32.system_2_1.vb)]"
  syntax:
    content: public static event EventHandler PaletteChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.PowerModeChanged
  id: PowerModeChanged
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "PowerModeChanged"
  nameWithType: SystemEvents.PowerModeChanged
  fullName: Microsoft.Win32.SystemEvents.PowerModeChanged
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when the user suspends or resumes the system.
  remarks: "> [!NOTE]\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n> [!CAUTION]\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."
  syntax:
    content: public static event Microsoft.Win32.PowerModeChangedEventHandler PowerModeChanged;
    return:
      type: Microsoft.Win32.PowerModeChangedEventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.SessionEnded
  id: SessionEnded
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "SessionEnded"
  nameWithType: SystemEvents.SessionEnded
  fullName: Microsoft.Win32.SystemEvents.SessionEnded
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when the user is logging off or shutting down the system.
  remarks: "> [!NOTE]\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n> [!CAUTION]\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."
  syntax:
    content: public static event Microsoft.Win32.SessionEndedEventHandler SessionEnded;
    return:
      type: Microsoft.Win32.SessionEndedEventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.SessionEnding
  id: SessionEnding
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "SessionEnding"
  nameWithType: SystemEvents.SessionEnding
  fullName: Microsoft.Win32.SystemEvents.SessionEnding
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when the user is trying to log off or shut down the system.
  remarks: "This is a cancelable event. Setting the <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A> property to `true` will request that the session continues to run. It provides no guarantee that the session will not end.  \n  \n If you are using SessionEnding in a Windows form to detect a system logoff or reboot, there is no deterministic way to decide whether the <xref:System.Windows.Forms.Form.Closing> event will fire before this event.  \n  \n If you want to perform some special tasks before <xref:System.Windows.Forms.Form.Closing> is fired, you need to ensure that SessionEnding fires before <xref:System.Windows.Forms.Form.Closing>. To do this, you need to trap the `WM_QUERYENDSESSION` in the form by overriding the `WndProc` function.  This example demonstrates how to do this.  \n  \n```vb#  \nPrivate Shared WM_QUERYENDSESSION As Integer = &H11  \n Private Shared systemShutdown As Boolean = False  \n Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message)  \n     If m.Msg = WM_QUERYENDSESSION Then  \n         MessageBox.Show(\"queryendsession: this is a logoff, shutdown, or reboot\")  \n         systemShutdown = True  \n     End If  \n     ' If this is WM_QUERYENDSESSION, the closing event should be raised in the base WndProc.  \n     MyBase.WndProc(m)  \n End Sub 'WndProc   \n Private Sub Form1_Closing(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles MyBase.Closing  \n     If (systemShutdown) Then  \n     ' Reset the variable because the user might cancel the shutdown.  \n         systemShutdown = False  \n         If (System.Windows.Forms.DialogResult.Yes = _  \n                 MessageBox.Show(\"My application\", \"Do you want to save your work before logging off?\", MessageBoxButtons.YesNo)) Then  \n                 e.Cancel = True  \n         Else  \n                 e.Cancel = False  \n         End If  \n     End If  \n End Sub  \n  \n```  \n  \n```c#  \nprivate static int WM_QUERYENDSESSION = 0x11;  \nprivate static bool systemShutdown = false;  \nprotected override void WndProc(ref System.Windows.Forms.Message m)  \n{  \n    if (m.Msg==WM_QUERYENDSESSION)  \n    {  \n        MessageBox.Show(\"queryendsession: this is a logoff, shutdown, or reboot\");  \n        systemShutdown = true;  \n    }  \n  \n    // If this is WM_QUERYENDSESSION, the closing event should be  \n    // raised in the base WndProc.  \n    base.WndProc(ref m);  \n  \n} //WndProc   \n  \nprivate void Form1_Closing(  \n    System.Object sender,   \n    System.ComponentModel.CancelEventArgs e)  \n{  \n    if (systemShutdown)  \n        // Reset the variable because the user might cancel the   \n        // shutdown.  \n    {  \n        systemShutdown = false;  \n        if (DialogResult.Yes==MessageBox.Show(\"My application\",   \n            \"Do you want to save your work before logging off?\",   \n            MessageBoxButtons.YesNo))  \n        {  \n            e.Cancel = true;  \n        }  \n        else  \n        {  \n            e.Cancel = false;  \n        }  \n    }  \n}  \n```  \n  \n> [!IMPORTANT]\n>  Console applications do not raise the SessionEnding event.  \n  \n> [!NOTE]\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n> [!CAUTION]\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."
  syntax:
    content: public static event Microsoft.Win32.SessionEndingEventHandler SessionEnding;
    return:
      type: Microsoft.Win32.SessionEndingEventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.SessionSwitch
  id: SessionSwitch
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "SessionSwitch"
  nameWithType: SystemEvents.SessionSwitch
  fullName: Microsoft.Win32.SystemEvents.SessionSwitch
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when the currently logged-in user has changed.
  remarks: "> [!NOTE]\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n> [!CAUTION]\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."
  syntax:
    content: public static event Microsoft.Win32.SessionSwitchEventHandler SessionSwitch;
    return:
      type: Microsoft.Win32.SessionSwitchEventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.TimeChanged
  id: TimeChanged
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "TimeChanged"
  nameWithType: SystemEvents.TimeChanged
  fullName: Microsoft.Win32.SystemEvents.TimeChanged
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when the user changes the time on the system clock.
  remarks: "> [!NOTE]\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n> [!CAUTION]\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."
  syntax:
    content: public static event EventHandler TimeChanged;
    return:
      type: System.EventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.TimerElapsed
  id: TimerElapsed
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "TimerElapsed"
  nameWithType: SystemEvents.TimerElapsed
  fullName: Microsoft.Win32.SystemEvents.TimerElapsed
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when a windows timer interval has expired.
  remarks: "> [!NOTE]\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n> [!CAUTION]\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."
  syntax:
    content: public static event Microsoft.Win32.TimerElapsedEventHandler TimerElapsed;
    return:
      type: Microsoft.Win32.TimerElapsedEventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.UserPreferenceChanged
  id: UserPreferenceChanged
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "UserPreferenceChanged"
  nameWithType: SystemEvents.UserPreferenceChanged
  fullName: Microsoft.Win32.SystemEvents.UserPreferenceChanged
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when a user preference has changed.
  remarks: "> [!NOTE]\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n> [!CAUTION]\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."
  syntax:
    content: public static event Microsoft.Win32.UserPreferenceChangedEventHandler UserPreferenceChanged;
    return:
      type: Microsoft.Win32.UserPreferenceChangedEventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Win32.SystemEvents.UserPreferenceChanging
  id: UserPreferenceChanging
  parent: Microsoft.Win32.SystemEvents
  langs:
  - csharp
  name: "UserPreferenceChanging"
  nameWithType: SystemEvents.UserPreferenceChanging
  fullName: Microsoft.Win32.SystemEvents.UserPreferenceChanging
  type: Event
  assemblies:
  - System
  namespace: Microsoft.Win32
  summary: Occurs when a user preference is changing.
  remarks: "> [!NOTE]\n>  This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n> [!CAUTION]\n>  Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result."
  example:
  - "The following code example demonstrates how to monitor the UserPreferenceChanging event. This code example is part of a larger example provided for the <xref:Microsoft.Win32.SystemEvents> class.  \n  \n [!code-cpp[SystemEvents#2](~/add/codesnippet/CPP/e-microsoft.win32.system_0_1.cpp)]\n [!code-cs[SystemEvents#2](~/add/codesnippet/CSharp/e-microsoft.win32.system_0_1.cs)]\n [!code-vb[SystemEvents#2](~/add/codesnippet/VisualBasic/e-microsoft.win32.system_0_1.vb)]"
  syntax:
    content: public static event Microsoft.Win32.UserPreferenceChangingEventHandler UserPreferenceChanging;
    return:
      type: Microsoft.Win32.UserPreferenceChangingEventHandler
      description: "To be added."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications."
  - type: System.Runtime.InteropServices.ExternalException
    commentId: T:System.Runtime.InteropServices.ExternalException
    description: "The attempt to create a system events window thread did not succeed."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: "System.Object"
- uid: Microsoft.Win32.SystemEvents.CreateTimer(System.Int32)
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "CreateTimer(Int32)"
  nameWithType: SystemEvents.CreateTimer(Int32)
  fullName: Microsoft.Win32.SystemEvents.CreateTimer(Int32)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: "IntPtr"
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Int32
  parent: System
  isExternal: true
  name: "Int32"
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Win32.SystemEvents.DisplaySettingsChanged
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "DisplaySettingsChanged"
  nameWithType: SystemEvents.DisplaySettingsChanged
  fullName: Microsoft.Win32.SystemEvents.DisplaySettingsChanged
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: "EventHandler"
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: Microsoft.Win32.SystemEvents.DisplaySettingsChanging
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "DisplaySettingsChanging"
  nameWithType: SystemEvents.DisplaySettingsChanging
  fullName: Microsoft.Win32.SystemEvents.DisplaySettingsChanging
- uid: Microsoft.Win32.SystemEvents.EventsThreadShutdown
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "EventsThreadShutdown"
  nameWithType: SystemEvents.EventsThreadShutdown
  fullName: Microsoft.Win32.SystemEvents.EventsThreadShutdown
- uid: Microsoft.Win32.SystemEvents.InstalledFontsChanged
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "InstalledFontsChanged"
  nameWithType: SystemEvents.InstalledFontsChanged
  fullName: Microsoft.Win32.SystemEvents.InstalledFontsChanged
- uid: Microsoft.Win32.SystemEvents.InvokeOnEventsThread(System.Delegate)
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "InvokeOnEventsThread(Delegate)"
  nameWithType: SystemEvents.InvokeOnEventsThread(Delegate)
  fullName: Microsoft.Win32.SystemEvents.InvokeOnEventsThread(Delegate)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: "Delegate"
  nameWithType: Delegate
  fullName: System.Delegate
- uid: Microsoft.Win32.SystemEvents.KillTimer(System.IntPtr)
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "KillTimer(IntPtr)"
  nameWithType: SystemEvents.KillTimer(IntPtr)
  fullName: Microsoft.Win32.SystemEvents.KillTimer(IntPtr)
- uid: Microsoft.Win32.SystemEvents.LowMemory
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "LowMemory"
  nameWithType: SystemEvents.LowMemory
  fullName: Microsoft.Win32.SystemEvents.LowMemory
- uid: Microsoft.Win32.SystemEvents.PaletteChanged
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "PaletteChanged"
  nameWithType: SystemEvents.PaletteChanged
  fullName: Microsoft.Win32.SystemEvents.PaletteChanged
- uid: Microsoft.Win32.SystemEvents.PowerModeChanged
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "PowerModeChanged"
  nameWithType: SystemEvents.PowerModeChanged
  fullName: Microsoft.Win32.SystemEvents.PowerModeChanged
- uid: Microsoft.Win32.PowerModeChangedEventHandler
  parent: Microsoft.Win32
  isExternal: false
  name: "PowerModeChangedEventHandler"
  nameWithType: PowerModeChangedEventHandler
  fullName: Microsoft.Win32.PowerModeChangedEventHandler
- uid: Microsoft.Win32.SystemEvents.SessionEnded
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "SessionEnded"
  nameWithType: SystemEvents.SessionEnded
  fullName: Microsoft.Win32.SystemEvents.SessionEnded
- uid: Microsoft.Win32.SessionEndedEventHandler
  parent: Microsoft.Win32
  isExternal: false
  name: "SessionEndedEventHandler"
  nameWithType: SessionEndedEventHandler
  fullName: Microsoft.Win32.SessionEndedEventHandler
- uid: Microsoft.Win32.SystemEvents.SessionEnding
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "SessionEnding"
  nameWithType: SystemEvents.SessionEnding
  fullName: Microsoft.Win32.SystemEvents.SessionEnding
- uid: Microsoft.Win32.SessionEndingEventHandler
  parent: Microsoft.Win32
  isExternal: false
  name: "SessionEndingEventHandler"
  nameWithType: SessionEndingEventHandler
  fullName: Microsoft.Win32.SessionEndingEventHandler
- uid: Microsoft.Win32.SystemEvents.SessionSwitch
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "SessionSwitch"
  nameWithType: SystemEvents.SessionSwitch
  fullName: Microsoft.Win32.SystemEvents.SessionSwitch
- uid: Microsoft.Win32.SessionSwitchEventHandler
  parent: Microsoft.Win32
  isExternal: false
  name: "SessionSwitchEventHandler"
  nameWithType: SessionSwitchEventHandler
  fullName: Microsoft.Win32.SessionSwitchEventHandler
- uid: Microsoft.Win32.SystemEvents.TimeChanged
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "TimeChanged"
  nameWithType: SystemEvents.TimeChanged
  fullName: Microsoft.Win32.SystemEvents.TimeChanged
- uid: Microsoft.Win32.SystemEvents.TimerElapsed
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "TimerElapsed"
  nameWithType: SystemEvents.TimerElapsed
  fullName: Microsoft.Win32.SystemEvents.TimerElapsed
- uid: Microsoft.Win32.TimerElapsedEventHandler
  parent: Microsoft.Win32
  isExternal: false
  name: "TimerElapsedEventHandler"
  nameWithType: TimerElapsedEventHandler
  fullName: Microsoft.Win32.TimerElapsedEventHandler
- uid: Microsoft.Win32.SystemEvents.UserPreferenceChanged
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "UserPreferenceChanged"
  nameWithType: SystemEvents.UserPreferenceChanged
  fullName: Microsoft.Win32.SystemEvents.UserPreferenceChanged
- uid: Microsoft.Win32.UserPreferenceChangedEventHandler
  parent: Microsoft.Win32
  isExternal: false
  name: "UserPreferenceChangedEventHandler"
  nameWithType: UserPreferenceChangedEventHandler
  fullName: Microsoft.Win32.UserPreferenceChangedEventHandler
- uid: Microsoft.Win32.SystemEvents.UserPreferenceChanging
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "UserPreferenceChanging"
  nameWithType: SystemEvents.UserPreferenceChanging
  fullName: Microsoft.Win32.SystemEvents.UserPreferenceChanging
- uid: Microsoft.Win32.UserPreferenceChangingEventHandler
  parent: Microsoft.Win32
  isExternal: false
  name: "UserPreferenceChangingEventHandler"
  nameWithType: UserPreferenceChangingEventHandler
  fullName: Microsoft.Win32.UserPreferenceChangingEventHandler
- uid: Microsoft.Win32.SystemEvents.CreateTimer*
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "CreateTimer"
  nameWithType: SystemEvents.CreateTimer
- uid: Microsoft.Win32.SystemEvents.InvokeOnEventsThread*
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "InvokeOnEventsThread"
  nameWithType: SystemEvents.InvokeOnEventsThread
- uid: Microsoft.Win32.SystemEvents.KillTimer*
  parent: Microsoft.Win32.SystemEvents
  isExternal: false
  name: "KillTimer"
  nameWithType: SystemEvents.KillTimer
