### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  type: Class
  summary: "Definisce un oggetto punto di connessione che consente a un server di controllo funge da consumer per stabilire una connessione con un provider."
  remarks: "In ogni connessione Web part tra due controlli server, ogni controllo deve avere (tra gli altri requisiti) un oggetto punto di connessione associata che consente di connettersi a altro controllo e di fornire o utilizzare i dati, a seconda se il controllo è designato come il provider o consumer per la connessione. Oggetto <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>in generale l&quot;oggetto contiene i dettagli per la modalità di connessione a un altro controllo e il tipo di dati che è possibile condividere un controllo.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Per un controllo che funge da consumer in una connessione, il punto di connessione deve essere un oggetto di ConsumerConnectionPoint. Per informazioni sulle connessioni Web part e punti di connessione, leggere gli argomenti elencati nella sezione Vedere anche.       Per creare un oggetto ConsumerConnectionPoint, sono necessari diversi passaggi: 1.  Abilitare il controllo di un consumer fare riferimento a un&quot;istanza di interfaccia. A <xref:System.Web.UI.WebControls.WebParts.WebPart>o un altro server di controllo (qualsiasi tipo di controllo server che verrà aggiunto a un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona può essere utilizzata) deve essere in grado di utilizzare dati da una specifica istanza dell&quot;interfaccia.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Il controllo non è necessario implementare l&quot;interfaccia. solo il provider è necessario implementarla. Il consumer può utilizzare con il tipo di interfaccia esatto fornito da un provider o, in caso contrario, un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>oggetto può essere utilizzato per trasformare i dati dal tipo di interfaccia di un provider a un tipo riconosciuto dal consumer.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Un metodo comune per abilitare un consumer consiste nel dichiarare un campo privato per contenere un riferimento al tipo di interfaccia desiderato.      2.  Identificare un metodo di callback. Un metodo nel consumer deve essere identificato come metodo di callback per stabilire una connessione con il provider. Questo metodo recupera un&quot;istanza dell&quot;interfaccia che il provider implementa e assegna a, ad esempio, il campo privato creato nel primo passaggio. L&quot;approccio di Web part per l&quot;identificazione di un metodo di callback del consumer consiste nell&quot;aggiungere un `ConnectionConsumer` attributo dei metadati (definito dalla <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>classe) per il metodo che riceve l&quot;istanza dell&quot;interfaccia.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> Quando viene aggiunto l&quot;attributo, l&quot;unico parametro obbligatorio è un nome visualizzato da utilizzare per il punto di connessione consumer. Parametri facoltativi è inoltre possibile aggiungere, ad esempio un ID.      3.  Processo e i dati dall&quot;istanza dell&quot;interfaccia di output. Eseguire l&quot;elaborazione interna in base alle esigenze dei dati e quindi in genere un controllo utente verrà eseguito il rendering di dati per la pagina. È un modo comune in questo modo per eseguire l&quot;override del controllo <xref:System.Web.UI.Control.OnPreRender%2A>metodo.</xref:System.Web.UI.Control.OnPreRender%2A>          > [!NOTE] > Durante una richiesta sincrona, un consumer deve richiedere i dati direttamente dal provider durante o immediatamente dopo il <xref:System.Web.UI.Control.PreRender>evento.</xref:System.Web.UI.Control.PreRender> Durante una richiesta asincrona, se il metodo di callback del provider non viene chiamato in qualsiasi momento durante il rendering, lo sviluppatore può presupporre che i dati non è stati inviati al consumer.       Dopo che un controllo sia stato preparato per agire come un consumer, il controllo può partecipare alle connessioni (presupponendo che un controllo provider sia completa e disponibile). Per creare una connessione dichiarativa statica nel markup della pagina Web, gli sviluppatori possono utilizzare il `<asp:webpartconnection>` elemento. Se il `ConnectionConsumer` attributo nel codice sorgente del consumer che identifica il metodo di callback specifica un ID per il punto di connessione, quindi tale valore deve essere assegnato per il `ConsumerConnectionPointID` attributo il `<asp:webpartconnection>` elemento in una pagina. Un motivo che uno sviluppatore può specificare un ID per un punto di connessione consumer è se sono presenti più punti di connessione definiti nel controllo consumer. Se non è specificato un ID per il punto di connessione nel controllo consumer, è un valore da assegnare al `ConsumerConnectionPointID` attributo nella pagina, in quanto la connessione verrà creata utilizzando il valore predefinito ottenuto dal <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>campo.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Per creare una connessione nel codice, gli sviluppatori devono creare un nuovo oggetto ConsumerConnectionPoint chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>metodo e passando l&quot;ID del controllo consumer, insieme all&quot;ID o indice dell&quot;oggetto ConsumerConnectionPoint definito nel controllo consumer.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> Oggetto ConsumerConnectionPoint restituito, un riferimento al controllo utente, un riferimento per il controllo del provider e un oggetto corrispondente <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>oggetto, viene passato al <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metodo per creare un nuovo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>oggetto.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Anche se gli sviluppatori possono utilizzare i punti di connessione consumer come parte delle connessioni in modo dichiarativo o a livello di codice, gli utenti possono anche interagire con i punti di connessione consumer per stabilire connessioni tramite l&quot;interfaccia utente (UI). Se gli sviluppatori di dichiarano un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controllo in una pagina Web, fornisce un&quot;interfaccia utente in fase di esecuzione per gli utenti di creare connessioni.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Se si sceglie il controllo del provider come punto di partenza per stabilire la connessione facendo clic il verbo di connessione (possono anche scegliere il consumer, ovvero non c&quot;è alcuna differenza nella connessione risultante), nell&quot;interfaccia utente verrà visualizzato un controllo elenco a discesa con i nomi visualizzati di disponibili consumer connessione punto (o punti se sono presenti più di uno) che il provider può inviare i dati. Gli utenti devono selezionare un punto di connessione consumer per stabilire una connessione.       Un oggetto ConsumerConnectionPoint viene associato direttamente a uno specifico controllo consumer e archivia i dettagli relativi a una connessione nelle proprietà del che componente eredita dalla classe base di <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Ad esempio, in ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>proprietà, un punto di connessione consumer mantiene il tipo di interfaccia utilizzata.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Se il provider e consumer in una connessione sia comprendere il tipo di interfaccia, i controlli sono compatibili e in grado di creare una connessione diretta. Se il provider e l&quot;utente non può funzionare con lo stesso tipo di interfaccia, sono incompatibili e devono utilizzare un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>oggetto da tradurre il punto di connessione provider <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>proprietà in un tipo che il consumer può funzionare con.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Un&quot;altra importante proprietà ereditata è la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>proprietà che fornisce un nome descrittivo visualizzato nell&quot;interfaccia utente per gli utenti di scegliere una connessione consumer punto durante la creazione di connessioni.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Il nome visualizzato è il parametro obbligatorio quando gli sviluppatori aggiungono un `ConnectionConsumer` attributo al metodo di callback in un controllo consumer. Ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>proprietà è anche utile, come indicato in precedenza, perché fornisce un identificatore univoco per un punto di connessione consumer nel caso in cui un utente dispone di più punti di connessione.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Un consumer possono essere definiti all&quot;interno e in questo caso, quando gli sviluppatori di aggiungere più oggetti di ConsumerConnectionPoint il `ConnectionConsumer` attributo a un metodo, è necessario specificare un valore di ID per distinguere ogni punto di connessione. Un&quot;altra proprietà ereditata significativa è la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>proprietà, che indica se un punto di connessione consumer può connettersi contemporaneamente a più provider.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Valore di questa proprietà è `false` per impostazione predefinita per i punti di connessione consumer (mentre il valore predefinito è `true` per i punti di connessione provider).       La classe ConsumerConnectionPoint aggiunge diversi metodi univoci ai membri ereditati dalla <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>metodo richiama il metodo di callback definito del consumer per recuperare l&quot;istanza dell&quot;interfaccia dal provider.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>metodo restituisce un valore booleano che indica se il punto di connessione è in grado di stabilire connessioni, in base allo stato corrente del controllo consumer associato.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ConsumerConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Consumer** link. The UI now displays a drop-down control that lists the consumer connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.  \n  \n The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ConsumerConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> classe."
  remarks: "Il costruttore ConsumerConnectionPoint per la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>classe chiama semplicemente il costruttore base, passando i diversi parametri e l&quot;inizializzazione della classe base.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Il costruttore della classe base controlla un numero di parametri per un punto di connessione e può generare eccezioni diverse. Per un elenco di possibili eccezioni, vedere la sezione relativa alle eccezioni.       È possibile chiamare il costruttore ConsumerConnectionPoint per creare un&quot;istanza personalizzata della <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Tuttavia, nei casi in cui desidera stabilire una connessione non si estende la classe, è necessario chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>per restituire un oggetto punto di connessione da un provider.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`. Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter. This demonstrates how to create a custom consumer connection point and then associate it with a consumer control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "Il metodo nel controllo consumer che restituisce un&quot;istanza di interfaccia ai consumer per stabilire una connessione."
    - id: interfaceType
      type: System.Type
      description: "Il <xref:System.Type>dell&quot;interfaccia che il consumer riceve da un provider.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "Il <xref:System.Type>del controllo utente a cui è associato il punto di connessione consumer.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Un nome descrittivo per il punto di connessione che viene visualizzato agli utenti nell&quot;interfaccia di connessione (UI)."
    - id: id
      type: System.String
      description: "Identificatore univoco per il punto di connessione consumer."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Valore booleano che indica se il punto di connessione consumer può avere più connessioni simultanee con i provider."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>non è dello stesso tipo del controllo consumer (o una classe valida derivato da esso)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  id: SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Richiama il metodo di callback in un controllo consumer e recupera l&quot;istanza dell&quot;interfaccia da un controllo di provider."
  remarks: "Questo metodo riceve un&quot;istanza dell&quot;interfaccia da un provider che contiene i dati per il controllo consumer.       Viene chiamato il metodo SetObject da <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>oggetti durante l&quot;attivazione di una connessione.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Si tratta di una fase critica che fa parte di inizializzazione di una connessione e l&quot;abilitazione di due controlli di condividere i dati.       Il controllo consumer in una connessione deve essere in grado di funzionare con lo stesso tipo dell&quot;interfaccia come il provider. In caso contrario, i controlli sono incompatibili e un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>oggetto deve essere utilizzato per stabilire una connessione.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual void SetObject (System.Web.UI.Control control, object data);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Il controllo di consumer associato a un punto di connessione consumer."
    - id: data
      type: System.Object
      description: "L&quot;istanza dell&quot;interfaccia restituito da un controllo di provider."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  id: SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Determina se un punto di connessione consumer è attualmente in grado di stabilire una connessione."
  remarks: "Il metodo SupportsConnection come implementato sempre restituisce `true` in tutti i casi per la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> È lo scopo di questo metodo per verificare lo stato di `control` e `secondaryInterfaces` in determinati momenti critici per determinare se un <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>oggetto è attualmente in grado di creare una connessione.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Può essere presente scenari in cui `control` è in uno stato che renderebbe impossibile stabilire una connessione, o in cui `secondaryInterfaces` deve essere presente prima di creare una connessione. In questi casi, gli sviluppatori possono ereditare il <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>classe ed eseguire l&quot;override del metodo SupportsConnection, fornendo un&quot;implementazione personalizzata per determinare quando il punto di connessione è pronto per supportare le connessioni.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>"
  syntax:
    content: public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Il controllo consumer associata la <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref>."
    - id: secondaryInterfaces
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "Oggetto <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> delle interfacce secondarie che fanno parte di una connessione."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se un punto di connessione attualmente possibile stabilire una connessione. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject
  nameWithType: ConsumerConnectionPoint.SetObject
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection
  nameWithType: ConsumerConnectionPoint.SupportsConnection
