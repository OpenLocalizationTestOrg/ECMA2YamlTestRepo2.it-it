### YamlMime:ManagedReference
items:
- uid: System.Web.Hosting.VirtualPathProvider
  id: VirtualPathProvider
  children:
  - System.Web.Hosting.VirtualPathProvider.#ctor
  - System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)
  - System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)
  - System.Web.Hosting.VirtualPathProvider.FileExists(System.String)
  - System.Web.Hosting.VirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)
  - System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)
  - System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)
  - System.Web.Hosting.VirtualPathProvider.GetFile(System.String)
  - System.Web.Hosting.VirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)
  - System.Web.Hosting.VirtualPathProvider.Initialize
  - System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService
  - System.Web.Hosting.VirtualPathProvider.OpenFile(System.String)
  - System.Web.Hosting.VirtualPathProvider.Previous
  langs:
  - csharp
  name: VirtualPathProvider
  nameWithType: VirtualPathProvider
  fullName: System.Web.Hosting.VirtualPathProvider
  type: Class
  summary: "Fornisce un set di metodi che consentono a un&quot;applicazione Web per recuperare le risorse da un file system virtuale."
  remarks: "La classe VirtualPathProvider ha fornisce un set di metodi per l&quot;implementazione di un file system virtuale per un&quot;applicazione Web. In un file system virtuale, i file e directory gestite da un archivio dati diverso nel sistema di file fornito dal sistema operativo del server. Ad esempio, è possibile utilizzare un file system virtuale per archiviare il contenuto in un database di SQL Server.       È possibile archiviare qualsiasi file che viene elaborato su richiesta in un file system virtuale. Sono inclusi:-pagine, pagine master, controlli utente ASP.NET e altri oggetti.      -Pagine Web standard con estensione htm e con estensione jpg.      -Qualsiasi estensione personalizzata mappata a un <xref:System.Web.Compilation.BuildProvider>istanza.</xref:System.Web.Compilation.BuildProvider>      -Qualsiasi tema denominato nella `App_Theme` cartella.       È possibile archiviare i file che generano gli assembly a livello di applicazione in un file system virtuale o cartelle dell&quot;applicazione ASP.NET. Sono inclusi:-la Global. asax.      -File Web. config.      -File di dati della mappa del sito utilizzati da <xref:System.Web.XmlSiteMapProvider>.</xref:System.Web.XmlSiteMapProvider>      -Le directory contenenti assembly dell&quot;applicazione o che generano assembly di applicazione: `Bin`, `App_Code`, `App_GlobalResources`, qualsiasi `App_LocalResources`.      -La cartella application data, `App_Data`.      > [!NOTE] > Se un sito Web precompilato per la distribuzione, il contenuto fornito da un&quot;istanza di VirtualPathProvider ha non è stato compilato e viene utilizzata alcuna istanza di oggetto VirtualPathProvider dal sito precompilato.      ## Registrazione di un&quot;istanza di oggetto VirtualPathProvider VirtualPathProvider A personalizzato deve essere registrata con il sistema di compilazione ASP.NET utilizzando il <xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A?displayProperty=fullName>metodo prima di qualsiasi pagina analisi o la compilazione viene eseguita dall&quot;applicazione Web.</xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A?displayProperty=fullName>       In genere, un&quot;istanza di VirtualPathProvider ha è registrata un `AppInitialize` definito nel metodo il `App_Code` directory, o durante il `Application_Start` evento nel `Global.asax` file. Per un esempio di registrazione di un oggetto VirtualPathProvider dell&quot;istanza in un `AppInitialize` metodo, vedere la sezione esempio.       È possibile registrare un&quot;istanza di oggetto VirtualPathProvider durante altri eventi, ma le pagine compilate e memorizzati nella cache prima che venga registrata l&quot;istanza VirtualPathProvider ha non verranno invalidate, anche la nuova istanza di oggetto VirtualPathProvider fornisca l&quot;origine per la pagina compilata in precedenza."
  example:
  - "The following code example is a VirtualPathProvider class implementation that creates a virtual file system using information stored in a <xref:System.Data.DataSet> object. The code example works with the code examples for the <xref:System.Web.Hosting.VirtualFile> and <xref:System.Web.Hosting.VirtualDirectory> classes to provide virtual resources from a data store that is loaded into a <xref:System.Data.DataSet> object.  \n  \n This example has four parts: the VirtualPathProvider class implementation, an XML data file used to populate the <xref:System.Data.DataSet> object, an `AppStart` object that contains an `AppInitialize` method used to register the VirtualPathProvider class with the compilation system, and an ASP.NET page that provides links to the virtual files.  \n  \n To use this sample code in an application, follow these steps.  \n  \n1.  Create a sample application on your Web server.  \n  \n2.  Copy the source code for the custom VirtualPathProvider object (see below) into a file in the application's `App_Code` directory.  \n  \n3.  Copy the source code for the custom <xref:System.Web.Hosting.VirtualDirectory> object (see the Example section in the <xref:System.Web.Hosting.VirtualDirectory> class overview topic) into a file in the application's `App_Code` directory.  \n  \n4.  Copy the source code for the custom <xref:System.Web.Hosting.VirtualFile> object (see the Example section in the <xref:System.Web.Hosting.VirtualFile> class overview topic) into a file in the application's `App_Code` directory.  \n  \n5.  Copy the source code for the `AppStart` object (see below) into a file in the application's `App_Code` directory.  \n  \n6.  Copy the XML data (see below) into a file named `XMLData.xml` into a file in the application's `App_Data` directory.  \n  \n7.  Copy the `default.aspx` file (see below) into the root directory of the sample application. Use a Web browser to open the `default.aspx` file, and then click the links on the page to see the contents of the virtual files.  \n  \n The first example is a custom VirtualPathProvider class. The <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> and <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> methods are overridden to indicate whether a requested directory is present in the virtual file system. The <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> and <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> methods are overridden to return custom <xref:System.Web.Hosting.VirtualDirectory> and <xref:System.Web.Hosting.VirtualFile> instances containing information from the virtual file system.  \n  \n The class also provides a `GetVirtualData` method used by the <xref:System.Web.Hosting.VirtualDirectory> and <xref:System.Web.Hosting.VirtualFile> classes to access the <xref:System.Data.DataSet> object containing the virtual file system data. In a production implementation, this method would typically be implemented in a business object responsible for interacting with the data store.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#20](~/add/codesnippet/csharp/t-system.web.hosting.vir_1_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#20](~/add/codesnippet/visualbasic/t-system.web.hosting.vir_1_1.vb)]  \n  \n The second example is the XML data file used to populate the <xref:System.Data.DataSet> object returned by the custom VirtualPathProvider object. This XML data is used to demonstrate using the VirtualPathProvider, <xref:System.Web.Hosting.VirtualDirectory>, and <xref:System.Web.Hosting.VirtualFile> objects to retrieve data from external data and is not intended to represent a production-quality data store.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n  <resource type=\"dir\"   \n    path=\"/vrDir\"   \n    parentPath=\"\"   \n    content=\"\">  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level1FileA.vrf\"  \n      parentPath=\"/vrDir\"   \n      content=\"This is the content of file Level1FileA.\">  \n    </resource>  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level1FileB.vrf\"  \n      parentPath=\"/vrDir\"   \n      content=\"This is the content of file Level1FileB.\">  \n    </resource>  \n    <resource type=\"dir\"   \n      path=\"/vrDir/Level2DirA\"   \n      parentPath=\"/vrDir\"   \n      content=\"\">  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level2DirA/Level2FileA.vrf\"   \n      parentPath=\"/vrDir/Level2DirA\"   \n      content=\"This is the content of file Level2FileA.\">  \n    </resource>  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level2DirA/Level2FileB.vrf\"  \n      parentPath=\"/vrDir/Level2DirA\"   \n      content=\"This is the content of file Level2FileB.\">  \n    </resource>  \n  </resource>  \n  <resource type=\"dir\"   \n    path=\"/vrDir/Level2DirB\"   \n    parentPath=\"/vrDir\"   \n    content=\"\">  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level2DirB/Level2FileA.vrf\"   \n      parentPath=\"/vrDir/Level2DirB\"   \n      content=\"This is the content of file Level2FileA.\">  \n    </resource>  \n    <resource type=\"file\"   \n      path=\"/vrDir/Level2DirB/Level2FileB.vrf\"  \n      parentPath=\"/vrDir/Level2DirB\"   \n      content=\"This is the content of file Level2FileB.\">  \n    </resource>  \n  </resource>  \n</resource>  \n```  \n  \n The third example provides an `AppStart` object that contains an `AppInitialize` method. This method is called during the initialization of an ASP.NET application to perform any custom initialization required. In this case, it registers the custom VirtualPathProvider object with the ASP.NET build system.  \n  \n [!code-vb[System.Web.Hosting.VirtualPathProvider#10](~/add/codesnippet/visualbasic/t-system.web.hosting.vir_1_2.vb)]\n [!code-cs[System.Web.Hosting.VirtualPathProvider#10](~/add/codesnippet/csharp/t-system.web.hosting.vir_1_2.cs)]  \n  \n The last example is an ASP.NET page that contains links to the virtual files contained in the virtual file system.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#1](~/add/codesnippet/csharp/t-system.web.hosting.vir_1_3.aspx)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#1](~/add/codesnippet/visualbasic/t-system.web.hosting.vir_1_3.aspx)]"
  syntax:
    content: 'public abstract class VirtualPathProvider : MarshalByRefObject'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.#ctor
  id: '#ctor'
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: VirtualPathProvider()
  nameWithType: VirtualPathProvider.VirtualPathProvider()
  fullName: System.Web.Hosting.VirtualPathProvider.VirtualPathProvider()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Inizializza la classe per l&quot;uso da un&quot;istanza di classe ereditata. Questo costruttore può essere chiamato solo da una classe ereditata."
  remarks: "Quando si esegue l&quot;override del costruttore VirtualPathProvider ha, qualsiasi inizializzazione che deve essere successiva di rinviare il <xref:System.Web.Hosting.VirtualPathProvider>l&quot;oggetto è registrato per il <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A>metodo.</xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> </xref:System.Web.Hosting.VirtualPathProvider>"
  example:
  - "The following code example is an implementation of the VirtualPathProvider constructor that initializes a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#25](~/add/codesnippet/csharp/m-system.web.hosting.vir_4_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#25](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_4_1.vb)]"
  syntax:
    content: protected VirtualPathProvider ();
    parameters: []
  overload: System.Web.Hosting.VirtualPathProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)
  id: CombineVirtualPaths(System.String,System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: CombineVirtualPaths(String,String)
  nameWithType: VirtualPathProvider.CombineVirtualPaths(String,String)
  fullName: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Combina un percorso di base con un percorso relativo per restituire un percorso completo di una risorsa virtuale."
  remarks: "Utilizzare il metodo CombineVirtualPaths per esaminare il contenuto di un percorso relativo a una risorsa virtuale e apportare eventuali modifiche necessarie.       L&quot;implementazione predefinita combina il `basePath` e `relativePath` parametri in base a standard ASP.NET percorso durante l&quot;elaborazione."
  syntax:
    content: public virtual string CombineVirtualPaths (string basePath, string relativePath);
    parameters:
    - id: basePath
      type: System.String
      description: "Il percorso di base per l&quot;applicazione."
    - id: relativePath
      type: System.String
      description: "Il percorso della risorsa virtuale, relativo al percorso di base."
    return:
      type: System.String
      description: "Il percorso completo di una risorsa virtuale."
  overload: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)
  id: DirectoryExists(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: DirectoryExists(String)
  nameWithType: VirtualPathProvider.DirectoryExists(String)
  fullName: System.Web.Hosting.VirtualPathProvider.DirectoryExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Ottiene un valore che indica se è presente una directory nel file system virtuale."
  remarks: "Override del metodo DirectoryExists per indicare al sistema di compilazione che la risorsa rappresentata da `virtualDir` esiste nel file system virtuale forniti da questo <xref:System.Web.Hosting.VirtualPathProvider>istanza.</xref:System.Web.Hosting.VirtualPathProvider>       Se personalizzato <xref:System.Web.Hosting.VirtualPathProvider>classe non supporta le directory, il metodo DirectoryExists dovrebbe restituire `false`.</xref:System.Web.Hosting.VirtualPathProvider>      > [!NOTE] > Se il file system virtuale conterrà i temi per il sito Web (tramite la creazione di una macchina `App_Themes` directory), personalizzato <xref:System.Web.Hosting.VirtualPathProvider>classe deve supportare le directory.</xref:System.Web.Hosting.VirtualPathProvider>"
  example:
  - "The following code example is an implementation of the DirectoryExists method in a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#22](~/add/codesnippet/csharp/m-system.web.hosting.vir_5_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#22](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_5_1.vb)]"
  syntax:
    content: public virtual bool DirectoryExists (string virtualDir);
    parameters:
    - id: virtualDir
      type: System.String
      description: "Il percorso della directory virtuale."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la directory esista nel file system virtuale; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Hosting.VirtualPathProvider.DirectoryExists*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.FileExists(System.String)
  id: FileExists(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: FileExists(String)
  nameWithType: VirtualPathProvider.FileExists(String)
  fullName: System.Web.Hosting.VirtualPathProvider.FileExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Ottiene un valore che indica se un file presente nel file system virtuale."
  remarks: "Override del metodo FileExists per indicare al sistema di compilazione che la risorsa rappresentata da `virtualPath` esiste nel file system virtuale forniti da questo <xref:System.Web.Hosting.VirtualPathProvider>istanza.</xref:System.Web.Hosting.VirtualPathProvider>"
  example:
  - "The following code example is an implementation of the FileExists method in a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#21](~/add/codesnippet/csharp/m-system.web.hosting.vir_6_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#21](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_6_1.vb)]"
  syntax:
    content: public virtual bool FileExists (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Il percorso del file virtuale."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il file esiste nel file system virtuale; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Hosting.VirtualPathProvider.FileExists*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)
  id: GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: GetCacheDependency(String,IEnumerable,DateTime)
  nameWithType: VirtualPathProvider.GetCacheDependency(String,IEnumerable,DateTime)
  fullName: System.Web.Hosting.VirtualPathProvider.GetCacheDependency(String,IEnumerable,DateTime)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Crea una dipendenza della cache in base ai percorsi virtuali specificati."
  remarks: "Restituisce l&quot;implementazione predefinita del metodo GetCacheDependency `null`. Per le risorse virtuali della cache per un utilizzo successivo è necessario sostituire il metodo GetCacheDependency o <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A>metodo.</xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A>"
  example:
  - "The following code example implements the GetCacheDependency method for a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#28](~/add/codesnippet/csharp/a8fb412c-a81c-4f3f-b624-_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#28](~/add/codesnippet/visualbasic/a8fb412c-a81c-4f3f-b624-_1.vb)]"
  syntax:
    content: public virtual System.Web.Caching.CacheDependency GetCacheDependency (string virtualPath, System.Collections.IEnumerable virtualPathDependencies, DateTime utcStart);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Il percorso della risorsa virtuale primaria."
    - id: virtualPathDependencies
      type: System.Collections.IEnumerable
      description: "Matrice di percorsi di altre risorse richieste dalla risorsa virtuale primaria."
    - id: utcStart
      type: System.DateTime
      description: "L&quot;ora UTC in cui le risorse virtuali sono stati letti."
    return:
      type: System.Web.Caching.CacheDependency
      description: "Oggetto <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> oggetto per le risorse virtuali specificate."
  overload: System.Web.Hosting.VirtualPathProvider.GetCacheDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)
  id: GetCacheKey(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: GetCacheKey(String)
  nameWithType: VirtualPathProvider.GetCacheKey(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetCacheKey(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Restituisce una chiave di cache da utilizzare per il percorso virtuale specificato."
  remarks: "Utilizzare il metodo GetCacheKey per fornire una chiave di cache personalizzata per le risorse virtuali. Se si esegue l&quot;override del metodo GetCacheKey, viene utilizzato il percorso virtuale per la chiave di cache."
  syntax:
    content: public virtual string GetCacheKey (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Il percorso della risorsa virtuale."
    return:
      type: System.String
      description: "Una chiave di cache per la risorsa virtuale specificata."
  overload: System.Web.Hosting.VirtualPathProvider.GetCacheKey*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)
  id: GetDirectory(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: GetDirectory(String)
  nameWithType: VirtualPathProvider.GetDirectory(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetDirectory(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Ottiene una directory virtuale dal file system virtuale."
  remarks: "Il metodo GetDirectory restituisce un discendente della <xref:System.Web.Hosting.VirtualDirectory>classe che contiene i file e le directory contenute nella directory specificata nel `virtualDir` parametro.</xref:System.Web.Hosting.VirtualDirectory>       Se personalizzato <xref:System.Web.Hosting.VirtualPathProvider>classe non supporta le directory, il metodo GetDirectory dovrebbe restituire `null`.</xref:System.Web.Hosting.VirtualPathProvider>      > [!NOTE] > Se il file system virtuale conterrà i temi per il sito Web (tramite la creazione di una macchina `App_Themes` directory), personalizzato <xref:System.Web.Hosting.VirtualPathProvider>classe deve supportare le directory.</xref:System.Web.Hosting.VirtualPathProvider>"
  example:
  - "The following code example is an implementation of the GetDirectory method in a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#24](~/add/codesnippet/csharp/m-system.web.hosting.vir_8_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#24](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_8_1.vb)]"
  syntax:
    content: public virtual System.Web.Hosting.VirtualDirectory GetDirectory (string virtualDir);
    parameters:
    - id: virtualDir
      type: System.String
      description: "Il percorso della directory virtuale."
    return:
      type: System.Web.Hosting.VirtualDirectory
      description: "Un discendente del <xref href=&quot;System.Web.Hosting.VirtualDirectory&quot;> </xref> classe che rappresenta una directory nel file system virtuale."
  overload: System.Web.Hosting.VirtualPathProvider.GetDirectory*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.GetFile(System.String)
  id: GetFile(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: GetFile(String)
  nameWithType: VirtualPathProvider.GetFile(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetFile(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Ottiene un file virtuale dal file system virtuale."
  remarks: "Il metodo GetFile restituisce un discendente della <xref:System.Web.Hosting.VirtualFile>classe che rappresenta il file specificato da di `virtualPath` parametro.</xref:System.Web.Hosting.VirtualFile>"
  example:
  - "The following code example is an implementation of the GetFile method in a custom <xref:System.Web.Hosting.VirtualPathProvider> class. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#23](~/add/codesnippet/csharp/m-system.web.hosting.vir_3_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_3_1.vb)]"
  syntax:
    content: public virtual System.Web.Hosting.VirtualFile GetFile (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Il percorso del file virtuale."
    return:
      type: System.Web.Hosting.VirtualFile
      description: "Un discendente del <xref href=&quot;System.Web.Hosting.VirtualFile&quot;> </xref> classe che rappresenta un file nel file system virtuale."
  overload: System.Web.Hosting.VirtualPathProvider.GetFile*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)
  id: GetFileHash(System.String,System.Collections.IEnumerable)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: GetFileHash(String,IEnumerable)
  nameWithType: VirtualPathProvider.GetFileHash(String,IEnumerable)
  fullName: System.Web.Hosting.VirtualPathProvider.GetFileHash(String,IEnumerable)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Restituisce un hash di percorsi virtuali specificati."
  remarks: "Utilizzare il metodo GetFileHash per fornire un hash delle dipendenze per una risorsa di sistema di file virtuale."
  syntax:
    content: public virtual string GetFileHash (string virtualPath, System.Collections.IEnumerable virtualPathDependencies);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Il percorso della risorsa virtuale primaria."
    - id: virtualPathDependencies
      type: System.Collections.IEnumerable
      description: "Matrice di percorsi di altre risorse virtuali richieste dalla risorsa virtuale primaria."
    return:
      type: System.String
      description: "Un hash di percorsi virtuali specificati."
  overload: System.Web.Hosting.VirtualPathProvider.GetFileHash*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.Initialize
  id: Initialize
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: Initialize()
  nameWithType: VirtualPathProvider.Initialize()
  fullName: System.Web.Hosting.VirtualPathProvider.Initialize()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Inizializza il <xref href=&quot;System.Web.Hosting.VirtualPathProvider&quot;> </xref> istanza."
  remarks: "Il metodo Initialize viene chiamato dopo che il provider è registrato con il sistema di compilazione ASP.NET. Il metodo di inizializzazione viene utilizzato per fornire qualsiasi inizializzazione richiesta dopo il <xref:System.Web.Hosting.VirtualPathProvider>istanza si trova nell&quot;ambiente di occupato dall&quot;applicazione.</xref:System.Web.Hosting.VirtualPathProvider>"
  example:
  - "The following code example is an implementation of the Initialize method that sets the path to a data file from the application's <xref:System.Web.Hosting.HostingEnvironment> instance. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#26](~/add/codesnippet/csharp/m-system.web.hosting.vir_0_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#26](~/add/codesnippet/visualbasic/m-system.web.hosting.vir_0_1.vb)]"
  syntax:
    content: protected virtual void Initialize ();
    parameters: []
  overload: System.Web.Hosting.VirtualPathProvider.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService
  id: InitializeLifetimeService
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: InitializeLifetimeService()
  nameWithType: VirtualPathProvider.InitializeLifetimeService()
  fullName: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Fornisce il <xref href=&quot;System.Web.Hosting.VirtualPathProvider&quot;> </xref> oggetto una durata infinita impedendo la creazione di un lease."
  remarks: "Questo metodo esegue l&quot;override del <xref:System.MarshalByRefObject.InitializeLifetimeService%2A>metodo nella relativa classe base.</xref:System.MarshalByRefObject.InitializeLifetimeService%2A> Restituisce sempre `null` e, pertanto, impedisce la creazione di lease per limita il <xref:System.Web.Hosting.VirtualPathProvider>durata dell&quot;oggetto.</xref:System.Web.Hosting.VirtualPathProvider>"
  syntax:
    content: public override object InitializeLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.OpenFile(System.String)
  id: OpenFile(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: OpenFile(String)
  nameWithType: VirtualPathProvider.OpenFile(String)
  fullName: System.Web.Hosting.VirtualPathProvider.OpenFile(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Restituisce un flusso da un file virtuale."
  remarks: "OpenFile (metodo) è un metodo pratico che consente di ottenere un flusso da un file virtuale senza creare un <xref:System.Web.Hosting.VirtualPathProvider>istanza.</xref:System.Web.Hosting.VirtualPathProvider>"
  syntax:
    content: public static System.IO.Stream OpenFile (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Il percorso del file virtuale."
    return:
      type: System.IO.Stream
      description: "Sola lettura <xref:System.IO.Stream>oggetto per il file virtuale specificato o la risorsa.</xref:System.IO.Stream>"
  overload: System.Web.Hosting.VirtualPathProvider.OpenFile*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.VirtualPathProvider.Previous
  id: Previous
  parent: System.Web.Hosting.VirtualPathProvider
  langs:
  - csharp
  name: Previous
  nameWithType: VirtualPathProvider.Previous
  fullName: System.Web.Hosting.VirtualPathProvider.Previous
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "Ottiene un riferimento a un controllo registrato in precedenza <xref href=&quot;System.Web.Hosting.VirtualPathProvider&quot;> </xref> oggetto nel sistema di compilazione."
  remarks: "Quando un <xref:System.Web.Hosting.VirtualPathProvider>oggetto è stato registrato con il sistema di compilazione ASP.NET, viene aggiunto a una catena di provider.</xref:System.Web.Hosting.VirtualPathProvider> Utilizzare la proprietà precedente per l&quot;elaborazione di mano disattivato al precedente <xref:System.Web.Hosting.VirtualPathProvider>oggetto nella catena, se il percorso richiesto non viene fornito da questo <xref:System.Web.Hosting.VirtualPathProvider>istanza.</xref:System.Web.Hosting.VirtualPathProvider> </xref:System.Web.Hosting.VirtualPathProvider>       La catena di provider di percorsi termina sempre con il provider ASP.NET predefinito, che serve i file dal file system."
  example:
  - "The following code example is an implementation of the <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> method. If the requested virtual directory does not begin with the string `\"/vrdir\"`, the method uses the Previous property to pass the request to the next <xref:System.Web.Hosting.VirtualPathProvider> object in the chain. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview topic.  \n  \n [!code-cs[System.Web.Hosting.VirtualPathProvider#23](~/add/codesnippet/csharp/p-system.web.hosting.vir_1.cs)]\n [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/add/codesnippet/visualbasic/p-system.web.hosting.vir_1.vb)]"
  syntax:
    content: protected System.Web.Hosting.VirtualPathProvider Previous { get; }
    return:
      type: System.Web.Hosting.VirtualPathProvider
      description: "Alla successiva <xref href=&quot;System.Web.Hosting.VirtualPathProvider&quot;> </xref> oggetto nel sistema di compilazione."
  overload: System.Web.Hosting.VirtualPathProvider.Previous*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Web.Hosting.VirtualPathProvider.#ctor
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: VirtualPathProvider()
  nameWithType: VirtualPathProvider.VirtualPathProvider()
  fullName: System.Web.Hosting.VirtualPathProvider.VirtualPathProvider()
- uid: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: CombineVirtualPaths(String,String)
  nameWithType: VirtualPathProvider.CombineVirtualPaths(String,String)
  fullName: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: DirectoryExists(String)
  nameWithType: VirtualPathProvider.DirectoryExists(String)
  fullName: System.Web.Hosting.VirtualPathProvider.DirectoryExists(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Hosting.VirtualPathProvider.FileExists(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: FileExists(String)
  nameWithType: VirtualPathProvider.FileExists(String)
  fullName: System.Web.Hosting.VirtualPathProvider.FileExists(String)
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetCacheDependency(String,IEnumerable,DateTime)
  nameWithType: VirtualPathProvider.GetCacheDependency(String,IEnumerable,DateTime)
  fullName: System.Web.Hosting.VirtualPathProvider.GetCacheDependency(String,IEnumerable,DateTime)
- uid: System.Web.Caching.CacheDependency
  parent: System.Web.Caching
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetCacheKey(String)
  nameWithType: VirtualPathProvider.GetCacheKey(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetCacheKey(String)
- uid: System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetDirectory(String)
  nameWithType: VirtualPathProvider.GetDirectory(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetDirectory(String)
- uid: System.Web.Hosting.VirtualDirectory
  parent: System.Web.Hosting
  isExternal: false
  name: VirtualDirectory
  nameWithType: VirtualDirectory
  fullName: System.Web.Hosting.VirtualDirectory
- uid: System.Web.Hosting.VirtualPathProvider.GetFile(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetFile(String)
  nameWithType: VirtualPathProvider.GetFile(String)
  fullName: System.Web.Hosting.VirtualPathProvider.GetFile(String)
- uid: System.Web.Hosting.VirtualFile
  parent: System.Web.Hosting
  isExternal: false
  name: VirtualFile
  nameWithType: VirtualFile
  fullName: System.Web.Hosting.VirtualFile
- uid: System.Web.Hosting.VirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetFileHash(String,IEnumerable)
  nameWithType: VirtualPathProvider.GetFileHash(String,IEnumerable)
  fullName: System.Web.Hosting.VirtualPathProvider.GetFileHash(String,IEnumerable)
- uid: System.Web.Hosting.VirtualPathProvider.Initialize
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: Initialize()
  nameWithType: VirtualPathProvider.Initialize()
  fullName: System.Web.Hosting.VirtualPathProvider.Initialize()
- uid: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: VirtualPathProvider.InitializeLifetimeService()
  fullName: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Hosting.VirtualPathProvider.OpenFile(System.String)
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: OpenFile(String)
  nameWithType: VirtualPathProvider.OpenFile(String)
  fullName: System.Web.Hosting.VirtualPathProvider.OpenFile(String)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Web.Hosting.VirtualPathProvider.Previous
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: Previous
  nameWithType: VirtualPathProvider.Previous
  fullName: System.Web.Hosting.VirtualPathProvider.Previous
- uid: System.Web.Hosting.VirtualPathProvider
  parent: System.Web.Hosting
  isExternal: false
  name: VirtualPathProvider
  nameWithType: VirtualPathProvider
  fullName: System.Web.Hosting.VirtualPathProvider
- uid: System.Web.Hosting.VirtualPathProvider.#ctor*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: VirtualPathProvider
  nameWithType: VirtualPathProvider.VirtualPathProvider
- uid: System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: CombineVirtualPaths
  nameWithType: VirtualPathProvider.CombineVirtualPaths
- uid: System.Web.Hosting.VirtualPathProvider.DirectoryExists*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: DirectoryExists
  nameWithType: VirtualPathProvider.DirectoryExists
- uid: System.Web.Hosting.VirtualPathProvider.FileExists*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: FileExists
  nameWithType: VirtualPathProvider.FileExists
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheDependency*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetCacheDependency
  nameWithType: VirtualPathProvider.GetCacheDependency
- uid: System.Web.Hosting.VirtualPathProvider.GetCacheKey*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetCacheKey
  nameWithType: VirtualPathProvider.GetCacheKey
- uid: System.Web.Hosting.VirtualPathProvider.GetDirectory*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetDirectory
  nameWithType: VirtualPathProvider.GetDirectory
- uid: System.Web.Hosting.VirtualPathProvider.GetFile*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetFile
  nameWithType: VirtualPathProvider.GetFile
- uid: System.Web.Hosting.VirtualPathProvider.GetFileHash*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: GetFileHash
  nameWithType: VirtualPathProvider.GetFileHash
- uid: System.Web.Hosting.VirtualPathProvider.Initialize*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: Initialize
  nameWithType: VirtualPathProvider.Initialize
- uid: System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: InitializeLifetimeService
  nameWithType: VirtualPathProvider.InitializeLifetimeService
- uid: System.Web.Hosting.VirtualPathProvider.OpenFile*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: OpenFile
  nameWithType: VirtualPathProvider.OpenFile
- uid: System.Web.Hosting.VirtualPathProvider.Previous*
  parent: System.Web.Hosting.VirtualPathProvider
  isExternal: false
  name: Previous
  nameWithType: VirtualPathProvider.Previous
