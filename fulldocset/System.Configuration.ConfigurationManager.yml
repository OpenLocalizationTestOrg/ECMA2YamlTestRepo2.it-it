### YamlMime:ManagedReference
items:
- uid: System.Configuration.ConfigurationManager
  id: ConfigurationManager
  children:
  - System.Configuration.ConfigurationManager.AppSettings
  - System.Configuration.ConfigurationManager.ConnectionStrings
  - System.Configuration.ConfigurationManager.GetSection(System.String)
  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  - System.Configuration.ConfigurationManager.OpenMachineConfiguration
  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  - System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  - System.Configuration.ConfigurationManager.RefreshSection(System.String)
  langs:
  - csharp
  name: ConfigurationManager
  nameWithType: ConfigurationManager
  fullName: System.Configuration.ConfigurationManager
  type: Class
  summary: "Fornisce l&quot;accesso ai file di configurazione per le applicazioni client. Questa classe non può essere ereditata."
  remarks: "La classe ConfigurationManager consente al computer di accesso, applicazione e informazioni di configurazione utente. Questa classe sostituisce il <xref:System.Configuration.ConfigurationSettings>(classe), che è deprecato.</xref:System.Configuration.ConfigurationSettings> Per le applicazioni web, utilizzare la <xref:System.Web.Configuration.WebConfigurationManager>classe.</xref:System.Web.Configuration.WebConfigurationManager>       Per utilizzare la classe ConfigurationManager, deve fare riferimento al progetto il `System.Configuration` assembly. Per impostazione predefinita, alcuni modelli di progetto, come applicazione Console, fa riferimento questo assembly deve riferimento manualmente.      > [!NOTE] > Il nome e il percorso del file di configurazione dell&quot;applicazione variano in funzione host dell&quot;applicazione. Per ulteriori informazioni, vedere [NIB: file di configurazione dell&quot;applicazione](http://msdn.microsoft.com/en-us/0d05b1b8-b18b-43d8-bb3c-526ff0c44fe0).       È possibile utilizzare il predefinito <xref:System.Configuration>tipi o derivare da esse per gestire le informazioni di configurazione.</xref:System.Configuration> Per utilizzare questi tipi, può lavorare direttamente con le informazioni di configurazione ed è possibile estendere i file di configurazione per includere informazioni personalizzate.       La classe ConfigurationManager include membri che consentono di eseguire le attività seguenti:-leggere una sezione da un file di configurazione. Per accedere a informazioni di configurazione, chiamare il <xref:System.Configuration.ConfigurationManager.GetSection%2A>metodo.</xref:System.Configuration.ConfigurationManager.GetSection%2A> Per alcune sezioni, ad esempio `appSettings` e `connectionStrings`, utilizzare il <xref:System.Configuration.ConfigurationManager.AppSettings%2A>e <xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A>classi.</xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A> </xref:System.Configuration.ConfigurationManager.AppSettings%2A> Questi membri eseguire operazioni di sola lettura una singola istanza memorizzata nella cache della configurazione, utilizzare il multithreading conoscenza.      -Consente di leggere e scrivere file di configurazione nel suo complesso. L&quot;applicazione può leggere e scrivere le impostazioni di configurazione in qualsiasi livello, per se stesso o per altre applicazioni o di un computer locale o remota. Utilizzare uno dei metodi forniti dalla classe ConfigurationManager per aprire un file di configurazione, ad esempio SampleApp.exe.config. Questi metodi restituiscono un <xref:System.Configuration.Configuration>che a sua volta espone metodi e proprietà consente di lavorare con i file di configurazione associato.</xref:System.Configuration.Configuration> I metodi di eseguono operazioni di lettura o operazioni di scrittura e creare i dati di configurazione ogni volta che viene scritto un file.      -Supporta attività di configurazione. Per supportare diverse attività di configurazione vengono utilizzati i seguenti tipi:- <xref:System.Configuration.SectionInformation>- <xref:System.Configuration.PropertyInformation>- <xref:System.Configuration.PropertyInformationCollection>- <xref:System.Configuration.ElementInformation>- <xref:System.Configuration.ContextInformation>- <xref:System.Configuration.ConfigurationSectionGroup>- <xref:System.Configuration.ConfigurationSectionGroupCollection>oltre a lavorare con le informazioni di configurazione esistente, è possibile creare e lavorare con gli elementi di configurazione personalizzato estendendo i tipi di configurazione predefinite, ad esempio il <xref:System.Configuration.ConfigurationElement>, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, e <xref:System.Configuration.ConfigurationSection>classi.</xref:System.Configuration.ConfigurationSection> </xref:System.Configuration.ConfigurationProperty> </xref:System.Configuration.ConfigurationElementCollection> </xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ConfigurationSectionGroupCollection> </xref:System.Configuration.ConfigurationSectionGroup> </xref:System.Configuration.ContextInformation> </xref:System.Configuration.ElementInformation> </xref:System.Configuration.PropertyInformationCollection> </xref:System.Configuration.PropertyInformation> </xref:System.Configuration.SectionInformation> Per un esempio di come estendere un tipo di configurazione predefinite a livello di codice, vedere <xref:System.Configuration.ConfigurationSection>.</xref:System.Configuration.ConfigurationSection> Per un esempio di come estendere un tipo di configurazione incorporato che utilizza il modello basato su attributi, vedere <xref:System.Configuration.ConfigurationElement>.</xref:System.Configuration.ConfigurationElement>"
  example:
  - "The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadAllSettings();  \n            ReadSetting(\"Setting1\");  \n            ReadSetting(\"NotValid\");  \n            AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\");  \n            AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\");  \n            ReadAllSettings();  \n        }  \n  \n        static void ReadAllSettings()  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n  \n                if (appSettings.Count == 0)  \n                {  \n                    Console.WriteLine(\"AppSettings is empty.\");  \n                }  \n                else  \n                {  \n                    foreach (var key in appSettings.AllKeys)  \n                    {  \n                        Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings[key]);  \n                    }  \n                }  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void ReadSetting(string key)  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n                string result = appSettings[key] ?? \"Not Found\";  \n                Console.WriteLine(result);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void AddUpdateAppSettings(string key, string value)  \n        {  \n            try  \n            {  \n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \n                var settings = configFile.AppSettings.Settings;  \n                if (settings[key] == null)  \n                {  \n                    settings.Add(key, value);  \n                }  \n                else  \n                {  \n                    settings[key].Value = value;  \n                }  \n                configFile.Save(ConfigurationSaveMode.Modified);  \n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error writing app settings\");  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nModule Module1  \n  \n    Sub Main()  \n        ReadAllSettings()  \n        ReadSetting(\"Setting1\")  \n        ReadSetting(\"NotValid\")  \n        AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\")  \n        AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\")  \n        ReadAllSettings()  \n    End Sub  \n  \n    Sub ReadAllSettings()  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n  \n            If appSettings.Count = 0 Then  \n                Console.WriteLine(\"AppSettings is empty.\")  \n            Else  \n                For Each key As String In appSettings.AllKeys  \n                    Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings(key))  \n                Next  \n            End If  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub ReadSetting(key As String)  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n            Dim result As String = appSettings(key)  \n            If IsNothing(result) Then  \n                result = \"Not found\"  \n            End If  \n            Console.WriteLine(result)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub AddUpdateAppSettings(key As String, value As String)  \n        Try  \n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \n            Dim settings = configFile.AppSettings.Settings  \n            If IsNothing(settings(key)) Then  \n                settings.Add(key, value)  \n            Else  \n                settings(key).Value = value  \n            End If  \n            configFile.Save(ConfigurationSaveMode.Modified)  \n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error writing app settings\")  \n        End Try  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config file as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n  <appSettings>  \n    <add key=\"Setting1\" value=\"May 5, 2014\"/>  \n    <add key=\"Setting2\" value=\"May 6, 2014\"/>  \n  </appSettings>  \n</configuration>  \n```  \n  \n The following example shows how to use a connection string to read data from a database.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \nusing System.Data.SqlClient;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadProducts();  \n        }  \n  \n        static void ReadProducts()  \n        {  \n            var connectionString = ConfigurationManager.ConnectionStrings[\"WingtipToys\"].ConnectionString;  \n            string queryString = \"SELECT Id, ProductName FROM dbo.Products;\";  \n            using (var connection = new SqlConnection(connectionString))  \n            {  \n                var command = new SqlCommand(queryString, connection);  \n                connection.Open();  \n                using (var reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        Console.WriteLine(String.Format(\"{0}, {1}\", reader[0], reader[1]));  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nImports System.Data.SqlClient  \nModule Module1  \n  \n    Sub Main()  \n        ReadProducts()  \n    End Sub  \n  \n    Sub ReadProducts()  \n        Dim connectionString = ConfigurationManager.ConnectionStrings(\"WingtipToys\").ConnectionString  \n        Dim queryString = \"SELECT Id, ProductName FROM dbo.Products;\"  \n        Using connection As New SqlConnection(connectionString)  \n            Dim command = New SqlCommand(queryString, connection)  \n            connection.Open()  \n  \n            Using reader As SqlDataReader = command.ExecuteReader()  \n                While reader.Read()  \n                    Console.WriteLine(String.Format(\"{0}, {1}\", reader(0), reader(1)))  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n    <connectionStrings>  \n      <add name=\"WingtipToys\" connectionString=\"Data Source=(LocalDB)\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\" />  \n    </connectionStrings>  \n</configuration>  \n```"
  syntax:
    content: public static class ConfigurationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.AppSettings
  id: AppSettings
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
  fullName: System.Configuration.ConfigurationManager.AppSettings
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Ottiene il <xref href=&quot;System.Configuration.AppSettingsSection&quot;> </xref> dati per la configurazione predefinita dell&quot;applicazione corrente."
  remarks: "Oggetto <xref:System.Configuration.AppSettingsSection>oggetto include il contenuto del file di configurazione `appSettings` sezione.</xref:System.Configuration.AppSettingsSection>"
  example:
  - "The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadAllSettings();  \n            ReadSetting(\"Setting1\");  \n            ReadSetting(\"NotValid\");  \n            AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\");  \n            AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\");  \n            ReadAllSettings();  \n        }  \n  \n        static void ReadAllSettings()  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n  \n                if (appSettings.Count == 0)  \n                {  \n                    Console.WriteLine(\"AppSettings is empty.\");  \n                }  \n                else  \n                {  \n                    foreach (var key in appSettings.AllKeys)  \n                    {  \n                        Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings[key]);  \n                    }  \n                }  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void ReadSetting(string key)  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n                string result = appSettings[key] ?? \"Not Found\";  \n                Console.WriteLine(result);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void AddUpdateAppSettings(string key, string value)  \n        {  \n            try  \n            {  \n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \n                var settings = configFile.AppSettings.Settings;  \n                if (settings[key] == null)  \n                {  \n                    settings.Add(key, value);  \n                }  \n                else  \n                {  \n                    settings[key].Value = value;  \n                }  \n                configFile.Save(ConfigurationSaveMode.Modified);  \n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error writing app settings\");  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nModule Module1  \n  \n    Sub Main()  \n        ReadAllSettings()  \n        ReadSetting(\"Setting1\")  \n        ReadSetting(\"NotValid\")  \n        AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\")  \n        AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\")  \n        ReadAllSettings()  \n    End Sub  \n  \n    Sub ReadAllSettings()  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n  \n            If appSettings.Count = 0 Then  \n                Console.WriteLine(\"AppSettings is empty.\")  \n            Else  \n                For Each key As String In appSettings.AllKeys  \n                    Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings(key))  \n                Next  \n            End If  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub ReadSetting(key As String)  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n            Dim result As String = appSettings(key)  \n            If IsNothing(result) Then  \n                result = \"Not found\"  \n            End If  \n            Console.WriteLine(result)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub AddUpdateAppSettings(key As String, value As String)  \n        Try  \n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \n            Dim settings = configFile.AppSettings.Settings  \n            If IsNothing(settings(key)) Then  \n                settings.Add(key, value)  \n            Else  \n                settings(key).Value = value  \n            End If  \n            configFile.Save(ConfigurationSaveMode.Modified)  \n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error writing app settings\")  \n        End Try  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config file as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n  <appSettings>  \n    <add key=\"Setting1\" value=\"May 5, 2014\"/>  \n    <add key=\"Setting2\" value=\"May 6, 2014\"/>  \n  </appSettings>  \n</configuration>  \n```"
  syntax:
    content: public static System.Collections.Specialized.NameValueCollection AppSettings { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "Restituisce un <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> oggetto che contiene il contenuto del <xref href=&quot;System.Configuration.AppSettingsSection&quot;> </xref> oggetto per la configurazione predefinita dell&quot;applicazione corrente."
  overload: System.Configuration.ConfigurationManager.AppSettings*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Non è stato possibile recuperare un <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> oggetto con i dati delle impostazioni dell&quot;applicazione."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.ConnectionStrings
  id: ConnectionStrings
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
  fullName: System.Configuration.ConfigurationManager.ConnectionStrings
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Ottiene il <xref href=&quot;System.Configuration.ConnectionStringsSection&quot;> </xref> dati per la configurazione predefinita dell&quot;applicazione corrente."
  remarks: "Oggetto <xref:System.Configuration.ConnectionStringsSection>oggetto include il contenuto del file di configurazione `connectionStrings` sezione.</xref:System.Configuration.ConnectionStringsSection>"
  example:
  - "The following example shows how to use a connection string to read data from a database.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \nusing System.Data.SqlClient;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadProducts();  \n        }  \n  \n        static void ReadProducts()  \n        {  \n            var connectionString = ConfigurationManager.ConnectionStrings[\"WingtipToys\"].ConnectionString;  \n            string queryString = \"SELECT Id, ProductName FROM dbo.Products;\";  \n            using (var connection = new SqlConnection(connectionString))  \n            {  \n                var command = new SqlCommand(queryString, connection);  \n                connection.Open();  \n                using (var reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        Console.WriteLine(String.Format(\"{0}, {1}\", reader[0], reader[1]));  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nImports System.Data.SqlClient  \nModule Module1  \n  \n    Sub Main()  \n        ReadProducts()  \n    End Sub  \n  \n    Sub ReadProducts()  \n        Dim connectionString = ConfigurationManager.ConnectionStrings(\"WingtipToys\").ConnectionString  \n        Dim queryString = \"SELECT Id, ProductName FROM dbo.Products;\"  \n        Using connection As New SqlConnection(connectionString)  \n            Dim command = New SqlCommand(queryString, connection)  \n            connection.Open()  \n  \n            Using reader As SqlDataReader = command.ExecuteReader()  \n                While reader.Read()  \n                    Console.WriteLine(String.Format(\"{0}, {1}\", reader(0), reader(1)))  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n    <connectionStrings>  \n      <add name=\"WingtipToys\" connectionString=\"Data Source=(LocalDB)\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\" />  \n    </connectionStrings>  \n</configuration>  \n```"
  syntax:
    content: public static System.Configuration.ConnectionStringSettingsCollection ConnectionStrings { get; }
    return:
      type: System.Configuration.ConnectionStringSettingsCollection
      description: "Restituisce un <xref href=&quot;System.Configuration.ConnectionStringSettingsCollection&quot;> </xref> oggetto che contiene il contenuto del <xref href=&quot;System.Configuration.ConnectionStringsSection&quot;> </xref> oggetto per la configurazione predefinita dell&quot;applicazione corrente."
  overload: System.Configuration.ConfigurationManager.ConnectionStrings*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Non è stato possibile recuperare un <xref href=&quot;System.Configuration.ConnectionStringSettingsCollection&quot;> </xref> oggetto."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.GetSection(System.String)
  id: GetSection(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: GetSection(String)
  nameWithType: ConfigurationManager.GetSection(String)
  fullName: System.Configuration.ConfigurationManager.GetSection(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Recupera una sezione di configurazione specificato per la configurazione predefinita dell&quot;applicazione corrente."
  remarks: "Per le applicazioni client, questo metodo recupera un file di configurazione ottenuto dall&quot;unione di file di configurazione dell&quot;applicazione, il file di configurazione utente locale e il file di configurazione comune.       Il metodo GetSection accede alle informazioni di configurazione di run-time che non può modificare. Per modificare la configurazione, utilizzare il <xref:System.Configuration.Configuration.GetSection%2A>metodo nel file di configurazione che si ottiene utilizzando uno dei metodi di apertura seguenti:- <xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A></xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A> </xref:System.Configuration.Configuration.GetSection%2A>"
  example:
  - "The following example shows how to use the GetSection method. The example is part of a larger example that is provided for the <xref:System.Configuration.ConfigurationManager> class.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_14_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_14_1.vb)]"
  syntax:
    content: public static object GetSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "Il percorso della sezione di configurazione e il nome."
    return:
      type: System.Object
      description: "Specificato <xref href=&quot;System.Configuration.ConfigurationSection&quot;> </xref> oggetto, o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se la sezione non esiste."
  overload: System.Configuration.ConfigurationManager.GetSection*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Non è stato possibile caricare un file di configurazione."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  id: OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenExeConfiguration(ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Apre il file di configurazione per l&quot;applicazione corrente come un <xref href=&quot;System.Configuration.Configuration&quot;> </xref> oggetto."
  remarks: "Le applicazioni client di utilizzare una configurazione globale che si applica a tutti gli utenti, configurazioni diverse che si applicano a singoli utenti e configurazioni che si applicano agli utenti mobili. Il `userLevel` parametro determina la posizione del file di configurazione aperto indicando se non dispone di alcun livello utente (il file di configurazione si trova nella stessa directory dell&quot;applicazione) o dispone di un livello di singolo utente (il file di configurazione è in un percorso di impostazioni dell&quot;applicazione determinato dal livello di utente).       Specificare la configurazione da ottenere passando uno dei seguenti valori per `userLevel`:: per ottenere il <xref:System.Configuration.Configuration>set di oggetti che si applica a tutti gli utenti, `userLevel` a <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>      -Per ottenere l&quot;oggetto locale <xref:System.Configuration.Configuration>set di oggetti che si applica all&quot;utente corrente, `userLevel` a <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>      -Per ottenere il roaming <xref:System.Configuration.Configuration>set di oggetti che si applica all&quot;utente corrente, `userLevel` a <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>          > [!NOTE] > Per ottenere il <xref:System.Configuration.Configuration>dell&quot;oggetto per una risorsa, il codice deve disporre delle autorizzazioni di lettura su tutti i file di configurazione da cui eredita le impostazioni.</xref:System.Configuration.Configuration> Per aggiornare un file di configurazione, il codice deve inoltre disporre delle autorizzazioni di scrittura per il file di configurazione e la directory in cui è contenuto."
  example:
  - "The following code example shows how to use the OpenExeConfiguration method.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#5](~/add/codesnippet/csharp/3eb7bc6f-f763-4df6-a789-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#5](~/add/codesnippet/visualbasic/3eb7bc6f-f763-4df6-a789-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenExeConfiguration (System.Configuration.ConfigurationUserLevel userLevel);
    parameters:
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "Il <xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> per cui si apre la configurazione."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Non è stato possibile caricare un file di configurazione."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  id: OpenExeConfiguration(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenExeConfiguration(String)
  nameWithType: ConfigurationManager.OpenExeConfiguration(String)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Apre il file di configurazione client specificato come un <xref href=&quot;System.Configuration.Configuration&quot;> </xref> oggetto."
  remarks: "Le applicazioni client di utilizzare una configurazione globale che si applica a tutti gli utenti, configurazioni diverse che si applicano a singoli utenti e configurazioni che si applicano agli utenti mobili. Il `userLevel` valore determina la posizione del file di configurazione aperto. Indica se non dispone di alcun livello utente (il file di configurazione si trova nella stessa directory dell&quot;applicazione) o dispone di un livello di singolo utente (il file di configurazione è in un percorso di impostazioni dell&quot;applicazione determinato dal tipo di livello utente).       Chiamare questo overload del metodo è equivalente alla chiamata di <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29>eseguire l&quot;overload con il `preLoad` parametro impostato su `false`.</xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29>"
  example:
  - "The following code example shows how to use the OpenExeConfiguration method.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#6](~/add/codesnippet/csharp/m-system.configuration.c_28_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#6](~/add/codesnippet/visualbasic/m-system.configuration.c_28_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenExeConfiguration (string exePath);
    parameters:
    - id: exePath
      type: System.String
      description: "Il percorso del file eseguibile (exe)."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Non è stato possibile caricare un file di configurazione."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration
  id: OpenMachineConfiguration
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMachineConfiguration()
  nameWithType: ConfigurationManager.OpenMachineConfiguration()
  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Apre il file di configurazione del computer in uso come un <xref href=&quot;System.Configuration.Configuration&quot;> </xref> oggetto."
  remarks: "Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \n  \n *%windir%*\\Microsoft.NET\\Framework\\\\*version*\\config  \n  \n> [!NOTE]\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer."
  example:
  - "The following code example shows how to use the OpenMachineConfiguration method to obtain all sections that are contained in the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/m-system.configuration.c_32_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/m-system.configuration.c_32_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMachineConfiguration ();
    parameters: []
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenMachineConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Non è stato possibile caricare un file di configurazione."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Apre il file di configurazione client specificato come un <xref href=&quot;System.Configuration.Configuration&quot;> </xref> oggetto che utilizza il livello di utente e di mapping di file specificato."
  remarks: "Il <xref:System.Configuration.ConfigurationUserLevel>oggetto determina il percorso del file di configurazione in corso l&quot;apertura.</xref:System.Configuration.ConfigurationUserLevel> Indica se il file non dispone di alcun livello utente (il file di configurazione si trova nella stessa directory dell&quot;applicazione) o ha un livello utente (il file di configurazione è in un percorso di impostazioni dell&quot;applicazione determinato da `userLevel`).      > [!NOTE] > Per ottenere il <xref:System.Configuration.Configuration>dell&quot;oggetto per una risorsa, il codice deve disporre delle autorizzazioni di lettura su tutti i file di configurazione da cui eredita le impostazioni.</xref:System.Configuration.Configuration> Per aggiornare un file di configurazione, il codice deve inoltre disporre delle autorizzazioni di scrittura per il file di configurazione e la directory in cui è contenuto."
  example:
  - "The following code example shows how to use the OpenMappedExeConfiguration method to obtain all sections that are contained by the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#9](~/add/codesnippet/csharp/3a231caa-8bb5-4e8b-a7ef-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#9](~/add/codesnippet/visualbasic/3a231caa-8bb5-4e8b-a7ef-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel);
    parameters:
    - id: fileMap
      type: System.Configuration.ExeConfigurationFileMap
      description: "Un <xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> oggetto che fa riferimento a file di configurazione da utilizzare invece i file di configurazione predefinito dell&quot;applicazione."
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "Il <xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> oggetto per cui si apre la configurazione."
    return:
      type: System.Configuration.Configuration
      description: "Oggetto di configurazione."
  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Non è stato possibile caricare un file di configurazione."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Apre il file di configurazione client specificato come un <xref href=&quot;System.Configuration.Configuration&quot;> </xref> oggetto che utilizza il mapping del file specificato, il livello di utente e opzione di precaricamento."
  remarks: "Il <xref:System.Configuration.ConfigurationUserLevel>oggetto determina il percorso del file di configurazione che è stato aperto.</xref:System.Configuration.ConfigurationUserLevel> Indica se il file non dispone di alcun livello utente (il file di configurazione si trova nella stessa directory dell&quot;applicazione) o ha un livello utente (il file di configurazione è in un percorso di impostazioni dell&quot;applicazione determinato da `userLevel`).      > [!NOTE] > Per ottenere il <xref:System.Configuration.Configuration>dell&quot;oggetto per una risorsa, il codice deve disporre delle autorizzazioni di lettura su tutti i file di configurazione da cui eredita le impostazioni.</xref:System.Configuration.Configuration> Per aggiornare un file di configurazione, il codice deve inoltre disporre delle autorizzazioni di scrittura per il file di configurazione e la directory in cui è contenuto.       Per un esempio di codice, vedere il <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>rapporto di overload.</xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel, bool preLoad);
    parameters:
    - id: fileMap
      type: System.Configuration.ExeConfigurationFileMap
      description: "Un <xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> oggetto che fa riferimento al file di configurazione da utilizzare invece il file di configurazione dell&quot;applicazione predefinito."
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "Il <xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> oggetto per cui si apre la configurazione."
    - id: preLoad
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per precaricare tutti i gruppi di sezioni e sezioni. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Configuration.Configuration
      description: "Oggetto di configurazione."
  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Non è stato possibile caricare un file di configurazione."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  id: OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedMachineConfiguration(ConfigurationFileMap)
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Apre il file di configurazione del computer come un <xref href=&quot;System.Configuration.Configuration&quot;> </xref> oggetto che utilizza il mapping di file specificato."
  remarks: "Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \n  \n *%windir%*\\Microsoft.NET\\Framework\\\\*version*\\config  \n  \n> [!NOTE]\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer."
  example:
  - "The following code example shows how to use the OpenMappedMachineConfiguration method to obtain all sections in the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/b514431f-be81-4b1e-b58c-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/b514431f-be81-4b1e-b58c-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedMachineConfiguration (System.Configuration.ConfigurationFileMap fileMap);
    parameters:
    - id: fileMap
      type: System.Configuration.ConfigurationFileMap
      description: "Un <xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> oggetto che fa riferimento a file di configurazione da utilizzare invece i file di configurazione predefinito dell&quot;applicazione."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Non è stato possibile caricare un file di configurazione."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)
  id: RefreshSection(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: RefreshSection(String)
  nameWithType: ConfigurationManager.RefreshSection(String)
  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Aggiorna la sezione denominata in modo che al successivo recupero venga riletta dal disco."
  remarks: "Questo metodo invalida la cache per la sezione di configurazione specificato senza influire su altre sezioni."
  example:
  - "The following code example shows how to use the RefreshSection method to refresh the application settings configuration section.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_34_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_34_1.vb)]"
  syntax:
    content: public static void RefreshSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "Il nome di sezione di configurazione o nome di percorso e la sezione di configurazione della sezione da aggiornare."
  overload: System.Configuration.ConfigurationManager.RefreshSection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Configuration.ConfigurationManager.AppSettings
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
  fullName: System.Configuration.ConfigurationManager.AppSettings
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Configuration.ConfigurationManager.ConnectionStrings
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
  fullName: System.Configuration.ConfigurationManager.ConnectionStrings
- uid: System.Configuration.ConnectionStringSettingsCollection
  parent: System.Configuration
  isExternal: false
  name: ConnectionStringSettingsCollection
  nameWithType: ConnectionStringSettingsCollection
  fullName: System.Configuration.ConnectionStringSettingsCollection
- uid: System.Configuration.ConfigurationManager.GetSection(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: GetSection(String)
  nameWithType: ConfigurationManager.GetSection(String)
  fullName: System.Configuration.ConfigurationManager.GetSection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration(ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
- uid: System.Configuration.Configuration
  parent: System.Configuration
  isExternal: false
  name: Configuration
  nameWithType: Configuration
  fullName: System.Configuration.Configuration
- uid: System.Configuration.ConfigurationUserLevel
  parent: System.Configuration
  isExternal: false
  name: ConfigurationUserLevel
  nameWithType: ConfigurationUserLevel
  fullName: System.Configuration.ConfigurationUserLevel
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration(String)
  nameWithType: ConfigurationManager.OpenExeConfiguration(String)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMachineConfiguration()
  nameWithType: ConfigurationManager.OpenMachineConfiguration()
  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
- uid: System.Configuration.ExeConfigurationFileMap
  parent: System.Configuration
  isExternal: false
  name: ExeConfigurationFileMap
  nameWithType: ExeConfigurationFileMap
  fullName: System.Configuration.ExeConfigurationFileMap
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedMachineConfiguration(ConfigurationFileMap)
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
- uid: System.Configuration.ConfigurationFileMap
  parent: System.Configuration
  isExternal: false
  name: ConfigurationFileMap
  nameWithType: ConfigurationFileMap
  fullName: System.Configuration.ConfigurationFileMap
- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: RefreshSection(String)
  nameWithType: ConfigurationManager.RefreshSection(String)
  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)
- uid: System.Configuration.ConfigurationManager.AppSettings*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
- uid: System.Configuration.ConfigurationManager.ConnectionStrings*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
- uid: System.Configuration.ConfigurationManager.GetSection*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: GetSection
  nameWithType: ConfigurationManager.GetSection
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration
  nameWithType: ConfigurationManager.OpenExeConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMachineConfiguration
  nameWithType: ConfigurationManager.OpenMachineConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedMachineConfiguration
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration
- uid: System.Configuration.ConfigurationManager.RefreshSection*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: RefreshSection
  nameWithType: ConfigurationManager.RefreshSection
