### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.PrincipalPermissionAttribute
  id: PrincipalPermissionAttribute
  children:
  - System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  - System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  - System.Security.Permissions.PrincipalPermissionAttribute.Name
  - System.Security.Permissions.PrincipalPermissionAttribute.Role
  langs:
  - csharp
  name: PrincipalPermissionAttribute
  nameWithType: PrincipalPermissionAttribute
  fullName: System.Security.Permissions.PrincipalPermissionAttribute
  type: Class
  summary: "Consente di azioni di sicurezza per <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> da applicare al codice usando la sicurezza dichiarativa. Questa classe non può essere ereditata."
  remarks: "PrincipalPermissionAttribute consente di richiedere che gli utenti che eseguono codice appartengano a un ruolo specificato in modo dichiarativo o sono stati autenticati. Utilizzo di <xref:System.Security.Permissions.PermissionState>Crea un <xref:System.Security.Permissions.PrincipalPermission>con <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A>impostato su `true` e <xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A>e <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>impostato su `null`.</xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> </xref:System.Security.Permissions.PrincipalPermission> </xref:System.Security.Permissions.PermissionState>       L&quot;ambito della dichiarazione che è consentita dipende il <xref:System.Security.Permissions.SecurityAction>utilizzato.</xref:System.Security.Permissions.SecurityAction> Impossibile applicare PrincipalPermissionAttribute a livello di assembly.       Le informazioni di sicurezza dichiarate da un attributo di sicurezza viene archiviate nei metadati dell&quot;attributo di destinazione e si accedono dal sistema in fase di esecuzione. Gli attributi di sicurezza vengono utilizzati solo per la sicurezza dichiarativa. Per la sicurezza imperativa, utilizzare la classe dell&quot;autorizzazione corrispondente.      > [!IMPORTANT] > Prima di utilizzare questa classe per richiedere l&quot;autorizzazione dell&quot;entità, è necessario impostare i criteri di entità del dominio applicazione corrente per il valore di enumerazione <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> Per impostazione predefinita, i criteri di entità è <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> Se il criterio principale non è impostato su <xref:System.Security.Principal.PrincipalPolicy>, una richiesta di autorizzazione principale avrà esito negativo.</xref:System.Security.Principal.PrincipalPolicy> Il codice seguente deve essere eseguito prima richiesta di autorizzazione principale:`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  example:
  - "The following example demonstrates how the PrincipalPermissionAttribute class is used declaratively to demand that the current user be an administrator.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/t-system.security.permis_17_1.cpp)]\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_17_1.vb)]\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/t-system.security.permis_17_1.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class PrincipalPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: PrincipalPermissionAttribute(SecurityAction)
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Permissions.PrincipalPermissionAttribute&quot;> </xref> classe con l&quot;oggetto specificato <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>."
  remarks: '`Demand`, `InheritanceDemand`, e `LinkDemand` sono gli unici valori di <xref:System.Security.Permissions.SecurityAction>che hanno un significato per questo attributo.</xref:System.Security.Permissions.SecurityAction> Altre azioni non si applicano alle autorizzazioni che non sono le autorizzazioni di accesso di codice.'
  example:
  - "The following example demonstrates how to use the PrincipalPermissionAttribute constructor to demand that the current user be an administrator.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/b59d1850-818f-411e-9c11-_1.cpp)]\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/b59d1850-818f-411e-9c11-_1.vb)]\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/b59d1850-818f-411e-9c11-_1.cs)]"
  syntax:
    content: public PrincipalPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "Uno del <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref> valori."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  id: Authenticated
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene o imposta un valore che indica se l&quot;entità corrente è stata autenticata dal provider di sicurezza basata sui ruoli sottostante."
  syntax:
    content: public bool Authenticated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;entità corrente è stato autenticato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: PrincipalPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Crea e restituisce un nuovo <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>."
  remarks: "Questo metodo deve essere chiamato solo dal sistema di sicurezza, mai dal codice dell&quot;applicazione.       In fase di compilazione, gli attributi convertono le dichiarazioni di sicurezza in un formato serializzato nei metadati. Dati di sicurezza dichiarativa nei metadati vengono creati dall&quot;autorizzazione restituita dal metodo che corrisponde a questo attributo."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Oggetto <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> che corrisponde a questo attributo."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name
  id: Name
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene o imposta il nome dell&quot;identità associato all&quot;entità corrente."
  remarks: "Se il provider di autenticazione è Windows NT, il nome è lo stesso nome dell&quot;utente Windows NT account di accesso (nel formato &quot;Nomedominio\\nomeutente&quot;). Consultare la documentazione dell&quot;host per determinare il provider di autenticazione utilizzato e la modalità determina l&quot;identità dell&quot;entità corrente."
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "Nome che deve corrispondere a quello fornito dal sottostante provider di sicurezza basata sui ruoli."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role
  id: Role
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene o imposta l&quot;appartenenza a un ruolo di sicurezza specificato."
  remarks: "I ruoli disponibili variano in base al provider di autenticazione in uso dall&quot;host. Se il provider di autenticazione è Windows NT, i ruoli sono gruppi di utenti di Windows NT (nel formato &quot;Nomedominio\\nomegruppo&quot;). Consultare la documentazione dell&quot;host per determinare il provider di autenticazione utilizzato e ciò che gli utenti a ruoli possono appartenere."
  syntax:
    content: public string Role { get; set; }
    return:
      type: System.String
      description: "Il nome di un ruolo del sottostante provider di sicurezza basata sui ruoli."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Role*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: PrincipalPermissionAttribute(SecurityAction)
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: PrincipalPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: PrincipalPermissionAttribute
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: PrincipalPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
