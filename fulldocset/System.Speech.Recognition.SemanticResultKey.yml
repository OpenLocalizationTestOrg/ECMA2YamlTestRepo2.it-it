### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultKey
  id: SemanticResultKey
  children:
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  - System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultKey
  nameWithType: SemanticResultKey
  fullName: System.Speech.Recognition.SemanticResultKey
  type: Class
  summary: "Associa una chiave stringa con <xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref> per definire i valori <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> oggetti."
  remarks: "L&quot;unità base di espressione semantica in Speech è il <xref:System.Speech.Recognition.SemanticValue>, ovvero una coppia chiave/valore.</xref:System.Speech.Recognition.SemanticValue>       Utilizzando gli oggetti SemanticResultKey del tag <xref:System.Speech.Recognition.SemanticResultValue>istanze contenute nel <xref:System.Speech.Recognition.GrammarBuilder>oggetti e le stringhe in modo che i valori possono essere utilizzati facilmente da <xref:System.Speech.Recognition.SemanticValue>istanze nel riconoscimento.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>       È possibile utilizzare <xref:System.Speech.Recognition.SemanticResultValue>e gli oggetti SemanticResultKey, in combinazione con <xref:System.Speech.Recognition.GrammarBuilder>e <xref:System.Speech.Recognition.Choices>oggetti, per definire la struttura semantica per una grammatica di riconoscimento vocale.</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> Per accedere a informazioni semantiche in un risultato di riconoscimento, ottenere un&quot;istanza di <xref:System.Speech.Recognition.SemanticValue>tramite la <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>proprietà <xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> </xref:System.Speech.Recognition.SemanticValue>       Per ulteriori informazioni sull&quot;utilizzo <xref:System.Speech.Recognition.SemanticResultValue>e SemanticResultKey, vedere [SemanticResultValue comprensione e gli oggetti SemanticResultKey](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c) e [mediante un SemanticResultKey per estrarre un SemanticResultValue](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa) nel [sistema vocale Guida alla programmazione per .NET Framework 4.0](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043).</xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged with a semantic key, and the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag to verify that a password input has occurred.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n  {  \n    SemanticValue semantics = eventArgs.Result.Semantics;  \n    RecognitionResult result=eventArgs.Result;  \n  \n    if (!semantics.ContainsKey(\"Password\"))   \n    {  \n      SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n    }  \n    else   \n    {  \n      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  \n      MemoryStream pwdMemoryStream = new MemoryStream();  \n      pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n      if (!IsValidPwd(pwdMemoryStream))   \n      {  \n        string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \n        pwdAudio.WriteToWaveStream(waveStream);  \n        waveStream.Flush();  \n        waveStream.Close();  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);  \n  \n      }  \n    }  \n  };  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")]

      public class SemanticResultKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  id: '#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Assegna una chiave semantica a una o più <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> gli oggetti usati per creare una grammatica di riconoscimento vocale."
  remarks: "A causa delle conversioni implicite, il `builders` argomento supporta <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, e <xref:System.String>anche gli oggetti.</xref:System.String> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> Per ulteriori informazioni sulle conversioni implicite, vedere <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>       Quando si esegue un&quot;operazione di riconoscimento, di <xref:System.Speech.Recognition.GrammarBuilder>oggetti disponibili nel `builders` argomento vengono trattati come sequenziale.</xref:System.Speech.Recognition.GrammarBuilder> Ad esempio, se le operazioni seguenti <xref:System.Speech.Recognition.SemanticResultValue>viene utilizzato per costruire un <xref:System.Speech.Recognition.Grammar>, come input per il motore di riconoscimento deve contenere le parole &quot;volpe marrone rapida&quot; nella sequenza venga riconosciuta.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(       &quot;stringTest&quot;, new GrammarBuilder[] {       new GrammarBuilder(&quot;the&quot;),       new GrammarBuilder(&quot;quick&quot;),       new GrammarBuilder(&quot;brown&quot;),       new GrammarBuilder(&quot;fox&quot;)});   ```Il `semanticResultKey` argomento contiene il tag utilizzato per l&quot;accesso di <xref:System.Speech.Recognition.SemanticValue>che potrebbe essere restituito.</xref:System.Speech.Recognition.SemanticValue>       Il <xref:System.Speech.Recognition.SemanticValue.Value%2A>del <xref:System.Speech.Recognition.SemanticValue>varia a seconda di <xref:System.Speech.Recognition.GrammarBuilder>istanze fornite dal `builders` parametro.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A>       Se il <xref:System.Speech.Recognition.GrammarBuilder>gli oggetti non contengono nessuna istanza di definizione <xref:System.Speech.Recognition.SemanticResultValue>, il valore della <xref:System.Speech.Recognition.SemanticValue>è `null`.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder>       Se il <xref:System.Speech.Recognition.GrammarBuilder>oggetti disponibili nel `builders` parametro forniscono un tag (non associata a un <xref:System.Speech.Recognition.SemanticResultKey>oggetto) <xref:System.Speech.Recognition.SemanticResultValue>istanza utilizzata dalla logica di riconoscimento, tale istanza di <xref:System.Speech.Recognition.SemanticResultValue>definirà il <xref:System.Speech.Recognition.SemanticValue.Value%2A>proprietà del <xref:System.Speech.Recognition.SemanticValue>che viene prodotto.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder>       Deve essere presente una e solo uno, senza codifica <xref:System.Speech.Recognition.SemanticResultValue>dell&quot;istanza nel <xref:System.Speech.Recognition.GrammarBuilder>oggetti specificati dal `builders` parametro.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> Se più istanze di senza codifica <xref:System.Speech.Recognition.SemanticResultValue>sono associati il <xref:System.Speech.Recognition.SemanticResultKey>, ogni tenterà di set il valore della <xref:System.Speech.Recognition.SemanticValue>prodotti nel risultato del riconoscimento.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> Ciò non è consentito e il riconoscimento genererà un&quot;eccezione durante il tentativo di utilizzare un <xref:System.Speech.Recognition.Grammar>creato utilizzando tale un <xref:System.Speech.Recognition.SemanticResultKey>istanza.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Grammar>       Le istanze di <xref:System.Speech.Recognition.SemanticResultValue>contenuti nel <xref:System.Speech.Recognition.GrammarBuilder>oggetti specificati dal `builders` parametro e già associata a un altro <xref:System.Speech.Recognition.SemanticResultKey>non hanno alcun effetto sull&quot;oggetto corrente <xref:System.Speech.Recognition.SemanticResultKey>istanza.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged by a <xref:System.Speech.Recognition.SpeechRecognizer> whose key value is \"Password\". The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag, obtains the audio input of the password, and verifies the password.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized +=   \n    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n    {  \n      SemanticValue semantics = eventArgs.Result.Semantics;  \n      RecognitionResult result=eventArgs.Result;  \n  \n      if (!semantics.ContainsKey(\"Password\"))   \n      {  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n      }  \n      else   \n      {  \n        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \n                  result.Words[3],  \n                  result.Words[result.Words.Count - 1]);  \n                  MemoryStream pwdMemoryStream = new MemoryStream();  \n                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n        if (!IsValidPwd(pwdMemoryStream))   \n        {  \n          string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    \n          pwdAudio.WriteToWaveStream(waveStream);  \n          waveStream.Flush();  \n          waveStream.Close();  \n          SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);      \n        }  \n      }  \n    };  \n  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, System.Speech.Recognition.GrammarBuilder[] builders);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "Il tag da utilizzare come chiave semantica per accedere il <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> istanza associata di <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> oggetti specificati dal `builders` argomento."
    - id: builders
      type: System.Speech.Recognition.GrammarBuilder[]
      description: "Una matrice di componenti di grammatica che verrà associato un <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> oggetto accessibile con il tag definito in `semanticResultKey`."
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  id: '#ctor(System.String,System.String[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Assegna una chiave semantica a una o più <xref:System.String>istanze utilizzate per creare una grammatica di riconoscimento vocale.</xref:System.String>"
  remarks: "Quando si esegue un&quot;operazione di riconoscimento, di <xref:System.String>gli oggetti utilizzati nel `phrases` parametro vengono trattati come sequenziale.</xref:System.String> Ad esempio, se le operazioni seguenti <xref:System.Speech.Recognition.SemanticResultValue>viene utilizzato per costruire un <xref:System.Speech.Recognition.Grammar>, come input per il motore di riconoscimento deve contenere le parole &quot;volpe marrone rapida&quot; nella sequenza venga riconosciuta.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(&quot;stringTest&quot;,                                    new string[] {                                                  &quot;the&quot;,                                                  &quot;quick&quot;,                                                  &quot;brown&quot;,                                                  &quot;fox&quot;});   ```Il `semanticResultKey` argomento determina la chiave utilizzata per l&quot;accesso di <xref:System.Speech.Recognition.SemanticValue>che potrebbe essere restituito.</xref:System.Speech.Recognition.SemanticValue>       Se si crea un <xref:System.Speech.Recognition.Grammar>utilizzando un <xref:System.Speech.Recognition.GrammarBuilder>oggetto che contiene una chiave semantica con una matrice di oggetti stringa, il <xref:System.Speech.Recognition.SemanticValue.Value%2A>del <xref:System.Speech.Recognition.SemanticValue>prodotta da un&quot;operazione di riconoscimento sarà la stringa utilizzata nel riconoscimento.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar> Nell&quot;esempio precedente, ciò significa che <xref:System.Speech.Recognition.SemanticValue.Value%2A>sarebbe &quot;marrone o volpe&quot;.</xref:System.Speech.Recognition.SemanticValue.Value%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> from a <xref:System.Speech.Recognition.GrammarBuilder> object that uses a <xref:System.Speech.Recognition.SemanticResultKey>, which is defined by an array of <xref:System.String> objects.  \n  \n A recognition engine using the <xref:System.Speech.Recognition.Grammar> created will recognize the phrase \"color red green blue zero\". The semantics of the <xref:System.Speech.Recognition.RecognizedPhrase> returned by recognition will contain a <xref:System.Speech.Recognition.SemanticValue> with a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of \"red green blue\". You can access the <xref:System.Speech.Recognition.SemanticValue> using the \"code\" tag.  \n  \n Because of the `SemanticResultValue(\"zero\", 5)` appended to the <xref:System.Speech.Recognition.GrammarBuilder>, the root <xref:System.Speech.Recognition.SemanticValue> object in the <xref:System.Speech.Recognition.RecognizedPhrase> will have a value of 5.  \n  \n```c#  \nprivate void keyTest()   \n{  \n  // Say \"color red green blue zero\"  \n  GrammarBuilder gb = new GrammarBuilder(\"color\") +  \n                        new SemanticResultKey(\"code\",   \n                          (new string[] {\"red\", \"green\", \"blue\"})) +  \n                        new SemanticResultValue(\"zero\", 5);  \n  Grammar g = new Grammar(gb);  \n  g.Name = \"keyTest\";  \n  _recognizer.LoadGrammar(g);  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, string[] phrases);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "Il tag di accesso utilizzato il <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> istanza associata di <xref:System.String>oggetti specificati dal `phrases` argomento.</xref:System.String>"
    - id: phrases
      type: System.String[]
      description: "Uno o più <xref:System.String>oggetti, il cui testo concatenato sarà associato un <xref href=&quot;System.Speech.Recognition.SemanticValue&quot;> </xref> oggetto accessibile con il tag definito in `semanticResultKey`.</xref:System.String>"
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Restituisce un&quot;istanza di <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> costruita dall&quot;oggetto corrente <xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;> </xref> istanza."
  remarks: "L&quot;utilizzo di <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>equivale all&quot;utilizzo di <xref:System.Speech.Recognition.GrammarBuilder>costruttore che accetta <xref:System.Speech.Recognition.SemanticResultKey>come argomento (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> object that supports commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances. The <xref:System.Speech.Recognition.GrammarBuilder> instances are obtained through the ToGrammarBuilder method on the <xref:System.Speech.Recognition.SemanticResultValue> objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling ToGrammarBuilder on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in `colorChoice`.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RGB.  \n  // Choices constructors do not take SemanticResultValue parameters, so cast   \n  // the SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  \n    colorChoice.Add(colorValue.ToGrammarBuilder());      \n  }  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with introductory phrase and the color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the Grammar object, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  \n  grammar.Name = \"Make Background /Configure background as\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Restituisce un&quot;istanza di <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> costruita dall&quot;oggetto corrente <xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;> </xref> istanza."
  overload: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.GrammarBuilder[]
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder[]
  spec.csharp:
  - uid: System.Speech.Recognition.GrammarBuilder
    name: GrammarBuilder
    nameWithType: GrammarBuilder
    fullName: GrammarBuilder[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultKey.#ctor*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey
  nameWithType: SemanticResultKey.SemanticResultKey
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultKey.ToGrammarBuilder
