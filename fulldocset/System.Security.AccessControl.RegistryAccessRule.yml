### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.RegistryAccessRule
  id: RegistryAccessRule
  children:
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.RegistryRights
  langs:
  - csharp
  name: RegistryAccessRule
  nameWithType: RegistryAccessRule
  fullName: System.Security.AccessControl.RegistryAccessRule
  type: Class
  summary: "Rappresenta un set di diritti di accesso concesse o negate per un utente o gruppo. Questa classe non può essere ereditata."
  remarks: "La classe RegistryAccessRule è parte di un set di classi .NET Framework fornisce per la gestione del controllo di accesso di Windows alle chiavi del Registro di sistema. Per una panoramica di queste classi e la loro relazione con le strutture di controllo di accesso Windows, vedere <xref:System.Security.AccessControl.RegistrySecurity>.</xref:System.Security.AccessControl.RegistrySecurity>      > [!NOTE] > Del controllo di accesso di Windows può essere applicato solo alle chiavi del Registro di sistema. Non può essere applicato alle coppie chiave/valore singoli archiviate in una chiave.       Per ottenere un elenco di regole attualmente applicate a una chiave del Registro di sistema, utilizzare il <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>metodo per ottenere un <xref:System.Security.AccessControl.RegistrySecurity>dell&quot;oggetto e quindi utilizzare il relativo <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>per ottenere una raccolta di oggetti RegistryAccessRule.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.RegistrySecurity> </xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>       Oggetti RegistryAccessRule non eseguano il mapping uno a uno con voci di controllo di accesso nell&quot;elenco di accesso di controllo discrezionale (DACL) sottostante. Quando si ottiene il set di tutte le regole di accesso per una chiave del Registro di sistema, il set contiene il numero minimo di regole necessarie per esprimere tutte le voci di controllo di accesso.      > [!NOTE] > Le voci di controllo di accesso è stata modificata è applicare e rimuovere le regole. Le informazioni nelle regole vengono unite, se possibile, per mantenere il più piccolo numero di voci di controllo di accesso. Pertanto, quando si legge l&quot;elenco corrente delle regole, potrebbe non apparire esattamente come l&quot;elenco di tutte le regole di cui che è stato aggiunto.       Utilizzare oggetti RegistryAccessRule per specificare i diritti di accesso per consentire o negare a un utente o gruppo. Un RegistryAccessRule oggetto rappresenta sempre l&quot;accesso consentito o negato l&quot;accesso, non entrambi.       Per applicare una regola a una chiave del Registro di sistema, utilizzare il <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>metodo per ottenere il <xref:System.Security.AccessControl.RegistrySecurity>oggetto.</xref:System.Security.AccessControl.RegistrySecurity> </xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> Modificare il <xref:System.Security.AccessControl.RegistrySecurity>oggetto mediante i metodi per aggiungere la regola e quindi usare il <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>metodo per ricollegare l&quot;oggetto di sicurezza.</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.RegistrySecurity>      > [!IMPORTANT] > Le modifiche apportate a un <xref:System.Security.AccessControl.RegistrySecurity>oggetto non influiscono sui livelli di accesso della chiave del Registro di sistema finché non si chiama il <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>metodo a cui assegnare l&quot;oggetto di sicurezza modificato alla chiave del Registro di sistema.</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.RegistrySecurity>       RegistryAccessRule oggetti non sono modificabili. Per modificare la protezione per una chiave del Registro di sistema utilizzando i metodi della <xref:System.Security.AccessControl.RegistrySecurity>classe per aggiungere o rimuovere regole; in tal caso, le voci di controllo di accesso vengono modificate.</xref:System.Security.AccessControl.RegistrySecurity>"
  example:
  - "The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \n  \n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the security for each subkey. Finally, the program deletes the test keys.  \n  \n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/t-system.security.access_11_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/t-system.security.access_11_1.cs)]"
  syntax:
    content: 'public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> (classe), specificando l&quot;utente o gruppo viene applicata la regola, i diritti di accesso e se i diritti di accesso consentiti o negati."
  remarks: "Questo costruttore consente di specificare l&quot;ereditarietà e propagazione predefinito. Vale a dire <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>e <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.</xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName> </xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>"
  syntax:
    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "L&quot;utente o il gruppo che viene applicata la regola. Deve essere di tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> o un tipo, ad esempio <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> che può essere convertito nel tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> valori che indicano i diritti concessi o negati."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Uno del <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valori che indica se i diritti sono concesse o negati."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Specifica un valore non valido.       - oppure - <code>type</code> specifica un valore non valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - <code>eventRights</code> è zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>non è di tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> né di un tipo, ad esempio <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> che può essere convertito nel tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(String,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> (classe), che specifica il nome dell&quot;utente o del gruppo viene applicata la regola, i diritti di accesso e se i diritti di accesso consentiti o negati."
  remarks: "Questo costruttore consente di specificare l&quot;ereditarietà e propagazione predefinito. Vale a dire <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>e <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.</xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName> </xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>       Questo costruttore è equivalente alla creazione di un <xref:System.Security.Principal.NTAccount>oggetto, passando `identity` per il <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>costruttore e passando l&quot;oggetto appena creato <xref:System.Security.Principal.NTAccount>dell&quot;oggetto per il <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29>costruttore.</xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.  \n  \n [!code-cs[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/csharp/cf7d2ba9-37b1-4239-a52a-_1.cs)]\n [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/cf7d2ba9-37b1-4239-a52a-_1.vb)]"
  syntax:
    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "Il nome dell&quot;utente o del gruppo viene applicata la regola."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> valori che indicano i diritti concessi o negati."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Uno del <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valori che indica se i diritti sono concesse o negati."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Specifica un valore non valido.       - oppure - <code>type</code> specifica un valore non valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>registryRights</code>è uguale a zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - <code>identity</code> è una stringa di lunghezza zero.       - oppure - <code>identity</code> più di 512 caratteri."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> classe, specificando l&quot;utente o gruppo viene applicata la regola, i diritti di accesso, i flag di ereditarietà, i flag di propagazione e se i diritti di accesso consentiti o negati."
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules."
  syntax:
    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "L&quot;utente o il gruppo che viene applicata la regola. Deve essere di tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> o un tipo, ad esempio <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> che può essere convertito nel tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> valori che specificano i diritti concessi o negati."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref> flag che specificano come i diritti di accesso vengono ereditati da altri oggetti."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;> </xref> flag che specificano la modalità di propagazione dei diritti di accesso ad altri oggetti."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Uno del <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valori che specificano se i diritti sono concesse o negati."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Specifica un valore non valido.       - oppure - <code>type</code> specifica un valore non valido.       - oppure - <code>inheritanceFlags</code> specifica un valore non valido.       - oppure - <code>propagationFlags</code> specifica un valore non valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - <code>registryRights</code> è zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>non è di tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, né di un tipo, ad esempio <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> che può essere convertito nel tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> classe, specificando il nome dell&quot;utente o del gruppo viene applicata la regola, i diritti di accesso, i flag di ereditarietà, i flag di propagazione e se i diritti di accesso consentiti o negati."
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.  \n  \n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> constructor."
  example:
  - "The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, and then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \n  \n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the rules for each subkey. Finally, the program deletes the test keys.  \n  \n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/43217ff3-f8bd-4a0e-bd95-_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/43217ff3-f8bd-4a0e-bd95-_1.cs)]"
  syntax:
    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "Il nome dell&quot;utente o del gruppo viene applicata la regola."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> valori che indicano i diritti concessi o negati."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref> flag che specificano come i diritti di accesso vengono ereditati da altri oggetti."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;> </xref> flag che specificano la modalità di propagazione dei diritti di accesso ad altri oggetti."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Uno del <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valori che specificano se i diritti sono concesse o negati."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Specifica un valore non valido.       - oppure - <code>type</code> specifica un valore non valido.       - oppure - <code>inheritanceFlags</code> specifica un valore non valido.       - oppure - <code>propagationFlags</code> specifica un valore non valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>è uguale a zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - <code>identity</code> è una stringa di lunghezza zero.       - oppure - <code>identity</code> più di 512 caratteri."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  id: RegistryRights
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Ottiene i diritti concessi o negati dalla regola di accesso."
  remarks: "<xref:System.Security.AccessControl.RegistryAccessRule>gli oggetti non sono modificabili.</xref:System.Security.AccessControl.RegistryAccessRule> È possibile creare una nuova regola di accesso che rappresenta un utente diverso, diritti diversi o un altro <xref:System.Security.AccessControl.AccessControlType>, ma non è possibile modificare una regola di accesso esistente.</xref:System.Security.AccessControl.AccessControlType>"
  syntax:
    content: public System.Security.AccessControl.RegistryRights RegistryRights { get; }
    return:
      type: System.Security.AccessControl.RegistryRights
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> valori che indicano i diritti concessi o negati dalla regola di accesso."
  overload: System.Security.AccessControl.RegistryAccessRule.RegistryRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.RegistryRights
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryRights
  fullName: System.Security.AccessControl.RegistryRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(String,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor*
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule
  nameWithType: RegistryAccessRule.RegistryAccessRule
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights*
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
