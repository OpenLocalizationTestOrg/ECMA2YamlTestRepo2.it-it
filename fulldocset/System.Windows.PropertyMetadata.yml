### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  id: PropertyMetadata
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  summary: "Definisce determinati aspetti del comportamento di una proprietà di dipendenza applicata a un tipo specifico, incluse le condizioni che con cui è stata registrata."
  remarks: "I metadati della proprietà possono essere definito e utilizzato durante la registrazione di proprietà di dipendenza quando si chiama il <xref:System.Windows.DependencyProperty.Register%2A>metodo (o varianti per le proprietà associate o le proprietà di dipendenza di sola lettura) o dopo la registrazione del proprietario originale quando si chiama il <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>metodo.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> <xref:System.Windows.DependencyProperty.AddOwner%2A>accetta anche i metadati della proprietà.</xref:System.Windows.DependencyProperty.AddOwner%2A>       Questa classe è una classe base concreta che può essere usata in ognuna di queste chiamate. Tuttavia, è molto comune per specificare i metadati utilizzando una delle classi derivate, ad esempio <xref:System.Windows.FrameworkPropertyMetadata>.</xref:System.Windows.FrameworkPropertyMetadata> Queste classi derivate supportano metadati più dettagliati riportati come valori di proprietà booleano, che sono utili per rilevare e abilitare alcuni comportamenti sistema e il layout di proprietà che vengono implementati solo il [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] livello di framework.       Molte proprietà di questa classe sono lettura e scrittura per il modello a oggetti, ma può essere scritto prima l&quot;istanza viene utilizzato in un&quot;operazione di sistema di proprietà, ad esempio <xref:System.Windows.DependencyProperty.Register%2A>o <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> Ognuna di queste proprietà potrebbero inoltre essere impostate dal costruttore ma vengono esposte in modo che <xref:System.Windows.PropertyMetadata.Merge%2A>impostare tali implementazioni del metodo.</xref:System.Windows.PropertyMetadata.Merge%2A>      <a name=&quot;xamlTextUsage_PropertyMetadata&quot;></a># # Utilizzo di testo XAML questo tipo e i membri di questo tipo, non sono in genere utilizzati [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public class PropertyMetadata
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> classe."
  syntax:
    content: public PropertyMetadata ();
    parameters: []
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> classe con un valore predefinito specificato per la proprietà di dipendenza che verranno applicati i metadati."
  remarks: "Il tipo di valore fornito per `defaultValue` deve corrispondere o essere correlato al tipo specificato nella registrazione originale della proprietà di dipendenza che verranno applicati i metadati. Mancata corrispondenza tra il tipo di valore di metadati predefinito e il tipo della proprietà di dipendenza applicata a può essere difficile eseguire il debug, in quanto la mancata corrispondenza non è rilevabile durante la compilazione (ma genera un&quot;eccezione in fase di esecuzione).       Anche se è il valore predefinito per il costruttore senza parametri, un `defaultValue` di <xref:System.Windows.DependencyProperty.UnsetValue>non può essere specificato.</xref:System.Windows.DependencyProperty.UnsetValue> Il tentativo di eseguire questa operazione verrà generata un&quot;eccezione."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Il valore predefinito per specificare una proprietà di dipendenza, in genere fornito come valore di un tipo specifico."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>Impossibile impostare il valore <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> classe con l&quot;oggetto specificato <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> riferimento all&quot;implementazione."
  remarks: ''
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1paramcallback)]"
  syntax:
    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Riferimento a un&quot;implementazione del gestore che deve essere chiamata dal sistema di proprietà ogni volta che cambia il valore effettivo della proprietà."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> classe con il valore predefinito specificato e <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> riferimento all&quot;implementazione."
  remarks: "Il tipo di valore fornito `defaultValue` deve corrispondere o essere correlato al tipo specificato nella registrazione originale della proprietà di dipendenza che verranno applicati i metadati. Mancata corrispondenza tra il tipo di valore di metadati predefinito e il tipo della proprietà di dipendenza applicata a può essere difficile eseguire il debug, in quanto la mancata corrispondenza non è rilevabile durante la compilazione (ma genera un&quot;eccezione in fase di esecuzione).       Anche se è il valore predefinito per il costruttore senza parametri, un `defaultValue` di <xref:System.Windows.DependencyProperty.UnsetValue>non può essere specificato.</xref:System.Windows.DependencyProperty.UnsetValue> Il tentativo di eseguire questa operazione verrà generata un&quot;eccezione."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor2param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Il valore predefinito della proprietà di dipendenza, in genere fornito come valore di un tipo specifico."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Riferimento a un&quot;implementazione del gestore che deve essere chiamata dal sistema di proprietà ogni volta che cambia il valore effettivo della proprietà."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>Impossibile impostare il valore <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> classe con il valore predefinito specificato e i callback."
  remarks: "Se si desidera specificare un <xref:System.Windows.CoerceValueCallback>ma non un <xref:System.Windows.PropertyChangedCallback>, è possibile passare `null` per il `propertyChangedCallback` parametro.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       Il tipo di valore fornito per `defaultValue` deve corrispondere o essere correlato al tipo specificato nella registrazione originale della proprietà di dipendenza che verranno applicati i metadati. Mancata corrispondenza tra il tipo di valore di metadati predefinito e il tipo della proprietà di dipendenza applicata a può essere difficile eseguire il debug, in quanto la mancata corrispondenza non è rilevabile durante la compilazione (ma genera un&quot;eccezione in fase di esecuzione).       Anche se è il valore predefinito per il costruttore senza parametri, un `defaultValue` di <xref:System.Windows.DependencyProperty.UnsetValue>non può essere specificato.</xref:System.Windows.DependencyProperty.UnsetValue> Il tentativo di eseguire questa operazione verrà generata un&quot;eccezione."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor3param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Il valore predefinito della proprietà di dipendenza, in genere fornito come valore di un tipo specifico."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Riferimento a un&quot;implementazione del gestore che deve essere chiamata dal sistema di proprietà ogni volta che cambia il valore effettivo della proprietà."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Riferimento a un&quot;implementazione del gestore che deve essere chiamato ogni volta che il sistema di proprietà chiama <xref:System.Windows.DependencyObject.CoerceValue*>in base a questa proprietà.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>Impossibile impostare il valore <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ottiene o imposta un riferimento a un <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> implementazione specificata nei metadati."
  remarks: "I callback nei metadati della proprietà non sono in genere membri pubblici nel tipo contenitore, pertanto il valore di questa proprietà non è importante per la maggior parte degli scenari che utilizzano solo i metadati della proprietà di dipendenza un&quot;esistente. È di un motivo per cui che questa proprietà viene esposta in modo che le sottoclassi di metadati di eseguire la logica di unione desiderata se sia i metadati di base che si esegue l&quot;override o l&quot;aggiunta di metadati specificano un <xref:System.Windows.CoerceValueCallback>.</xref:System.Windows.CoerceValueCallback> Tuttavia, la logica di unione predefinita per un CoerceValueCallback è per sostituire quella precedente.       CoerceValueCallback è definito nel modello a oggetti di lettura e scrittura. Si tratta pertanto CoerceValueCallback può essere modificato dopo l&quot;inizializzazione del <xref:System.Windows.PropertyMetadata>oggetto stesso.</xref:System.Windows.PropertyMetadata> Tuttavia, dopo che i metadati vengono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e le proprietà ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare una volta CoerceValueCallback <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }
    return:
      type: System.Windows.CoerceValueCallback
      description: "Oggetto <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> riferimento all&quot;implementazione."
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile impostare una proprietà dei metadati dopo averla applicata a un&quot;operazione di proprietà di dipendenza."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ottiene o imposta il valore predefinito della proprietà di dipendenza."
  remarks: "Valore predefinito è definito nel modello a oggetti di lettura e scrittura. Si tratta pertanto DefaultValue può essere modificato dopo l&quot;inizializzazione del <xref:System.Windows.PropertyMetadata>oggetto stesso.</xref:System.Windows.PropertyMetadata> Tuttavia, dopo che i metadati vengono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e le proprietà ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare una volta DefaultValue <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>       Anche se è il valore predefinito per il costruttore senza parametri, un `defaultValue` di <xref:System.Windows.DependencyProperty.UnsetValue>non possono essere impostate utilizzando DefaultValue o il costruttore.</xref:System.Windows.DependencyProperty.UnsetValue> Il tentativo di eseguire questa operazione verrà generata un&quot;eccezione.      <a name=&quot;xamlTextUsage_PropertyChangedCallback&quot;></a># # XAML testo utilizzo membri di questo tipo non vengono utilizzati in genere [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "Il valore predefinito della proprietà. Il valore predefinito in un <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> istanza creata con il costruttore senza parametri sarà <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; vedere la sezione Osservazioni."
  overload: System.Windows.PropertyMetadata.DefaultValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Impossibile impostare il valore <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref> dopo la creazione; vedere la sezione Osservazioni."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile impostare una proprietà dei metadati dopo averla applicata a un&quot;operazione di proprietà di dipendenza."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ottiene un valore che determina se i metadati applicati a una proprietà in qualche modo, determinando lo stato dell&quot;istanza di metadati non modificabile."
  remarks: "Varie proprietà di <xref:System.Windows.PropertyMetadata>, ad esempio <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, sono definiti nel modello a oggetti di lettura e scrittura.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> </xref:System.Windows.PropertyMetadata> Si tratta di tali proprietà possono essere modificate dopo l&quot;inizializzazione del <xref:System.Windows.PropertyMetadata>oggetto stesso.</xref:System.Windows.PropertyMetadata> Tuttavia, dopo aver applicato i metadati per una proprietà di dipendenza come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e le proprietà ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Al momento di una di queste chiamate, <xref:System.Windows.PropertyMetadata.OnApply%2A>viene chiamato e il valore di questa proprietà è impostato su `true`.</xref:System.Windows.PropertyMetadata.OnApply%2A>"
  example:
  - "The following example  checks IsSealed prior to a set operation of a custom metadata property.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;istanza dei metadati non è modificabile; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.PropertyMetadata.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Unisce i metadati con metadati di base."
  remarks: "Questo metodo viene utilizzato internamente durante l&quot;override di metadati (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> (metodo)).</xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "Metadati di base da unire con i valori di questa istanza."
    - id: dp
      type: System.Windows.DependencyProperty
      description: "La proprietà di dipendenza a cui viene applicato questi metadati."
  overload: System.Windows.PropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Chiamata eseguita quando i metadati applicati a una proprietà, che indica che i metadati sono sealed."
  remarks: "Le sottoclassi devono assicurare che qualsiasi mutabilità della struttura di dati di un <xref:System.Windows.PropertyMetadata>sottoclasse deve essere contrassegnata come non modificabile dopo che viene chiamato OnApply.</xref:System.Windows.PropertyMetadata> Questo evento viene chiamato dopo aver applicato i metadati per un&quot;operazione di sistema di proprietà (registrare, aggiungere proprietario, eseguire l&quot;override dei metadati)."
  syntax:
    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "La proprietà di dipendenza a cui sono stati applicati i metadati."
    - id: targetType
      type: System.Type
      description: "Il tipo associato a questi metadati, se si tratta di metadati specifici del tipo. Se si tratta di metadati predefinito, questo valore è un riferimento null."
  overload: System.Windows.PropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Ottiene o imposta un riferimento a un <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> implementazione specificata nei metadati."
  remarks: "I callback nei metadati della proprietà non sono in genere membri pubblici nel tipo di definizione, pertanto il valore di questa proprietà non è importante per la maggior parte degli scenari che utilizzano solo i metadati della proprietà di dipendenza un&quot;esistente. È di un motivo per cui che questa proprietà viene esposta in modo che le classi di metadati di eseguire la logica di unione desiderata se sia i metadati di base che si esegue l&quot;override o l&quot;aggiunta di metadati specificano un <xref:System.Windows.PropertyChangedCallback>.</xref:System.Windows.PropertyChangedCallback> La logica di unione predefinita è per mantenere tutte le implementazioni di PropertyChangedCallback in una tabella e la chiamata a ognuno di essi, i callback definite tramite la classe più in basso nella gerarchia in esecuzione.       PropertyChangedCallback è definito nel modello a oggetti di lettura e scrittura. Si tratta pertanto PropertyChangedCallback può essere modificato dopo l&quot;inizializzazione del <xref:System.Windows.PropertyMetadata>oggetto stesso.</xref:System.Windows.PropertyMetadata> Tuttavia, dopo che i metadati vengono utilizzati come parte di una chiamata a <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, o <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, il sistema di proprietà eseguirà il sealing dell&quot;istanza di metadati e le proprietà ora sono considerate immutabili.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Il tentativo di impostare una volta PropertyChangedCallback <xref:System.Windows.PropertyMetadata.IsSealed%2A>è `true` i metadati di questa istanza verrà generata un&quot;eccezione.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }
    return:
      type: System.Windows.PropertyChangedCallback
      description: "Oggetto <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> riferimento all&quot;implementazione."
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Impossibile impostare una proprietà dei metadati dopo averla applicata a un&quot;operazione di proprietà di dipendenza."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.PropertyMetadata.#ctor
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Merge*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: PropertyMetadata.Merge
- uid: System.Windows.PropertyMetadata.OnApply*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
