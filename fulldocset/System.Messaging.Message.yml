### YamlMime:ManagedReference
items:
- uid: System.Messaging.Message
  id: Message
  children:
  - System.Messaging.Message.#ctor
  - System.Messaging.Message.#ctor(System.Object)
  - System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  - System.Messaging.Message.AcknowledgeType
  - System.Messaging.Message.Acknowledgment
  - System.Messaging.Message.AdministrationQueue
  - System.Messaging.Message.AppSpecific
  - System.Messaging.Message.ArrivedTime
  - System.Messaging.Message.AttachSenderId
  - System.Messaging.Message.Authenticated
  - System.Messaging.Message.AuthenticationProviderName
  - System.Messaging.Message.AuthenticationProviderType
  - System.Messaging.Message.Body
  - System.Messaging.Message.BodyStream
  - System.Messaging.Message.BodyType
  - System.Messaging.Message.ConnectorType
  - System.Messaging.Message.CorrelationId
  - System.Messaging.Message.DestinationQueue
  - System.Messaging.Message.DestinationSymmetricKey
  - System.Messaging.Message.DigitalSignature
  - System.Messaging.Message.EncryptionAlgorithm
  - System.Messaging.Message.Extension
  - System.Messaging.Message.Formatter
  - System.Messaging.Message.HashAlgorithm
  - System.Messaging.Message.Id
  - System.Messaging.Message.InfiniteTimeout
  - System.Messaging.Message.IsFirstInTransaction
  - System.Messaging.Message.IsLastInTransaction
  - System.Messaging.Message.Label
  - System.Messaging.Message.LookupId
  - System.Messaging.Message.MessageType
  - System.Messaging.Message.Priority
  - System.Messaging.Message.Recoverable
  - System.Messaging.Message.ResponseQueue
  - System.Messaging.Message.SecurityContext
  - System.Messaging.Message.SenderCertificate
  - System.Messaging.Message.SenderId
  - System.Messaging.Message.SenderVersion
  - System.Messaging.Message.SentTime
  - System.Messaging.Message.SourceMachine
  - System.Messaging.Message.TimeToBeReceived
  - System.Messaging.Message.TimeToReachQueue
  - System.Messaging.Message.TransactionId
  - System.Messaging.Message.TransactionStatusQueue
  - System.Messaging.Message.UseAuthentication
  - System.Messaging.Message.UseDeadLetterQueue
  - System.Messaging.Message.UseEncryption
  - System.Messaging.Message.UseJournalQueue
  - System.Messaging.Message.UseTracing
  langs:
  - csharp
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
  type: Class
  summary: "Fornisce l&quot;accesso alle proprietà necessarie per definire un messaggio di Accodamento messaggi."
  remarks: "Utilizzare la classe messaggio di leggere o ricevere messaggi da una coda o di un controllo accurato le proprietà del messaggio quando si invia un messaggio a una coda.       <xref:System.Messaging.MessageQueue>utilizza la classe di messaggio quando legge o riceve messaggi dalle code, perché sia il <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName>e <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>metodi creano una nuova istanza della classe del messaggio e impostare le proprietà dell&quot;istanza.</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName></xref:System.Messaging.MessageQueue> Proprietà di sola lettura della classe di messaggio si applicano al recupero dei messaggi da una coda, mentre le proprietà di lettura/scrittura si applicano all&quot;invio e recupero dei messaggi. Quando <xref:System.Messaging.MessageQueue>legge o riceve un messaggio da una coda, il relativo <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>proprietà determina quale proprietà del messaggio vengono recuperati.</xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> </xref:System.Messaging.MessageQueue>       Il <xref:System.Messaging.MessageQueue>della classe <xref:System.Messaging.MessageQueue.Send%2A>metodo consente di specificare un tipo di oggetto per un messaggio inviato alla coda.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.MessageQueue> È possibile utilizzare il <xref:System.Messaging.MessageQueue>dell&quot;istanza <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>proprietà per specificare le impostazioni per i messaggi generici inviati alla coda.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> </xref:System.Messaging.MessageQueue> I tipi di impostazioni includono formattatore, etichetta, la crittografia e autenticazione. È inoltre possibile specificare valori per l&quot;oggetto appropriato <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>membri quando si coordina l&quot;applicazione di messaggistica per rispondere a messaggi di riconoscimento e di report.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> Utilizzando un&quot;istanza di messaggio per inviare un messaggio alla coda offre la flessibilità necessaria per accedere e modificare molte di queste proprietà, per un singolo messaggio o in una base di messaggio per ogni messaggio. Le proprietà del messaggio hanno la precedenza su <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>       Messaggio vengono memorizzati nel <xref:System.Messaging.Message.Body%2A>proprietà e in misura minore, il <xref:System.Messaging.Message.AppSpecific%2A>e <xref:System.Messaging.Message.Extension%2A>proprietà.</xref:System.Messaging.Message.Extension%2A> </xref:System.Messaging.Message.AppSpecific%2A> </xref:System.Messaging.Message.Body%2A> Quando dati del messaggio sono crittografati, serializzati o deserializzati, solo il contenuto del <xref:System.Messaging.Message.Body%2A>proprietà subiscono.</xref:System.Messaging.Message.Body%2A>       Il contenuto del <xref:System.Messaging.Message.Body%2A>proprietà vengono serializzati quando viene inviato il messaggio, mediante il <xref:System.Messaging.Message.Formatter%2A>proprietà specificato.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A> Il contenuto serializzato si trova nel <xref:System.Messaging.Message.BodyStream%2A>proprietà.</xref:System.Messaging.Message.BodyStream%2A> È inoltre possibile impostare la <xref:System.Messaging.Message.BodyStream%2A>proprietà direttamente, ad esempio, per inviare un file come il contenuto dei dati di un messaggio.</xref:System.Messaging.Message.BodyStream%2A> È possibile modificare <xref:System.Messaging.Message.Body%2A>o <xref:System.Messaging.Message.Formatter%2A>proprietà in qualsiasi momento prima di inviare il messaggio e i dati saranno serializzate in modo appropriato quando si chiama <xref:System.Messaging.MessageQueue.Send%2A>.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A>       Le proprietà definite per il <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName>proprietà si applica solo ai messaggi che non sono di tipo Message.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName> Se si specifica il <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>proprietà per un <xref:System.Messaging.MessageQueue>, le proprietà denominate in modo identico in un&quot;istanza del messaggio inviato alla coda determinano le proprietà predefinite da ignorare.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>       Per un elenco di valori di proprietà iniziali per un&quot;istanza di messaggio, vedere il <xref:System.Messaging.Message.%23ctor%2A>costruttore.</xref:System.Messaging.Message.%23ctor%2A>"
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/t-system.messaging.message_1.cpp)]\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/t-system.messaging.message_1.cs)]\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/t-system.messaging.message_1.vb)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/t-system.messaging.message_2.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/t-system.messaging.message_2.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/t-system.messaging.message_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public class Message : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.Message.#ctor
  id: '#ctor'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message()
  nameWithType: Message.Message()
  fullName: System.Messaging.Message.Message()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Messaging.Message&quot;> </xref> classe con un corpo vuoto."
  remarks: "Utilizzare questo overload per creare una nuova istanza di <xref:System.Messaging.Message>classe che ha un corpo vuoto.</xref:System.Messaging.Message>       Specificare il <xref:System.Messaging.Message.Body%2A>proprietà o <xref:System.Messaging.Message.BodyStream%2A>prima di inviare il <xref:System.Messaging.Message>oggetto.</xref:System.Messaging.Message> </xref:System.Messaging.Message.BodyStream%2A> </xref:System.Messaging.Message.Body%2A> Il <xref:System.Messaging.Message.Body%2A>proprietà può essere qualsiasi oggetto che può essere serializzata, ad esempio una stringa di testo, un oggetto della struttura, un&quot;istanza della classe o un oggetto incorporato.</xref:System.Messaging.Message.Body%2A>       A meno che non si scrive il contenuto del messaggio direttamente il <xref:System.Messaging.Message.BodyStream%2A>impostata, il <xref:System.Messaging.Message.Formatter%2A>proprietà prima di inviare il messaggio.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.BodyStream%2A> Il corpo viene serializzato utilizzando il <xref:System.Messaging.Message.Formatter%2A>il valore della proprietà al momento il <xref:System.Messaging.MessageQueue.Send%2A>metodo viene chiamato sul <xref:System.Messaging.MessageQueue>istanza.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A>       Il <xref:System.Messaging.XmlMessageFormatter>ad accoppiamento ridotto, pertanto non è necessario avere lo stesso oggetto di tipo per il mittente e destinatario, quando si utilizza questo formato.</xref:System.Messaging.XmlMessageFormatter> Il <xref:System.Messaging.ActiveXMessageFormatter>e <xref:System.Messaging.BinaryMessageFormatter>serializzare i dati in una rappresentazione binaria.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> Il <xref:System.Messaging.ActiveXMessageFormatter>viene utilizzato durante l&quot;invio o la ricezione di componenti COM.</xref:System.Messaging.ActiveXMessageFormatter>       La tabella seguente illustra i valori di proprietà iniziali per un&quot;istanza di <xref:System.Messaging.Message>.</xref:System.Messaging.Message>      | Proprietà | Il valore iniziale |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Microsoft Enhanced Cryptographic Provider versione 1.0 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| `null`|   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| Una stringa vuota (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| Una matrice di lunghezza zero byte |   | <xref:System.Messaging.Message.DigitalSignature%2A>| Una matrice di byte di lunghezza zero |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| Una matrice di lunghezza zero byte |   | <xref:System.Messaging.Message.Formatter%2A>| `XmlMessageFormatter`|   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| Una stringa vuota (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| Una matrice di lunghezza zero byte |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/m-system.messaging.messa_16_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_16_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/m-system.messaging.messa_16_1.cs)]"
  syntax:
    content: public Message ();
    parameters: []
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: System.Messaging.Message.Message(Object)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Messaging.Message&quot;> </xref> classe mediante il <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> per serializzare l&quot;oggetto specificato nel corpo del messaggio."
  remarks: "Utilizzare questo overload per creare una nuova istanza del <xref:System.Messaging.Message>classe che contiene il <xref:System.Messaging.Message.Body%2A>specificato per il `body` parametro.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message> Il `body` parametro può essere qualsiasi oggetto che può essere serializzato, ad esempio una stringa di testo, un oggetto della struttura, un&quot;istanza della classe o un oggetto incorporato. Il corpo viene serializzato utilizzando il <xref:System.Messaging.XmlMessageFormatter>a meno che non si modifica il <xref:System.Messaging.Message.Formatter%2A>proprietà prima di <xref:System.Messaging.Message>viene inviato.</xref:System.Messaging.Message> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.XmlMessageFormatter> Se si modifica il <xref:System.Messaging.Message.Body%2A>o <xref:System.Messaging.Message.Formatter%2A>proprietà in qualsiasi momento prima di chiamare <xref:System.Messaging.MessageQueue.Send%2A>, verrà serializzato il messaggio in base al nuovo valore della proprietà.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A>       Il <xref:System.Messaging.XmlMessageFormatter>ad accoppiamento ridotto, pertanto non è necessario avere lo stesso oggetto di tipo per il mittente e destinatario, quando si utilizza questo formato.</xref:System.Messaging.XmlMessageFormatter> Il <xref:System.Messaging.ActiveXMessageFormatter>e <xref:System.Messaging.BinaryMessageFormatter>serializzare i dati in una rappresentazione binaria.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> Il <xref:System.Messaging.ActiveXMessageFormatter>viene utilizzato durante l&quot;invio o la ricezione di componenti COM.</xref:System.Messaging.ActiveXMessageFormatter>       La tabella seguente illustra i valori di proprietà iniziali per un&quot;istanza di <xref:System.Messaging.Message>.</xref:System.Messaging.Message>      | Proprietà | Il valore iniziale |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Microsoft Enhanced Cryptographic Provider versione 1.0 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| Il `body` parametro. |   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| Una stringa vuota (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| Una matrice di byte di lunghezza zero |   | <xref:System.Messaging.Message.DigitalSignature%2A>| Una matrice di lunghezza zero byte |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| Una matrice di lunghezza zero byte |   | <xref:System.Messaging.Message.Formatter%2A>| `XmlMessageFormatter`|   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| Una stringa vuota (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| Una matrice di lunghezza zero byte |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example creates a new queue, sends a message that contains an order to it, and then retrieves it.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.messa_33_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.messa_33_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_33_1.vb)]"
  syntax:
    content: public Message (object body);
    parameters:
    - id: body
      type: System.Object
      description: "Oggetto da serializzare nel corpo del messaggio."
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  id: '#ctor(System.Object,System.Messaging.IMessageFormatter)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object,IMessageFormatter)
  nameWithType: Message.Message(Object,IMessageFormatter)
  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Messaging.Message&quot;> </xref> classe mediante il formattatore specificato per serializzare l&quot;oggetto specificato nel corpo del messaggio."
  remarks: "Utilizzare questo overload per creare una nuova istanza della <xref:System.Messaging.Message>classe che contiene il <xref:System.Messaging.Message.Body%2A>specificato dal `body` parametro e che utilizza un formattatore valido per serializzare il corpo.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message> Il `body` parametro è un oggetto che può essere serializzato, ad esempio una stringa di testo, un oggetto della struttura, un&quot;istanza della classe o un oggetto incorporato. Se si modifica il <xref:System.Messaging.Message.Body%2A>o <xref:System.Messaging.Message.Formatter%2A>proprietà in qualsiasi momento prima di chiamare <xref:System.Messaging.MessageQueue.Send%2A>, verrà serializzato il messaggio in base al nuovo valore della proprietà.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A>       Il <xref:System.Messaging.XmlMessageFormatter>ad accoppiamento ridotto, pertanto non è necessario avere lo stesso oggetto di tipo per il mittente e destinatario, quando si utilizza questo formato.</xref:System.Messaging.XmlMessageFormatter> Il <xref:System.Messaging.ActiveXMessageFormatter>e <xref:System.Messaging.BinaryMessageFormatter>serializzare i dati in una rappresentazione binaria.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> Il <xref:System.Messaging.ActiveXMessageFormatter>viene utilizzato durante l&quot;invio o la ricezione di componenti COM.</xref:System.Messaging.ActiveXMessageFormatter>       La tabella seguente illustra i valori di proprietà iniziali per un&quot;istanza di <xref:System.Messaging.Message>.</xref:System.Messaging.Message>      | Proprietà | Il valore iniziale |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Microsoft Enhanced Cryptographic Provider versione 1.0 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| Il `body` parametro. |   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| Una stringa vuota (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| Una matrice di lunghezza zero byte |   | <xref:System.Messaging.Message.DigitalSignature%2A>| Una matrice di lunghezza zero byte |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| Una matrice di byte di lunghezza zero |   | <xref:System.Messaging.Message.Formatter%2A>| Il `formatter` parametro. |   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| Una stringa vuota (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| Una matrice di lunghezza zero byte |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - >-
    [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/6734a59e-0a86-49d1-96b9-_1.cpp)]
     [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/6734a59e-0a86-49d1-96b9-_1.cs)]
     [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/6734a59e-0a86-49d1-96b9-_1.vb)]
  syntax:
    content: public Message (object body, System.Messaging.IMessageFormatter formatter);
    parameters:
    - id: body
      type: System.Object
      description: "Oggetto da serializzare nel corpo del messaggio."
    - id: formatter
      type: System.Messaging.IMessageFormatter
      description: "Oggetto <xref href=&quot;System.Messaging.IMessageFormatter&quot;> </xref> che specifica il formattatore da utilizzare per serializzare il corpo del messaggio."
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.AcknowledgeType
  id: AcknowledgeType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: System.Messaging.Message.AcknowledgeType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta il tipo di messaggio di riconoscimento da restituire all&quot;applicazione mittente."
  remarks: "La proprietà AcknowledgeType specifica il tipo di messaggi di riconoscimento richiesto dall&quot;applicazione mittente. Impostare la proprietà AcknowledgeType prima di inviare il messaggio per richiedere la notifica di alcuni eventi, ad esempio, un messaggio ha raggiunto la coda di destinazione, il recupero di un messaggio o un timeout che impedisce che un messaggio di raggiungimento o il recupero dalla coda di destinazione.       Accodamento messaggi restituisce notifica inviando messaggi di riconoscimento per il <xref:System.Messaging.Message.AdministrationQueue%2A>proprietà specificata dal messaggio originale.</xref:System.Messaging.Message.AdministrationQueue%2A> Un messaggio di riconoscimento <xref:System.Messaging.Message.Acknowledgment%2A>proprietà indica il tipo di riconoscimento che rappresenta.</xref:System.Messaging.Message.Acknowledgment%2A> Ad esempio, se è stato inviato un messaggio di riconoscimento perché un messaggio non ha raggiunto la destinazione prima di <xref:System.Messaging.Message.TimeToReachQueue%2A>intervallo scaduto, il <xref:System.Messaging.Message.Acknowledgment%2A>può contenere il valore della proprietà del messaggio di riconoscimento `ReachQueueTimeout`.</xref:System.Messaging.Message.Acknowledgment%2A> </xref:System.Messaging.Message.TimeToReachQueue%2A>"
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_11_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_11_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_11_1.vb)]"
  syntax:
    content: public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }
    return:
      type: System.Messaging.AcknowledgeTypes
      description: "Uno del <xref href=&quot;System.Messaging.AcknowledgeTypes&quot;> </xref> valori che rappresentano entrambi i tipi di messaggi di riconoscimento che il sistema invia alla coda di amministrazione e le condizioni in cui i riconoscimenti vengono restituiti all&quot;applicazione mittente. Il valore predefinito è <xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AcknowledgeType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio viene filtrato per ignorare la proprietà AcknowledgeType."
  platform:
  - net462
- uid: System.Messaging.Message.Acknowledgment
  id: Acknowledgment
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: System.Messaging.Message.Acknowledgment
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene la classificazione del riconoscimento rappresentato dal messaggio."
  remarks: "Quando si riceve un messaggio da una coda di amministrazione, leggere la proprietà di riconoscimento per verificare lo stato del messaggio originale.       Quando un messaggio viene inviato alla coda di destinazione, Accodamento messaggi può essere richiesta per inviare un messaggio di riconoscimento. Tale messaggio può indicare, ad esempio, se il messaggio è arrivato ed è stato recuperato all&quot;interno di timeout specificato, oppure può indicare la causa dell&quot;errore nel caso di mancato recapito. La coda di destinazione restituisce messaggi di riconoscimento e li invia alla coda di amministrazione specificata del messaggio originale <xref:System.Messaging.Message.AdministrationQueue%2A>proprietà.</xref:System.Messaging.Message.AdministrationQueue%2A> Il <xref:System.Messaging.Message.Id%2A>proprietà di un messaggio di riconoscimento identifica il messaggio di riconoscimento, non l&quot;originale.</xref:System.Messaging.Message.Id%2A> È possibile trovare l&quot;identificatore del messaggio originale nel riconoscimento <xref:System.Messaging.Message>dell&quot;istanza <xref:System.Messaging.Message.CorrelationId%2A>proprietà.</xref:System.Messaging.Message.CorrelationId%2A> </xref:System.Messaging.Message>       Se questo <xref:System.Messaging.Message>istanza rappresenta un messaggio di riconoscimento, la proprietà di riconoscimento specifica il tipo di riconoscimento.</xref:System.Messaging.Message> In caso contrario, la proprietà di riconoscimento contiene il valore `Normal`.       Utilizzare la <xref:System.Messaging.Message.AcknowledgeType%2A>proprietà del messaggio originale per specificare le condizioni in cui verranno restituiti riconoscimenti.</xref:System.Messaging.Message.AcknowledgeType%2A>"
  syntax:
    content: public System.Messaging.Acknowledgment Acknowledgment { get; }
    return:
      type: System.Messaging.Acknowledgment
      description: "Uno del <xref href=&quot;System.Messaging.Acknowledgment&quot;> </xref> valori di enumerazione."
  overload: System.Messaging.Message.Acknowledgment*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - se la coda di messaggi è filtrata per ignorare la <xref:System.Messaging.MessagePropertyFilter.Acknowledgment*>proprietà.</xref:System.Messaging.MessagePropertyFilter.Acknowledgment*>"
  platform:
  - net462
- uid: System.Messaging.Message.AdministrationQueue
  id: AdministrationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: System.Messaging.Message.AdministrationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta la coda che riceve i messaggi di riconoscimento che Accodamento messaggi genera l&quot;errore."
  remarks: "La coda specificata nella proprietà AdministrationQueue può essere qualsiasi coda non transazionale. I messaggi di riconoscimento inviati alla coda di amministrazione possono indicare se il messaggio originale ha raggiunto la coda di destinazione e se è stato rimosso dalla coda.       Quando il <xref:System.Messaging.Message.AcknowledgeType%2A>proprietà ha un valore diverso da `None`, l&quot;applicazione di invio è necessario specificare la coda da utilizzare come coda di amministrazione.</xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_47_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_47_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_47_1.vb)]"
  syntax:
    content: public System.Messaging.MessageQueue AdministrationQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "Il <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> che specifica la coda di amministrazione utilizzata per i messaggi di riconoscimento generati dal sistema. Il valore predefinito è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AdministrationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà AdministrationQueue."
  platform:
  - net462
- uid: System.Messaging.Message.AppSpecific
  id: AppSpecific
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: System.Messaging.Message.AppSpecific
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta informazioni aggiuntive specifiche dell&quot;applicazione."
  remarks: "La proprietà AppSpecific contiene informazioni specifiche dell&quot;applicazione che è possibile utilizzare per organizzare diversi tipi di messaggi. Ad esempio, è possibile utilizzare indici specifici dell&quot;applicazione. È responsabilità dell&quot;applicazione per interpretare le informazioni sulle proprietà AppSpecific.       Quando possibile, è necessario includere i dati del messaggio nel corpo del messaggio anziché la proprietà AppSpecific.       Quando si utilizzano code esterne, utilizzare il <xref:System.Messaging.Message.Extension%2A>proprietà per specificare le proprietà di messaggio che non esistono in Accodamento messaggi.</xref:System.Messaging.Message.Extension%2A> Come con la proprietà AppSpecific, è responsabilità dell&quot;applicazione per comprendere il contenuto del <xref:System.Messaging.Message.Extension%2A>proprietà.</xref:System.Messaging.Message.Extension%2A>"
  syntax:
    content: public int AppSpecific { get; set; }
    return:
      type: System.Int32
      description: "Informazioni specifiche dell&quot;applicazione. Il valore predefinito è zero."
  overload: System.Messaging.Message.AppSpecific*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà AppSpecific."
  platform:
  - net462
- uid: System.Messaging.Message.ArrivedTime
  id: ArrivedTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: System.Messaging.Message.ArrivedTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene l&quot;ora di arrivo del messaggio nella coda di destinazione."
  remarks: "Il messaggio <xref:System.Messaging.Message.TimeToBeReceived%2A>proprietà indica la velocità deve ricevere il messaggio dalla coda di destinazione.</xref:System.Messaging.Message.TimeToBeReceived%2A> Il <xref:System.Messaging.Message.TimeToBeReceived%2A>proprietà timer viene avviato quando viene inviato il messaggio, non quando il messaggio arriva nella coda.</xref:System.Messaging.Message.TimeToBeReceived%2A>"
  example:
  - "The following code example displays the value of a message's ArrivedTime property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public DateTime ArrivedTime { get; }
    return:
      type: System.DateTime
      description: "Oggetto <xref:System.DateTime>che rappresenta l&quot;ora di arrivo del messaggio nella coda di destinazione.</xref:System.DateTime> Il tempo è regolato da GMT all&quot;ora locale del computer in cui risiede la coda di destinazione."
  overload: System.Messaging.Message.ArrivedTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà ora di arrivo."
  platform:
  - net462
- uid: System.Messaging.Message.AttachSenderId
  id: AttachSenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: System.Messaging.Message.AttachSenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta un valore che indica se l&quot;ID mittente deve essere associata al messaggio."
  remarks: "La <xref:System.Messaging.Message.SenderId%2A>proprietà è una matrice di byte che rappresenta l&quot;identificatore del mittente.</xref:System.Messaging.Message.SenderId%2A> L&quot;ID del mittente è impostata da Accodamento messaggi e viene utilizzato dal gestore code di destinazione per verificare se il mittente dispone dei diritti di accesso a una coda.       L&quot;assenza dell&quot;ID mittente un&quot;indicazione dall&quot;applicazione mittente che Accodamento messaggi deve convalidare il mittente del messaggio non verificare l&quot;accesso del mittente diritti alla coda di ricezione. Il <xref:System.Messaging.Message.SenderId%2A>sia attendibile solo se il messaggio è stato autenticato quando ha raggiunto la coda di destinazione.</xref:System.Messaging.Message.SenderId%2A> Il messaggio viene rifiutato quando raggiunge la coda di destinazione se la coda accetta solo messaggi autenticati e il <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>o <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>proprietà `false`.</xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> </xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>      > [!CAUTION] > Se un messaggio viene rifiutato, viene inviato alla coda di messaggi non recapitabili (se <xref:System.Messaging.Message.UseDeadLetterQueue%2A>è `true`), o viene ignorata.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> Quando un messaggio non riesce a raggiungere la coda, è possibile richiedere i riconoscimenti. In caso contrario, quando <xref:System.Messaging.Message.UseDeadLetterQueue%2A>è `false` il messaggio potrebbe essere perduto senza preavviso.</xref:System.Messaging.Message.UseDeadLetterQueue%2A>"
  example:
  - "The following code example gets and sets the value of a message's AttachSenderId property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool AttachSenderId { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref:System.Messaging.Message.SenderId*>deve essere collegato al messaggio; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Messaging.Message.SenderId*> Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AttachSenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà AttachSenderId."
  platform:
  - net462
- uid: System.Messaging.Message.Authenticated
  id: Authenticated
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: System.Messaging.Message.Authenticated
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene un valore che indica se il messaggio è stato autenticato."
  remarks: "La proprietà di autenticazione viene utilizzata solo dall&quot;applicazione durante l&quot;interazione con il messaggio e il tentativo di determinare se è stata richiesta l&quot;autenticazione. Se il messaggio nella coda, il messaggio è stato autenticato. Viceversa, se la proprietà di autenticazione è `true`, il gestore delle code ricevente autenticato il messaggio quando il messaggio ricevuto.       È possibile determinare se un messaggio di autenticazione non riuscita per visualizzare le relative proprietà. Accodamento messaggi Elimina messaggi non autenticati prima che vengano recapitati alla coda. Tuttavia, è possibile richiedere che un messaggio di riconoscimento verrà inviato se un errore di recapito impedisce che il messaggio arriva nella coda."
  example:
  - "The following code example displays the value of a message's Authenticated property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool Authenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;autenticazione è stata richiesta per il messaggio nella coda. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.Authenticated*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà di autenticazione."
  platform:
  - net462
- uid: System.Messaging.Message.AuthenticationProviderName
  id: AuthenticationProviderName
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: System.Messaging.Message.AuthenticationProviderName
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta il nome del provider di crittografia utilizzato per generare la firma digitale del messaggio."
  remarks: "Il AuthenticationProviderName in genere utilizzato quando si utilizzano code esterne. Accodamento messaggi richiede il nome del provider di autenticazione e il tipo di provider di autenticazione del provider di crittografia (provider di autenticazione) per convalidare la firma digitale dei messaggi inviati a una coda esterna sia messaggi passati ad Accodamento messaggi da una coda esterna.       Quando si invia un messaggio, impostare sempre la AuthenticationProviderName e <xref:System.Messaging.Message.ConnectorType%2A>insieme di proprietà.</xref:System.Messaging.Message.ConnectorType%2A> Quando il messaggio viene inviato, Accodamento messaggi ignora il nome del provider di autenticazione se non viene impostato anche il tipo di connettore.       La proprietà AuthenticationProviderName non può essere `null`, ma può essere una stringa vuota (&quot;&quot;)."
  syntax:
    content: public string AuthenticationProviderName { get; set; }
    return:
      type: System.String
      description: "Il nome del provider di crittografia utilizzato per generare la firma digitale del messaggio. Il valore predefinito è Microsoft Enhanced Cryptographic Provider versione 1.0."
  overload: System.Messaging.Message.AuthenticationProviderName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Non è stato possibile impostare la proprietà AuthenticationProviderName.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà AuthenticationProviderName."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "È stato impostato il AuthenticationProviderName su <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.AuthenticationProviderType
  id: AuthenticationProviderType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: System.Messaging.Message.AuthenticationProviderType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta il tipo di provider di crittografia utilizzato per generare la firma digitale del messaggio."
  remarks: "In genere la proprietà AuthenticationProviderType quando si utilizzano code esterne per specificare il servizio di crittografia associato a un messaggio. Accodamento messaggi richiede il nome del provider di autenticazione e il tipo di provider di autenticazione del provider di crittografia (provider di autenticazione) per convalidare la firma digitale dei messaggi inviati a una coda esterna sia messaggi passati ad Accodamento messaggi da una coda esterna.       Solo `RsaFull` deve essere utilizzata con la messaggistica.       Quando si invia un messaggio, impostare sempre la AuthenticationProviderType e <xref:System.Messaging.Message.ConnectorType%2A>insieme di proprietà.</xref:System.Messaging.Message.ConnectorType%2A> Quando il messaggio viene inviato, Accodamento messaggi ignora il tipo di provider di autenticazione se non viene impostato anche il tipo di connettore."
  syntax:
    content: public System.Messaging.CryptographicProviderType AuthenticationProviderType { get; set; }
    return:
      type: System.Messaging.CryptographicProviderType
      description: "Uno del <xref href=&quot;System.Messaging.CryptographicProviderType&quot;> </xref> valori. Il valore predefinito è <xref uid=&quot;langword_csharp_RSA_FULL&quot; name=&quot;RSA_FULL&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AuthenticationProviderType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Non è stato possibile impostare la proprietà AuthenticationProviderType.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà AuthenticationProviderType."
  platform:
  - net462
- uid: System.Messaging.Message.Body
  id: Body
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Body
  nameWithType: Message.Body
  fullName: System.Messaging.Message.Body
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta il contenuto del messaggio."
  remarks: "Proprietà del corpo del messaggio contiene in genere i dati associati con il messaggio. Anche se è anche possibile inviare i dati specifici dell&quot;applicazione <xref:System.Messaging.Message.AppSpecific%2A>e <xref:System.Messaging.Message.Extension%2A>proprietà, è necessario includere dati del messaggio nel corpo del messaggio laddove possibile.</xref:System.Messaging.Message.Extension%2A> </xref:System.Messaging.Message.AppSpecific%2A> Solo il contenuto della proprietà del corpo viene serializzato o crittografato.       La proprietà Body può contenere qualsiasi oggetto le cui dimensioni non superiori a 4 MB. Se si utilizza <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>per inviare un oggetto non di tipo <xref:System.Messaging.Message> <xref:System.Messaging.MessageQueue>che si trovino nella proprietà Body dell&quot; <xref:System.Messaging.Message>istanza restituita dal <xref:System.Messaging.MessageQueue.Peek%2A> <xref:System.Messaging.MessageQueue.Receive%2A>.</xref:System.Messaging.MessageQueue.Receive%2A> o</xref:System.Messaging.MessageQueue.Peek%2A> </xref:System.Messaging.Message> di oggetti</xref:System.Messaging.MessageQueue> </xref:System.Messaging.Message> </xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>       L&quot;argomento stringa in `MessageQueue.Send(&quot;hello.&quot;)` è un esempio di tale oggetto generico.       Il <xref:System.Messaging.Message.BodyType%2A>proprietà indica il tipo di informazioni archiviate nel corpo del messaggio.</xref:System.Messaging.Message.BodyType%2A> Accodamento messaggi utilizza queste informazioni per identificare il tipo del contenuto della proprietà Body.       Specificare la proprietà corpo o <xref:System.Messaging.Message.BodyStream%2A>prima di inviare il <xref:System.Messaging.Message>oggetto.</xref:System.Messaging.Message> </xref:System.Messaging.Message.BodyStream%2A> La proprietà Body può essere qualsiasi oggetto serializzabile, ad esempio una stringa di testo, un oggetto della struttura, una istanza della classe o un oggetto incorporato.       A meno che non si scrive il contenuto del messaggio direttamente il <xref:System.Messaging.Message.BodyStream%2A>impostata, il <xref:System.Messaging.Message.Formatter%2A>proprietà prima di inviare il messaggio.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.BodyStream%2A> Quando il <xref:System.Messaging.MessageQueue.Send%2A>metodo viene chiamato sul <xref:System.Messaging.MessageQueue>istanza, il corpo viene serializzato utilizzando il formattatore contenuto nella <xref:System.Messaging.Message.Formatter%2A>proprietà.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> Se si invia il messaggio senza specificare un valore per la <xref:System.Messaging.Message.Formatter%2A>proprietà, il valore predefinito del formattatore <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.Message.Formatter%2A>      > [!NOTE] > Il tentativo di impostare il corpo di un messaggio da <xref:System.Decimal.MaxValue>causerà un <xref:System.OverflowException>quando il `Send` metodo il <xref:System.Messaging.MessageQueue>classe viene denominata e <xref:System.Messaging.ActiveXMessageFormatter>viene utilizzato.</xref:System.Messaging.ActiveXMessageFormatter> </xref:System.Messaging.MessageQueue> </xref:System.OverflowException> </xref:System.Decimal.MaxValue>"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_13_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_13_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_13_1.cs)]"
  syntax:
    content: public object Body { get; set; }
    return:
      type: System.Object
      description: "Oggetto che specifica il contenuto del messaggio. L&quot;oggetto può essere una stringa, una data, valuta, un numero, una matrice di byte o qualsiasi oggetto gestito."
  overload: System.Messaging.Message.Body*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il <xref:System.Messaging.Message.Formatter*>proprietà <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Messaging.Message.Formatter*>       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà Body."
  platform:
  - net462
- uid: System.Messaging.Message.BodyStream
  id: BodyStream
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: System.Messaging.Message.BodyStream
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta le informazioni nel corpo del messaggio."
  remarks: "Il corpo di un messaggio può essere costituito da qualsiasi tipo di informazioni, ad esempio, una stringa, una data, valuta, un numero, una matrice di byte o qualsiasi oggetto gestito. Questa informazione viene serializzata in un <xref:System.IO.Stream>deve essere passato alla coda.</xref:System.IO.Stream>       Specificare il <xref:System.Messaging.Message.Body%2A>proprietà o la proprietà BodyStream prima di inviare il <xref:System.Messaging.Message>oggetto.</xref:System.Messaging.Message> </xref:System.Messaging.Message.Body%2A> Se si imposta la <xref:System.Messaging.Message.Body%2A>proprietà, il contenuto viene serializzato nella proprietà BodyStream.</xref:System.Messaging.Message.Body%2A> Tuttavia, è possibile scegliere di scrivere direttamente la proprietà BodyStream. Ciò è utile, ad esempio, quando si desidera aprire una connessione a un file e il contenuto del flusso come corpo del messaggio.       Se non si scrive il contenuto del messaggio direttamente alla proprietà BodyStream, impostare il <xref:System.Messaging.Message.Formatter%2A>proprietà prima di inviare il messaggio.</xref:System.Messaging.Message.Formatter%2A> Quando il <xref:System.Messaging.MessageQueue.Send%2A>metodo viene chiamato sul <xref:System.Messaging.MessageQueue>istanza, il corpo viene serializzato utilizzando il formattatore contenuto nella <xref:System.Messaging.Message.Formatter%2A>proprietà.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> Se si invia il messaggio senza specificare un valore per la <xref:System.Messaging.Message.Formatter%2A>proprietà, il valore predefinito del formattatore <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.Message.Formatter%2A>       Se si imposta la <xref:System.Messaging.Message.UseEncryption%2A>proprietà `true` per il corpo del messaggio, il messaggio verrà crittografato quando viene inviato, non quando si imposta la <xref:System.Messaging.Message.Body%2A>proprietà.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message.UseEncryption%2A> Pertanto, la proprietà BodyStream non verrà mai crittografata."
  syntax:
    content: public System.IO.Stream BodyStream { get; set; }
    return:
      type: System.IO.Stream
      description: "Oggetto <xref:System.IO.Stream>che contiene le informazioni serializzate contenute nel <xref:System.Messaging.Message.Body*>del messaggio.</xref:System.Messaging.Message.Body*> </xref:System.IO.Stream>"
  overload: System.Messaging.Message.BodyStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la <xref:System.Messaging.Message.Body*>proprietà.</xref:System.Messaging.Message.Body*>"
  platform:
  - net462
- uid: System.Messaging.Message.BodyType
  id: BodyType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyType
  nameWithType: Message.BodyType
  fullName: System.Messaging.Message.BodyType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta il tipo di dati che contiene il corpo del messaggio."
  remarks: "Il servizio Accodamento messaggi riconosce il contenuto del corpo come un oggetto o un flusso serializzato. La proprietà BodyType indica il tipo di oggetto all&quot;interno di <xref:System.Messaging.Message.Body%2A>proprietà del messaggio.</xref:System.Messaging.Message.Body%2A>       Il <xref:System.Messaging.XmlMessageFormatter>esegue l&quot;associazione tra i tipi nativi e l&quot;oggetto nel corpo del messaggio.</xref:System.Messaging.XmlMessageFormatter> Se si utilizza il <xref:System.Messaging.XmlMessageFormatter>, il formattatore imposterà automaticamente la proprietà BodyType.</xref:System.Messaging.XmlMessageFormatter>       Altri formattatori possono fornire funzionalità di associazione anche, come illustrato nel codice c# seguente.      ```   message.Formatter = new ActiveXMessageFormatter();   object myObject message.Body;   if (myObject is string) {   }   if (myObject is int) {   }   if (myObject is float) {   }   ```"
  example:
  - "The following code example displays the value of a message's BodyType property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public int BodyType { get; set; }
    return:
      type: System.Int32
      description: "Tipo effettivo del corpo del messaggio, ad esempio una stringa, una data, valuta o un numero."
  overload: System.Messaging.Message.BodyType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la <xref:System.Messaging.Message.Body*>proprietà.</xref:System.Messaging.Message.Body*>"
  platform:
  - net462
- uid: System.Messaging.Message.ConnectorType
  id: ConnectorType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: System.Messaging.Message.ConnectorType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta un valore che indica che alcune proprietà del messaggio normalmente impostate da Accodamento messaggi sono state impostate dall&quot;applicazione mittente."
  remarks: "Il servizio Accodamento messaggi è necessario impostare la proprietà ConnectorType ogni volta che un&quot;applicazione imposta una proprietà del messaggio che viene in genere impostata da Accodamento messaggi. Un&quot;applicazione utilizza in genere un ConnectorType nei due casi seguenti: - ogni volta che un&quot;applicazione di connessione passa un messaggio. Il ConnectorType indica le applicazioni di inviare e ricezione come interpretare le proprietà di sicurezza e conferma del messaggio.      -Ogni volta che l&quot;applicazione mittente, piuttosto che Accodamento messaggi, consente di crittografare un messaggio. Il ConnectorType indica ad Accodamento messaggi consente di <xref:System.Messaging.Message.DestinationSymmetricKey%2A>per decrittografare il valore della proprietà.</xref:System.Messaging.Message.DestinationSymmetricKey%2A>       Se si imposta una delle seguenti proprietà, è necessario impostare la proprietà ConnectorType (in caso contrario, la coda ignora tali proprietà quando il messaggio viene inviato):- <xref:System.Messaging.Message.AuthenticationProviderName%2A>- <xref:System.Messaging.Message.AuthenticationProviderType%2A>- <xref:System.Messaging.Message.DestinationSymmetricKey%2A>- <xref:System.Messaging.Message.DigitalSignature%2A>- <xref:System.Messaging.Message.MessageType%2A>- <xref:System.Messaging.Message.SenderId%2A></xref:System.Messaging.Message.SenderId%2A> </xref:System.Messaging.Message.MessageType%2A> </xref:System.Messaging.Message.DigitalSignature%2A> </xref:System.Messaging.Message.DestinationSymmetricKey%2A> </xref:System.Messaging.Message.AuthenticationProviderType%2A> </xref:System.Messaging.Message.AuthenticationProviderName%2A>"
  syntax:
    content: public Guid ConnectorType { get; set; }
    return:
      type: System.Guid
      description: "Oggetto <xref:System.Guid>definito dall&quot;applicazione e utilizzato in combinazione con le applicazioni di connessione o la crittografia dei messaggi.</xref:System.Guid> Questo <xref:System.Guid>consente a un&quot;applicazione ricevente interpretare le proprietà di messaggio che sono state impostate dall&quot;applicazione mittente ma che in genere vengono impostate da Accodamento messaggi.</xref:System.Guid>"
  overload: System.Messaging.Message.ConnectorType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà ConnectorType."
  platform:
  - net462
- uid: System.Messaging.Message.CorrelationId
  id: CorrelationId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: System.Messaging.Message.CorrelationId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta l&quot;identificatore di messaggio utilizzato dai messaggi di riconoscimento, rapporto e risposta per fare riferimento al messaggio originale."
  remarks: "Quando il servizio Accodamento messaggi genera un messaggio di riconoscimento o di rapporto, utilizza la proprietà identificatore di correlazione per specificare l&quot;identificatore del messaggio originale. In questo modo, l&quot;identificatore di correlazione unisce il messaggio di report o il riconoscimento al messaggio originale.       L&quot;applicazione mittente può quindi far corrispondere il riconoscimento o un report con il messaggio originale utilizzando la proprietà CorrelationId per identificare il messaggio originale <xref:System.Messaging.Message.Id%2A>proprietà.</xref:System.Messaging.Message.Id%2A>       Inoltre, nella applicazioni connettore è necessario impostare la proprietà ID correlazione dei messaggi di riconoscimento e report per l&quot;identificatore del messaggio del messaggio originale.       Quando l&quot;applicazione invia un messaggio di risposta all&quot;applicazione mittente, è possibile impostare la proprietà CorrelationId del messaggio di risposta per l&quot;identificatore del messaggio del messaggio originale. L&quot;applicazione mittente può quindi far corrispondere il messaggio di risposta al messaggio inviato."
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_95_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_95_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_95_1.vb)]"
  syntax:
    content: public string CorrelationId { get; set; }
    return:
      type: System.String
      description: "Identificatore del messaggio specificato per il <xref:System.Messaging.Message.Id*>proprietà del messaggio originale.</xref:System.Messaging.Message.Id*> L&quot;identificatore di correlazione viene utilizzato da Accodamento messaggi genera un messaggio di riconoscimento o di un report e da un&quot;applicazione quando genera un messaggio di risposta."
  overload: System.Messaging.Message.CorrelationId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà CorrelationId."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "L&quot;ID di correlazione è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.DestinationQueue
  id: DestinationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: System.Messaging.Message.DestinationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene la coda di destinazione per un messaggio."
  remarks: "La proprietà di DestinationQueue viene in genere utilizzata per determinare la destinazione originale di un messaggio che si trova in una coda del diario o messaggi non recapitabili. In genere, non è necessario esaminare questa proprietà, perché in genere è recuperare il messaggio dalla coda di destinazione."
  example:
  - "The following code example displays the value of a message's DestinationQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue DestinationQueue { get; }
    return:
      type: System.Messaging.MessageQueue
      description: "Oggetto <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> che specifica la coda di destinazione per il messaggio."
  overload: System.Messaging.Message.DestinationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà DestinationQueue."
  platform:
  - net462
- uid: System.Messaging.Message.DestinationSymmetricKey
  id: DestinationSymmetricKey
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: System.Messaging.Message.DestinationSymmetricKey
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta la chiave simmetrica utilizzata per crittografare i messaggi crittografati dall&quot;applicazione o i messaggi inviati alle code esterne."
  remarks: "Due scenari è necessario utilizzare la proprietà DestinationSymmetricKey. Il primo è quando l&quot;applicazione, anziché da Accodamento messaggi, consente di crittografare un messaggio. Il secondo è quando si invia un messaggio crittografato a un sistema di accodamento diverso da Accodamento messaggi.       Prima di impostare questa proprietà, è necessario crittografare la chiave simmetrica con la chiave pubblica del gestore code di destinazione. Quando si invia un messaggio crittografato dall&quot;applicazione, il gestore delle code ricevente utilizza la chiave simmetrica per decrittografare il messaggio prima dell&quot;invio alla coda di destinazione.       Se si invia un messaggio a una coda esterna, il messaggio viene prima ricevuto dall&quot;applicazione di connettore appropriato, che inoltra il messaggio crittografato con la chiave simmetrica associata all&quot;applicazione ricevente. È responsabilità dell&quot;applicazione ricevente per decrittografare il messaggio utilizzando la chiave simmetrica.       Quando si imposta la proprietà DestinationSymmetricKey, è necessario impostare anche la <xref:System.Messaging.Message.ConnectorType%2A>proprietà.</xref:System.Messaging.Message.ConnectorType%2A> Quando il messaggio viene inviato, Accodamento messaggi ignora la proprietà DestinationSymmetricKey se il <xref:System.Messaging.Message.ConnectorType%2A>proprietà non è impostata neanche.</xref:System.Messaging.Message.ConnectorType%2A>       La proprietà DestinationSymmetricKey ha una dimensione di matrice massima pari a 256."
  syntax:
    content: public byte[] DestinationSymmetricKey { get; set; }
    return:
      type: System.Byte[]
      description: "Matrice di valori di byte che specifica la chiave simmetrica di destinazione utilizzata per crittografare il messaggio. Il valore predefinito è una matrice di lunghezza zero."
  overload: System.Messaging.Message.DestinationSymmetricKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà DestinationSymmetricKey."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "È il DestinationSymmetricKey <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.DigitalSignature
  id: DigitalSignature
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: System.Messaging.Message.DigitalSignature
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta la firma digitale che Accodamento messaggi utilizza per autenticare il messaggio."
  remarks: "Accodamento messaggi utilizza la firma digitale per autenticare i messaggi inviati dalla versione 1.0 di Accodamento messaggi. Nella maggior parte dei casi, Accodamento messaggi genera l&quot;errore e imposta la proprietà DigitalSignature quando l&quot;applicazione mittente richiede l&quot;autenticazione. L&quot;applicazione ricevente utilizza questa proprietà per recuperare la firma digitale allegata al messaggio.       È possibile utilizzare la proprietà di DigitalSignature solo quando si esegue il servizio Accodamento messaggi versione 2.0. Quando richiede l&quot;autenticazione, è necessario specificare le firme versione 1.0 di Accodamento messaggi all&quot;applicazione mittente. Se l&quot;applicazione mittente invia una firma versione 2.0 di accodamento, questa proprietà contiene un buffer di quattro byte, ciascuno contenente zero.       La proprietà DigitalSignature, insieme con il <xref:System.Messaging.Message.SenderCertificate%2A>proprietà, viene inoltre utilizzata dalle applicazioni di connessione quando viene inviato un messaggio.</xref:System.Messaging.Message.SenderCertificate%2A> In questo scenario, l&quot;applicazione di connessione, anziché Accodamento messaggi, ovvero la firma digitale, basata sul certificato dell&quot;utente che invia il messaggio viene generato l&quot;errore.       La proprietà DigitalSignature ha una dimensione di matrice massima pari a 256.       Quando si imposta la proprietà DigitalSignature, è necessario impostare anche la <xref:System.Messaging.Message.ConnectorType%2A>proprietà.</xref:System.Messaging.Message.ConnectorType%2A> Quando viene inviato un messaggio, Accodamento messaggi ignora la proprietà DigitalSignature se il <xref:System.Messaging.Message.ConnectorType%2A>proprietà non è impostata neanche.</xref:System.Messaging.Message.ConnectorType%2A>"
  syntax:
    content: public byte[] DigitalSignature { get; set; }
    return:
      type: System.Byte[]
      description: "Matrice di valori di byte che specifica la firma digitale di Accodamento messaggi 1.0 utilizzata per autenticare il messaggio. Il valore predefinito è una matrice di lunghezza zero."
  overload: System.Messaging.Message.DigitalSignature*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà DigitalSignature."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La proprietà DigitalSignature <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.EncryptionAlgorithm
  id: EncryptionAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: System.Messaging.Message.EncryptionAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta l&quot;algoritmo di crittografia utilizzato per crittografare il corpo di un messaggio privato."
  remarks: "Se un messaggio è privato (crittografata), viene crittografato prima che venga inviato e decrittografato al momento della ricezione. La proprietà EncryptionAlgorithm specifica l&quot;algoritmo utilizzato per crittografare il corpo del messaggio di un messaggio privato.       Una coda può richiedere che in ingresso messaggi crittografati. Se un&quot;applicazione invia un messaggio di (pubblici) non crittografato a una coda che accetta solo messaggi privati o se invia un messaggio privato a una coda che accetta solo messaggi non privati, la coda rifiuta il messaggio. L&quot;applicazione mittente può richiedere che in tal caso essere restituito un messaggio di riconoscimento negativo."
  syntax:
    content: public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }
    return:
      type: System.Messaging.EncryptionAlgorithm
      description: "Uno del <xref href=&quot;System.Messaging.EncryptionAlgorithm&quot;> </xref> valori di enumerazione. Il valore predefinito è <xref uid=&quot;langword_csharp_RC2&quot; name=&quot;RC2&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.EncryptionAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà EncryptionAlgorithm."
  platform:
  - net462
- uid: System.Messaging.Message.Extension
  id: Extension
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Extension
  nameWithType: Message.Extension
  fullName: System.Messaging.Message.Extension
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta informazioni aggiuntive definite dall&quot;applicazione, associate al messaggio."
  remarks: "La proprietà di estensione fornisce le informazioni definite dall&quot;applicazione, come un oggetto binario di grandi dimensioni, che è associato il messaggio. È responsabilità dell&quot;applicazione ricevente per interpretare il contenuto della proprietà estensione.       Dove possibile, è necessario includere i dati del messaggio nel <xref:System.Messaging.Message.Body%2A>proprietà del messaggio anziché la proprietà di estensione.</xref:System.Messaging.Message.Body%2A>       Quando si utilizzano code esterne, è possibile utilizzare la proprietà di estensione per specificare le proprietà di messaggio che non esistono in Accodamento messaggi.       Una coda esterna esiste in un sistema di accodamento diverso da Accodamento messaggi Microsoft. Il servizio Accodamento messaggi comunica con queste code tramite un&quot;applicazione di connessione."
  syntax:
    content: public byte[] Extension { get; set; }
    return:
      type: System.Byte[]
      description: "Matrice di valori di byte che fornisce informazioni definite dall&quot;applicazione associate al messaggio. Il valore predefinito è una matrice di lunghezza zero."
  overload: System.Messaging.Message.Extension*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà di estensione."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La proprietà di estensione è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.Formatter
  id: Formatter
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Formatter
  nameWithType: Message.Formatter
  fullName: System.Messaging.Message.Formatter
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta il formattatore utilizzato per serializzare o deserializzare un oggetto dal corpo del messaggio."
  remarks: "Utilizzare la proprietà formattatore durante la lettura e scrittura di un messaggio. Quando un messaggio viene inviato alla coda, il formattatore serializza i <xref:System.Messaging.Message.Body%2A>proprietà in un flusso che può essere inviato alla coda dei messaggi.</xref:System.Messaging.Message.Body%2A> Durante la lettura da una coda, il formattatore deserializza i dati del messaggio nel <xref:System.Messaging.Message.Body%2A>proprietà.</xref:System.Messaging.Message.Body%2A>       A meno che non si scrive il contenuto del messaggio direttamente il <xref:System.Messaging.Message.BodyStream%2A>proprietà, impostare la proprietà Formatter prima di inviare il messaggio.</xref:System.Messaging.Message.BodyStream%2A> Quando il <xref:System.Messaging.MessageQueue.Send%2A>metodo viene chiamato sul <xref:System.Messaging.MessageQueue>istanza, il corpo viene serializzato utilizzando il formattatore contenuto nella proprietà del formattatore.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> Se si invia il messaggio senza specificare un valore per la proprietà di formattatore, il formattatore predefinito sarà <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter>       Il <xref:System.Messaging.XmlMessageFormatter>ad accoppiamento ridotto, pertanto non è necessario avere lo stesso oggetto di tipo per il mittente e destinatario, quando si utilizza questo formato.</xref:System.Messaging.XmlMessageFormatter> Il <xref:System.Messaging.ActiveXMessageFormatter>e <xref:System.Messaging.BinaryMessageFormatter>serializzare i dati in una rappresentazione binaria.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> Il <xref:System.Messaging.ActiveXMessageFormatter>viene utilizzato durante l&quot;invio o la ricezione di componenti COM.</xref:System.Messaging.ActiveXMessageFormatter>"
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_1.cpp)]\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_1.cs)]\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_1.vb)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_2.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_2.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_2.vb)]"
  syntax:
    content: public System.Messaging.IMessageFormatter Formatter { get; set; }
    return:
      type: System.Messaging.IMessageFormatter
      description: "Il <xref href=&quot;System.Messaging.IMessageFormatter&quot;> </xref> che produce un flusso da scrivere o leggere il corpo del messaggio. Il valore predefinito è <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref>."
  overload: System.Messaging.Message.Formatter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La proprietà formattatore è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.HashAlgorithm
  id: HashAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: System.Messaging.Message.HashAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta l&quot;hash di algoritmo utilizzato per l&quot;autenticazione di un messaggio di Accodamento messaggi o creare una firma digitale di un messaggio."
  remarks: "Nel computer di origine, Accodamento messaggi utilizza l&quot;algoritmo hash durante la creazione di una firma digitale di un messaggio. Quindi, il gestore delle code di destinazione utilizza lo stesso algoritmo hash per autenticare il messaggio quando viene ricevuto."
  syntax:
    content: public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Messaging.HashAlgorithm
      description: "Uno del <xref href=&quot;System.Messaging.HashAlgorithm&quot;> </xref> valori di enumerazione. Per Windows XP, il valore predefinito è <xref uid=&quot;langword_csharp_SHA&quot; name=&quot;SHA&quot; href=&quot;&quot;> </xref>. In caso contrario, il valore predefinito è <xref uid=&quot;langword_csharp_MD5&quot; name=&quot;MD5&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.HashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà HashAlgorithm."
  platform:
  - net462
- uid: System.Messaging.Message.Id
  id: Id
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Id
  nameWithType: Message.Id
  fullName: System.Messaging.Message.Id
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene l&quot;identificatore del messaggio."
  remarks: "Accodamento messaggi genera un identificatore di messaggio quando viene inviato il messaggio. L&quot;identificatore è composto da 20 byte e comprende due elementi: la macchina <xref:System.Guid>del computer mittente e un identificatore univoco per il messaggio nel computer.</xref:System.Guid> La combinazione dei due elementi genera un identificatore di messaggio che è univoco nella rete.       Accodamento messaggi genera identificatori di messaggio per tutti i messaggi, inclusi i messaggi di riconoscimento e di report. In genere, un messaggio di riconoscimento viene inviato da Accodamento messaggi in risposta all&quot;arrivo o errore di un messaggio originale inviato. È possibile trovare il valore della proprietà Id del messaggio originale nel <xref:System.Messaging.Message.CorrelationId%2A>proprietà di un messaggio di riconoscimento.</xref:System.Messaging.Message.CorrelationId%2A>       È inoltre possibile utilizzare la proprietà Id quando si invia un messaggio di risposta a una coda di risposta. Per includere l&quot;identificatore del messaggio originale in un messaggio di risposta, impostare il <xref:System.Messaging.Message.CorrelationId%2A>proprietà del messaggio di risposta per la proprietà Id del messaggio originale.</xref:System.Messaging.Message.CorrelationId%2A> L&quot;applicazione che legge il messaggio di risposta può quindi utilizzare l&quot;identificatore di correlazione del messaggio di risposta per identificare il messaggio originale."
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_19_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_19_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_19_1.vb)]"
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: "L&quot;identificatore univoco del messaggio, che viene generato da Accodamento messaggi."
  overload: System.Messaging.Message.Id*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà Id."
  platform:
  - net462
- uid: System.Messaging.Message.InfiniteTimeout
  id: InfiniteTimeout
  parent: System.Messaging.Message
  langs:
  - csharp
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: System.Messaging.Message.InfiniteTimeout
  type: Field
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Specifica che è presente alcun timeout."
  remarks: "<xref:System.Messaging.Message.TimeToBeReceived%2A>e <xref:System.Messaging.Message.TimeToReachQueue%2A>richiedono un valore che specifica un timeout.</xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A> Nel primo caso, il timeout è il tempo massimo consentito per un messaggio venga ricevuto dalla coda. Nel secondo caso, il timeout è il tempo consentito per un messaggio raggiungere la coda. In entrambi i casi, è possibile specificare il timeout come un numero di secondi o utilizzare InfiniteTimeout per indicare che è presente alcun timeout."
  example:
  - "The following code example demonstrates the use of the InfiniteTimeout field.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static readonly TimeSpan InfiniteTimeout;
    return:
      type: System.TimeSpan
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.IsFirstInTransaction
  id: IsFirstInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: System.Messaging.Message.IsFirstInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene un valore che indica se il messaggio è il primo messaggio inviato in una transazione."
  remarks: "Le applicazioni riceventi utilizzano la proprietà IsFirstInTransaction per verificare se un messaggio è il primo messaggio inviato in una singola transazione a una singola coda.       Questa proprietà è disponibile solo con Accodamento messaggi versione 2.0 e versioni successive.       Per verificare i limiti delle transazioni, è possibile utilizzare la proprietà IsFirstInTransaction con altre due proprietà: <xref:System.Messaging.Message.IsLastInTransaction%2A>e <xref:System.Messaging.Message.TransactionId%2A>.</xref:System.Messaging.Message.TransactionId%2A> </xref:System.Messaging.Message.IsLastInTransaction%2A> Utilizzare la prima per verificare se un messaggio di stato l&quot;ultimo messaggio inviato nella transazione e utilizzare quest&quot;ultimo per recuperare l&quot;ID della transazione.       Se solo un messaggio viene inviato in una transazione, la IsFirstInTransaction e <xref:System.Messaging.Message.IsLastInTransaction%2A>sono entrambe impostate su `true`.</xref:System.Messaging.Message.IsLastInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's IsFirstInTransaction property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool IsFirstInTransaction { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il messaggio è stato il primo messaggio inviato in una transazione. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.IsFirstInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà IsFirstInTransaction."
  platform:
  - net462
- uid: System.Messaging.Message.IsLastInTransaction
  id: IsLastInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: System.Messaging.Message.IsLastInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene un valore che indica se il messaggio è l&quot;ultimo messaggio inviato in una transazione."
  remarks: "Le applicazioni riceventi utilizzano la proprietà IsLastInTransaction per verificare se un messaggio è l&quot;ultimo messaggio inviato in una singola transazione a una singola coda.       Questa proprietà è disponibile solo con Accodamento messaggi versione 2.0 e versioni successive.       Per verificare i limiti delle transazioni, è possibile utilizzare la proprietà IsLastInTransaction insieme ad altre due: <xref:System.Messaging.Message.IsFirstInTransaction%2A>e <xref:System.Messaging.Message.TransactionId%2A>.</xref:System.Messaging.Message.TransactionId%2A> </xref:System.Messaging.Message.IsFirstInTransaction%2A> Utilizzare la prima per verificare se un messaggio di stato il primo messaggio inviato nella transazione e utilizzare quest&quot;ultimo per recuperare l&quot;ID della transazione.       Se viene inviato un messaggio in una transazione, solo il <xref:System.Messaging.Message.IsFirstInTransaction%2A>e IsLastInTransaction sono entrambe impostate su `true`.</xref:System.Messaging.Message.IsFirstInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's IsLastInTransaction property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool IsLastInTransaction { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il messaggio è stato l&quot;ultimo messaggio inviato in una singola transazione. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.IsLastInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà IsLastInTransaction."
  platform:
  - net462
- uid: System.Messaging.Message.Label
  id: Label
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Label
  nameWithType: Message.Label
  fullName: System.Messaging.Message.Label
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta una stringa Unicode definita dall&quot;applicazione che descrive il messaggio."
  remarks: "È possibile utilizzare un&quot;etichetta di messaggio per diversi scopi. Ad esempio, è possibile utilizzare, per scopi di visualizzazione o per elaborare in modo selettivo i messaggi in base al valore di etichetta. L&quot;etichetta non devono essere univoci tra i messaggi.       Coda di messaggi e di messaggio etichette rappresentano un valore definito dall&quot;applicazione che contribuisce di identificare la coda o un messaggio in termini leggibili. È responsabilità dell&quot;applicazione per interpretare il contenuto di etichetta, che non hanno alcun significato intrinseco per l&quot;applicazione di Accodamento messaggi."
  example:
  - "The following code example gets and sets the value of a message's Label property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string Label { get; set; }
    return:
      type: System.String
      description: "L&quot;etichetta del messaggio. Il valore predefinito è una stringa vuota (&quot;&quot;)."
  overload: System.Messaging.Message.Label*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà Label."
  platform:
  - net462
- uid: System.Messaging.Message.LookupId
  id: LookupId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: LookupId
  nameWithType: Message.LookupId
  fullName: System.Messaging.Message.LookupId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Introdotto in MSMQ 3.0. Ottiene l&quot;identificatore di ricerca del messaggio."
  remarks: "Il valore della proprietà LookupId fornisce l&quot;accesso di sola lettura all&quot;identificatore di ricerca del messaggio. Identificatore di ricerca, introdotto in MSMQ 3.0, è un identificatore di a 64 bit che viene generato da Accodamento messaggi e assegnato a ogni messaggio quando il messaggio viene inserito nella coda. Identificatore di ricerca non corrisponde all&quot;identificatore del messaggio che viene generato quando viene inviato il messaggio.       Accodamento messaggi genera un identificatore di ricerca per tutti i messaggi che vengono inseriti in una coda, tra cui generati dall&quot;applicazione di destinazione, amministrazione e le code del report, nonché journal generato dal sistema, messaggi non recapitabili, connettore e in uscita. In altre parole, sono inclusi entrambi i messaggi inviati dalle applicazioni mittenti e da Accodamento messaggi. Identificatore di ricerca è univoca per la coda e non ha alcun significato all&quot;esterno della coda.       Se un messaggio viene inviato a diverse code di destinazione oppure una copia di un messaggio viene archiviata in un journal del computer o della coda, ogni copia del messaggio avrà un proprio identificatore di ricerca quando viene inserito nella rispettiva coda.       Il valore della proprietà LookupId può solo leggere messaggi recuperati da una coda.       Un identificatore di ricerca viene utilizzato per leggere un messaggio specifico nella coda. Dopo l&quot;identificatore di ricerca di un messaggio è noto, l&quot;applicazione ricevente può chiamare il <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>o <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A>di funzione per passare direttamente al messaggio e leggere o recuperato dalla coda, a differenza dei cursori che deve iniziare all&quot;inizio della coda e procedere verso la fine della coda, ottenere gli identificatori di ricerca dei messaggi nella coda è responsabilità dell&quot;applicazione.</xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> </xref:System.Messaging.MessageQueue.PeekByLookupId%2A> Uno dei modi per ottenere gli identificatori di ricerca consiste nel creare un trigger per la coda di destinazione che richiama un componente che memorizza nella cache gli identificatori di ogni messaggio quando vengono inseriti nella coda."
  syntax:
    content: public long LookupId { get; }
    return:
      type: System.Int64
      description: "Identificatore di ricerca del messaggio, che viene generato da Accodamento messaggi ed è univoco per la coda in cui risiede il messaggio."
  overload: System.Messaging.Message.LookupId*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Non è installato MSMQ 3.0."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà LookupId."
  platform:
  - net462
- uid: System.Messaging.Message.MessageType
  id: MessageType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: MessageType
  nameWithType: Message.MessageType
  fullName: System.Messaging.Message.MessageType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: 'Gets the message type: <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Acknowledgment&quot; name=&quot;Acknowledgment&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Report&quot; name=&quot;Report&quot; href=&quot;&quot;></xref>.'
  remarks: "Accodamento messaggi in genere imposta questa proprietà quando invia il messaggio. Messaggio di Accodamento messaggi può essere uno dei tipi seguenti:- `Normal`, quale un normale messaggio inviato da un&quot;applicazione a una coda o un messaggio di risposta restituito all&quot;applicazione mittente.      - `Acknowledgement`, Accodamento messaggi generato ogni volta che l&quot;applicazione mittente lo richiede. Ad esempio, Accodamento messaggi può generare messaggi positivi o negativi per indicare che il messaggio originale è arrivato o è stato letto. Il servizio Accodamento messaggi restituisce il messaggio di conferma appropriato alla coda di amministrazione specificata dall&quot;applicazione mittente.      - `Report`, che il servizio Accodamento messaggi genera ogni volta che viene definita una coda dei rapporti nel gestore code di origine. Quando la traccia è abilitata, Accodamento messaggi invia un messaggio di rapporto alla coda dei rapporti di Accodamento messaggi ogni volta che il messaggio originale entra o esce da un server di Accodamento messaggi."
  example:
  - "The following code example displays the value of a message's MessageType property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageType MessageType { get; }
    return:
      type: System.Messaging.MessageType
      description: "Uno dei valori dell&quot;oggetto MessageType."
  overload: System.Messaging.Message.MessageType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà MessageType."
  platform:
  - net462
- uid: System.Messaging.Message.Priority
  id: Priority
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Priority
  nameWithType: Message.Priority
  fullName: System.Messaging.Message.Priority
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta la priorità del messaggio, che determina la posizione in coda il messaggio."
  remarks: "La proprietà priorità influenza come Accodamento messaggi gestisce il messaggio sia durante l&quot;indirizzamento e una volta raggiunta la destinazione. Messaggi con priorità superiore sono il preferenza durante l&quot;instradamento e vengono inseriti nella parte anteriore della coda di destinazione. I messaggi con la stessa priorità vengono inseriti nella coda in base all&quot;ora di arrivo.       È possibile impostare una priorità significativa solo per messaggi non transazionali. Accodamento messaggi imposta automaticamente la priorità per i messaggi transazionali per `Lowest`, che comporta la priorità verrà ignorato."
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_87_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_87_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_87_1.cs)]"
  syntax:
    content: public System.Messaging.MessagePriority Priority { get; set; }
    return:
      type: System.Messaging.MessagePriority
      description: "Uno del <xref href=&quot;System.Messaging.MessagePriority&quot;> </xref> valori che rappresentano i livelli di priorità dei messaggi non transazionali. Il valore predefinito è <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.Priority*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà di priorità."
  platform:
  - net462
- uid: System.Messaging.Message.Recoverable
  id: Recoverable
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: System.Messaging.Message.Recoverable
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta un valore che indica se il messaggio è garantito per essere recapitati in caso di un problema di errore o di rete del computer."
  remarks: "La proprietà recuperabile indica se è garantito il recapito di un messaggio, anche se il computer si blocca durante il messaggio di indirizzamento alla coda di destinazione.       Se è garantito il recapito di un messaggio, il messaggio viene archiviato in locale in ogni fase della route, fino a quando il messaggio viene inoltrato al computer successivo. Impostare la proprietà recuperabile `true` possono influire sulla velocità effettiva.       Se il messaggio è transazionale, Accodamento messaggi gestisce automaticamente il messaggio come recuperabile, indipendentemente dal valore della proprietà recuperabile."
  example:
  - "The following code example gets and sets the value of a message's Recoverable property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool Recoverable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il recapito del messaggio è garantito (tramite il salvataggio sul disco durante l&quot;indirizzamento); <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se recapito non è garantito. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.Recoverable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà recuperabile."
  platform:
  - net462
- uid: System.Messaging.Message.ResponseQueue
  id: ResponseQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: System.Messaging.Message.ResponseQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta la coda che riceve i messaggi di risposta generati dall&quot;applicazione."
  remarks: "La proprietà ResponseQueue identifica la coda che riceve i messaggi di risposta generati dall&quot;applicazione, che restituisce l&quot;applicazione ricevente all&quot;applicazione mittente. L&quot;applicazione di invio specifica le code di risposta quando l&quot;applicazione invia i messaggi. Qualsiasi coda disponibile può essere specificato come una coda di risposta.       I messaggi restituiti alla coda di risposta sono specifici dell&quot;applicazione. L&quot;applicazione deve definire il contenuto di messaggi, nonché l&quot;azione da eseguire alla ricezione di un messaggio."
  example:
  - "The following code example gets and sets the value of a message's ResponseQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue ResponseQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "Il <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> per la risposta generati dall&quot;applicazione vengono restituiti i messaggi. Il valore predefinito è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.ResponseQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà ResponseQueue."
  platform:
  - net462
- uid: System.Messaging.Message.SecurityContext
  id: SecurityContext
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: System.Messaging.Message.SecurityContext
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta il contesto di sicurezza per un messaggio."
  syntax:
    content: public System.Messaging.SecurityContext SecurityContext { get; set; }
    return:
      type: System.Messaging.SecurityContext
      description: "Oggetto <xref href=&quot;System.Messaging.SecurityContext&quot;> </xref> oggetto che contiene il contesto di sicurezza per un messaggio, se precedentemente è stata impostata la proprietà; in caso contrario NULL."
  overload: System.Messaging.Message.SecurityContext*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.SenderCertificate
  id: SenderCertificate
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: System.Messaging.Message.SenderCertificate
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta il certificato di sicurezza utilizzato per autenticare i messaggi."
  remarks: "Applicazione di ricezione utilizza la proprietà SenderCertificate quando il messaggio include un certificato di protezione esterne.       Il servizio Accodamento messaggi può autenticare un messaggio utilizzando un certificato di sicurezza interni o esterni. Accodamento messaggi fornisce certificati interni, che vengono usati per verificare l&quot;integrità del messaggio. Un&quot;autorità di certificazione fornisce un certificato esterno che è possibile accedere tramite la proprietà SenderCertificate del messaggio. Oltre a consentire di Accodamento messaggi autenticare il messaggio, un certificato esterno consente all&quot;applicazione ricevente verificare ulteriormente il mittente. Nessun valore utilizzabile da un&quot;applicazione ricevente un certificato interno.       Un certificato esterno deve essere registrato con il servizio directory di sistema di Accodamento. Un certificato esterno contiene informazioni sull&quot;autorità di certificazione, l&quot;utente del certificato, il periodo di validità del certificato, la chiave pubblica dell&quot;utente del certificato e la firma dell&quot;autorità di certificazione."
  syntax:
    content: public byte[] SenderCertificate { get; set; }
    return:
      type: System.Byte[]
      description: "Matrice di valori di byte che rappresenta un certificato di sicurezza, Accodamento messaggi utilizza per verificare il mittente del messaggio. Il valore predefinito è una matrice di lunghezza zero."
  overload: System.Messaging.Message.SenderCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà SenderCertificate."
  platform:
  - net462
- uid: System.Messaging.Message.SenderId
  id: SenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderId
  nameWithType: Message.SenderId
  fullName: System.Messaging.Message.SenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene l&quot;identificatore del mittente."
  remarks: "Se il <xref:System.Messaging.Message.AttachSenderId%2A>proprietà `false`, l&quot;identificatore del mittente specificato nella proprietà ID mittente non è collegato al messaggio quando viene inviato.</xref:System.Messaging.Message.AttachSenderId%2A> Indica che il mittente non deve essere convalidato quando invia il messaggio alla coda di destinazione per Accodamento messaggi. Se il <xref:System.Messaging.Message.AttachSenderId%2A>proprietà `true`, il valore della proprietà ID mittente sia attendibile solo se il messaggio è stato autenticato.</xref:System.Messaging.Message.AttachSenderId%2A> Utilizzare il <xref:System.Messaging.Message.Authenticated%2A>proprietà in combinazione con la proprietà ID mittente per verificare i diritti di accesso del mittente.</xref:System.Messaging.Message.Authenticated%2A>       Un&quot;applicazione di connessione è un&quot;applicazione che utilizza un server del connettore per la comunicazione tra il servizio Accodamento messaggi e altri sistemi di Accodamento. Accodamento messaggi richiede che le applicazioni di connessione per fornire l&quot;identificazione del mittente. È necessario impostare il <xref:System.Messaging.Message.ConnectorType%2A>proprietà quando si invia un messaggio tramite un&quot;applicazione di connessione.</xref:System.Messaging.Message.ConnectorType%2A>"
  syntax:
    content: public byte[] SenderId { get; }
    return:
      type: System.Byte[]
      description: "Matrice di valori di byte che identifica il mittente. Quando si autentica il messaggio per verificare il mittente del messaggio e i diritti di accesso del mittente per la coda, il gestore delle code ricevente utilizza l&quot;identificatore."
  overload: System.Messaging.Message.SenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà ID mittente."
  platform:
  - net462
- uid: System.Messaging.Message.SenderVersion
  id: SenderVersion
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: System.Messaging.Message.SenderVersion
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene la versione di Accodamento messaggi consente di inviare il messaggio."
  remarks: "La proprietà SenderVersion è importante per determinate funzionalità. Ad esempio, l&quot;elaborazione delle transazioni è supportato solo da Accodamento messaggi 2.0 e versioni successive e le firme digitali vengono utilizzate per autenticare i messaggi inviati da MSMQ 1.0.       Il gestore delle code mittente imposta la proprietà di SenderVersion quando viene inviato il messaggio."
  example:
  - "The following code example displays the value of a message's SenderVersion property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public long SenderVersion { get; }
    return:
      type: System.Int64
      description: "La versione di Accodamento messaggi consente di inviare il messaggio."
  overload: System.Messaging.Message.SenderVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà SenderVersion."
  platform:
  - net462
- uid: System.Messaging.Message.SentTime
  id: SentTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SentTime
  nameWithType: Message.SentTime
  fullName: System.Messaging.Message.SentTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene la data e l&quot;ora sul computer mittente che il messaggio è stato inviato dal gestore code di origine."
  remarks: "La proprietà ora di invio viene aggiornata all&quot;ora locale del computer in cui l&quot;istanza di <xref:System.Messaging.Message>classe è stata creata.</xref:System.Messaging.Message> In questo fuso orario può essere diverso da quelli delle code di origine e di destinazione."
  example:
  - "The following code example displays the value of a message's SentTime property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public DateTime SentTime { get; }
    return:
      type: System.DateTime
      description: "Oggetto <xref:System.DateTime>che rappresenta l&quot;ora di invio del messaggio.</xref:System.DateTime>"
  overload: System.Messaging.Message.SentTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà ora di invio."
  platform:
  - net462
- uid: System.Messaging.Message.SourceMachine
  id: SourceMachine
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: System.Messaging.Message.SourceMachine
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene il computer da cui proviene il messaggio."
  remarks: "Il formato della proprietà SourceMachine non includere barre rovesciate due (\\\\\\\\). Ad esempio, `myServer` è un SourceMachine valido."
  example:
  - "The following code example displays the value of a message's SourceMachine property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string SourceMachine { get; }
    return:
      type: System.String
      description: "Il nome del computer da cui è stato inviato il messaggio."
  overload: System.Messaging.Message.SourceMachine*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà SourceMachine."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Il servizio di informazioni o la directory di computer potrebbe non essere accessibili."
  platform:
  - net462
- uid: System.Messaging.Message.TimeToBeReceived
  id: TimeToBeReceived
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: System.Messaging.Message.TimeToBeReceived
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta la quantità massima di tempo per il messaggio venga ricevuto dalla coda di destinazione."
  remarks: "La proprietà TimeToBeReceived specifica il tempo totale per un messaggio inviato venga ricevuto dalla coda di destinazione. Il limite di tempo include il tempo trascorso per raggiungere la coda di destinazione e il tempo di attesa nella coda prima che venga ricevuto il messaggio.      > [!CAUTION] > Quando si utilizzano computer client dipendenti, assicurarsi che l&quot;orologio del computer client è sincronizzato con l&quot;orologio del server che esegue il servizio Accodamento messaggi. In caso contrario, risultati imprevisti quando l&quot;invio di un messaggio la cui proprietà TimeToBeReceived non <xref:System.Messaging.Message.InfiniteTimeout>.</xref:System.Messaging.Message.InfiniteTimeout>       Se l&quot;intervallo specificato dalla proprietà TimeToBeReceived scade prima che il messaggio viene rimosso dalla coda, Accodamento messaggi Elimina il messaggio in uno dei due modi. Se il messaggio <xref:System.Messaging.Message.UseDeadLetterQueue%2A>proprietà `true`, il messaggio viene inviato alla coda di messaggi non recapitabili.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> Se <xref:System.Messaging.Message.UseDeadLetterQueue%2A>è `false`, il messaggio viene ignorato.</xref:System.Messaging.Message.UseDeadLetterQueue%2A>       È possibile impostare il messaggio <xref:System.Messaging.Message.AcknowledgeType%2A>proprietà per richiedere che il servizio Accodamento messaggi invia un messaggio di riconoscimento negativo nuovamente all&quot;applicazione mittente se non viene recuperato il messaggio prima della scadenza del timer.</xref:System.Messaging.Message.AcknowledgeType%2A>       Se il valore specificato dalla proprietà TimeToBeReceived è minore del valore specificato per la <xref:System.Messaging.Message.TimeToReachQueue%2A>proprietà TimeToBeReceived ha la precedenza.</xref:System.Messaging.Message.TimeToReachQueue%2A>       Quando più messaggi vengono inviati in una singola transazione, Accodamento messaggi utilizza la proprietà TimeToBeReceived del primo messaggio."
  example:
  - "The following code example gets and sets the value of a message's TimeToBeReceived property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public TimeSpan TimeToBeReceived { get; set; }
    return:
      type: System.TimeSpan
      description: "Tempo totale per un messaggio venga ricevuto dalla coda di destinazione. Il valore predefinito è <xref href=&quot;System.Messaging.Message.InfiniteTimeout&quot;> </xref>."
  overload: System.Messaging.Message.TimeToBeReceived*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà TimeToBeReceived."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il valore specificato per TimeToBeReceived non è valido."
  platform:
  - net462
- uid: System.Messaging.Message.TimeToReachQueue
  id: TimeToReachQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: System.Messaging.Message.TimeToReachQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta la quantità massima di tempo per il messaggio raggiungere la coda."
  remarks: "Se l&quot;intervallo specificato dalla proprietà TimeToReachQueue scade prima che il messaggio raggiunga la destinazione, Accodamento messaggi Elimina il messaggio in uno dei due modi. Se il messaggio <xref:System.Messaging.Message.UseDeadLetterQueue%2A>proprietà `true`, il messaggio viene inviato alla coda di messaggi non recapitabili.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> Se <xref:System.Messaging.Message.UseDeadLetterQueue%2A>è `false`, viene ignorato il messaggio è possibile impostare del messaggio può <xref:System.Messaging.Message.AcknowledgeType%2A>proprietà per richiedere che il servizio Accodamento messaggi invia un messaggio di riconoscimento negativo nuovamente all&quot;applicazione mittente se il messaggio arriva prima della scadenza del timer.</xref:System.Messaging.Message.AcknowledgeType%2A> </xref:System.Messaging.Message.UseDeadLetterQueue%2A>       Se la proprietà TimeToReachQueue è impostata su 0 secondi, Accodamento messaggi esegue un tentativo di inviare il messaggio alla destinazione, se la coda è in attesa del messaggio. Se la coda è locale, il messaggio raggiunge sempre.       Se il valore specificato dalla proprietà TimeToReachQueue è maggiore del valore specificato per il <xref:System.Messaging.Message.TimeToBeReceived%2A>proprietà <xref:System.Messaging.Message.TimeToBeReceived%2A>ha la precedenza.</xref:System.Messaging.Message.TimeToBeReceived%2A> </xref:System.Messaging.Message.TimeToBeReceived%2A>       Quando più messaggi vengono inviati in una singola transazione, Accodamento messaggi utilizza la proprietà TimeToReachQueue del primo messaggio."
  example:
  - "The following code example gets and sets the value of a message's TimeToReachQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public TimeSpan TimeToReachQueue { get; set; }
    return:
      type: System.TimeSpan
      description: "Il limite di tempo per il messaggio raggiungere la coda di destinazione, a partire dal momento in cui il messaggio viene inviato. Il valore predefinito è <xref href=&quot;System.Messaging.Message.InfiniteTimeout&quot;> </xref>."
  overload: System.Messaging.Message.TimeToReachQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà TimeToReachQueue."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il valore specificato per TimeToReachQueue non è valido. Potrebbe rappresentare un numero negativo."
  platform:
  - net462
- uid: System.Messaging.Message.TransactionId
  id: TransactionId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: System.Messaging.Message.TransactionId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene l&quot;identificatore per la transazione di cui il messaggio è una parte."
  remarks: "Le applicazioni riceventi utilizzano la proprietà TransactionId per verificare che un messaggio è stato inviato come parte di una transazione specifica. L&quot;identificatore di transazione contiene l&quot;identificatore del computer di invio (primi 16 bit) seguito da un numero di sequenza della transazione a 4 byte.       Questa proprietà è disponibile solo per il servizio Accodamento messaggi versione 2.0 e versioni successive.       Identificatori della transazione non sono necessariamente essere univoco, perché i numeri di sequenza delle transazioni non sono persistenti e ripartono 2 <sup>20</sup>. Accodamento messaggi garantisce solo che le transazioni successive avranno diversi numeri di sequenza.       È possibile utilizzare la proprietà TransactionId lungo con il <xref:System.Messaging.Message.IsFirstInTransaction%2A>e <xref:System.Messaging.Message.IsLastInTransaction%2A>per verificare i limiti delle transazioni.</xref:System.Messaging.Message.IsLastInTransaction%2A> </xref:System.Messaging.Message.IsFirstInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's TransactionId property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string TransactionId { get; }
    return:
      type: System.String
      description: "L&quot;identificatore per la transazione associata al messaggio."
  overload: System.Messaging.Message.TransactionId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà ID transazione."
  platform:
  - net462
- uid: System.Messaging.Message.TransactionStatusQueue
  id: TransactionStatusQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: System.Messaging.Message.TransactionStatusQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene la coda di stato transazioni sul computer di origine."
  remarks: "La proprietà TransactionStatusQueue identifica la coda transazionale nel computer di origine che riceve messaggi di riconoscimento letti dalle applicazioni di connessione. Accodamento messaggi imposta la proprietà e le applicazioni di connettore usare la proprietà durante il recupero dei messaggi di transazione inviati alle code esterne.       Una coda esterna esiste in un sistema di accodamento diverso da Accodamento messaggi Microsoft. Il servizio Accodamento messaggi comunica con queste code tramite un&quot;applicazione di connessione.       L&quot;applicazione di connessione è possibile utilizzare la coda di stato di transazione per inviare messaggi di riconoscimento all&quot;applicazione mittente. La coda di stato di transazione deve ricevere questi riconoscimenti anche se l&quot;applicazione di invio non richiede altri."
  example:
  - "The following code example displays the value of a message's TransactionStatusQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "Coda di stato transazioni sul computer di origine, viene utilizzato per l&quot;invio di messaggi di acknowledgement restituito all&quot;applicazione mittente. Il valore predefinito è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.TransactionStatusQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il messaggio non è stato inviato. Questa proprietà può essere letta solo messaggi recuperati da una coda.       - oppure - la coda di messaggi viene filtrata per ignorare la proprietà TransactionStatusQueue."
  platform:
  - net462
- uid: System.Messaging.Message.UseAuthentication
  id: UseAuthentication
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: System.Messaging.Message.UseAuthentication
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta un valore che indica se il messaggio di stato (o deve essere) autenticato prima dell&quot;invio."
  remarks: "La proprietà UseAuthentication specifica se il messaggio deve essere autenticato. Se l&quot;applicazione mittente lo richiede l&quot;autenticazione, Accodamento messaggi consente di creare una firma digitale e viene utilizzato per firmare il messaggio durante l&quot;invio e autenticare il messaggio quando viene ricevuto.       Se è UseAuthentication `false` e un messaggio viene inviato a una coda che accetta solo messaggi autenticati, il messaggio verrà rifiutato quando raggiunge la coda.       È possibile determinare se un messaggio di autenticazione non riuscita per visualizzare le relative proprietà. Accodamento messaggi elimina tali messaggi prima che vengano recapitati alla coda. Tuttavia, è possibile richiedere di essere inviato un messaggio di conferma se un errore di recapito impedisce che un messaggio arriva nella coda."
  syntax:
    content: public bool UseAuthentication { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;applicazione mittente richiede l&quot;autenticazione per il messaggio. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseAuthentication*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà UseAuthentication."
  platform:
  - net462
- uid: System.Messaging.Message.UseDeadLetterQueue
  id: UseDeadLetterQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: System.Messaging.Message.UseDeadLetterQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta un valore che indica se una copia del messaggio non recapitato deve essere inviata a una coda di messaggi non recapitabili."
  remarks: "Il <xref:System.Messaging.Message.UseJournalQueue%2A>e proprietà UseDeadLetterQueue specificare come il servizio Accodamento messaggi di traccia dei messaggi.</xref:System.Messaging.Message.UseJournalQueue%2A> Se è UseDeadLetterQueue `true`, errore di recapito (di un messaggio non transazionale), fa sì che il messaggio da inviare alla coda di messaggi non recapitabili non transazionale nel computer che non ha potuto recapitare il messaggio. Errore di recapito può essere causato da un timer di messaggio che scade, ad esempio.       In caso di errore di recapito per un messaggio transazionale, Accodamento messaggi invia il messaggio nella coda di messaggi non recapitabili transazionale nel computer di origine in tutti i casi negativi e in dubbio.       Quando si archiviano i messaggi in una coda di messaggi non recapitabili, è necessario cancellare la coda periodicamente per rimuovere i messaggi che non sono più necessari. Messaggi memorizzati nel numero di code di messaggi non recapitabili rispetto alla quota di dimensioni per il computer in cui risiede la coda. La quota del computer è impostata dall&quot;amministratore e fa riferimento alle dimensioni allocate per memorizzare messaggi sull&quot;intero computer, non solo in una singola coda.       Non si crea un journal o una coda di messaggi non recapitabili. Sono entrambe code di sistema di Accodamento messaggi genera l&quot;errore."
  example:
  - "The following code example gets and sets the value of a message's UseDeadLetterQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseDeadLetterQueue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se una copia del messaggio inviato a una coda di messaggi non recapitabili e dovrebbe restituire un errore di recapito dei messaggi in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseDeadLetterQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà UseDeadLetterQueue."
  platform:
  - net462
- uid: System.Messaging.Message.UseEncryption
  id: UseEncryption
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: System.Messaging.Message.UseEncryption
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta un valore che indica se il messaggio privato."
  remarks: "Se un messaggio è privato, il corpo viene crittografato prima che venga inviato e decrittografata quando vengono ricevuti. Per inviare un messaggio privato, l&quot;applicazione di invio è necessario specificare la crittografia utilizzata e, facoltativamente, l&quot;algoritmo di crittografia.       Quando si inviano messaggi privati, l&quot;applicazione non è necessario eseguire la crittografia del messaggio. Il servizio Accodamento messaggi è possibile crittografare il corpo del messaggio per l&quot;utente se l&quot;applicazione invia messaggi all&quot;interno di un&quot;azienda di Microsoft Windows 2000, che dispone dell&quot;accesso al servizio directory. Quando si ricevono messaggi privati, il gestore delle code ricevente sempre decrittografa il corpo del messaggio."
  example:
  - "The following code example gets and sets the value of a message's UseEncryption property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseEncryption { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per richiedere l&quot;accodamento crittografare il messaggio. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseEncryption*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà UseEncryption."
  platform:
  - net462
- uid: System.Messaging.Message.UseJournalQueue
  id: UseJournalQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: System.Messaging.Message.UseJournalQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta un valore che indica se una copia del messaggio deve essere conservata in un computer di origine."
  remarks: "La proprietà UseJournalQueue e <xref:System.Messaging.Message.UseDeadLetterQueue%2A>specificano come il servizio Accodamento messaggi di traccia dei messaggi.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> Se è UseJournalQueue `true`, quindi una copia viene mantenuta nella coda journal di computer nel computer di origine a ogni passaggio che è stato trasmesso un messaggio.       Il messaggio inviato viene copiato nella coda journal solo se la coda di destinazione si trova in un computer remoto. Se la destinazione è il computer locale, il messaggio viene inviato direttamente alla coda. non sono passaggi intermedi in modo da richiedere l&quot;inserimento nel journal.       Quando si archiviano i messaggi in una coda journal, cancellare la coda periodicamente per rimuovere i messaggi che non sono più necessari. Messaggi memorizzati nelle code diario rispetto alla quota per il computer in cui risiede la coda. (La quota del computer è impostata dall&quot;amministratore).       Non si crea un journal o una coda di messaggi non recapitabili. Sono entrambe code di sistema di Accodamento messaggi genera l&quot;errore."
  example:
  - "The following code example gets and sets the value of a message's UseJournalQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseJournalQueue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per richiedere che una copia di un messaggio nel journal del computer di origine dopo che il messaggio è stato trasmesso (dal computer di origine al server successivo); in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseJournalQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà UseJournalQueue."
  platform:
  - net462
- uid: System.Messaging.Message.UseTracing
  id: UseTracing
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: System.Messaging.Message.UseTracing
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene o imposta un valore che indica se un messaggio di traccia durante lo spostamento verso la coda di destinazione."
  remarks: "La proprietà UseTracing specifica se tenere traccia della route di un messaggio mentre si sposta verso la coda di destinazione. Se `true`, un report (generati da Accodamento messaggi) viene inviato alla coda dei rapporti ogni volta che il messaggio passa attraverso un server di Accodamento. La coda del report viene specificata dal gestore code di origine. Le code del report non sono limitate ai messaggi di report generati da Accodamento messaggi; i messaggi generati dall&quot;applicazione possono anche essere inviati alle code di report.       Utilizzo dell&quot;analisi, è necessario configurazione di Active Directory e specificare una coda dei rapporti di Accodamento messaggi. L&quot;amministratore configura le impostazioni."
  example:
  - "The following code example gets and sets the value of a message's UseTracing property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseTracing { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se ogni fase intermedia dell&quot;invio del messaggio alla coda di destinazione viene generato un report da inviare alla coda dei report del sistema; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseTracing*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La coda di messaggi viene filtrata per ignorare la proprietà UseTracing."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.Message.#ctor
  parent: System.Messaging.Message
  isExternal: false
  name: Message()
  nameWithType: Message.Message()
  fullName: System.Messaging.Message.Message()
- uid: System.Messaging.Message.#ctor(System.Object)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: System.Messaging.Message.Message(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object,IMessageFormatter)
  nameWithType: Message.Message(Object,IMessageFormatter)
  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)
- uid: System.Messaging.IMessageFormatter
  parent: System.Messaging
  isExternal: false
  name: IMessageFormatter
  nameWithType: IMessageFormatter
  fullName: System.Messaging.IMessageFormatter
- uid: System.Messaging.Message.AcknowledgeType
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: System.Messaging.Message.AcknowledgeType
- uid: System.Messaging.AcknowledgeTypes
  parent: System.Messaging
  isExternal: false
  name: AcknowledgeTypes
  nameWithType: AcknowledgeTypes
  fullName: System.Messaging.AcknowledgeTypes
- uid: System.Messaging.Message.Acknowledgment
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: System.Messaging.Message.Acknowledgment
- uid: System.Messaging.Acknowledgment
  parent: System.Messaging
  isExternal: false
  name: Acknowledgment
  nameWithType: Acknowledgment
  fullName: System.Messaging.Acknowledgment
- uid: System.Messaging.Message.AdministrationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: System.Messaging.Message.AdministrationQueue
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.Message.AppSpecific
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: System.Messaging.Message.AppSpecific
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Messaging.Message.ArrivedTime
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: System.Messaging.Message.ArrivedTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Messaging.Message.AttachSenderId
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: System.Messaging.Message.AttachSenderId
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message.Authenticated
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: System.Messaging.Message.Authenticated
- uid: System.Messaging.Message.AuthenticationProviderName
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: System.Messaging.Message.AuthenticationProviderName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Messaging.Message.AuthenticationProviderType
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: System.Messaging.Message.AuthenticationProviderType
- uid: System.Messaging.CryptographicProviderType
  parent: System.Messaging
  isExternal: false
  name: CryptographicProviderType
  nameWithType: CryptographicProviderType
  fullName: System.Messaging.CryptographicProviderType
- uid: System.Messaging.Message.Body
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
  fullName: System.Messaging.Message.Body
- uid: System.Messaging.Message.BodyStream
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: System.Messaging.Message.BodyStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Messaging.Message.BodyType
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
  fullName: System.Messaging.Message.BodyType
- uid: System.Messaging.Message.ConnectorType
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: System.Messaging.Message.ConnectorType
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Messaging.Message.CorrelationId
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: System.Messaging.Message.CorrelationId
- uid: System.Messaging.Message.DestinationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: System.Messaging.Message.DestinationQueue
- uid: System.Messaging.Message.DestinationSymmetricKey
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: System.Messaging.Message.DestinationSymmetricKey
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.Message.DigitalSignature
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: System.Messaging.Message.DigitalSignature
- uid: System.Messaging.Message.EncryptionAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: System.Messaging.Message.EncryptionAlgorithm
- uid: System.Messaging.EncryptionAlgorithm
  parent: System.Messaging
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: EncryptionAlgorithm
  fullName: System.Messaging.EncryptionAlgorithm
- uid: System.Messaging.Message.Extension
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
  fullName: System.Messaging.Message.Extension
- uid: System.Messaging.Message.Formatter
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
  fullName: System.Messaging.Message.Formatter
- uid: System.Messaging.Message.HashAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: System.Messaging.Message.HashAlgorithm
- uid: System.Messaging.HashAlgorithm
  parent: System.Messaging
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Messaging.HashAlgorithm
- uid: System.Messaging.Message.Id
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
  fullName: System.Messaging.Message.Id
- uid: System.Messaging.Message.InfiniteTimeout
  parent: System.Messaging.Message
  isExternal: false
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: System.Messaging.Message.InfiniteTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.Message.IsFirstInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: System.Messaging.Message.IsFirstInTransaction
- uid: System.Messaging.Message.IsLastInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: System.Messaging.Message.IsLastInTransaction
- uid: System.Messaging.Message.Label
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
  fullName: System.Messaging.Message.Label
- uid: System.Messaging.Message.LookupId
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
  fullName: System.Messaging.Message.LookupId
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Messaging.Message.MessageType
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
  fullName: System.Messaging.Message.MessageType
- uid: System.Messaging.MessageType
  parent: System.Messaging
  isExternal: false
  name: MessageType
  nameWithType: MessageType
  fullName: System.Messaging.MessageType
- uid: System.Messaging.Message.Priority
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
  fullName: System.Messaging.Message.Priority
- uid: System.Messaging.MessagePriority
  parent: System.Messaging
  isExternal: false
  name: MessagePriority
  nameWithType: MessagePriority
  fullName: System.Messaging.MessagePriority
- uid: System.Messaging.Message.Recoverable
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: System.Messaging.Message.Recoverable
- uid: System.Messaging.Message.ResponseQueue
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: System.Messaging.Message.ResponseQueue
- uid: System.Messaging.Message.SecurityContext
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: System.Messaging.Message.SecurityContext
- uid: System.Messaging.SecurityContext
  parent: System.Messaging
  isExternal: false
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Messaging.SecurityContext
- uid: System.Messaging.Message.SenderCertificate
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: System.Messaging.Message.SenderCertificate
- uid: System.Messaging.Message.SenderId
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
  fullName: System.Messaging.Message.SenderId
- uid: System.Messaging.Message.SenderVersion
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: System.Messaging.Message.SenderVersion
- uid: System.Messaging.Message.SentTime
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
  fullName: System.Messaging.Message.SentTime
- uid: System.Messaging.Message.SourceMachine
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: System.Messaging.Message.SourceMachine
- uid: System.Messaging.Message.TimeToBeReceived
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: System.Messaging.Message.TimeToBeReceived
- uid: System.Messaging.Message.TimeToReachQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: System.Messaging.Message.TimeToReachQueue
- uid: System.Messaging.Message.TransactionId
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: System.Messaging.Message.TransactionId
- uid: System.Messaging.Message.TransactionStatusQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: System.Messaging.Message.TransactionStatusQueue
- uid: System.Messaging.Message.UseAuthentication
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: System.Messaging.Message.UseAuthentication
- uid: System.Messaging.Message.UseDeadLetterQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: System.Messaging.Message.UseDeadLetterQueue
- uid: System.Messaging.Message.UseEncryption
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: System.Messaging.Message.UseEncryption
- uid: System.Messaging.Message.UseJournalQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: System.Messaging.Message.UseJournalQueue
- uid: System.Messaging.Message.UseTracing
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: System.Messaging.Message.UseTracing
- uid: System.Messaging.Message.#ctor*
  parent: System.Messaging.Message
  isExternal: false
  name: Message
  nameWithType: Message.Message
- uid: System.Messaging.Message.AcknowledgeType*
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
- uid: System.Messaging.Message.Acknowledgment*
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
- uid: System.Messaging.Message.AdministrationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
- uid: System.Messaging.Message.AppSpecific*
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
- uid: System.Messaging.Message.ArrivedTime*
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
- uid: System.Messaging.Message.AttachSenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
- uid: System.Messaging.Message.Authenticated*
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
- uid: System.Messaging.Message.AuthenticationProviderName*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
- uid: System.Messaging.Message.AuthenticationProviderType*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
- uid: System.Messaging.Message.Body*
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
- uid: System.Messaging.Message.BodyStream*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
- uid: System.Messaging.Message.BodyType*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
- uid: System.Messaging.Message.ConnectorType*
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
- uid: System.Messaging.Message.CorrelationId*
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
- uid: System.Messaging.Message.DestinationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
- uid: System.Messaging.Message.DestinationSymmetricKey*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
- uid: System.Messaging.Message.DigitalSignature*
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
- uid: System.Messaging.Message.EncryptionAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
- uid: System.Messaging.Message.Extension*
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
- uid: System.Messaging.Message.Formatter*
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
- uid: System.Messaging.Message.HashAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
- uid: System.Messaging.Message.Id*
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
- uid: System.Messaging.Message.IsFirstInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
- uid: System.Messaging.Message.IsLastInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
- uid: System.Messaging.Message.Label*
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
- uid: System.Messaging.Message.LookupId*
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
- uid: System.Messaging.Message.MessageType*
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
- uid: System.Messaging.Message.Priority*
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
- uid: System.Messaging.Message.Recoverable*
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
- uid: System.Messaging.Message.ResponseQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
- uid: System.Messaging.Message.SecurityContext*
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
- uid: System.Messaging.Message.SenderCertificate*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
- uid: System.Messaging.Message.SenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
- uid: System.Messaging.Message.SenderVersion*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
- uid: System.Messaging.Message.SentTime*
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
- uid: System.Messaging.Message.SourceMachine*
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
- uid: System.Messaging.Message.TimeToBeReceived*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
- uid: System.Messaging.Message.TimeToReachQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
- uid: System.Messaging.Message.TransactionId*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
- uid: System.Messaging.Message.TransactionStatusQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
- uid: System.Messaging.Message.UseAuthentication*
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
- uid: System.Messaging.Message.UseDeadLetterQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
- uid: System.Messaging.Message.UseEncryption*
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
- uid: System.Messaging.Message.UseJournalQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
- uid: System.Messaging.Message.UseTracing*
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
