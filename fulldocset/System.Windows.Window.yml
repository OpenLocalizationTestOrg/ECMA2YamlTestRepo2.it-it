### YamlMime:ManagedReference
items:
- uid: System.Windows.Window
  id: Window
  children:
  - System.Windows.Window.#ctor
  - System.Windows.Window.Activate
  - System.Windows.Window.Activated
  - System.Windows.Window.AllowsTransparency
  - System.Windows.Window.AllowsTransparencyProperty
  - System.Windows.Window.ArrangeOverride(System.Windows.Size)
  - System.Windows.Window.Close
  - System.Windows.Window.Closed
  - System.Windows.Window.Closing
  - System.Windows.Window.ContentRendered
  - System.Windows.Window.Deactivated
  - System.Windows.Window.DialogResult
  - System.Windows.Window.DpiChanged
  - System.Windows.Window.DpiChangedEvent
  - System.Windows.Window.DragMove
  - System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  - System.Windows.Window.Hide
  - System.Windows.Window.Icon
  - System.Windows.Window.IconProperty
  - System.Windows.Window.IsActive
  - System.Windows.Window.IsActiveProperty
  - System.Windows.Window.Left
  - System.Windows.Window.LeftProperty
  - System.Windows.Window.LocationChanged
  - System.Windows.Window.LogicalChildren
  - System.Windows.Window.MeasureOverride(System.Windows.Size)
  - System.Windows.Window.OnActivated(System.EventArgs)
  - System.Windows.Window.OnClosed(System.EventArgs)
  - System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  - System.Windows.Window.OnContentChanged(System.Object,System.Object)
  - System.Windows.Window.OnContentRendered(System.EventArgs)
  - System.Windows.Window.OnCreateAutomationPeer
  - System.Windows.Window.OnDeactivated(System.EventArgs)
  - System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  - System.Windows.Window.OnLocationChanged(System.EventArgs)
  - System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  - System.Windows.Window.OnSourceInitialized(System.EventArgs)
  - System.Windows.Window.OnStateChanged(System.EventArgs)
  - System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.Window.OwnedWindows
  - System.Windows.Window.Owner
  - System.Windows.Window.ResizeMode
  - System.Windows.Window.ResizeModeProperty
  - System.Windows.Window.RestoreBounds
  - System.Windows.Window.Show
  - System.Windows.Window.ShowActivated
  - System.Windows.Window.ShowActivatedProperty
  - System.Windows.Window.ShowDialog
  - System.Windows.Window.ShowInTaskbar
  - System.Windows.Window.ShowInTaskbarProperty
  - System.Windows.Window.SizeToContent
  - System.Windows.Window.SizeToContentProperty
  - System.Windows.Window.SourceInitialized
  - System.Windows.Window.StateChanged
  - System.Windows.Window.TaskbarItemInfo
  - System.Windows.Window.TaskbarItemInfoProperty
  - System.Windows.Window.Title
  - System.Windows.Window.TitleProperty
  - System.Windows.Window.Top
  - System.Windows.Window.Topmost
  - System.Windows.Window.TopmostProperty
  - System.Windows.Window.TopProperty
  - System.Windows.Window.WindowStartupLocation
  - System.Windows.Window.WindowState
  - System.Windows.Window.WindowStateProperty
  - System.Windows.Window.WindowStyle
  - System.Windows.Window.WindowStyleProperty
  langs:
  - csharp
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
  type: Class
  summary: "Fornisce la possibilità di creare, configurare, visualizzare e gestire la durata delle finestre e finestre di dialogo."
  remarks: "Il punto di interazione tra un utente e un&quot;applicazione autonoma è una finestra. Oggetto [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] finestra è costituita da due aree distinte:-un&quot;area non client, che ospita le aree di controllo di windows, tra cui un&quot;icona, titolo, il menu di sistema, pulsante Riduci a icona, Ingrandisci pulsante, il pulsante di ripristino, pulsante Chiudi e un bordo.      -Un&quot;area client, che ospita il contenuto specifico dell&quot;applicazione.       Una finestra standard è illustrata nella figura riportata di seguito: ![gli elementi della finestra](~/add/media/windowoverviewfigure1.PNG &quot;gli elementi della finestra&quot;) finestra incapsula la possibilità di creare, configurare, visualizzare e gestire la durata di finestre e finestre di dialogo e fornisce i seguenti servizi principali: **la gestione della durata**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated> <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed> <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated> <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A> <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</xref:System.Windows.Window.SourceInitialized> </xref:System.Windows.Window.Show%2A> </xref:System.Windows.Window.IsActive%2A> </xref:System.Windows.Window.Hide%2A> </xref:System.Windows.Window.Deactivated> </xref:System.Windows.Window.Closing> </xref:System.Windows.Window.Closed> </xref:System.Windows.Window.Close%2A> </xref:System.Windows.Window.Activated> </xref:System.Windows.Window.Activate%2A>       **Gestione delle finestre**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A> <xref:System.Windows.Window.Owner%2A>.</xref:System.Windows.Window.Owner%2A> </xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.GetWindow%2A>       **Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A>       **Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A></xref:System.Windows.Window.DialogResult%2A></xref:System.Windows.Window.WindowStyle%2A></xref:System.Windows.Window.WindowState%2A></xref:System.Windows.Window.WindowStartupLocation%2A></xref:System.Windows.Window.Topmost%2A></xref:System.Windows.Window.Top%2A></xref:System.Windows.Window.Title%2A></xref:System.Windows.Window.StateChanged></xref:System.Windows.Window.SizeToContent%2A></xref:System.Windows.Window.ShowInTaskbar%2A></xref:System.Windows.Window.ShowActivated%2A></xref:System.Windows.Window.RestoreBounds%2A></xref:System.Windows.Window.ResizeMode%2A></xref:System.Windows.Window.LocationChanged></xref:System.Windows.Window.Left%2A></xref:System.Windows.Window.Icon%2A></xref:System.Windows.Window.DragMove%2A></xref:System.Windows.Window.ContentRendered></xref:System.Windows.Window.AllowsTransparency%2A>       Inoltre, <xref:System.Windows.Application>espone il supporto speciale per la gestione di tutte le finestre in un&quot;applicazione:-applicazione gestisce un elenco di tutte le finestre che attualmente viene creata un&quot;istanza dell&quot;applicazione.</xref:System.Windows.Application> Questo elenco è esposto dal <xref:System.Windows.Application.Windows%2A>proprietà.</xref:System.Windows.Application.Windows%2A>      -Per impostazione predefinita, <xref:System.Windows.Application.MainWindow%2A>viene impostato automaticamente con un riferimento alla prima finestra che viene creata un&quot;istanza in un&quot;applicazione.</xref:System.Windows.Application.MainWindow%2A> Questa finestra principale dell&quot;applicazione, rendendo la finestra.       Una finestra può essere implementata tramite markup, markup e code-behind o codice.       Finestra viene utilizzata principalmente per visualizzare finestre e finestre di dialogo per le applicazioni autonome. Tuttavia, per le applicazioni che richiedono lo spostamento a livello di finestra, ad esempio le procedure guidate, è possibile utilizzare <xref:System.Windows.Navigation.NavigationWindow> <xref:System.Windows.Navigation.NavigationWindow>deriva dalla finestra e la estende con supporto di navigazione di tipo browser.</xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Navigation.NavigationWindow>      > [!NOTE] > Contenuto esplorabile può essere incorporate in altri contenitori, contenuti e il contenuto utilizzando <xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame>       Finestra richiede `UnmanagedCode` autorizzazione di sicurezza deve essere creata un&quot;istanza. Questo comporta le conseguenze seguenti:- [!INCLUDE[TLA#tla_clickonce](~/add/includes/tlasharptla-clickonce-md.md)]-le applicazioni autonome distribuite richiedono l&quot;elevazione delle autorizzazioni quando avviata da aree Internet o Intranet locale.      - [!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)] che non richiedono le autorizzazioni complete non sarà in grado di creare un&quot;istanza di windows o le finestre di dialogo.       Per informazioni sulla distribuzione delle applicazioni autonome e considerazioni sulla sicurezza, vedere [strategia di sicurezza di WPF - sicurezza della piattaforma](~/add/includes/ajax-current-ext-md.md).       Una finestra è un <xref:System.Windows.Controls.ContentControl>, il che significa che può contenere un singolo oggetto di qualsiasi tipo (ad esempio una stringa, un&quot;immagine o un pannello).</xref:System.Windows.Controls.ContentControl> Per ulteriori informazioni, vedere la <xref:System.Windows.Controls.ContentControl>classe.</xref:System.Windows.Controls.ContentControl> Inoltre, finestra è un elemento radice e, pertanto, non può far parte del contenuto di un altro elemento.      > [!NOTE] > Il <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, e <xref:System.Windows.Window.Left%2A>non verranno applicate le proprietà impostate in una finestra tramite uno stile in fase di esecuzione.</xref:System.Windows.Window.Left%2A> </xref:System.Windows.Window.Top%2A> </xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A>      ## Personalizzare la finestra di controllo per applicare le stesse impostazioni di proprietà a più controlli di finestra, utilizzare il <xref:System.Windows.FrameworkElement.Style%2A>proprietà.</xref:System.Windows.FrameworkElement.Style%2A> È possibile modificare il valore predefinito <xref:System.Windows.Controls.ControlTemplate>per fornire al controllo un aspetto univoco.</xref:System.Windows.Controls.ControlTemplate> Per ulteriori informazioni sulla creazione di un <xref:System.Windows.Controls.ControlTemplate>, vedere [personalizzazione dell&quot;aspetto di un controllo esistente tramite la creazione di ControlTemplate](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.Controls.ControlTemplate>  Per visualizzare le parti e stati specifici di finestra, vedere [finestra Stili e modelli](~/add/includes/ajax-current-ext-md.md).       Proprietà di dipendenza per questo controllo potrebbe essere impostata dallo stile predefinito del controllo.  Se una proprietà viene impostata da uno stile predefinito, la proprietà può variare rispetto al valore predefinito quando il controllo viene visualizzato nell&quot;applicazione. Lo stile predefinito è determinato dal tema del desktop viene utilizzato quando l&quot;applicazione è in esecuzione.  Per ulteriori informazioni, vedere [temi WPF predefiniti](http://go.microsoft.com/fwlink/?LinkID=158252).      > [!NOTE] > Impostando una proprietà visiva può avere effetto solo se la proprietà è sia presente nel modello predefinito del controllo di finestra che viene impostata tramite una. È possibile trovare un elenco di proprietà visive nella sezione &quot;Modifica la struttura Visual di un controllo&quot; [personalizzazione dell&quot;aspetto di un controllo esistente tramite la creazione di ControlTemplate](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md)."
  example:
  - "The following example shows how a standard window is defined using only markup:  \n  \n [!code-xml[WindowSnippets#WindowMARKUPONLY](~/add/codesnippet/xaml/WindowSnippets.CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  \n  \n The following example shows how a standard window is defined using only code:  \n  \n [!code-cs[WindowSnippets#WindowCODEONLY](~/add/codesnippet/csharp/WindowSnippets.CSharp/CodeOnlyWindow.cs#windowcodeonly)]\n [!code-vb[WindowSnippets#WindowCODEONLY](~/add/codesnippet/visualbasic/windowsnippets/codeonlywindow.vb#windowcodeonly)]  \n  \n The following example shows how a standard window is defined using a combination of markup and code-behind.  \n  \n [!code-xml[WindowSnippets#WindowXAML](~/add/codesnippet/xaml/WindowSnippets.CSharp/MainWindow.xaml#windowxaml)]  \n  \n [!code-cs[WindowSnippets#WindowCODEBEHIND](~/add/codesnippet/csharp/WindowSnippets.CSharp/MainWindow.xaml.cs#windowcodebehind)]\n [!code-vb[WindowSnippets#WindowCODEBEHIND](~/add/codesnippet/visualbasic/windowsnippets/mainwindow.xaml.vb#windowcodebehind)]"
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)]

      public class Window : System.Windows.Controls.ContentControl
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Media.Visual
  - System.Windows.UIElement
  - System.Windows.FrameworkElement
  - System.Windows.Controls.Control
  - System.Windows.Controls.ContentControl
  implements: []
  inheritedMembers:
  - System.Windows.Controls.ContentControl.AddChild(System.Object)
  - System.Windows.Controls.ContentControl.AddText(System.String)
  - System.Windows.Controls.ContentControl.Content
  - System.Windows.Controls.ContentControl.ContentProperty
  - System.Windows.Controls.ContentControl.ContentStringFormat
  - System.Windows.Controls.ContentControl.ContentStringFormatProperty
  - System.Windows.Controls.ContentControl.ContentTemplate
  - System.Windows.Controls.ContentControl.ContentTemplateProperty
  - System.Windows.Controls.ContentControl.ContentTemplateSelector
  - System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty
  - System.Windows.Controls.ContentControl.HasContent
  - System.Windows.Controls.ContentControl.HasContentProperty
  - System.Windows.Controls.ContentControl.OnContentStringFormatChanged(System.String,System.String)
  - System.Windows.Controls.ContentControl.OnContentTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)
  - System.Windows.Controls.ContentControl.OnContentTemplateSelectorChanged(System.Windows.Controls.DataTemplateSelector,System.Windows.Controls.DataTemplateSelector)
  - System.Windows.Controls.ContentControl.ShouldSerializeContent
  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddChild(System.Object)
  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddText(System.String)
  - System.Windows.Controls.Control.Background
  - System.Windows.Controls.Control.BackgroundProperty
  - System.Windows.Controls.Control.BorderBrush
  - System.Windows.Controls.Control.BorderBrushProperty
  - System.Windows.Controls.Control.BorderThickness
  - System.Windows.Controls.Control.BorderThicknessProperty
  - System.Windows.Controls.Control.FontFamily
  - System.Windows.Controls.Control.FontFamilyProperty
  - System.Windows.Controls.Control.FontSize
  - System.Windows.Controls.Control.FontSizeProperty
  - System.Windows.Controls.Control.FontStretch
  - System.Windows.Controls.Control.FontStretchProperty
  - System.Windows.Controls.Control.FontStyle
  - System.Windows.Controls.Control.FontStyleProperty
  - System.Windows.Controls.Control.FontWeight
  - System.Windows.Controls.Control.FontWeightProperty
  - System.Windows.Controls.Control.Foreground
  - System.Windows.Controls.Control.ForegroundProperty
  - System.Windows.Controls.Control.HandlesScrolling
  - System.Windows.Controls.Control.HorizontalContentAlignment
  - System.Windows.Controls.Control.HorizontalContentAlignmentProperty
  - System.Windows.Controls.Control.IsTabStop
  - System.Windows.Controls.Control.IsTabStopProperty
  - System.Windows.Controls.Control.MouseDoubleClick
  - System.Windows.Controls.Control.MouseDoubleClickEvent
  - System.Windows.Controls.Control.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.Controls.Control.OnPreviewMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)
  - System.Windows.Controls.Control.Padding
  - System.Windows.Controls.Control.PaddingProperty
  - System.Windows.Controls.Control.PreviewMouseDoubleClick
  - System.Windows.Controls.Control.PreviewMouseDoubleClickEvent
  - System.Windows.Controls.Control.TabIndex
  - System.Windows.Controls.Control.TabIndexProperty
  - System.Windows.Controls.Control.Template
  - System.Windows.Controls.Control.TemplateProperty
  - System.Windows.Controls.Control.ToString
  - System.Windows.Controls.Control.VerticalContentAlignment
  - System.Windows.Controls.Control.VerticalContentAlignmentProperty
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.FrameworkElement.ActualHeight
  - System.Windows.FrameworkElement.ActualHeightProperty
  - System.Windows.FrameworkElement.ActualWidth
  - System.Windows.FrameworkElement.ActualWidthProperty
  - System.Windows.FrameworkElement.AddLogicalChild(System.Object)
  - System.Windows.FrameworkElement.ApplyTemplate
  - System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)
  - System.Windows.FrameworkElement.BeginInit
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  - System.Windows.FrameworkElement.BindingGroup
  - System.Windows.FrameworkElement.BindingGroupProperty
  - System.Windows.FrameworkElement.BringIntoView
  - System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)
  - System.Windows.FrameworkElement.ContextMenu
  - System.Windows.FrameworkElement.ContextMenuClosing
  - System.Windows.FrameworkElement.ContextMenuClosingEvent
  - System.Windows.FrameworkElement.ContextMenuOpening
  - System.Windows.FrameworkElement.ContextMenuOpeningEvent
  - System.Windows.FrameworkElement.ContextMenuProperty
  - System.Windows.FrameworkElement.Cursor
  - System.Windows.FrameworkElement.CursorProperty
  - System.Windows.FrameworkElement.DataContext
  - System.Windows.FrameworkElement.DataContextChanged
  - System.Windows.FrameworkElement.DataContextProperty
  - System.Windows.FrameworkElement.DefaultStyleKey
  - System.Windows.FrameworkElement.DefaultStyleKeyProperty
  - System.Windows.FrameworkElement.EndInit
  - System.Windows.FrameworkElement.FindName(System.String)
  - System.Windows.FrameworkElement.FindResource(System.Object)
  - System.Windows.FrameworkElement.FlowDirection
  - System.Windows.FrameworkElement.FlowDirectionProperty
  - System.Windows.FrameworkElement.FocusVisualStyle
  - System.Windows.FrameworkElement.FocusVisualStyleProperty
  - System.Windows.FrameworkElement.ForceCursor
  - System.Windows.FrameworkElement.ForceCursorProperty
  - System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)
  - System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)
  - System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)
  - System.Windows.FrameworkElement.GetTemplateChild(System.String)
  - System.Windows.FrameworkElement.GetUIParentCore
  - System.Windows.FrameworkElement.GetVisualChild(System.Int32)
  - System.Windows.FrameworkElement.Height
  - System.Windows.FrameworkElement.HeightProperty
  - System.Windows.FrameworkElement.HorizontalAlignment
  - System.Windows.FrameworkElement.HorizontalAlignmentProperty
  - System.Windows.FrameworkElement.InheritanceBehavior
  - System.Windows.FrameworkElement.Initialized
  - System.Windows.FrameworkElement.InputScope
  - System.Windows.FrameworkElement.InputScopeProperty
  - System.Windows.FrameworkElement.IsInitialized
  - System.Windows.FrameworkElement.IsLoaded
  - System.Windows.FrameworkElement.Language
  - System.Windows.FrameworkElement.LanguageProperty
  - System.Windows.FrameworkElement.LayoutTransform
  - System.Windows.FrameworkElement.LayoutTransformProperty
  - System.Windows.FrameworkElement.Loaded
  - System.Windows.FrameworkElement.LoadedEvent
  - System.Windows.FrameworkElement.Margin
  - System.Windows.FrameworkElement.MarginProperty
  - System.Windows.FrameworkElement.MaxHeight
  - System.Windows.FrameworkElement.MaxHeightProperty
  - System.Windows.FrameworkElement.MaxWidth
  - System.Windows.FrameworkElement.MaxWidthProperty
  - System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)
  - System.Windows.FrameworkElement.MinHeight
  - System.Windows.FrameworkElement.MinHeightProperty
  - System.Windows.FrameworkElement.MinWidth
  - System.Windows.FrameworkElement.MinWidthProperty
  - System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.FrameworkElement.Name
  - System.Windows.FrameworkElement.NameProperty
  - System.Windows.FrameworkElement.OnApplyTemplate
  - System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.FrameworkElement.OnInitialized(System.EventArgs)
  - System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  - System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)
  - System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OverridesDefaultStyle
  - System.Windows.FrameworkElement.OverridesDefaultStyleProperty
  - System.Windows.FrameworkElement.Parent
  - System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)
  - System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.FrameworkElement.RegisterName(System.String,System.Object)
  - System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)
  - System.Windows.FrameworkElement.RequestBringIntoView
  - System.Windows.FrameworkElement.RequestBringIntoViewEvent
  - System.Windows.FrameworkElement.Resources
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)
  - System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)
  - System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)
  - System.Windows.FrameworkElement.ShouldSerializeResources
  - System.Windows.FrameworkElement.ShouldSerializeStyle
  - System.Windows.FrameworkElement.ShouldSerializeTriggers
  - System.Windows.FrameworkElement.SizeChanged
  - System.Windows.FrameworkElement.SizeChangedEvent
  - System.Windows.FrameworkElement.SourceUpdated
  - System.Windows.FrameworkElement.Style
  - System.Windows.FrameworkElement.StyleProperty
  - System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.FrameworkElement.Tag
  - System.Windows.FrameworkElement.TagProperty
  - System.Windows.FrameworkElement.TargetUpdated
  - System.Windows.FrameworkElement.TemplatedParent
  - System.Windows.FrameworkElement.ToolTip
  - System.Windows.FrameworkElement.ToolTipClosing
  - System.Windows.FrameworkElement.ToolTipClosingEvent
  - System.Windows.FrameworkElement.ToolTipOpening
  - System.Windows.FrameworkElement.ToolTipOpeningEvent
  - System.Windows.FrameworkElement.ToolTipProperty
  - System.Windows.FrameworkElement.Triggers
  - System.Windows.FrameworkElement.TryFindResource(System.Object)
  - System.Windows.FrameworkElement.Unloaded
  - System.Windows.FrameworkElement.UnloadedEvent
  - System.Windows.FrameworkElement.UnregisterName(System.String)
  - System.Windows.FrameworkElement.UpdateDefaultStyle
  - System.Windows.FrameworkElement.UseLayoutRounding
  - System.Windows.FrameworkElement.UseLayoutRoundingProperty
  - System.Windows.FrameworkElement.VerticalAlignment
  - System.Windows.FrameworkElement.VerticalAlignmentProperty
  - System.Windows.FrameworkElement.VisualChildrenCount
  - System.Windows.FrameworkElement.Width
  - System.Windows.FrameworkElement.WidthProperty
  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.VisualBitmapEffect
  - System.Windows.Media.Visual.VisualBitmapEffectInput
  - System.Windows.Media.Visual.VisualBitmapScalingMode
  - System.Windows.Media.Visual.VisualCacheMode
  - System.Windows.Media.Visual.VisualClearTypeHint
  - System.Windows.Media.Visual.VisualClip
  - System.Windows.Media.Visual.VisualEdgeMode
  - System.Windows.Media.Visual.VisualEffect
  - System.Windows.Media.Visual.VisualOffset
  - System.Windows.Media.Visual.VisualOpacity
  - System.Windows.Media.Visual.VisualOpacityMask
  - System.Windows.Media.Visual.VisualParent
  - System.Windows.Media.Visual.VisualScrollableAreaClip
  - System.Windows.Media.Visual.VisualTextHintingMode
  - System.Windows.Media.Visual.VisualTextRenderingMode
  - System.Windows.Media.Visual.VisualTransform
  - System.Windows.Media.Visual.VisualXSnappingGuidelines
  - System.Windows.Media.Visual.VisualYSnappingGuidelines
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.AllowDrop
  - System.Windows.UIElement.AllowDropProperty
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.AreAnyTouchesCaptured
  - System.Windows.UIElement.AreAnyTouchesCapturedProperty
  - System.Windows.UIElement.AreAnyTouchesCapturedWithin
  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.UIElement.AreAnyTouchesDirectlyOver
  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.UIElement.AreAnyTouchesOver
  - System.Windows.UIElement.AreAnyTouchesOverProperty
  - System.Windows.UIElement.Arrange(System.Windows.Rect)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.BitmapEffect
  - System.Windows.UIElement.BitmapEffectInput
  - System.Windows.UIElement.BitmapEffectInputProperty
  - System.Windows.UIElement.BitmapEffectProperty
  - System.Windows.UIElement.CacheMode
  - System.Windows.UIElement.CacheModeProperty
  - System.Windows.UIElement.CaptureMouse
  - System.Windows.UIElement.CaptureStylus
  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.Clip
  - System.Windows.UIElement.ClipProperty
  - System.Windows.UIElement.ClipToBounds
  - System.Windows.UIElement.ClipToBoundsProperty
  - System.Windows.UIElement.CommandBindings
  - System.Windows.UIElement.DesiredSize
  - System.Windows.UIElement.DragEnter
  - System.Windows.UIElement.DragEnterEvent
  - System.Windows.UIElement.DragLeave
  - System.Windows.UIElement.DragLeaveEvent
  - System.Windows.UIElement.DragOver
  - System.Windows.UIElement.DragOverEvent
  - System.Windows.UIElement.Drop
  - System.Windows.UIElement.DropEvent
  - System.Windows.UIElement.Effect
  - System.Windows.UIElement.EffectProperty
  - System.Windows.UIElement.Focus
  - System.Windows.UIElement.Focusable
  - System.Windows.UIElement.FocusableChanged
  - System.Windows.UIElement.FocusableProperty
  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.UIElement.GiveFeedback
  - System.Windows.UIElement.GiveFeedbackEvent
  - System.Windows.UIElement.GotFocus
  - System.Windows.UIElement.GotFocusEvent
  - System.Windows.UIElement.GotKeyboardFocus
  - System.Windows.UIElement.GotKeyboardFocusEvent
  - System.Windows.UIElement.GotMouseCapture
  - System.Windows.UIElement.GotMouseCaptureEvent
  - System.Windows.UIElement.GotStylusCapture
  - System.Windows.UIElement.GotStylusCaptureEvent
  - System.Windows.UIElement.GotTouchCapture
  - System.Windows.UIElement.GotTouchCaptureEvent
  - System.Windows.UIElement.HasAnimatedProperties
  - System.Windows.UIElement.HasEffectiveKeyboardFocus
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  - System.Windows.UIElement.InputBindings
  - System.Windows.UIElement.InputHitTest(System.Windows.Point)
  - System.Windows.UIElement.InvalidateArrange
  - System.Windows.UIElement.InvalidateMeasure
  - System.Windows.UIElement.InvalidateVisual
  - System.Windows.UIElement.IsArrangeValid
  - System.Windows.UIElement.IsEnabled
  - System.Windows.UIElement.IsEnabledChanged
  - System.Windows.UIElement.IsEnabledCore
  - System.Windows.UIElement.IsEnabledProperty
  - System.Windows.UIElement.IsFocused
  - System.Windows.UIElement.IsFocusedProperty
  - System.Windows.UIElement.IsHitTestVisible
  - System.Windows.UIElement.IsHitTestVisibleChanged
  - System.Windows.UIElement.IsHitTestVisibleProperty
  - System.Windows.UIElement.IsInputMethodEnabled
  - System.Windows.UIElement.IsKeyboardFocused
  - System.Windows.UIElement.IsKeyboardFocusedChanged
  - System.Windows.UIElement.IsKeyboardFocusedProperty
  - System.Windows.UIElement.IsKeyboardFocusWithin
  - System.Windows.UIElement.IsKeyboardFocusWithinChanged
  - System.Windows.UIElement.IsKeyboardFocusWithinProperty
  - System.Windows.UIElement.IsManipulationEnabled
  - System.Windows.UIElement.IsManipulationEnabledProperty
  - System.Windows.UIElement.IsMeasureValid
  - System.Windows.UIElement.IsMouseCaptured
  - System.Windows.UIElement.IsMouseCapturedChanged
  - System.Windows.UIElement.IsMouseCapturedProperty
  - System.Windows.UIElement.IsMouseCaptureWithin
  - System.Windows.UIElement.IsMouseCaptureWithinChanged
  - System.Windows.UIElement.IsMouseCaptureWithinProperty
  - System.Windows.UIElement.IsMouseDirectlyOver
  - System.Windows.UIElement.IsMouseDirectlyOverChanged
  - System.Windows.UIElement.IsMouseDirectlyOverProperty
  - System.Windows.UIElement.IsMouseOver
  - System.Windows.UIElement.IsMouseOverProperty
  - System.Windows.UIElement.IsStylusCaptured
  - System.Windows.UIElement.IsStylusCapturedChanged
  - System.Windows.UIElement.IsStylusCapturedProperty
  - System.Windows.UIElement.IsStylusCaptureWithin
  - System.Windows.UIElement.IsStylusCaptureWithinChanged
  - System.Windows.UIElement.IsStylusCaptureWithinProperty
  - System.Windows.UIElement.IsStylusDirectlyOver
  - System.Windows.UIElement.IsStylusDirectlyOverChanged
  - System.Windows.UIElement.IsStylusDirectlyOverProperty
  - System.Windows.UIElement.IsStylusOver
  - System.Windows.UIElement.IsStylusOverProperty
  - System.Windows.UIElement.IsVisible
  - System.Windows.UIElement.IsVisibleChanged
  - System.Windows.UIElement.IsVisibleProperty
  - System.Windows.UIElement.KeyDown
  - System.Windows.UIElement.KeyDownEvent
  - System.Windows.UIElement.KeyUp
  - System.Windows.UIElement.KeyUpEvent
  - System.Windows.UIElement.LayoutUpdated
  - System.Windows.UIElement.LostFocus
  - System.Windows.UIElement.LostFocusEvent
  - System.Windows.UIElement.LostKeyboardFocus
  - System.Windows.UIElement.LostKeyboardFocusEvent
  - System.Windows.UIElement.LostMouseCapture
  - System.Windows.UIElement.LostMouseCaptureEvent
  - System.Windows.UIElement.LostStylusCapture
  - System.Windows.UIElement.LostStylusCaptureEvent
  - System.Windows.UIElement.LostTouchCapture
  - System.Windows.UIElement.LostTouchCaptureEvent
  - System.Windows.UIElement.ManipulationBoundaryFeedback
  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  - System.Windows.UIElement.ManipulationCompleted
  - System.Windows.UIElement.ManipulationCompletedEvent
  - System.Windows.UIElement.ManipulationDelta
  - System.Windows.UIElement.ManipulationDeltaEvent
  - System.Windows.UIElement.ManipulationInertiaStarting
  - System.Windows.UIElement.ManipulationInertiaStartingEvent
  - System.Windows.UIElement.ManipulationStarted
  - System.Windows.UIElement.ManipulationStartedEvent
  - System.Windows.UIElement.ManipulationStarting
  - System.Windows.UIElement.ManipulationStartingEvent
  - System.Windows.UIElement.Measure(System.Windows.Size)
  - System.Windows.UIElement.MouseDown
  - System.Windows.UIElement.MouseDownEvent
  - System.Windows.UIElement.MouseEnter
  - System.Windows.UIElement.MouseEnterEvent
  - System.Windows.UIElement.MouseLeave
  - System.Windows.UIElement.MouseLeaveEvent
  - System.Windows.UIElement.MouseLeftButtonDown
  - System.Windows.UIElement.MouseLeftButtonDownEvent
  - System.Windows.UIElement.MouseLeftButtonUp
  - System.Windows.UIElement.MouseLeftButtonUpEvent
  - System.Windows.UIElement.MouseMove
  - System.Windows.UIElement.MouseMoveEvent
  - System.Windows.UIElement.MouseRightButtonDown
  - System.Windows.UIElement.MouseRightButtonDownEvent
  - System.Windows.UIElement.MouseRightButtonUp
  - System.Windows.UIElement.MouseRightButtonUpEvent
  - System.Windows.UIElement.MouseUp
  - System.Windows.UIElement.MouseUpEvent
  - System.Windows.UIElement.MouseWheel
  - System.Windows.UIElement.MouseWheelEvent
  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.Opacity
  - System.Windows.UIElement.OpacityMask
  - System.Windows.UIElement.OpacityMaskProperty
  - System.Windows.UIElement.OpacityProperty
  - System.Windows.UIElement.PersistId
  - System.Windows.UIElement.PreviewDragEnter
  - System.Windows.UIElement.PreviewDragEnterEvent
  - System.Windows.UIElement.PreviewDragLeave
  - System.Windows.UIElement.PreviewDragLeaveEvent
  - System.Windows.UIElement.PreviewDragOver
  - System.Windows.UIElement.PreviewDragOverEvent
  - System.Windows.UIElement.PreviewDrop
  - System.Windows.UIElement.PreviewDropEvent
  - System.Windows.UIElement.PreviewGiveFeedback
  - System.Windows.UIElement.PreviewGiveFeedbackEvent
  - System.Windows.UIElement.PreviewGotKeyboardFocus
  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  - System.Windows.UIElement.PreviewKeyDown
  - System.Windows.UIElement.PreviewKeyDownEvent
  - System.Windows.UIElement.PreviewKeyUp
  - System.Windows.UIElement.PreviewKeyUpEvent
  - System.Windows.UIElement.PreviewLostKeyboardFocus
  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  - System.Windows.UIElement.PreviewMouseDown
  - System.Windows.UIElement.PreviewMouseDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonDown
  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonUp
  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.UIElement.PreviewMouseMove
  - System.Windows.UIElement.PreviewMouseMoveEvent
  - System.Windows.UIElement.PreviewMouseRightButtonDown
  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  - System.Windows.UIElement.PreviewMouseRightButtonUp
  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  - System.Windows.UIElement.PreviewMouseUp
  - System.Windows.UIElement.PreviewMouseUpEvent
  - System.Windows.UIElement.PreviewMouseWheel
  - System.Windows.UIElement.PreviewMouseWheelEvent
  - System.Windows.UIElement.PreviewQueryContinueDrag
  - System.Windows.UIElement.PreviewQueryContinueDragEvent
  - System.Windows.UIElement.PreviewStylusButtonDown
  - System.Windows.UIElement.PreviewStylusButtonDownEvent
  - System.Windows.UIElement.PreviewStylusButtonUp
  - System.Windows.UIElement.PreviewStylusButtonUpEvent
  - System.Windows.UIElement.PreviewStylusDown
  - System.Windows.UIElement.PreviewStylusDownEvent
  - System.Windows.UIElement.PreviewStylusInAirMove
  - System.Windows.UIElement.PreviewStylusInAirMoveEvent
  - System.Windows.UIElement.PreviewStylusInRange
  - System.Windows.UIElement.PreviewStylusInRangeEvent
  - System.Windows.UIElement.PreviewStylusMove
  - System.Windows.UIElement.PreviewStylusMoveEvent
  - System.Windows.UIElement.PreviewStylusOutOfRange
  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  - System.Windows.UIElement.PreviewStylusSystemGesture
  - System.Windows.UIElement.PreviewStylusSystemGestureEvent
  - System.Windows.UIElement.PreviewStylusUp
  - System.Windows.UIElement.PreviewStylusUpEvent
  - System.Windows.UIElement.PreviewTextInput
  - System.Windows.UIElement.PreviewTextInputEvent
  - System.Windows.UIElement.PreviewTouchDown
  - System.Windows.UIElement.PreviewTouchDownEvent
  - System.Windows.UIElement.PreviewTouchMove
  - System.Windows.UIElement.PreviewTouchMoveEvent
  - System.Windows.UIElement.PreviewTouchUp
  - System.Windows.UIElement.PreviewTouchUpEvent
  - System.Windows.UIElement.QueryContinueDrag
  - System.Windows.UIElement.QueryContinueDragEvent
  - System.Windows.UIElement.QueryCursor
  - System.Windows.UIElement.QueryCursorEvent
  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.ReleaseAllTouchCaptures
  - System.Windows.UIElement.ReleaseMouseCapture
  - System.Windows.UIElement.ReleaseStylusCapture
  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.RenderSize
  - System.Windows.UIElement.RenderTransform
  - System.Windows.UIElement.RenderTransformOrigin
  - System.Windows.UIElement.RenderTransformOriginProperty
  - System.Windows.UIElement.RenderTransformProperty
  - System.Windows.UIElement.ShouldSerializeCommandBindings
  - System.Windows.UIElement.ShouldSerializeInputBindings
  - System.Windows.UIElement.SnapsToDevicePixels
  - System.Windows.UIElement.SnapsToDevicePixelsProperty
  - System.Windows.UIElement.StylusButtonDown
  - System.Windows.UIElement.StylusButtonDownEvent
  - System.Windows.UIElement.StylusButtonUp
  - System.Windows.UIElement.StylusButtonUpEvent
  - System.Windows.UIElement.StylusDown
  - System.Windows.UIElement.StylusDownEvent
  - System.Windows.UIElement.StylusEnter
  - System.Windows.UIElement.StylusEnterEvent
  - System.Windows.UIElement.StylusInAirMove
  - System.Windows.UIElement.StylusInAirMoveEvent
  - System.Windows.UIElement.StylusInRange
  - System.Windows.UIElement.StylusInRangeEvent
  - System.Windows.UIElement.StylusLeave
  - System.Windows.UIElement.StylusLeaveEvent
  - System.Windows.UIElement.StylusMove
  - System.Windows.UIElement.StylusMoveEvent
  - System.Windows.UIElement.StylusOutOfRange
  - System.Windows.UIElement.StylusOutOfRangeEvent
  - System.Windows.UIElement.StylusPlugIns
  - System.Windows.UIElement.StylusSystemGesture
  - System.Windows.UIElement.StylusSystemGestureEvent
  - System.Windows.UIElement.StylusUp
  - System.Windows.UIElement.StylusUpEvent
  - System.Windows.UIElement.TextInput
  - System.Windows.UIElement.TextInputEvent
  - System.Windows.UIElement.TouchDown
  - System.Windows.UIElement.TouchDownEvent
  - System.Windows.UIElement.TouchEnter
  - System.Windows.UIElement.TouchEnterEvent
  - System.Windows.UIElement.TouchesCaptured
  - System.Windows.UIElement.TouchesCapturedWithin
  - System.Windows.UIElement.TouchesDirectlyOver
  - System.Windows.UIElement.TouchesOver
  - System.Windows.UIElement.TouchLeave
  - System.Windows.UIElement.TouchLeaveEvent
  - System.Windows.UIElement.TouchMove
  - System.Windows.UIElement.TouchMoveEvent
  - System.Windows.UIElement.TouchUp
  - System.Windows.UIElement.TouchUpEvent
  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  - System.Windows.UIElement.Uid
  - System.Windows.UIElement.UidProperty
  - System.Windows.UIElement.UpdateLayout
  - System.Windows.UIElement.Visibility
  - System.Windows.UIElement.VisibilityProperty
  platform:
  - net462
- uid: System.Windows.Window.#ctor
  id: '#ctor'
  parent: System.Windows.Window
  langs:
  - csharp
  name: Window()
  nameWithType: Window.Window()
  fullName: System.Windows.Window.Window()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.Window&quot;> </xref> classe."
  remarks: "Il costruttore inizializza la <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, e <xref:System.Windows.Window.Left%2A>proprietà sui valori predefiniti <xref:System.Windows.Window>valori.</xref:System.Windows.Window> </xref:System.Windows.Window.Left%2A> </xref:System.Windows.Window.Top%2A> </xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.FrameworkElement.Width%2A>       Se viene creata una finestra all&quot;interno di un <xref:System.AppDomain>che ha un <xref:System.Windows.Application>dell&quot;oggetto, il costruttore aggiunge il <xref:System.Windows.Window>oggetto al set di <xref:System.Windows.Application>-gestiti di windows tramite il <xref:System.Windows.Application.Windows%2A>proprietà del <xref:System.Windows.Application>oggetto.</xref:System.Windows.Application> </xref:System.Windows.Application.Windows%2A> </xref:System.Windows.Application> </xref:System.Windows.Window> </xref:System.Windows.Application> </xref:System.AppDomain>"
  syntax:
    content: public Window ();
    parameters: []
  overload: System.Windows.Window.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Activate
  id: Activate
  parent: System.Windows.Window
  langs:
  - csharp
  name: Activate()
  nameWithType: Window.Activate()
  fullName: System.Windows.Window.Activate()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Tenta di visualizzare la finestra in primo piano e attiva."
  remarks: "Le regole che determinano se è attivata la finestra sono uguali a quelli utilizzati dal [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` funzione (User32. dll).       Se la finestra viene attivata in un [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] applicazione che non è l&quot;applicazione dell&quot;utente in primo piano, <xref:System.Windows.Application.Activated>viene generato l&quot;evento.</xref:System.Windows.Application.Activated>      > [!NOTE] > Questo metodo non può essere chiamato quando una finestra è ospitata in un browser."
  syntax:
    content: public bool Activate ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Windows.Window&quot;> </xref> è stato correttamente attivato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.Activate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Activated
  id: Activated
  parent: System.Windows.Window
  langs:
  - csharp
  name: Activated
  nameWithType: Window.Activated
  fullName: System.Windows.Window.Activated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Si verifica quando una finestra diventa la finestra di primo piano."
  remarks: "Viene attivata una finestra (diventa la finestra di primo piano) quando:-si apre la finestra.      -Un utente passa a una finestra, selezionarlo con il mouse, premere ALT + TAB o da Gestione attività.      -L&quot;utente fa clic sul pulsante della barra delle applicazioni della finestra.       Finestre che è necessario per rilevare quando diventano attive possono gestire l&quot;evento attivato.       Dopo l&quot;attivazione di una finestra, può disattivato e riattivato più volte durante la relativa durata. Se il comportamento o stato di un&quot;applicazione dipende dal relativo stato di attivazione, può controllare <xref:System.Windows.Window.IsActive%2A>per determinare quale stato di attivazione del pollici</xref:System.Windows.Window.IsActive%2A>       Un&quot;applicazione può anche essere <xref:System.Windows.Application.Activated>.</xref:System.Windows.Application.Activated>"
  syntax:
    content: public event EventHandler Activated;
    return:
      type: System.EventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.AllowsTransparency
  id: AllowsTransparency
  parent: System.Windows.Window
  langs:
  - csharp
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
  fullName: System.Windows.Window.AllowsTransparency
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se l&quot;area client di una finestra supporta la trasparenza."
  remarks: "Quando il <xref:System.Windows.Controls.Control.Background%2A>di una finestra è impostata su un oggetto trasparente, il colore con il <xref:System.Windows.Media.Brushes.Transparent%2A>, ad esempio, la finestra rimane opaca.</xref:System.Windows.Media.Brushes.Transparent%2A> </xref:System.Windows.Controls.Control.Background%2A> Ciò significa che non possono essere visualizzate sul desktop e le applicazioni in esecuzione &quot;la finestra beneath&quot;. Per abilitare questo tipo di trasparenza, AllowsTransparency deve essere impostato su `true`.       AllowsTransparency è disponibile per facilitare la creazione di finestre non rettangolari e, di conseguenza, quando AllowsTransparency è impostata su `true`, <xref:System.Windows.Window.WindowStyle%2A>deve essere impostata su <xref:System.Windows.WindowStyle>.</xref:System.Windows.WindowStyle> una finestra</xref:System.Windows.Window.WindowStyle%2A>      <a name=&quot;dependencyPropertyInfo_WindowAllowsTransparency&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.AllowsTransparencyProperty>|   | Impostare le proprietà dei metadati su `true`| None |</xref:System.Windows.Window.AllowsTransparencyProperty>"
  syntax:
    content: public bool AllowsTransparency { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la finestra supporta la trasparenza; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.AllowsTransparency*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Una finestra che ha un <xref:System.Windows.Window.WindowStyle*>valore diverso da <xref href=&quot;System.Windows.WindowStyle&quot;> </xref>.</xref:System.Windows.Window.WindowStyle*>"
  platform:
  - net462
- uid: System.Windows.Window.AllowsTransparencyProperty
  id: AllowsTransparencyProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: AllowsTransparencyProperty
  nameWithType: Window.AllowsTransparencyProperty
  fullName: System.Windows.Window.AllowsTransparencyProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.AllowsTransparency*>proprietà di dipendenza.</xref:System.Windows.Window.AllowsTransparency*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)
  id: ArrangeOverride(System.Windows.Size)
  parent: System.Windows.Window
  langs:
  - csharp
  name: ArrangeOverride(Size)
  nameWithType: Window.ArrangeOverride(Size)
  fullName: System.Windows.Window.ArrangeOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Eseguire l&quot;override di questo metodo per disporre e ridimensionare una finestra e i relativi elementi figlio."
  remarks: "ArrangeOverride non viene chiamato quando la <xref:System.Windows.UIElement.Visibility%2A>proprietà ha un valore <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A> Se il valore della <xref:System.Windows.UIElement.Visibility%2A>la proprietà <xref:System.Windows.Visibility>o <xref:System.Windows.Visibility>, viene chiamato ArrangeOverride.</xref:System.Windows.Visibility> </xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A>      > [!NOTE] > Quando <xref:System.Windows.Window.Show%2A> <xref:System.Windows.Window.ShowDialog%2A>vengono chiamati, la <xref:System.Windows.UIElement.Visibility%2A>proprietà <xref:System.Windows.Window>è impostata su <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.Window> </xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.Window.ShowDialog%2A> o</xref:System.Windows.Window.Show%2A>"
  syntax:
    content: protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);
    parameters:
    - id: arrangeBounds
      type: System.Windows.Size
      description: "Oggetto <xref href=&quot;System.Windows.Size&quot;> </xref> che riflette le dimensioni finali che deve utilizzare la finestra per disporre se stesso e i relativi elementi figlio."
    return:
      type: System.Windows.Size
      description: "Oggetto <xref href=&quot;System.Windows.Size&quot;> </xref> che riflette la dimensione effettiva che è stata utilizzata."
  overload: System.Windows.Window.ArrangeOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Close
  id: Close
  parent: System.Windows.Window
  langs:
  - csharp
  name: Close()
  nameWithType: Window.Close()
  fullName: System.Windows.Window.Close()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Chiude manualmente un <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Oggetto <xref:System.Windows.Window>possono essere chiusi utilizzando uno di diversi meccanismi noti, fornito dal sistema, si trovano nella barra del titolo, tra cui:-ALT + F4.</xref:System.Windows.Window>      -Menu di sistema | **Close**.      - **Chiudi** pulsante.       Un <xref:System.Windows.Window>può anche essere chiuso utilizzando uno dei diversi meccanismi noti all&quot;interno dell&quot;area client forniti dagli sviluppatori, tra cui:- **File** | **Uscita** in una finestra principale.</xref:System.Windows.Window>      -   **File** | **Chiudi** o **Chiudi** pulsante in una finestra figlio.      > [!NOTE]  >   **OK** e **Annulla** anche i pulsanti nella finestra di dialogo sono fornito dallo sviluppatore, anche se probabilmente imposterà <xref:System.Windows.Window.DialogResult%2A>, che chiude automaticamente una finestra che è stato aperto chiamando <xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window.DialogResult%2A>       Questi meccanismi è necessario chiamare in modo esplicito Chiudi per chiudere una finestra.      > [!NOTE] > Se una finestra aperta chiamando <xref:System.Windows.Window.ShowDialog%2A>e con un <xref:System.Windows.Controls.Button>con il relativo <xref:System.Windows.Controls.Button.IsCancel%2A>proprietà è impostata su true, verrà chiusa automaticamente quando il pulsante viene fatto o si preme ESC.</xref:System.Windows.Controls.Button.IsCancel%2A> </xref:System.Windows.Controls.Button> </xref:System.Windows.Window.ShowDialog%2A> Se è stata aperta la finestra utilizzando <xref:System.Windows.Window.Show%2A>, tuttavia, chiudere deve essere chiamato in modo esplicito, ad esempio <xref:System.Windows.Controls.Primitives.ButtonBase.Click>il gestore eventi per <xref:System.Windows.Controls.Button>.</xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Window.Show%2A>       Chiusura di una finestra determina il <xref:System.Windows.Window.Closing>evento da generare.</xref:System.Windows.Window.Closing> Se il <xref:System.Windows.Window.Closing>evento non viene annullato, si verifica quanto segue: - il <xref:System.Windows.Window>viene rimosso dal <xref:System.Windows.Application.Windows%2A?displayProperty=fullName>(se un <xref:System.Windows.Application>oggetto esistente).</xref:System.Windows.Application> </xref:System.Windows.Application.Windows%2A?displayProperty=fullName> </xref:System.Windows.Window> </xref:System.Windows.Window.Closing>      -La <xref:System.Windows.Window>viene rimosso dal proprietario <xref:System.Windows.Window>se è stata stabilita la relazione proprietario e prima la proprietà <xref:System.Windows.Window>è stata visualizzata e dopo il proprietario <xref:System.Windows.Window>è stato aperto.</xref:System.Windows.Window> </xref:System.Windows.Window> </xref:System.Windows.Window> </xref:System.Windows.Window>      -La <xref:System.Windows.Window.Closed>viene generato l&quot;evento.</xref:System.Windows.Window.Closed>      -Risorse non gestite, create il <xref:System.Windows.Window>vengono eliminati.</xref:System.Windows.Window>      -Se <xref:System.Windows.Window.ShowDialog%2A>è stato chiamato per mostrare il <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A>restituisce.</xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window> </xref:System.Windows.Window.ShowDialog%2A>       Chiusura di un <xref:System.Windows.Window>fa sì che tutte le finestre di sua proprietà per essere chiuso.</xref:System.Windows.Window> Inoltre, la chiusura un <xref:System.Windows.Window>può provocare un&quot;applicazione arrestare l&quot;esecuzione a seconda della modalità di <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName>proprietà è impostata.</xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName> </xref:System.Windows.Window>      > [!NOTE] > Questo metodo non può essere chiamato quando una finestra è ospitata in un browser."
  example:
  - "The following example shows a **File** &#124; **Exit** menu being handled to explicitly call Close.  \n  \n [!code-xml[WindowCloseSnippets#WindowCloseXAML](~/add/codesnippet/xaml/WindowCloseSnippets.CSharp/MainWindow.xaml#windowclosexaml)]  \n  \n [!code-cs[WindowCloseSnippets#WindowCloseCODEBEHIND](~/add/codesnippet/csharp/WindowCloseSnippets.CSharp/MainWindow.xaml.cs#windowclosecodebehind)]\n [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/add/codesnippet/visualbasic/windowclosesnippets/mainwindow.xaml.vb#windowclosecodebehind)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Windows.Window.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Closed
  id: Closed
  parent: System.Windows.Window
  langs:
  - csharp
  name: Closed
  nameWithType: Window.Closed
  fullName: System.Windows.Window.Closed
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Si verifica quando sta per chiudere la finestra."
  remarks: "Dopo questo evento viene generato, una finestra non è possibile impedire la chiusura."
  syntax:
    content: public event EventHandler Closed;
    return:
      type: System.EventHandler
      description: "Da aggiungere."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<>*> è impostata, o <> </> *>, <> </> *>, o <> </> *> viene chiamato durante la chiusura di una finestra."
  platform:
  - net462
- uid: System.Windows.Window.Closing
  id: Closing
  parent: System.Windows.Window
  langs:
  - csharp
  name: Closing
  nameWithType: Window.Closing
  fullName: System.Windows.Window.Closing
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Si verifica immediatamente dopo <xref:System.Windows.Window.Close*>viene chiamato e può essere gestito per annullare la chiusura della finestra.</xref:System.Windows.Window.Close*>"
  remarks: "Chiusura può essere gestito per rilevare quando una finestra viene chiusa (ad esempio, quando <xref:System.Windows.Window.Close%2A>viene chiamato).</xref:System.Windows.Window.Close%2A> Inoltre, chiusura consente di impedire la chiusura di una finestra. Per impedire la chiusura di una finestra, è possibile impostare il <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>proprietà del <xref:System.ComponentModel.CancelEventArgs>argomento `true`.</xref:System.ComponentModel.CancelEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       Viene generato l&quot;evento Closing quando <xref:System.Windows.Window.Close%2A>viene chiamato se si fa clic sul pulsante Chiudi di una finestra o se l&quot;utente preme ALT + F4.</xref:System.Windows.Window.Close%2A>       Se è stato aperto una finestra di proprietà dalla finestra proprietaria tramite <xref:System.Windows.Window.Show%2A>e viene chiusa la finestra proprietaria, eventi di chiusura della finestra proprietà non viene generato.</xref:System.Windows.Window.Show%2A> Se il proprietario di una finestra viene chiusa (vedere <xref:System.Windows.Window.Owner%2A>), chiusura non viene generato nella finestra Proprietà.</xref:System.Windows.Window.Owner%2A>       Se <xref:System.Windows.Application.Shutdown%2A>viene chiamato, l&quot;evento Closing viene generato ogni finestra.</xref:System.Windows.Application.Shutdown%2A> Tuttavia, se la chiusura viene annullata, l&quot;annullamento viene ignorato.       Se una sessione viene interrotta perché un utente si disconnette o arrestato, chiusura non viene generato. gestire <xref:System.Windows.Application.SessionEnding>per implementare il codice che consente di annullare la chiusura dell&quot;applicazione.</xref:System.Windows.Application.SessionEnding>       Se si desidera visualizzare e nascondere una finestra più volte nel corso della durata di un&quot;applicazione e non si desidera creare una nuova finestra ogni volta che è la visualizzazione, è possibile gestire l&quot;evento Closing, annullarlo e chiamare il <xref:System.Windows.Window.Hide%2A>metodo.</xref:System.Windows.Window.Hide%2A> Quindi, è possibile chiamare <xref:System.Windows.Window.Show%2A>nella stessa istanza per riaprire tale</xref:System.Windows.Window.Show%2A>"
  example:
  - "The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.  \n  \n [!code-xml[WindowClosingSnippets#WindowClosingXAML1](~/add/codesnippet/xaml/WindowClosingSnippets.CSharp/DataWindow.xaml#windowclosingxaml1)]  \n[!code-xml[WindowClosingSnippets#WindowClosingXAML2](~/add/codesnippet/xaml/WindowClosingSnippets.CSharp/DataWindow.xaml#windowclosingxaml2)]  \n  \n [!code-cs[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/add/codesnippet/csharp/WindowClosingSnippets.CSharp/DataWindow.xaml.cs#windowclosingcodebehind1)]\n [!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/add/codesnippet/visualbasic/windowclosingsnippets/datawindow.xaml.vb#windowclosingcodebehind1)]  \n[!code-cs[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/add/codesnippet/csharp/WindowClosingSnippets.CSharp/DataWindow.xaml.cs#windowclosingcodebehind2)]\n[!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/add/codesnippet/visualbasic/windowclosingsnippets/datawindow.xaml.vb#windowclosingcodebehind2)]"
  syntax:
    content: public event System.ComponentModel.CancelEventHandler Closing;
    return:
      type: System.ComponentModel.CancelEventHandler
      description: "Da aggiungere."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<>*> è impostata, o <> </> *>, <> </> *>, o <> </> *> viene chiamato durante la chiusura di una finestra."
  platform:
  - net462
- uid: System.Windows.Window.ContentRendered
  id: ContentRendered
  parent: System.Windows.Window
  langs:
  - csharp
  name: ContentRendered
  nameWithType: Window.ContentRendered
  fullName: System.Windows.Window.ContentRendered
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Si verifica dopo che è stato eseguito il rendering di contenuto di una finestra."
  remarks: "Se la finestra non dispone di alcun contenuto, questo evento non viene generato."
  syntax:
    content: public event EventHandler ContentRendered;
    return:
      type: System.EventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Deactivated
  id: Deactivated
  parent: System.Windows.Window
  langs:
  - csharp
  name: Deactivated
  nameWithType: Window.Deactivated
  fullName: System.Windows.Window.Deactivated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Si verifica quando una finestra diventa una finestra di sfondo."
  remarks: "Una finestra viene disattivata (diventa una finestra di sfondo) quando:-un utente passa a un&quot;altra finestra dell&quot;applicazione corrente.      -Un utente passa alla finestra in un&quot;altra applicazione utilizzando ALT + TAB oppure tramite Gestione attività.      -Un utente fa clic sul pulsante della barra delle applicazioni per una finestra in un&quot;altra applicazione.       Finestre in cui è necessario per rilevare quando diventano disattivate gestendo l&quot;evento Deactivated.       Dopo la disattivazione prima di una finestra, può riattivato e disattivato più volte durante la relativa durata. Se il comportamento o stato di un&quot;applicazione dipende dal relativo stato di attivazione, può controllare <xref:System.Windows.Window.IsActive%2A>per determinare quale stato di attivazione del pollici</xref:System.Windows.Window.IsActive%2A>       Un&quot;applicazione può anche essere <xref:System.Windows.Application.Deactivated>.</xref:System.Windows.Application.Deactivated>"
  syntax:
    content: public event EventHandler Deactivated;
    return:
      type: System.EventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DialogResult
  id: DialogResult
  parent: System.Windows.Window
  langs:
  - csharp
  name: DialogResult
  nameWithType: Window.DialogResult
  fullName: System.Windows.Window.DialogResult
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta il valore di risultato di finestra di dialogo, che corrisponde al valore restituito dal <xref:System.Windows.Window.ShowDialog*>metodo.</xref:System.Windows.Window.ShowDialog*>"
  remarks: "DialogResult può essere utilizzato dal codice che mostrano una finestra di dialogo per determinare se un utente è stato accettato (`true`) o annullata (`false`) nella finestra di dialogo. Se una finestra di dialogo è stata accettata, ciò significa che per il codice che ha aperto la finestra di dialogo per recuperare i dati raccolti dall&quot;utente ed elaborarlo. Se una finestra di dialogo è stata annullata, tuttavia, ciò significa che il codice chiamante deve essere arrestata un&quot;ulteriore elaborazione.       Per impostazione predefinita, una finestra di dialogo viene annullata quando un utente esegue uno dei seguenti:-PressesALT + F4.      -Seleziona il **Chiudi** pulsante.      -Seleziona **Chiudi** dal menu di sistema.       In tutti questi casi, è DialogResult `false` per impostazione predefinita.       Una finestra di dialogo in genere fornisce un pulsante speciale per annullare una finestra di dialogo, che corrisponde al pulsante la cui <xref:System.Windows.Controls.Button.IsCancel%2A>è impostata su `true`.</xref:System.Windows.Controls.Button.IsCancel%2A> Un pulsante configurato in questo modo verrà chiusa automaticamente una finestra quando è premuto o quando viene premuto il tasto ESC. In entrambi i casi, resta DialogResult `false`.       Una finestra di dialogo in genere disponibile anche un pulsante di conferma, che corrisponde al pulsante la cui <xref:System.Windows.Controls.Button.IsDefault%2A>è impostata su `true`.</xref:System.Windows.Controls.Button.IsDefault%2A> Un pulsante configurato in questo modo verrà generato il <xref:System.Windows.Controls.Primitives.ButtonBase.Click>evento quando viene premuto, o il tasto INVIO.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> Tuttavia, non verrà chiusa automaticamente la finestra di dialogo, non verrà impostata DialogResult `true`. È necessario scrivere manualmente questo codice, in genere dal <xref:System.Windows.Controls.Primitives.ButtonBase.Click>gestore eventi per il pulsante predefinito.</xref:System.Windows.Controls.Primitives.ButtonBase.Click>       DialogResult è `null` quando viene visualizzata nella finestra di dialogo non viene accettata né annullata.       Al termine di una finestra di dialogo, è possibile ottenere il risultato della finestra di dialogo dal valore restituito da <xref:System.Windows.Window.ShowDialog%2A>, metodo o controllando la proprietà DialogResult.</xref:System.Windows.Window.ShowDialog%2A>       È possibile impostare DialogResult solo quando un <xref:System.Windows.Window>è aperto, chiamando il relativo <xref:System.Windows.Window.ShowDialog%2A>metodo.</xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window>      > [!NOTE] > Non è possibile impostare o ottenere questa proprietà quando una finestra è ospitata in un browser."
  example:
  - "The following example shows how to configure an OK button and a Cancel button to return the appropriate DialogResult.  \n  \n [!code-xml[WindowDialogResultSnippets#WindowDialogResultXAML](~/add/codesnippet/xaml/WindowDialogResultSnippets.CSharp/DialogBox.xaml#windowdialogresultxaml)]  \n  \n [!code-cs[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/add/codesnippet/csharp/WindowDialogResultSnippets.CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]\n [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/add/codesnippet/visualbasic/windowdialogresultsnippets/dialogbox.xaml.vb#windowdialogresultcodebehind)]"
  syntax:
    content: public Nullable<bool> DialogResult { get; set; }
    return:
      type: System.Nullable{System.Boolean}
      description: "Oggetto &lt;xref:System.Nullable%601&gt; valore di tipo <xref:System.Boolean>.</xref:System.Boolean> Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.DialogResult*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "DialogResult è impostato prima dell&quot;apertura di una finestra chiamando <> </> *>.       - oppure - DialogResult è impostata su una finestra che viene aperto chiamando <> </> *>."
  platform:
  - net462
- uid: System.Windows.Window.DpiChanged
  id: DpiChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: DpiChanged
  nameWithType: Window.DpiChanged
  fullName: System.Windows.Window.DpiChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Si verifica dopo il DPI dello schermo in cui la finestra è visualizzata le modifiche."
  syntax:
    content: public event System.Windows.DpiChangedEventHandler DpiChanged;
    return:
      type: System.Windows.DpiChangedEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DpiChangedEvent
  id: DpiChangedEvent
  parent: System.Windows.Window
  langs:
  - csharp
  name: DpiChangedEvent
  nameWithType: Window.DpiChangedEvent
  fullName: System.Windows.Window.DpiChangedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Oggetto <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref> per l&quot;utilizzo di DPI dello schermo finestra alle modifiche apportate."
  syntax:
    content: public static readonly System.Windows.RoutedEvent DpiChangedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DragMove
  id: DragMove
  parent: System.Windows.Window
  langs:
  - csharp
  name: DragMove()
  nameWithType: Window.DragMove()
  fullName: System.Windows.Window.DragMove()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Consente a una finestra essere trascinato dal con il pulsante sinistro del mouse su un&quot;area esposta dell&quot;area client della finestra."
  remarks: "Il pulsante sinistro del mouse deve essere inattivo quando viene chiamato DragMove. Per rilevare quando viene premuto il pulsante sinistro del mouse, è possibile gestire il <xref:System.Windows.UIElement.MouseLeftButtonDown>evento.</xref:System.Windows.UIElement.MouseLeftButtonDown>       Quando viene chiamato DragMove, deve essere premuto il pulsante sinistro del mouse su un&quot;area esposta dell&quot;area client della finestra.      > [!NOTE] > Questo metodo non può essere chiamato quando una finestra è ospitata in un browser."
  example:
  - "The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call DragMove.  \n  \n [!code-cs[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/add/codesnippet/csharp/WindowDragMoveSnippets/MainWindow.xaml.cs#callwindowdragmovecodebehind)]\n [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/add/codesnippet/visualbasic/windowdragmovesnippets/mainwindow.xaml.vb#callwindowdragmovecodebehind)]"
  syntax:
    content: public void DragMove ();
    parameters: []
  overload: System.Windows.Window.DragMove*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il pulsante sinistro del mouse non è rivolta verso il basso."
  platform:
  - net462
- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  id: GetWindow(System.Windows.DependencyObject)
  parent: System.Windows.Window
  langs:
  - csharp
  name: GetWindow(DependencyObject)
  nameWithType: Window.GetWindow(DependencyObject)
  fullName: System.Windows.Window.GetWindow(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Restituisce un riferimento di <xref href=&quot;System.Windows.Window&quot;> </xref> oggetto che contiene l&quot;albero del contenuto all&quot;interno del quale si trova l&quot;oggetto di dipendenza."
  syntax:
    content: public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: "Oggetto di dipendenza."
    return:
      type: System.Windows.Window
      description: "Oggetto <xref href=&quot;System.Windows.Window&quot;> </xref> riferimento alla finestra host."
  overload: System.Windows.Window.GetWindow*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dependencyObject</code>è null."
  platform:
  - net462
- uid: System.Windows.Window.Hide
  id: Hide
  parent: System.Windows.Window
  langs:
  - csharp
  name: Hide()
  nameWithType: Window.Hide()
  fullName: System.Windows.Window.Hide()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Rende invisibile una finestra."
  remarks: "Una finestra non viene chiusa quando è nascosta e non il <xref:System.Windows.Window.Closing>né <xref:System.Windows.Window.Closed>viene generato l&quot;evento.</xref:System.Windows.Window.Closed> </xref:System.Windows.Window.Closing> Invece <xref:System.Windows.UIElement.Visibility%2A>proprietà è impostata su <xref:System.Windows.Visibility?displayProperty=fullName>.</xref:System.Windows.Visibility?displayProperty=fullName> della finestra</xref:System.Windows.UIElement.Visibility%2A>       Se l&quot;applicazione è una finestra <xref:System.Windows.Application.MainWindow%2A>e l&quot;applicazione <xref:System.Windows.Application.ShutdownMode%2A>è <xref:System.Windows.ShutdownMode>, l&quot;applicazione non viene arrestato.</xref:System.Windows.ShutdownMode> </xref:System.Windows.Application.ShutdownMode%2A> </xref:System.Windows.Application.MainWindow%2A> Analogamente, l&quot;applicazione viene arrestata se una finestra è l&quot;unica finestra e modalità di arresto dell&quot;applicazione è <xref:System.Windows.ShutdownMode>.</xref:System.Windows.ShutdownMode>       Se si desidera visualizzare e nascondere una finestra più volte nel corso della durata di un&quot;applicazione e non si desidera creare nuovamente la finestra ogni volta che è la visualizzazione, è possibile gestire il <xref:System.Windows.Window.Closing>evento, annullarlo e chiamare il metodo Nascondi.</xref:System.Windows.Window.Closing> Quindi, è possibile chiamare <xref:System.Windows.Window.Show%2A>nella stessa istanza per aprirla nuovamente.</xref:System.Windows.Window.Show%2A>"
  syntax:
    content: public void Hide ();
    parameters: []
  overload: System.Windows.Window.Hide*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Nascondi viene chiamato su una finestra in fase di chiusura (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) o è stata chiusa (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)."
  platform:
  - net462
- uid: System.Windows.Window.Icon
  id: Icon
  parent: System.Windows.Window
  langs:
  - csharp
  name: Icon
  nameWithType: Window.Icon
  fullName: System.Windows.Window.Icon
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta l&quot;icona di una finestra."
  remarks: "[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]applicazioni autonome includono due tipi di icone:-icona di un assembly, viene specificata utilizzando il `<ApplicationIcon>` file di compilazione di proprietà del progetto dell&quot;applicazione. Questa icona viene utilizzata come icona del desktop di un assembly.          > [!NOTE] > Durante il debug in Visual Studio, non verrà visualizzata l&quot;icona a causa del processo di hosting. Se si esegue il file eseguibile, verrà visualizzata l&quot;icona. Per ulteriori informazioni, vedere [il processo di Hosting (vshost.exe)](~/add/includes/ajax-current-ext-md.md).      -Un&quot;icona per ogni finestra che viene specificato impostando l&quot;icona. Per ogni finestra, questa icona viene utilizzata nella barra del titolo, il relativo pulsante della barra e nella relativa voce di elenco Selezione applicazione ALT + TAB.       Oggetto [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] finestra viene sempre visualizzata un&quot;icona. Quando non viene specificato impostando l&quot;icona, [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] sceglie un&quot;icona da visualizzare in base alle regole seguenti: 1.  Utilizzare l&quot;icona di assembly, se specificato.      2.  Se l&quot;icona di assembly non viene specificato, utilizzare il valore predefinito [!INCLUDE[TLA#tla_win](~/add/includes/ajax-current-ext-md.md)] icona.       Se si utilizza l&quot;icona per specificare un&quot;icona di finestra personalizzati, è possibile ripristinare l&quot;icona predefinita dell&quot;applicazione impostando icona `null`.       Una singola icona può essere utilizzata in diversi modi in [!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)], tra cui viene visualizzato nella barra del titolo di una finestra, sulla barra delle applicazioni per una finestra, selezione elenco dei file di ALT + TAB. Ognuno di questi Mostra l&quot;icona con dimensioni diverse. viene visualizzata un&quot;icona di 16x16 pixel nella barra del titolo di una finestra e nella barra delle applicazioni, mentre viene visualizzata un&quot;icona di 32 x 32 pixel nell&quot;elenco di selezione file ALT + TAB. Alcune applicazioni, ad esempio [!INCLUDE[TLA#tla_winexpl](~/add/includes/tlasharptla-winexpl-md.md)], fornire un **vista** menu che consente di scegliere le dimensioni dell&quot;icona di cui si desidera visualizzare.       Per soddisfare le varie dimensioni di visualizzazione, un file di icona è costituito da uno o più icone effettive in cui ognuno rappresenta una versione dell&quot;icona destinato a una profondità di colore e dimensione specifica. Ad esempio, un&quot;icona può avere una singola icona di 16x16 pixel con 16 colori, mentre un altro può contenere 16 x 16 pixel e icone di 32 x 32 pixel con 16 colori e 256 colori.       Se le icone per tutte le dimensioni e possibili intensità di colore esistono all&quot;interno di un file di icona, <xref:System.Windows.Window>utilizzerà sull&quot;icona appropriata.</xref:System.Windows.Window> Se un file icona contiene solo un subset di tutte le icone possibili <xref:System.Windows.Window>utilizza l&quot;icona più appropriata in ordine decrescente di dimensioni e profondità di colore.</xref:System.Windows.Window>       Il risultato è che verrà sempre utilizzata un&quot;icona da <xref:System.Windows.Window>, anche se l&quot;icona utilizzata non potrebbero avere come destinazione la profondità di colore e dimensione obbligatoria.</xref:System.Windows.Window> Ad esempio, un&quot;icona di 16x16 pixel con 16 colori utilizzabili per visualizzare come icona 32 x 32 pixel con 256 colori. Questo può causare effetti visivi indesiderati, ad esempio dei mezzitoni, ma è possibile evitare la creazione di icone per tutte le dimensioni e intensità di colore.      > [!NOTE] > Non è possibile impostare o ottenere questa proprietà quando una finestra è ospitata in un browser.      <a name=&quot;dependencyPropertyInfo_WindowIcon&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.IconProperty>|   | Impostare le proprietà dei metadati su `true`| None |</xref:System.Windows.Window.IconProperty>"
  example:
  - "The following example shows how to set a window icon.  \n  \n [!code-xml[WindowIconSnippets#WindowIconSetXAML](~/add/codesnippet/xaml/WindowIconSnippets.WindowIconSample/MainWindow.xaml#windowiconsetxaml)]  \n  \n [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/add/codesnippet/visualbasic/windowiconsample/mainwindow.xaml.vb#setwindowiconincode)]\n [!code-cs[WindowIconSnippets#SetWindowIconInCode](~/add/codesnippet/csharp/WindowIconSnippets.WindowIconSample/MainWindow.xaml.cs#setwindowiconincode)]"
  syntax:
    content: public System.Windows.Media.ImageSource Icon { get; set; }
    return:
      type: System.Windows.Media.ImageSource
      description: "Un <xref href=&quot;System.Windows.Media.ImageSource&quot;> </xref> oggetto che rappresenta l&quot;icona."
  overload: System.Windows.Window.Icon*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IconProperty
  id: IconProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: IconProperty
  nameWithType: Window.IconProperty
  fullName: System.Windows.Window.IconProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.Icon*>proprietà di dipendenza.</xref:System.Windows.Window.Icon*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IconProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IsActive
  id: IsActive
  parent: System.Windows.Window
  langs:
  - csharp
  name: IsActive
  nameWithType: Window.IsActive
  fullName: System.Windows.Window.IsActive
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene un valore che indica se la finestra sia attiva."
  remarks: "Una finestra attiva è visualizzata in primo piano corrente dell&quot;utente e ha lo stato attivo, viene indicato mediante l&quot;aspetto della barra del titolo attiva. Una finestra attiva sarà anche il superiore di tutte le finestre di primo livello che non vengono impostate in modo esplicito il <xref:System.Windows.Window.Topmost%2A>proprietà.</xref:System.Windows.Window.Topmost%2A>      <a name=&quot;dependencyPropertyInfo_WindowIsActive&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.IsActiveProperty>|   | Impostare le proprietà dei metadati su `true`| None |</xref:System.Windows.Window.IsActiveProperty>"
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la finestra attiva. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IsActiveProperty
  id: IsActiveProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: IsActiveProperty
  nameWithType: Window.IsActiveProperty
  fullName: System.Windows.Window.IsActiveProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.IsActive*>proprietà di dipendenza.</xref:System.Windows.Window.IsActive*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsActiveProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Left
  id: Left
  parent: System.Windows.Window
  langs:
  - csharp
  name: Left
  nameWithType: Window.Left
  fullName: System.Windows.Window.Left
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta la posizione del bordo sinistro della finestra, in relazione al desktop."
  remarks: "Quando <xref:System.Windows.Window>viene ingrandito o ridotto a icona, questo valore rappresenta il bordo sinistro dell&quot;operazione di ripristino punto per <xref:System.Windows.Window>.</xref:System.Windows.Window> </xref:System.Windows.Window>       Questa proprietà non può essere impostata tramite uno stile.       Se non si specifica un valore, a sinistra è impostata sul valore predefinito di sistema. È anche possibile specificare il valore predefinito di sistema tramite l&quot;impostazione da sinistra a <xref:System.Double.NaN>.</xref:System.Double.NaN> Né <xref:System.Double.NegativeInfinity>né <xref:System.Double.PositiveInfinity>è un valore valido per a sinistra.</xref:System.Double.PositiveInfinity> </xref:System.Double.NegativeInfinity>      > [!NOTE] > Non è possibile impostare o ottenere questa proprietà quando una finestra è ospitata in un browser.      <a name=&quot;dependencyPropertyInfo_WindowLeft&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.LeftProperty>|   | Impostare le proprietà dei metadati su `true`| None |</xref:System.Windows.Window.LeftProperty>"
  syntax:
    content: public double Left { get; set; }
    return:
      type: System.Double
      description: "La posizione della finestra del bordo sinistro della, in unità logiche (1/96 ° di pollice)."
  overload: System.Windows.Window.Left*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LeftProperty
  id: LeftProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: LeftProperty
  nameWithType: Window.LeftProperty
  fullName: System.Windows.Window.LeftProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.Left*>proprietà di dipendenza.</xref:System.Windows.Window.Left*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty LeftProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LocationChanged
  id: LocationChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: LocationChanged
  nameWithType: Window.LocationChanged
  fullName: System.Windows.Window.LocationChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Si verifica quando cambia la posizione della finestra."
  remarks: "Posizione di una finestra viene modificata quando:-si sposta una finestra trascinandola con barra del titolo della finestra.      -Una finestra viene spostata dopo <xref:System.Windows.Window.DragMove%2A>viene chiamato.</xref:System.Windows.Window.DragMove%2A>      -È il <xref:System.Windows.Window.Left%2A>o <xref:System.Windows.Window.Top%2A>proprietà è impostata a livello di codice.</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A>      -La **spostare** del menu di sistema di una finestra viene scelto.      -La <xref:System.Windows.Window.WindowState%2A>proprietà viene modificata.</xref:System.Windows.Window.WindowState%2A>"
  syntax:
    content: public event EventHandler LocationChanged;
    return:
      type: System.EventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LogicalChildren
  id: LogicalChildren
  parent: System.Windows.Window
  langs:
  - csharp
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
  fullName: System.Windows.Window.LogicalChildren
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene un enumeratore per figlio logici elementi. una finestra"
  syntax:
    content: protected override System.Collections.IEnumerator LogicalChildren { get; }
    return:
      type: System.Collections.IEnumerator
      description: "Un <xref:System.Collections.IEnumerator>gli elementi figlio logici di una finestra.</xref:System.Collections.IEnumerator>"
  overload: System.Windows.Window.LogicalChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)
  id: MeasureOverride(System.Windows.Size)
  parent: System.Windows.Window
  langs:
  - csharp
  name: MeasureOverride(Size)
  nameWithType: Window.MeasureOverride(Size)
  fullName: System.Windows.Window.MeasureOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Eseguire l&quot;override di questo metodo per calcolare le dimensioni di una finestra."
  remarks: "MeasureOverride non viene chiamato quando la <xref:System.Windows.UIElement.Visibility%2A>proprietà ha un valore <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A> Se il valore della <xref:System.Windows.UIElement.Visibility%2A>la proprietà <xref:System.Windows.Visibility>o <xref:System.Windows.Visibility>, viene chiamato MeasureOverride.</xref:System.Windows.Visibility> </xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A>      > [!NOTE] > Quando <xref:System.Windows.Window.Show%2A> <xref:System.Windows.Window.ShowDialog%2A>vengono chiamati, la <xref:System.Windows.UIElement.Visibility%2A>proprietà <xref:System.Windows.Window>è impostata su <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.Window> </xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.Window.ShowDialog%2A> o</xref:System.Windows.Window.Show%2A>"
  syntax:
    content: protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "Oggetto <xref href=&quot;System.Windows.Size&quot;> </xref> che riflette le dimensioni disponibili che questa finestra è possibile assegnare all&quot;elemento figlio. Infinito può essere specificato come un valore per indicare che la finestra verrà ridimensionata in base al contenuto è disponibile."
    return:
      type: System.Windows.Size
      description: "Oggetto <xref href=&quot;System.Windows.Size&quot;> </xref> che riflette la dimensione che questa finestra determina come necessarie durante il layout, in base ai calcoli delle dimensioni degli elementi figlio."
  overload: System.Windows.Window.MeasureOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnActivated(System.EventArgs)
  id: OnActivated(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnActivated(EventArgs)
  nameWithType: Window.OnActivated(EventArgs)
  fullName: System.Windows.Window.OnActivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Genera il <xref href=&quot;System.Windows.Window.Activated&quot;> </xref> evento."
  remarks: "OnActivated genera il <xref:System.Windows.Window.Activated>evento.</xref:System.Windows.Window.Activated>       Un tipo che deriva da <xref:System.Windows.Window>può eseguire l&quot;override di OnActivated.</xref:System.Windows.Window> Il metodo sottoposto a override deve chiamare OnActivated sulla classe di base se <xref:System.Windows.Window.Activated>deve essere generato.</xref:System.Windows.Window.Activated>"
  syntax:
    content: protected virtual void OnActivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Un <xref:System.EventArgs>che contiene i dati dell&quot;evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnClosed(System.EventArgs)
  id: OnClosed(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnClosed(EventArgs)
  nameWithType: Window.OnClosed(EventArgs)
  fullName: System.Windows.Window.OnClosed(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Genera il <xref href=&quot;System.Windows.Window.Closed&quot;> </xref> evento."
  remarks: "OnClosed genera il <xref:System.Windows.Window.Closed>evento.</xref:System.Windows.Window.Closed>       Un tipo che deriva da <xref:System.Windows.Window>può eseguire l&quot;override di OnClosed.</xref:System.Windows.Window> Il metodo sottoposto a override deve chiamare OnClosed sulla classe di base se <xref:System.Windows.Window.Closed>deve essere generato.</xref:System.Windows.Window.Closed>"
  syntax:
    content: protected virtual void OnClosed (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Un <xref:System.EventArgs>che contiene i dati dell&quot;evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  id: OnClosing(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnClosing(CancelEventArgs)
  nameWithType: Window.OnClosing(CancelEventArgs)
  fullName: System.Windows.Window.OnClosing(CancelEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Genera il <xref href=&quot;System.Windows.Window.Closing&quot;> </xref> evento."
  remarks: "OnClosing genera il <xref:System.Windows.Window.Closing>evento.</xref:System.Windows.Window.Closing>       Un tipo che deriva da <xref:System.Windows.Window>può eseguire l&quot;override di OnClosing.</xref:System.Windows.Window> Il metodo sottoposto a override deve chiamare OnClosing sulla classe di base se <xref:System.Windows.Window.Closing>deve essere generato.</xref:System.Windows.Window.Closing>"
  syntax:
    content: protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.CancelEventArgs
      description: "Oggetto <xref:System.ComponentModel.CancelEventArgs>che contiene i dati dell&quot;evento.</xref:System.ComponentModel.CancelEventArgs>"
  overload: System.Windows.Window.OnClosing*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)
  id: OnContentChanged(System.Object,System.Object)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnContentChanged(Object,Object)
  nameWithType: Window.OnContentChanged(Object,Object)
  fullName: System.Windows.Window.OnContentChanged(Object,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Chiamato quando il <xref:System.Windows.Controls.ContentControl.Content*>le modifiche alle proprietà.</xref:System.Windows.Controls.ContentControl.Content*>"
  syntax:
    content: protected override void OnContentChanged (object oldContent, object newContent);
    parameters:
    - id: oldContent
      type: System.Object
      description: "Un riferimento alla radice dell&quot;albero del contenuto precedente."
    - id: newContent
      type: System.Object
      description: "Un riferimento alla radice dell&quot;albero del contenuto nuovo."
  overload: System.Windows.Window.OnContentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnContentRendered(System.EventArgs)
  id: OnContentRendered(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnContentRendered(EventArgs)
  nameWithType: Window.OnContentRendered(EventArgs)
  fullName: System.Windows.Window.OnContentRendered(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Genera il <xref href=&quot;System.Windows.Window.ContentRendered&quot;> </xref> evento."
  remarks: "OnContentRendered genera il <xref:System.Windows.Window.ContentRendered>evento.</xref:System.Windows.Window.ContentRendered>       Un tipo che deriva da <xref:System.Windows.Window>può eseguire l&quot;override di OnContentRendered.</xref:System.Windows.Window> Il metodo sottoposto a override deve chiamare OnContentRendered sulla classe di base se <xref:System.Windows.Window.ContentRendered>deve essere generato.</xref:System.Windows.Window.ContentRendered>"
  syntax:
    content: protected virtual void OnContentRendered (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Un <xref:System.EventArgs>che contiene i dati dell&quot;evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnContentRendered*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: Window.OnCreateAutomationPeer()
  fullName: System.Windows.Window.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Crea e restituisce un <xref href=&quot;System.Windows.Automation.Peers.WindowAutomationPeer&quot;> </xref> oggetto per questo <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Questo metodo esegue l&quot;override <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>"
  syntax:
    content: protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "A <xref href=&quot;System.Windows.Automation.Peers.WindowAutomationPeer&quot;></xref> object for this <xref href=&quot;System.Windows.Window&quot;></xref>."
  overload: System.Windows.Window.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnDeactivated(System.EventArgs)
  id: OnDeactivated(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnDeactivated(EventArgs)
  nameWithType: Window.OnDeactivated(EventArgs)
  fullName: System.Windows.Window.OnDeactivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Genera il <xref href=&quot;System.Windows.Window.Deactivated&quot;> </xref> evento."
  remarks: "OnDeactivated genera il <xref:System.Windows.Window.Deactivated>evento.</xref:System.Windows.Window.Deactivated>       Un tipo che deriva da <xref:System.Windows.Window>può eseguire l&quot;override di OnDeactivated.</xref:System.Windows.Window> Il metodo sottoposto a override deve chiamare OnDeactivated sulla classe di base se <xref:System.Windows.Window.Deactivated>deve essere generato.</xref:System.Windows.Window.Deactivated>"
  syntax:
    content: protected virtual void OnDeactivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Un <xref:System.EventArgs>che contiene i dati dell&quot;evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnDeactivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  id: OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Window.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Window.OnDpiChanged(DpiScale,DpiScale)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Chiamato quando il valore del DPI questa finestra viene eseguito il rendering di modifiche."
  syntax:
    content: protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);
    parameters:
    - id: oldDpi
      type: System.Windows.DpiScale
      description: "La scala DPI precedente impostazione."
    - id: newDpi
      type: System.Windows.DpiScale
      description: "La scala DPI nuova impostazione."
  overload: System.Windows.Window.OnDpiChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)
  id: OnLocationChanged(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnLocationChanged(EventArgs)
  nameWithType: Window.OnLocationChanged(EventArgs)
  fullName: System.Windows.Window.OnLocationChanged(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Genera il <xref href=&quot;System.Windows.Window.LocationChanged&quot;> </xref> evento."
  remarks: "OnLocationChanged genera il <xref:System.Windows.Window.LocationChanged>evento.</xref:System.Windows.Window.LocationChanged>       Un tipo che deriva da <xref:System.Windows.Window>può eseguire l&quot;override di OnLocationChanged.</xref:System.Windows.Window> Il metodo sottoposto a override deve chiamare OnLocationChanged sulla classe di base se <xref:System.Windows.Window.LocationChanged>deve essere generato.</xref:System.Windows.Window.LocationChanged>"
  syntax:
    content: protected virtual void OnLocationChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Un <xref:System.EventArgs>che contiene i dati dell&quot;evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnLocationChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  id: OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Chiamato quando il <xref href=&quot;System.Windows.UIElement.ManipulationBoundaryFeedback&quot;> </xref> si verifica l&quot;evento."
  remarks: "Questa implementazione non modifica lo stato gestito (la <xref:System.Windows.RoutedEventArgs.Handled%2A>proprietà) del <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>dati dell&quot;evento.</xref:System.Windows.UIElement.ManipulationBoundaryFeedback> </xref:System.Windows.RoutedEventArgs.Handled%2A>"
  syntax:
    content: protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
      description: "I dati per l&quot;evento."
  overload: System.Windows.Window.OnManipulationBoundaryFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)
  id: OnSourceInitialized(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnSourceInitialized(EventArgs)
  nameWithType: Window.OnSourceInitialized(EventArgs)
  fullName: System.Windows.Window.OnSourceInitialized(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Genera il <xref href=&quot;System.Windows.Window.SourceInitialized&quot;> </xref> evento."
  remarks: "OnSourceInitialized genera il <xref:System.Windows.Window.SourceInitialized>evento.</xref:System.Windows.Window.SourceInitialized>       Un tipo che deriva da <xref:System.Windows.Window>può eseguire l&quot;override di OnSourceInitialized.</xref:System.Windows.Window> Il metodo sottoposto a override deve chiamare OnSourceInitialized sulla classe di base se <xref:System.Windows.Window.SourceInitialized>deve essere generato.</xref:System.Windows.Window.SourceInitialized>"
  syntax:
    content: protected virtual void OnSourceInitialized (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Un <xref:System.EventArgs>che contiene i dati dell&quot;evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnSourceInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnStateChanged(System.EventArgs)
  id: OnStateChanged(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnStateChanged(EventArgs)
  nameWithType: Window.OnStateChanged(EventArgs)
  fullName: System.Windows.Window.OnStateChanged(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Genera il <xref href=&quot;System.Windows.Window.StateChanged&quot;> </xref> evento."
  remarks: "OnStateChanged genera il <xref:System.Windows.Window.StateChanged>evento.</xref:System.Windows.Window.StateChanged>       Un tipo che deriva da <xref:System.Windows.Window>può eseguire l&quot;override di OnStateChanged.</xref:System.Windows.Window> Il metodo sottoposto a override deve chiamare OnStateChanged sulla classe di base se <xref:System.Windows.Window.StateChanged>deve essere generato.</xref:System.Windows.Window.StateChanged>"
  syntax:
    content: protected virtual void OnStateChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Un <xref:System.EventArgs>che contiene i dati dell&quot;evento.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnStateChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Window.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Window.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Chiamato quando viene modificato l&quot;elemento padre della finestra."
  syntax:
    content: protected override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "L&quot;elemento padre precedente. Impostare su null se il <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> non conteneva un elemento padre precedente."
  overload: System.Windows.Window.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OwnedWindows
  id: OwnedWindows
  parent: System.Windows.Window
  langs:
  - csharp
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
  fullName: System.Windows.Window.OwnedWindows
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene una raccolta di windows per cui questa finestra è il proprietario."
  remarks: "È una finestra di proprietà il cui <xref:System.Windows.Window.Owner%2A>proprietà è impostata con un riferimento a un&quot;altra finestra, nota come finestra proprietaria.</xref:System.Windows.Window.Owner%2A> Per trovare tutte le finestre che una finestra proprietaria, è possibile enumerare <xref:System.Windows.WindowCollection>restituito dalla proprietà OwnedWindows.</xref:System.Windows.WindowCollection>"
  example:
  - "The following example shows how to enumerate OwnedWindows.  \n  \n [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/add/codesnippet/visualbasic/windowownerownedwindowssnippets/mainwindow.xaml.vb#getwindowownedwindowscode)]\n [!code-cs[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/add/codesnippet/csharp/WindowOwnerOwnedWindowsSnippets.CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]"
  syntax:
    content: public System.Windows.WindowCollection OwnedWindows { get; }
    return:
      type: System.Windows.WindowCollection
      description: "Oggetto <xref href=&quot;System.Windows.WindowCollection&quot;> </xref> che contiene riferimenti a windows per cui questa finestra è il proprietario."
  overload: System.Windows.Window.OwnedWindows*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Owner
  id: Owner
  parent: System.Windows.Window
  langs:
  - csharp
  name: Owner
  nameWithType: Window.Owner
  fullName: System.Windows.Window.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta il <xref href=&quot;System.Windows.Window&quot;> </xref> che possiede questo <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Quando una finestra figlio viene aperto da una finestra padre chiamando <xref:System.Windows.Window.ShowDialog%2A>, viene stabilita una relazione implicita tra la finestra padre e figlio.</xref:System.Windows.Window.ShowDialog%2A> Questa relazione applica determinati comportamenti, tra cui rispetto alla riduzione, ottimizzare e il ripristino.       Quando una finestra figlio viene creata da una finestra padre chiamando <xref:System.Windows.Window.Show%2A>, tuttavia, la finestra figlio non ha una relazione con la finestra padre.</xref:System.Windows.Window.Show%2A> Ciò significa che:-la finestra figlio non dispone di un riferimento alla finestra padre.      -Il comportamento della finestra figlio non è dipendente dal comportamento della finestra padre. entrambe le finestre possono coprire l&quot;altra o essere ridotta a icona, ingrandito e ripristinato indipendente.       Consente di creare una relazione tra una finestra figlio e una finestra padre, <xref:System.Windows.Window>supporta la nozione di proprietà.</xref:System.Windows.Window> La proprietà viene stabilita quando la proprietà del proprietario di una finestra (finestra proprietà) è impostata con un riferimento a un&quot;altra finestra (finestra proprietaria).       Una volta stabilita la relazione, si verificano i comportamenti seguenti:-se una finestra ridotta a icona, tutte le finestre di proprietà sono ridotte a icona anche.      -Se è ridotta a icona una finestra di proprietà, il proprietario non viene ridotto.      -Se una finestra è ingrandita, sia la finestra proprietaria e le finestre di proprietà vengono ripristinate.      -Una finestra proprietaria non è in grado di coprire una finestra di proprietà.      -Proprietà che non sono state aperte tramite <xref:System.Windows.Window.ShowDialog%2A>non sono modale.</xref:System.Windows.Window.ShowDialog%2A> L&quot;utente può interagire con la finestra proprietaria.      -Se si chiude una finestra proprietaria, le finestre di proprietà vengono chiusi.      -Se è stata aperta una finestra di proprietà finestra proprietaria tramite <xref:System.Windows.Window.Show%2A>e il proprietario della finestra è chiusa, la finestra di proprietà <xref:System.Windows.Window.Closing>non viene generato.</xref:System.Windows.Window.Closing> </xref:System.Windows.Window.Show%2A>       Quando si apre una finestra figlio chiamando <xref:System.Windows.Window.ShowDialog%2A>, è necessario impostare anche la proprietà del proprietario della finestra figlio.</xref:System.Windows.Window.ShowDialog%2A> In caso contrario, gli utenti sarà in grado di ripristinare sia finestre figlio e padre premendo il pulsante della barra. In alternativa, premere il pulsante della barra verrà generato un elenco di windows, tra cui finestra padre e figlio, per poter selezionare; viene ripristinata solo sulla finestra selezionata.      > [!IMPORTANT] > È anche necessario impostare la proprietà Owner su una finestra che viene aperto chiamando <xref:System.Windows.Window.ShowDialog%2A>per assicurare il corretto funzionamento con.</xref:System.Windows.Window.ShowDialog%2A>      > [!NOTE] > Non è possibile impostare o ottenere questa proprietà quando una finestra è ospitata in un browser."
  example:
  - "The following example shows how to establish the owner/owned relationship.  \n  \n [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/add/codesnippet/visualbasic/windowownerownedwindowssnippets/mainwindow.xaml.vb#setwindowownercode)]\n [!code-cs[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/add/codesnippet/csharp/WindowOwnerOwnedWindowsSnippets.CSharp/MainWindow.xaml.cs#setwindowownercode)]"
  syntax:
    content: public System.Windows.Window Owner { get; set; }
    return:
      type: System.Windows.Window
      description: "Oggetto <xref href=&quot;System.Windows.Window&quot;> </xref> oggetto che rappresenta il proprietario di questo <xref href=&quot;System.Windows.Window&quot;> </xref>."
  overload: System.Windows.Window.Owner*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Una finestra tenta di proprietario di se stesso oppure due finestre tentano di proprietari tra loro."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La proprietà Owner è impostata su una finestra visibile visualizzata tramite <xref:System.Windows.Window.ShowDialog*>- oppure - proprietario la proprietà è impostata con una finestra che non è stata illustrata in precedenza.</xref:System.Windows.Window.ShowDialog*>"
  platform:
  - net462
- uid: System.Windows.Window.ResizeMode
  id: ResizeMode
  parent: System.Windows.Window
  langs:
  - csharp
  name: ResizeMode
  nameWithType: Window.ResizeMode
  fullName: System.Windows.Window.ResizeMode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta la modalità di ridimensionamento."
  remarks: "Sono disponibili quattro opzioni:- **NoResize**. L&quot;utente non è possibile ridimensionare la finestra. Non vengono visualizzate le caselle di ingrandimento e riduzione a icona.      - **CanMinimize**. L&quot;utente può solo ridurre a icona la finestra e ripristinarlo nella barra delle applicazioni. Le caselle di riduzione a icona e Ingrandisci sono entrambi disponibili, ma solo la casella di riduzione a icona è abilitata.      - **CanResize**. L&quot;utente ha la possibilità di effettuare ridimensionare la finestra, utilizzando le caselle di riduzione a icona e Ingrandisci e una struttura draggable intorno alla finestra. Le caselle di riduzione a icona e Ingrandisci sono visualizzate e abilitate. (Impostazione predefinita).      - **CanResizeWithGrip**. Questa opzione ha la stessa funzionalità <xref:System.Windows.ResizeMode>, ma aggiunge un &quot;ridimensionamento&quot; nell&quot;angolo inferiore destro della finestra.</xref:System.Windows.ResizeMode>      > [!NOTE] > Non è possibile impostare o ottenere questa proprietà quando una finestra è ospitata in un browser.      <a name=&quot;dependencyPropertyInfo_WindowResizeMode&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.ResizeModeProperty>|   | Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.Window.ResizeModeProperty>"
  syntax:
    content: public System.Windows.ResizeMode ResizeMode { get; set; }
    return:
      type: System.Windows.ResizeMode
      description: "Oggetto <xref href=&quot;System.Windows.ResizeMode&quot;> </xref> valore che specifica la modalità di ridimensionamento."
  overload: System.Windows.Window.ResizeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ResizeModeProperty
  id: ResizeModeProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ResizeModeProperty
  nameWithType: Window.ResizeModeProperty
  fullName: System.Windows.Window.ResizeModeProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.ResizeMode*>proprietà di dipendenza.</xref:System.Windows.Window.ResizeMode*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ResizeModeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.RestoreBounds
  id: RestoreBounds
  parent: System.Windows.Window
  langs:
  - csharp
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
  fullName: System.Windows.Window.RestoreBounds
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene le dimensioni e la posizione di una finestra prima della riduzione a icona o ingrandita."
  remarks: "Il rettangolo di ripristino è l&quot;area occupata dalla finestra prima che è stata ridotta a icona o ingrandita. È possibile utilizzare RestoreBounds per salvare le ultime dimensioni e posizione di una finestra prima di chiusa un&quot;applicazione e al successivo che avvio di un&quot;applicazione per ripristinare una finestra al modo in cui un utente ha lasciato per recuperare i valori.       Se si esegue una query RestoreBounds prima la finestra o dopo che è stato chiuso, <xref:System.Windows.Rect.Empty%2A>viene restituito.</xref:System.Windows.Rect.Empty%2A>      > [!NOTE] > Non è possibile ottenere questa proprietà quando una finestra è ospitata in un browser."
  example:
  - "The following example uses RestoreBounds and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.  \n  \n [!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/add/codesnippet/xaml/WindowRestoreBoundsSnippets/MainWindow.xaml#windowrestoreboundsxaml1)]  \n[!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/add/codesnippet/xaml/WindowRestoreBoundsSnippets/MainWindow.xaml#windowrestoreboundsxaml2)]  \n  \n [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/add/codesnippet/visualbasic/windowrestoreboundssnippets/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]\n [!code-cs[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/add/codesnippet/csharp/WindowRestoreBoundsSnippets/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]  \n[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/add/codesnippet/visualbasic/windowrestoreboundssnippets/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]\n[!code-cs[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/add/codesnippet/csharp/WindowRestoreBoundsSnippets/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]"
  syntax:
    content: public System.Windows.Rect RestoreBounds { get; }
    return:
      type: System.Windows.Rect
      description: "Oggetto <xref href=&quot;System.Windows.Rect&quot;> </xref> che specifica le dimensioni e la posizione di una finestra prima della riduzione a icona o ingrandita."
  overload: System.Windows.Window.RestoreBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Show
  id: Show
  parent: System.Windows.Window
  langs:
  - csharp
  name: Show()
  nameWithType: Window.Show()
  fullName: System.Windows.Window.Show()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Apre una finestra e restituisce senza attendere la chiusura della finestra appena aperta."
  remarks: "Quando il <xref:System.Windows.Window>viene creata un&quot;istanza di classe, non è visibile per impostazione predefinita.</xref:System.Windows.Window> Viene visualizzata una finestra e restituisce immediatamente, senza attendere la chiusura della finestra. Di conseguenza, la finestra aperta non impedisce l&quot;interazione con altre finestre dell&quot;applicazione. Questo tipo di finestra viene chiamato un *non modale* finestra. Esempi comuni di windows non modali sono tavolozze caselle e finestre delle proprietà. Per impedire un utente di interagire con una finestra specifica, è necessario aprire la finestra chiamando <xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A>       Una finestra che viene aperto chiamando Mostra dispone automaticamente di una relazione con la finestra aperta. in particolare, la finestra aperta non conosce quale finestra stato aperto. Questa relazione può essere stabilita utilizzando il <xref:System.Windows.Window.Owner%2A>proprietà e gestiti mediante il <xref:System.Windows.Window.OwnedWindows%2A>proprietà.</xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.Owner%2A>       La chiamata di presentazione si ottiene lo stesso risultato dell&quot;impostazione di <xref:System.Windows.UIElement.Visibility%2A>proprietà dell&quot; <xref:System.Windows.Window>oggetto <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.Window> </xref:System.Windows.UIElement.Visibility%2A> Tuttavia, sussiste una differenza tra i due termini di intervallo.       Chiamare Show è un&quot;operazione sincrona che restituisce solo dopo che il <xref:System.Windows.FrameworkElement.Loaded>sulla finestra figlio dell&quot;evento: [!code-vb [WindowShowTimingSnippets #ShowSync](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showsync)][!code-cs[WindowShowTimingSnippets #ShowSync](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showsync) ] impostazione <xref:System.Windows.UIElement.Visibility%2A>, tuttavia, è un&quot;operazione asincrona che restituisce immediatamente: [!code-vb [WindowShowTimingSnippets #ShowASync](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showasync)][!code-cs[WindowShowTimingSnippets #ShowASync](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showasync) ] durante l&quot;impostazione <xref:System.Windows.UIElement.Visibility%2A>, gli eventi di finestra è registrare prima di impostare <xref:System.Windows.UIElement.Visibility%2A>non può essere generato solo dopo il metodo in cui è impostato <xref:System.Windows.UIElement.Visibility%2A>ha completato l&quot;esecuzione.</xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.UIElement.Visibility%2A>   </xref:System.Windows.UIElement.Visibility%2A>   </xref:System.Windows.FrameworkElement.Loaded>"
  example:
  - "The following sample demonstrates how to open a modeless window.  \n  \n [!code-vb[WindowShowSnippets#WindowShowCODE](~/add/codesnippet/visualbasic/windowshowsnippets/mainwindow.xaml.vb#windowshowcode)]\n [!code-cs[WindowShowSnippets#WindowShowCODE](~/add/codesnippet/csharp/WindowShowSnippets.CSharp/MainWindow.xaml.cs#windowshowcode)]"
  syntax:
    content: public void Show ();
    parameters: []
  overload: System.Windows.Window.Show*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Mostra viene chiamato su una finestra in fase di chiusura (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) o è stata chiusa (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)."
  platform:
  - net462
- uid: System.Windows.Window.ShowActivated
  id: ShowActivated
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowActivated
  nameWithType: Window.ShowActivated
  fullName: System.Windows.Window.ShowActivated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se una finestra viene attivata quando viene visualizzata."
  remarks: "Quando una finestra con la proprietà ShowActivated impostata su `false` è aperto, la finestra non è attivata e il relativo <xref:System.Windows.Window.Activated>evento non viene generato fino a quando un utente attiva manualmente la finestra selezionando tale</xref:System.Windows.Window.Activated> Dopo aver selezionata la finestra, attiva e disattiva normalmente.       Per impedire che viene attivata quando si apre una finestra, è necessario impostare la proprietà ShowActivated `false` prima di visualizzare la finestra (chiamando <xref:System.Windows.Window.Show%2A>); impostare ShowActivated `false` dopo avere visualizzata una finestra non ha alcun effetto.</xref:System.Windows.Window.Show%2A>       L&quot;impostazione ShowActivated su `false` in una finestra che viene aperta come modale, chiamando <xref:System.Windows.Window.ShowDialog%2A>, ha un impatto reale.</xref:System.Windows.Window.ShowDialog%2A> Anche se non verrà attivata la finestra modale, finestra modale impedirà all&quot;utente di attivare altre finestre dell&quot;applicazione aperte.      <a name=&quot;dependencyPropertyInfo_WindowShowActivated&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.ShowActivatedProperty>|   | Impostare le proprietà dei metadati su `true`| None |</xref:System.Windows.Window.ShowActivatedProperty>"
  example:
  - "The following example shows how to use markup to configure a window to be opened without being activated.  \n  \n [!code-xml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/add/codesnippet/xaml/WindowShowActivatedSnippets/AWindow.xaml#showunactivatedmarkup1)]  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/add/codesnippet/csharp/WindowShowActivatedSnippets/AWindow.xaml.cs#showunactivatedcodebehind)]\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/add/codesnippet/visualbasic/windowshowactivatedsnippets/awindow.xaml.vb#showunactivatedcodebehind)]  \n  \n The following example shows how to use code to configure a window to be opened without it being activated.  \n  \n [!code-cs[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/add/codesnippet/csharp/WindowShowActivatedSnippets/Window1.xaml.cs#showunactivatedwindowcode)]\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/add/codesnippet/visualbasic/windowshowactivatedsnippets/window1.xaml.vb#showunactivatedwindowcode)]"
  syntax:
    content: public bool ShowActivated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se una finestra è attivata la prima visualizzata. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.ShowActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowActivatedProperty
  id: ShowActivatedProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowActivatedProperty
  nameWithType: Window.ShowActivatedProperty
  fullName: System.Windows.Window.ShowActivatedProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.ShowActivated*>proprietà di dipendenza.</xref:System.Windows.Window.ShowActivated*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ShowActivatedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowDialog
  id: ShowDialog
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowDialog()
  nameWithType: Window.ShowDialog()
  fullName: System.Windows.Window.ShowDialog()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Apre una finestra e restituisce solo quando viene chiusa la finestra appena aperta."
  remarks: "Quando un <xref:System.Windows.Window>viene creata un&quot;istanza di classe, non è visibile per impostazione predefinita.</xref:System.Windows.Window> ShowDialog Mostra la finestra, disabilita tutte le altre finestre dell&quot;applicazione e viene restituita solo quando la finestra è chiusa. Questo tipo di finestra è noto come un *modale* finestra.       Finestre modali vengono utilizzate principalmente come finestre di dialogo. Una finestra di dialogo è un tipo speciale di finestra utilizzato dalle applicazioni per interagire con gli utenti per completare le attività, ad esempio l&quot;apertura di file o la stampa di documenti. Finestre di dialogo in genere consentono agli utenti di accettare o annullare l&quot;attività per cui vengono visualizzate prima la finestra di dialogo viene chiusa. ShowDialog restituisce un <xref:System.Nullable%601> <xref:System.Boolean>valore che specifica se l&quot;attività è stata accettata o annullata.</xref:System.Boolean></xref:System.Nullable%601> Il valore restituito è il valore di <xref:System.Windows.Window.DialogResult%2A>proprietà prima della chiusura di una finestra.</xref:System.Windows.Window.DialogResult%2A> Per ulteriori informazioni, vedere <xref:System.Windows.Window.DialogResult%2A>.</xref:System.Windows.Window.DialogResult%2A>       Una finestra che viene aperto chiamando il metodo ShowDialog non dispone automaticamente una relazione con la finestra aperta. in particolare, la finestra aperta non conosce quale finestra stato aperto. Questa relazione può essere stabilita utilizzando il <xref:System.Windows.Window.Owner%2A>proprietà e gestiti mediante il <xref:System.Windows.Window.OwnedWindows%2A>proprietà.</xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.Owner%2A> Per supportare [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] automazione (vedere [Panoramica di automazione dell&quot;interfaccia utente](~/add/includes/ajax-current-ext-md.md)), <xref:System.Windows.Window.Owner%2A>deve essere impostata per una finestra aperta mediante la chiamata di ShowDialog.</xref:System.Windows.Window.Owner%2A>       Quando un oggetto modale [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] (una finestra aperta mediante una chiamata di ShowDialog) è chiuso, viene riattivata la finestra attivata in precedenza. Se un oggetto modale [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] finestra dispone di una finestra proprietaria (vedere <xref:System.Windows.Window.Owner%2A>), la finestra proprietaria non è riattivata quando modal [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] finestra è chiusa, a meno che non si tratti della finestra attivata in precedenza.</xref:System.Windows.Window.Owner%2A>      > [!NOTE] > Questo metodo non può essere chiamato quando una finestra è ospitata in un browser."
  example:
  - "The following sample demonstrates how to open a modal window.  \n  \n [!code-cs[WindowShowDialogSnippets#WindowShowDialogCODE](~/add/codesnippet/csharp/WindowShowDialogSnippets.CSharp/MainWindow.xaml.cs#windowshowdialogcode)]\n [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/add/codesnippet/visualbasic/windowshowdialogsnippets/mainwindow.xaml.vb#windowshowdialogcode)]"
  syntax:
    content: public Nullable<bool> ShowDialog ();
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
      description: "Oggetto &lt;xref:System.Nullable%601&gt; valore di tipo <xref:System.Boolean>che specifica se l&quot;attività è stata accettata (<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>) o annullata (<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>).</xref:System.Boolean> Il valore restituito è il valore di <xref:System.Windows.Window.DialogResult*>proprietà prima della chiusura di una finestra.</xref:System.Windows.Window.DialogResult*>"
  overload: System.Windows.Window.ShowDialog*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ShowDialog viene chiamato su una finestra in fase di chiusura (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) o è stata chiusa (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)."
  platform:
  - net462
- uid: System.Windows.Window.ShowInTaskbar
  id: ShowInTaskbar
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
  fullName: System.Windows.Window.ShowInTaskbar
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se la finestra dispone di un pulsante della barra attività."
  remarks: "Se ShowInTaskbar è impostata su `true`, la finestra verrà anche visualizzata nell&quot;elenco di selezione applicazione ALT + TAB.       L&quot;icona utilizzata per il pulsante della barra sia l&quot;elenco di selezione applicazione ALT + TAB è il valore di <xref:System.Windows.Window.Icon%2A>proprietà.</xref:System.Windows.Window.Icon%2A>      > [!NOTE] > Non è possibile impostare o ottenere questa proprietà quando una finestra è ospitata in un browser.      <a name=&quot;dependencyPropertyInfo_WindowShowInTaskbar&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.ShowInTaskbarProperty>|   | Impostare le proprietà dei metadati su `true`| None |</xref:System.Windows.Window.ShowInTaskbarProperty>"
  syntax:
    content: public bool ShowInTaskbar { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la finestra ha un pulsante sulla barra attività. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Non è applicabile quando la finestra è ospitata in un browser."
  overload: System.Windows.Window.ShowInTaskbar*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowInTaskbarProperty
  id: ShowInTaskbarProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowInTaskbarProperty
  nameWithType: Window.ShowInTaskbarProperty
  fullName: System.Windows.Window.ShowInTaskbarProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.ShowInTaskbar*>proprietà di dipendenza.</xref:System.Windows.Window.ShowInTaskbar*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SizeToContent
  id: SizeToContent
  parent: System.Windows.Window
  langs:
  - csharp
  name: SizeToContent
  nameWithType: Window.SizeToContent
  fullName: System.Windows.Window.SizeToContent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se una finestra verrà ridimensionata automaticamente in base alle dimensioni del contenuto."
  remarks: "Quando SizeToContent è impostata su <xref:System.Windows.SizeToContent>, impostazione <xref:System.Windows.FrameworkElement.Height%2A>o <xref:System.Windows.FrameworkElement.Width%2A>non ha alcun effetto; è possibile impostare entrambe le proprietà, ma i valori che sono stati impostati con non vengono applicati alla finestra.</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.SizeToContent>       Quando SizeToContent è impostata su <xref:System.Windows.SizeToContent>, l&quot;impostazione <xref:System.Windows.FrameworkElement.Height%2A>non modifica l&quot;altezza della finestra.</xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.SizeToContent>       Quando SizeToContent è impostata su <xref:System.Windows.SizeToContent>, l&quot;impostazione <xref:System.Windows.FrameworkElement.Width%2A>non modifica la larghezza della finestra.</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.SizeToContent>       Se SizeToContent ha un valore diverso da <xref:System.Windows.SizeToContent>:-SizeToContent viene impostato automaticamente su <xref:System.Windows.SizeToContent>Se un utente ridimensiona la finestra utilizzando il ridimensionamento o trascinando il bordo.</xref:System.Windows.SizeToContent> </xref:System.Windows.SizeToContent>      -Se cambiano le dimensioni del contenuto in modo che la finestra di ridimensionamento, <xref:System.Windows.FrameworkElement.SizeChanged>viene generato.</xref:System.Windows.FrameworkElement.SizeChanged>       Se una finestra è trasparente (vedere <xref:System.Windows.Window.AllowsTransparency%2A>), è consigliabile impostare SizeToContent <xref:System.Windows.SizeToContent>per garantire la finestra non siano maggiore del relativo contenuto visibile.</xref:System.Windows.SizeToContent> </xref:System.Windows.Window.AllowsTransparency%2A>      > [!NOTE] > Non è possibile impostare o ottenere questa proprietà quando una finestra è ospitata in un browser.      <a name=&quot;dependencyPropertyInfo_WindowSizeToContent&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.SizeToContentProperty>|   | Impostare le proprietà dei metadati su `true`| None |</xref:System.Windows.Window.SizeToContentProperty>"
  example:
  - "The following example shows how to set the SizeToContent property in code to specify how a window resizes to fit its content.  \n  \n [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/add/codesnippet/visualbasic/howtowindowmanagementsnippets/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]\n [!code-cs[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/add/codesnippet/csharp/HOWTOWindowManagementSnippets/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]"
  syntax:
    content: public System.Windows.SizeToContent SizeToContent { get; set; }
    return:
      type: System.Windows.SizeToContent
      description: "A <xref href=&quot;System.Windows.SizeToContent&quot;></xref> value. Il valore predefinito è <xref href=&quot;System.Windows.SizeToContent&quot;> </xref>."
  overload: System.Windows.Window.SizeToContent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SizeToContentProperty
  id: SizeToContentProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: SizeToContentProperty
  nameWithType: Window.SizeToContentProperty
  fullName: System.Windows.Window.SizeToContentProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.SizeToContent*>proprietà di dipendenza.</xref:System.Windows.Window.SizeToContent*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty SizeToContentProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SourceInitialized
  id: SourceInitialized
  parent: System.Windows.Window
  langs:
  - csharp
  name: SourceInitialized
  nameWithType: Window.SourceInitialized
  fullName: System.Windows.Window.SourceInitialized
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Questo evento viene generato per supportare l&quot;interazione con [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]. See <xref href=&quot;System.Windows.Interop.HwndSource&quot;></xref>."
  syntax:
    content: public event EventHandler SourceInitialized;
    return:
      type: System.EventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.StateChanged
  id: StateChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: StateChanged
  nameWithType: Window.StateChanged
  fullName: System.Windows.Window.StateChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Si verifica quando la finestra <xref:System.Windows.Window.WindowState*>le modifiche alle proprietà.</xref:System.Windows.Window.WindowState*>"
  syntax:
    content: public event EventHandler StateChanged;
    return:
      type: System.EventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TaskbarItemInfo
  id: TaskbarItemInfo
  parent: System.Windows.Window
  langs:
  - csharp
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
  fullName: System.Windows.Window.TaskbarItemInfo
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta il [!INCLUDE[win7](~/add/includes/win7-md.md)] anteprima barra delle applicazioni per il <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Per ulteriori informazioni sull&quot;utilizzo di [!INCLUDE[win7](~/add/includes/win7-md.md)] anteprima della barra delle applicazioni, vedere la <xref:System.Windows.Shell.TaskbarItemInfo>classe.</xref:System.Windows.Shell.TaskbarItemInfo>"
  syntax:
    content: public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }
    return:
      type: System.Windows.Shell.TaskbarItemInfo
      description: "Il [!INCLUDE[win7](~/add/includes/win7-md.md)] anteprima barra delle applicazioni per il <xref href=&quot;System.Windows.Window&quot;> </xref>."
  overload: System.Windows.Window.TaskbarItemInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TaskbarItemInfoProperty
  id: TaskbarItemInfoProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TaskbarItemInfoProperty
  nameWithType: Window.TaskbarItemInfoProperty
  fullName: System.Windows.Window.TaskbarItemInfoProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.TaskbarItemInfo*>proprietà di dipendenza.</xref:System.Windows.Window.TaskbarItemInfo*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Title
  id: Title
  parent: System.Windows.Window
  langs:
  - csharp
  name: Title
  nameWithType: Window.Title
  fullName: System.Windows.Window.Title
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta il titolo di una finestra."
  remarks: "Il titolo di un <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, o [!INCLUDE[TLA#tla_iegeneric](~/add/includes/tlasharptla-iegeneric-md.md)], può essere impostato anche tramite <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName>.</xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Window>      <a name=&quot;dependencyPropertyInfo_WindowTitle&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.TitleProperty>|   | Impostare le proprietà dei metadati su `true`| None |</xref:System.Windows.Window.TitleProperty>"
  syntax:
    content: public string Title { get; set; }
    return:
      type: System.String
      description: "Oggetto <xref:System.String>che contiene il titolo della finestra.</xref:System.String>"
  overload: System.Windows.Window.Title*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TitleProperty
  id: TitleProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TitleProperty
  nameWithType: Window.TitleProperty
  fullName: System.Windows.Window.TitleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.Title*>proprietà di dipendenza.</xref:System.Windows.Window.Title*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TitleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Top
  id: Top
  parent: System.Windows.Window
  langs:
  - csharp
  name: Top
  nameWithType: Window.Top
  fullName: System.Windows.Window.Top
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta la posizione del bordo superiore della finestra, in relazione al desktop."
  remarks: "Quando <xref:System.Windows.Window>viene ingrandito o ridotto a icona, questo valore rappresenta il bordo superiore del ripristino punto per <xref:System.Windows.Window>.</xref:System.Windows.Window> </xref:System.Windows.Window>       Questa proprietà non può essere impostata tramite uno stile.       Se non si specifica un valore, Top è impostata sul valore predefinito di sistema. È inoltre possibile specificare il valore predefinito di sistema impostando Top e <xref:System.Double.NaN>.</xref:System.Double.NaN> Né <xref:System.Double.NegativeInfinity>né <xref:System.Double.PositiveInfinity>è un valore valido per primi.</xref:System.Double.PositiveInfinity> </xref:System.Double.NegativeInfinity>      > [!NOTE] > Non è possibile impostare o ottenere questa proprietà quando una finestra è ospitata in un browser.      <a name=&quot;dependencyPropertyInfo_WindowTop&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.TopProperty>|   | Impostare le proprietà dei metadati su `true`| None |</xref:System.Windows.Window.TopProperty>"
  syntax:
    content: public double Top { get; set; }
    return:
      type: System.Double
      description: "Posizione della parte superiore della finestra, in unità logiche (1/96&quot;)."
  overload: System.Windows.Window.Top*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Topmost
  id: Topmost
  parent: System.Windows.Window
  langs:
  - csharp
  name: Topmost
  nameWithType: Window.Topmost
  fullName: System.Windows.Window.Topmost
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se viene visualizzata una finestra nell&quot;ordine z di primo piano."
  remarks: "Una finestra in primo piano con la proprietà è impostata su `true` viene visualizzata sopra tutte le finestre le cui proprietà di livello più alto è impostata su `false`.       Nel gruppo di windows che hanno Topmost proprietà è impostata su `true`, la finestra che viene attualmente attivata è la finestra in primo piano. Allo stesso modo per il gruppo di windows che hanno Topmost proprietà è impostata su `false`.      > [!NOTE] > Non è possibile impostare o ottenere questa proprietà quando una finestra è ospitata in un browser.      <a name=&quot;dependencyPropertyInfo_WindowTopmost&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.TopmostProperty>|   | Impostare le proprietà dei metadati su `true`| None |</xref:System.Windows.Window.TopmostProperty>"
  syntax:
    content: public bool Topmost { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la finestra in primo piano; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.Topmost*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TopmostProperty
  id: TopmostProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TopmostProperty
  nameWithType: Window.TopmostProperty
  fullName: System.Windows.Window.TopmostProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.Topmost*>proprietà di dipendenza.</xref:System.Windows.Window.Topmost*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TopmostProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TopProperty
  id: TopProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TopProperty
  nameWithType: Window.TopProperty
  fullName: System.Windows.Window.TopProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.Top*>proprietà di dipendenza.</xref:System.Windows.Window.Top*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TopProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStartupLocation
  id: WindowStartupLocation
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
  fullName: System.Windows.Window.WindowStartupLocation
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta la posizione della finestra alla prima visualizzazione."
  remarks: "Impostazione <xref:System.Windows.WindowStartupLocation>per <xref:System.Windows.WindowStartupLocation>, una finestra deve essere posizionato in base al relativo <xref:System.Windows.Window.Left%2A>e <xref:System.Windows.Window.Top%2A>i valori delle proprietà.</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A> </xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation> Se il valore di <xref:System.Windows.Window.Left%2A>o <xref:System.Windows.Window.Top%2A>non viene specificata, i relativi valori sono determinati da [!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)].</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A>       Impostazione <xref:System.Windows.WindowStartupLocation>, una finestra deve essere posizionato al centro dello schermo che contiene il cursore del mouse.</xref:System.Windows.WindowStartupLocation>       Impostazione <xref:System.Windows.WindowStartupLocation>per <xref:System.Windows.WindowStartupLocation>, una finestra deve essere posizionato al centro della relativa finestra proprietaria (vedere <xref:System.Windows.Window.Owner%2A>), se specificato.</xref:System.Windows.Window.Owner%2A> </xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation> La finestra proprietaria può essere un&quot;altra finestra WPF o una finestra non WPF.      > [!NOTE] > Per ulteriori informazioni sulle finestre WPF con finestre non WPF, vedere [interoperatività di WPF e Win32](~/add/includes/ajax-current-ext-md.md) e <xref:System.Windows.Interop.WindowInteropHelper>.</xref:System.Windows.Interop.WindowInteropHelper>       Se una finestra proprietaria non è specificata, la posizione della finestra è determinata esattamente come se <xref:System.Windows.WindowStartupLocation>è impostata su <xref:System.Windows.WindowStartupLocation>.</xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation>      > [!NOTE] > Non è possibile impostare o ottenere il valore di questa proprietà quando una finestra è ospitata in un browser."
  syntax:
    content: public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }
    return:
      type: System.Windows.WindowStartupLocation
      description: "Oggetto <xref href=&quot;System.Windows.WindowStartupLocation&quot;> </xref> valore che specifica la posizione dell&quot;angolo superiore sinistro di una finestra quando viene visualizzata. Il valore predefinito è <xref href=&quot;System.Windows.WindowStartupLocation&quot;> </xref>."
  overload: System.Windows.Window.WindowStartupLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowState
  id: WindowState
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowState
  nameWithType: Window.WindowState
  fullName: System.Windows.Window.WindowState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta un valore che indica se una finestra è ripristinata, ridotta a icona o ingrandita."
  remarks: "Prima che una finestra ridotta a icona o ingrandita, le dimensioni e posizione vengono archiviate in <xref:System.Windows.Window.RestoreBounds%2A>.</xref:System.Windows.Window.RestoreBounds%2A> Quando una finestra viene successivamente ripristinata, i valori di dimensioni e posizione vengono ripristinati con i valori da <xref:System.Windows.Window.RestoreBounds%2A>.</xref:System.Windows.Window.RestoreBounds%2A>       Quando viene modificata la proprietà WindowState, <xref:System.Windows.Window.StateChanged>viene generato.</xref:System.Windows.Window.StateChanged>      > [!NOTE] > Non è possibile impostare o ottenere questa proprietà quando una finestra è ospitata in un browser.      <a name=&quot;dependencyPropertyInfo_WindowWindowState&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.WindowStateProperty>|   | Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|</xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A> </xref:System.Windows.Window.WindowStateProperty>"
  syntax:
    content: public System.Windows.WindowState WindowState { get; set; }
    return:
      type: System.Windows.WindowState
      description: "Oggetto <xref href=&quot;System.Windows.WindowState&quot;> </xref> che determina se una finestra è ripristinata, ridotta a icona o ingrandita. Il valore predefinito è <xref href=&quot;System.Windows.WindowState&quot;> </xref> (ripristinata)."
  overload: System.Windows.Window.WindowState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStateProperty
  id: WindowStateProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStateProperty
  nameWithType: Window.WindowStateProperty
  fullName: System.Windows.Window.WindowStateProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.WindowState*>proprietà di dipendenza.</xref:System.Windows.Window.WindowState*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty WindowStateProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStyle
  id: WindowStyle
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStyle
  nameWithType: Window.WindowStyle
  fullName: System.Windows.Window.WindowStyle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Ottiene o imposta lo stile del bordo di una finestra."
  remarks: "WindowStyle può essere uno del <xref:System.Windows.WindowStyle>valori di enumerazione, tra cui <xref:System.Windows.WindowStyle>, <xref:System.Windows.WindowStyle>, <xref:System.Windows.WindowStyle>(impostazione predefinita) e <xref:System.Windows.WindowStyle>.</xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle>       La figura seguente mostra gli stili di finestra in [!INCLUDE[TLA#tla_longhorn](~/add/includes/ajax-current-ext-md.md)] (tema Windows Vista Aero, con effetto cristallo trasparente abilitata): ![stili finestra](~/add/media/windowoverviewfigure6.PNG &quot;stili finestra&quot;)       >  [!NOTE] > non è possibile impostare o ottenere questa proprietà quando una finestra è ospitata in un browser.      <a name=&quot;dependencyPropertyInfo_WindowWindowStyle&quot;></a># # Informazioni proprietà di dipendenza | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Window.WindowStyleProperty>|   | Impostare le proprietà dei metadati su `true`| None |</xref:System.Windows.Window.WindowStyleProperty>"
  syntax:
    content: public System.Windows.WindowStyle WindowStyle { get; set; }
    return:
      type: System.Windows.WindowStyle
      description: "Oggetto <xref href=&quot;System.Windows.WindowStyle&quot;> </xref> che specifica lo stile del bordo di una finestra. Il valore predefinito è <xref href=&quot;System.Windows.WindowStyle&quot;> </xref>."
  overload: System.Windows.Window.WindowStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStyleProperty
  id: WindowStyleProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStyleProperty
  nameWithType: Window.WindowStyleProperty
  fullName: System.Windows.Window.WindowStyleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identifica la <xref:System.Windows.Window.WindowStyle*>proprietà di dipendenza.</xref:System.Windows.Window.WindowStyle*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty WindowStyleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Controls.ContentControl
  isExternal: false
  name: System.Windows.Controls.ContentControl
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Window.#ctor
  parent: System.Windows.Window
  isExternal: false
  name: Window()
  nameWithType: Window.Window()
  fullName: System.Windows.Window.Window()
- uid: System.Windows.Window.Activate
  parent: System.Windows.Window
  isExternal: false
  name: Activate()
  nameWithType: Window.Activate()
  fullName: System.Windows.Window.Activate()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Window.Activated
  parent: System.Windows.Window
  isExternal: false
  name: Activated
  nameWithType: Window.Activated
  fullName: System.Windows.Window.Activated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Window.AllowsTransparency
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
  fullName: System.Windows.Window.AllowsTransparency
- uid: System.Windows.Window.AllowsTransparencyProperty
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparencyProperty
  nameWithType: Window.AllowsTransparencyProperty
  fullName: System.Windows.Window.AllowsTransparencyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)
  parent: System.Windows.Window
  isExternal: false
  name: ArrangeOverride(Size)
  nameWithType: Window.ArrangeOverride(Size)
  fullName: System.Windows.Window.ArrangeOverride(Size)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Window.Close
  parent: System.Windows.Window
  isExternal: false
  name: Close()
  nameWithType: Window.Close()
  fullName: System.Windows.Window.Close()
- uid: System.Windows.Window.Closed
  parent: System.Windows.Window
  isExternal: false
  name: Closed
  nameWithType: Window.Closed
  fullName: System.Windows.Window.Closed
- uid: System.Windows.Window.Closing
  parent: System.Windows.Window
  isExternal: false
  name: Closing
  nameWithType: Window.Closing
  fullName: System.Windows.Window.Closing
- uid: System.ComponentModel.CancelEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: CancelEventHandler
  nameWithType: CancelEventHandler
  fullName: System.ComponentModel.CancelEventHandler
- uid: System.Windows.Window.ContentRendered
  parent: System.Windows.Window
  isExternal: false
  name: ContentRendered
  nameWithType: Window.ContentRendered
  fullName: System.Windows.Window.ContentRendered
- uid: System.Windows.Window.Deactivated
  parent: System.Windows.Window
  isExternal: false
  name: Deactivated
  nameWithType: Window.Deactivated
  fullName: System.Windows.Window.Deactivated
- uid: System.Windows.Window.DialogResult
  parent: System.Windows.Window
  isExternal: false
  name: DialogResult
  nameWithType: Window.DialogResult
  fullName: System.Windows.Window.DialogResult
- uid: System.Nullable{System.Boolean}
  parent: System
  isExternal: true
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Window.DpiChanged
  parent: System.Windows.Window
  isExternal: false
  name: DpiChanged
  nameWithType: Window.DpiChanged
  fullName: System.Windows.Window.DpiChanged
- uid: System.Windows.DpiChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DpiChangedEventHandler
  nameWithType: DpiChangedEventHandler
  fullName: System.Windows.DpiChangedEventHandler
- uid: System.Windows.Window.DpiChangedEvent
  parent: System.Windows.Window
  isExternal: false
  name: DpiChangedEvent
  nameWithType: Window.DpiChangedEvent
  fullName: System.Windows.Window.DpiChangedEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Window.DragMove
  parent: System.Windows.Window
  isExternal: false
  name: DragMove()
  nameWithType: Window.DragMove()
  fullName: System.Windows.Window.DragMove()
- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  parent: System.Windows.Window
  isExternal: false
  name: GetWindow(DependencyObject)
  nameWithType: Window.GetWindow(DependencyObject)
  fullName: System.Windows.Window.GetWindow(DependencyObject)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Window.Hide
  parent: System.Windows.Window
  isExternal: false
  name: Hide()
  nameWithType: Window.Hide()
  fullName: System.Windows.Window.Hide()
- uid: System.Windows.Window.Icon
  parent: System.Windows.Window
  isExternal: false
  name: Icon
  nameWithType: Window.Icon
  fullName: System.Windows.Window.Icon
- uid: System.Windows.Media.ImageSource
  parent: System.Windows.Media
  isExternal: false
  name: ImageSource
  nameWithType: ImageSource
  fullName: System.Windows.Media.ImageSource
- uid: System.Windows.Window.IconProperty
  parent: System.Windows.Window
  isExternal: false
  name: IconProperty
  nameWithType: Window.IconProperty
  fullName: System.Windows.Window.IconProperty
- uid: System.Windows.Window.IsActive
  parent: System.Windows.Window
  isExternal: false
  name: IsActive
  nameWithType: Window.IsActive
  fullName: System.Windows.Window.IsActive
- uid: System.Windows.Window.IsActiveProperty
  parent: System.Windows.Window
  isExternal: false
  name: IsActiveProperty
  nameWithType: Window.IsActiveProperty
  fullName: System.Windows.Window.IsActiveProperty
- uid: System.Windows.Window.Left
  parent: System.Windows.Window
  isExternal: false
  name: Left
  nameWithType: Window.Left
  fullName: System.Windows.Window.Left
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Window.LeftProperty
  parent: System.Windows.Window
  isExternal: false
  name: LeftProperty
  nameWithType: Window.LeftProperty
  fullName: System.Windows.Window.LeftProperty
- uid: System.Windows.Window.LocationChanged
  parent: System.Windows.Window
  isExternal: false
  name: LocationChanged
  nameWithType: Window.LocationChanged
  fullName: System.Windows.Window.LocationChanged
- uid: System.Windows.Window.LogicalChildren
  parent: System.Windows.Window
  isExternal: false
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
  fullName: System.Windows.Window.LogicalChildren
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)
  parent: System.Windows.Window
  isExternal: false
  name: MeasureOverride(Size)
  nameWithType: Window.MeasureOverride(Size)
  fullName: System.Windows.Window.MeasureOverride(Size)
- uid: System.Windows.Window.OnActivated(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnActivated(EventArgs)
  nameWithType: Window.OnActivated(EventArgs)
  fullName: System.Windows.Window.OnActivated(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Window.OnClosed(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnClosed(EventArgs)
  nameWithType: Window.OnClosed(EventArgs)
  fullName: System.Windows.Window.OnClosed(EventArgs)
- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnClosing(CancelEventArgs)
  nameWithType: Window.OnClosing(CancelEventArgs)
  fullName: System.Windows.Window.OnClosing(CancelEventArgs)
- uid: System.ComponentModel.CancelEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: CancelEventArgs
  nameWithType: CancelEventArgs
  fullName: System.ComponentModel.CancelEventArgs
- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)
  parent: System.Windows.Window
  isExternal: false
  name: OnContentChanged(Object,Object)
  nameWithType: Window.OnContentChanged(Object,Object)
  fullName: System.Windows.Window.OnContentChanged(Object,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Window.OnContentRendered(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnContentRendered(EventArgs)
  nameWithType: Window.OnContentRendered(EventArgs)
  fullName: System.Windows.Window.OnContentRendered(EventArgs)
- uid: System.Windows.Window.OnCreateAutomationPeer
  parent: System.Windows.Window
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: Window.OnCreateAutomationPeer()
  fullName: System.Windows.Window.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.Window.OnDeactivated(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnDeactivated(EventArgs)
  nameWithType: Window.OnDeactivated(EventArgs)
  fullName: System.Windows.Window.OnDeactivated(EventArgs)
- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Window
  isExternal: false
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Window.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Window.OnDpiChanged(DpiScale,DpiScale)
- uid: System.Windows.DpiScale
  parent: System.Windows
  isExternal: false
  name: DpiScale
  nameWithType: DpiScale
  fullName: System.Windows.DpiScale
- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnLocationChanged(EventArgs)
  nameWithType: Window.OnLocationChanged(EventArgs)
  fullName: System.Windows.Window.OnLocationChanged(EventArgs)
- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
- uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationBoundaryFeedbackEventArgs
  nameWithType: ManipulationBoundaryFeedbackEventArgs
  fullName: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnSourceInitialized(EventArgs)
  nameWithType: Window.OnSourceInitialized(EventArgs)
  fullName: System.Windows.Window.OnSourceInitialized(EventArgs)
- uid: System.Windows.Window.OnStateChanged(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnStateChanged(EventArgs)
  nameWithType: Window.OnStateChanged(EventArgs)
  fullName: System.Windows.Window.OnStateChanged(EventArgs)
- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Window
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Window.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Window.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.Window.OwnedWindows
  parent: System.Windows.Window
  isExternal: false
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
  fullName: System.Windows.Window.OwnedWindows
- uid: System.Windows.WindowCollection
  parent: System.Windows
  isExternal: false
  name: WindowCollection
  nameWithType: WindowCollection
  fullName: System.Windows.WindowCollection
- uid: System.Windows.Window.Owner
  parent: System.Windows.Window
  isExternal: false
  name: Owner
  nameWithType: Window.Owner
  fullName: System.Windows.Window.Owner
- uid: System.Windows.Window.ResizeMode
  parent: System.Windows.Window
  isExternal: false
  name: ResizeMode
  nameWithType: Window.ResizeMode
  fullName: System.Windows.Window.ResizeMode
- uid: System.Windows.ResizeMode
  parent: System.Windows
  isExternal: false
  name: ResizeMode
  nameWithType: ResizeMode
  fullName: System.Windows.ResizeMode
- uid: System.Windows.Window.ResizeModeProperty
  parent: System.Windows.Window
  isExternal: false
  name: ResizeModeProperty
  nameWithType: Window.ResizeModeProperty
  fullName: System.Windows.Window.ResizeModeProperty
- uid: System.Windows.Window.RestoreBounds
  parent: System.Windows.Window
  isExternal: false
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
  fullName: System.Windows.Window.RestoreBounds
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Window.Show
  parent: System.Windows.Window
  isExternal: false
  name: Show()
  nameWithType: Window.Show()
  fullName: System.Windows.Window.Show()
- uid: System.Windows.Window.ShowActivated
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivated
  nameWithType: Window.ShowActivated
  fullName: System.Windows.Window.ShowActivated
- uid: System.Windows.Window.ShowActivatedProperty
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivatedProperty
  nameWithType: Window.ShowActivatedProperty
  fullName: System.Windows.Window.ShowActivatedProperty
- uid: System.Windows.Window.ShowDialog
  parent: System.Windows.Window
  isExternal: false
  name: ShowDialog()
  nameWithType: Window.ShowDialog()
  fullName: System.Windows.Window.ShowDialog()
- uid: System.Windows.Window.ShowInTaskbar
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
  fullName: System.Windows.Window.ShowInTaskbar
- uid: System.Windows.Window.ShowInTaskbarProperty
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbarProperty
  nameWithType: Window.ShowInTaskbarProperty
  fullName: System.Windows.Window.ShowInTaskbarProperty
- uid: System.Windows.Window.SizeToContent
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContent
  nameWithType: Window.SizeToContent
  fullName: System.Windows.Window.SizeToContent
- uid: System.Windows.SizeToContent
  parent: System.Windows
  isExternal: false
  name: SizeToContent
  nameWithType: SizeToContent
  fullName: System.Windows.SizeToContent
- uid: System.Windows.Window.SizeToContentProperty
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContentProperty
  nameWithType: Window.SizeToContentProperty
  fullName: System.Windows.Window.SizeToContentProperty
- uid: System.Windows.Window.SourceInitialized
  parent: System.Windows.Window
  isExternal: false
  name: SourceInitialized
  nameWithType: Window.SourceInitialized
  fullName: System.Windows.Window.SourceInitialized
- uid: System.Windows.Window.StateChanged
  parent: System.Windows.Window
  isExternal: false
  name: StateChanged
  nameWithType: Window.StateChanged
  fullName: System.Windows.Window.StateChanged
- uid: System.Windows.Window.TaskbarItemInfo
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
  fullName: System.Windows.Window.TaskbarItemInfo
- uid: System.Windows.Shell.TaskbarItemInfo
  parent: System.Windows.Shell
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: TaskbarItemInfo
  fullName: System.Windows.Shell.TaskbarItemInfo
- uid: System.Windows.Window.TaskbarItemInfoProperty
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfoProperty
  nameWithType: Window.TaskbarItemInfoProperty
  fullName: System.Windows.Window.TaskbarItemInfoProperty
- uid: System.Windows.Window.Title
  parent: System.Windows.Window
  isExternal: false
  name: Title
  nameWithType: Window.Title
  fullName: System.Windows.Window.Title
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Window.TitleProperty
  parent: System.Windows.Window
  isExternal: false
  name: TitleProperty
  nameWithType: Window.TitleProperty
  fullName: System.Windows.Window.TitleProperty
- uid: System.Windows.Window.Top
  parent: System.Windows.Window
  isExternal: false
  name: Top
  nameWithType: Window.Top
  fullName: System.Windows.Window.Top
- uid: System.Windows.Window.Topmost
  parent: System.Windows.Window
  isExternal: false
  name: Topmost
  nameWithType: Window.Topmost
  fullName: System.Windows.Window.Topmost
- uid: System.Windows.Window.TopmostProperty
  parent: System.Windows.Window
  isExternal: false
  name: TopmostProperty
  nameWithType: Window.TopmostProperty
  fullName: System.Windows.Window.TopmostProperty
- uid: System.Windows.Window.TopProperty
  parent: System.Windows.Window
  isExternal: false
  name: TopProperty
  nameWithType: Window.TopProperty
  fullName: System.Windows.Window.TopProperty
- uid: System.Windows.Window.WindowStartupLocation
  parent: System.Windows.Window
  isExternal: false
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
  fullName: System.Windows.Window.WindowStartupLocation
- uid: System.Windows.WindowStartupLocation
  parent: System.Windows
  isExternal: false
  name: WindowStartupLocation
  nameWithType: WindowStartupLocation
  fullName: System.Windows.WindowStartupLocation
- uid: System.Windows.Window.WindowState
  parent: System.Windows.Window
  isExternal: false
  name: WindowState
  nameWithType: Window.WindowState
  fullName: System.Windows.Window.WindowState
- uid: System.Windows.WindowState
  parent: System.Windows
  isExternal: false
  name: WindowState
  nameWithType: WindowState
  fullName: System.Windows.WindowState
- uid: System.Windows.Window.WindowStateProperty
  parent: System.Windows.Window
  isExternal: false
  name: WindowStateProperty
  nameWithType: Window.WindowStateProperty
  fullName: System.Windows.Window.WindowStateProperty
- uid: System.Windows.Window.WindowStyle
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyle
  nameWithType: Window.WindowStyle
  fullName: System.Windows.Window.WindowStyle
- uid: System.Windows.WindowStyle
  parent: System.Windows
  isExternal: false
  name: WindowStyle
  nameWithType: WindowStyle
  fullName: System.Windows.WindowStyle
- uid: System.Windows.Window.WindowStyleProperty
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyleProperty
  nameWithType: Window.WindowStyleProperty
  fullName: System.Windows.Window.WindowStyleProperty
- uid: System.Windows.Window.#ctor*
  parent: System.Windows.Window
  isExternal: false
  name: Window
  nameWithType: Window.Window
- uid: System.Windows.Window.Activate*
  parent: System.Windows.Window
  isExternal: false
  name: Activate
  nameWithType: Window.Activate
- uid: System.Windows.Window.AllowsTransparency*
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
- uid: System.Windows.Window.ArrangeOverride*
  parent: System.Windows.Window
  isExternal: false
  name: ArrangeOverride
  nameWithType: Window.ArrangeOverride
- uid: System.Windows.Window.Close*
  parent: System.Windows.Window
  isExternal: false
  name: Close
  nameWithType: Window.Close
- uid: System.Windows.Window.DialogResult*
  parent: System.Windows.Window
  isExternal: false
  name: DialogResult
  nameWithType: Window.DialogResult
- uid: System.Windows.Window.DragMove*
  parent: System.Windows.Window
  isExternal: false
  name: DragMove
  nameWithType: Window.DragMove
- uid: System.Windows.Window.GetWindow*
  parent: System.Windows.Window
  isExternal: false
  name: GetWindow
  nameWithType: Window.GetWindow
- uid: System.Windows.Window.Hide*
  parent: System.Windows.Window
  isExternal: false
  name: Hide
  nameWithType: Window.Hide
- uid: System.Windows.Window.Icon*
  parent: System.Windows.Window
  isExternal: false
  name: Icon
  nameWithType: Window.Icon
- uid: System.Windows.Window.IsActive*
  parent: System.Windows.Window
  isExternal: false
  name: IsActive
  nameWithType: Window.IsActive
- uid: System.Windows.Window.Left*
  parent: System.Windows.Window
  isExternal: false
  name: Left
  nameWithType: Window.Left
- uid: System.Windows.Window.LogicalChildren*
  parent: System.Windows.Window
  isExternal: false
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
- uid: System.Windows.Window.MeasureOverride*
  parent: System.Windows.Window
  isExternal: false
  name: MeasureOverride
  nameWithType: Window.MeasureOverride
- uid: System.Windows.Window.OnActivated*
  parent: System.Windows.Window
  isExternal: false
  name: OnActivated
  nameWithType: Window.OnActivated
- uid: System.Windows.Window.OnClosed*
  parent: System.Windows.Window
  isExternal: false
  name: OnClosed
  nameWithType: Window.OnClosed
- uid: System.Windows.Window.OnClosing*
  parent: System.Windows.Window
  isExternal: false
  name: OnClosing
  nameWithType: Window.OnClosing
- uid: System.Windows.Window.OnContentChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnContentChanged
  nameWithType: Window.OnContentChanged
- uid: System.Windows.Window.OnContentRendered*
  parent: System.Windows.Window
  isExternal: false
  name: OnContentRendered
  nameWithType: Window.OnContentRendered
- uid: System.Windows.Window.OnCreateAutomationPeer*
  parent: System.Windows.Window
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: Window.OnCreateAutomationPeer
- uid: System.Windows.Window.OnDeactivated*
  parent: System.Windows.Window
  isExternal: false
  name: OnDeactivated
  nameWithType: Window.OnDeactivated
- uid: System.Windows.Window.OnDpiChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnDpiChanged
  nameWithType: Window.OnDpiChanged
- uid: System.Windows.Window.OnLocationChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnLocationChanged
  nameWithType: Window.OnLocationChanged
- uid: System.Windows.Window.OnManipulationBoundaryFeedback*
  parent: System.Windows.Window
  isExternal: false
  name: OnManipulationBoundaryFeedback
  nameWithType: Window.OnManipulationBoundaryFeedback
- uid: System.Windows.Window.OnSourceInitialized*
  parent: System.Windows.Window
  isExternal: false
  name: OnSourceInitialized
  nameWithType: Window.OnSourceInitialized
- uid: System.Windows.Window.OnStateChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnStateChanged
  nameWithType: Window.OnStateChanged
- uid: System.Windows.Window.OnVisualParentChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: Window.OnVisualParentChanged
- uid: System.Windows.Window.OwnedWindows*
  parent: System.Windows.Window
  isExternal: false
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
- uid: System.Windows.Window.Owner*
  parent: System.Windows.Window
  isExternal: false
  name: Owner
  nameWithType: Window.Owner
- uid: System.Windows.Window.ResizeMode*
  parent: System.Windows.Window
  isExternal: false
  name: ResizeMode
  nameWithType: Window.ResizeMode
- uid: System.Windows.Window.RestoreBounds*
  parent: System.Windows.Window
  isExternal: false
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
- uid: System.Windows.Window.Show*
  parent: System.Windows.Window
  isExternal: false
  name: Show
  nameWithType: Window.Show
- uid: System.Windows.Window.ShowActivated*
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivated
  nameWithType: Window.ShowActivated
- uid: System.Windows.Window.ShowDialog*
  parent: System.Windows.Window
  isExternal: false
  name: ShowDialog
  nameWithType: Window.ShowDialog
- uid: System.Windows.Window.ShowInTaskbar*
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
- uid: System.Windows.Window.SizeToContent*
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContent
  nameWithType: Window.SizeToContent
- uid: System.Windows.Window.TaskbarItemInfo*
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
- uid: System.Windows.Window.Title*
  parent: System.Windows.Window
  isExternal: false
  name: Title
  nameWithType: Window.Title
- uid: System.Windows.Window.Top*
  parent: System.Windows.Window
  isExternal: false
  name: Top
  nameWithType: Window.Top
- uid: System.Windows.Window.Topmost*
  parent: System.Windows.Window
  isExternal: false
  name: Topmost
  nameWithType: Window.Topmost
- uid: System.Windows.Window.WindowStartupLocation*
  parent: System.Windows.Window
  isExternal: false
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
- uid: System.Windows.Window.WindowState*
  parent: System.Windows.Window
  isExternal: false
  name: WindowState
  nameWithType: Window.WindowState
- uid: System.Windows.Window.WindowStyle*
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyle
  nameWithType: Window.WindowStyle
