### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SpeechRecognizedEventArgs
  id: SpeechRecognizedEventArgs
  children: []
  langs:
  - csharp
  name: SpeechRecognizedEventArgs
  nameWithType: SpeechRecognizedEventArgs
  fullName: System.Speech.Recognition.SpeechRecognizedEventArgs
  type: Class
  summary: "Vengono fornite informazioni per il <xref href=&quot;System.Speech.Recognition.Grammar.SpeechRecognized&quot;> </xref>, <xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized&quot;> </xref>, e <xref href=&quot;System.Speech.Recognition.SpeechRecognizer.SpeechRecognized&quot;> </xref> eventi."
  remarks: "Oggetto `SpeechRecognized` evento viene generato dal <xref:System.Speech.Recognition.Grammar>, <xref:System.Speech.Recognition.SpeechRecognizer>e <xref:System.Speech.Recognition.SpeechRecognitionEngine>classi.</xref:System.Speech.Recognition.SpeechRecognitionEngine> </xref:System.Speech.Recognition.SpeechRecognizer> </xref:System.Speech.Recognition.Grammar>       `SpeechRecognized`gli eventi vengono generati quando uno o più delle alternative di da un&quot;operazione di riconoscimento hanno un punteggio di confidenza sufficientemente elevato per essere accettata. Per ottenere informazioni dettagliate su una frase riconosciuta, accedere il <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>proprietà nel gestore per l&quot;evento.</xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>       `SpeechRecognizedEventArgs`deriva dalla <xref:System.Speech.Recognition.RecognitionEventArgs>classe.</xref:System.Speech.Recognition.RecognitionEventArgs>"
  example:
  - "The following example is part of a console application that loads a speech recognition grammar and demonstrates speech input to the shared recognizer, the associated recognition results, and the associated events raised by the speech recognizer. If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.  \n  \n Spoken input such as \"I want to fly from Chicago to Miami\" will trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event. Speaking the phrase \"Fly me from Houston to Chicago \" will not trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.  \n  \n The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize a shared speech recognition engine.  \n    {  \n      using (SpeechRecognizer recognizer = new SpeechRecognizer())  \n      {  \n  \n        // Create SemanticResultValue objects that contain cities and airport codes.  \n        SemanticResultValue chicago = new SemanticResultValue(\"Chicago\", \"ORD\");  \n        SemanticResultValue boston = new SemanticResultValue(\"Boston\", \"BOS\");  \n        SemanticResultValue miami = new SemanticResultValue(\"Miami\", \"MIA\");  \n        SemanticResultValue dallas = new SemanticResultValue(\"Dallas\", \"DFW\");  \n  \n        // Create a Choices object and add the SemanticResultValue objects, using  \n        // implicit conversion from SemanticResultValue to GrammarBuilder  \n        Choices cities = new Choices();  \n        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  \n  \n        // Build the phrase and add SemanticResultKeys.  \n        GrammarBuilder chooseCities = new GrammarBuilder();  \n        chooseCities.Append(\"I want to fly from\");  \n        chooseCities.Append(new SemanticResultKey(\"origin\", cities));  \n        chooseCities.Append(\"to\");  \n        chooseCities.Append(new SemanticResultKey(\"destination\", cities));  \n  \n        // Build a Grammar object from the GrammarBuilder.  \n        Grammar bookFlight = new Grammar(chooseCities);  \n        bookFlight.Name = \"Book Flight\";  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=  \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Load the grammar object to the recognizer.  \n        recognizer.LoadGrammarAsync(bookFlight);  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n      Console.WriteLine();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized:  \" + e.Result.Text);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Semantic results:\");  \n      Console.WriteLine(\"  The flight origin is \" + e.Result.Semantics[\"origin\"].Value);  \n      Console.WriteLine(\"  The flight destination is \" + e.Result.Semantics[\"destination\"].Value);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: 'public class SpeechRecognizedEventArgs : System.Speech.Recognition.RecognitionEventArgs'
  inheritance:
  - System.EventArgs
  - System.Speech.Recognition.RecognitionEventArgs
  implements: []
  inheritedMembers:
  - System.Speech.Recognition.RecognitionEventArgs.Result
  platform:
  - net462
references:
- uid: System.Speech.Recognition.RecognitionEventArgs
  isExternal: false
  name: System.Speech.Recognition.RecognitionEventArgs
