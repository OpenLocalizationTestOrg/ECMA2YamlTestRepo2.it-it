### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.IWebPartField
  id: IWebPartField
  children:
  - System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  - System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  langs:
  - csharp
  name: IWebPartField
  nameWithType: IWebPartField
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField
  type: Interface
  summary: "Definisce un&quot;interfaccia di provider per la connessione di due controlli server tramite un singolo campo di dati."
  remarks: "Questa interfaccia è progettata per essere utilizzato con le connessioni Web part. In una connessione Web part, due controlli server che risiedono in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona stabilire una connessione e condividono dati, con un controllo che funge da consumer e l&quot;altro controllo che funge da provider.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Il meccanismo per la condivisione dei dati in una connessione Web part è un&quot;istanza di interfaccia, viene utilizzato il provider al consumer tramite un metodo di callback. Per stabilire una connessione, il consumer e provider devono utilizzare entrambi con lo stesso tipo di interfaccia per la condivisione dei dati. Se il consumer non riconosce il tipo di interfaccia inviato dal provider, è comunque possibile connettere i controlli tramite un trasformatore (un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>oggetto) che converte l&quot;istanza dell&quot;interfaccia inviata dal provider in un tipo riconosciuto dal consumer.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Per informazioni dettagliate sulle connessioni, vedere <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>e [Cenni preliminari sulle connessioni di Web part](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       L&quot;interfaccia IWebPartField è un&quot;interfaccia del provider inclusa con il controllo di Web part come interfaccia standard per la creazione di connessioni basate su un campo dati. È inoltre possibile creare interfacce personalizzate da utilizzare con le connessioni Web part, ma in molte applicazioni Web basate sui dati è utile creare le connessioni basate su una riga comune (per informazioni dettagliate, vedere il <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>interfaccia), tabella (per informazioni dettagliate, vedere il <xref:System.Web.UI.WebControls.WebParts.IWebPartTable>interfaccia), o un campo dall&quot;origine dati, tramite l&quot;interfaccia IWebPartField.</xref:System.Web.UI.WebControls.WebParts.IWebPartTable> </xref:System.Web.UI.WebControls.WebParts.IWebPartRow> In una normale connessione, un <xref:System.Web.UI.WebControls.WebParts.WebPart>controllare agisce come un provider implementa l&quot;interfaccia IWebPartField e fornire un&quot;istanza dell&quot;interfaccia ai consumer in un metodo di callback speciale.</xref:System.Web.UI.WebControls.WebParts.WebPart> Ad esempio, il provider può implementare un&quot;interfaccia di IWebPartField per un campo nella tabella delle informazioni sull&quot;utente che contiene i dati di codice postale dell&quot;utente Web. Un altro <xref:System.Web.UI.WebControls.WebParts.WebPart>controllare agisce come un consumer, potrebbe definire un metodo speciale per ricevere l&quot;istanza dell&quot;interfaccia, Impossibile estrarre i dati, il codice postale e cercare e visualizzare informazioni meteorologiche in base al codice postale.</xref:System.Web.UI.WebControls.WebParts.WebPart>       L&quot;interfaccia IWebPartField include due membri esposti. Il <xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A>restituisce informazioni sullo schema relative al campo dati incapsulato in un <xref:System.ComponentModel.PropertyDescriptor>oggetto.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Web.UI.WebControls.WebParts.IWebPartField.Schema%2A> Il <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A>metodo dichiara un metodo che utilizza un responsabile dell&quot;implementazione (ad esempio un controllo provider) per recuperare i dati dei campi dell&quot;istanza dell&quot;interfaccia quando viene richiamato il metodo di callback.</xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A>"
  example:
  - "The following code example demonstrates how to create a static connection between two controls using the IWebPartField interface. The code example has three parts:  \n  \n-   Source code for two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can form a connection using the IWebPartField interface, with one control acting as the provider, the other acting as the consumer.  \n  \n-   A Web page that hosts the controls and declares the static connection in persistence format.  \n  \n-   A description of what happens when the example code runs.  \n  \n The first part of the code example is the source code for the two custom controls. First is the code for the provider, which implements the IWebPartField interface. For simplicity in the example, the provider creates a table with some data rather than connecting to a database. The `GetConnectionInterface` method serves as the provider's connection point, the callback method that returns the interface instance to the consumer. As for the consumer, it retrieves the interface instance from the provider in its method named `SetConnectionInterface`, which is marked with a `ConnectionConsumer` attribute. After retrieving the instance of the interface, the consumer, in its `OnPreRender` method, calls the implementation of the <xref:System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue%2A> method in the provider, to retrieve the actual data.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_IWebPartField_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_353_1.cs)]\n [!code-vb[WebParts_IWebPartField_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_353_1.vb)]  \n  \n The second part of the code example is the Web page that declares the static connection and hosts the controls. Near the top of the page is a `Register` directive that declares the namespace of the source code contained in the App_Code directory. The connection is declared using an `<asp:webpartconnection>` element. The custom consumer and provider controls are declared in a `<zonetemplate>` element within an `<asp:webpartzone>` element, which is required for them to be able to connect (they must reside within a zone that inherits from the <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> class).  \n  \n [!code-cs[WebParts_IWebPartField_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_353_2.aspx)]\n [!code-vb[WebParts_IWebPartField_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_353_2.aspx)]  \n  \n Load the page in a browser. The consumer control displays the data provided from the specified field, which the provider makes available through an instance of the IWebPartField interface."
  syntax:
    content: public interface IWebPartField
  implements: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  id: GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  langs:
  - csharp
  name: GetFieldValue(FieldCallback)
  nameWithType: IWebPartField.GetFieldValue(FieldCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(FieldCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Restituisce il valore del campo utilizzato dall&quot;interfaccia come base di una connessione tra due <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controlli."
  remarks: "Utilizzare questo metodo per recuperare i valori dei campi dati passati dall&quot;interfaccia."
  example:
  - "The following code example shows the implementation and use of the GetFieldValue method. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface. The provider control implements the GetFieldValue method, returning the value of a particular field in the data table. The consumer control calls the GetFieldValue method in its `OnPreRender` method, so that the value of the data can be written to the page.  \n  \n [!code-cs[WebParts_IWebPartField_Overview#2](~/add/codesnippet/csharp/c2381a5f-e812-4b8a-be4c-_1.cs)]\n [!code-vb[WebParts_IWebPartField_Overview#2](~/add/codesnippet/visualbasic/c2381a5f-e812-4b8a-be4c-_1.vb)]"
  syntax:
    content: public void GetFieldValue (System.Web.UI.WebControls.WebParts.FieldCallback callback);
    parameters:
    - id: callback
      type: System.Web.UI.WebControls.WebParts.FieldCallback
      description: "Oggetto <xref href=&quot;System.Web.UI.WebControls.WebParts.FieldCallback&quot;> </xref> delegato che contiene l&quot;indirizzo di un metodo che riceve i dati."
  overload: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  id: Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  langs:
  - csharp
  name: Schema
  nameWithType: IWebPartField.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ottiene le informazioni sullo schema per un campo di dati utilizzato per condividere dati tra due <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controlli."
  remarks: "Questa proprietà fornisce informazioni sulle proprietà per i dati passati dall&quot;interfaccia. Controlli trasformatore e consumer possono eseguire una query per ottenere informazioni sul tipo di contenuto, e altri dettagli del campo contenuto nel <xref:System.Web.UI.WebControls.WebParts.IWebPartField>istanza interfaccia inviata da un provider.</xref:System.Web.UI.WebControls.WebParts.IWebPartField>"
  example:
  - "The following code example shows the implementation and use of the Schema property. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartField> interface. The provider control implements the Schema property. Then, in its `GetFieldValue` method, it uses the property to retrieve the field value.  \n  \n [!code-cs[WebParts_IWebPartField_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_271_1.cs)]\n [!code-vb[WebParts_IWebPartField_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_271_1.vb)]"
  syntax:
    content: public System.ComponentModel.PropertyDescriptor Schema { get; }
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Oggetto <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> che descrive le informazioni sullo schema per il campo dei dati."
  overload: System.Web.UI.WebControls.WebParts.IWebPartField.Schema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(System.Web.UI.WebControls.WebParts.FieldCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: GetFieldValue(FieldCallback)
  nameWithType: IWebPartField.GetFieldValue(FieldCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue(FieldCallback)
- uid: System.Web.UI.WebControls.WebParts.FieldCallback
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: FieldCallback
  nameWithType: FieldCallback
  fullName: System.Web.UI.WebControls.WebParts.FieldCallback
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: Schema
  nameWithType: IWebPartField.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartField.Schema
- uid: System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.GetFieldValue*
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: GetFieldValue
  nameWithType: IWebPartField.GetFieldValue
- uid: System.Web.UI.WebControls.WebParts.IWebPartField.Schema*
  parent: System.Web.UI.WebControls.WebParts.IWebPartField
  isExternal: false
  name: Schema
  nameWithType: IWebPartField.Schema
