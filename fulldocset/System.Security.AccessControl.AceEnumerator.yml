### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.AceEnumerator
  id: AceEnumerator
  children:
  - System.Security.AccessControl.AceEnumerator.Current
  - System.Security.AccessControl.AceEnumerator.MoveNext
  - System.Security.AccessControl.AceEnumerator.Reset
  - System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: AceEnumerator
  nameWithType: AceEnumerator
  fullName: System.Security.AccessControl.AceEnumerator
  type: Class
  summary: "Offre la possibilità di eseguire l&quot;iterazione con voci di controllo di accesso (ACE) in un elenco di controllo di accesso (ACL)."
  syntax:
    content: 'public sealed class AceEnumerator : System.Collections.IEnumerator'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Current
  id: Current
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Ottiene l&quot;elemento corrente il <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> insieme. Questa proprietà ottiene il tipo di versione dell&quot;oggetto."
  syntax:
    content: public System.Security.AccessControl.GenericAce Current { get; }
    return:
      type: System.Security.AccessControl.GenericAce
      description: "Elemento corrente nella <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> insieme."
  overload: System.Security.AccessControl.AceEnumerator.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Sposta l&quot;enumeratore all&quot;elemento successivo del <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> insieme."
  remarks: "Dopo la creazione di un enumeratore o dopo una chiamata al <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>metodo, l&quot;enumeratore è posizionato davanti al primo elemento della raccolta e la prima chiamata al metodo MoveNext sposta l&quot;enumeratore sul primo elemento della raccolta.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       Una volta raggiunta la fine della raccolta, le chiamate successive a MoveNext restituiscono `false` fino a quando non <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>viene chiamato.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche, ad esempio aggiungendo, modificando o eliminando elementi, alla raccolta, l&quot;enumeratore viene invalidato e la successiva chiamata a MoveNext o <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>Genera un <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;enumeratore è avanzato all&quot;elemento successivo; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se l&quot;enumeratore ha superato la fine della raccolta."
  overload: System.Security.AccessControl.AceEnumerator.MoveNext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La raccolta è stata modificata dopo la creazione dell&quot;enumeratore."
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Reset
  id: Reset
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Imposta l&quot;enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento di <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> insieme."
  remarks: "Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se, ad esempio aggiungendo, modificando o eliminando elementi, viene apportata alla raccolta, l&quot;enumeratore viene invalidato e la successiva chiamata al <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>metodo o il metodo Reset genererà un <xref:System.InvalidOperationException></xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.AccessControl.AceEnumerator.Reset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La raccolta è stata modificata dopo la creazione dell&quot;enumeratore."
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Ottiene l&quot;elemento corrente nella raccolta."
  remarks: "Dopo la creazione di un enumeratore o dopo una chiamata al <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>(metodo), è necessario chiamare il <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>metodo per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di IEnumerator; in caso contrario, non è definito IEnumerator. Current.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       IEnumerator genera anche un&quot;eccezione se l&quot;ultima chiamata a <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>restituito `false`, che indica la fine della raccolta.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>       La posizione dell&quot;enumeratore IEnumerator. Current non determina lo spostamento e chiamate consecutive di IEnumerator restituiscono lo stesso oggetto finché non <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>o <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>viene chiamato.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche, ad esempio aggiungendo, modificando o eliminando elementi, alla raccolta, l&quot;enumeratore viene invalidato e la successiva chiamata a <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>o <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>Genera un <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> Se la raccolta viene modificata tra <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>e IEnumerator, IEnumerator restituisce l&quot;elemento su cui è stata impostata, anche se l&quot;enumeratore risulta già invalidato.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "Restituisce l&quot;elemento corrente nella raccolta."
  overload: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La raccolta è stata modificata dopo la creazione dell&quot;enumeratore."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.AccessControl.AceEnumerator.Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.AceEnumerator.Reset
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.MoveNext*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: AceEnumerator.MoveNext
- uid: System.Security.AccessControl.AceEnumerator.Reset*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset
  nameWithType: AceEnumerator.Reset
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
