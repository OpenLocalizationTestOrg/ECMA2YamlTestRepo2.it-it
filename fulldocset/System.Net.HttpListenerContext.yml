### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerContext
  id: HttpListenerContext
  children:
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  - System.Net.HttpListenerContext.Request
  - System.Net.HttpListenerContext.Response
  - System.Net.HttpListenerContext.User
  langs:
  - csharp
  name: HttpListenerContext
  nameWithType: HttpListenerContext
  fullName: System.Net.HttpListenerContext
  type: Class
  summary: "Fornisce l&quot;accesso agli oggetti richiesta e risposta utilizzati per il <xref href=&quot;System.Net.HttpListener&quot;> </xref> classe. Questa classe non può essere ereditata."
  remarks: "Questa classe fornisce le informazioni relative alla richiesta di protocollo HTTP (Hypertext Transfer) di un client elaborata da un <xref:System.Net.HttpListener>oggetto.</xref:System.Net.HttpListener> Questa classe include anche metodi che consentono un <xref:System.Net.HttpListener>oggetto per accettare una connessione WebSocket.</xref:System.Net.HttpListener>       Il <xref:System.Net.HttpListener.GetContext%2A>metodo restituisce le istanze della classe HttpListenerContext.</xref:System.Net.HttpListener.GetContext%2A> Per ottenere l&quot;oggetto che rappresenta la richiesta del client, utilizzare il <xref:System.Net.HttpListenerContext.Request%2A>proprietà.</xref:System.Net.HttpListenerContext.Request%2A> Per ottenere l&quot;oggetto che rappresenta la risposta che verrà inviata al client dal <xref:System.Net.HttpListener>, utilizzare il <xref:System.Net.HttpListenerContext.Response%2A>proprietà.</xref:System.Net.HttpListenerContext.Response%2A> </xref:System.Net.HttpListener> Per ottenere le informazioni utente sul client che invia la richiesta, ad esempio il nome di account di accesso e se è stato autenticato, è possibile eseguire una query le proprietà di <xref:System.Security.Principal.IPrincipal>oggetto restituito dal <xref:System.Net.HttpListenerContext.User%2A>proprietà.</xref:System.Net.HttpListenerContext.User%2A> </xref:System.Security.Principal.IPrincipal>       Chiusura di un oggetto HttpListenerContext invia la risposta al client e libera le risorse utilizzate da di HttpListenerContext. L&quot;interruzione di un oggetto HttpListenerContext Elimina la risposta al client se non è già stata inviata e libera le risorse utilizzate da di HttpListenerContext. Dopo la chiusura o l&quot;interruzione di un oggetto HttpListenerContext, è possibile fare riferimento ai metodi o proprietà. Se in tal caso, si riceverà un <xref:System.ObjectDisposedException>eccezione.</xref:System.ObjectDisposedException>"
  example:
  - "The following code example displays the user information for a client request.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/t-system.net.httplistene_0_1.cs)]"
  syntax:
    content: public sealed class HttpListenerContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  id: AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Accettare la connessione WebSocket come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che è stata accettata la connessione WebSocket.</xref:System.Threading.Tasks.Task%601>       La dimensione del buffer di ricezione è 16,385 byte. L&quot;intervallo keep-alive WebSocket è impostata sul valore predefinito di 30.000 (30 secondi)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Il protocollo secondario WebSocket supportato."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Restituisce &lt;xref:System.Threading.Tasks.Task%601&gt;.       Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona. Il &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; proprietà nell&quot;oggetto attività restituisce un <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> oggetto."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>è una stringa vuota - oppure - <code>subProtocol</code> contiene caratteri non validi."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Si è verificato un errore durante l&quot;invio della risposta per completare l&quot;handshake di WebSocket."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Accettare la connessione WebSocket specificando il protocollo secondario WebSocket supportato e l&quot;intervallo keep-alive WebSocket come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che è stata accettata la connessione WebSocket.</xref:System.Threading.Tasks.Task%601>       La dimensione del buffer di ricezione è 16,385 byte."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Il protocollo secondario WebSocket supportato."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket protocollo keep-alive intervallo in millisecondi."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Restituisce &lt;xref:System.Threading.Tasks.Task%601&gt;.       Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona. Il &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; proprietà nell&quot;oggetto attività restituisce un <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> oggetto."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>è una stringa vuota - oppure - <code>subProtocol</code> contiene caratteri non validi."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>è troppo piccolo."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Si è verificato un errore durante l&quot;invio della risposta per completare l&quot;handshake di WebSocket."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Accettare la connessione WebSocket che specifica il protocollo secondario WebSocket supportato, dimensione del buffer e l&quot;intervallo keep-alive di WebSocket come operazione asincrona di ricezione."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>> oggetto verrà completato dopo che è stata accettata la connessione WebSocket.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Il protocollo secondario WebSocket supportato."
    - id: receiveBufferSize
      type: System.Int32
      description: "La dimensione del buffer di ricezione in byte."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket protocollo keep-alive intervallo in millisecondi."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Restituisce &lt;xref:System.Threading.Tasks.Task%601&gt;.       Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona. Il &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; proprietà nell&quot;oggetto attività restituisce un <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> oggetto."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>è una stringa vuota - oppure - <code>subProtocol</code> contiene caratteri non validi."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>è troppo piccolo.       - oppure - <code>receiveBufferSize</code> è inferiore a 16 byte - oppure - <code>receiveBufferSize</code> è maggiore di 64 KB."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Si è verificato un errore durante l&quot;invio della risposta per completare l&quot;handshake di WebSocket."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Accettare la connessione WebSocket che specifica il protocollo secondario WebSocket supportato, il buffer interno come operazione asincrona, intervallo keep-alive WebSocket e dimensioni del buffer di ricezione."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che è stata accettata la connessione WebSocket.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment<byte> internalBuffer);
    parameters:
    - id: subProtocol
      type: System.String
      description: "Il protocollo secondario WebSocket supportato."
    - id: receiveBufferSize
      type: System.Int32
      description: "La dimensione del buffer di ricezione in byte."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket protocollo keep-alive intervallo in millisecondi."
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "Un buffer interno da utilizzare per questa operazione."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Restituisce &lt;xref:System.Threading.Tasks.Task%601&gt;.       Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona. Il &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; proprietà nell&quot;oggetto attività restituisce un <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> oggetto."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>è una stringa vuota - oppure - <code>subProtocol</code> contiene caratteri non validi."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>è troppo piccolo.       - oppure - <code>receiveBufferSize</code> è inferiore a 16 byte - oppure - <code>receiveBufferSize</code> è maggiore di 64 KB."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Si è verificato un errore durante l&quot;invio della risposta per completare l&quot;handshake di WebSocket."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Request
  id: Request
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene il <xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref> che rappresenta una richiesta del client per una risorsa."
  remarks: "Se si chiude questa <xref:System.Net.HttpListenerContext>, questo invierà la risposta al client, chiudere il <xref:System.Net.HttpListenerResponse>che contiene la risposta e chiudere il <xref:System.Net.HttpListenerRequest>oggetto restituito da questa proprietà.</xref:System.Net.HttpListenerRequest> </xref:System.Net.HttpListenerResponse> </xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates calling this method. The `listener` variable holds an <xref:System.Net.HttpListener> object.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_16_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerRequest Request { get; }
    return:
      type: System.Net.HttpListenerRequest
      description: "Un <xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref> oggetto che rappresenta la richiesta del client."
  overload: System.Net.HttpListenerContext.Request*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Response
  id: Response
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene il <xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref> oggetto che verrà inviato al client in risposta alla richiesta del client."
  remarks: "L&quot;applicazione consente di configurare la risposta impostando le proprietà nel <xref:System.Net.HttpListenerResponse>oggetto restituito da questa proprietà.</xref:System.Net.HttpListenerResponse> Dopo aver configurato la risposta, inviarlo al client, chiudere la risposta o chiudendo il <xref:System.Net.HttpListenerContext>oggetto.</xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates getting the response to a client's request and adding the response body.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_35_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerResponse Response { get; }
    return:
      type: System.Net.HttpListenerResponse
      description: "Un <xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref> oggetto utilizzato per inviare una risposta al client."
  overload: System.Net.HttpListenerContext.Response*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.User
  id: User
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene un oggetto utilizzato per ottenere l&quot;identità, le informazioni di autenticazione e ruoli di sicurezza per il client la cui richiesta è rappresentato da questo <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> oggetto."
  remarks: "Un <xref:System.Net.HttpListener>indica che richiede l&quot;autenticazione tramite il <xref:System.Net.HttpListener.AuthenticationSchemes%2A>proprietà oppure specificando un <xref:System.Net.AuthenticationSchemeSelector>delegato mediante la <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>proprietà.</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> </xref:System.Net.AuthenticationSchemeSelector> </xref:System.Net.HttpListener.AuthenticationSchemes%2A> </xref:System.Net.HttpListener>       Per determinare il nome di account di accesso del client e le informazioni di autenticazione, controllare il <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>proprietà nell&quot;oggetto restituito da questa proprietà.</xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates accessing identity and authentication information about the client, and returning it to the client in the response.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/p-system.net.httplistene_19_1.cs)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "Un <xref:System.Security.Principal.IPrincipal>oggetto che descrive il client, o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se il <xref href=&quot;System.Net.HttpListener&quot;> </xref> che ha fornito questo <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> non richiede l&quot;autenticazione.</xref:System.Security.Principal.IPrincipal>"
  overload: System.Net.HttpListenerContext.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.WebSockets.WebSocketException
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketException
  nameWithType: WebSocketException
  fullName: System.Net.WebSockets.WebSocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpListenerWebSocketContext>
  nameWithType: Task<HttpListenerWebSocketContext>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.HttpListenerWebSocketContext
    name: HttpListenerWebSocketContext
    nameWithType: HttpListenerWebSocketContext
    fullName: HttpListenerWebSocketContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerContext.Request
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
- uid: System.Net.HttpListenerRequest
  parent: System.Net
  isExternal: false
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
- uid: System.Net.HttpListenerContext.Response
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
- uid: System.Net.HttpListenerResponse
  parent: System.Net
  isExternal: false
  name: HttpListenerResponse
  nameWithType: HttpListenerResponse
  fullName: System.Net.HttpListenerResponse
- uid: System.Net.HttpListenerContext.User
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync
  nameWithType: HttpListenerContext.AcceptWebSocketAsync
- uid: System.Net.HttpListenerContext.Request*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
- uid: System.Net.HttpListenerContext.Response*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
- uid: System.Net.HttpListenerContext.User*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
