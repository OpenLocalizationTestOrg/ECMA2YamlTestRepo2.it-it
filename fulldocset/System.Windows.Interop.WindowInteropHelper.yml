### YamlMime:ManagedReference
items:
- uid: System.Windows.Interop.WindowInteropHelper
  id: WindowInteropHelper
  children:
  - System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  - System.Windows.Interop.WindowInteropHelper.EnsureHandle
  - System.Windows.Interop.WindowInteropHelper.Handle
  - System.Windows.Interop.WindowInteropHelper.Owner
  langs:
  - csharp
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper
  fullName: System.Windows.Interop.WindowInteropHelper
  type: Class
  summary: "Assiste l&quot;interoperatività tra [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] e [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)] codice."
  remarks: "Membri di questa classe consente al chiamante di avere accesso al [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] HWND e HWND padre di un [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.</xref:System.Windows.Window>  Controlli di sicurezza appropriati vengono eseguiti da tali membri.       Utilizzare questa classe quando è necessario un oggetto più specifico basato su HWND.       Questa operazione risulta utile se è necessario ospitare un [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] nella finestra di dialogo un [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] dell&quot;applicazione. Inizializzare il WindowInteropHelper con un [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] oggetto finestra di dialogo. È quindi possibile ottenere il [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] handle della finestra (HWND) dal <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>proprietà e specificare il proprietario per il [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] finestra con la <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A>proprietà.</xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> </xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Esempio di codice seguente viene illustrato come utilizzare WindowInteropHelper quando si ospita un [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] nella finestra di dialogo un [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] dell&quot;applicazione.       [!code-cs[CorePseudocode #WindowInteropHelper](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#windowinterophelper)][!code-vb[CorePseudocode #WindowInteropHelper](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#windowinterophelper) ] un altro scenario supportato da questa classe è per ottenere un <xref:System.Windows.Interop.HwndSource>dell&quot;oggetto da un [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>oggetto.</xref:System.Windows.Window> </xref:System.Windows.Interop.HwndSource>   Il <xref:System.Windows.Interop.HwndSource>consente l&quot;elaborazione di diretta [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] messaggi tramite il <xref:System.Windows.Interop.HwndSource.AddHook%2A>metodo.</xref:System.Windows.Interop.HwndSource.AddHook%2A> </xref:System.Windows.Interop.HwndSource> Utilizzando <xref:System.Windows.Interop.HwndSource>e <xref:System.Windows.Interop.HwndSource.AddHook%2A>al posto di un <xref:System.Windows.Window>è ancora possibile gestire i messaggi che non hanno alcun equivalente o gestione in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].</xref:System.Windows.Window> </xref:System.Windows.Interop.HwndSource.AddHook%2A> </xref:System.Windows.Interop.HwndSource> Creare un WindowInteropHelper con l&quot; <xref:System.Windows.Window>origine, quindi chiamare <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>su WindowInteropHelper per ottenere da HWND <xref:System.Windows.Interop.HwndSource>.</xref:System.Windows.Interop.HwndSource> </xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> </xref:System.Windows.Window>"
  syntax:
    content: public sealed class WindowInteropHelper
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  id: '#ctor(System.Windows.Window)'
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;> </xref> classe per un determinato [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] finestra."
  remarks: "La finestra può essere una finestra di dialogo o una finestra che non è adatta a essere ospitata all&quot;interno di un [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] dell&quot;applicazione."
  syntax:
    content: public WindowInteropHelper (System.Windows.Window window);
    parameters:
    - id: window
      type: System.Windows.Window
      description: "Oggetto [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] oggetto window."
  overload: System.Windows.Interop.WindowInteropHelper.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  id: EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Crea HWND della finestra se HWND non è stato ancora creato."
  remarks: "Utilizzare il metodo EnsureHandle quando si desidera separare finestra (HWND) la creazione dell&quot;handle dalla visualizzazione gestito <xref:System.Windows.Window>.</xref:System.Windows.Window> Ciò è utile quando si dispone di un client di automazione che è possibile eseguire le attività senza la necessità per visualizzare una finestra.       Se la finestra nativa non ha ancora creata, questo metodo crea la finestra nativa, set di <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>proprietà e restituisce l&quot;elemento HWND.</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> Se la finestra nativa è già stata creata, viene restituito l&quot;handle della finestra nativa esistente.       Se la finestra nativa viene creata come risultato di questo metodo, il <xref:System.Windows.Window.SourceInitialized>viene generato l&quot;evento.</xref:System.Windows.Window.SourceInitialized>       L&quot;esecuzione di query di <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A>proprietà dopo che viene chiamato il metodo EnsureHandle restituisce l&quot;handle di finestra esistente.</xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> La struttura ad albero visuale non è collegata alla finestra fino a dopo il <xref:System.Windows.Window.Show%2A>metodo viene chiamato.</xref:System.Windows.Window.Show%2A>       Il metodo EnsureHandle più di una volta non crea nuovi handle di finestra. Chiamata al metodo EnsureHandle quando l&quot;handle è già stato creato da una chiamata al <xref:System.Windows.Window.Show%2A>metodo crea un nuovo handle di finestra.</xref:System.Windows.Window.Show%2A> Una finestra nativa viene creata solo quando non esiste alcun handle quando viene chiamato il metodo EnsureHandle.       Proprietà della finestra che vengono impostate utilizzando la finestra nativa API tramite p/invoke non risulti nell&quot;API gestite della finestra. Ad esempio, se si imposta la finestra in primo piano usando il contrassegno MS_EX_TOPMOST nativo dopo il metodo EnsureHandle viene chiamato, il <xref:System.Windows.Window.Topmost%2A>proprietà non è garantito che rifletta l&quot;impostazione nativa.</xref:System.Windows.Window.Topmost%2A>"
  syntax:
    content: public IntPtr EnsureHandle ();
    parameters: []
    return:
      type: System.IntPtr
      description: "Un <xref:System.IntPtr>che rappresenta l&quot;elemento HWND.</xref:System.IntPtr>"
  overload: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  id: Handle
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Ottiene l&quot;handle di finestra per un [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] finestra che viene utilizzato per creare questa <xref href=&quot;System.Windows.Interop.WindowInteropHelper&quot;> </xref>."
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "Il [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] handle di finestra (HWND)."
  overload: System.Windows.Interop.WindowInteropHelper.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  id: Owner
  parent: System.Windows.Interop.WindowInteropHelper
  langs:
  - csharp
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Interop
  summary: "Ottiene o imposta l&quot;handle del [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] finestra proprietaria."
  remarks: "È possibile associare di nuovo elemento padre di windows, impostando questa proprietà. Come accade per uso generale [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] linguaggio di programmazione, non reimpostato windows che sono già in uso."
  syntax:
    content: public IntPtr Owner { get; set; }
    return:
      type: System.IntPtr
      description: "Handle di finestra (HWND) di proprietario."
  overload: System.Windows.Interop.WindowInteropHelper.Owner*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper(Window)
  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)
  fullName: System.Windows.Interop.WindowInteropHelper.WindowInteropHelper(Window)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle()
  nameWithType: WindowInteropHelper.EnsureHandle()
  fullName: System.Windows.Interop.WindowInteropHelper.EnsureHandle()
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Interop.WindowInteropHelper.Handle
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
  fullName: System.Windows.Interop.WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
  fullName: System.Windows.Interop.WindowInteropHelper.Owner
- uid: System.Windows.Interop.WindowInteropHelper.#ctor*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: WindowInteropHelper
  nameWithType: WindowInteropHelper.WindowInteropHelper
- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: EnsureHandle
  nameWithType: WindowInteropHelper.EnsureHandle
- uid: System.Windows.Interop.WindowInteropHelper.Handle*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Handle
  nameWithType: WindowInteropHelper.Handle
- uid: System.Windows.Interop.WindowInteropHelper.Owner*
  parent: System.Windows.Interop.WindowInteropHelper
  isExternal: false
  name: Owner
  nameWithType: WindowInteropHelper.Owner
