### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.CommandBinding
  id: CommandBinding
  children:
  - System.Windows.Input.CommandBinding.#ctor
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  - System.Windows.Input.CommandBinding.CanExecute
  - System.Windows.Input.CommandBinding.Command
  - System.Windows.Input.CommandBinding.Executed
  - System.Windows.Input.CommandBinding.PreviewCanExecute
  - System.Windows.Input.CommandBinding.PreviewExecuted
  langs:
  - csharp
  name: CommandBinding
  nameWithType: CommandBinding
  fullName: System.Windows.Input.CommandBinding
  type: Class
  summary: "Associa un <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> ai gestori di eventi che implementano il comando."
  remarks: "Un oggetto CommandBinding associa un comando con il <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> e <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> gli eventi che implementano e determinano lo stato del comando.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.PreviewExecuted>       Quando il <xref:System.Windows.Input.RoutedCommand.Execute%2A>o <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>metodo di un <xref:System.Windows.Input.RoutedCommand>viene chiamato, il <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> o <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> gli eventi sulla destinazione del comando.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand.Execute%2A>  Se la destinazione del comando dispone di un oggetto CommandBinding per il comando, vengono chiamati i gestori appropriati.  Se la destinazione del comando non dispone di un oggetto CommandBinding per il comando, gli eventi sono indirizzati attraverso l&quot;albero degli elementi finch√© non viene trovato un elemento che dispone di un oggetto CommandBinding.       Un oggetto CommandBinding ha un utilizzo limitato con un, <xref:System.Windows.Input.ICommand>ovvero non un<xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand>  Infatti un CommandBinding associa il comando per il <xref:System.Windows.Input.ExecutedRoutedEventHandler>e <xref:System.Windows.Input.CanExecuteRoutedEventHandler>che rimangono in attesa il <xref:System.Windows.Input.CommandManager.Executed>e <xref:System.Windows.Input.CommandManager.CanExecute>degli eventi sono indirizzati generato quando il <xref:System.Windows.Input.RoutedCommand.Execute%2A>e <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>metodo il <xref:System.Windows.Input.RoutedCommand>vengono chiamati.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand.Execute%2A> </xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.ExecutedRoutedEventHandler>"
  syntax:
    content: public class CommandBinding
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> classe."
  syntax:
    content: public CommandBinding ();
    parameters: []
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  id: '#ctor(System.Windows.Input.ICommand)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> classe tramite specificato <xref:System.Windows.Input.ICommand>.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "Il comando su cui basare il nuovo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> in."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> classe utilizzando l&quot;oggetto specificato <xref:System.Windows.Input.ICommand>e il valore specificato <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> gestore dell&quot;evento.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "Il comando su cui basare il nuovo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> in."
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "Il gestore per il <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> evento sul nuovo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> classe utilizzando l&quot;oggetto specificato <xref:System.Windows.Input.ICommand>e il valore specificato <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> e <xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;> </xref> gestori eventi.</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "Il comando su cui basare il nuovo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> in."
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "Il gestore per il <xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;> </xref> evento sul nuovo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>."
    - id: canExecute
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "Il gestore per il <xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;> </xref> evento sul nuovo <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>."
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.CanExecute
  id: CanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Si verifica quando il comando associato a questo <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> avvia un controllo per determinare se √® possibile eseguire il comando sulla destinazione del comando."
  remarks: "Quando il <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>metodo su un <xref:System.Windows.Input.RoutedCommand>viene chiamato, il <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>evento viene generato il comando sulla destinazione.</xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A>  Se l&quot;evento non viene gestita, viene generato l&quot;evento CanExecute.  Se la destinazione del comando √® un <xref:System.Windows.Input.CommandBinding>per il comando, il gestore CanExecute per che <xref:System.Windows.Input.CommandBinding>viene chiamato.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Se la destinazione del comando non dispone di un <xref:System.Windows.Input.CommandBinding>per il comando, il CanExecute evento viene propagato nella struttura ad albero la ricerca di un elemento con un <xref:System.Windows.Input.CommandBinding>associato al comando.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>      <a name=&quot;routedEventInfo_CanExecute&quot;></a># # Informazioni sugli eventi indirizzati di | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Input.CommandManager.CanExecuteEvent>|   | Strategia di routing | Bubbling |   | Delegato | <xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -L&quot;evento di tunneling corrispondente √® <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.</xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.CommandManager.CanExecuteEvent>"
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Command
  id: Command
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Ottiene o imposta il <xref:System.Windows.Input.ICommand>associato a questo <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref>.</xref:System.Windows.Input.ICommand>"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; set; }
    return:
      type: System.Windows.Input.ICommand
      description: "Il comando associato a questa associazione."
  overload: System.Windows.Input.CommandBinding.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Executed
  id: Executed
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Si verifica quando il comando associato a questo <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> esegue."
  remarks: "Quando un <xref:System.Windows.Input.RoutedCommand>viene eseguita, viene generato il <xref:System.Windows.Input.CommandBinding.PreviewExecuted>eventi sulla destinazione del comando.</xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.RoutedCommand>  Se il <xref:System.Windows.Input.CommandBinding.PreviewExecuted>evento non viene gestito, viene generato l&quot;evento eseguite sulla destinazione del comando.</xref:System.Windows.Input.CommandBinding.PreviewExecuted>  Se la destinazione del comando √® un <xref:System.Windows.Input.CommandBinding>per il comando specifico, il gestore di esecuzione per il <xref:System.Windows.Input.CommandBinding>viene chiamato.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Se la destinazione del comando non dispone di un <xref:System.Windows.Input.CommandBinding>per tale comando specifica l&quot;evento eseguite propagata nella struttura ad albero la ricerca di un elemento con un <xref:System.Windows.Input.CommandBinding>associato al comando.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Se un <xref:System.Windows.Input.CommandBinding>non viene trovato, il comando non √® stato gestito.</xref:System.Windows.Input.CommandBinding>      <a name=&quot;routedEventInfo_Executed&quot;></a># # Informazioni sugli eventi indirizzati di | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Input.CommandManager.ExecutedEvent>|   | Strategia di routing | Bubbling |   | Delegato | <xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -L&quot;evento di tunneling corrispondente √® <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.</xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.CommandManager.ExecutedEvent>"
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler Executed;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  id: PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Si verifica quando il comando associato a questo <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> avvia un controllo per determinare se √® possibile eseguire il comando sulla destinazione del comando corrente."
  remarks: "Quando il <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>metodo su un <xref:System.Windows.Input.RoutedCommand>viene chiamato, il PreviewCanExecute evento viene generato il comando sulla destinazione, se la destinazione del comando √® un <xref:System.Windows.Input.CommandBinding>per il comando.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> Il <xref:System.Windows.Input.CommandBinding.CanExecute>gestore per il <xref:System.Windows.Input.CommandBinding>viene chiamato.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.CanExecute>  Se la destinazione del comando non dispone di un <xref:System.Windows.Input.CommandBinding>per il comando, il <xref:System.Windows.Input.CommandBinding.CanExecute>evento viene propagato nella struttura ad albero la ricerca di un elemento con un <xref:System.Windows.Input.CommandBinding>associato al comando.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding>  Se non viene gestito l&quot;evento, il <xref:System.Windows.Input.CommandBinding.CanExecute>viene generato l&quot;evento.</xref:System.Windows.Input.CommandBinding.CanExecute>      <a name=&quot;routedEventInfo_PreviewCanExecute&quot;></a># # Informazioni sugli eventi indirizzati di | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|   | Strategia di routing | Tunneling |   | Delegato | <xref:System.Windows.Input.CanExecuteRoutedEventHandler>|      -L&quot;evento di bubbling corrispondente √® <xref:System.Windows.Input.CommandBinding.CanExecute>.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  id: PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Si verifica quando il comando associato a questo <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> esegue."
  remarks: "Quando un <xref:System.Windows.Input.RoutedCommand>viene eseguita, viene generato l&quot;evento PreviewExecuted il comando sulla destinazione.</xref:System.Windows.Input.RoutedCommand>  Se la destinazione del comando √® un <xref:System.Windows.Input.CommandBinding>per il comando di PreviewExecuted gestore per il <xref:System.Windows.Input.CommandBinding>viene chiamato.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Se la destinazione del comando non dispone di un <xref:System.Windows.Input.CommandBinding>per il comando i tunnel evento PreviewExecuted verso il basso l&quot;albero degli elementi, la ricerca di un elemento con un <xref:System.Windows.Input.CommandBinding>associato al comando.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  Se non viene gestito l&quot;evento di anteprima, il <xref:System.Windows.Input.CommandBinding.Executed>evento comando sulla destinazione.</xref:System.Windows.Input.CommandBinding.Executed>      <a name=&quot;routedEventInfo_PreviewExecuted&quot;></a># # Informazioni sugli eventi indirizzati di | | |   |-|-|   | Campo dell&quot;identificatore | <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|   | Strategia di routing | Tunneling |   | Delegato | <xref:System.Windows.Input.ExecutedRoutedEventHandler>|      -L&quot;evento di bubbling corrispondente √® <xref:System.Windows.Input.CommandBinding.Executed>.</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Input.CommandBinding.#ctor
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
- uid: System.Windows.Input.ExecutedRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: ExecutedRoutedEventHandler
  nameWithType: ExecutedRoutedEventHandler
  fullName: System.Windows.Input.ExecutedRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
- uid: System.Windows.Input.CanExecuteRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: CanExecuteRoutedEventHandler
  nameWithType: CanExecuteRoutedEventHandler
  fullName: System.Windows.Input.CanExecuteRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.CanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
- uid: System.Windows.Input.CommandBinding.Command
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
- uid: System.Windows.Input.CommandBinding.Executed
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
- uid: System.Windows.Input.CommandBinding.#ctor*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding
  nameWithType: CommandBinding.CommandBinding
- uid: System.Windows.Input.CommandBinding.Command*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
