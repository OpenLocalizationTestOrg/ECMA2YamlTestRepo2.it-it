### YamlMime:ManagedReference
items:
- uid: System.Net.ServicePointManager
  id: ServicePointManager
  children:
  - System.Net.ServicePointManager.CertificatePolicy
  - System.Net.ServicePointManager.CheckCertificateRevocationList
  - System.Net.ServicePointManager.DefaultConnectionLimit
  - System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  - System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  - System.Net.ServicePointManager.DnsRefreshTimeout
  - System.Net.ServicePointManager.EnableDnsRoundRobin
  - System.Net.ServicePointManager.EncryptionPolicy
  - System.Net.ServicePointManager.Expect100Continue
  - System.Net.ServicePointManager.FindServicePoint(System.Uri)
  - System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  - System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  - System.Net.ServicePointManager.MaxServicePointIdleTime
  - System.Net.ServicePointManager.MaxServicePoints
  - System.Net.ServicePointManager.ReusePort
  - System.Net.ServicePointManager.SecurityProtocol
  - System.Net.ServicePointManager.ServerCertificateValidationCallback
  - System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  - System.Net.ServicePointManager.UseNagleAlgorithm
  langs:
  - csharp
  name: ServicePointManager
  nameWithType: ServicePointManager
  fullName: System.Net.ServicePointManager
  type: Class
  summary: "Gestisce la raccolta di <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetti."
  remarks: "ServicePointManager è una classe statica utilizzata per creare, gestire ed eliminare le istanze della <xref:System.Net.ServicePoint>classe.</xref:System.Net.ServicePoint>       Quando un&quot;applicazione richiede una connessione a una risorsa Internet Uniform Resource Identifier (URI) tramite l&quot;oggetto ServicePointManager, ServicePointManager restituisce un <xref:System.Net.ServicePoint>oggetto che contiene informazioni di connessione per l&quot;host e lo schema identificata dall&quot;URI.</xref:System.Net.ServicePoint> Se è presente un <xref:System.Net.ServicePoint>dell&quot;oggetto per host e lo schema, l&quot;oggetto ServicePointManager restituito esistente <xref:System.Net.ServicePoint>oggetto; in caso contrario, l&quot;oggetto ServicePointManager crea un nuovo <xref:System.Net.ServicePoint>oggetto.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>       .NET Framework 4.6 include una nuova funzionalità di sicurezza che blocca i pacchetti di crittografia non protetti e gli algoritmi per le connessioni di hash. Le applicazioni tramite TLS/SSL tramite le API, ad esempio HttpClient HttpWebRequest, FTPClient, SmtpClient, SslStream, e così via e destinato a .NET Framework 4.6 ottenere il comportamento più sicure per impostazione predefinita.       Gli sviluppatori potrebbero voler rifiutare esplicitamente questo comportamento per mantenere la compatibilità con i servizi esistenti SSL3 o TLS con servizi RC4. [In questo articolo](https://support.microsoft.com/kb/3069494) viene illustrato come modificare il codice in modo che il nuovo comportamento è disabilitato."
  example:
  - "The following code example creates a <xref:System.Net.ServicePoint> object for connections to the URI www.contoso.com.  \n  \n [!code-cs[Classic ServicePoint Example#1](~/add/codesnippet/csharp/t-system.net.servicepoin_1.cs)]\n [!code-cpp[Classic ServicePoint Example#1](~/add/codesnippet/cpp/t-system.net.servicepoin_1.cpp)]\n [!code-vb[Classic ServicePoint Example#1](~/add/codesnippet/visualbasic/t-system.net.servicepoin_1.vb)]"
  syntax:
    content: public class ServicePointManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CertificatePolicy
  id: CertificatePolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene o imposta i criteri per i certificati del server."
  remarks: "Quando la proprietà di CertificatePolicy è impostata su un <xref:System.Net.ICertificatePolicy>oggetto dell&quot;interfaccia, il <xref:System.Net.ServicePointManager>oggetto utilizza i criteri dei certificati definiti nell&quot;istanza anziché i criteri di certificato predefiniti.</xref:System.Net.ServicePointManager> </xref:System.Net.ICertificatePolicy>       Criteri di certificato predefiniti consentono certificati validi e i certificati validi che sono scaduti."
  example:
  - "The following code example shows how to catch a certificate policy exception for a custom certificate policy. It assumes that the certificate policy object has been defined, that the Uniform Resource Identifier (URI) for the Web resource is contained in the variable `myUri`, and that there is a method named `ProcessResponse` that performs the work of the application.  \n  \n [!code-cpp[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/cpp/p-system.net.servicepoin_14_1.cpp)]\n [!code-cs[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/csharp/p-system.net.servicepoin_14_1.cs)]\n [!code-vb[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_14_1.vb)]"
  syntax:
    content: public static System.Net.ICertificatePolicy CertificatePolicy { get; set; }
    return:
      type: System.Net.ICertificatePolicy
      description: "Oggetto che implementa il <xref href=&quot;System.Net.ICertificatePolicy&quot;> </xref> interfaccia."
  overload: System.Net.ServicePointManager.CertificatePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  id: CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene o imposta un <xref:System.Boolean>valore che indica se il certificato viene verificato rispetto all&quot;elenco di revoche di certificati Autorità di certificazione.</xref:System.Boolean>"
  remarks: "Quando il CheckCertificateRevocationList è `true`, il certificato viene verificato rispetto all&quot;elenco di revoche di certificati Autorità di certificazione, come parte del processo di convalida del certificato. Il valore predefinito è `false`."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_13_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_13_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_13_1.cs)]"
  syntax:
    content: public static bool CheckCertificateRevocationList { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;elenco certificati revocati è verificato; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.CheckCertificateRevocationList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  id: DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene o imposta il numero massimo di connessioni simultanee consentite da un <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto."
  remarks: "La proprietà DefaultConnectionLimit imposta il numero massimo predefinito di connessioni simultanee di <xref:System.Net.ServicePointManager>oggetto assegna al <xref:System.Net.ServicePoint.ConnectionLimit%2A>proprietà durante la creazione di <xref:System.Net.ServicePoint>oggetti.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.ConnectionLimit%2A> </xref:System.Net.ServicePointManager>       La modifica della proprietà DefaultConnectionLimit ha effetto sulle esistente <xref:System.Net.ServicePoint>oggetti; influisce solo <xref:System.Net.ServicePoint>gli oggetti che vengono inizializzati dopo la modifica.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> Se il valore di questa proprietà non è stato impostato direttamente o tramite configurazione, il valore predefinito è la costante <xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>.</xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>      > [!NOTE] > Tutte le modifiche alla proprietà DefaultConnectionLimit influiscono sulle connessioni HTTP 1.0 sia HTTP 1.1. Non è possibile modificare separatamente il limite di connessione per i protocolli HTTP 1.0 e 1.1 di HTTP. Se utilizzato nell&quot;ambiente di server (ASP.NET) DefaultConnectionLimit valori predefiniti per un numero maggiore di connessioni, vale a dire 10."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_8_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_8_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_8_1.cs)]"
  syntax:
    content: public static int DefaultConnectionLimit { get; set; }
    return:
      type: System.Int32
      description: "Il numero massimo di connessioni simultanee consentite da un <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto. Il valore predefinito è 2. Quando un&quot;applicazione viene eseguita in un host ASP.NET, non è possibile modificare il valore di questa proprietà tramite il file di configurazione, se la proprietà di configurazione automatica WLAN è impostata su <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Tuttavia, è possibile modificare il valore a livello di codice quando la proprietà di configurazione automatica WLAN è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Impostare il valore preferito una volta, quando viene caricato l&quot;AppDomain."
  overload: System.Net.ServicePointManager.DefaultConnectionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "DefaultConnectionLimit è minore o uguale a 0."
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  id: DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "Il numero predefinito di connessioni non permanenti (4) è consentito in un <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto connesso a un HTTP/1.0 o versione successiva. Questo campo è costante ma non viene più utilizzato in .NET Framework 2.0."
  syntax:
    content: public const int DefaultNonPersistentConnectionLimit = 4;
    return:
      type: System.Int32
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  id: DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "Il numero predefinito di connessioni permanenti (2) è consentito in un <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto connesso a un HTTP/1.1 o versione successiva. Questo campo è costante e viene utilizzato per inizializzare il <> </> *> proprietà se il valore di <> </> *> proprietà non è stata impostata direttamente o tramite configurazione."
  remarks: ''
  example:
  - "The following code example sets the <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property using this field.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/f-system.net.servicepoin_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/f-system.net.servicepoin_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/f-system.net.servicepoin_1.cs)]"
  syntax:
    content: public const int DefaultPersistentConnectionLimit = 2;
    return:
      type: System.Int32
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  id: DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene o imposta un valore che indica quanto tempo un servizio DNS (Domain Name) risoluzione viene considerata valida."
  remarks: ''
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_21_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_21_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_21_1.cs)]"
  syntax:
    content: public static int DnsRefreshTimeout { get; set; }
    return:
      type: System.Int32
      description: "Il valore di timeout, espresso in millisecondi. Il valore-1 indica un periodo di timeout infinito. Il valore predefinito è 120.000 millisecondi (due minuti)."
  overload: System.Net.ServicePointManager.DnsRefreshTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  id: EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene o imposta un valore che indica se la risoluzione di un servizio DNS (Domain Name) Ruota tra gli indirizzi IP (Internet Protocol) applicabili."
  remarks: "Quando più di un indirizzo IP è associato a un nome host, una risoluzione DNS restituisce in genere il primo indirizzo IP. Se si imposta questa proprietà su `true`, quindi successive risoluzioni DNS in sequenza tutti gli indirizzi IP disponibili per un determinato host. Questa opzione è utile quando un servizio DNS viene utilizzato come meccanismo tra server o cluster di server di bilanciamento del carico."
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_17_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_17_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_17_1.cs)]"
  syntax:
    content: public static bool EnableDnsRoundRobin { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>Se una risoluzione DNS restituisce sempre il primo indirizzo IP per un particolare host; in caso contrario <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.EnableDnsRoundRobin*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EncryptionPolicy
  id: EncryptionPolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene il <xref href=&quot;System.Net.Security.EncryptionPolicy&quot;> </xref> per questo <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> istanza."
  remarks: "Se non viene specificato un valore nel file di configurazione, impostazione predefinita la proprietà EncryptionPolicy <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> Viene applicato a una sessione SSL/TLS su questo <xref:System.Net.ServicePointManager>istanza.</xref:System.Net.ServicePointManager>       L&quot;utilizzo della crittografia Null è richiesto quando i criteri di crittografia sono impostato su <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>"
  syntax:
    content: public static System.Net.Security.EncryptionPolicy EncryptionPolicy { get; }
    return:
      type: System.Net.Security.EncryptionPolicy
      description: "I criteri di crittografia da utilizzare per questa <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> istanza."
  overload: System.Net.ServicePointManager.EncryptionPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.Expect100Continue
  id: Expect100Continue
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene o imposta un <xref:System.Boolean>valore che determina se 100-Continue viene utilizzato il comportamento.</xref:System.Boolean>"
  remarks: "Quando questa proprietà è impostata su `true`, 100-Continue viene utilizzato il comportamento. Le richieste client che utilizzano il `PUT` e `POST` metodi aggiungerà un&quot;intestazione previsto per la richiesta se la proprietà Expect100Continue `true` e <xref:System.Net.HttpWebRequest.ContentLength%2A>proprietà è maggiore di zero o <xref:System.Net.HttpWebRequest.SendChunked%2A>proprietà è true.</xref:System.Net.HttpWebRequest.SendChunked%2A> </xref:System.Net.HttpWebRequest.ContentLength%2A> Il client è prevista la ricezione di 100-continuare risposta dal server per indicare che il client deve inviare i dati da registrare. Questo meccanismo consente ai client di evitare l&quot;invio di grandi quantità di dati in rete quando il server, in base alle intestazioni di richiesta, intende rifiutare la richiesta.       Si supponga ad esempio la proprietà Expect100Continue è `false`. Quando la richiesta viene inviata al server, include i dati. Se, dopo aver letto le intestazioni della richiesta, il server richiede l&quot;autenticazione e deve inviare una risposta 401, il client deve inviare di nuovo i dati con intestazioni di autenticazione appropriate.       Se questa proprietà è `true`, le intestazioni della richiesta vengono inviate al server. Se il server non ha rifiutato la richiesta, viene inviato a 100-continuare la segnalazione di risposta che i dati possono essere trasmessi. Se, come nell&quot;esempio precedente, il server richiede l&quot;autenticazione, viene inviata la risposta 401 e il client non ha trasmesso inutilmente i dati.       La modifica del valore di questa proprietà non influisce sulla esistente <xref:System.Net.ServicePoint>oggetti.</xref:System.Net.ServicePoint> Solo nuovi <xref:System.Net.ServicePoint>creati dopo la modifica di oggetti interessati.</xref:System.Net.ServicePoint>       Le 100-Continue comportamento non è utilizzato per le richieste HTTP 1.0 anche se questa proprietà è impostata su `true`.       Expect 100-continuare è descritta nella specifica IETF RFC 2616 Sezione 10.1.1."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_12_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_12_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_12_1.cs)]"
  syntax:
    content: public static bool Expect100Continue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per abilitare 100-continuare comportamento. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.Expect100Continue*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  id: FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Trova un oggetto esistente <xref href=&quot;System.Net.ServicePoint&quot;> </xref> dell&quot;oggetto o crea un nuovo <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto per gestire le comunicazioni con l&quot;oggetto specificato <xref:System.Uri>oggetto.</xref:System.Uri>"
  remarks: "Il metodo FindServicePoint restituisce il <xref:System.Net.ServicePoint>oggetto associato al nome host Internet specificato.</xref:System.Net.ServicePoint> Se non <xref:System.Net.ServicePoint>oggetto esiste per l&quot;host, il <xref:System.Net.ServicePointManager>oggetto viene creato uno.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: "Il <xref:System.Uri>oggetto della risorsa Internet da contattare.</xref:System.Uri>"
    return:
      type: System.Net.ServicePoint
      description: "Il <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto che gestisce le comunicazioni per la richiesta."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il numero massimo di <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetti definiti <xref:System.Net.ServicePointManager.MaxServicePoints*>è stato raggiunto.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  id: FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Trova un oggetto esistente <xref href=&quot;System.Net.ServicePoint&quot;> </xref> dell&quot;oggetto o crea un nuovo <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto per gestire le comunicazioni con la risorsa identificatore URI (Uniform specificato)."
  remarks: "Il <xref:System.Net.ServicePointManager.FindServicePoint%2A>metodo restituisce il <xref:System.Net.ServicePoint>oggetto associato al nome host Internet specificato.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> Se non <xref:System.Net.ServicePoint>oggetto esiste per l&quot;host, il <xref:System.Net.ServicePointManager>oggetto viene creato uno.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example demonstrates calling this method to access a <xref:System.Net.ServicePoint> object.  \n  \n [!code-cpp[System.Net.ServicePoint#7](~/add/codesnippet/cpp/2fec5056-1106-4a0b-b9b3-_1.cpp)]\n [!code-vb[System.Net.ServicePoint#7](~/add/codesnippet/visualbasic/2fec5056-1106-4a0b-b9b3-_1.vb)]\n [!code-cs[System.Net.ServicePoint#7](~/add/codesnippet/csharp/2fec5056-1106-4a0b-b9b3-_1.cs)]"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (string uriString, System.Net.IWebProxy proxy);
    parameters:
    - id: uriString
      type: System.String
      description: "L&quot;URI della risorsa Internet da contattare."
    - id: proxy
      type: System.Net.IWebProxy
      description: "I dati proxy per questa richiesta."
    return:
      type: System.Net.ServicePoint
      description: "Il <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto che gestisce le comunicazioni per la richiesta."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "L&quot;URI specificato <code> uriString </code> non è valido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il numero massimo di <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetti definiti <xref:System.Net.ServicePointManager.MaxServicePoints*>è stato raggiunto.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  id: FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Trova un oggetto esistente <xref href=&quot;System.Net.ServicePoint&quot;> </xref> dell&quot;oggetto o crea un nuovo <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto per gestire le comunicazioni con l&quot;oggetto specificato <xref:System.Uri>oggetto.</xref:System.Uri>"
  remarks: "Il <xref:System.Net.ServicePointManager.FindServicePoint%2A>metodo restituisce il <xref:System.Net.ServicePoint>oggetto associato al nome host Internet specificato.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> Se non <xref:System.Net.ServicePoint>oggetto esiste per l&quot;host, il <xref:System.Net.ServicePointManager>oggetto viene creato uno.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address, System.Net.IWebProxy proxy);
    parameters:
    - id: address
      type: System.Uri
      description: "Oggetto <xref:System.Uri>oggetto che contiene l&quot;indirizzo della risorsa Internet da contattare.</xref:System.Uri>"
    - id: proxy
      type: System.Net.IWebProxy
      description: "I dati proxy per questa richiesta."
    return:
      type: System.Net.ServicePoint
      description: "Il <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto che gestisce le comunicazioni per la richiesta."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il numero massimo di <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetti definiti <xref:System.Net.ServicePointManager.MaxServicePoints*>è stato raggiunto.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  id: MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene o imposta il tempo massimo di inattività di un <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto."
  remarks: "La proprietà proprietà MaxServicePointIdleTime imposta il tempo di inattività massimo che il <xref:System.Net.ServicePointManager>oggetto assegna al <xref:System.Net.ServicePoint.MaxIdleTime%2A>proprietà durante la creazione di <xref:System.Net.ServicePoint>oggetti.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePointManager> Modifiche a questo valore influiscono solo sulle <xref:System.Net.ServicePoint>gli oggetti che sono inizializzati dopo il valore viene modificato.</xref:System.Net.ServicePoint>       Dopo un <xref:System.Net.ServicePoint>oggetto è rimasto inattivo per il tempo specificato <xref:System.Net.ServicePoint.MaxIdleTime%2A>, è idoneo per l&quot;operazione di garbage collection.</xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePoint> Oggetto <xref:System.Net.ServicePoint>oggetto è inattivo quando l&quot;elenco di connessioni è associato il <xref:System.Net.ServicePoint>oggetto è vuoto.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_5_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_5_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_5_1.cs)]"
  syntax:
    content: public static int MaxServicePointIdleTime { get; set; }
    return:
      type: System.Int32
      description: "Il tempo di inattività massimo, espresso in millisecondi, di un <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetto. Il valore predefinito è 100.000 millisecondi (100 secondi)."
  overload: System.Net.ServicePointManager.MaxServicePointIdleTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Proprietà MaxServicePointIdleTime è minore di &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; o maggiore di &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePoints
  id: MaxServicePoints
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene o imposta il numero massimo di <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetti da gestire in qualsiasi momento."
  remarks: "Quando si riduce la proprietà MaxServicePoints inferiore al numero di <xref:System.Net.ServicePoint>oggetti attualmente in esistenza, il <xref:System.Net.ServicePointManager>Elimina il <xref:System.Net.ServicePoint>oggetti con i tempi di inattività.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint> Se il numero di <xref:System.Net.ServicePoint>è maggiore del valore di MaxServicePoints, gli oggetti con connessioni attive il <xref:System.Net.ServicePointManager>oggetto eliminazioni di <xref:System.Net.ServicePoint>oggetti appena diventano inattivi.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_10_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_10_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_10_1.cs)]"
  syntax:
    content: public static int MaxServicePoints { get; set; }
    return:
      type: System.Int32
      description: "Il numero massimo di <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetti da gestire. Il valore predefinito è 0, che non esiste alcun limite al numero di <xref href=&quot;System.Net.ServicePoint&quot;> </xref> oggetti."
  overload: System.Net.ServicePointManager.MaxServicePoints*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePoints è minore di 0 o maggiore di &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Net.ServicePointManager.ReusePort
  id: ReusePort
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Impostare il valore della proprietà <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> fa sì che tutte le connessioni TCP in uscita da HttpWebRequest usino l&quot;opzione socket nativa SO_REUSE_UNICASTPORT sul socket. In questo modo le porte in uscita sottostante la condivisione. Ciò è utile per scenari in cui un numero elevato di connessioni in uscita viene eseguito in un breve periodo di tempo e l&quot;app rischia di esaurimento delle porte."
  remarks: "Il valore predefinito è `false`."
  syntax:
    content: public static bool ReusePort { get; set; }
    return:
      type: System.Boolean
      description: "Restituisce <xref:System.Boolean>.</xref:System.Boolean>"
  overload: System.Net.ServicePointManager.ReusePort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SecurityProtocol
  id: SecurityProtocol
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene o imposta il protocollo di sicurezza utilizzato per il <xref href=&quot;System.Net.ServicePoint&quot;> </xref> gli oggetti gestiti dal <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> oggetto."
  remarks: "Questa proprietà consente di selezionare la versione del protocollo Secure Sockets Layer (SSL) o Transport Layer Security (TLS) da utilizzare per le nuove connessioni che utilizzano lo schema Secure Hypertext Transfer Protocol (HTTPS). le connessioni esistenti non vengono modificate.       Si noti che non è elencato alcun valore predefinito per questa proprietà, allo scopo. Lo scenario di sicurezza cambia costantemente e protocolli predefinito e livelli di protezione vengono modificati nel tempo per evitare deboli. Impostazioni predefinite varieranno a seconda della configurazione di singoli computer e in quale software è installato e in cui sono state applicate patch.       Il codice deve mai in modo implicito dipende da sull&quot;utilizzo di un livello di protezione specifico o sul presupposto che un determinato livello di sicurezza viene utilizzato per impostazione predefinita. Se l&quot;applicazione dipende dall&quot;utilizzo di un particolare livello di protezione, è necessario specificare in modo esplicito tale livello e quindi verificare che sia effettivamente in uso durante la connessione. Inoltre, il codice deve essere progettato per essere affidabile rispetto a cui sono supportati i protocolli di modifiche, pertanto spesso modifiche senza preavviso minima per ridurre le minacce.       .NET Framework 4.6 include una nuova funzionalità di sicurezza che blocca i pacchetti di crittografia non protetti e gli algoritmi per le connessioni di hash. Le applicazioni tramite TLS/SSL tramite le API, ad esempio HttpClient HttpWebRequest, FTPClient, SmtpClient, SslStream, e così via e destinato a .NET Framework 4.6 ottenere il comportamento più sicure per impostazione predefinita.       Gli sviluppatori potrebbero voler rifiutare esplicitamente questo comportamento per mantenere la compatibilità con i servizi esistenti SSL3 o TLS con servizi RC4. [In questo articolo](https://support.microsoft.com/kb/3069494) viene illustrato come modificare il codice in modo che il nuovo comportamento è disabilitato."
  syntax:
    content: public static System.Net.SecurityProtocolType SecurityProtocol { get; set; }
    return:
      type: System.Net.SecurityProtocolType
      description: "Uno dei valori definiti nel <xref href=&quot;System.Net.SecurityProtocolType&quot;> </xref> enumerazione."
  overload: System.Net.ServicePointManager.SecurityProtocol*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il valore specificato per impostare la proprietà non è valido <xref href=&quot;System.Net.SecurityProtocolType&quot;> </xref> valore di enumerazione."
  platform:
  - net462
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ottiene o imposta il callback per convalidare un certificato del server."
  remarks: "Un&quot;applicazione può impostare la proprietà ServerCertificateValidationCallback a un metodo da utilizzare per la convalida personalizzata del certificato del server dal client. Quando si esegue la convalida personalizzata, il `sender` parametro passato al <xref:System.Net.Security.RemoteCertificateValidationCallback>può essere un nome di stringa di host o un oggetto derivato da <xref:System.Net.WebRequest>(<xref:System.Net.HttpWebRequest>, ad esempio) a seconda di <xref:System.Net.ServicePointManager.CertificatePolicy%2A>proprietà.</xref:System.Net.ServicePointManager.CertificatePolicy%2A> </xref:System.Net.HttpWebRequest> </xref:System.Net.WebRequest> </xref:System.Net.Security.RemoteCertificateValidationCallback>       Quando non viene utilizzata la convalida personalizzata, il nome del certificato viene confrontato con il nome host utilizzato per creare la richiesta. Ad esempio, se <xref:System.Net.WebRequest.Create%28System.String%29>è stato passato un parametro di &quot;https://www.contoso.com/default.hmtl&quot;, il comportamento predefinito è per il client verificare il certificato a fronte www.contoso.com.</xref:System.Net.WebRequest.Create%28System.String%29>"
  syntax:
    content: public static System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  id: SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Abilita o disabilita l&quot;opzione keep-alive su una connessione TCP."
  remarks: "Un&quot;applicazione può richiedere che un provider TCP/IP consentono l&quot;uso di pacchetti keep-alive su una connessione TCP. Il valore predefinito è che l&quot;utilizzo di pacchetti keep-alive su una connessione TCP sia disabilitata.       Le impostazioni predefinite quando un socket TCP viene inizializzato il timeout di keep-alive set 2 ore e l&quot;intervallo keep-alive su 1 secondo. Il `keepAliveTime` parametro specifica il timeout in millisecondi, con alcuna attività fino a quando non viene inviato il primo pacchetto keep-alive. Il `keepAliveInterval` parametro specifica l&quot;intervallo, espresso in millisecondi, tra l&quot;invio di pacchetti keep-alive successivi se non viene ricevuto alcun riconoscimento. Il numero di probe keep-alive non può essere modificato e viene impostato su 10.       Se viene eliminata una connessione TCP come risultato di keep-alive, un <xref:System.Net.Sockets.SocketError>di <xref:System.Net.Sockets.SocketError>sul socket, viene restituito a tutte le chiamate in corso e tutte le chiamate successive avranno esito negativo con un <xref:System.Net.Sockets.SocketError> <xref:System.Net.Sockets.SocketError>.</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public static void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);
    parameters:
    - id: enabled
      type: System.Boolean
      description: "Se impostato su true, quindi l&quot;opzione keep-alive TCP su una connessione TCP verrà abilitata utilizzando l&quot;oggetto specificato `keepAliveTime` e `keepAliveInterval` valori.       Se impostato su false, quindi l&quot;opzione keep-alive TCP viene disabilitata e i parametri restanti vengono ignorati.       Il valore predefinito è false."
    - id: keepAliveTime
      type: System.Int32
      description: "Specifica il timeout in millisecondi, con alcuna attività fino a quando non viene inviato il primo pacchetto keep-alive.       Il valore deve essere maggiore di 0.  Se viene passato un valore minore o uguale a zero un <xref:System.ArgumentOutOfRangeException>viene generata un&quot;eccezione.</xref:System.ArgumentOutOfRangeException>"
    - id: keepAliveInterval
      type: System.Int32
      description: "Specifica l&quot;intervallo, espresso in millisecondi, tra l&quot;invio di pacchetti keep-alive successivi se non viene ricevuto alcun riconoscimento.       Il valore deve essere maggiore di 0.  Se viene passato un valore minore o uguale a zero un <xref:System.ArgumentOutOfRangeException>viene generata un&quot;eccezione.</xref:System.ArgumentOutOfRangeException>"
  overload: System.Net.ServicePointManager.SetTcpKeepAlive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il valore specificato per <code> keepAliveTime </code> o <code> keepAliveInterval </code> parametro è minore o uguale a 0."
  platform:
  - net462
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  id: UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Determina se l&quot;algoritmo Nagle viene usato dai punti di servizio gestiti da questo <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> oggetto."
  remarks: "L&quot;algoritmo Nagle viene usato per ridurre il traffico di rete per piccoli pacchetti di dati e trasmettendoli come un singolo pacchetto. Questo processo è detta anche &quot;Nagle&quot;; viene ampiamente utilizzato perché riduce il numero di pacchetti trasmessi e l&quot;overhead per ogni pacchetto.       La modifica del valore di questa proprietà non influisce sulla esistente <xref:System.Net.ServicePoint>oggetti.</xref:System.Net.ServicePoint> Sono interessati solo nuovi punti di servizio creati dopo la modifica.       L&quot;algoritmo Nagle è descritto nella specifica IETF RFC 896."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_20_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_20_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_20_1.cs)]"
  syntax:
    content: public static bool UseNagleAlgorithm { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per utilizzare l&quot;algoritmo Nagle; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.UseNagleAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.ServicePointManager.CertificatePolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
- uid: System.Net.ICertificatePolicy
  parent: System.Net
  isExternal: false
  name: ICertificatePolicy
  nameWithType: ICertificatePolicy
  fullName: System.Net.ICertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
- uid: System.Net.Security.EncryptionPolicy
  parent: System.Net.Security
  isExternal: false
  name: EncryptionPolicy
  nameWithType: EncryptionPolicy
  fullName: System.Net.Security.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
- uid: System.Net.ServicePoint
  parent: System.Net
  isExternal: false
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
- uid: System.Net.SecurityProtocolType
  parent: System.Net
  isExternal: false
  name: SecurityProtocolType
  nameWithType: SecurityProtocolType
  fullName: System.Net.SecurityProtocolType
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
- uid: System.Net.ServicePointManager.CertificatePolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
- uid: System.Net.ServicePointManager.DefaultConnectionLimit*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint
  nameWithType: ServicePointManager.FindServicePoint
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive
  nameWithType: ServicePointManager.SetTcpKeepAlive
- uid: System.Net.ServicePointManager.UseNagleAlgorithm*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
