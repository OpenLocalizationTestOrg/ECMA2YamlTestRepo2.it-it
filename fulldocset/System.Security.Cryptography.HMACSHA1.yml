### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA1
  id: HMACSHA1
  children:
  - System.Security.Cryptography.HMACSHA1.#ctor
  - System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  - System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  langs:
  - csharp
  name: HMACSHA1
  nameWithType: HMACSHA1
  fullName: System.Security.Cryptography.HMACSHA1
  type: Class
  summary: "Calcola un Hash-based Message Authentication Code (HMAC) utilizzando il <xref href=&quot;System.Security.Cryptography.SHA1&quot;> </xref> funzione hash."
  remarks: "HMACSHA1 è un tipo di algoritmo hash con chiave costruito dalla funzione hash SHA1 e utilizzato come un codice HMAC o basati su hash message authentication code di. Nel processo HMAC combina una chiave privata con i dati del messaggio, il risultato con la funzione hash, viene nuovamente combinato il valore hash con chiave privata e quindi applica una seconda volta la funzione hash. L&quot;output hash è di lunghezza pari a 160 bit.       Un codice HMAC consente di determinare se un messaggio inviato tramite un canale non protetto è stato alterato, a condizione che il mittente e ricevitore condividono una chiave segreta. Il mittente calcola il valore hash per i dati originali e invia i dati originali e il valore hash come un singolo messaggio. Il destinatario ricalcola il valore hash del messaggio ricevuto e verifica che il codice HMAC calcolato corrisponda a quello trasmesso.       Qualsiasi modifica ai dati o il valore hash comporta una mancata corrispondenza, perché è necessario conoscere la chiave privata per modificare il messaggio e riprodurre il valore hash corretto. Pertanto, se i valori hash originale e calcolato corrispondono, il messaggio viene autenticato.       SHA-1 (Secure Hash Algorithm, anche denominato SHS, Secure Hash Standard) è un algoritmo di hash di crittografia pubblicato dal governo degli Stati Uniti. Viene prodotto un valore hash a 160 bit da una stringa di lunghezza arbitraria.       HMACSHA1 accetta chiavi di qualsiasi dimensione e produce una sequenza di hash di lunghezza pari a 160 bit."
  example:
  - "The following code example shows how to sign a file by using the HMACSHA1 object and then how to verify the file.  \n  \n [!code-cs[HMACSHA1#1](~/add/codesnippet/csharp/t-system.security.crypto_82_1.cs)]\n [!code-cpp[HMACSHA1#1](~/add/codesnippet/cpp/t-system.security.crypto_82_1.cpp)]\n [!code-vb[HMACSHA1#1](~/add/codesnippet/visualbasic/t-system.security.crypto_82_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA1 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1()
  nameWithType: HMACSHA1.HMACSHA1()
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> classe con una chiave generata in modo casuale."
  remarks: "<xref:System.Security.Cryptography.HMACSHA1>è un tipo di algoritmo hash con chiave costruito dalla funzione hash SHA1 e utilizzato come un codice HMAC o basati su hash message authentication code di.</xref:System.Security.Cryptography.HMACSHA1> Nel processo HMAC combina una chiave privata con i dati del messaggio, il risultato con la funzione hash, viene nuovamente combinato il valore hash con chiave privata e quindi applica una seconda volta la funzione hash. L&quot;output hash è di lunghezza pari a 160 bit (20 byte).       Questo costruttore utilizza una chiave generata in modo casuale a 64 byte."
  syntax:
    content: public HMACSHA1 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1(Byte[])
  nameWithType: HMACSHA1.HMACSHA1(Byte[])
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> classe con i dati della chiave specificati."
  remarks: "<xref:System.Security.Cryptography.HMACSHA1>è un tipo di algoritmo hash con chiave costruito dalla funzione hash SHA1 e utilizzato come un codice HMAC o basati su hash message authentication code di.</xref:System.Security.Cryptography.HMACSHA1> Nel processo HMAC combina una chiave privata con i dati del messaggio, il risultato con la funzione hash, viene nuovamente combinato il valore hash con chiave privata e quindi applica una seconda volta la funzione hash. L&quot;output hash è di lunghezza pari a 160 bit (20 byte).      > [!NOTE] > Questo costruttore crea un&quot;istanza dell&quot;algoritmo non gestita tramite la <xref:System.Security.Cryptography.SHA1CryptoServiceProvider>classe.</xref:System.Security.Cryptography.SHA1CryptoServiceProvider>"
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA1> class.
  syntax:
    content: public HMACSHA1 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "La chiave privata per <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> crittografia. La chiave può essere qualsiasi lunghezza, ma in caso di più di 64 byte viene generato un hash (con SHA-1) per derivare una chiave di 64 byte. Pertanto, la dimensione consigliata della chiave privata è 64 byte."
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  id: '#ctor(System.Byte[],System.Boolean)'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1(Byte[],Boolean)
  nameWithType: HMACSHA1.HMACSHA1(Byte[],Boolean)
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[],Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> classe con i dati della chiave specificati e un valore che specifica se utilizzare la versione gestita dell&quot;algoritmo SHA1."
  syntax:
    content: public HMACSHA1 (byte[] key, bool useManagedSha1);
    parameters:
    - id: key
      type: System.Byte[]
      description: "La chiave privata per <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> crittografia. La chiave può essere qualsiasi lunghezza, ma in caso di più di 64 byte, viene generato un hash (con SHA-1) per derivare una chiave di 64 byte. Pertanto, la dimensione consigliata della chiave privata è 64 byte."
    - id: useManagedSha1
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per utilizzare l&quot;implementazione gestita dell&quot;algoritmo SHA1 (il <xref href=&quot;System.Security.Cryptography.SHA1Managed&quot;> </xref> classe); <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per utilizzare l&quot;implementazione non gestita (il <xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;> </xref> classe)."
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA1.#ctor
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1()
  nameWithType: HMACSHA1.HMACSHA1()
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1()
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1(Byte[])
  nameWithType: HMACSHA1.HMACSHA1(Byte[])
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1(Byte[],Boolean)
  nameWithType: HMACSHA1.HMACSHA1(Byte[],Boolean)
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[],Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMACSHA1.#ctor*
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1
  nameWithType: HMACSHA1.HMACSHA1
