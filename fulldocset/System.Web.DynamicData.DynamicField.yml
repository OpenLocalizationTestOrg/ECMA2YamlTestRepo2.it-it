### YamlMime:ManagedReference
items:
- uid: System.Web.DynamicData.DynamicField
  id: DynamicField
  children:
  - System.Web.DynamicData.DynamicField.#ctor
  - System.Web.DynamicData.DynamicField.ApplyFormatInEditMode
  - System.Web.DynamicData.DynamicField.Column
  - System.Web.DynamicData.DynamicField.ConfigureDynamicControl(System.Web.DynamicData.DynamicControl)
  - System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull
  - System.Web.DynamicData.DynamicField.CopyProperties(System.Web.UI.WebControls.DataControlField)
  - System.Web.DynamicData.DynamicField.CreateDynamicControl
  - System.Web.DynamicData.DynamicField.CreateField
  - System.Web.DynamicData.DynamicField.DataField
  - System.Web.DynamicData.DynamicField.DataFormatString
  - System.Web.DynamicData.DynamicField.ExtractValuesFromCell(System.Collections.Specialized.IOrderedDictionary,System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState,System.Boolean)
  - System.Web.DynamicData.DynamicField.GetAttribute(System.String)
  - System.Web.DynamicData.DynamicField.HeaderText
  - System.Web.DynamicData.DynamicField.HtmlEncode
  - System.Web.DynamicData.DynamicField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)
  - System.Web.DynamicData.DynamicField.NullDisplayText
  - System.Web.DynamicData.DynamicField.ReadOnly
  - System.Web.DynamicData.DynamicField.SetAttribute(System.String,System.String)
  - System.Web.DynamicData.DynamicField.SortExpression
  - System.Web.DynamicData.DynamicField.UIHint
  - System.Web.DynamicData.DynamicField.ValidateRequestMode
  - System.Web.DynamicData.DynamicField.ValidationGroup
  langs:
  - csharp
  name: "DynamicField"
  nameWithType: DynamicField
  fullName: System.Web.DynamicData.DynamicField
  type: Class
  summary: Represents a data field that is displayed in a data-bound control that uses ASP.NET Dynamic Data features.
  remarks: "In this topic:  \n  \n-   [Introduction](#introduction)  \n  \n-   [Declarative Syntax](#declarative_syntax)  \n  \n<a name=\"introduction\"></a>   \n## Introduction  \n The DynamicField class is used by data-bound controls, such as the <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls, to display a field value that uses ASP.NET Dynamic Data features in custom pages.  \n  \n The DynamicField class provides functionality that resembles that of the <xref:System.Web.UI.WebControls.BoundField> class. However, because a DynamicField object is used in Dynamic Data applications, you can take advantage of the following Dynamic Data features:  \n  \n-   Automatically rendering the proper control for a field by using field templates, based on the data type. The field templates can be globally modified for the entire application.  \n  \n-   Providing built-in data validation based on the database schema. You can also add validation types by customizing the data model.  \n  \n-   Customizing data rendering for individual fields by using attributes in the data model or by using the <xref:System.Web.DynamicData.DynamicField.UIHint%2A> property.  \n  \n The DynamicField object renders each field by using a `DynamicControl` control. To specify the data field to display in a DynamicField object, set the <xref:System.Web.DynamicData.DynamicField.DataField%2A> property to the field name. You can apply a custom formatting string to the field value by setting the <xref:System.Web.DynamicData.DynamicField.DataFormatString%2A> property. By default the formatting string is applied to field values only when the data-bound control is in read-only mode. To apply the formatting string to values displayed while the data-bound control is in edit mode, set the <xref:System.Web.DynamicData.DynamicField.ApplyFormatInEditMode%2A> property to `true`. If a field value is `null`, you can display a custom caption by setting the <xref:System.Web.DynamicData.DynamicField.NullDisplayText%2A> property. The DynamicField object can also automatically convert empty string (\"\") field values to null values by setting the <xref:System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull%2A> property to `true`.  \n  \n<a name=\"declarative_syntax\"></a>   \n## Declarative Syntax  \n  \n```  \n<asp:DynamicField   \n    AccessibleHeaderText=\"string\"       \n    ApplyFormatInEditMode=\"true|false\"    \n    ControlStyle-BackColor=\"color name|#dddddd\"   \n    ControlStyle-BorderColor=\"color name|#dddddd\"   \n    ControlStyle-BorderStyle=\"NotSet|None|Dotted|Dashed|Solid|Double|Groove|  \n       Ridge|Inset|Outset\"    \n    ControlStyle-BorderWidth=\"size\"    \n    ControlStyle-CssClass=\"string\"   \n    ControlStyle-Font-Bold=\"true|false\"   \n    ControlStyle-Font-Italic=\"true|false\"   \n    ControlStyle-Font-Names=\"string\"   \n    ControlStyle-Font-Overline=\"true|false\"    \n    ControlStyle-Font-Size=\"string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  \n       Large|X-Large|XX-Large\"   \n    ControlStyle-Font-Strikeout=\"true|false\"     \n    ControlStyle-Font-Underline=\"true|false\"     \n    ControlStyle-ForeColor=\"color name|#dddddd\"     \n    ControlStyle-Height=\"size\"   \n    ControlStyle-Width=\"size\"   \n    ConvertEmptyStringToNull=\"true|false\"    \n    DataField=\"string\"   \n    DataFormatString=\"string\"     \n    FooterStyle-BackColor=\"color name|#dddddd\"   \n    FooterStyle-BorderColor=\"color name|#dddddd\"   \n    FooterStyle-BorderStyle=\"NotSet|None|Dotted|Dashed|Solid|Double|Groove|  \n       Ridge|Inset|Outset\"    \n    FooterStyle-BorderWidth=\"size\"    \n    FooterStyle-CssClass=\"string\"   \n    FooterStyle-Font-Bold=\"true|false\"   \n    FooterStyle-Font-Italic=\"true|false\"   \n    FooterStyle-Font-Names=\"string\"   \n    FooterStyle-Font-Overline=\"true|false\"    \n    FooterStyle-Font-Size=\"string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  \n       Large|X-Large|XX-Large\"   \n    FooterStyle-Font-Strikeout=\"true|false\"     \n    FooterStyle-Font-Underline=\"true|false\"     \n    FooterStyle-ForeColor=\"color name|#dddddd\"     \n    FooterStyle-Height=\"size\"   \n    FooterStyle-Width=\"size\"   \n    FooterStyle-HorizontalAlign=\"Center|Justify|Left|NotSet|Right\"   \n    FooterStyle-VerticalAlign=\"Bottom|Middle|NotSet|Top\"   \n    FooterStyle-Wrap=\"true|false\"     \n    HeaderImageUrl=\"uri\"  \n    HeaderStyle-BackColor=\"color name|#dddddd\"   \n    HeaderStyle-BorderColor=\"color name|#dddddd\"   \n    HeaderStyle-BorderStyle=\"NotSet|None|Dotted|Dashed|Solid|Double|Groove|  \n       Ridge|Inset|Outset\"    \n    HeaderStyle-BorderWidth=\"size\"    \n    HeaderStyle-CssClass=\"string\"   \n    HeaderStyle-Font-Bold=\"true|false\"   \n    HeaderStyle-Font-Italic=\"true|false\"   \n    HeaderStyle-Font-Names=\"string\"   \n    HeaderStyle-Font-Overline=\"true|false\"    \n    HeaderStyle-Font-Size=\"string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  \n       Large|X-Large|XX-Large\"   \n    HeaderStyle-Font-Strikeout=\"true|false\"     \n    HeaderStyle-Font-Underline=\"true|false\"     \n    HeaderStyle-ForeColor=\"color name|#dddddd\"     \n    HeaderStyle-Height=\"size\"   \n    HeaderStyle-Width=\"size\"   \n    HeaderStyle-HorizontalAlign=\"Center|Justify|Left|NotSet|Right\"   \n    HeaderStyle-VerticalAlign=\"Bottom|Middle|NotSet|Top\"   \n    HeaderStyle-Wrap=\"true|false\"     \n    HeaderText=\"string\"  \n    InsertVisible=\"true|false\"      \n    ItemStyle-BackColor=\"color name|#dddddd\"   \n    ItemStyle-BorderColor=\"color name|#dddddd\"   \n    ItemStyle-BorderStyle=\"NotSet|None|Dotted|Dashed|Solid|Double|Groove|  \n       Ridge|Inset|Outset\"    \n    ItemStyle-BorderWidth=\"size\"    \n    ItemStyle-CssClass=\"string\"   \n    ItemStyle-Font-Bold=\"true|false\"   \n    ItemStyle-Font-Italic=\"true|false\"   \n    ItemStyle-Font-Names=\"string\"   \n    ItemStyle-Font-Overline=\"true|false\"    \n    ItemStyle-Font-Size=\"string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  \n       Large|X-Large|XX-Large\"   \n    ItemStyle-Font-Strikeout=\"true|false\"     \n    ItemStyle-Font-Underline=\"true|false\"     \n    ItemStyle-ForeColor=\"color name|#dddddd\"     \n    ItemStyle-Height=\"size\"   \n    ItemStyle-Width=\"size\"   \n    ItemStyle-HorizontalAlign=\"Center|Justify|Left|NotSet|Right\"   \n    ItemStyle-VerticalAlign=\"Bottom|Middle|NotSet|Top\"   \n    ItemStyle-Wrap=\"true|false\"     \n    NullDisplayText=\"string\"   \n    ReadOnly=\"true|false\"    \n    ShowHeader=\"true|false\"    \n    SortExpression=\"string\"   \n    UIHint=\"string\"   \n    ValidationGroup=\"string\"   \n    Visible=\"true|false\"   \n    />  \n<asp:DynamicField />  \n```"
  example:
  - "See a run-time code example of this feature: [Run](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicField).  \n  \n The following example demonstrates how to use the DynamicField object in a <xref:System.Web.UI.WebControls.GridView> control to display and edit values from a database table.  \n  \n [!code-vb[System.Web.DynamicData.DynamicField#1](~/add/codesnippet/VisualBasic/t-system.web.dynamicdata_1_1.aspx)]\n [!code-cs[System.Web.DynamicData.DynamicField#1](~/add/codesnippet/CSharp/t-system.web.dynamicdata_1_1.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Web.DynamicData.Design.DynamicFieldDesigner, System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]

      public class DynamicField : System.Web.UI.WebControls.DataControlField, System.Web.DynamicData.IFieldFormattingOptions, System.Web.UI.IAttributeAccessor
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.DataControlField
  implements:
  - System.Web.DynamicData.IFieldFormattingOptions
  - System.Web.UI.IAttributeAccessor
  inheritedMembers:
  - System.Web.UI.WebControls.DataControlField.AccessibleHeaderText
  - System.Web.UI.WebControls.DataControlField.CloneField
  - System.Web.UI.WebControls.DataControlField.Control
  - System.Web.UI.WebControls.DataControlField.ControlStyle
  - System.Web.UI.WebControls.DataControlField.DesignMode
  - System.Web.UI.WebControls.DataControlField.FooterStyle
  - System.Web.UI.WebControls.DataControlField.FooterText
  - System.Web.UI.WebControls.DataControlField.HeaderImageUrl
  - System.Web.UI.WebControls.DataControlField.HeaderStyle
  - System.Web.UI.WebControls.DataControlField.Initialize(System.Boolean,System.Web.UI.Control)
  - System.Web.UI.WebControls.DataControlField.InsertVisible
  - System.Web.UI.WebControls.DataControlField.IsTrackingViewState
  - System.Web.UI.WebControls.DataControlField.ItemStyle
  - System.Web.UI.WebControls.DataControlField.LoadViewState(System.Object)
  - System.Web.UI.WebControls.DataControlField.OnFieldChanged
  - System.Web.UI.WebControls.DataControlField.SaveViewState
  - System.Web.UI.WebControls.DataControlField.ShowHeader
  - System.Web.UI.WebControls.DataControlField.System#Web#UI#IDataSourceViewSchemaAccessor#DataSourceViewSchema
  - System.Web.UI.WebControls.DataControlField.System#Web#UI#IStateManager#IsTrackingViewState
  - System.Web.UI.WebControls.DataControlField.System#Web#UI#IStateManager#LoadViewState(System.Object)
  - System.Web.UI.WebControls.DataControlField.System#Web#UI#IStateManager#SaveViewState
  - System.Web.UI.WebControls.DataControlField.System#Web#UI#IStateManager#TrackViewState
  - System.Web.UI.WebControls.DataControlField.ToString
  - System.Web.UI.WebControls.DataControlField.TrackViewState
  - System.Web.UI.WebControls.DataControlField.ValidateSupportsCallback
  - System.Web.UI.WebControls.DataControlField.ViewState
  - System.Web.UI.WebControls.DataControlField.Visible
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.#ctor
  id: '#ctor'
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "DynamicField()"
  nameWithType: DynamicField.DynamicField()
  fullName: System.Web.DynamicData.DynamicField.DynamicField()
  type: Constructor
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Initializes a new instance of the <see cref="T:System.Web.DynamicData.DynamicField"></see> class.
  remarks: "Use this constructor to initialize a new instance of the <xref:System.Web.DynamicData.DynamicField> class. This constructor is commonly used when adding fields to a dynamically created data-bound control.  \n  \n To dynamically add a <xref:System.Web.DynamicData.DynamicField> object to a data-bound control, create a new <xref:System.Web.DynamicData.DynamicField> object, set its properties, and then add it to the data-bound control's field collection. For example, if you are using the <xref:System.Web.UI.WebControls.GridView> control, add the <xref:System.Web.DynamicData.DynamicField> object to the <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection.  \n  \n> [!NOTE]\n>  Although you can dynamically add fields to a data-bound control, it is strongly recommended that fields be statically declared and then shown or hidden, as appropriate. Statically declaring all of your fields reduces the size of the view state for the parent data-bound control."
  syntax:
    content: public DynamicField ();
    parameters: []
  overload: System.Web.DynamicData.DynamicField.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.ApplyFormatInEditMode
  id: ApplyFormatInEditMode
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "ApplyFormatInEditMode"
  nameWithType: DynamicField.ApplyFormatInEditMode
  fullName: System.Web.DynamicData.DynamicField.ApplyFormatInEditMode
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets or sets a value that indicates whether the formatted string that is specified by the &lt;xref:System.Web.DynamicData.DynamicField.DataFormatString%2A&gt; property is applied to field value when the data field is in edit mode.
  remarks: "Data-bound controls (such as <xref:System.Web.UI.WebControls.DetailsView>, and <xref:System.Web.UI.WebControls.GridView>) have different display modes that allow the user to read, edit, or insert records. By default, the formatting string specified by the <xref:System.Web.DynamicData.DynamicField.DataFormatString%2A> property is applied to field values only when the data-bound control is in read-only mode. To apply the formatting string to values displayed while the data-bound control is in edit mode, set the ApplyFormatInEditMode property to `true`.  \n  \n> [!NOTE]\n>  A <xref:System.Web.DynamicData.DynamicField> object does not automatically remove the formatting when the field is updated in the data source. If you do not want the formatting as part of the value stored, you will need to remove the formatting programmatically."
  syntax:
    content: public bool ApplyFormatInEditMode { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the <see cref=&quot;T:System.Web.DynamicData.DynamicField&quot;></see> applies formatting in edit mode; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.DynamicData.DynamicField.ApplyFormatInEditMode*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.Column
  id: Column
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "Column"
  nameWithType: DynamicField.Column
  fullName: System.Web.DynamicData.DynamicField.Column
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets the <see cref="T:System.Web.DynamicData.MetaColumn"></see> object that this <see cref="T:System.Web.DynamicData.DynamicField"></see> object is associated with.
  syntax:
    content: protected System.Web.DynamicData.MetaColumn Column { get; }
    return:
      type: System.Web.DynamicData.MetaColumn
      description: "The meta column."
  overload: System.Web.DynamicData.DynamicField.Column*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.ConfigureDynamicControl(System.Web.DynamicData.DynamicControl)
  id: ConfigureDynamicControl(System.Web.DynamicData.DynamicControl)
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "ConfigureDynamicControl(DynamicControl)"
  nameWithType: DynamicField.ConfigureDynamicControl(DynamicControl)
  fullName: System.Web.DynamicData.DynamicField.ConfigureDynamicControl(DynamicControl)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Provides a mechanism to modify a <see cref="T:System.Web.DynamicData.DynamicControl"></see> object that was created by the &lt;xref:System.Web.DynamicData.DynamicField.InitializeCell%2A&gt; method.
  syntax:
    content: protected virtual void ConfigureDynamicControl (System.Web.DynamicData.DynamicControl control);
    parameters:
    - id: control
      type: System.Web.DynamicData.DynamicControl
      description: "The control to modify."
  overload: System.Web.DynamicData.DynamicField.ConfigureDynamicControl*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull
  id: ConvertEmptyStringToNull
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "ConvertEmptyStringToNull"
  nameWithType: DynamicField.ConvertEmptyStringToNull
  fullName: System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets or sets a value that indicates whether empty string values ("") are automatically converted to null values when the data field is updated in the data source.
  remarks: "Sometimes the user might enter an empty string for a field value when updating or inserting records. Use the ConvertEmptyStringToNull property to specify whether an empty string value is automatically converted to null when the data field is updated in the data source.  \n  \n By default, a <xref:System.Web.DynamicData.DynamicField> object displays null values as empty strings. To display a different value, set the <xref:System.Web.DynamicData.DynamicField.NullDisplayText%2A> property.  \n  \n> [!NOTE]\n>  The <xref:System.Web.UI.WebControls.Parameter> object of the data source control that the parent control of <xref:System.Web.DynamicData.DynamicField> object is bound to also has a property named <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A?displayProperty=fullName>. This property performs the same function. Make sure that both properties are set appropriately."
  syntax:
    content: public bool ConvertEmptyStringToNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> to automatically convert empty string values to null values; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.CopyProperties(System.Web.UI.WebControls.DataControlField)
  id: CopyProperties(System.Web.UI.WebControls.DataControlField)
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "CopyProperties(DataControlField)"
  nameWithType: DynamicField.CopyProperties(DataControlField)
  fullName: System.Web.DynamicData.DynamicField.CopyProperties(DataControlField)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Copies the properties of the current <see cref="T:System.Web.DynamicData.DynamicField"></see> object to the specified <see cref="T:System.Web.UI.WebControls.DataControlField"></see> object.
  remarks: The CopyProperties method is a helper method. It is used by the <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A> method to copy the properties of the current <xref:System.Web.DynamicData.DynamicField> object to the <xref:System.Web.DynamicData.DynamicField> object that is passed in the `newField` parameter.
  syntax:
    content: protected override void CopyProperties (System.Web.UI.WebControls.DataControlField newField);
    parameters:
    - id: newField
      type: System.Web.UI.WebControls.DataControlField
      description: "The  to copy the properties of the current  to."
  overload: System.Web.DynamicData.DynamicField.CopyProperties*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.CreateDynamicControl
  id: CreateDynamicControl
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "CreateDynamicControl()"
  nameWithType: DynamicField.CreateDynamicControl()
  fullName: System.Web.DynamicData.DynamicField.CreateDynamicControl()
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Provides a mechanism for classes that derive from <see cref="T:System.Web.DynamicData.DynamicField"></see> to override how a <see cref="T:System.Web.DynamicData.DynamicControl"></see> object is created.
  syntax:
    content: protected virtual System.Web.DynamicData.DynamicControl CreateDynamicControl ();
    parameters: []
    return:
      type: System.Web.DynamicData.DynamicControl
      description: "To be added."
  overload: System.Web.DynamicData.DynamicField.CreateDynamicControl*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.CreateField
  id: CreateField
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "CreateField()"
  nameWithType: DynamicField.CreateField()
  fullName: System.Web.DynamicData.DynamicField.CreateField()
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Creates and returns a new instance of the <see cref="T:System.Web.DynamicData.DynamicField"></see> class.
  remarks: The CreateField method is a helper method. It is used by the <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A> method to create an empty <xref:System.Web.DynamicData.DynamicField> object.
  syntax:
    content: protected override System.Web.UI.WebControls.DataControlField CreateField ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.DataControlField
      description: "To be added."
  overload: System.Web.DynamicData.DynamicField.CreateField*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.DataField
  id: DataField
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "DataField"
  nameWithType: DynamicField.DataField
  fullName: System.Web.DynamicData.DynamicField.DataField
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets or sets the name of the data field to bind the <see cref="T:System.Web.DynamicData.DynamicField"></see> object to.
  remarks: "Use the DataField property to specify the data field to bind to the <xref:System.Web.DynamicData.DynamicField> object. The data field can be the column name or, for foreign key columns, the relationship name.  \n  \n By default, the specified data field is displayed by the <xref:System.Web.DynamicData.DynamicField> object using the field template that is associated with the field data type. You can change the field template that is rendered for the data field by setting the <xref:System.Web.DynamicData.DynamicField.UIHint%2A> property. You can also format the displayed text by setting the <xref:System.Web.DynamicData.DynamicField.DataFormatString%2A> property. If a field value is `null`, an empty string (\"\") is displayed for the value by default. To specify an alternate caption, set the <xref:System.Web.DynamicData.DynamicField.NullDisplayText%2A> property.  \n  \n **Note** If you want to change the display and behavior of a data field globally, you must apply attributes to your data model instead of setting this in a particular instance of the <xref:System.Web.DynamicData.DynamicField> object. For more information, see [ASP.NET Dynamic Data](../Topic/ASP.NET%20Dynamic%20Data.md).  \n  \n The <xref:System.Web.UI.WebControls.DataControlField.OnFieldChanged%2A> method is called to raise a state change event when the DataField property is set.  \n  \n The value of the DataField property is stored in view state."
  syntax:
    content: public virtual string DataField { get; set; }
    return:
      type: System.String
      description: "The name of the data field that the <see cref=&quot;T:System.Web.DynamicData.DynamicField&quot;></see> object is bound to."
  overload: System.Web.DynamicData.DynamicField.DataField*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.DataFormatString
  id: DataFormatString
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "DataFormatString"
  nameWithType: DynamicField.DataFormatString
  fullName: System.Web.DynamicData.DynamicField.DataFormatString
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets or sets the string that specifies the display format for the value of the data field.
  remarks: "Use the DataFormatString property to specify a custom display format for the values displayed in the <xref:System.Web.DynamicData.DynamicField> object. If the DataFormatString property is not set, the field value is displayed without any special formatting.  \n  \n By default, the formatting string is applied to the field value only when the data-bound control that contains the <xref:System.Web.DynamicData.DynamicField> object is in read-only mode. To apply the formatting string to the field value while in edit mode, set the <xref:System.Web.DynamicData.DynamicField.ApplyFormatInEditMode%2A> property to `true`.  \n  \n The display format that you specify using the DataFormatString property is specific to this instance of the <xref:System.Web.DynamicData.DynamicField> class. You can also change the display format for a data field across the entire application by applying the <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute> to your data model and setting the <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString%2A?displayProperty=fullName> named parameter in the constructor. For more information, see [ASP.NET Dynamic Data](../Topic/ASP.NET%20Dynamic%20Data.md)."
  syntax:
    content: public string DataFormatString { get; set; }
    return:
      type: System.String
      description: "A formatting string that specifies the display format for the value of the data field. The default is an empty string (&quot;&quot;), which indicates that no special formatting is applied to the value."
  overload: System.Web.DynamicData.DynamicField.DataFormatString*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.ExtractValuesFromCell(System.Collections.Specialized.IOrderedDictionary,System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState,System.Boolean)
  id: ExtractValuesFromCell(System.Collections.Specialized.IOrderedDictionary,System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState,System.Boolean)
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "ExtractValuesFromCell(IOrderedDictionary,DataControlFieldCell,DataControlRowState,Boolean)"
  nameWithType: DynamicField.ExtractValuesFromCell(IOrderedDictionary,DataControlFieldCell,DataControlRowState,Boolean)
  fullName: System.Web.DynamicData.DynamicField.ExtractValuesFromCell(IOrderedDictionary,DataControlFieldCell,DataControlRowState,Boolean)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Extracts the value of the data field from the current table cell and adds the value to the specified dictionary.
  syntax:
    content: public override void ExtractValuesFromCell (System.Collections.Specialized.IOrderedDictionary dictionary, System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlRowState rowState, bool includeReadOnly);
    parameters:
    - id: dictionary
      type: System.Collections.Specialized.IOrderedDictionary
      description: "The dictionary that will hold the cell values."
    - id: cell
      type: System.Web.UI.WebControls.DataControlFieldCell
      description: "The cell that contains the text or controls of the  object."
    - id: rowState
      type: System.Web.UI.WebControls.DataControlRowState
      description: "One of the enumeration values that specifies the row state."
    - id: includeReadOnly
      type: System.Boolean
      description: "\n     to include the values of read-only fields in `dictionary`; otherwise, ."
  overload: System.Web.DynamicData.DynamicField.ExtractValuesFromCell*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "GetAttribute(String)"
  nameWithType: DynamicField.GetAttribute(String)
  fullName: System.Web.DynamicData.DynamicField.GetAttribute(String)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Retrieves the specified attribute value.
  syntax:
    content: public string GetAttribute (string key);
    parameters:
    - id: key
      type: System.String
      description: "The key of the attribute to get."
    return:
      type: System.String
      description: "To be added."
  overload: System.Web.DynamicData.DynamicField.GetAttribute*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.HeaderText
  id: HeaderText
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "HeaderText"
  nameWithType: DynamicField.HeaderText
  fullName: System.Web.DynamicData.DynamicField.HeaderText
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets or sets the text that is displayed in the header of the data-bound control that contains the <see cref="T:System.Web.DynamicData.DynamicField"></see> object.
  remarks: "Use the HeaderText property to identify a field in a data-bound control with a friendly name. The most common application of the HeaderText property is to provide meaningful column names to data fields in a <xref:System.Web.UI.WebControls.GridView> or <xref:System.Web.UI.WebControls.DetailsView> control.  \n  \n By default, the HeaderText property uses the display name set for the data field by using the <xref:System.ComponentModel.DisplayNameAttribute> attribute. If the display name is not set, the HeaderText property uses the value of the <xref:System.Web.DynamicData.DynamicField.DataField%2A> property."
  syntax:
    content: public override string HeaderText { get; set; }
    return:
      type: System.String
      description: "The text that is displayed in the header of the data-bound control that contains the <see cref=&quot;T:System.Web.DynamicData.DynamicField&quot;></see> object."
  overload: System.Web.DynamicData.DynamicField.HeaderText*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The  object is inside a data-bound control that is not bound to a data source control that implements the  interface."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.HtmlEncode
  id: HtmlEncode
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "HtmlEncode"
  nameWithType: DynamicField.HtmlEncode
  fullName: System.Web.DynamicData.DynamicField.HtmlEncode
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets or sets a value that indicates whether data field values are HTML-encoded before they are displayed in a <see cref="T:System.Web.DynamicData.DynamicField"></see> object.
  remarks: "Use the HtmlEncode property to specify whether field values are HTML-encoded to their respective string representations before they are displayed.  \n  \n> [!NOTE]\n>  HTML-encoding field values helps to prevent cross-site scripting attacks and malicious content from being displayed. This property should be enabled whenever possible. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md)."
  syntax:
    content: public bool HtmlEncode { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if field values are HTML-encoded before they are displayed; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>. The default is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Web.DynamicData.DynamicField.HtmlEncode*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)
  id: InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "InitializeCell(DataControlFieldCell,DataControlCellType,DataControlRowState,Int32)"
  nameWithType: DynamicField.InitializeCell(DataControlFieldCell,DataControlCellType,DataControlRowState,Int32)
  fullName: System.Web.DynamicData.DynamicField.InitializeCell(DataControlFieldCell,DataControlCellType,DataControlRowState,Int32)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Adds text or controls to the specified cell.
  syntax:
    content: public override void InitializeCell (System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlCellType cellType, System.Web.UI.WebControls.DataControlRowState rowState, int rowIndex);
    parameters:
    - id: cell
      type: System.Web.UI.WebControls.DataControlFieldCell
      description: "The object that contains the text or controls of the  object."
    - id: cellType
      type: System.Web.UI.WebControls.DataControlCellType
      description: "One of the enumeration values that specifies the function of the `cell` object."
    - id: rowState
      type: System.Web.UI.WebControls.DataControlRowState
      description: "One of the enumeration values that specifies the row state."
    - id: rowIndex
      type: System.Int32
      description: "The index of the row that the `cell` object is contained in."
  overload: System.Web.DynamicData.DynamicField.InitializeCell*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.NullDisplayText
  id: NullDisplayText
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "NullDisplayText"
  nameWithType: DynamicField.NullDisplayText
  fullName: System.Web.DynamicData.DynamicField.NullDisplayText
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets or sets the caption that is displayed for a data field when the field value is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  remarks: Sometimes a field value is stored as null in the data source. You can specify a custom caption to display for data fields that have a null value by setting the NullDisplayText property. If this property is not set, null field values are displayed as empty strings ("").
  syntax:
    content: public string NullDisplayText { get; set; }
    return:
      type: System.String
      description: "The caption that is displayed for a data field when the field value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. The default is an empty string (&quot;&quot;), which indicates that this property is not set."
  overload: System.Web.DynamicData.DynamicField.NullDisplayText*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.ReadOnly
  id: ReadOnly
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "ReadOnly"
  nameWithType: DynamicField.ReadOnly
  fullName: System.Web.DynamicData.DynamicField.ReadOnly
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets the read-only state of the dynamic field.
  remarks: If the ReadOnly property is `true`, the <xref:System.Web.DynamicData.DynamicField> control loads a read-only template. This property requires that view state be enabled.
  syntax:
    content: public virtual bool ReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "The read-only state of the dynamic field."
  overload: System.Web.DynamicData.DynamicField.ReadOnly*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "SetAttribute(String,String)"
  nameWithType: DynamicField.SetAttribute(String,String)
  fullName: System.Web.DynamicData.DynamicField.SetAttribute(String,String)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Sets an attribute that is associated with the <see cref="T:System.Web.DynamicData.DynamicField"></see> object.
  syntax:
    content: public void SetAttribute (string key, string value);
    parameters:
    - id: key
      type: System.String
      description: "The name of the attribute to be set."
    - id: value
      type: System.String
      description: "The attribute value."
  overload: System.Web.DynamicData.DynamicField.SetAttribute*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.SortExpression
  id: SortExpression
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "SortExpression"
  nameWithType: DynamicField.SortExpression
  fullName: System.Web.DynamicData.DynamicField.SortExpression
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets or sets the sort expression that is used when the data field is used to sort the data source by.
  remarks: "The SortExpression property tries to use the value of the <xref:System.Web.DynamicData.MetaColumn.SortExpression%2A?displayProperty=fullName> property of the column object that is associated with the <xref:System.Web.DynamicData.DynamicField> object by setting the <xref:System.Web.DynamicData.DynamicField.DataField%2A> property.  \n  \n The <xref:System.Web.UI.WebControls.DataControlField.OnFieldChanged%2A> method is called to raise a state change event when the SortExpression property is set.  \n  \n The value of the SortExpression property is stored in view state."
  syntax:
    content: public override string SortExpression { get; set; }
    return:
      type: System.String
      description: "The sort expression that is used when the data field is used to sort the data source by."
  overload: System.Web.DynamicData.DynamicField.SortExpression*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The  object is inside a data-bound control that is not bound to a data source control that implements the  interface."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.UIHint
  id: UIHint
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "UIHint"
  nameWithType: DynamicField.UIHint
  fullName: System.Web.DynamicData.DynamicField.UIHint
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets or sets the field template to use for displaying the data field.
  remarks: "Use the UIHint property to specify the field template to use to display the UI for a data field. Field templates by default are user controls and their names contain a suffix to identify field templates that are used for edit operations and insert operations. The suffixes are _edit and _insert, respectively. When you set a value to the UIHint property, you set the name without the suffixes. Dynamic Data will identify the current mode of the data field and will render the correct field template.  \n  \n If the UIHint property is not set, Dynamic Data by default will render the field template based on the field type. For more information, see [ASP.NET Dynamic Data Scaffolding](../Topic/ASP.NET%20Dynamic%20Data%20Scaffolding.md).  \n  \n The field template that you specify using the UIHint property is specific to this instance of the <xref:System.Web.DynamicData.DynamicField> class. You can also change the field template used by a data field across the entire application by applying the <xref:System.ComponentModel.DataAnnotations.UIHintAttribute> to your data model. Setting the UIHint property overrides the metadata applied to the data model. For more information about metadata attributes, see [ASP.NET Dynamic Data](../Topic/ASP.NET%20Dynamic%20Data.md).  \n  \n The <xref:System.Web.UI.WebControls.DataControlField.OnFieldChanged%2A> method is called to raise a state change event when the UIHint property is set.  \n  \n The value of the UIHint property is stored in view state."
  syntax:
    content: public virtual string UIHint { get; set; }
    return:
      type: System.String
      description: "The name of the field template to use for displaying the data field."
  overload: System.Web.DynamicData.DynamicField.UIHint*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.ValidateRequestMode
  id: ValidateRequestMode
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "ValidateRequestMode"
  nameWithType: DynamicField.ValidateRequestMode
  fullName: System.Web.DynamicData.DynamicField.ValidateRequestMode
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets or sets a value that specifies whether the control validates client input.
  syntax:
    content: public System.Web.UI.ValidateRequestMode ValidateRequestMode { get; set; }
    return:
      type: System.Web.UI.ValidateRequestMode
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> if the control validates client input; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.DynamicData.DynamicField.ValidateRequestMode*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Web.DynamicData.DynamicField.ValidationGroup
  id: ValidationGroup
  parent: System.Web.DynamicData.DynamicField
  langs:
  - csharp
  name: "ValidationGroup"
  nameWithType: DynamicField.ValidationGroup
  fullName: System.Web.DynamicData.DynamicField.ValidationGroup
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: Gets the &lt;xref:System.Web.DynamicData.DynamicControl.ValidationGroup%2A&gt; object that this <see cref="T:System.Web.DynamicData.DynamicField"></see> object is associated with.
  syntax:
    content: public virtual string ValidationGroup { get; set; }
    return:
      type: System.String
      description: "The name of the validation group to which this validation control belongs. The default is an empty string (&quot;&quot;), which indicates that this property is not set."
  overload: System.Web.DynamicData.DynamicField.ValidationGroup*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Web.UI.WebControls.DataControlField
  isExternal: false
  name: "System.Web.UI.WebControls.DataControlField"
- uid: System.Web.DynamicData.DynamicField.#ctor
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "DynamicField()"
  nameWithType: DynamicField.DynamicField()
  fullName: System.Web.DynamicData.DynamicField.DynamicField()
- uid: System.Web.DynamicData.DynamicField.ApplyFormatInEditMode
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ApplyFormatInEditMode"
  nameWithType: DynamicField.ApplyFormatInEditMode
  fullName: System.Web.DynamicData.DynamicField.ApplyFormatInEditMode
- uid: System.Boolean
  parent: System
  isExternal: true
  name: "Boolean"
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.DynamicData.DynamicField.Column
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "Column"
  nameWithType: DynamicField.Column
  fullName: System.Web.DynamicData.DynamicField.Column
- uid: System.Web.DynamicData.MetaColumn
  parent: System.Web.DynamicData
  isExternal: false
  name: "MetaColumn"
  nameWithType: MetaColumn
  fullName: System.Web.DynamicData.MetaColumn
- uid: System.Web.DynamicData.DynamicField.ConfigureDynamicControl(System.Web.DynamicData.DynamicControl)
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ConfigureDynamicControl(DynamicControl)"
  nameWithType: DynamicField.ConfigureDynamicControl(DynamicControl)
  fullName: System.Web.DynamicData.DynamicField.ConfigureDynamicControl(DynamicControl)
- uid: System.Web.DynamicData.DynamicControl
  parent: System.Web.DynamicData
  isExternal: false
  name: "DynamicControl"
  nameWithType: DynamicControl
  fullName: System.Web.DynamicData.DynamicControl
- uid: System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ConvertEmptyStringToNull"
  nameWithType: DynamicField.ConvertEmptyStringToNull
  fullName: System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull
- uid: System.Web.DynamicData.DynamicField.CopyProperties(System.Web.UI.WebControls.DataControlField)
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "CopyProperties(DataControlField)"
  nameWithType: DynamicField.CopyProperties(DataControlField)
  fullName: System.Web.DynamicData.DynamicField.CopyProperties(DataControlField)
- uid: System.Web.DynamicData.DynamicField.CreateDynamicControl
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "CreateDynamicControl()"
  nameWithType: DynamicField.CreateDynamicControl()
  fullName: System.Web.DynamicData.DynamicField.CreateDynamicControl()
- uid: System.Web.DynamicData.DynamicField.CreateField
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "CreateField()"
  nameWithType: DynamicField.CreateField()
  fullName: System.Web.DynamicData.DynamicField.CreateField()
- uid: System.Web.DynamicData.DynamicField.DataField
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "DataField"
  nameWithType: DynamicField.DataField
  fullName: System.Web.DynamicData.DynamicField.DataField
- uid: System.String
  parent: System
  isExternal: true
  name: "String"
  nameWithType: String
  fullName: System.String
- uid: System.Web.DynamicData.DynamicField.DataFormatString
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "DataFormatString"
  nameWithType: DynamicField.DataFormatString
  fullName: System.Web.DynamicData.DynamicField.DataFormatString
- uid: System.Web.DynamicData.DynamicField.ExtractValuesFromCell(System.Collections.Specialized.IOrderedDictionary,System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState,System.Boolean)
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ExtractValuesFromCell(IOrderedDictionary,DataControlFieldCell,DataControlRowState,Boolean)"
  nameWithType: DynamicField.ExtractValuesFromCell(IOrderedDictionary,DataControlFieldCell,DataControlRowState,Boolean)
  fullName: System.Web.DynamicData.DynamicField.ExtractValuesFromCell(IOrderedDictionary,DataControlFieldCell,DataControlRowState,Boolean)
- uid: System.Collections.Specialized.IOrderedDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: "IOrderedDictionary"
  nameWithType: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
- uid: System.Web.UI.WebControls.DataControlFieldCell
  parent: System.Web.UI.WebControls
  isExternal: false
  name: "DataControlFieldCell"
  nameWithType: DataControlFieldCell
  fullName: System.Web.UI.WebControls.DataControlFieldCell
- uid: System.Web.UI.WebControls.DataControlRowState
  parent: System.Web.UI.WebControls
  isExternal: false
  name: "DataControlRowState"
  nameWithType: DataControlRowState
  fullName: System.Web.UI.WebControls.DataControlRowState
- uid: System.Web.DynamicData.DynamicField.GetAttribute(System.String)
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "GetAttribute(String)"
  nameWithType: DynamicField.GetAttribute(String)
  fullName: System.Web.DynamicData.DynamicField.GetAttribute(String)
- uid: System.Web.DynamicData.DynamicField.HeaderText
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "HeaderText"
  nameWithType: DynamicField.HeaderText
  fullName: System.Web.DynamicData.DynamicField.HeaderText
- uid: System.Web.DynamicData.DynamicField.HtmlEncode
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "HtmlEncode"
  nameWithType: DynamicField.HtmlEncode
  fullName: System.Web.DynamicData.DynamicField.HtmlEncode
- uid: System.Web.DynamicData.DynamicField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "InitializeCell(DataControlFieldCell,DataControlCellType,DataControlRowState,Int32)"
  nameWithType: DynamicField.InitializeCell(DataControlFieldCell,DataControlCellType,DataControlRowState,Int32)
  fullName: System.Web.DynamicData.DynamicField.InitializeCell(DataControlFieldCell,DataControlCellType,DataControlRowState,Int32)
- uid: System.Web.UI.WebControls.DataControlCellType
  parent: System.Web.UI.WebControls
  isExternal: false
  name: "DataControlCellType"
  nameWithType: DataControlCellType
  fullName: System.Web.UI.WebControls.DataControlCellType
- uid: System.Int32
  parent: System
  isExternal: true
  name: "Int32"
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.DynamicData.DynamicField.NullDisplayText
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "NullDisplayText"
  nameWithType: DynamicField.NullDisplayText
  fullName: System.Web.DynamicData.DynamicField.NullDisplayText
- uid: System.Web.DynamicData.DynamicField.ReadOnly
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ReadOnly"
  nameWithType: DynamicField.ReadOnly
  fullName: System.Web.DynamicData.DynamicField.ReadOnly
- uid: System.Web.DynamicData.DynamicField.SetAttribute(System.String,System.String)
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "SetAttribute(String,String)"
  nameWithType: DynamicField.SetAttribute(String,String)
  fullName: System.Web.DynamicData.DynamicField.SetAttribute(String,String)
- uid: System.Web.DynamicData.DynamicField.SortExpression
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "SortExpression"
  nameWithType: DynamicField.SortExpression
  fullName: System.Web.DynamicData.DynamicField.SortExpression
- uid: System.Web.DynamicData.DynamicField.UIHint
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "UIHint"
  nameWithType: DynamicField.UIHint
  fullName: System.Web.DynamicData.DynamicField.UIHint
- uid: System.Web.DynamicData.DynamicField.ValidateRequestMode
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ValidateRequestMode"
  nameWithType: DynamicField.ValidateRequestMode
  fullName: System.Web.DynamicData.DynamicField.ValidateRequestMode
- uid: System.Web.UI.ValidateRequestMode
  parent: System.Web.UI
  isExternal: false
  name: "ValidateRequestMode"
  nameWithType: ValidateRequestMode
  fullName: System.Web.UI.ValidateRequestMode
- uid: System.Web.DynamicData.DynamicField.ValidationGroup
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ValidationGroup"
  nameWithType: DynamicField.ValidationGroup
  fullName: System.Web.DynamicData.DynamicField.ValidationGroup
- uid: System.Web.DynamicData.DynamicField.#ctor*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "DynamicField"
  nameWithType: DynamicField.DynamicField
- uid: System.Web.DynamicData.DynamicField.ApplyFormatInEditMode*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ApplyFormatInEditMode"
  nameWithType: DynamicField.ApplyFormatInEditMode
- uid: System.Web.DynamicData.DynamicField.Column*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "Column"
  nameWithType: DynamicField.Column
- uid: System.Web.DynamicData.DynamicField.ConfigureDynamicControl*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ConfigureDynamicControl"
  nameWithType: DynamicField.ConfigureDynamicControl
- uid: System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ConvertEmptyStringToNull"
  nameWithType: DynamicField.ConvertEmptyStringToNull
- uid: System.Web.DynamicData.DynamicField.CopyProperties*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "CopyProperties"
  nameWithType: DynamicField.CopyProperties
- uid: System.Web.DynamicData.DynamicField.CreateDynamicControl*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "CreateDynamicControl"
  nameWithType: DynamicField.CreateDynamicControl
- uid: System.Web.DynamicData.DynamicField.CreateField*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "CreateField"
  nameWithType: DynamicField.CreateField
- uid: System.Web.DynamicData.DynamicField.DataField*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "DataField"
  nameWithType: DynamicField.DataField
- uid: System.Web.DynamicData.DynamicField.DataFormatString*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "DataFormatString"
  nameWithType: DynamicField.DataFormatString
- uid: System.Web.DynamicData.DynamicField.ExtractValuesFromCell*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ExtractValuesFromCell"
  nameWithType: DynamicField.ExtractValuesFromCell
- uid: System.Web.DynamicData.DynamicField.GetAttribute*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "GetAttribute"
  nameWithType: DynamicField.GetAttribute
- uid: System.Web.DynamicData.DynamicField.HeaderText*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "HeaderText"
  nameWithType: DynamicField.HeaderText
- uid: System.Web.DynamicData.DynamicField.HtmlEncode*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "HtmlEncode"
  nameWithType: DynamicField.HtmlEncode
- uid: System.Web.DynamicData.DynamicField.InitializeCell*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "InitializeCell"
  nameWithType: DynamicField.InitializeCell
- uid: System.Web.DynamicData.DynamicField.NullDisplayText*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "NullDisplayText"
  nameWithType: DynamicField.NullDisplayText
- uid: System.Web.DynamicData.DynamicField.ReadOnly*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ReadOnly"
  nameWithType: DynamicField.ReadOnly
- uid: System.Web.DynamicData.DynamicField.SetAttribute*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "SetAttribute"
  nameWithType: DynamicField.SetAttribute
- uid: System.Web.DynamicData.DynamicField.SortExpression*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "SortExpression"
  nameWithType: DynamicField.SortExpression
- uid: System.Web.DynamicData.DynamicField.UIHint*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "UIHint"
  nameWithType: DynamicField.UIHint
- uid: System.Web.DynamicData.DynamicField.ValidateRequestMode*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ValidateRequestMode"
  nameWithType: DynamicField.ValidateRequestMode
- uid: System.Web.DynamicData.DynamicField.ValidationGroup*
  parent: System.Web.DynamicData.DynamicField
  isExternal: false
  name: "ValidationGroup"
  nameWithType: DynamicField.ValidationGroup
