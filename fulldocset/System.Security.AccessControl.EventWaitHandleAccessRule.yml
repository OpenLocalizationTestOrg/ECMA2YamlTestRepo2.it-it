### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.EventWaitHandleAccessRule
  id: EventWaitHandleAccessRule
  children:
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  langs:
  - csharp
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule
  type: Class
  summary: "Rappresenta un set di diritti di accesso concesse o negate per un utente o gruppo. Questa classe non può essere ereditata."
  remarks: "La classe EventWaitHandleAccessRule è parte di un set di classi .NET Framework fornisce per la gestione del controllo di accesso di Windows gli eventi di sistema denominato. Per una panoramica di queste classi e la loro relazione con le strutture di controllo di accesso Windows, vedere <xref:System.Security.AccessControl.EventWaitHandleSecurity>.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!NOTE] > Del controllo di accesso è significativo solo per Windows denominato eventi di sistema. Se un <xref:System.Threading.EventWaitHandle>oggetto rappresenta un evento locale, il controllo di accesso è irrilevante.</xref:System.Threading.EventWaitHandle>       Per ottenere un elenco di regole attualmente applicate a un evento denominato, usare il <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>metodo per ottenere un <xref:System.Security.AccessControl.EventWaitHandleSecurity>dell&quot;oggetto e quindi utilizzare il relativo <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>per ottenere una raccolta di oggetti EventWaitHandleAccessRule.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.EventWaitHandleSecurity> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>       Oggetti EventWaitHandleAccessRule non eseguano il mapping uno a uno con le voci di controllo di accesso nell&quot;elenco di controllo di accesso discrezionale (DACL) sottostante. Quando si ottiene il set di tutte le regole di accesso per un evento, il set contiene il numero minimo di regole necessarie per esprimere tutte le voci di controllo di accesso.      > [!NOTE] > Le voci di controllo di accesso è stata modificata è applicare e rimuovere le regole. Le informazioni nelle regole vengono unite, se possibile, per mantenere il più piccolo numero di voci di controllo di accesso. Pertanto, quando si ottiene l&quot;elenco corrente delle regole, potrebbe non apparire esattamente come l&quot;elenco di tutte le regole di cui che è stato aggiunto.       Utilizzare oggetti EventWaitHandleAccessRule per specificare i diritti di accesso per consentire o negare a un utente o gruppo. Un EventWaitHandleAccessRule oggetto rappresenta sempre l&quot;accesso consentito o negato l&quot;accesso, non entrambi.       Per applicare una regola a un evento di sistema denominato, utilizzare il <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName>metodo per ottenere il <xref:System.Security.AccessControl.EventWaitHandleSecurity>oggetto.</xref:System.Security.AccessControl.EventWaitHandleSecurity> </xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> Modificare il <xref:System.Security.AccessControl.EventWaitHandleSecurity>oggetto mediante i metodi per aggiungere la regola e quindi usare il <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>metodo per ricollegare l&quot;oggetto di sicurezza.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!IMPORTANT] > Le modifiche apportate a un <xref:System.Security.AccessControl.EventWaitHandleSecurity>oggetto non influiscono sui livelli di accesso dell&quot;evento denominato finché non si chiama il <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>metodo a cui assegnare l&quot;oggetto di sicurezza modificato all&quot;evento denominato.</xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.EventWaitHandleSecurity>       EventWaitHandleAccessRule oggetti non sono modificabili. Per modificare la protezione per un evento tramite i metodi del <xref:System.Security.AccessControl.EventWaitHandleSecurity>classe per aggiungere o rimuovere regole; in tal caso, le voci di controllo di accesso vengono modificate.</xref:System.Security.AccessControl.EventWaitHandleSecurity>      > [!NOTE] > Sicurezza sugli oggetti di sincronizzazione non è supportata per Windows 98 o Windows Millennium Edition."
  example:
  - "The following code example demonstrates the creation and use of EventWaitHandleAccessRule objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_0_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_0_1.vb)]"
  syntax:
    content: 'public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> (classe), specificando l&quot;utente o gruppo viene applicata la regola, i diritti di accesso e se i diritti di accesso consentiti o negati."
  remarks: "In attesa di un <xref:System.Threading.EventWaitHandle>(chiamando il <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>o <xref:System.Threading.WaitHandle.WaitAll%2A>metodo), un utente deve disporre <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>accesso.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.EventWaitHandle> Per segnalare un evento chiamando il <xref:System.Threading.EventWaitHandle.Set%2A>metodo, o per ripristinarlo allo stato segnalato chiamando il <xref:System.Threading.EventWaitHandle.Reset%2A>metodo, un utente deve avere <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>accesso.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.Reset%2A> </xref:System.Threading.EventWaitHandle.Set%2A> Per segnalare un <xref:System.Threading.EventWaitHandle>dell&quot;oggetto e quindi l&quot;attesa chiamando il <xref:System.Threading.WaitHandle.SignalAndWait%2A>metodo, un utente deve avere <xref:System.Security.AccessControl.EventWaitHandleRights>e <xref:System.Security.AccessControl.EventWaitHandleRights>accesso.</xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Threading.WaitHandle.SignalAndWait%2A> </xref:System.Threading.EventWaitHandle>"
  syntax:
    content: public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "L&quot;utente o il gruppo che viene applicata la regola. Deve essere di tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> o un tipo, ad esempio <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> che può essere convertito nel tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> valori che specificano i diritti concessi o negati."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Uno del <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valori che specificano se i diritti sono concesse o negati."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Specifica un valore non valido.       - oppure - <code>type</code> specifica un valore non valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - <code>eventRights</code> è zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>non è di tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> né di un tipo, ad esempio <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> che può essere convertito nel tipo <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.AccessControl.EventWaitHandleAccessRule&quot;> </xref> (classe), che specifica il nome dell&quot;utente o del gruppo viene applicata la regola, i diritti di accesso e se i diritti di accesso consentiti o negati."
  remarks: "In attesa di un <xref:System.Threading.EventWaitHandle>(chiamando il <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>o <xref:System.Threading.WaitHandle.WaitAll%2A>metodo), un utente deve disporre <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>accesso.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.EventWaitHandle> Per segnalare un evento chiamando il <xref:System.Threading.EventWaitHandle.Set%2A>metodo, o per ripristinarlo allo stato segnalato chiamando il <xref:System.Threading.EventWaitHandle.Reset%2A>metodo, un utente deve avere <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName>accesso.</xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> </xref:System.Threading.EventWaitHandle.Reset%2A> </xref:System.Threading.EventWaitHandle.Set%2A> Per segnalare un <xref:System.Threading.EventWaitHandle>dell&quot;oggetto e quindi l&quot;attesa chiamando il <xref:System.Threading.WaitHandle.SignalAndWait%2A>metodo, un utente deve avere <xref:System.Security.AccessControl.EventWaitHandleRights>e <xref:System.Security.AccessControl.EventWaitHandleRights>accesso.</xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Security.AccessControl.EventWaitHandleRights> </xref:System.Threading.WaitHandle.SignalAndWait%2A> </xref:System.Threading.EventWaitHandle>       Questo costruttore è equivalente alla creazione di un <xref:System.Security.Principal.NTAccount>oggetto, passando `identity` per il <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>costruttore e passando l&quot;oggetto appena creato <xref:System.Security.Principal.NTAccount>dell&quot;oggetto per il <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29>costruttore.</xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/ffb3828f-bc0d-4880-b857-_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/ffb3828f-bc0d-4880-b857-_1.vb)]"
  syntax:
    content: public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "Il nome dell&quot;utente o del gruppo viene applicata la regola."
    - id: eventRights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> valori che specificano i diritti concessi o negati."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Uno del <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> valori che specificano se i diritti sono concesse o negati."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Specifica un valore non valido.       - oppure - <code>type</code> specifica un valore non valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>è uguale a zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - oppure - <code>identity</code> è una stringa di lunghezza zero.       - oppure - <code>identity</code> più di 512 caratteri."
  platform:
  - net462
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  id: EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  langs:
  - csharp
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Ottiene i diritti concessi o negati dalla regola di accesso."
  remarks: "<xref:System.Security.AccessControl.EventWaitHandleAccessRule>gli oggetti non sono modificabili.</xref:System.Security.AccessControl.EventWaitHandleAccessRule> È possibile creare una nuova regola di accesso che rappresenta un utente diverso, diritti diversi o un altro <xref:System.Security.AccessControl.AccessControlType>, ma non è possibile modificare una regola di accesso esistente.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example demonstrates the use of the EventWaitHandleRights property to display the rights in the set of rules contained in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType>rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_2_1.cs)]\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_2_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }
    return:
      type: System.Security.AccessControl.EventWaitHandleRights
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.EventWaitHandleRights&quot;> </xref> valori che indicano i diritti concessi o negati dalla regola di accesso."
  overload: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference,EventWaitHandleRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.EventWaitHandleRights
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(String,EventWaitHandleRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleAccessRule
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule
- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*
  parent: System.Security.AccessControl.EventWaitHandleAccessRule
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights
