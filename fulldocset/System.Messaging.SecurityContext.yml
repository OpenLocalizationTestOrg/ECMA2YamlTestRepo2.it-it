### YamlMime:ManagedReference
items:
- uid: System.Messaging.SecurityContext
  id: SecurityContext
  children:
  - System.Messaging.SecurityContext.Dispose
  langs:
  - csharp
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Messaging.SecurityContext
  type: Class
  summary: "Rappresenta il contesto di sicurezza per un messaggio in una coda."
  remarks: "Il contesto di sicurezza contiene informazioni di sicurezza memorizzato nella cache, ad esempio un certificato interno, la chiave privata corrispondente, il SID dell&quot;utente, necessaria per allegare un certificato e l&quot;identificatore del mittente per un messaggio alla richiesta di autenticazione.       Se un client, ad esempio un&quot;applicazione ASP.NET, rappresenta un utente per inviare un messaggio a una coda, viene utilizzata l&quot;identità dell&quot;utente per accedere alla coda. Se la coda è remota, queste credenziali vengono memorizzati nella cache e usate per i messaggi che vengono successivamente inviati alla coda. Pertanto, il SID nei messaggi successivi sarà l&quot;identità memorizzata nella cache del primo utente che ha inviato un messaggio alla coda. Per gli utenti successivi verrà utilizzata l&quot;identità memorizzata nella cache del primo utente che ha inviato un messaggio alla coda.       Per risolvere questo problema, impostare il contesto di sicurezza utilizzando <xref:System.Messaging.Message.SecurityContext%2A>prima di inviare un messaggio a una coda remota per garantire che le credenziali dell&quot;utente corrente vengono utilizzate per accedere alla coda.</xref:System.Messaging.Message.SecurityContext%2A> Tuttavia, la procedura migliore consiste nel: 1.  Creare una coda autenticata.      2.  Eseguire l&quot;applicazione ASP.NET come un&quot;identità di dominio e autorizzare l&quot;applicazione per scrivere nella coda.      3.  Non rappresentare l&quot;utente quando si utilizza la coda. In alternativa, ottenere l&quot;identità del chiamante e l&quot;autorizzazione di controllo nell&quot;applicazione ASP.NET o includere l&quot;identità del chiamante come parte del messaggio e quindi eseguire l&quot;autorizzazione di controllo nell&quot;applicazione ricevente."
  syntax:
    content: 'public sealed class SecurityContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.SecurityContext.Dispose
  id: Dispose
  parent: System.Messaging.SecurityContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecurityContext.Dispose()
  fullName: System.Messaging.SecurityContext.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rilascia tutte le risorse usate dal <xref href=&quot;System.Messaging.SecurityContext&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.SecurityContext.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Messaging.SecurityContext.Dispose
  parent: System.Messaging.SecurityContext
  isExternal: false
  name: Dispose()
  nameWithType: SecurityContext.Dispose()
  fullName: System.Messaging.SecurityContext.Dispose()
- uid: System.Messaging.SecurityContext.Dispose*
  parent: System.Messaging.SecurityContext
  isExternal: false
  name: Dispose
  nameWithType: SecurityContext.Dispose
