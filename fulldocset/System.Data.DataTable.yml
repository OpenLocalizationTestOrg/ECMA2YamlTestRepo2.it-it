### YamlMime:ManagedReference
items:
- uid: System.Data.DataTable
  id: DataTable
  children:
  - System.Data.DataTable.#ctor
  - System.Data.DataTable.#ctor(System.String)
  - System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataTable.#ctor(System.String,System.String)
  - System.Data.DataTable.AcceptChanges
  - System.Data.DataTable.BeginInit
  - System.Data.DataTable.BeginLoadData
  - System.Data.DataTable.CaseSensitive
  - System.Data.DataTable.ChildRelations
  - System.Data.DataTable.Clear
  - System.Data.DataTable.Clone
  - System.Data.DataTable.ColumnChanged
  - System.Data.DataTable.ColumnChanging
  - System.Data.DataTable.Columns
  - System.Data.DataTable.Compute(System.String,System.String)
  - System.Data.DataTable.Constraints
  - System.Data.DataTable.Copy
  - System.Data.DataTable.CreateDataReader
  - System.Data.DataTable.CreateInstance
  - System.Data.DataTable.DataSet
  - System.Data.DataTable.DefaultView
  - System.Data.DataTable.DisplayExpression
  - System.Data.DataTable.EndInit
  - System.Data.DataTable.EndLoadData
  - System.Data.DataTable.ExtendedProperties
  - System.Data.DataTable.fInitInProgress
  - System.Data.DataTable.GetChanges
  - System.Data.DataTable.GetChanges(System.Data.DataRowState)
  - System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  - System.Data.DataTable.GetErrors
  - System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DataTable.GetRowType
  - System.Data.DataTable.GetSchema
  - System.Data.DataTable.HasErrors
  - System.Data.DataTable.ImportRow(System.Data.DataRow)
  - System.Data.DataTable.Initialized
  - System.Data.DataTable.IsInitialized
  - System.Data.DataTable.Load(System.Data.IDataReader)
  - System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  - System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  - System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  - System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  - System.Data.DataTable.Locale
  - System.Data.DataTable.Merge(System.Data.DataTable)
  - System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  - System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  - System.Data.DataTable.MinimumCapacity
  - System.Data.DataTable.Namespace
  - System.Data.DataTable.NewRow
  - System.Data.DataTable.NewRowArray(System.Int32)
  - System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  - System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  - System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  - System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  - System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  - System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  - System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  - System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  - System.Data.DataTable.ParentRelations
  - System.Data.DataTable.Prefix
  - System.Data.DataTable.PrimaryKey
  - System.Data.DataTable.ReadXml(System.IO.Stream)
  - System.Data.DataTable.ReadXml(System.IO.TextReader)
  - System.Data.DataTable.ReadXml(System.String)
  - System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  - System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  - System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  - System.Data.DataTable.ReadXmlSchema(System.String)
  - System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  - System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  - System.Data.DataTable.RejectChanges
  - System.Data.DataTable.RemotingFormat
  - System.Data.DataTable.Reset
  - System.Data.DataTable.RowChanged
  - System.Data.DataTable.RowChanging
  - System.Data.DataTable.RowDeleted
  - System.Data.DataTable.RowDeleting
  - System.Data.DataTable.Rows
  - System.Data.DataTable.Select
  - System.Data.DataTable.Select(System.String)
  - System.Data.DataTable.Select(System.String,System.String)
  - System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  - System.Data.DataTable.Site
  - System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  - System.Data.DataTable.System#ComponentModel#IListSource#GetList
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - System.Data.DataTable.TableCleared
  - System.Data.DataTable.TableClearing
  - System.Data.DataTable.TableName
  - System.Data.DataTable.TableNewRow
  - System.Data.DataTable.ToString
  - System.Data.DataTable.WriteXml(System.IO.Stream)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter)
  - System.Data.DataTable.WriteXml(System.String)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.String,System.Boolean)
  - System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  - System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  - System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  - System.Data.DataTable.WriteXmlSchema(System.String)
  - System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  - System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  - System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  langs:
  - csharp
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
  type: Class
  summary: "Rappresenta una tabella di dati in memoria."
  remarks: "DataTable è un oggetto centrale nella libreria di ADO.NET. Altri oggetti che utilizzano il DataTable includono <xref:System.Data.DataSet>e <xref:System.Data.DataView>.</xref:System.Data.DataView> </xref:System.Data.DataSet>       Quando si accede a DataTable (oggetti), si noti che sono prevedono la distinzione tra maiuscole e minuscole in modo condizionale. Ad esempio, se una DataTable denominata &quot;mydatatable&quot; e un altro denominato &quot;Mydatatable&quot;, viene considerata una stringa utilizzata per cercare una delle tabelle di distinzione tra maiuscole e minuscole. Tuttavia, se presente &quot;mydatatable&quot; e non &quot;Mydatatable&quot;, la stringa di ricerca viene considerata tra maiuscole e minuscole. Oggetto <xref:System.Data.DataSet>può contenere due oggetti DataTable con lo stesso <xref:System.Data.DataTable.TableName%2A>valore della proprietà ma diversi <xref:System.Data.DataTable.Namespace%2A>i valori delle proprietà.</xref:System.Data.DataTable.Namespace%2A> </xref:System.Data.DataTable.TableName%2A> </xref:System.Data.DataSet> Per ulteriori informazioni sull&quot;utilizzo di oggetti DataTable, vedere [creazione di un oggetto DataTable](~/add/includes/ajax-current-ext-md.md).       Se si sta creando un oggetto DataTable a livello di codice, è innanzitutto necessario definire lo schema aggiungendo <xref:System.Data.DataColumn>oggetti per il <xref:System.Data.DataColumnCollection>(tramite la <xref:System.Data.DataTable.Columns%2A>proprietà).</xref:System.Data.DataTable.Columns%2A> </xref:System.Data.DataColumnCollection> </xref:System.Data.DataColumn> Per ulteriori informazioni sull&quot;aggiunta di <xref:System.Data.DataColumn>degli oggetti, vedere [aggiunta di colonne a un oggetto DataTable](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataColumn>       Per aggiungere righe a un oggetto DataTable, è necessario utilizzare il <xref:System.Data.DataTable.NewRow%2A>per restituire un nuovo <xref:System.Data.DataRow>oggetto.</xref:System.Data.DataRow> </xref:System.Data.DataTable.NewRow%2A> Il <xref:System.Data.DataTable.NewRow%2A>metodo restituisce una riga con lo schema di DataTable, come definito nella tabella <xref:System.Data.DataColumnCollection>.</xref:System.Data.DataColumnCollection> </xref:System.Data.DataTable.NewRow%2A> Il numero massimo di righe che è possibile archiviare un oggetto DataTable è 16.777.216. Per ulteriori informazioni, vedere [aggiunta di dati a un oggetto DataTable](~/add/includes/ajax-current-ext-md.md).       DataTable contiene inoltre una raccolta di <xref:System.Data.Constraint>gli oggetti che possono essere utilizzati per garantire l&quot;integrità dei dati.</xref:System.Data.Constraint> Per ulteriori informazioni, vedere [vincoli DataTable](~/add/includes/ajax-current-ext-md.md).       Esistono molti eventi DataTable che possono essere usati per determinare quando vengono apportate modifiche a una tabella. Questi includono <xref:System.Data.DataTable.RowChanged>, <xref:System.Data.DataTable.RowChanging>, <xref:System.Data.DataTable.RowDeleting>e <xref:System.Data.DataTable.RowDeleted>.</xref:System.Data.DataTable.RowDeleted> </xref:System.Data.DataTable.RowDeleting> </xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.RowChanged> Per ulteriori informazioni sugli eventi che può essere utilizzato con un oggetto DataTable, vedere [gestione di eventi DataTable](~/add/includes/ajax-current-ext-md.md).       Quando viene creata un&quot;istanza di DataTable, alcune delle proprietà di lettura/scrittura sono impostate sui valori iniziali. Per un elenco di questi valori, vedere il <xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName>argomento costruttore.</xref:System.Data.DataTable.%23ctor%2A?displayProperty=fullName>      > [!NOTE] > Il <xref:System.Data.DataSet>e oggetti DataTable ereditano <xref:System.ComponentModel.MarshalByValueComponent>e supportano il <xref:System.Runtime.Serialization.ISerializable>interfaccia per la comunicazione remota di .NET Framework.</xref:System.Runtime.Serialization.ISerializable> </xref:System.ComponentModel.MarshalByValueComponent> </xref:System.Data.DataSet> Si tratta degli unici oggetti ADO.NET che è possibile utilizzare per la comunicazione remota di .NET Framework."
  example:
  - "The following example creates two DataTable objects and one <xref:System.Data.DataRelation> object, and adds the new objects to a <xref:System.Data.DataSet>. The tables are then displayed in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-vb[Classic WebData DataTable Example#1](~/add/codesnippet/visualbasic/t-system.data.datatable_1.vb)]\n [!code-cs[Classic WebData DataTable Example#1](~/add/codesnippet/csharp/t-system.data.datatable_1.cs)]  \n  \n This sample demonstrates how to create a DataTable manually with specific schema definitions:  \n  \n-   Create multiple DataTables and define the initial columns.  \n  \n-   Create the table constraints.  \n  \n-   Insert the values and display the tables.  \n  \n-   Create the expression columns and display the tables.  \n  \n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914).  \n  \n [!code-cs[Classic WebData DataTable Example2#1](~/add/codesnippet/csharp/t-system.data.datatable_2.cs)]\n [!code-vb[Classic WebData DataTable Example2#1](~/add/codesnippet/visualbasic/t-system.data.datatable_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RowChanging")]

      [System.ComponentModel.DefaultProperty("TableName")]

      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataTableEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(false)]

      [System.Xml.Serialization.XmlSchemaProvider("GetDataTableSchema")]

      public class DataTable : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable
  inheritance:
  - System.Object
  - System.ComponentModel.MarshalByValueComponent
  implements:
  - System.ComponentModel.IListSource
  - System.ComponentModel.ISupportInitializeNotification
  - System.Runtime.Serialization.ISerializable
  - System.Xml.Serialization.IXmlSerializable
  inheritedMembers:
  - System.ComponentModel.MarshalByValueComponent.Container
  - System.ComponentModel.MarshalByValueComponent.DesignMode
  - System.ComponentModel.MarshalByValueComponent.Dispose
  - System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)
  - System.ComponentModel.MarshalByValueComponent.Disposed
  - System.ComponentModel.MarshalByValueComponent.Events
  - System.ComponentModel.MarshalByValueComponent.GetService(System.Type)
  platform:
  - net462
- uid: System.Data.DataTable.#ctor
  id: '#ctor'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable()
  nameWithType: DataTable.DataTable()
  fullName: System.Data.DataTable.DataTable()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DataTable&quot;> </xref> classe senza argomenti."
  remarks: "Il costruttore imposta i valori iniziali per tutte le proprietà del <xref:System.Data.DataTable>oggetto.</xref:System.Data.DataTable> Nella tabella seguente mostra le proprietà e valori predefiniti. Quando un&quot;istanza di <xref:System.Data.DataTable>viene creato, le seguenti proprietà vengono impostate sui valori iniziali di lettura/scrittura.</xref:System.Data.DataTable>      | Proprietà | Il valore predefinito |   |--------------|-------------------|   | **CaseSensitive**| Uguale all&quot;elemento padre <xref:System.Data.DataSet>, se appartiene a uno.</xref:System.Data.DataSet> In caso contrario, `false`. |   | **DisplayExpression**| Una stringa vuota (&quot;&quot;) |   | **Locale**| Uguale all&quot;elemento padre <xref:System.Data.DataSet>dell&quot;oggetto <xref:System.Globalization.CultureInfo>(restituito dalla proprietà <xref:System.Data.DataSet.Locale%2A>); se non esiste alcun padre, il valore predefinito è il sistema corrente <xref:System.Globalization.CultureInfo>. |   | **MinimumCapacity**|&50; righe. |       È possibile modificare il valore per una di queste proprietà tramite una chiamata distinta per la proprietà.</xref:System.Globalization.CultureInfo> </xref:System.Data.DataSet.Locale%2A> </xref:System.Globalization.CultureInfo> </xref:System.Data.DataSet>"
  example:
  - "The following example creates a new <xref:System.Data.DataTable> with <xref:System.Data.DataColumn> and <xref:System.Data.DataRow>, and displays it in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-vb[Classic WebData DataTable.DataTable Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._0_1.vb)]\n [!code-cs[Classic WebData DataTable.DataTable Example#1](~/add/codesnippet/csharp/m-system.data.datatable._0_1.cs)]"
  syntax:
    content: public DataTable ();
    parameters: []
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(String)
  nameWithType: DataTable.DataTable(String)
  fullName: System.Data.DataTable.DataTable(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DataTable&quot;> </xref> classe con il nome della tabella specificata."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Data.DataTable> and displays it in a <xref:System.Windows.Forms.DataGridView> control.  \n  \n [!code-cs[Classic WebData DataTable.DataTable1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._21_1.cs)]\n [!code-vb[Classic WebData DataTable.DataTable1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._21_1.vb)]"
  syntax:
    content: public DataTable (string tableName);
    parameters:
    - id: tableName
      type: System.String
      description: "Nome da assegnare alla tabella. Se `tableName` è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o una stringa vuota, viene assegnato un nome predefinito quando aggiunti il <xref href=&quot;System.Data.DataTableCollection&quot;> </xref>."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(SerializationInfo,StreamingContext)
  nameWithType: DataTable.DataTable(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.DataTable(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DataTable&quot;> </xref> classe con il <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> e <xref:System.Runtime.Serialization.StreamingContext>.</xref:System.Runtime.Serialization.StreamingContext>"
  remarks: "Questa implementazione del <xref:System.Data.DataTable>costruttore è necessario per <xref:System.Runtime.Serialization.ISerializable>.</xref:System.Runtime.Serialization.ISerializable> </xref:System.Data.DataTable>"
  syntax:
    content: protected DataTable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "I dati necessari per serializzare o deserializzare un oggetto."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "L&quot;origine e destinazione di un flusso serializzato specificato."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataTable(String,String)
  nameWithType: DataTable.DataTable(String,String)
  fullName: System.Data.DataTable.DataTable(String,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.DataTable&quot;> </xref> classe utilizzando il nome di tabella specificato e lo spazio dei nomi."
  syntax:
    content: public DataTable (string tableName, string tableNamespace);
    parameters:
    - id: tableName
      type: System.String
      description: "Nome da assegnare alla tabella. Se `tableName` è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o una stringa vuota, viene assegnato un nome predefinito quando aggiunti il <xref href=&quot;System.Data.DataTableCollection&quot;> </xref>."
    - id: tableNamespace
      type: System.String
      description: "Lo spazio dei nomi per la rappresentazione XML dei dati archiviati nel <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.AcceptChanges
  id: AcceptChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: AcceptChanges()
  nameWithType: DataTable.AcceptChanges()
  fullName: System.Data.DataTable.AcceptChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Esegue il commit di tutte le modifiche apportate a questa tabella dall&quot;ultima chiamata di AcceptChanges."
  remarks: "Quando viene chiamato AcceptChanges, qualsiasi <xref:System.Data.DataRow>oggetto ancora in modalità di modifica termina correttamente le relative modifiche.</xref:System.Data.DataRow> Il <xref:System.Data.DataRowState>Cambia anche: tutti `Added` e `Modified` righe diventare `Unchanged`, e `Deleted` le righe vengono rimosse.</xref:System.Data.DataRowState>       Il metodo AcceptChanges viene generalmente chiamato su un <xref:System.Data.DataTable>dopo aver tentato di aggiornare il <xref:System.Data.DataSet>utilizzando il <xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName>metodo.</xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=fullName> </xref:System.Data.DataSet> </xref:System.Data.DataTable>"
  example:
  - "The following example tests each table for errors. If the table's errors can be reconciled (by passing it to an undefined function), AcceptChanges is called; otherwise, <xref:System.Data.DataTable.RejectChanges%2A> is called.  \n  \n [!code-vb[Classic WebData DataTable.AcceptChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._22_1.vb)]\n [!code-cs[Classic WebData DataTable.AcceptChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._22_1.cs)]"
  syntax:
    content: public void AcceptChanges ();
    parameters: []
  overload: System.Data.DataTable.AcceptChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.BeginInit
  id: BeginInit
  parent: System.Data.DataTable
  langs:
  - csharp
  name: BeginInit()
  nameWithType: DataTable.BeginInit()
  fullName: System.Data.DataTable.BeginInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Avvia l&quot;inizializzazione di un <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzato in un form o da un altro componente. L&quot;inizializzazione avviene in fase di esecuzione."
  remarks: "L&quot;ambiente di progettazione di Visual Studio .NET utilizza questo metodo per avviare l&quot;inizializzazione di un componente utilizzato in un form o da un altro componente. Il <xref:System.Data.DataTable.EndInit%2A>metodo termina l&quot;inizializzazione.</xref:System.Data.DataTable.EndInit%2A> Utilizzo di BeginInit e <xref:System.Data.DataTable.EndInit%2A>metodi impedisce il controllo venga utilizzato prima che il completamento dell&quot;inizializzazione.</xref:System.Data.DataTable.EndInit%2A>"
  syntax:
    content: public virtual void BeginInit ();
    parameters: []
  overload: System.Data.DataTable.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.BeginLoadData
  id: BeginLoadData
  parent: System.Data.DataTable
  langs:
  - csharp
  name: BeginLoadData()
  nameWithType: DataTable.BeginLoadData()
  fullName: System.Data.DataTable.BeginLoadData()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Disattiva le notifiche, la manutenzione degli indici e vincoli durante il caricamento di dati."
  remarks: "Utilizzare BeginLoadData in combinazione con <xref:System.Data.DataTable.LoadDataRow%2A>e <xref:System.Data.DataTable.EndLoadData%2A>.</xref:System.Data.DataTable.EndLoadData%2A> </xref:System.Data.DataTable.LoadDataRow%2A>"
  syntax:
    content: public void BeginLoadData ();
    parameters: []
  overload: System.Data.DataTable.BeginLoadData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CaseSensitive
  id: CaseSensitive
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
  fullName: System.Data.DataTable.CaseSensitive
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Indica se i confronti di stringhe all&quot;interno della tabella tra maiuscole e minuscole."
  remarks: "La proprietà CaseSensitive interessa i confronti di stringa di ordinamento, ricerca e filtro."
  example:
  - "The following example calls the <xref:System.Data.DataTable.Select%2A> method twice on a <xref:System.Data.DataTable>. The first time, the CaseSensitive property is set to `false`, the second, to `true`.  \n  \n [!code-cs[Classic WebData DataTable.CaseSensitive Example#1](~/add/codesnippet/csharp/p-system.data.datatable._0_1.cs)]\n [!code-vb[Classic WebData DataTable.CaseSensitive Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._0_1.vb)]"
  syntax:
    content: public bool CaseSensitive { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il confronto tra maiuscole e minuscole; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è impostato per l&quot;elemento padre <xref href=&quot;System.Data.DataSet&quot;> </xref> dell&quot;oggetto <xref:System.Data.DataSet.CaseSensitive*>, proprietà o <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se il <xref href=&quot;System.Data.DataTable&quot;> </xref> è stato creato in modo indipendente da un <xref href=&quot;System.Data.DataSet&quot;> </xref>.</xref:System.Data.DataSet.CaseSensitive*>"
  overload: System.Data.DataTable.CaseSensitive*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ChildRelations
  id: ChildRelations
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
  fullName: System.Data.DataTable.ChildRelations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene la raccolta di relazioni figlio per questo <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: 'Oggetto <xref:System.Data.DataRelation>definisce la relazione tra due tabelle.</xref:System.Data.DataRelation> In genere, due tabelle sono collegate tramite un unico campo che contiene gli stessi dati. Ad esempio, una tabella che contiene i dati degli indirizzi potrebbe essere un singolo campo contenente i codici che rappresentano i paesi/aree geografiche. Una seconda tabella che contiene i dati di paese/area geografica avrà un unico campo che contiene il codice che identifica il paese/regione ed è il codice che viene inserito il campo corrispondente nella prima tabella. Oggetto <xref:System.Data.DataRelation>, quindi contiene almeno quattro tipi di informazioni: (1) il nome della prima tabella, (2) il nome della colonna nella prima tabella, (3) il nome della seconda tabella e (4) il nome della colonna nella seconda tabella.</xref:System.Data.DataRelation>'
  example:
  - "The following example uses the ChildRelations property to return each child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. Each relation is then used as an argument in the <xref:System.Data.DataRow.GetChildRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows. The value of each column in the row is then printed.  \n  \n [!code-vb[Classic WebData DataTable.ChildRelations Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._13_1.vb)]\n [!code-cs[Classic WebData DataTable.ChildRelations Example#1](~/add/codesnippet/csharp/p-system.data.datatable._13_1.cs)]"
  syntax:
    content: public System.Data.DataRelationCollection ChildRelations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "Oggetto <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref> che contiene le relazioni figlio per la tabella. Viene restituita una raccolta vuota se non <xref href=&quot;System.Data.DataRelation&quot;> </xref> presenti oggetti."
  overload: System.Data.DataTable.ChildRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Clear
  id: Clear
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Clear()
  nameWithType: DataTable.Clear()
  fullName: System.Data.DataTable.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Cancella il <xref href=&quot;System.Data.DataTable&quot;> </xref> di tutti i dati."
  remarks: "Tutte le righe in tutte le tabelle vengono rimossi. Se la tabella include le eventuali relazioni figlio che fa sì che le righe figlio di essere isolati (orfani), viene generata un&quot;eccezione.       Se <xref:System.Data.DataSet>è associato a un oggetto <xref:System.Xml.XmlDataDocument>la chiamata <xref:System.Data.DataSet.Clear%2A?displayProperty=fullName>o deselezionare genera <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.DataSet.Clear%2A?displayProperty=fullName> </xref:System.Xml.XmlDataDocument> </xref:System.Data.DataSet> Per evitare questa situazione, scorrere ogni tabella rimuovendo una riga alla volta. Quando si utilizza <xref:System.Data.DataTable.NewRow%2A>per creare nuove righe, le righe devono essere elaborate prima di chiamare Clear.</xref:System.Data.DataTable.NewRow%2A>"
  example:
  - "The following example clears the table of all data.  \n  \n [!code-cs[Classic WebData DataTable.Clear Example#1](~/add/codesnippet/csharp/m-system.data.datatable._20_1.cs)]\n [!code-vb[Classic WebData DataTable.Clear Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._20_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.DataTable.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Clone
  id: Clone
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Clone()
  nameWithType: DataTable.Clone()
  fullName: System.Data.DataTable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Duplica la struttura del <xref href=&quot;System.Data.DataTable&quot;> </xref>, inclusi tutti <xref href=&quot;System.Data.DataTable&quot;> </xref> schemi e i vincoli."
  remarks: "Se queste classi sono state derivate, il clone sarà inoltre delle stesse classi derivate.       Crea un nuovo clone <xref:System.Data.DataTable>con la stessa struttura originale <xref:System.Data.DataTable>, ma non la copia di tutti i dati (il nuovo <xref:System.Data.DataTable>non conterrà alcuna `DataRows`).</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataTable> Per copiare la struttura e i dati in un nuovo <xref:System.Data.DataTable>utilizzare <xref:System.Data.DataTable.Copy%2A>.</xref:System.Data.DataTable.Copy%2A> </xref:System.Data.DataTable>"
  example:
  - "The following sample demonstrates how to update the structure and constraints of the destination table after you execute DataTable.Clone. The ClonedDataTable class will return a destination table and includes all the updating events. After the clone, structure changes in the source table won’t be reflected in the destination table. Specifically, this sample will:  \n  \n-   Update the changes of the columns in source table.  \n  \n-   Update the changes of the UniqueConstraint in source table.  \n  \n-   Update the changes of the ForeignKeyConstraint in source table.  \n  \n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable).  \n  \n```  \nusing System;  \nusing System.Linq;  \nusing System.Data;  \nusing System.ComponentModel;  \n  \nclass Program {  \n   static void Main(string[] args) {  \n      DataTable courses = NewCourseDataTable();  \n      Console.WriteLine(\"This is the source table:\");  \n      WriteDataTable(courses);  \n  \n      ClonedDataTable clonedResult = new ClonedDataTable(courses);  \n      DataTable clonedCourses = clonedResult.DestinationTable;  \n      Console.WriteLine(\"This is the destination table:\");  \n      WriteDataTable(clonedCourses);  \n  \n      // Add the events of updating column collection into the source table.  \n      clonedResult.UpdateAddedColumn();  \n      clonedResult.UpdateDeletedColumn();  \n      // Add a DataColumn in source table.  \n      DataColumn columnCreidts = new DataColumn(\"Credits\", typeof(Int32));  \n      courses.Columns.Add(columnCreidts);  \n      Console.WriteLine(\"After add a column in source table, it's the result in the destination:\");  \n      WriteDataTable(clonedCourses);  \n  \n      // Add the event of updating UniqueConstraint into the source table.  \n      clonedResult.UpdateUniqueConstraint();  \n  \n      // Add the unique constraint in source table.  \n      UniqueConstraint uniqueConstraint = new UniqueConstraint(courses.Columns[\"CourseId\"]);  \n      courses.Constraints.Add(uniqueConstraint);  \n  \n      Console.WriteLine(@\"If we add the unique constraint in source table and then insert the duplicate   \nrows into the destination table, we will get the following error:\");  \n      InsertDuplicateData(clonedCourses);  \n      Console.WriteLine();  \n  \n      // Add the event of updating ForeignKeyConstraint into the source table.  \n      clonedResult.UpdateForeignKeyConstraint();  \n  \n      // Add the ForeignKeyConstraint into the source table.  \n      DataTable deparments = NewDeparmentDataTable();  \n      DataSet dataset = new DataSet();  \n  \n      dataset.Tables.Add(courses);  \n      dataset.Tables.Add(clonedCourses);  \n      dataset.Tables.Add(deparments);  \n  \n      ForeignKeyConstraint foreignKey = new ForeignKeyConstraint(deparments.Columns[\"DepartmentId\"], courses.Columns[\"DepartmentId\"]);  \n      courses.Constraints.Add(foreignKey);  \n  \n      Console.WriteLine(@\"If we add the foreign key constraint in source table and then insert a row   \nwithout the parent  into the destination table, we will get the following error:\");  \n      InsertNoParentRow(clonedCourses);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Please press any key to exit...\");  \n      Console.ReadKey();  \n   }  \n  \n   static private DataTable NewCourseDataTable() {  \n      DataTable newTable = new DataTable();  \n  \n      DataColumn[] columns ={   \n                                      new DataColumn(\"CourseId\", typeof(String)),  \n                                      new DataColumn(\"CourseName\",typeof(String)),                                        \n                                      new DataColumn(\"DepartmentId\", typeof(Int32))  \n                                  };  \n  \n      newTable.Columns.AddRange(columns);  \n  \n      newTable.Rows.Add(\"C1045\", \"Calculus\", 7);  \n      newTable.Rows.Add(\"C1061\", \"Physics\", 1);  \n      newTable.Rows.Add(\"C2021\", \"Composition\", 2);  \n      newTable.Rows.Add(\"C2042\", \"Literature\", 2);  \n  \n      return newTable;  \n   }  \n  \n   static private DataTable NewDeparmentDataTable() {  \n      DataTable newTable = new DataTable();  \n  \n      DataColumn[] columns ={   \n                                      new DataColumn(\"DepartmentId\", typeof(Int32)),  \n                                      new DataColumn(\"Name\",typeof(String)),  \n                                  };  \n  \n      newTable.Columns.AddRange(columns);  \n  \n      newTable.Rows.Add(1, \"Engineering\");  \n      newTable.Rows.Add(2, \"English\");  \n      newTable.Rows.Add(4, \"Economics\");  \n      newTable.Rows.Add(7, \"Mathematics\");  \n  \n      return newTable;  \n   }  \n  \n   static private void WriteDataTable(DataTable table) {  \n      if (table == null)  \n         return;  \n  \n      foreach (DataColumn column in table.Columns) {  \n         Console.Write(\"{0,-15}\", column.ColumnName);  \n      }  \n      Console.WriteLine();  \n  \n      foreach (DataRow row in table.Rows) {  \n         for (int i = 0; i < table.Columns.Count; i++)  \n            Console.Write(\"{0,-15}\", row[i].ToString());  \n         Console.WriteLine();  \n      }  \n  \n      Console.WriteLine();  \n   }  \n  \n   static private void InsertDuplicateData(DataTable table) {  \n      try {  \n         table.Rows.Add(\"C1045\", \"Calculus\", 7);  \n         table.Rows.Add(\"C1045\", \"Calculus\", 7);  \n      } catch (Exception e) {  \n         Console.WriteLine(\"\\\"\" + e.Message + \"\\\"\");  \n      }  \n   }  \n  \n   private static void InsertNoParentRow(DataTable table) {  \n      try {  \n         table.Rows.Add(\"C1061\", \"Physics\", 11);  \n      } catch (Exception e) {  \n         Console.WriteLine(\"\\\"\" + e.Message + \"\\\"\");  \n      }  \n   }  \n}  \n  \npublic class ClonedDataTable {  \n   private DataTable sourceTable;  \n   private DataTable destinationTable;  \n  \n   public ClonedDataTable(DataTable source) {  \n      sourceTable = source;  \n      // set the cloned result  \n      destinationTable = sourceTable.Clone();  \n   }  \n  \n   public void UpdateAddedColumn() {  \n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnAdded);  \n   }  \n  \n   public void UpdateDeletedColumn() {  \n      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnDeleted);  \n   }  \n  \n   public void UpdateUniqueConstraint() {  \n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(UniqueConstraint_Changed);  \n   }  \n  \n   public void UpdateForeignKeyConstraint() {  \n      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(ForeignKeyConstraint_Changed);  \n   }  \n  \n   // After the source table adds a column, the method will add the same column in the destination table.  \n   void ColumnAdded(object sender, System.ComponentModel.CollectionChangeEventArgs e) {  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn column = e.Element as DataColumn;  \n  \n         if (column != null) {  \n            DataColumn newColumn = new DataColumn(column.ColumnName, column.DataType, column.Expression, column.ColumnMapping);  \n  \n            if (!destinationTable.Columns.Contains(newColumn.ColumnName))  \n               destinationTable.Columns.Add(newColumn);  \n         }  \n      }  \n   }  \n  \n   // After the source table deletes a column, the method will delete the same column in the destination table.  \n   void ColumnDeleted(object sender, CollectionChangeEventArgs e) {  \n      if (e.Action == CollectionChangeAction.Remove) {  \n         DataColumn column = e.Element as DataColumn;  \n  \n         if (column != null)  \n            if (destinationTable.Columns.Contains(column.ColumnName))  \n               destinationTable.Columns.Remove(column.ColumnName);  \n      }  \n   }  \n  \n   // After the source table changes the UniqueConstraint, this method changes the same UniqueConstraint in destination table.        \n   void UniqueConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \n      UniqueConstraint constraint = e.Element as UniqueConstraint;  \n  \n      if (constraint == null)  \n         return;  \n  \n      String constraintName = constraint.ConstraintName;  \n  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \n         Boolean isPrimaryKey = constraint.IsPrimaryKey;  \n  \n         // Get the columns used in new constraint from the destiantion table.  \n         for (Int32 i = 0; i < constraint.Columns.Count(); i++) {  \n            String columnName = constraint.Columns[i].ColumnName;  \n  \n            if (destinationTable.Columns.Contains(columnName))  \n               columns[i] = destinationTable.Columns[columnName];  \n            else  \n               return;  \n         }  \n  \n         UniqueConstraint newConstraint = new UniqueConstraint(constraintName, columns, isPrimaryKey);  \n  \n         if (!destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Add(newConstraint);  \n  \n      } else if (e.Action == CollectionChangeAction.Remove)  \n         if (destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Remove(constraintName);  \n   }  \n  \n   // After the source table changes the ForeignKeyConstraint, this method changes    \n   // the same ForeignKeyConstraint in the destination table.  \n   void ForeignKeyConstraint_Changed(object sender, CollectionChangeEventArgs e) {  \n      ForeignKeyConstraint constraint = e.Element as ForeignKeyConstraint;  \n  \n      if (constraint == null)  \n         return;  \n  \n      // If the source and destination are not in the same DataSet, don't change the ForeignKeyConstraint.  \n      if (sourceTable.DataSet != destinationTable.DataSet)  \n         return;  \n  \n      String constraintName = constraint.ConstraintName;  \n  \n      if (e.Action == CollectionChangeAction.Add) {  \n         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  \n         DataColumn[] parentColumns = constraint.RelatedColumns;  \n  \n         // Get the columns used in new constraint from the destination table.  \n         for (int i = 0; i < constraint.Columns.Count(); i++) {  \n            String columnName = constraint.Columns[i].ColumnName;  \n  \n            if (destinationTable.Columns.Contains(columnName))  \n               columns[i] = destinationTable.Columns[columnName];  \n            else  \n               return;  \n         }  \n  \n         ForeignKeyConstraint newConstraint = new ForeignKeyConstraint(constraintName, parentColumns, columns);  \n         newConstraint.AcceptRejectRule = constraint.AcceptRejectRule;  \n         newConstraint.DeleteRule = constraint.DeleteRule;  \n         newConstraint.UpdateRule = constraint.UpdateRule;  \n  \n         if (!destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Add(newConstraint);  \n      } else if (e.Action == CollectionChangeAction.Remove)  \n         if (destinationTable.Constraints.Contains(constraintName))  \n            destinationTable.Constraints.Remove(constraintName);  \n   }  \n  \n   // return the destination table.  \n   public DataTable DestinationTable {  \n      get { return destinationTable; }  \n   }  \n}  \n```  \n  \n This sample shows how to modify data in a DataTable and update the data source.  \n  \n First, create a database:  \n  \n```  \nUSE [master]  \nGO  \n  \nCREATE DATABASE [MySchool]   \n  \nGO  \n  \nUSE [MySchool]  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,  \n[Year] [smallint] NOT NULL,  \n[Title] [nvarchar](100) NOT NULL,  \n[Credits] [int] NOT NULL,  \n[DepartmentID] [int] NOT NULL,  \n CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   \n(  \n[CourseID] ASC,  \n[Year] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \n[Name] [nvarchar](50) NOT NULL,  \n[Budget] [money] NOT NULL,  \n[StartDate] [datetime] NOT NULL,  \n[Administrator] [int] NULL,  \n CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   \n(  \n[DepartmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  \n  \nSET IDENTITY_INSERT [dbo].[Department] ON   \n  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  \nSET IDENTITY_INSERT [dbo].[Department] OFF  \n  \nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  \nREFERENCES [dbo].[Department] ([DepartmentID])  \nGO  \nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  \nGO  \n```  \n  \n You can now compile and run the sample. [How to modify data in DataTable and update to the data source](http://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4) has Visual Basic and C# projects of this sample.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \n  \nclass Program {  \n   static void Main(string[] args) {  \n  \n   string MySchoolConnectionString = \"Data Source=(local);Initial Catalog=MySchool;Integrated Security=True\";  \n  \n      // Get Data  \n      String selectString =  \n       @\"Select [CourseID],[Year],[Title],[Credits],[DepartmentID] From [dbo].[Course];  \n               Select [DepartmentID],[Name],[Budget],[StartDate],[Administrator] From [dbo].[Department] \";  \n  \n      DataSet dataSet = new DataSet();  \n      DataTable course = dataSet.Tables.Add(\"Course\");  \n      DataTable department = dataSet.Tables.Add(\"Department\");  \n  \n      Console.WriteLine(\"Get data from database:\");  \n      GetDataTables(MySchoolConnectionString, selectString, dataSet, course, department);  \n      Console.WriteLine();  \n  \n      // Use DataTable Edits to edit the data  \n      String updateString =  \n              @\"Update [dbo].[Course] Set [Credits]=@Credits Where [CourseID]=@CourseID;\";  \n  \n      course.ColumnChanged += OnColumnChanged;  \n  \n      // Set the Credits of first row is negative value, and set the Credits of second row is plus.  \n      ChangeCredits(course, course.Rows[0], -1);  \n      ChangeCredits(course, course.Rows[1], 11);  \n  \n      UpdateDataTables(MySchoolConnectionString, updateString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"),  \n          new SqlParameter(\"@Credits\", SqlDbType.Int, 4, \"Credits\"));  \n      Console.WriteLine(\"Only the Credits of second row is changed.\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n  \n      // Delete and Remove from DataTable  \n      // Create the foreign key constraint, and set the DeleteRule with Cascade.  \n      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint(\"CourseDepartFK\", department.Columns[\"DepartmentID\"], course.Columns[\"DepartmentID\"]);  \n      courseDepartFK.DeleteRule = Rule.Cascade;  \n      courseDepartFK.UpdateRule = Rule.Cascade;  \n      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  \n      course.Constraints.Add(courseDepartFK);  \n  \n      String deleteString = @\"Delete From [dbo].[Course] Where [CourseID]=@CourseID;\";  \n  \n      department.Rows[0].Delete();  \n      Console.WriteLine(\"If One row in Department table is deleted, the related rows in Course table will also be deleted.\");  \n      Console.WriteLine(\"Department DataTable:\");  \n      ShowDataTable(department);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Course DataTable:\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n      // Update the delete operation  \n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"));  \n      Console.WriteLine(\"After delete operation:\");  \n      Console.WriteLine(\"Course DataTable:\");  \n      ShowDataTable(course);  \n      Console.WriteLine();  \n  \n      course.Rows.RemoveAt(0);  \n      Console.WriteLine(\"Now we remove one row from Course:\");  \n      ShowDataTable(course);  \n      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, \"Course\",  \n          new SqlParameter(\"@CourseID\", SqlDbType.NVarChar, 10, \"CourseID\"));  \n   }  \n  \n   // Use SqlDataAdapter to get data.  \n   private static void GetDataTables(String connectionString, String selectString,  \n       DataSet dataSet, params DataTable[] tables) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.SelectCommand = new SqlCommand(selectString);  \n         adapter.SelectCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Fill(0, 0, tables);  \n  \n         foreach (DataTable table in dataSet.Tables) {  \n            Console.WriteLine(\"Data in {0}:\", table.TableName);  \n            ShowDataTable(table);  \n            Console.WriteLine();  \n         }  \n      }  \n   }  \n  \n   // Use SqlDataAdapter to update the updata operation.  \n   private static void UpdateDataTables(String connectionString, String updateString,  \n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.UpdateCommand = new SqlCommand(updateString);  \n         adapter.UpdateCommand.Parameters.AddRange(parameters);  \n         adapter.UpdateCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Update(dataSet, tableName);  \n      }  \n   }  \n  \n   // Use SqlDataAdapter to update delete operation.  \n   private static void DeleteDataTables(String connectionString, String deleteString,  \n       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  \n      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  \n         adapter.DeleteCommand = new SqlCommand(deleteString);  \n         adapter.DeleteCommand.Parameters.AddRange(parameters);  \n         adapter.DeleteCommand.Connection = new SqlConnection(connectionString);  \n  \n         adapter.Update(dataSet, tableName);  \n      }  \n   }  \n  \n   // Use DataTable Edits to modify the data.  \n   private static void ChangeCredits(DataTable table, DataRow row, Int32 credits) {  \n      row.BeginEdit();  \n      Console.WriteLine(\"We change row {0}\", table.Rows.IndexOf(row));  \n      row[\"Credits\"] = credits;  \n      row.EndEdit();  \n   }  \n  \n   // The method will be invoked when the value in DataTable is changed.  \n   private static void OnColumnChanged(Object sender, DataColumnChangeEventArgs args) {  \n      Int32 credits = 0;  \n      // If Credits is changed and the value is negative, we'll cancel the edit.  \n      if ((args.Column.ColumnName == \"Credits\") &&  \n          (!Int32.TryParse(args.ProposedValue.ToString(), out credits) || credits < 0)) {  \n         Console.WriteLine(\"The value of Credits is invalid. Edit canceled.\");  \n         args.Row.CancelEdit();  \n      }  \n   }  \n  \n   // Display the column and value of DataTable.  \n   private static void ShowDataTable(DataTable table) {  \n      foreach (DataColumn col in table.Columns) {  \n         Console.Write(\"{0,-14}\", col.ColumnName);  \n      }  \n      Console.WriteLine(\"{0,-14}\", \"RowState\");  \n  \n      foreach (DataRow row in table.Rows) {  \n         if (row.RowState == DataRowState.Deleted) {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime)))  \n                  Console.Write(\"{0,-14:d}\", row[col, DataRowVersion.Original]);  \n               else if (col.DataType.Equals(typeof(Decimal)))  \n                  Console.Write(\"{0,-14:C}\", row[col, DataRowVersion.Original]);  \n               else  \n                  Console.Write(\"{0,-14}\", row[col, DataRowVersion.Original]);  \n            }  \n         }  \n         else {  \n            foreach (DataColumn col in table.Columns) {  \n               if (col.DataType.Equals(typeof(DateTime)))  \n                  Console.Write(\"{0,-14:d}\", row[col]);  \n               else if (col.DataType.Equals(typeof(Decimal)))  \n                  Console.Write(\"{0,-14:C}\", row[col]);  \n               else  \n                  Console.Write(\"{0,-14}\", row[col]);  \n            }  \n         }  \n         Console.WriteLine(\"{0,-14}\", row.RowState);  \n      }  \n   }  \n}  \n```"
  syntax:
    content: public virtual System.Data.DataTable Clone ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "Un nuovo <xref href=&quot;System.Data.DataTable&quot;> </xref> con lo stesso schema corrente <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ColumnChanged
  id: ColumnChanged
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ColumnChanged
  nameWithType: DataTable.ColumnChanged
  fullName: System.Data.DataTable.ColumnChanged
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica dopo che è stato modificato un valore per l&quot;oggetto specificato <xref href=&quot;System.Data.DataColumn&quot;> </xref> in un <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  remarks: "Per ulteriori informazioni, vedere [gestione di eventi DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.ColumnChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._4_1.vb)]
     [!code-cs[Classic WebData DataTable.ColumnChanged Example#1](~/add/codesnippet/csharp/e-system.data.datatable._4_1.cs)]
  syntax:
    content: public event System.Data.DataColumnChangeEventHandler ColumnChanged;
    return:
      type: System.Data.DataColumnChangeEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ColumnChanging
  id: ColumnChanging
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ColumnChanging
  nameWithType: DataTable.ColumnChanging
  fullName: System.Data.DataTable.ColumnChanging
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica quando viene modificato un valore per l&quot;oggetto specificato <xref href=&quot;System.Data.DataColumn&quot;> </xref> in un <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  remarks: "Per ulteriori informazioni, vedere [gestione di eventi DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.ColumnChanging Example#1](~/add/codesnippet/csharp/e-system.data.datatable._5_1.cs)]
     [!code-vb[Classic WebData DataTable.ColumnChanging Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._5_1.vb)]
  syntax:
    content: public event System.Data.DataColumnChangeEventHandler ColumnChanging;
    return:
      type: System.Data.DataColumnChangeEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Columns
  id: Columns
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Columns
  nameWithType: DataTable.Columns
  fullName: System.Data.DataTable.Columns
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene la raccolta di colonne che appartengono a questa tabella."
  remarks: "Il <xref:System.Data.DataColumnCollection>determina lo schema di una tabella definendo il tipo di dati di ogni colonna.</xref:System.Data.DataColumnCollection>"
  example:
  - "The following example prints each value of each row in a table using the Columns property.  \n  \n [!code-vb[Classic WebData DataTable.Columns Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._12_1.vb)]\n [!code-cs[Classic WebData DataTable.Columns Example#1](~/add/codesnippet/csharp/p-system.data.datatable._12_1.cs)]"
  syntax:
    content: public System.Data.DataColumnCollection Columns { get; }
    return:
      type: System.Data.DataColumnCollection
      description: "Oggetto <xref href=&quot;System.Data.DataColumnCollection&quot;> </xref> che contiene la raccolta di <xref href=&quot;System.Data.DataColumn&quot;> </xref> oggetti per la tabella. Viene restituita una raccolta vuota se non <xref href=&quot;System.Data.DataColumn&quot;> </xref> presenti oggetti."
  overload: System.Data.DataTable.Columns*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Compute(System.String,System.String)
  id: Compute(System.String,System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Compute(String,String)
  nameWithType: DataTable.Compute(String,String)
  fullName: System.Data.DataTable.Compute(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Calcola l&quot;espressione specificata alle righe che soddisfano i criteri di filtro corrente."
  remarks: "Il `expression` parametro richiede una funzione di aggregazione. Ad esempio, le operazioni seguenti sono un&quot;espressione legale: `Count(Quantity)` ma l&quot;espressione non è: `Sum (Quantity * UnitPrice)` se è necessario eseguire un&quot;operazione su due o più colonne, è necessario creare un <xref:System.Data.DataColumn>, impostare il relativo <xref:System.Data.DataColumn.Expression%2A>proprietà a un&quot;espressione appropriata e utilizzare un&quot;espressione di aggregazione per la colonna risulta.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> In questo caso, dato un <xref:System.Data.DataColumn>con il nome &quot;totale&quot; e <xref:System.Data.DataColumn.Expression%2A>impostata a questo: `&quot;Quantity * UnitPrice&quot;` l&quot;argomento dell&quot;espressione per il metodo di calcolo lo sarebbe quindi: `Sum(total)` il secondo parametro, `filter`, determina le righe vengono utilizzate nell&quot;espressione.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> Ad esempio, se la tabella contiene una colonna Data denominata &quot;colDate&quot;, è possibile limitare le righe con l&quot;espressione seguente: `colDate > 1/1/99 AND colDate < 17/1/99` per le regole sulla creazione di espressioni per entrambi i parametri, vedere il <xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName>proprietà.</xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName>"
  example:
  - "The following example sums the values of a column named \"Total\", for the salesperson whose identification number is five.  \n  \n [!code-cs[Classic WebData DataTable.Compute Example#1](~/add/codesnippet/csharp/m-system.data.datatable._24_1.cs)]\n [!code-vb[Classic WebData DataTable.Compute Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._24_1.vb)]"
  syntax:
    content: public object Compute (string expression, string filter);
    parameters:
    - id: expression
      type: System.String
      description: "Espressione da calcolare."
    - id: filter
      type: System.String
      description: "Il filtro per limitare le righe che restituiscono nell&quot;espressione."
    return:
      type: System.Object
      description: "Un <xref:System.Object>, impostare il risultato del calcolo.</xref:System.Object> Se l&quot;espressione restituisce null, il valore restituito sarà <xref href=&quot;System.DBNull.Value&quot;> </xref>."
  overload: System.Data.DataTable.Compute*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Constraints
  id: Constraints
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Constraints
  nameWithType: DataTable.Constraints
  fullName: System.Data.DataTable.Constraints
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene la raccolta di vincoli mantenuti da questa tabella."
  remarks: "Oggetto <xref:System.Data.ForeignKeyConstraint>Limita l&quot;azione eseguita quando un valore in una colonna (o le colonne) viene eliminato o aggiornato.</xref:System.Data.ForeignKeyConstraint> Tale vincolo deve essere usato con colonne chiave primaria. In una relazione padre/figlio tra due tabelle, l&quot;eliminazione di un valore dalla tabella padre può influenzare le righe figlio in uno dei modi seguenti.      -L&quot;elemento figlio è anche possibile di righe eliminate (un&quot;operazione di propagazione).      -I valori della colonna figlio (o delle colonne) possono essere impostati su valori null.      -I valori della colonna figlio (o delle colonne) possono essere impostati sui valori predefiniti.      -Un&quot;eccezione può essere generata.       Oggetto <xref:System.Data.UniqueConstraint>diventa attiva durante il tentativo di impostare un valore di una chiave primaria su un valore non univoco.</xref:System.Data.UniqueConstraint>"
  example:
  - "The following example adds a <xref:System.Data.ForeignKeyConstraint> to the collection of constraints.  \n  \n [!code-vb[Classic WebData DataTable.Constraints Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._3_1.vb)]\n [!code-cs[Classic WebData DataTable.Constraints Example#1](~/add/codesnippet/csharp/p-system.data.datatable._3_1.cs)]"
  syntax:
    content: public System.Data.ConstraintCollection Constraints { get; }
    return:
      type: System.Data.ConstraintCollection
      description: "Oggetto <xref href=&quot;System.Data.ConstraintCollection&quot;> </xref> che contiene la raccolta di <xref href=&quot;System.Data.Constraint&quot;> </xref> oggetti per la tabella. Viene restituita una raccolta vuota se non <xref href=&quot;System.Data.Constraint&quot;> </xref> presenti oggetti."
  overload: System.Data.DataTable.Constraints*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Copy
  id: Copy
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Copy()
  nameWithType: DataTable.Copy()
  fullName: System.Data.DataTable.Copy()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copia la struttura e i dati per questa <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: ''
  example:
  - "The following example uses the Copy method to create a copy of the original <xref:System.Data.DataTable>. The namespace name is not retained if it is inherited from a parent <xref:System.Data.DataTable> or <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataTable.Copy Example#1](~/add/codesnippet/csharp/m-system.data.datatable._5_1.cs)]\n [!code-vb[Classic WebData DataTable.Copy Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._5_1.vb)]"
  syntax:
    content: public System.Data.DataTable Copy ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "Un nuovo <xref href=&quot;System.Data.DataTable&quot;> </xref> con la stessa struttura (schemi di tabella e i vincoli) e dati dell&quot;oggetto corrente <xref href=&quot;System.Data.DataTable&quot;> </xref>.       Se queste classi sono state derivate, la copia verrà inoltre essere delle stesse classi derivate.       Crea una nuova copia <xref href=&quot;System.Data.DataTable&quot;> </xref> con la stessa struttura e i dati come originale <xref href=&quot;System.Data.DataTable&quot;> </xref>. Copiare la struttura di un nuovo <xref href=&quot;System.Data.DataTable&quot;> </xref>, ma non i dati, utilizzare <xref:System.Data.DataTable.Clone*>.</xref:System.Data.DataTable.Clone*>"
  overload: System.Data.DataTable.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CreateDataReader
  id: CreateDataReader
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CreateDataReader()
  nameWithType: DataTable.CreateDataReader()
  fullName: System.Data.DataTable.CreateDataReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Restituisce un <xref href=&quot;System.Data.DataTableReader&quot;> </xref> corrispondente ai dati all&quot;interno di questa <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: ''
  example:
  - "The following console application creates a <xref:System.Data.DataTable> instance. The example then passes the filled <xref:System.Data.DataTable>to a procedure that calls the CreateDataReader method, which iterates through the results contained within the <xref:System.Data.DataTableReader>.  \n  \n [!code-vb[DataWorks DataTable.CreateDataReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._9_1.vb)]\n [!code-cs[DataWorks DataTable.CreateDataReader#1](~/add/codesnippet/csharp/m-system.data.datatable._9_1.cs)]  \n  \n The example displays the following output in the console window:  \n  \n `1 Mary`  \n  \n `2 Andy`  \n  \n `3 Peter`  \n  \n `4 Russ`"
  syntax:
    content: public System.Data.DataTableReader CreateDataReader ();
    parameters: []
    return:
      type: System.Data.DataTableReader
      description: "Oggetto <xref href=&quot;System.Data.DataTableReader&quot;> </xref> contenente un set di risultati, corrispondente all&quot;origine <xref href=&quot;System.Data.DataTable&quot;> </xref> istanza."
  overload: System.Data.DataTable.CreateDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.CreateInstance
  id: CreateInstance
  parent: System.Data.DataTable
  langs:
  - csharp
  name: CreateInstance()
  nameWithType: DataTable.CreateInstance()
  fullName: System.Data.DataTable.CreateInstance()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Crea una nuova istanza della <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: protected virtual System.Data.DataTable CreateInstance ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "La nuova espressione."
  overload: System.Data.DataTable.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DataSet
  id: DataSet
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DataSet
  nameWithType: DataTable.DataSet
  fullName: System.Data.DataTable.DataSet
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene il <xref href=&quot;System.Data.DataSet&quot;> </xref> a cui appartiene questa tabella."
  remarks: "Se un controllo è associato a dati per un <xref:System.Data.DataTable>, e la tabella appartiene a un <xref:System.Data.DataSet>, è possibile ottenere il <xref:System.Data.DataSet>tramite questa proprietà.</xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataTable>"
  example:
  - "The following example returns the parent <xref:System.Data.DataSet> of a given table through the DataSet property.  \n  \n [!code-vb[Classic WebData DataTable.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._10_1.vb)]\n [!code-cs[Classic WebData DataTable.DataSet Example#1](~/add/codesnippet/csharp/p-system.data.datatable._10_1.cs)]"
  syntax:
    content: public System.Data.DataSet DataSet { get; }
    return:
      type: System.Data.DataSet
      description: "Il <xref href=&quot;System.Data.DataSet&quot;> </xref> a cui appartiene questa tabella."
  overload: System.Data.DataTable.DataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DefaultView
  id: DefaultView
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DefaultView
  nameWithType: DataTable.DefaultView
  fullName: System.Data.DataTable.DefaultView
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una visualizzazione personalizzata della tabella che può includere una visualizzazione filtrata, o una posizione del cursore."
  remarks: "La proprietà di visualizzazione predefinita restituisce un <xref:System.Data.DataView>è possibile utilizzare per ordinare, filtrare e cercare un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataView>"
  example:
  - "The following example sets a property of the <xref:System.Data.DataTable> object's <xref:System.Data.DataView> through the DefaultView property. The example also shows the binding of a <xref:System.Windows.Forms.DataGridView> control to a <xref:System.Data.DataTable> named \"Suppliers\" that includes a column named \"CompanyName.\"  \n  \n [!code-cs[Classic WebData DataTable.DefaultView Example#1](~/add/codesnippet/csharp/p-system.data.datatable._11_1.cs)]\n [!code-vb[Classic WebData DataTable.DefaultView Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._11_1.vb)]"
  syntax:
    content: public System.Data.DataView DefaultView { get; }
    return:
      type: System.Data.DataView
      description: "Il <xref href=&quot;System.Data.DataView&quot;> </xref> associato il <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.DefaultView*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.DisplayExpression
  id: DisplayExpression
  parent: System.Data.DataTable
  langs:
  - csharp
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
  fullName: System.Data.DataTable.DisplayExpression
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta l&quot;espressione che restituisce un valore utilizzato per rappresentare questa tabella nell&quot;interfaccia utente. Il <xref uid=&quot;langword_csharp_DisplayExpression&quot; name=&quot;DisplayExpression&quot; href=&quot;&quot;> </xref> proprietà consente di visualizzare il nome della tabella in un&quot;interfaccia utente."
  syntax:
    content: public string DisplayExpression { get; set; }
    return:
      type: System.String
      description: "Stringa di visualizzazione."
  overload: System.Data.DataTable.DisplayExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.EndInit
  id: EndInit
  parent: System.Data.DataTable
  langs:
  - csharp
  name: EndInit()
  nameWithType: DataTable.EndInit()
  fullName: System.Data.DataTable.EndInit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Termina l&quot;inizializzazione di un <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzato in un form o da un altro componente. L&quot;inizializzazione avviene in fase di esecuzione."
  remarks: "L&quot;ambiente di progettazione di Visual Studio .NET utilizza questo metodo per terminare l&quot;inizializzazione di un componente utilizzato in un form o da un altro componente. Il <xref:System.Data.DataTable.BeginInit%2A>metodo avvia l&quot;inizializzazione.</xref:System.Data.DataTable.BeginInit%2A> Utilizzo di <xref:System.Data.DataTable.BeginInit%2A>EndInit metodi e impedisce il controllo venga utilizzato prima che il completamento dell&quot;inizializzazione.</xref:System.Data.DataTable.BeginInit%2A>"
  syntax:
    content: public virtual void EndInit ();
    parameters: []
  overload: System.Data.DataTable.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.EndLoadData
  id: EndLoadData
  parent: System.Data.DataTable
  langs:
  - csharp
  name: EndLoadData()
  nameWithType: DataTable.EndLoadData()
  fullName: System.Data.DataTable.EndLoadData()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Attiva notifiche, la manutenzione degli indici e vincoli dopo il caricamento dei dati."
  remarks: "Utilizzare EndLoadData in combinazione con <xref:System.Data.DataTable.LoadDataRow%2A>e <xref:System.Data.DataTable.BeginLoadData%2A>.</xref:System.Data.DataTable.BeginLoadData%2A> </xref:System.Data.DataTable.LoadDataRow%2A>"
  syntax:
    content: public void EndLoadData ();
    parameters: []
  overload: System.Data.DataTable.EndLoadData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
  fullName: System.Data.DataTable.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene la raccolta di informazioni utente personalizzate."
  remarks: "Utilizzare il ExtendedProperties per aggiungere informazioni personalizzate a un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Aggiungere le informazioni con il `Add` metodo. Recuperare le informazioni con il `Item` metodo.       Proprietà estese devono essere di tipo <xref:System.String>.</xref:System.String> Le proprietà che non sono di tipo stringa non sono persistenti quando il <xref:System.Data.DataTable>è scritto in formato XML.</xref:System.Data.DataTable>"
  example:
  - "The following example adds a timestamp value to the <xref:System.Data.DataTable> through the ExtendedProperties property.  \n  \n [!code-cs[Classic WebData DataTable.ExtendedProperties Example#1](~/add/codesnippet/csharp/p-system.data.datatable._7_1.cs)]\n [!code-vb[Classic WebData DataTable.ExtendedProperties Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._7_1.vb)]"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "Oggetto <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> che contiene le informazioni utente personalizzate."
  overload: System.Data.DataTable.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.fInitInProgress
  id: fInitInProgress
  parent: System.Data.DataTable
  langs:
  - csharp
  name: fInitInProgress
  nameWithType: DataTable.fInitInProgress
  fullName: System.Data.DataTable.fInitInProgress
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Controlla se l&quot;inizializzazione è in corso. L&quot;inizializzazione avviene in fase di esecuzione."
  syntax:
    content: protected bool fInitInProgress;
    return:
      type: System.Boolean
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetChanges
  id: GetChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetChanges()
  nameWithType: DataTable.GetChanges()
  fullName: System.Data.DataTable.GetChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una copia del <xref href=&quot;System.Data.DataTable&quot;> </xref> che contiene tutte le modifiche apportate dopo il caricamento o <xref:System.Data.DataTable.AcceptChanges*>dall&quot;ultima chiamata a.</xref:System.Data.DataTable.AcceptChanges*>"
  remarks: "Crea un nuovo <xref:System.Data.DataSet>contenente una copia di tutte le righe nell&quot;originale <xref:System.Data.DataSet>che con modifiche in sospeso.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Vincoli della relazione possono comportare ulteriori righe invariate da aggiungere al nuovo <xref:System.Data.DataSet>se tali righe contengono chiavi primarie corrispondenti a chiavi esterne in righe modificate.</xref:System.Data.DataSet> Il metodo restituisce `null` (`Nothing` in Visual Basic) se non sono presenti righe nell&quot;originale <xref:System.Data.DataSet>con le modifiche in sospeso.</xref:System.Data.DataSet>"
  example:
  - >-
    [!code-cs[Classic WebData DataTable.GetChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._25_1.cs)]
     [!code-vb[Classic WebData DataTable.GetChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._25_1.vb)]
  syntax:
    content: public System.Data.DataTable GetChanges ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "Una copia delle modifiche da questo <xref href=&quot;System.Data.DataTable&quot;> </xref>, o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se non vengono rilevate modifiche."
  overload: System.Data.DataTable.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetChanges(System.Data.DataRowState)
  id: GetChanges(System.Data.DataRowState)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetChanges(DataRowState)
  nameWithType: DataTable.GetChanges(DataRowState)
  fullName: System.Data.DataTable.GetChanges(DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una copia del <xref href=&quot;System.Data.DataTable&quot;> </xref> contenente tutte le modifiche apportate dall&quot;ultimo caricamento o dal <xref:System.Data.DataTable.AcceptChanges*>è stato chiamato, filtrati in base <xref href=&quot;System.Data.DataRowState&quot;> </xref>.</xref:System.Data.DataTable.AcceptChanges*>"
  remarks: "Il <xref:System.Data.DataTable.GetChanges%2A>metodo viene utilizzato per produrre un secondo <xref:System.Data.DataTable>oggetto che contiene solo le modifiche apportate all&quot;originale.</xref:System.Data.DataTable> </xref:System.Data.DataTable.GetChanges%2A> Utilizzare il `rowStates` argomento per specificare il tipo di modifiche deve includere il nuovo oggetto.       I vincoli di relazione possono impedire le righe padre unchanged da includere."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.GetChanges1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._15_1.cs)]
     [!code-vb[Classic WebData DataTable.GetChanges1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._15_1.vb)]
  syntax:
    content: public System.Data.DataTable GetChanges (System.Data.DataRowState rowStates);
    parameters:
    - id: rowStates
      type: System.Data.DataRowState
      description: "Uno del <xref href=&quot;System.Data.DataRowState&quot;> </xref> valori."
    return:
      type: System.Data.DataTable
      description: "Copia filtrata del <xref href=&quot;System.Data.DataTable&quot;> </xref> che può avere azioni eseguite su di esso e in seguito essere unita di nuovo il <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzando <xref:System.Data.DataSet.Merge*>.</xref:System.Data.DataSet.Merge*> Se nessuna riga dell&quot;oggetto desiderato <xref href=&quot;System.Data.DataRowState&quot;> </xref> trovato, il metodo restituisce <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.GetChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  id: GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetDataTableSchema(XmlSchemaSet)
  nameWithType: DataTable.GetDataTableSchema(XmlSchemaSet)
  fullName: System.Data.DataTable.GetDataTableSchema(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Questo metodo restituisce un <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> istanza contenente i servizi descrizione linguaggio WSDL (Web) che descrive il <xref href=&quot;System.Data.DataTable&quot;> </xref> per i servizi Web."
  syntax:
    content: public static System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema (System.Xml.Schema.XmlSchemaSet schemaSet);
    parameters:
    - id: schemaSet
      type: System.Xml.Schema.XmlSchemaSet
      description: "Un <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> istanza."
    return:
      type: System.Xml.Schema.XmlSchemaComplexType
      description: "Il <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> istanza."
  overload: System.Data.DataTable.GetDataTableSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetErrors
  id: GetErrors
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetErrors()
  nameWithType: DataTable.GetErrors()
  fullName: System.Data.DataTable.GetErrors()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti che contengono errori."
  remarks: "Restituisce l&quot;elenco di <xref:System.Data.DataRow>gli oggetti che hanno <xref:System.Data.DataRow.RowError%2A>impostato.</xref:System.Data.DataRow.RowError%2A> </xref:System.Data.DataRow> Ad esempio, possono verificarsi errori quando si chiama <xref:System.Data.Common.DataAdapter.Update%2A>con <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>impostato su **true**.</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> </xref:System.Data.Common.DataAdapter.Update%2A> Non richiamare <xref:System.Data.DataTable.AcceptChanges%2A>sul <xref:System.Data.DataTable>finché non vengono risolti tutti gli errori e inviare di nuovo il <xref:System.Data.DataSet>per l&quot;aggiornamento.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A>"
  example:
  - "The following example uses the GetErrors method to return an array of <xref:System.Data.DataRow> objects that have errors.  \n  \n [!code-vb[Classic WebData DataTable.GetErrors Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._18_1.vb)]\n [!code-cs[Classic WebData DataTable.GetErrors Example#1](~/add/codesnippet/csharp/m-system.data.datatable._18_1.cs)]"
  syntax:
    content: public System.Data.DataRow[] GetErrors ();
    parameters: []
    return:
      type: System.Data.DataRow[]
      description: "Matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref> gli oggetti che contengono errori."
  overload: System.Data.DataTable.GetErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataTable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Popola un oggetto di informazioni di serializzazione con i dati necessari per serializzare il <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Oggetto <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> oggetto che contiene i dati serializzati associati con la <xref href=&quot;System.Data.DataTable&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Oggetto <xref:System.Runtime.Serialization.StreamingContext>oggetto che contiene l&quot;origine e la destinazione del flusso serializzato associato il <xref href=&quot;System.Data.DataTable&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Data.DataTable.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Il <code> info </code> parametro è un riferimento null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic)."
  platform:
  - net462
- uid: System.Data.DataTable.GetRowType
  id: GetRowType
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetRowType()
  nameWithType: DataTable.GetRowType()
  fullName: System.Data.DataTable.GetRowType()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene il tipo di riga."
  syntax:
    content: protected virtual Type GetRowType ();
    parameters: []
    return:
      type: System.Type
      description: "Restituisce il tipo di <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  overload: System.Data.DataTable.GetRowType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.GetSchema
  id: GetSchema
  parent: System.Data.DataTable
  langs:
  - csharp
  name: GetSchema()
  nameWithType: DataTable.GetSchema()
  fullName: System.Data.DataTable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Per una descrizione di questo membro, vedere &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  syntax:
    content: protected virtual System.Xml.Schema.XmlSchema GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "Un <xref:System.Xml.Schema.XmlSchema>che descrive la rappresentazione XML dell&quot;oggetto prodotto dal <> </> *> (metodo) e utilizzato dal <> </> *> metodo.</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Data.DataTable.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.HasErrors
  id: HasErrors
  parent: System.Data.DataTable
  langs:
  - csharp
  name: HasErrors
  nameWithType: DataTable.HasErrors
  fullName: System.Data.DataTable.HasErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene un valore che indica se sono presenti errori in tutte le righe in una qualsiasi delle tabelle del <xref href=&quot;System.Data.DataSet&quot;> </xref> a cui appartiene la tabella."
  remarks: "Mentre si utilizza un set di dati contenuti in un <xref:System.Data.DataTable>, è possibile contrassegnare ogni modifica di un errore se la modifica provochi errori di convalida.</xref:System.Data.DataTable> È possibile contrassegnare un&quot;intera <xref:System.Data.DataRow>con un messaggio di errore mediante il <xref:System.Data.DataRow.RowError%2A>proprietà.</xref:System.Data.DataRow.RowError%2A> </xref:System.Data.DataRow> È inoltre possibile impostare gli errori in ogni colonna della riga con il <xref:System.Data.DataRow.SetColumnError%2A>metodo.</xref:System.Data.DataRow.SetColumnError%2A>       Prima di aggiornare un&quot;origine dati con un oggetto <xref:System.Data.DataSet>è consigliabile richiamare il <xref:System.Data.DataSet.GetChanges%2A>metodo sull&quot;oggetto destinazione <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet.GetChanges%2A> </xref:System.Data.DataSet> Il metodo genera un <xref:System.Data.DataSet>che contiene solo le modifiche apportate all&quot;oggetto originale.</xref:System.Data.DataSet> Prima di inviare il <xref:System.Data.DataSet>all&quot;origine dati per l&quot;aggiornamento, controllare la proprietà HasErrors di ogni tabella per vedere se sono stati associati errori alle righe o colonne delle righe.</xref:System.Data.DataSet>       Dopo la riconciliazione ogni errore, cancellare gli errori con il <xref:System.Data.DataRow.ClearErrors%2A>metodo il `DataRow`.</xref:System.Data.DataRow.ClearErrors%2A>"
  example:
  - "The following example uses the HasErrors property to check if a table contains errors.  \n  \n [!code-cs[Classic WebData DataTable.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.datatable._8_1.cs)]\n [!code-vb[Classic WebData DataTable.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._8_1.vb)]"
  syntax:
    content: public bool HasErrors { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se sono presenti errori; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.HasErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ImportRow(System.Data.DataRow)
  id: ImportRow(System.Data.DataRow)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ImportRow(DataRow)
  nameWithType: DataTable.ImportRow(DataRow)
  fullName: System.Data.DataTable.ImportRow(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Copia un <xref href=&quot;System.Data.DataRow&quot;> </xref> in un <xref href=&quot;System.Data.DataTable&quot;> </xref>, mantenendo le impostazioni delle proprietà, nonché i valori originali e correnti."
  remarks: "La chiamata <xref:System.Data.DataTable.NewRow%2A>aggiunge una riga alla tabella utilizzando lo schema della tabella esistente, ma con i valori predefiniti per la riga e imposta il <xref:System.Data.DataRowState>a `Detached`.</xref:System.Data.DataRowState> </xref:System.Data.DataTable.NewRow%2A> La chiamata ImportRow mantiene esistente <xref:System.Data.DataRowState>con altri valori nella riga.</xref:System.Data.DataRowState> Se il `DataRow` che viene passato come parametro è in uno stato scollegato, viene ignorata e viene generata alcuna eccezione.       La nuova riga verrà aggiunta alla fine della tabella di dati.       Se la nuova riga viola un vincolo non verranno aggiunti alla tabella di dati.       È possibile ottenere l&quot;indice della nuova riga con DataTable.Rows.Find e DataTable.Rows.IndexOf. Vedere <xref:System.Data.DataRowCollection>e <xref:System.Data.DataTable.Rows%2A>Per ulteriori informazioni.</xref:System.Data.DataTable.Rows%2A> </xref:System.Data.DataRowCollection>"
  syntax:
    content: public void ImportRow (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: "Il <xref href=&quot;System.Data.DataRow&quot;> </xref> da importare."
  overload: System.Data.DataTable.ImportRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Initialized
  id: Initialized
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Initialized
  nameWithType: DataTable.Initialized
  fullName: System.Data.DataTable.Initialized
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica dopo il <xref href=&quot;System.Data.DataTable&quot;> </xref> viene inizializzato."
  remarks: "Per ulteriori informazioni, vedere <xref:System.Data.DataTable.IsInitialized%2A>.</xref:System.Data.DataTable.IsInitialized%2A>"
  syntax:
    content: public event EventHandler Initialized;
    return:
      type: System.EventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.IsInitialized
  id: IsInitialized
  parent: System.Data.DataTable
  langs:
  - csharp
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
  fullName: System.Data.DataTable.IsInitialized
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Data.DataTable&quot;> </xref> viene inizializzato."
  remarks: "Restituisce lo stato di <xref:System.Data.DataTable>mentre viene costruita, ad esempio da Visual Studio.</xref:System.Data.DataTable> Il <xref:System.Data.DataTable.BeginInit%2A>metodo lo imposta su `false` e <xref:System.Data.DataTable.EndInit%2A>metodo lo imposta su `true`.</xref:System.Data.DataTable.EndInit%2A> </xref:System.Data.DataTable.BeginInit%2A>"
  syntax:
    content: public bool IsInitialized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per indicare il componente ha completato l&quot;inizializzazione. in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataTable.IsInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader)
  id: Load(System.Data.IDataReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader)
  nameWithType: DataTable.Load(IDataReader)
  fullName: System.Data.DataTable.Load(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Riempie una <xref href=&quot;System.Data.DataTable&quot;> </xref> con i valori da un&quot;origine dati utilizzando l&quot;interfaccia fornita <xref href=&quot;System.Data.IDataReader&quot;> </xref>. Se il <xref href=&quot;System.Data.DataTable&quot;> </xref> contiene già righe, i dati in arrivo dall&quot;origine dati viene uniti con le righe esistenti."
  remarks: "The Loadmethod consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName> method.  \n  \n The Load method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the Load method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The Load method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The Load method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that do not exist in the <xref:System.Data.DataTable>.|The Load method adds the extra columns to `DataTable`'s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the Load method allows the rows to be added, substituting the default or `null` value for the missing column. If no default value or `null` can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the `null` value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`.  For more information, see [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md).  \n  \n This version of the `Load` method attempts to preserve the current values in each row, leaving the original value intact. (If you want finer control over the behavior of incoming data, see <xref:System.Data.DataTable.Load%2A?displayProperty=fullName>.) If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value depends on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the `Load` method. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed. In this case, the method doesn't allow you to indicate the load option, and uses the default, `PreserveChanges`.  \n  \n|Existing DataRowState|Values after `Load` method, and event action|  \n|---------------------------|--------------------------------------------------|  \n|Added|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Deleted|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n|(Not present)|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n To determine which version of the primary key field to use for comparing the current row with an incoming row, the `Load` method uses the original version of the primary key value within a row, if it exists. Otherwise, the `Load` method uses the current version of the primary key field."
  example:
  - "The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then calls the `Load` method, displaying the data both before and after the load operation.  \n  \n [!code-cs[DataWorks DataTableLoad.IDataReader#1](~/add/codesnippet/csharp/m-system.data.datatable._13_1.cs)]\n [!code-vb[DataWorks DataTableLoad.IDataReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._13_1.vb)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Un <xref href=&quot;System.Data.IDataReader&quot;> </xref> che fornisce un set di risultati."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  id: Load(System.Data.IDataReader,System.Data.LoadOption)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader,LoadOption)
  nameWithType: DataTable.Load(IDataReader,LoadOption)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Riempie una <xref href=&quot;System.Data.DataTable&quot;> </xref> con i valori da un&quot;origine dati utilizzando l&quot;interfaccia fornita <xref href=&quot;System.Data.IDataReader&quot;> </xref>. Se il <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref> contiene già righe, i dati in arrivo dall&quot;origine dati viene uniti con le righe esistenti in base al valore del <code> loadOption </code> parametro."
  remarks: "The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method.  \n  \n The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the `Load` method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.|The `Load` method adds the extra columns to `DataTable`’s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`. See [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md) for more information.  \n  \n In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the `loadOption` parameter.  \n  \n If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.  \n  \n|Existing DataRowState|Upsert|OverwriteChanges|PreserveChanges (Default behavior)|  \n|---------------------------|------------|----------------------|------------------------------------------|  \n|Added|Current = \\<Incoming><br /><br /> Original = -\\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction =ChangeOriginal|  \neleted|(Load does not affect deleted rows)<br /><br /> Current = ---<br /><br /> Original = \\<Existing><br /><br /> State = \\<Deleted><br /><br /> (New row is added with the following characteristics)<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Undo delete and<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> If new value is the same as the existing value then<br /><br /> State = \\<Unchanged><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \nNot present)|Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source. The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  \n  \n|Load option|DataRow version used for primary key comparison|  \n|-----------------|-----------------------------------------------------|  \n|`OverwriteChanges`|Original version, if it exists, otherwise Current version|  \n|`PreserveChanges`|Original version, if it exists, otherwise Current version|  \n|`Upsert`|Current version, if it exists, otherwise Original version|"
  example:
  - "The following example demonstrates several of the issues involved with calling the Load method. First, the example focuses on schema issues, including inferring a schema from the loaded <xref:System.Data.IDataReader>, and then handling incompatible schemas, and schemas with missing or additional columns. The example then focuses on data issues, including handling the various loading options.  \n  \n [!code-cs[DataWorks DataTableLoad.LoadOption#1](~/add/codesnippet/csharp/m-system.data.datatable._29_1.cs)]\n [!code-vb[DataWorks DataTableLoad.LoadOption#1](~/add/codesnippet/visualbasic/m-system.data.datatable._29_1.vb)]"
  syntax:
    content: public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Un <xref href=&quot;System.Data.IDataReader&quot;> </xref> che fornisce uno o più set di risultati."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Un valore di <xref href=&quot;System.Data.LoadOption&quot;> </xref> enumerazione che indica come righe già nel <xref href=&quot;System.Data.DataTable&quot;> </xref> vengono combinate con le righe in ingresso che condividono la stessa chiave primaria."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  id: Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Load(IDataReader,LoadOption,FillErrorEventHandler)
  nameWithType: DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Riempie una <xref href=&quot;System.Data.DataTable&quot;> </xref> con i valori da un&quot;origine dati utilizzando l&quot;interfaccia fornita <xref href=&quot;System.Data.IDataReader&quot;> </xref> tramite un delegato di gestione degli errori."
  remarks: "The `Load` method consumes the first result set from the loaded <xref:System.Data.IDataReader>, and after successful completion, sets the reader's position to the next result set, if any. When converting data, the `Load` method uses the same conversion rules as the <xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=fullName> method.  \n  \n The `Load` method must take into account three specific issues when loading the data from an <xref:System.Data.IDataReader> instance: schema, data, and event operations. When working with the schema, the `Load` method may encounter conditions as described in the following table. The schema operations take place for all imported result sets, even those containing no data.  \n  \n|Condition|Behavior|  \n|---------------|--------------|  \n|The <xref:System.Data.DataTable> has no schema.|The `Load` method infers the schema based on the result set from the imported <xref:System.Data.IDataReader>.|  \n|The <xref:System.Data.DataTable> has a schema, but it is incompatible with the loaded schema.|The `Load` method throws an exception corresponding to the particular error that occurs when attempting to load data into the incompatible schema.|  \n|The schemas are compatible, but the loaded result set schema contains columns that don't exist in the `DataTable`.|The `Load` method adds the extra column(s) to `DataTable`’s schema. The method throws an exception if corresponding columns in the <xref:System.Data.DataTable> and the loaded result set are not value compatible. The method also retrieves constraint information from the result set for all added columns. Except for the case of Primary Key constraint, this constraint information is used only if the current <xref:System.Data.DataTable> does not contain any columns at the start of the load operation.|  \n|The schemas are compatible, but the loaded result set schema contains fewer columns than does the `DataTable`.|If a missing column has a default value defined or the column's data type is nullable, the `Load` method allows the rows to be added, substituting the default or null value for the missing column. If no default value or null can be used, then the `Load` method throws an exception. If no specific default value has been supplied, the `Load` method uses the null value as the implied default value.|  \n  \n Before considering the behavior of the `Load` method in terms of data operations, consider that each row within a <xref:System.Data.DataTable> maintains both the current value and the original value for each column. These values may be equivalent, or may be different if the data in the row has been changed since filling the `DataTable`. See [Row States and Row Versions](~/add/includes/ajax-current-ext-md.md) for more information.  \n  \n In this method call, the specified <xref:System.Data.LoadOption> parameter influences the processing of the incoming data. How should the Load method handle loading rows that have the same primary key as existing rows? Should it modify current values, original values, or both? These issues, and more, are controlled by the `loadOption` parameter.  \n  \n If the existing row and the incoming row contain corresponding primary key values, the row is processed using its current row state value, otherwise it's treated as a new row.  \n  \n In terms of event operations, the <xref:System.Data.DataTable.RowChanging> event occurs before each row is changed, and the <xref:System.Data.DataTable.RowChanged> event occurs after each row has been changed. In each case, the <xref:System.Data.DataRowChangeEventArgs.Action%2A> property of the <xref:System.Data.DataRowChangeEventArgs> instance passed to the event handler contains information about the particular action associated with the event. This action value varies, depending on the state of the row before the load operation. In each case, both events occur, and the action is the same for each. The action may be applied to either the current or original version of each row, or both, depending on the current row state.  \n  \n The following table displays behavior for the Load method when called with each of the `LoadOption` values, and also shows how the values interact with the row state for the row being loaded. The final row (labeled \"(Not present)\") describes the behavior for incoming rows that don't match any existing row. Each cell in this table describes the current and original value for a field within a row, along with the <xref:System.Data.DataRowState> for the value after the `Load` method has completed.  \n  \n|Existing DataRowState|Upsert|OverwriteChanges|PreserveChanges (Default behavior)|  \n|---------------------------|------------|----------------------|------------------------------------------|  \n|Added|Current = \\<Incoming><br /><br /> Original = -\\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction = ChangeOriginal|  \n|Modified|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Existing><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Modified><br /><br /> RowAction =ChangeOriginal|  \neleted|(Load does not affect deleted rows)<br /><br /> Current = ---<br /><br /> Original = \\<Existing><br /><br /> State = \\<Deleted><br /><br /> (New row is added with the following characteristics)<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Undo delete and<br /><br /> Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Not available><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Deleted><br /><br /> RowAction = ChangeOriginal|  \n|Unchanged|Current = \\<Incoming><br /><br /> Original = \\<Existing><br /><br /> If new value is the same as the existing value then<br /><br /> State = \\<Unchanged><br /><br /> RowAction = Nothing<br /><br /> Else<br /><br /> State = \\<Modified><br /><br /> RowAction = Change|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \nNot present)|Current = \\<Incoming><br /><br /> Original = \\<Not available><br /><br /> State = \\<Added><br /><br /> RowAction = Add|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|Current = \\<Incoming><br /><br /> Original = \\<Incoming><br /><br /> State = \\<Unchanged><br /><br /> RowAction = ChangeCurrentAndOriginal|  \n  \n Values in a <xref:System.Data.DataColumn> can be constrained through use of properties such as <xref:System.Data.DataColumn.ReadOnly%2A> and <xref:System.Data.DataColumn.AutoIncrement%2A>. The `Load` method handles such columns in a manner that is consistent with the behavior defined by the column's properties. The read only constraint on a <xref:System.Data.DataColumn> is applicable only for changes that occur in memory. The `Load` method's overwrites the read-only column values, if needed.  \n  \n If you specify the OverwriteChanges or PreserveChanges options when calling the `Load` method, then the assumption is made that the incoming data is coming from the `DataTable`'s primary data source, and the DataTable tracks changes and can propagate the changes back to the data source. If you select the Upsert option, it is assumed that the data is coming from one of a secondary data source, such as data provided by a middle-tier component, perhaps altered by a user. In this case, the assumption is that the intent is to aggregate data from one or more data sources in the `DataTable`, and then perhaps propagate the data back to the primary data source. The <xref:System.Data.LoadOption> parameter is used for determining the specific version of the row that is to be used for primary key comparison. The table below provides the details.  \n  \n|Load option|DataRow version used for primary key comparison|  \n|-----------------|-----------------------------------------------------|  \n|`OverwriteChanges`|Original version, if it exists, otherwise Current version|  \n|`PreserveChanges`|Original version, if it exists, otherwise Current version|  \n|`Upsert`|Current version, if it exists, otherwise Original version|  \n  \n The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data. The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled. Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like. The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing. Set the property to `false` to indicate that you wish to halt processing. Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception."
  example:
  - >-
    [!code-vb[DataWorks DataTableLoad.ErrorEventHandler#1](~/add/codesnippet/visualbasic/e9f1029e-2520-490c-8397-_1.vb)]
     [!code-cs[DataWorks DataTableLoad.ErrorEventHandler#1](~/add/codesnippet/csharp/e9f1029e-2520-490c-8397-_1.cs)]
  syntax:
    content: public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Oggetto <xref href=&quot;System.Data.IDataReader&quot;> </xref> che fornisce un set di risultati."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Un valore di <xref href=&quot;System.Data.LoadOption&quot;> </xref> enumerazione che indica come righe già nel <xref href=&quot;System.Data.DataTable&quot;> </xref> vengono combinate con le righe in ingresso che condividono la stessa chiave primaria."
    - id: errorHandler
      type: System.Data.FillErrorEventHandler
      description: "Oggetto <xref href=&quot;System.Data.FillErrorEventHandler&quot;> </xref> delegato da chiamare quando si verifica un errore durante il caricamento di dati."
  overload: System.Data.DataTable.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  id: LoadDataRow(System.Object[],System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: LoadDataRow(Object[],Boolean)
  nameWithType: DataTable.LoadDataRow(Object[],Boolean)
  fullName: System.Data.DataTable.LoadDataRow(Object[],Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Individua e aggiorna una riga specifica. Se viene trovata alcuna riga corrispondente, una nuova riga viene creata utilizzando i valori specificati."
  remarks: "Il metodo LoadDataRow accetta una matrice di valori e trova i valori corrispondenti nelle colonne chiave primarie.       Se una colonna contiene un valore predefinito, passare un valore null nella matrice per impostare il valore predefinito per tale colonna. Analogamente, se dispone di una colonna relativa <xref:System.Data.DataColumn.AutoIncrement%2A>proprietà è impostata su true, passare un valore null nella matrice per impostare il valore generato automaticamente per la riga.</xref:System.Data.DataColumn.AutoIncrement%2A>       Se il `fAcceptChanges` parametro `true` o non è specificato, vengono aggiunti i nuovi dati e quindi <xref:System.Data.DataTable.AcceptChanges%2A>viene chiamato per accettare tutte le modifiche apportate il <xref:System.Data.DataTable>; Se l&quot;argomento è `false`, le righe appena aggiunte sono contrassegnate come inserimenti e le modifiche apportate alle righe esistenti sono contrassegnate come le modifiche.</xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A>       Eccezioni possono verificarsi anche durante un <xref:System.Data.DataTable.ColumnChanging>o <xref:System.Data.DataTable.RowChanging>evento.</xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.ColumnChanging> Se si verifica un&quot;eccezione, la riga non viene aggiunta alla tabella.       Utilizzare LoadDataRow in combinazione con <xref:System.Data.DataTable.BeginLoadData%2A>e <xref:System.Data.DataTable.EndLoadData%2A>.</xref:System.Data.DataTable.EndLoadData%2A> </xref:System.Data.DataTable.BeginLoadData%2A>"
  example:
  - "The following example uses the LoadDataRow method to attempt to find a row. If no such row is found, the values are used to create a new row.  \n  \n [!code-vb[Classic WebData DataTable.LoadDataRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._23_1.vb)]\n [!code-cs[Classic WebData DataTable.LoadDataRow Example#1](~/add/codesnippet/csharp/m-system.data.datatable._23_1.cs)]"
  syntax:
    content: public System.Data.DataRow LoadDataRow (object[] values, bool fAcceptChanges);
    parameters:
    - id: values
      type: System.Object[]
      description: "Matrice di valori utilizzati per creare la nuova riga."
    - id: fAcceptChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per accettare le modifiche. in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Data.DataRow
      description: "The new <xref href=&quot;System.Data.DataRow&quot;></xref>."
  overload: System.Data.DataTable.LoadDataRow*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "La matrice è maggiore del numero di colonne nella tabella."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Un valore non corrisponde al tipo di colonna corrispondente."
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Aggiunta della riga invalida un vincolo."
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "Il tentativo di inserire un valore null in una colonna in cui <xref:System.Data.DataColumn.AllowDBNull*>è false.</xref:System.Data.DataColumn.AllowDBNull*>"
  platform:
  - net462
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  id: LoadDataRow(System.Object[],System.Data.LoadOption)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: LoadDataRow(Object[],LoadOption)
  nameWithType: DataTable.LoadDataRow(Object[],LoadOption)
  fullName: System.Data.DataTable.LoadDataRow(Object[],LoadOption)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Individua e aggiorna una riga specifica. Se viene trovata alcuna riga corrispondente, una nuova riga viene creata utilizzando i valori specificati."
  remarks: "Il <xref:System.Data.DataTable.LoadDataRow%2A>metodo accetta una matrice di valori e trova i valori corrispondenti nelle colonne chiave primarie.</xref:System.Data.DataTable.LoadDataRow%2A>       Se una colonna contiene un valore predefinito, passare un valore null nella matrice per impostare il valore predefinito per tale colonna. Analogamente, se dispone di una colonna relativa <xref:System.Data.DataColumn.AutoIncrement%2A>proprietà è impostata su true, passare un valore null nella matrice per impostare il valore generato automaticamente per la riga.</xref:System.Data.DataColumn.AutoIncrement%2A>       Il valore di `loadOption` parametro viene utilizzato per determinare come vengono applicati i valori nella matrice in una riga esistente. Ad esempio, se `loadOption` è impostato su `OverwriteChanges`, `Original` e `Current` i valori di ogni colonna vengono sostituiti con i valori della riga in arrivo e `RowState` è impostata su `Unchanged`.       Eccezioni possono verificarsi anche durante un <xref:System.Data.DataTable.ColumnChanging>o <xref:System.Data.DataTable.RowChanging>evento.</xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.ColumnChanging> Se si verifica un&quot;eccezione, la riga non viene aggiunta alla tabella.       Utilizzare <xref:System.Data.DataTable.LoadDataRow%2A>in combinazione con <xref:System.Data.DataTable.BeginLoadData%2A>e <xref:System.Data.DataTable.EndLoadData%2A>.</xref:System.Data.DataTable.EndLoadData%2A> </xref:System.Data.DataTable.BeginLoadData%2A> </xref:System.Data.DataTable.LoadDataRow%2A>"
  syntax:
    content: public System.Data.DataRow LoadDataRow (object[] values, System.Data.LoadOption loadOption);
    parameters:
    - id: values
      type: System.Object[]
      description: "Matrice di valori utilizzati per creare la nuova riga."
    - id: loadOption
      type: System.Data.LoadOption
      description: "Utilizzato per stabilire la modalità con cui i valori della matrice vengono applicati ai valori corrispondenti in una riga esistente."
    return:
      type: System.Data.DataRow
      description: "The new <xref href=&quot;System.Data.DataRow&quot;></xref>."
  overload: System.Data.DataTable.LoadDataRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Locale
  id: Locale
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Locale
  nameWithType: DataTable.Locale
  fullName: System.Data.DataTable.Locale
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta le informazioni delle impostazioni locali utilizzate per confrontare le stringhe all&quot;interno della tabella."
  remarks: "Oggetto <xref:System.Globalization.CultureInfo>rappresenta le preferenze di software di determinate impostazioni cultura o community.</xref:System.Globalization.CultureInfo>       Quando viene utilizzato per confronti tra stringhe, il <xref:System.Globalization.CultureInfo>influisce sul filtro e ordinamento, i confronti,.</xref:System.Globalization.CultureInfo>      > [!NOTE] > Nelle colonne che contengono espressioni, il <xref:System.StringComparison>viene utilizzato.</xref:System.StringComparison> Il <xref:System.StringComparison>viene ignorato.</xref:System.StringComparison>"
  example:
  - "The following example sets the <xref:System.Globalization.CultureInfo> through the Locale and prints the ISO language name.  \n  \n [!code-cs[Classic WebData DataTable.Locale Example#1](~/add/codesnippet/csharp/p-system.data.datatable._5_1.cs)]\n [!code-vb[Classic WebData DataTable.Locale Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._5_1.vb)]"
  syntax:
    content: public System.Globalization.CultureInfo Locale { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "Oggetto <xref:System.Globalization.CultureInfo>che contiene i dati sulle impostazioni locali di computer dell&quot;utente.</xref:System.Globalization.CultureInfo> Il valore predefinito è il <xref href=&quot;System.Data.DataSet&quot;> </xref> dell&quot;oggetto <xref:System.Globalization.CultureInfo>(restituito dal <xref:System.Data.DataSet.Locale*>proprietà) a cui il <xref href=&quot;System.Data.DataTable&quot;> </xref> appartiene; se la tabella non appartiene a un <xref href=&quot;System.Data.DataSet&quot;> </xref>, il valore predefinito è il sistema corrente <xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo> </xref:System.Data.DataSet.Locale*> </xref:System.Globalization.CultureInfo>"
  overload: System.Data.DataTable.Locale*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable)
  id: Merge(System.Data.DataTable)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable)
  nameWithType: DataTable.Merge(DataTable)
  fullName: System.Data.DataTable.Merge(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Merge specificato <xref href=&quot;System.Data.DataTable&quot;> </xref> con corrente <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Il metodo di tipo Merge viene utilizzato per unire due <xref:System.Data.DataTable>gli oggetti che contengono schemi molto simili.</xref:System.Data.DataTable> Un&quot;unione è in genere utilizzata in un&quot;applicazione client per rendere effettive le modifiche più recenti da un&quot;origine dati in un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> esistente In questo modo l&quot;applicazione client per un aggiornamento <xref:System.Data.DataTable>con i dati più recenti dall&quot;origine dati.</xref:System.Data.DataTable>       L&quot;operazione di unione prende in considerazione solo la tabella originale e la tabella da unire. Tabelle figlio non sono interessate o inclusa. Se la tabella contiene una o più tabelle figlio, definite come parte di una relazione, è necessario unire singolarmente ogni tabella figlio.       Il `Merge` viene in genere chiamato alla fine di una serie di procedure che comportano la convalida delle modifiche, la risoluzione degli errori, aggiornare l&quot;origine dati con le modifiche e infine l&quot;aggiornamento di <xref:System.Data.DataTable>.</xref:System.Data.DataTable> esistente       Quando si esegue un&quot;operazione di unione, le modifiche apportate ai dati esistenti prima dell&quot;unione vengono conservate per impostazione predefinita durante l&quot;operazione di unione. Gli sviluppatori possono modificare questo comportamento chiamando uno degli altri due overload di questo metodo e specificando un valore false per il `preserveChanges` parametro.       In un&quot;applicazione client, è previsto un singolo pulsante che l&quot;utente può fare clic per raccogliere i dati modificati e convalidarli prima di inviarlo a un componente di livello intermedio. In questo scenario, il <xref:System.Data.DataTable.GetChanges%2A>metodo viene richiamato prima.</xref:System.Data.DataTable.GetChanges%2A> Questo metodo restituisce un secondo <xref:System.Data.DataTable>con ottimizzazione per la convalida e l&quot;unione.</xref:System.Data.DataTable> Il secondo <xref:System.Data.DataTable>oggetto contiene solo gli <xref:System.Data.DataRow>oggetti che sono stati modificati, rappresenta un sottoinsieme dell&quot;originale <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> </xref:System.Data.DataTable> Questo subset è in genere più piccoli e di conseguenza in modo più efficiente passato nuovamente al componente di livello intermedio. Il componente di livello intermedio quindi aggiorna l&quot;origine dei dati con le modifiche mediante le stored procedure. Il livello intermedio possa quindi inviare un nuovo oggetto <xref:System.Data.DataTable>che include i dati originali e i dati più recenti dall&quot;origine dati (per eseguire nuovamente la query originale) oppure può inviare nuovamente il subset con eventuali modifiche apportate all&quot;origine dati.</xref:System.Data.DataTable> (Ad esempio, se l&quot;origine dati crea automaticamente i valori di chiave primaria univoci, questi valori possono essere propagati all&quot;applicazione client.) In entrambi i casi, l&quot;oggetto restituito <xref:System.Data.DataTable>possono essere reinseriti nell&quot;originale dell&quot;applicazione client <xref:System.Data.DataTable>con il metodo di tipo Merge.</xref:System.Data.DataTable> </xref:System.Data.DataTable>       Quando si uniscono una nuova origine <xref:System.Data.DataTable>nella destinazione, qualsiasi origine righe con un <xref:System.Data.DataRowState>valore `Unchanged`, `Modified`, o `Deleted`, corrisponde a righe di destinazione con gli stessi valori di chiave primari.</xref:System.Data.DataRowState> </xref:System.Data.DataTable> Le righe di origine un <xref:System.Data.DataRowState>valore `Added` corrispondenti alle nuove righe di destinazione con gli stessi valori di chiave primari delle nuove righe di origine.</xref:System.Data.DataRowState>"
  example:
  - "The following console application creates a simple <xref:System.Data.DataTable> and adds data to the table. The example then creates a copy of the table, adding rows to the copy. Finally, the example calls the Merge method to merge the data in the second table with the data in the first table.  \n  \n [!code-vb[DataWorks DataTable.Merge#1](~/add/codesnippet/visualbasic/m-system.data.datatable._4_1.vb)]\n [!code-cs[DataWorks DataTable.Merge#1](~/add/codesnippet/csharp/m-system.data.datatable._4_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Il <xref href=&quot;System.Data.DataTable&quot;> </xref> da unire con corrente <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  id: Merge(System.Data.DataTable,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable,Boolean)
  nameWithType: DataTable.Merge(DataTable,Boolean)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Merge specificato <xref href=&quot;System.Data.DataTable&quot;> </xref> con corrente <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>, che indica se mantenere le modifiche nell&quot;oggetto <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
  remarks: "Il metodo di tipo Merge viene utilizzato per unire due <xref:System.Data.DataTable>gli oggetti che contengono schemi molto simili.</xref:System.Data.DataTable> Un&quot;unione è in genere utilizzata in un&quot;applicazione client per rendere effettive le modifiche più recenti da un&quot;origine dati in un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> esistente In questo modo l&quot;applicazione client per un aggiornamento <xref:System.Data.DataTable>con i dati più recenti dall&quot;origine dati.</xref:System.Data.DataTable>       L&quot;operazione di unione prende in considerazione solo la tabella originale e la tabella da unire. Tabelle figlio non sono interessate o inclusa. Se la tabella contiene una o più tabelle figlio, definite come parte di una relazione, è necessario unire singolarmente ogni tabella figlio.       Il `Merge` viene in genere chiamato alla fine di una serie di procedure che comportano la convalida delle modifiche, la risoluzione degli errori, aggiornare l&quot;origine dati con le modifiche e infine l&quot;aggiornamento di <xref:System.Data.DataTable>.</xref:System.Data.DataTable> esistente       Quando si esegue un&quot;operazione di unione, le modifiche apportate ai dati esistenti prima dell&quot;unione vengono mantenute durante l&quot;operazione di unione, a meno che lo sviluppatore specifica false per il `preserveChanges` parametro. Se il `preserveChanges` parametro è impostato su `true`, i valori in ingresso non sovrascrivono i valori esistenti nella versione di riga corrente della riga esistente. Se il `preserveChanges` parametro è impostato su `false`, i valori in ingresso di sovrascrivere i valori esistenti nella versione di riga corrente della riga esistente. Per ulteriori informazioni sulle versioni delle righe, vedere [stati delle righe e le versioni di riga](~/add/includes/ajax-current-ext-md.md).       In un&quot;applicazione client, è previsto un singolo pulsante che l&quot;utente può fare clic per raccogliere i dati modificati e convalidarli prima di inviarlo a un componente di livello intermedio. In questo scenario, il <xref:System.Data.DataTable.GetChanges%2A>metodo viene richiamato prima.</xref:System.Data.DataTable.GetChanges%2A> Questo metodo restituisce un secondo <xref:System.Data.DataTable>con ottimizzazione per la convalida e l&quot;unione.</xref:System.Data.DataTable> Il secondo <xref:System.Data.DataTable>oggetto contiene solo gli <xref:System.Data.DataTable> <xref:System.Data.DataRow>oggetti che sono stati modificati, rappresenta un sottoinsieme dell&quot;originale <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataTable> Questo subset è generalmente di dimensioni ridotte e, pertanto questo subset è più efficiente passare a un componente di livello intermedio. Il componente di livello intermedio quindi aggiorna l&quot;origine dei dati con le modifiche mediante le stored procedure. Il livello intermedio possa quindi inviare un nuovo oggetto <xref:System.Data.DataTable>che include i dati originali e i dati più recenti dall&quot;origine dati (per eseguire nuovamente la query originale) oppure può inviare nuovamente il subset con eventuali modifiche apportate all&quot;origine dati.</xref:System.Data.DataTable> (Ad esempio, se l&quot;origine dati crea automaticamente i valori di chiave primaria univoci, questi valori possono essere propagati all&quot;applicazione client.) In entrambi i casi, l&quot;oggetto restituito <xref:System.Data.DataTable>possono essere reinseriti nell&quot;originale dell&quot;applicazione client <xref:System.Data.DataTable>con il <xref:System.Data.DataTable.Merge%2A>metodo.</xref:System.Data.DataTable.Merge%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable>       Quando si uniscono una nuova origine <xref:System.Data.DataTable>nella destinazione, qualsiasi origine righe con un <xref:System.Data.DataRowState>valore `Unchanged`, `Modified`, o `Deleted` corrispondenti alle righe di destinazione con gli stessi valori di chiave primari.</xref:System.Data.DataRowState> </xref:System.Data.DataTable> Le righe di origine un <xref:System.Data.DataRowState>valore `Added` corrispondenti alle nuove righe di destinazione con gli stessi valori di chiave primari delle nuove righe di origine.</xref:System.Data.DataRowState>"
  example:
  - "The following console application creates a <xref:System.Data.DataTable> containing rows, modifies some of the data in those rows, and attempts to merge data from a different <xref:System.Data.DataTable>. The example demonstrates the different behaviors for the `preserveChanges` parameter.  \n  \n [!code-vb[DataWorks DataTable.MergePreserveChanges#1](~/add/codesnippet/visualbasic/m-system.data.datatable._2_1.vb)]\n [!code-cs[DataWorks DataTable.MergePreserveChanges#1](~/add/codesnippet/csharp/m-system.data.datatable._2_1.cs)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Il <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref> da unire con corrente <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, per mantenere le modifiche nell&quot;oggetto <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.<xref uid=&quot;langword_csharp_&quot; name=&quot;&quot; href=&quot;&quot;></xref>"
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  id: Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Merge specificato <xref href=&quot;System.Data.DataTable&quot;> </xref> con corrente <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>, che indica se mantenere le modifiche e su come gestire lo schema mancante in corrente <xref uid=&quot;langword_csharp_DataTable&quot; name=&quot;DataTable&quot; href=&quot;&quot;> </xref>."
  remarks: "Il `Merge` metodo viene utilizzato per unire due <xref:System.Data.DataTable>gli oggetti che contengono schemi molto simili.</xref:System.Data.DataTable> Un&quot;unione è in genere utilizzata in un&quot;applicazione client per rendere effettive le modifiche più recenti da un&quot;origine dati in un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> esistente In questo modo l&quot;applicazione client per un aggiornamento <xref:System.Data.DataTable>con i dati più recenti dall&quot;origine dati.</xref:System.Data.DataTable>       L&quot;operazione di unione prende in considerazione solo la tabella originale e la tabella da unire. Tabelle figlio non sono interessate o inclusa. Se la tabella contiene una o più tabelle figlio, definite come parte di una relazione, è necessario unire singolarmente ogni tabella figlio.       Il `Merge` viene in genere chiamato alla fine di una serie di procedure che comportano la convalida delle modifiche, la risoluzione degli errori, aggiornare l&quot;origine dati con le modifiche e infine l&quot;aggiornamento di <xref:System.Data.DataTable>.</xref:System.Data.DataTable> esistente       Quando si esegue un&quot;operazione di unione, le modifiche apportate ai dati esistenti prima dell&quot;unione vengono mantenute durante l&quot;operazione di unione, a meno che lo sviluppatore specifica false per il `preserveChanges` parametro. Se il `preserveChanges` parametro è impostato su `true`, i valori in ingresso non sovrascrivono i valori esistenti nella versione di riga corrente della riga esistente. Se il `preserveChanges` parametro è impostato su `false`, i valori in ingresso di sovrascrivere i valori esistenti nella versione di riga corrente della riga esistente. Per ulteriori informazioni sulle versioni delle righe, vedere [stati delle righe e le versioni di riga](~/add/includes/ajax-current-ext-md.md).       In un&quot;applicazione client, è previsto un singolo pulsante che l&quot;utente può fare clic per raccogliere i dati modificati e convalidarli prima di inviarlo a un componente di livello intermedio. In questo scenario, il <xref:System.Data.DataTable.GetChanges%2A>metodo viene richiamato prima.</xref:System.Data.DataTable.GetChanges%2A> Questo metodo restituisce un secondo <xref:System.Data.DataTable>con ottimizzazione per la convalida e l&quot;unione.</xref:System.Data.DataTable> Il secondo <xref:System.Data.DataTable>oggetto contiene solo gli <xref:System.Data.DataTable> <xref:System.Data.DataRow>oggetti che sono stati modificati, rappresenta un sottoinsieme dell&quot;originale <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> e</xref:System.Data.DataTable> </xref:System.Data.DataTable> Questo subset è generalmente di dimensioni ridotte e, pertanto questo subset è più efficiente passare a un componente di livello intermedio. Il componente di livello intermedio quindi aggiorna l&quot;origine dei dati con le modifiche mediante le stored procedure. Il livello intermedio possa quindi inviare un nuovo oggetto <xref:System.Data.DataTable>che include i dati originali e i dati più recenti dall&quot;origine dati (per eseguire nuovamente la query originale) oppure può inviare nuovamente il subset con eventuali modifiche apportate all&quot;origine dati.</xref:System.Data.DataTable> (Ad esempio, se l&quot;origine dati crea automaticamente i valori di chiave primaria univoci, questi valori possono essere propagati all&quot;applicazione client.) In entrambi i casi, l&quot;oggetto restituito <xref:System.Data.DataTable>possono essere reinseriti nell&quot;originale dell&quot;applicazione client <xref:System.Data.DataTable>con il <xref:System.Data.DataTable.Merge%2A>metodo.</xref:System.Data.DataTable.Merge%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable>       Quando il <xref:System.Data.DataTable.Merge%2A>metodo viene chiamato, gli schemi dei due <xref:System.Data.DataTable>vengono confrontati gli oggetti, poiché è possibile che gli schemi sia stati modificati.</xref:System.Data.DataTable> </xref:System.Data.DataTable.Merge%2A> Ad esempio, in uno scenario business-to-business, potrebbero sono state aggiunte nuove colonne a uno schema XML da un processo automatizzato. Se l&quot;origine <xref:System.Data.DataTable>contiene gli elementi dello schema (aggiunto <xref:System.Data.DataColumn>oggetti) che non sono presenti nel database di destinazione, è possono aggiungere gli elementi dello schema di destinazione impostando il `missingSchemaAction` argomento `MissingSchemaAction.Add`.</xref:System.Data.DataColumn> </xref:System.Data.DataTable> In questo caso, l&quot;oggetto unito <xref:System.Data.DataTable>contiene lo schema e aggiunti dati.</xref:System.Data.DataTable>       Dopo l&quot;unione di schemi, i dati vengono uniti.       Quando si uniscono una nuova origine <xref:System.Data.DataTable>nella destinazione, qualsiasi origine righe con un <xref:System.Data.DataRowState>valore `Unchanged`, `Modified`, o `Deleted` corrispondenti alle righe di destinazione con gli stessi valori di chiave primari.</xref:System.Data.DataRowState> </xref:System.Data.DataTable> Le righe di origine un <xref:System.Data.DataRowState>valore `Added` corrispondenti alle nuove righe di destinazione con gli stessi valori di chiave primari delle nuove righe di origine.</xref:System.Data.DataRowState>"
  example:
  - "The following console application demonstrates the behavior of the `missingSchemaAction` parameter of the Merge method. This example creates two versions of the same table, modifying the schema for the second version. The code then attempts to merge the second table into the first.  \n  \n [!code-cs[DataWorks DataTable.MergeMissingSchemaAction#1](~/add/codesnippet/csharp/0a34dc2a-14c3-4d65-b78d-_1.cs)]\n [!code-vb[DataWorks DataTable.MergeMissingSchemaAction#1](~/add/codesnippet/visualbasic/0a34dc2a-14c3-4d65-b78d-_1.vb)]"
  syntax:
    content: public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Il <xref href=&quot;System.Data.DataTable&quot;> </xref> da unire con corrente <xref href=&quot;System.Data.DataTable&quot;> </xref>."
    - id: preserveChanges
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, per mantenere le modifiche nell&quot;oggetto <xref href=&quot;System.Data.DataTable&quot;> </xref>; in caso contrario <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: missingSchemaAction
      type: System.Data.MissingSchemaAction
      description: "Uno del <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> valori."
  overload: System.Data.DataTable.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.MinimumCapacity
  id: MinimumCapacity
  parent: System.Data.DataTable
  langs:
  - csharp
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
  fullName: System.Data.DataTable.MinimumCapacity
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta la dimensione iniziale per questa tabella."
  remarks: "Il MinimumCapacity consente al sistema di creare un set appropriato delle risorse prima del recupero dei dati. In una situazione quando le prestazioni sono critiche, impostazione di questa proprietà può ottimizzare le prestazioni."
  example:
  - "The following example sets the MinimumCapacity of a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DataTable.MinimumCapacity Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._6_1.vb)]\n [!code-cs[Classic WebData DataTable.MinimumCapacity Example#1](~/add/codesnippet/csharp/p-system.data.datatable._6_1.cs)]"
  syntax:
    content: public int MinimumCapacity { get; set; }
    return:
      type: System.Int32
      description: "La dimensione iniziale delle righe della tabella. Il valore predefinito è 50."
  overload: System.Data.DataTable.MinimumCapacity*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Namespace
  id: Namespace
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Namespace
  nameWithType: DataTable.Namespace
  fullName: System.Data.DataTable.Namespace
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta lo spazio dei nomi per la rappresentazione XML dei dati archiviati nel <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "Lo spazio dei nomi di <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRow
  id: NewRow
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRow()
  nameWithType: DataTable.NewRow()
  fullName: System.Data.DataTable.NewRow()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Crea un nuovo <xref href=&quot;System.Data.DataRow&quot;> </xref> con lo stesso schema della tabella."
  remarks: "È necessario utilizzare il metodo NewRow per creare nuovi <xref:System.Data.DataRow>oggetti con lo stesso schema <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow> Dopo aver creato un <xref:System.Data.DataRow>, è possibile aggiungerlo al <xref:System.Data.DataRowCollection>, tramite il <xref:System.Data.DataTable>dell&quot;oggetto <xref:System.Data.DataTable.Rows%2A>proprietà.</xref:System.Data.DataTable.Rows%2A> </xref:System.Data.DataTable> </xref:System.Data.DataRowCollection> </xref:System.Data.DataRow> Quando si utilizza NewRow per creare nuove righe, le righe devono essere aggiunti o eliminate dalla tabella di dati prima di chiamare <xref:System.Data.DataTable.Clear%2A>.</xref:System.Data.DataTable.Clear%2A>"
  example:
  - "The following example creates a <xref:System.Data.DataTable>, adds two <xref:System.Data.DataColumn> objects that determine the table's schema, and creates several new <xref:System.Data.DataRow> objects using the NewRow method. Those <xref:System.Data.DataRow> objects are then added to the <xref:System.Data.DataRowCollection> using the <xref:System.Data.DataRowCollection.Add%2A> method.  \n  \n [!code-vb[Classic WebData DataTable.NewRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._27_1.vb)]\n [!code-cs[Classic WebData DataTable.NewRow Example#1](~/add/codesnippet/csharp/m-system.data.datatable._27_1.cs)]"
  syntax:
    content: public System.Data.DataRow NewRow ();
    parameters: []
    return:
      type: System.Data.DataRow
      description: "Oggetto <xref href=&quot;System.Data.DataRow&quot;> </xref> con lo stesso schema di <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.NewRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRowArray(System.Int32)
  id: NewRowArray(System.Int32)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRowArray(Int32)
  nameWithType: DataTable.NewRowArray(Int32)
  fullName: System.Data.DataTable.NewRowArray(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Restituisce una matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  syntax:
    content: protected System.Data.DataRow[] NewRowArray (int size);
    parameters:
    - id: size
      type: System.Int32
      description: "Oggetto <xref:System.Int32>valore che descrive le dimensioni della matrice.</xref:System.Int32>"
    return:
      type: System.Data.DataRow[]
      description: "Nuova matrice."
  overload: System.Data.DataTable.NewRowArray*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  id: NewRowFromBuilder(System.Data.DataRowBuilder)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: NewRowFromBuilder(DataRowBuilder)
  nameWithType: DataTable.NewRowFromBuilder(DataRowBuilder)
  fullName: System.Data.DataTable.NewRowFromBuilder(DataRowBuilder)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Crea una nuova riga da una riga esistente."
  syntax:
    content: protected virtual System.Data.DataRow NewRowFromBuilder (System.Data.DataRowBuilder builder);
    parameters:
    - id: builder
      type: System.Data.DataRowBuilder
      description: "A <xref href=&quot;System.Data.DataRowBuilder&quot;></xref> object."
    return:
      type: System.Data.DataRow
      description: "Oggetto <xref href=&quot;System.Data.DataRow&quot;> </xref> classe derivata."
  overload: System.Data.DataTable.NewRowFromBuilder*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  id: OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnColumnChanged(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genera il <xref href=&quot;System.Data.DataTable.ColumnChanged&quot;> </xref> evento."
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnColumnChanged (System.Data.DataColumnChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataColumnChangeEventArgs
      description: "Oggetto <xref href=&quot;System.Data.DataColumnChangeEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.DataTable.OnColumnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  id: OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnColumnChanging(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genera il <xref href=&quot;System.Data.DataTable.ColumnChanging&quot;> </xref> evento."
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnColumnChanging (System.Data.DataColumnChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataColumnChangeEventArgs
      description: "Oggetto <xref href=&quot;System.Data.DataColumnChangeEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.DataTable.OnColumnChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genera il <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>evento.</xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged>"
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "Oggetto <xref:System.ComponentModel.PropertyChangedEventArgs>che contiene i dati dell&quot;evento.</xref:System.ComponentModel.PropertyChangedEventArgs>"
  overload: System.Data.DataTable.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  id: OnRemoveColumn(System.Data.DataColumn)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRemoveColumn(DataColumn)
  nameWithType: DataTable.OnRemoveColumn(DataColumn)
  fullName: System.Data.DataTable.OnRemoveColumn(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Invia una notifica di <xref href=&quot;System.Data.DataTable&quot;> </xref> che un <xref href=&quot;System.Data.DataColumn&quot;> </xref> viene rimosso."
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per ulteriori informazioni, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRemoveColumn (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "Il <xref href=&quot;System.Data.DataColumn&quot;> </xref> da rimuovere."
  overload: System.Data.DataTable.OnRemoveColumn*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  id: OnRowChanged(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowChanged(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanged(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanged(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genera il <xref href=&quot;System.Data.DataTable.RowChanged&quot;> </xref> evento."
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowChanged (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "Oggetto <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.DataTable.OnRowChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  id: OnRowChanging(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowChanging(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanging(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanging(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genera il <xref href=&quot;System.Data.DataTable.RowChanging&quot;> </xref> evento."
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowChanging (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "Oggetto <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.DataTable.OnRowChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  id: OnRowDeleted(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowDeleted(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleted(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleted(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genera il <xref href=&quot;System.Data.DataTable.RowDeleted&quot;> </xref> evento."
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowDeleted (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "Oggetto <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.DataTable.OnRowDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  id: OnRowDeleting(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnRowDeleting(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleting(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleting(DataRowChangeEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genera il <xref href=&quot;System.Data.DataTable.RowDeleting&quot;> </xref> evento."
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowDeleting (System.Data.DataRowChangeEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataRowChangeEventArgs
      description: "Oggetto <xref href=&quot;System.Data.DataRowChangeEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.DataTable.OnRowDeleting*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  id: OnTableCleared(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableCleared(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableCleared(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableCleared(DataTableClearEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genera il <xref href=&quot;System.Data.DataTable.TableCleared&quot;> </xref> evento."
  remarks: "Genera il <xref:System.Data.DataTable.TableCleared>evento, viene generato immediatamente dopo che tutte le righe sono state cancellate ma prima che il <xref:System.Data.DataTable.Clear%2A>metodo restituisce il controllo al chiamante.</xref:System.Data.DataTable.Clear%2A> </xref:System.Data.DataTable.TableCleared>       Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableCleared (System.Data.DataTableClearEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableClearEventArgs
      description: "Oggetto <xref href=&quot;System.Data.DataTableClearEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.DataTable.OnTableCleared*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  id: OnTableClearing(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableClearing(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableClearing(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableClearing(DataTableClearEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genera il <xref href=&quot;System.Data.DataTable.TableClearing&quot;> </xref> evento."
  remarks: "Genera il <xref:System.Data.DataTable.TableClearing>evento, viene generato prima dell&quot;elaborazione del <xref:System.Data.DataTable.Clear%2A>inizia l&quot;operazione.</xref:System.Data.DataTable.Clear%2A> </xref:System.Data.DataTable.TableClearing>       Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableClearing (System.Data.DataTableClearEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableClearEventArgs
      description: "Oggetto <xref href=&quot;System.Data.DataTableClearEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.DataTable.OnTableClearing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  id: OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: OnTableNewRow(DataTableNewRowEventArgs)
  nameWithType: DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  fullName: System.Data.DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Genera il <xref href=&quot;System.Data.DataTable.TableNewRow&quot;> </xref> evento."
  remarks: "Genera l&quot; <xref:System.Data.DataTable.TableNewRow>evento, che viene attivato dopo un nuovo <xref:System.Data.DataRow>è stato creato utilizzando <xref:System.Data.DataTable.NewRow%2A>.</xref:System.Data.DataTable.NewRow%2A> </xref:System.Data.DataRow> </xref:System.Data.DataTable.TableNewRow>       Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."
  syntax:
    content: protected virtual void OnTableNewRow (System.Data.DataTableNewRowEventArgs e);
    parameters:
    - id: e
      type: System.Data.DataTableNewRowEventArgs
      description: "Oggetto <xref href=&quot;System.Data.DataTableNewRowEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.DataTable.OnTableNewRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ParentRelations
  id: ParentRelations
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
  fullName: System.Data.DataTable.ParentRelations
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene la raccolta di relazioni padre dell&quot;oggetto <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: ''
  example:
  - "The following example uses the ParentRelations property to return each parent <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. Each relation is then used as an argument in the <xref:System.Data.DataRow.GetParentRows%2A> method of the <xref:System.Data.DataRow> to return an array of rows. The value of each column in the row is then printed.  \n  \n [!code-cs[Classic WebData DataTable.ParentRelations Example#1](~/add/codesnippet/csharp/p-system.data.datatable._9_1.cs)]\n [!code-vb[Classic WebData DataTable.ParentRelations Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._9_1.vb)]"
  syntax:
    content: public System.Data.DataRelationCollection ParentRelations { get; }
    return:
      type: System.Data.DataRelationCollection
      description: "Oggetto <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref> che contiene le relazioni padre per la tabella. Viene restituita una raccolta vuota se non <xref href=&quot;System.Data.DataRelation&quot;> </xref> presenti oggetti."
  overload: System.Data.DataTable.ParentRelations*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Prefix
  id: Prefix
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Prefix
  nameWithType: DataTable.Prefix
  fullName: System.Data.DataTable.Prefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta lo spazio dei nomi per la rappresentazione XML dei dati archiviati nel <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  syntax:
    content: public string Prefix { get; set; }
    return:
      type: System.String
      description: "Il prefisso del <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.PrimaryKey
  id: PrimaryKey
  parent: System.Data.DataTable
  langs:
  - csharp
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
  fullName: System.Data.DataTable.PrimaryKey
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta una matrice di colonne di tale funzione come chiavi primarie per la tabella di dati."
  remarks: "La chiave primaria di una tabella deve essere univoca per identificare il record nella tabella. È inoltre possibile disporre di una tabella con una chiave primaria costituita da due o più colonne. Questo errore si verifica quando una singola colonna non può contenere valori univoci sufficienti. Ad esempio, una chiave primaria con due colonne può essere costituito da una colonna &quot;FirstName&quot; e &quot;Cognome&quot;. Poiché le chiavi primarie possono essere composto da più di una colonna, la proprietà PrimaryKey è costituito da una matrice di <xref:System.Data.DataColumn>oggetti.</xref:System.Data.DataColumn>"
  example:
  - "The first example shows how to return the primary key columns for a <xref:System.Data.DataTable> displayed in a `DataGrid`. The second example demonstrates how to set the primary key columns for a <xref:System.Data.DataTable>.  \n  \n [!code-cs[Classic WebData DataTable.PrimaryKey Example#1](~/add/codesnippet/csharp/p-system.data.datatable._4_1.cs)]\n [!code-vb[Classic WebData DataTable.PrimaryKey Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._4_1.vb)]"
  syntax:
    content: public System.Data.DataColumn[] PrimaryKey { get; set; }
    return:
      type: System.Data.DataColumn[]
      description: "Matrice di <xref href=&quot;System.Data.DataColumn&quot;> </xref> oggetti."
  overload: System.Data.DataTable.PrimaryKey*
  exceptions:
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "La chiave è una chiave esterna."
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.IO.Stream)
  id: ReadXml(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(Stream)
  nameWithType: DataTable.ReadXml(Stream)
  fullName: System.Data.DataTable.ReadXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema e dati di <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzando specificata <xref:System.IO.Stream>.</xref:System.IO.Stream>"
  remarks: "L&quot;oggetto corrente <xref:System.Data.DataTable>e i relativi discendenti vengono caricati con i dati da fornito <xref:System.IO.Stream>.</xref:System.IO.Stream> </xref:System.Data.DataTable> Il comportamento di questo metodo è identico a quello del <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>(metodo), tranne che in questo caso, i dati vengono caricati solo per la tabella corrente e dei relativi discendenti.</xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>       Il metodo ReadXml fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataTable>da un documento XML, mentre il <xref:System.Data.DataTable.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.WriteXml%2A>e <xref:System.Data.DataTable.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataTable`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-cs[DataWorks DataTable.ReadXml#1](~/add/codesnippet/csharp/m-system.data.datatable._19_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXml#1](~/add/codesnippet/visualbasic/m-system.data.datatable._19_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Oggetto che deriva da<xref:System.IO.Stream></xref:System.IO.Stream>"
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.IO.TextReader)
  id: ReadXml(System.IO.TextReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(TextReader)
  nameWithType: DataTable.ReadXml(TextReader)
  fullName: System.Data.DataTable.ReadXml(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema e dati di <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzando specificata <xref:System.IO.TextReader>.</xref:System.IO.TextReader>"
  remarks: "L&quot;oggetto corrente <xref:System.Data.DataTable>e i relativi discendenti vengono caricati con i dati da fornito <xref:System.IO.TextReader>.</xref:System.IO.TextReader> </xref:System.Data.DataTable> Il comportamento di questo metodo è identico a quello del <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>(metodo), tranne che in questo caso, i dati vengono caricati solo per la tabella corrente e dei relativi discendenti.</xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>       Il metodo ReadXml fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataTable>da un documento XML, mentre il <xref:System.Data.DataTable.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.WriteXml%2A>e <xref:System.Data.DataTable.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataTable`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to a memory stream, by invoking the <xref:System.Data.DataTable.WriteXml%2A> method. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-vb[DataWorks DataTable.ReadXmlText#1](~/add/codesnippet/visualbasic/m-system.data.datatable._26_1.vb)]\n [!code-cs[DataWorks DataTable.ReadXmlText#1](~/add/codesnippet/csharp/m-system.data.datatable._26_1.cs)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Il <xref:System.IO.TextReader>che verrà utilizzato per leggere i dati.</xref:System.IO.TextReader>"
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.String)
  id: ReadXml(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(String)
  nameWithType: DataTable.ReadXml(String)
  fullName: System.Data.DataTable.ReadXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge il XML schema e dati di <xref href=&quot;System.Data.DataTable&quot;> </xref> dal file specificato."
  remarks: "L&quot;oggetto corrente <xref:System.Data.DataTable>e i relativi discendenti vengono caricati con i dati nel file denominato fornito <xref:System.String>.</xref:System.String> </xref:System.Data.DataTable> Il comportamento di questo metodo è identico a quello del <xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>(metodo), tranne che in questo caso, i dati vengono caricati solo per la tabella corrente e dei relativi discendenti.</xref:System.Data.DataSet.ReadXml%2A?displayProperty=fullName>       Il metodo ReadXml fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataTable>da un documento XML, mentre il <xref:System.Data.DataTable.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.WriteXml%2A>e <xref:System.Data.DataTable.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataTable`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione.      ```   using System.Data;   public class A {      static void Main(string[] args) {         DataTable tabl = new DataTable(&quot;mytable&quot;);         tabl.Columns.Add(new DataColumn(&quot;id&quot;, typeof(int)));         for (int i = 0; i < 10; i++) {            DataRow row = tabl.NewRow();            row[&quot;id&quot;] = i;            tabl.Rows.Add(row);         }         tabl.WriteXml(&quot;f.xml&quot;, XmlWriteMode.WriteSchema);         DataTable newt = new DataTable();         newt.ReadXml(&quot;f.xml&quot;);      }   }   ```"
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to disk. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlString#1](~/add/codesnippet/csharp/m-system.data.datatable._14_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlString#1](~/add/codesnippet/visualbasic/m-system.data.datatable._14_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Il nome del file da cui leggere i dati."
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  id: ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXml(XmlReader)
  nameWithType: DataTable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge i dati in e XML Schema di <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzando specificata <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "L&quot;oggetto corrente <xref:System.Data.DataTable>e i relativi discendenti vengono caricati con i dati nel file denominato fornito <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> </xref:System.Data.DataTable> Il comportamento di questo metodo è identico a quello del metodo ReadXml, ad eccezione del fatto che in questo caso, in cui i dati vengono caricati solo per la tabella corrente e dei relativi discendenti.       Il metodo ReadXml fornisce un modo per leggere solo i dati o dati e schema in un <xref:System.Data.DataTable>da un documento XML, mentre il <xref:System.Data.DataTable.ReadXmlSchema%2A>metodo legge solo lo schema.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.WriteXml%2A>e <xref:System.Data.DataTable.WriteXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati XML, oppure lo schema e dati dal `DataTable`, utilizzare il `WriteXml` metodo. Per scrivere solo lo schema, utilizzare il `WriteXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>       Se viene specificato uno schema inline, lo schema inline viene utilizzato per estendere la struttura relazionale esistente prima di caricare i dati. Se sono presenti conflitti (ad esempio, la stessa colonna nella stessa tabella definita con diversi tipi di dati), viene generata un&quot;eccezione.       Se viene specificato alcuno schema di in linea, la struttura relazionale viene esteso tramite inferenza, se necessario, in base alla struttura del documento XML. Se lo schema non può essere esteso tramite inferenza per esporre tutti i dati, viene generata un&quot;eccezione.      > [!NOTE] > Il `DataSet` non associa un elemento XML di corrispondente `DataColumn` o `DataTable` caratteri XML validi come (&quot;_&quot;) quando vengono sottoposti a escape nel XML serializzato. Il `DataSet` delle sequenze di escape solo caratteri XML non validi nei nomi degli elementi XML e pertanto può utilizzare solo lo stesso. Quando vengono sottoposti a escape caratteri validi nel nome dell&quot;elemento XML, l&quot;elemento viene ignorato durante l&quot;elaborazione."
  example:
  - "The following example creates a <xref:System.Data.DataTable> containing two columns and ten rows. The example writes the <xref:System.Data.DataTable> schema and data to an <xref:System.Xml.XmlReader>. The example creates a second <xref:System.Data.DataTable> and calls the ReadXml method to fill it with schema and data from the <xref:System.Xml.XmlReader> instance.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlXmlReader#1](~/add/codesnippet/csharp/m-system.data.datatable._10_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlXmlReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._10_1.vb)]"
  syntax:
    content: public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Il <xref:System.Xml.XmlReader>che verrà utilizzato per leggere i dati.</xref:System.Xml.XmlReader>"
    return:
      type: System.Data.XmlReadMode
      description: "Il <xref href=&quot;System.Data.XmlReadMode&quot;> </xref> utilizzato per leggere i dati."
  overload: System.Data.DataTable.ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  id: ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(Stream)
  nameWithType: DataTable.ReadXmlSchema(Stream)
  fullName: System.Data.DataTable.ReadXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge un XML schema nel <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzando il flusso specificato."
  remarks: "Utilizzare il metodo ReadXmlSchema per creare lo schema per un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Lo schema include le definizioni di tabella, relazioni e vincoli.       Per scrivere uno schema di un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo.</xref:System.Data.DataTable.WriteXmlSchema%2A>       Lo schema XML viene interpretato in base XSD standard.       Il danneggiamento dei dati può verificarsi se il DataType e i tipi xs: Type non corrispondono. Verrà generata alcuna eccezione.       Il `ReadXmlSchema` metodo in genere viene richiamato prima di richiamare il <xref:System.Data.DataTable.ReadXml%2A>metodo che viene utilizzato per riempire la <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.ReadXml%2A>       Per creare una relazione annidata utilizzando lo schema XML, usare elementi nidificati impliciti. È anche possibile configurare la relazione annidata per l&quot;utilizzo di nomi di colonna espliciti. Gli elementi devono essere nidificati in modo implicito in ordine per il corrispondente DataTable deve far parte di una relazione annidata."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlIOStream#1](~/add/codesnippet/csharp/m-system.data.datatable._8_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlIOStream#1](~/add/codesnippet/visualbasic/m-system.data.datatable._8_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Il flusso usato per leggere lo schema."
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  id: ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(TextReader)
  nameWithType: DataTable.ReadXmlSchema(TextReader)
  fullName: System.Data.DataTable.ReadXmlSchema(TextReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge un XML schema nel <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzando specificata <xref:System.IO.TextReader>.</xref:System.IO.TextReader>"
  remarks: "Utilizzare il metodo ReadXmlSchema per creare lo schema per un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Lo schema include le definizioni di tabella, relazioni e vincoli.       Per scrivere uno schema di un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo.</xref:System.Data.DataTable.WriteXmlSchema%2A>       Lo schema XML viene interpretato in base XSD standard.       Il danneggiamento dei dati può verificarsi se il DataType e i tipi xs: Type non corrispondono. Verrà generata alcuna eccezione.       Il `ReadXmlSchema` metodo in genere viene richiamato prima di richiamare il <xref:System.Data.DataTable.ReadXml%2A>metodo che viene utilizzato per riempire la <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.ReadXml%2A>       Per creare una relazione annidata utilizzando lo schema XML, usare elementi nidificati impliciti. È anche possibile riconfigurare la relazione annidata per l&quot;utilizzo di nomi di colonna espliciti. Gli elementi devono essere nidificati in modo implicito in ordine per il corrispondente DataTable deve far parte di una relazione annidata."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.IO.StreamReader> (which inherits from <xref:System.IO.TextReader>) as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchema#1](~/add/codesnippet/csharp/m-system.data.datatable._12_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchema#1](~/add/codesnippet/visualbasic/m-system.data.datatable._12_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "Il <xref:System.IO.TextReader>usato per leggere le informazioni sullo schema.</xref:System.IO.TextReader>"
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.String)
  id: ReadXmlSchema(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(String)
  nameWithType: DataTable.ReadXmlSchema(String)
  fullName: System.Data.DataTable.ReadXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge un XML schema nel <xref href=&quot;System.Data.DataTable&quot;> </xref> dal file specificato."
  remarks: "Utilizzare il metodo ReadXmlSchema per creare lo schema per un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Lo schema include le definizioni di tabella, relazioni e vincoli.       Per scrivere uno schema di un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo.</xref:System.Data.DataTable.WriteXmlSchema%2A>       Lo schema XML viene interpretato in base XSD standard.       Il danneggiamento dei dati può verificarsi se il DataType e i tipi xs: Type non corrispondono. Verrà generata alcuna eccezione.       Il `ReadXmlSchema` metodo in genere viene richiamato prima di richiamare il <xref:System.Data.DataTable.ReadXml%2A>metodo utilizzato per riempire il `DataTable`.</xref:System.Data.DataTable.ReadXml%2A>       Per creare una relazione annidata utilizzando lo schema XML, usare elementi nidificati impliciti. È anche possibile riconfigurare la relazione annidata per l&quot;utilizzo di nomi di colonna espliciti. Gli elementi devono essere nidificati in modo implicito in ordine per il corrispondente DataTable deve far parte di una relazione annidata."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a file. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using the file as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchemaString#1](~/add/codesnippet/csharp/m-system.data.datatable._16_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchemaString#1](~/add/codesnippet/visualbasic/m-system.data.datatable._16_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Il nome del file da cui leggere le informazioni sullo schema."
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  id: ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataTable.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSchema(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge un XML schema nel <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzando specificata <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  remarks: "Utilizzare il metodo ReadXmlSchema per creare lo schema per un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Lo schema include le definizioni di tabella, relazioni e vincoli.       Per scrivere uno schema di un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo.</xref:System.Data.DataTable.WriteXmlSchema%2A>       Lo schema XML viene interpretato in base XSD standard.       Il danneggiamento dei dati può verificarsi se il DataType e i tipi xs: Type non corrispondono. Verrà generata alcuna eccezione.       Il `ReadXmlSchema` metodo in genere viene richiamato prima di richiamare il <xref:System.Data.DataTable.ReadXml%2A>metodo che viene utilizzato per riempire la <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.ReadXml%2A>      > [!NOTE] > È il modo per creare una relazione annidata utilizzando lo schema XML per gli elementi nidificati impliciti. Inoltre, la relazione nidificata potrebbe essere nuovamente cablata, utilizzare nomi di colonna espliciti. È obbligatoria, gli elementi devono essere annidato in modo implicito per DataTable corrispondente deve far parte di una relazione annidata."
  example:
  - "The following console application creates a new <xref:System.Data.DataTable>, and writes the schema for that table to a <xref:System.IO.MemoryStream>. Then, the example creates a new <xref:System.Data.DataTable> and reads its schema from the saved XML schema, using a <xref:System.Xml.XmlTextReader> (which inherits from <xref:System.Xml.XmlReader>) as its source.  \n  \n [!code-cs[DataWorks DataTable.ReadXmlSchemaReader#1](~/add/codesnippet/csharp/m-system.data.datatable._17_1.cs)]\n [!code-vb[DataWorks DataTable.ReadXmlSchemaReader#1](~/add/codesnippet/visualbasic/m-system.data.datatable._17_1.vb)]"
  syntax:
    content: public void ReadXmlSchema (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Il <xref:System.Xml.XmlReader>usato per leggere le informazioni sullo schema.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataTable.ReadXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  id: ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataTable.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSerializable(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Legge da un flusso XML."
  syntax:
    content: protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Oggetto <xref:System.Xml.XmlReader>oggetto.</xref:System.Xml.XmlReader>"
  overload: System.Data.DataTable.ReadXmlSerializable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RejectChanges
  id: RejectChanges
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RejectChanges()
  nameWithType: DataTable.RejectChanges()
  fullName: System.Data.DataTable.RejectChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Il rollback di tutte le modifiche apportate alla tabella dopo il caricamento o l&quot;ora dell&quot;ultimo <xref:System.Data.DataTable.AcceptChanges*>è stato chiamato.</xref:System.Data.DataTable.AcceptChanges*>"
  remarks: "Quando RejectChanges viene chiamato, qualsiasi <xref:System.Data.DataRow>gli oggetti che sono ancora in modalità di modifica annullate le modifiche apportate.</xref:System.Data.DataRow> Le nuove righe vengono rimosse. Le righe con la <xref:System.Data.DataRowState>impostato su `Modified` o `Deleted` viene ripristinato lo stato originale.</xref:System.Data.DataRowState>"
  example:
  - "The following example makes several changes to a <xref:System.Data.DataTable>, but rejects the changes by invoking the RejectChanges method.  \n  \n [!code-cs[Classic WebData DataTable.RejectChanges Example#1](~/add/codesnippet/csharp/m-system.data.datatable._3_1.cs)]\n [!code-vb[Classic WebData DataTable.RejectChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._3_1.vb)]"
  syntax:
    content: public void RejectChanges ();
    parameters: []
  overload: System.Data.DataTable.RejectChanges*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RemotingFormat
  id: RemotingFormat
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
  fullName: System.Data.DataTable.RemotingFormat
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta il formato di serializzazione."
  syntax:
    content: public System.Data.SerializationFormat RemotingFormat { get; set; }
    return:
      type: System.Data.SerializationFormat
      description: "Oggetto <xref href=&quot;System.Data.SerializationFormat&quot;> </xref> enumerazione che specifica la <xref uid=&quot;langword_csharp_Binary&quot; name=&quot;Binary&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_Xml&quot; name=&quot;Xml&quot; href=&quot;&quot;> </xref> la serializzazione."
  overload: System.Data.DataTable.RemotingFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Reset
  id: Reset
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Reset()
  nameWithType: DataTable.Reset()
  fullName: System.Data.DataTable.Reset()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Reimposta il <xref href=&quot;System.Data.DataTable&quot;> </xref> allo stato originale. Reimpostazione rimuove tutti i dati, indici, relazioni e colonne della tabella. Se un set di dati include un oggetto DataTable, la tabella sarà comunque parte del set di dati dopo la reimpostazione della tabella."
  syntax:
    content: public virtual void Reset ();
    parameters: []
  overload: System.Data.DataTable.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowChanged
  id: RowChanged
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowChanged
  nameWithType: DataTable.RowChanged
  fullName: System.Data.DataTable.RowChanged
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica dopo un <xref href=&quot;System.Data.DataRow&quot;> </xref> è stata modificata correttamente."
  remarks: "Per ulteriori informazioni, vedere [gestione di eventi DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.RowChanged Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._0_1.vb)]
     [!code-cs[Classic WebData DataTable.RowChanged Example#1](~/add/codesnippet/csharp/e-system.data.datatable._0_1.cs)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowChanged;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowChanging
  id: RowChanging
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowChanging
  nameWithType: DataTable.RowChanging
  fullName: System.Data.DataTable.RowChanging
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica quando un <xref href=&quot;System.Data.DataRow&quot;> </xref> in fase di modifica."
  remarks: "Per ulteriori informazioni, vedere [gestione di eventi DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.RowChanging Example#1](~/add/codesnippet/csharp/e-system.data.datatable._1_1.cs)]
     [!code-vb[Classic WebData DataTable.RowChanging Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._1_1.vb)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowChanging;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowDeleted
  id: RowDeleted
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowDeleted
  nameWithType: DataTable.RowDeleted
  fullName: System.Data.DataTable.RowDeleted
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica dopo l&quot;eliminazione di una riga nella tabella."
  remarks: "Per ulteriori informazioni, vedere [gestione di eventi DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-vb[Classic WebData DataTable.RowDeleted Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._3_1.vb)]
     [!code-cs[Classic WebData DataTable.RowDeleted Example#1](~/add/codesnippet/csharp/e-system.data.datatable._3_1.cs)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowDeleted;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.RowDeleting
  id: RowDeleting
  parent: System.Data.DataTable
  langs:
  - csharp
  name: RowDeleting
  nameWithType: DataTable.RowDeleting
  fullName: System.Data.DataTable.RowDeleting
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica prima che una riga nella tabella sta per essere eliminata."
  remarks: "Per ulteriori informazioni, vedere [gestione di eventi DataTable](~/add/includes/ajax-current-ext-md.md)."
  example:
  - >-
    [!code-cs[Classic WebData DataTable.RowDeleting Example#1](~/add/codesnippet/csharp/e-system.data.datatable._2_1.cs)]
     [!code-vb[Classic WebData DataTable.RowDeleting Example#1](~/add/codesnippet/visualbasic/e-system.data.datatable._2_1.vb)]
  syntax:
    content: public event System.Data.DataRowChangeEventHandler RowDeleting;
    return:
      type: System.Data.DataRowChangeEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Rows
  id: Rows
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Rows
  nameWithType: DataTable.Rows
  fullName: System.Data.DataTable.Rows
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene la raccolta di righe che appartengono a questa tabella."
  remarks: "Per creare un nuovo <xref:System.Data.DataRow>, è necessario utilizzare il <xref:System.Data.DataTable.NewRow%2A>per restituire un nuovo oggetto.</xref:System.Data.DataTable.NewRow%2A> </xref:System.Data.DataRow> Tale oggetto viene configurato automaticamente in base allo schema definito per il <xref:System.Data.DataTable>tramite la raccolta di <xref:System.Data.DataColumn>oggetti.</xref:System.Data.DataColumn> </xref:System.Data.DataTable> Dopo aver creato una nuova riga e impostare i valori per ogni colonna nella riga, aggiungere la riga di <xref:System.Data.DataRowCollection>utilizzando il `Add` metodo.</xref:System.Data.DataRowCollection>       Ogni <xref:System.Data.DataRow>nella raccolta rappresenta una riga di dati della tabella.</xref:System.Data.DataRow> Per eseguire il commit di una modifica al valore di una colonna nella riga, è necessario richiamare il <xref:System.Data.DataTable.AcceptChanges%2A>metodo.</xref:System.Data.DataTable.AcceptChanges%2A>"
  example:
  - "The following shows two examples of returning and setting rows. The first example uses the Rows property and prints the value of each column for every row. The second example uses the <xref:System.Data.DataTable> object's <xref:System.Data.DataTable.NewRow%2A> method to create a new <xref:System.Data.DataRow> object with the schema of the <xref:System.Data.DataTable>. After setting the row values, the row is added to the <xref:System.Data.DataRowCollection> through the `Add` method.  \n  \n [!code-cs[Classic WebData DataTable.Rows Example#1](~/add/codesnippet/csharp/p-system.data.datatable._1_1.cs)]\n [!code-vb[Classic WebData DataTable.Rows Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._1_1.vb)]"
  syntax:
    content: public System.Data.DataRowCollection Rows { get; }
    return:
      type: System.Data.DataRowCollection
      description: "Oggetto <xref href=&quot;System.Data.DataRowCollection&quot;> </xref> contenente <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti; in caso contrario, un valore null se nessun <xref href=&quot;System.Data.DataRow&quot;> </xref> presenti oggetti."
  overload: System.Data.DataTable.Rows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select
  id: Select
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select()
  nameWithType: DataTable.Select()
  fullName: System.Data.DataTable.Select()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una matrice di tutti i <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti."
  remarks: "Per garantire l&quot;ordinamento corretto, specificare criteri di ordinamento con <xref:System.Data.DataTable.Select%2A>o <xref:System.Data.DataTable.Select%2A>.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataTable.Select%2A>"
  example:
  - "The following example returns an array of <xref:System.Data.DataRow> objects through the Select method.  \n  \n [!code-cs[Classic WebData DataTable.Select Example#1](~/add/codesnippet/csharp/m-system.data.datatable._6_1.cs)]\n [!code-vb[Classic WebData DataTable.Select Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._6_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select ();
    parameters: []
    return:
      type: System.Data.DataRow[]
      description: "Matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String)
  id: Select(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String)
  nameWithType: DataTable.Select(String)
  fullName: System.Data.DataTable.Select(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una matrice di tutti i <xref href=&quot;System.Data.DataRow&quot;> </xref> gli oggetti che soddisfano i criteri di filtro."
  remarks: "Per creare il `filterExpression` argomento, utilizzare le stesse regole valide per il <xref:System.Data.DataColumn>della classe <xref:System.Data.DataColumn.Expression%2A>valore della proprietà per la creazione di filtri.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn>       Per garantire l&quot;ordinamento corretto, specificare criteri di ordinamento con <xref:System.Data.DataTable.Select%2A>o <xref:System.Data.DataTable.Select%2A>.</xref:System.Data.DataTable.Select%2A> </xref:System.Data.DataTable.Select%2A>       Se la colonna per il filtro contiene un valore null, non sarà parte del risultato."
  example:
  - "The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select1 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._7_1.cs)]\n [!code-vb[Classic WebData DataTable.Select1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._7_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression);
    parameters:
    - id: filterExpression
      type: System.String
      description: "I criteri da utilizzare per filtrare le righe. Per esempi su come filtrare le righe, vedere [DataView RowFilter sintassi \\[c#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    return:
      type: System.Data.DataRow[]
      description: "Matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String,System.String)
  id: Select(System.String,System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String,String)
  nameWithType: DataTable.Select(String,String)
  fullName: System.Data.DataTable.Select(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una matrice di tutti i <xref href=&quot;System.Data.DataRow&quot;> </xref> gli oggetti che soddisfano i criteri di filtro, nella sequenza di ordinamento specificato."
  remarks: "Form il `filterExpression` argomento, utilizzare le stesse regole per la creazione di <xref:System.Data.DataColumn>della classe <xref:System.Data.DataColumn.Expression%2A>valore della proprietà.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> Il `Sort` anche l&quot;argomento utilizza le stesse regole per la creazione della classe <xref:System.Data.DataColumn.Expression%2A>stringhe.</xref:System.Data.DataColumn.Expression%2A>       Se la colonna per il filtro contiene un valore null, non sarà parte del risultato."
  example:
  - "The following example uses a filter expression to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select2 Example#1](~/add/codesnippet/csharp/m-system.data.datatable._11_1.cs)]\n [!code-vb[Classic WebData DataTable.Select2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._11_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression, string sort);
    parameters:
    - id: filterExpression
      type: System.String
      description: "I criteri da utilizzare per filtrare le righe. Per esempi su come filtrare le righe, vedere [DataView RowFilter sintassi \\[c#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    - id: sort
      type: System.String
      description: "Stringa che specifica la direzione di ordinamento e di colonna."
    return:
      type: System.Data.DataRow[]
      description: "Matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti corrispondono all&quot;espressione di filtro."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  id: Select(System.String,System.String,System.Data.DataViewRowState)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Select(String,String,DataViewRowState)
  nameWithType: DataTable.Select(String,String,DataViewRowState)
  fullName: System.Data.DataTable.Select(String,String,DataViewRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene una matrice di tutti i <xref href=&quot;System.Data.DataRow&quot;> </xref> gli oggetti che corrispondono al filtro sequenza di ordinamento che corrispondono allo stato specificato."
  remarks: "Form il `filterExpression` argomento, utilizzare le stesse regole per la creazione di <xref:System.Data.DataColumn>della classe <xref:System.Data.DataColumn.Expression%2A>valore della proprietà.</xref:System.Data.DataColumn.Expression%2A> </xref:System.Data.DataColumn> Il `Sort` anche l&quot;argomento utilizza le stesse regole per la creazione della classe <xref:System.Data.DataColumn.Expression%2A>stringhe.</xref:System.Data.DataColumn.Expression%2A>       Se la colonna per il filtro contiene un valore null, non sarà parte del risultato."
  example:
  - "The following example uses a filter expression and record state to return an array of <xref:System.Data.DataRow> objects.  \n  \n [!code-cs[Classic WebData DataTable.Select3 Example#1](~/add/codesnippet/csharp/c72cdab9-f58a-41a1-a322-_1.cs)]\n [!code-vb[Classic WebData DataTable.Select3 Example#1](~/add/codesnippet/visualbasic/c72cdab9-f58a-41a1-a322-_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] Select (string filterExpression, string sort, System.Data.DataViewRowState recordStates);
    parameters:
    - id: filterExpression
      type: System.String
      description: "I criteri da utilizzare per filtrare le righe. Per esempi su come filtrare le righe, vedere [DataView RowFilter sintassi \\[c#\\]](http://www.csharp-examples.net/dataview-rowfilter/)."
    - id: sort
      type: System.String
      description: "Stringa che specifica la direzione di ordinamento e di colonna."
    - id: recordStates
      type: System.Data.DataViewRowState
      description: "Uno del <xref href=&quot;System.Data.DataViewRowState&quot;> </xref> valori."
    return:
      type: System.Data.DataRow[]
      description: "Matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref> oggetti."
  overload: System.Data.DataTable.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.Site
  id: Site
  parent: System.Data.DataTable
  langs:
  - csharp
  name: Site
  nameWithType: DataTable.Site
  fullName: System.Data.DataTable.Site
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta un <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> per il <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Siti associano un <xref:System.ComponentModel.Component>per un <xref:System.ComponentModel.Container>e abilitare la comunicazione tra di essi, nonché fornire un modo per il contenitore gestire i relativi componenti.</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.Data.DataTable&quot;></xref>."
  overload: System.Data.DataTable.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Per una descrizione di questo membro, vedere &lt;xref:System.ComponentModel.IListSource.ContainsListCollection%2A?displayProperty=fullName&gt;."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.DataTable>esegue il cast dell&quot;istanza di un <xref:System.ComponentModel.IListSource>interfaccia.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataTable>"
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la raccolta è una raccolta di <xref:System.Collections.IList>oggetti; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IList>"
  overload: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Per una descrizione di questo membro, vedere &lt;xref:System.ComponentModel.IListSource.GetList%2A?displayProperty=fullName&gt;."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.DataTable>esegue il cast dell&quot;istanza di un <xref:System.ComponentModel.IListSource>interfaccia.</xref:System.ComponentModel.IListSource> </xref:System.Data.DataTable>"
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Un <xref:System.Collections.IList>che può essere associato a un&quot;origine dati dall&quot;oggetto.</xref:System.Collections.IList>"
  overload: System.Data.DataTable.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Per una descrizione di questo membro, vedere &lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A?displayProperty=fullName&gt;."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.DataSet>esegue il cast dell&quot;istanza di un <xref:System.Xml.Serialization.IXmlSerializable>interfaccia.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchema
      description: "Un <xref:System.Xml.Schema.XmlSchema>che descrive la rappresentazione XML dell&quot;oggetto prodotto dal <> </> *> (metodo) e utilizzato dal <> </> *> metodo.</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Per una descrizione di questo membro, vedere &lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A?displayProperty=fullName&gt;."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.DataSet>esegue il cast dell&quot;istanza di un <xref:System.Xml.Serialization.IXmlSerializable>interfaccia.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "Oggetto XmlReader."
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: System.Data.DataTable
  langs:
  - csharp
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Per una descrizione di questo membro, vedere &lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A?displayProperty=fullName&gt;."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.DataSet>esegue il cast dell&quot;istanza di un <xref:System.Xml.Serialization.IXmlSerializable>interfaccia.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Data.DataSet>"
  syntax:
    content: void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "XmlWriter."
  overload: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableCleared
  id: TableCleared
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableCleared
  nameWithType: DataTable.TableCleared
  fullName: System.Data.DataTable.TableCleared
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica dopo un <xref href=&quot;System.Data.DataTable&quot;> </xref> è deselezionata."
  remarks: "Viene generato l&quot;evento di TableCleared immediatamente dopo che tutte le righe sono state cancellate ma prima che il <xref:System.Data.DataTable.Clear%2A>metodo restituisce il controllo al chiamante.</xref:System.Data.DataTable.Clear%2A> Non viene generato l&quot;evento TableCleared se sono presenti eccezioni durante l&quot;operazione di cancellazione."
  syntax:
    content: public event System.Data.DataTableClearEventHandler TableCleared;
    return:
      type: System.Data.DataTableClearEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableClearing
  id: TableClearing
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableClearing
  nameWithType: DataTable.TableClearing
  fullName: System.Data.DataTable.TableClearing
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica quando un <xref href=&quot;System.Data.DataTable&quot;> </xref> è deselezionata."
  remarks: "Viene generato l&quot;evento di TableClearing prima dell&quot;elaborazione del <xref:System.Data.DataTable.Clear%2A>inizia l&quot;operazione.</xref:System.Data.DataTable.Clear%2A> Questo evento viene generato sempre quando il <xref:System.Data.DataTable.Clear%2A>metodo viene richiamato, anche se la tabella contiene zero righe.</xref:System.Data.DataTable.Clear%2A>"
  syntax:
    content: public event System.Data.DataTableClearEventHandler TableClearing;
    return:
      type: System.Data.DataTableClearEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.TableName
  id: TableName
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableName
  nameWithType: DataTable.TableName
  fullName: System.Data.DataTable.TableName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene o imposta il nome del <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "TableName è utilizzato per restituire la tabella dall&quot;elemento padre <xref:System.Data.DataSet>dell&quot;oggetto <xref:System.Data.DataTableCollection>(restituito dal <xref:System.Data.DataSet.Tables%2A>proprietà).</xref:System.Data.DataSet.Tables%2A> </xref:System.Data.DataTableCollection> </xref:System.Data.DataSet>"
  example:
  - "The following example prints the TableName for each table in a collection of <xref:System.Data.DataTable> objects.  \n  \n [!code-cs[Classic WebData DataTable.TableName Example#1](~/add/codesnippet/csharp/p-system.data.datatable._2_1.cs)]\n [!code-vb[Classic WebData DataTable.TableName Example#1](~/add/codesnippet/visualbasic/p-system.data.datatable._2_1.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "Il nome del <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.DataTable.TableName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>o una stringa vuota (&quot;&quot;) viene passato e la tabella appartiene a una raccolta."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "La tabella appartiene a una raccolta che dispone già di una tabella con lo stesso nome. (Confronto è tra maiuscole e minuscole)."
  platform:
  - net462
- uid: System.Data.DataTable.TableNewRow
  id: TableNewRow
  parent: System.Data.DataTable
  langs:
  - csharp
  name: TableNewRow
  nameWithType: DataTable.TableNewRow
  fullName: System.Data.DataTable.TableNewRow
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Si verifica quando un nuovo <xref href=&quot;System.Data.DataRow&quot;> </xref> viene inserito."
  remarks: "Generato dopo un nuovo <xref:System.Data.DataRow>è stato creato utilizzando <xref:System.Data.DataTable.NewRow%2A>.</xref:System.Data.DataTable.NewRow%2A> </xref:System.Data.DataRow> Questo evento viene generato prima richiamato `NewRow` metodo restituisce. Il nuovo <xref:System.Data.DataRow>istanza viene scollegata; non è stato aggiunto alla raccolta.</xref:System.Data.DataRow>"
  syntax:
    content: public event System.Data.DataTableNewRowEventHandler TableNewRow;
    return:
      type: System.Data.DataTableNewRowEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.ToString
  id: ToString
  parent: System.Data.DataTable
  langs:
  - csharp
  name: ToString()
  nameWithType: DataTable.ToString()
  fullName: System.Data.DataTable.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ottiene il <> </> *> e <> </> *>, se è presente come una stringa concatenata."
  remarks: "Ottiene <xref:System.Data.DataTable.TableName%2A>e <xref:System.Data.DataTable.DisplayExpression%2A>per <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.DisplayExpression%2A> </xref:System.Data.DataTable.TableName%2A>"
  example:
  - "The following example returns the <xref:System.Data.DataTable.TableName%2A> and <xref:System.Data.DataTable.DisplayExpression%2A> using the ToString method.  \n  \n [!code-cs[Classic WebData DataTable.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datatable._28_1.cs)]\n [!code-vb[Classic WebData DataTable.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datatable._28_1.vb)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Una stringa costituita la <> </> *> e <> </> *> valori."
  overload: System.Data.DataTable.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream)
  id: WriteXml(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream)
  nameWithType: DataTable.WriteXml(Stream)
  fullName: System.Data.DataTable.WriteXml(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il contenuto corrente del <xref href=&quot;System.Data.DataTable&quot;> </xref> come XML tramite specificata <xref:System.IO.Stream>.</xref:System.IO.Stream>"
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che include il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso in cui verranno scritti i dati."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter)
  id: WriteXml(System.IO.TextWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter)
  nameWithType: DataTable.WriteXml(TextWriter)
  fullName: System.Data.DataTable.WriteXml(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il contenuto corrente del <xref href=&quot;System.Data.DataTable&quot;> </xref> come XML tramite specificata <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che include il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Il <xref:System.IO.TextWriter>con cui scrivere il contenuto.</xref:System.IO.TextWriter>"
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String)
  id: WriteXml(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String)
  nameWithType: DataTable.WriteXml(String)
  fullName: System.Data.DataTable.WriteXml(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il contenuto corrente del <xref href=&quot;System.Data.DataTable&quot;> </xref> come XML utilizzando il file specificato."
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che include il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Il file in cui scrivere i dati XML."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  id: WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter)
  nameWithType: DataTable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.WriteXml(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il contenuto corrente del <xref href=&quot;System.Data.DataTable&quot;> </xref> come XML tramite specificata <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che includono il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Il <xref:System.Xml.XmlWriter>con cui scrivere il contenuto.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  id: WriteXml(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,Boolean)
  nameWithType: DataTable.WriteXml(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il contenuto corrente del <xref href=&quot;System.Data.DataTable&quot;> </xref> come XML tramite specificata <xref:System.IO.Stream>.</xref:System.IO.Stream> Per salvare i dati per la tabella e tutti i relativi discendenti, impostare il <code> writeHierarchy </code> parametro <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataTable>a un documento XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli.       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXml%2A>metodo.</xref:System.Data.DataTable.WriteXml%2A>       In genere il `WriteXml` metodo scrive i dati solo per la tabella corrente. Per scrivere i dati per la tabella corrente e tutti i discendenti, le tabelle correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso in cui verranno scritti i dati."
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere il contenuto della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere i dati per la tabella corrente."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataTable&quot;> </xref> nel file specificato utilizzando l&quot;oggetto specificato <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che include il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso in cui verranno scritti i dati."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  id: WriteXml(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il contenuto corrente del <xref href=&quot;System.Data.DataTable&quot;> </xref> come XML tramite specificata <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> Per salvare i dati per la tabella e tutti i relativi discendenti, impostare il <code> writeHierarchy </code> parametro <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che include il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       In genere il `WriteXml` metodo scrive i dati solo per la tabella corrente. Per scrivere i dati per la tabella corrente e le relative tabelle correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to `true`.  \n  \n [!code-cs[DataWorks DataTable.WriteXml#1](~/add/codesnippet/csharp/m-system.data.datatable._1_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXml#1](~/add/codesnippet/visualbasic/m-system.data.datatable._1_1.vb)]"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Il <xref:System.IO.TextWriter>con cui scrivere il contenuto.</xref:System.IO.TextWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere il contenuto della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere i dati per la tabella corrente."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzando l&quot;oggetto specificato <xref:System.IO.TextWriter>e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.IO.TextWriter> Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che include il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Il <xref:System.IO.TextWriter>utilizzata per scrivere il documento.</xref:System.IO.TextWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Boolean)
  id: WriteXml(System.String,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,Boolean)
  nameWithType: DataTable.WriteXml(String,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il contenuto corrente del <xref href=&quot;System.Data.DataTable&quot;> </xref> come XML utilizzando il file specificato. Per salvare i dati per la tabella e tutti i relativi discendenti, impostare il <code> writeHierarchy </code> parametro <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che include il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.       In genere il `WriteXml` metodo scrive i dati solo per la tabella corrente. Per scrivere i dati per la tabella corrente e tutti i discendenti, le tabelle correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "Il file in cui scrivere i dati XML."
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere il contenuto della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere i dati per la tabella corrente."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  id: WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataTable&quot;> </xref> usando il file specificato e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che includono il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode);
    parameters:
    - id: fileName
      type: System.String
      description: "Il nome del file in cui verranno scritti i dati."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  id: WriteXml(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive il contenuto corrente del <xref href=&quot;System.Data.DataTable&quot;> </xref> come XML tramite specificata <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che includono il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.       In genere il `WriteXml` metodo scrive i dati solo per la tabella corrente. Per scrivere i dati per la tabella corrente e le relative tabelle derivate correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Il <xref:System.Xml.XmlWriter>con cui scrivere il contenuto.</xref:System.Xml.XmlWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere il contenuto della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere i dati per la tabella corrente."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzando l&quot;oggetto specificato <xref:System.Xml.XmlWriter>e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.Xml.XmlWriter> Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che includono il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Il <xref:System.Xml.XmlWriter>utilizzata per scrivere il documento.</xref:System.Xml.XmlWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(Stream,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataTable&quot;> </xref> nel file specificato utilizzando l&quot;oggetto specificato <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Per salvare i dati per la tabella e tutti i relativi discendenti, impostare il <code> writeHierarchy </code> parametro <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un `DataTable` in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che include il `XmlWriteMode` parametro e impostarne il valore su `WriteSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.       In genere, il `WriteXml` metodo salva i dati solo per la tabella corrente. Il `WriteXml` metodo fornisce un modo per scrivere solo i dati o dati e schema da un `DataTable` in un documento XML, mentre il `WriteXmlSchema` metodo scrive solo lo schema. Per scrivere dati e schema, utilizzare uno degli overload che include il `XmlWriteMode` parametro e impostarne il valore su `WriteSchema`.       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.       In genere il `WriteXml` metodo scrive i dati solo per la tabella corrente. Per scrivere i dati per la tabella corrente e tutti i discendenti, le tabelle correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso in cui verranno scritti i dati."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere il contenuto della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere i dati per la tabella corrente."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(TextWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzando l&quot;oggetto specificato <xref:System.IO.TextWriter>e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.IO.TextWriter> Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Per salvare i dati per la tabella e tutti i relativi discendenti, impostare il <code> writeHierarchy </code> parametro <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che include il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.       In genere, il `WriteXml` metodo salva i dati solo per la tabella corrente. Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che include il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.       In genere il `WriteXml` metodo scrive i dati solo per la tabella corrente. Per scrivere i dati per la tabella corrente e tutti i discendenti, le tabelle correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXml method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.  \n  \n [!code-cs[DataWorks DataTable.WriteXmlIO#1](~/add/codesnippet/csharp/a21e26c1-61d0-4d79-88a3-_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXmlIO#1](~/add/codesnippet/visualbasic/a21e26c1-61d0-4d79-88a3-_1.vb)]  \n  \n The example displays the following output in the console window:  \n  \n```  \n==============================  \nCustomer table, without hierarchy  \n==============================  \n<NewDataSet>  \n  <xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema  \n\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n    <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n      <xs:complexType>  \n        <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n          <xs:element name=\"Table1\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"ID\" type=\"xs:int\" />  \n                <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n        </xs:choice>  \n      </xs:complexType>  \n      <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table1\" />  \n        <xs:field xpath=\"ID\" />  \n      </xs:unique>  \n    </xs:element>  \n  </xs:schema>  \n  <Table1>  \n    <ID>1</ID>  \n    <Name>Mary</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>2</ID>  \n    <Name>Andy</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>3</ID>  \n    <Name>Peter</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>4</ID>  \n    <Name>Russ</Name>  \n  </Table1>  \n</NewDataSet>  \n==============================  \nCustomer table, with hierarchy  \n==============================  \n<NewDataSet>  \n  <xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema  \n\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n    <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n      <xs:complexType>  \n        <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n          <xs:element name=\"Table1\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"ID\" type=\"xs:int\" />  \n                <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n          <xs:element name=\"Table2\">  \n            <xs:complexType>  \n              <xs:sequence>  \n                <xs:element name=\"OrderID\" type=\"xs:int\" />  \n                <xs:element name=\"CustomerID\" type=\"xs:int\" minOccurs=\"0\" />  \n                <xs:element name=\"OrderDate\" type=\"xs:dateTime\" minOccurs=\"0\" />  \n  \n              </xs:sequence>  \n            </xs:complexType>  \n          </xs:element>  \n        </xs:choice>  \n      </xs:complexType>  \n      <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table1\" />  \n        <xs:field xpath=\"ID\" />  \n      </xs:unique>  \n      <xs:unique name=\"Table2_Constraint1\" msdata:ConstraintName=\"Constraint1\" m  \nsdata:PrimaryKey=\"true\">  \n        <xs:selector xpath=\".//Table2\" />  \n        <xs:field xpath=\"OrderID\" />  \n      </xs:unique>  \n      <xs:keyref name=\"CustomerOrder\" refer=\"Constraint1\">  \n        <xs:selector xpath=\".//Table2\" />  \n        <xs:field xpath=\"CustomerID\" />  \n      </xs:keyref>  \n    </xs:element>  \n  </xs:schema>  \n  <Table1>  \n    <ID>1</ID>  \n    <Name>Mary</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>2</ID>  \n    <Name>Andy</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>3</ID>  \n    <Name>Peter</Name>  \n  </Table1>  \n  <Table1>  \n    <ID>4</ID>  \n    <Name>Russ</Name>  \n  </Table1>  \n  <Table2>  \n    <OrderID>1</OrderID>  \n    <CustomerID>1</CustomerID>  \n    <OrderDate>2003-12-02T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>2</OrderID>  \n    <CustomerID>1</CustomerID>  \n    <OrderDate>2004-01-03T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>3</OrderID>  \n    <CustomerID>2</CustomerID>  \n    <OrderDate>2004-11-13T00:00:00.0000000-08:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>4</OrderID>  \n    <CustomerID>3</CustomerID>  \n    <OrderDate>2004-05-16T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>5</OrderID>  \n    <CustomerID>3</CustomerID>  \n    <OrderDate>2004-05-22T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n  <Table2>  \n    <OrderID>6</OrderID>  \n    <CustomerID>4</CustomerID>  \n    <OrderDate>2004-06-15T00:00:00.0000000-07:00</OrderDate>  \n  </Table2>  \n</NewDataSet>  \n```"
  syntax:
    content: public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Il <xref:System.IO.TextWriter>utilizzata per scrivere il documento.</xref:System.IO.TextWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere il contenuto della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere i dati per la tabella corrente."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(String,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataTable&quot;> </xref> usando il file specificato e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>. Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Per salvare i dati per la tabella e tutti i relativi discendenti, impostare il <code> writeHierarchy </code> parametro <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che includono il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.       In genere, il `WriteXml` metodo salva i dati solo per la tabella corrente. Se si desidera salvare i dati per la tabella corrente e tutti gli schemi, il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che includono il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.       In genere il `WriteXml` metodo scrive i dati solo per la tabella corrente. Per scrivere i dati per la tabella corrente e tutte le tabelle correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (string fileName, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "Il nome del file in cui verranno scritti i dati."
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere il contenuto della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere i dati per la tabella corrente."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  id: WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXml(XmlWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive i dati correnti e, facoltativamente, lo schema per il <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzando l&quot;oggetto specificato <xref:System.Xml.XmlWriter>e <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref>.</xref:System.Xml.XmlWriter> Per scrivere lo schema, impostare il valore per il <code> mode </code> parametro <xref uid=&quot;langword_csharp_WriteSchema&quot; name=&quot;WriteSchema&quot; href=&quot;&quot;> </xref>. Per salvare i dati per la tabella e tutti i relativi discendenti, impostare il <code> writeHierarchy </code> parametro <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Il <xref:System.Data.DataTable.WriteXml%2A>metodo fornisce un modo per scrivere solo i dati o dati e schema da un <xref:System.Data.DataTable>in un documento XML, mentre il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo scrive solo lo schema.</xref:System.Data.DataTable.WriteXmlSchema%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXml%2A> Per scrivere dati e schema, utilizzare uno degli overload che includono il <xref:System.Data.XmlWriteMode>parametro e impostarne il valore su `WriteSchema`.</xref:System.Data.XmlWriteMode>       Si noti che lo stesso vale per il <xref:System.Data.DataTable.ReadXml%2A>e <xref:System.Data.DataTable.ReadXmlSchema%2A>metodi, rispettivamente.</xref:System.Data.DataTable.ReadXmlSchema%2A> </xref:System.Data.DataTable.ReadXml%2A> Per leggere i dati XML, oppure lo schema e dati di `DataTable`, utilizzare il `ReadXml` (metodo). Per leggere solo lo schema, utilizzare il `ReadXmlSchema` metodo.       In genere il `WriteXml` metodo scrive i dati solo per la tabella corrente. Per scrivere i dati per la tabella corrente e le relative tabelle derivate correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`.      > [!NOTE] > Un <xref:System.InvalidOperationException>Se in un tipo di colonna, verrà generata la `DataRow` da cui leggere o scrivere implementa <xref:System.Dynamic.IDynamicMetaObjectProvider>e non implementa <xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable> </xref:System.Dynamic.IDynamicMetaObjectProvider> </xref:System.InvalidOperationException>"
  syntax:
    content: public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Il <xref:System.Xml.XmlWriter>utilizzata per scrivere il documento.</xref:System.Xml.XmlWriter>"
    - id: mode
      type: System.Data.XmlWriteMode
      description: "Uno del <xref href=&quot;System.Data.XmlWriteMode&quot;> </xref> valori."
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere il contenuto della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere i dati per la tabella corrente."
  overload: System.Data.DataTable.WriteXml*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  id: WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(Stream)
  nameWithType: DataTable.WriteXmlSchema(Stream)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive la struttura dei dati corrente di <xref href=&quot;System.Data.DataTable&quot;> </xref> come schema XML per il flusso specificato."
  remarks: "Utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataTable>a un documento XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli.       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXml%2A>metodo.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso in cui verrà scritto il XML schema."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  id: WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataTable.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive la struttura dei dati corrente di <xref href=&quot;System.Data.DataTable&quot;> </xref> come schema XML utilizzando specificata <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "Utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataTable>a un documento XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli.       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXml%2A>metodo.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Il <xref:System.IO.TextWriter>con cui scrivere.</xref:System.IO.TextWriter>"
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.String)
  id: WriteXmlSchema(System.String)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(String)
  nameWithType: DataTable.WriteXmlSchema(String)
  fullName: System.Data.DataTable.WriteXmlSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive la struttura dei dati corrente di <xref href=&quot;System.Data.DataTable&quot;> </xref> come schema XML al file specificato."
  remarks: "Utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataTable>a un documento XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli.       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXml%2A>metodo.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Il nome del file da utilizzare."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  id: WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive la struttura dei dati corrente di <xref href=&quot;System.Data.DataTable&quot;> </xref> come schema XML utilizzando specificata <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataTable>a un documento XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli.       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXml%2A>metodo.</xref:System.Data.DataTable.WriteXml%2A>"
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Il <xref:System.Xml.XmlWriter>da utilizzare.</xref:System.Xml.XmlWriter>"
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  id: WriteXmlSchema(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(Stream,Boolean)
  nameWithType: DataTable.WriteXmlSchema(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive la struttura dei dati corrente di <xref href=&quot;System.Data.DataTable&quot;> </xref> come schema XML per il flusso specificato. Per salvare lo schema per la tabella e tutti i relativi discendenti, impostare il <code> writeHierarchy </code> parametro <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataTable>a un documento XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli.       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXml%2A>metodo.</xref:System.Data.DataTable.WriteXml%2A>       In genere il `WriteXmlSchema` metodo scrive lo schema solo per la tabella corrente. Per scrivere lo schema per la tabella corrente e le relative tabelle derivate correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`."
  syntax:
    content: public void WriteXmlSchema (System.IO.Stream stream, bool writeHierarchy);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso in cui verrà scritto il XML schema."
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere lo schema della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere lo schema per la tabella corrente."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  id: WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(TextWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive la struttura dei dati corrente di <xref href=&quot;System.Data.DataTable&quot;> </xref> come schema XML utilizzando specificata <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> Per salvare lo schema per la tabella e tutti i relativi discendenti, impostare il <code> writeHierarchy </code> parametro <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataTable>a un documento XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli.       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXml%2A>metodo.</xref:System.Data.DataTable.WriteXml%2A>       In genere il `WriteXmlSchema` metodo scrive lo schema solo per la tabella corrente. Per scrivere lo schema per la tabella corrente e le relative tabelle derivate correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`."
  example:
  - "The following console application creates two <xref:System.Data.DataTable> instances, adds each to a <xref:System.Data.DataSet>, creates a <xref:System.Data.DataRelation> relating the two tables, and then uses the WriteXmlSchema method to write the data contained within the parent table to a <xref:System.IO.TextWriter>. The example demonstrates the behavior when setting the `writeHierarchy` parameter to each of its values.  \n  \n [!code-cs[DataWorks DataTable.WriteXmlSchema#1](~/add/codesnippet/csharp/m-system.data.datatable._30_1.cs)]\n [!code-vb[DataWorks DataTable.WriteXmlSchema#1](~/add/codesnippet/visualbasic/m-system.data.datatable._30_1.vb)]  \n  \n The example displays the following output in the console window:  \n  \n```  \n==============================  \nCustomer table, without hierarchy  \n==============================  \n<?xml version=\"1.0\" encoding=\"utf-16\"?>  \n<xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \nxmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n  <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Ta  \nble1\">  \n    <xs:complexType>  \n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n        <xs:element name=\"Table1\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"ID\" type=\"xs:int\" />  \n              <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:choice>  \n    </xs:complexType>  \n    <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table1\" />  \n      <xs:field xpath=\"ID\" />  \n    </xs:unique>  \n  </xs:element>  \n</xs:schema>  \n==============================  \nCustomer table, with hierarchy  \n==============================  \n<?xml version=\"1.0\" encoding=\"utf-16\"?>  \n<xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \nxmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">  \n  <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"Table1\">  \n    <xs:complexType>  \n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">  \n        <xs:element name=\"Table1\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"ID\" type=\"xs:int\" />  \n              <xs:element name=\"Name\" type=\"xs:string\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n        <xs:element name=\"Table2\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"OrderID\" type=\"xs:int\" />  \n              <xs:element name=\"CustomerID\" type=\"xs:int\" minOccurs=\"0\" />  \n              <xs:element name=\"OrderDate\" type=\"xs:dateTime\" minOccurs=\"0\" />  \n            </xs:sequence>  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:choice>  \n    </xs:complexType>  \n    <xs:unique name=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table1\" />  \n      <xs:field xpath=\"ID\" />  \n    </xs:unique>  \n    <xs:unique name=\"Table2_Constraint1\" msdata:ConstraintName=\"Constraint1\" msdata:PrimaryKey=\"true\">  \n      <xs:selector xpath=\".//Table2\" />  \n      <xs:field xpath=\"OrderID\" />  \n    </xs:unique>  \n    <xs:keyref name=\"CustomerOrder\" refer=\"Constraint1\">  \n      <xs:selector xpath=\".//Table2\" />  \n      <xs:field xpath=\"CustomerID\" />  \n    </xs:keyref>  \n  </xs:element>  \n</xs:schema>  \n```"
  syntax:
    content: public void WriteXmlSchema (System.IO.TextWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "Il <xref:System.IO.TextWriter>con cui scrivere.</xref:System.IO.TextWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere lo schema della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere lo schema per la tabella corrente."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  id: WriteXmlSchema(System.String,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(String,Boolean)
  nameWithType: DataTable.WriteXmlSchema(String,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(String,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive la struttura dei dati corrente di <xref href=&quot;System.Data.DataTable&quot;> </xref> come schema XML al file specificato. Per salvare lo schema per la tabella e tutti i relativi discendenti, impostare il <code> writeHierarchy </code> parametro <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataTable>a un documento XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli.       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXml%2A>metodo.</xref:System.Data.DataTable.WriteXml%2A>       In genere il `WriteXmlSchema` metodo scrive lo schema solo per la tabella corrente. Per scrivere lo schema per la tabella corrente e le relative tabelle derivate correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`."
  syntax:
    content: public void WriteXmlSchema (string fileName, bool writeHierarchy);
    parameters:
    - id: fileName
      type: System.String
      description: "Il nome del file da utilizzare."
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere lo schema della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere lo schema per la tabella corrente."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  id: WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  langs:
  - csharp
  name: WriteXmlSchema(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Scrive la struttura dei dati corrente di <xref href=&quot;System.Data.DataTable&quot;> </xref> come schema XML utilizzando specificata <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> Per salvare lo schema per la tabella e tutti i relativi discendenti, impostare il <code> writeHierarchy </code> parametro <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  remarks: "Utilizzare il <xref:System.Data.DataTable.WriteXmlSchema%2A>metodo per scrivere lo schema per un <xref:System.Data.DataTable>a un documento XML.</xref:System.Data.DataTable> </xref:System.Data.DataTable.WriteXmlSchema%2A> Lo schema include le definizioni di tabella, relazioni e vincoli.       Lo schema XML viene scritto utilizzando lo standard XSD.       Per scrivere i dati in un documento XML, utilizzare il <xref:System.Data.DataTable.WriteXml%2A>metodo.</xref:System.Data.DataTable.WriteXml%2A>       In genere il `WriteXmlSchema` metodo scrive lo schema solo per la tabella corrente. Per scrivere lo schema per la tabella corrente e le relative tabelle derivate correlate, chiamare il metodo con il `writeHierarchy` parametro impostato su `true`."
  syntax:
    content: public void WriteXmlSchema (System.Xml.XmlWriter writer, bool writeHierarchy);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Il <xref:System.Xml.XmlWriter>utilizzata per scrivere il documento.</xref:System.Xml.XmlWriter>"
    - id: writeHierarchy
      type: System.Boolean
      description: "Se <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, scrivere lo schema della tabella corrente e tutti i relativi discendenti. Se <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (valore predefinito), scrivere lo schema per la tabella corrente."
  overload: System.Data.DataTable.WriteXmlSchema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MarshalByValueComponent
  isExternal: false
  name: System.ComponentModel.MarshalByValueComponent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.Data.NoNullAllowedException
  parent: System.Data
  isExternal: false
  name: NoNullAllowedException
  nameWithType: NoNullAllowedException
  fullName: System.Data.NoNullAllowedException
- uid: System.Data.DataException
  parent: System.Data
  isExternal: false
  name: DataException
  nameWithType: DataException
  fullName: System.Data.DataException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.Data.DataTable.#ctor
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable()
  nameWithType: DataTable.DataTable()
  fullName: System.Data.DataTable.DataTable()
- uid: System.Data.DataTable.#ctor(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(String)
  nameWithType: DataTable.DataTable(String)
  fullName: System.Data.DataTable.DataTable(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(SerializationInfo,StreamingContext)
  nameWithType: DataTable.DataTable(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.DataTable(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.DataTable.#ctor(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable(String,String)
  nameWithType: DataTable.DataTable(String,String)
  fullName: System.Data.DataTable.DataTable(String,String)
- uid: System.Data.DataTable.AcceptChanges
  parent: System.Data.DataTable
  isExternal: false
  name: AcceptChanges()
  nameWithType: DataTable.AcceptChanges()
  fullName: System.Data.DataTable.AcceptChanges()
- uid: System.Data.DataTable.BeginInit
  parent: System.Data.DataTable
  isExternal: false
  name: BeginInit()
  nameWithType: DataTable.BeginInit()
  fullName: System.Data.DataTable.BeginInit()
- uid: System.Data.DataTable.BeginLoadData
  parent: System.Data.DataTable
  isExternal: false
  name: BeginLoadData()
  nameWithType: DataTable.BeginLoadData()
  fullName: System.Data.DataTable.BeginLoadData()
- uid: System.Data.DataTable.CaseSensitive
  parent: System.Data.DataTable
  isExternal: false
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
  fullName: System.Data.DataTable.CaseSensitive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataTable.ChildRelations
  parent: System.Data.DataTable
  isExternal: false
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
  fullName: System.Data.DataTable.ChildRelations
- uid: System.Data.DataRelationCollection
  parent: System.Data
  isExternal: false
  name: DataRelationCollection
  nameWithType: DataRelationCollection
  fullName: System.Data.DataRelationCollection
- uid: System.Data.DataTable.Clear
  parent: System.Data.DataTable
  isExternal: false
  name: Clear()
  nameWithType: DataTable.Clear()
  fullName: System.Data.DataTable.Clear()
- uid: System.Data.DataTable.Clone
  parent: System.Data.DataTable
  isExternal: false
  name: Clone()
  nameWithType: DataTable.Clone()
  fullName: System.Data.DataTable.Clone()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataTable.ColumnChanged
  parent: System.Data.DataTable
  isExternal: false
  name: ColumnChanged
  nameWithType: DataTable.ColumnChanged
  fullName: System.Data.DataTable.ColumnChanged
- uid: System.Data.DataColumnChangeEventHandler
  parent: System.Data
  isExternal: false
  name: DataColumnChangeEventHandler
  nameWithType: DataColumnChangeEventHandler
  fullName: System.Data.DataColumnChangeEventHandler
- uid: System.Data.DataTable.ColumnChanging
  parent: System.Data.DataTable
  isExternal: false
  name: ColumnChanging
  nameWithType: DataTable.ColumnChanging
  fullName: System.Data.DataTable.ColumnChanging
- uid: System.Data.DataTable.Columns
  parent: System.Data.DataTable
  isExternal: false
  name: Columns
  nameWithType: DataTable.Columns
  fullName: System.Data.DataTable.Columns
- uid: System.Data.DataColumnCollection
  parent: System.Data
  isExternal: false
  name: DataColumnCollection
  nameWithType: DataColumnCollection
  fullName: System.Data.DataColumnCollection
- uid: System.Data.DataTable.Compute(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Compute(String,String)
  nameWithType: DataTable.Compute(String,String)
  fullName: System.Data.DataTable.Compute(String,String)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataTable.Constraints
  parent: System.Data.DataTable
  isExternal: false
  name: Constraints
  nameWithType: DataTable.Constraints
  fullName: System.Data.DataTable.Constraints
- uid: System.Data.ConstraintCollection
  parent: System.Data
  isExternal: false
  name: ConstraintCollection
  nameWithType: ConstraintCollection
  fullName: System.Data.ConstraintCollection
- uid: System.Data.DataTable.Copy
  parent: System.Data.DataTable
  isExternal: false
  name: Copy()
  nameWithType: DataTable.Copy()
  fullName: System.Data.DataTable.Copy()
- uid: System.Data.DataTable.CreateDataReader
  parent: System.Data.DataTable
  isExternal: false
  name: CreateDataReader()
  nameWithType: DataTable.CreateDataReader()
  fullName: System.Data.DataTable.CreateDataReader()
- uid: System.Data.DataTableReader
  parent: System.Data
  isExternal: false
  name: DataTableReader
  nameWithType: DataTableReader
  fullName: System.Data.DataTableReader
- uid: System.Data.DataTable.CreateInstance
  parent: System.Data.DataTable
  isExternal: false
  name: CreateInstance()
  nameWithType: DataTable.CreateInstance()
  fullName: System.Data.DataTable.CreateInstance()
- uid: System.Data.DataTable.DataSet
  parent: System.Data.DataTable
  isExternal: false
  name: DataSet
  nameWithType: DataTable.DataSet
  fullName: System.Data.DataTable.DataSet
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.DataTable.DefaultView
  parent: System.Data.DataTable
  isExternal: false
  name: DefaultView
  nameWithType: DataTable.DefaultView
  fullName: System.Data.DataTable.DefaultView
- uid: System.Data.DataView
  parent: System.Data
  isExternal: false
  name: DataView
  nameWithType: DataView
  fullName: System.Data.DataView
- uid: System.Data.DataTable.DisplayExpression
  parent: System.Data.DataTable
  isExternal: false
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
  fullName: System.Data.DataTable.DisplayExpression
- uid: System.Data.DataTable.EndInit
  parent: System.Data.DataTable
  isExternal: false
  name: EndInit()
  nameWithType: DataTable.EndInit()
  fullName: System.Data.DataTable.EndInit()
- uid: System.Data.DataTable.EndLoadData
  parent: System.Data.DataTable
  isExternal: false
  name: EndLoadData()
  nameWithType: DataTable.EndLoadData()
  fullName: System.Data.DataTable.EndLoadData()
- uid: System.Data.DataTable.ExtendedProperties
  parent: System.Data.DataTable
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
  fullName: System.Data.DataTable.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataTable.fInitInProgress
  parent: System.Data.DataTable
  isExternal: false
  name: fInitInProgress
  nameWithType: DataTable.fInitInProgress
  fullName: System.Data.DataTable.fInitInProgress
- uid: System.Data.DataTable.GetChanges
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges()
  nameWithType: DataTable.GetChanges()
  fullName: System.Data.DataTable.GetChanges()
- uid: System.Data.DataTable.GetChanges(System.Data.DataRowState)
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges(DataRowState)
  nameWithType: DataTable.GetChanges(DataRowState)
  fullName: System.Data.DataTable.GetChanges(DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)
  parent: System.Data.DataTable
  isExternal: false
  name: GetDataTableSchema(XmlSchemaSet)
  nameWithType: DataTable.GetDataTableSchema(XmlSchemaSet)
  fullName: System.Data.DataTable.GetDataTableSchema(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaComplexType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaComplexType
  nameWithType: XmlSchemaComplexType
  fullName: System.Xml.Schema.XmlSchemaComplexType
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Data.DataTable.GetErrors
  parent: System.Data.DataTable
  isExternal: false
  name: GetErrors()
  nameWithType: DataTable.GetErrors()
  fullName: System.Data.DataTable.GetErrors()
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DataTable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DataTable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DataTable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Data.DataTable.GetRowType
  parent: System.Data.DataTable
  isExternal: false
  name: GetRowType()
  nameWithType: DataTable.GetRowType()
  fullName: System.Data.DataTable.GetRowType()
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DataTable.GetSchema
  parent: System.Data.DataTable
  isExternal: false
  name: GetSchema()
  nameWithType: DataTable.GetSchema()
  fullName: System.Data.DataTable.GetSchema()
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Data.DataTable.HasErrors
  parent: System.Data.DataTable
  isExternal: false
  name: HasErrors
  nameWithType: DataTable.HasErrors
  fullName: System.Data.DataTable.HasErrors
- uid: System.Data.DataTable.ImportRow(System.Data.DataRow)
  parent: System.Data.DataTable
  isExternal: false
  name: ImportRow(DataRow)
  nameWithType: DataTable.ImportRow(DataRow)
  fullName: System.Data.DataTable.ImportRow(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataTable.Initialized
  parent: System.Data.DataTable
  isExternal: false
  name: Initialized
  nameWithType: DataTable.Initialized
  fullName: System.Data.DataTable.Initialized
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Data.DataTable.IsInitialized
  parent: System.Data.DataTable
  isExternal: false
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
  fullName: System.Data.DataTable.IsInitialized
- uid: System.Data.DataTable.Load(System.Data.IDataReader)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader)
  nameWithType: DataTable.Load(IDataReader)
  fullName: System.Data.DataTable.Load(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader,LoadOption)
  nameWithType: DataTable.Load(IDataReader,LoadOption)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption)
- uid: System.Data.LoadOption
  parent: System.Data
  isExternal: false
  name: LoadOption
  nameWithType: LoadOption
  fullName: System.Data.LoadOption
- uid: System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTable
  isExternal: false
  name: Load(IDataReader,LoadOption,FillErrorEventHandler)
  nameWithType: DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
  fullName: System.Data.DataTable.Load(IDataReader,LoadOption,FillErrorEventHandler)
- uid: System.Data.FillErrorEventHandler
  parent: System.Data
  isExternal: false
  name: FillErrorEventHandler
  nameWithType: FillErrorEventHandler
  fullName: System.Data.FillErrorEventHandler
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow(Object[],Boolean)
  nameWithType: DataTable.LoadDataRow(Object[],Boolean)
  fullName: System.Data.DataTable.LoadDataRow(Object[],Boolean)
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow(Object[],LoadOption)
  nameWithType: DataTable.LoadDataRow(Object[],LoadOption)
  fullName: System.Data.DataTable.LoadDataRow(Object[],LoadOption)
- uid: System.Data.DataTable.Locale
  parent: System.Data.DataTable
  isExternal: false
  name: Locale
  nameWithType: DataTable.Locale
  fullName: System.Data.DataTable.Locale
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Data.DataTable.Merge(System.Data.DataTable)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable)
  nameWithType: DataTable.Merge(DataTable)
  fullName: System.Data.DataTable.Merge(DataTable)
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable,Boolean)
  nameWithType: DataTable.Merge(DataTable,Boolean)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean)
- uid: System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)
  parent: System.Data.DataTable
  isExternal: false
  name: Merge(DataTable,Boolean,MissingSchemaAction)
  nameWithType: DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
  fullName: System.Data.DataTable.Merge(DataTable,Boolean,MissingSchemaAction)
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.DataTable.MinimumCapacity
  parent: System.Data.DataTable
  isExternal: false
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
  fullName: System.Data.DataTable.MinimumCapacity
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataTable.Namespace
  parent: System.Data.DataTable
  isExternal: false
  name: Namespace
  nameWithType: DataTable.Namespace
  fullName: System.Data.DataTable.Namespace
- uid: System.Data.DataTable.NewRow
  parent: System.Data.DataTable
  isExternal: false
  name: NewRow()
  nameWithType: DataTable.NewRow()
  fullName: System.Data.DataTable.NewRow()
- uid: System.Data.DataTable.NewRowArray(System.Int32)
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowArray(Int32)
  nameWithType: DataTable.NewRowArray(Int32)
  fullName: System.Data.DataTable.NewRowArray(Int32)
- uid: System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowFromBuilder(DataRowBuilder)
  nameWithType: DataTable.NewRowFromBuilder(DataRowBuilder)
  fullName: System.Data.DataTable.NewRowFromBuilder(DataRowBuilder)
- uid: System.Data.DataRowBuilder
  parent: System.Data
  isExternal: false
  name: DataRowBuilder
  nameWithType: DataRowBuilder
  fullName: System.Data.DataRowBuilder
- uid: System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanged(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanged(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanged(DataColumnChangeEventArgs)
- uid: System.Data.DataColumnChangeEventArgs
  parent: System.Data
  isExternal: false
  name: DataColumnChangeEventArgs
  nameWithType: DataColumnChangeEventArgs
  fullName: System.Data.DataColumnChangeEventArgs
- uid: System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanging(DataColumnChangeEventArgs)
  nameWithType: DataTable.OnColumnChanging(DataColumnChangeEventArgs)
  fullName: System.Data.DataTable.OnColumnChanging(DataColumnChangeEventArgs)
- uid: System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataTable.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataTable.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRemoveColumn(DataColumn)
  nameWithType: DataTable.OnRemoveColumn(DataColumn)
  fullName: System.Data.DataTable.OnRemoveColumn(DataColumn)
- uid: System.Data.DataColumn
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanged(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanged(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanged(DataRowChangeEventArgs)
- uid: System.Data.DataRowChangeEventArgs
  parent: System.Data
  isExternal: false
  name: DataRowChangeEventArgs
  nameWithType: DataRowChangeEventArgs
  fullName: System.Data.DataRowChangeEventArgs
- uid: System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanging(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowChanging(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowChanging(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleted(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleted(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleted(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleting(DataRowChangeEventArgs)
  nameWithType: DataTable.OnRowDeleting(DataRowChangeEventArgs)
  fullName: System.Data.DataTable.OnRowDeleting(DataRowChangeEventArgs)
- uid: System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableCleared(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableCleared(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableCleared(DataTableClearEventArgs)
- uid: System.Data.DataTableClearEventArgs
  parent: System.Data
  isExternal: false
  name: DataTableClearEventArgs
  nameWithType: DataTableClearEventArgs
  fullName: System.Data.DataTableClearEventArgs
- uid: System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableClearing(DataTableClearEventArgs)
  nameWithType: DataTable.OnTableClearing(DataTableClearEventArgs)
  fullName: System.Data.DataTable.OnTableClearing(DataTableClearEventArgs)
- uid: System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableNewRow(DataTableNewRowEventArgs)
  nameWithType: DataTable.OnTableNewRow(DataTableNewRowEventArgs)
  fullName: System.Data.DataTable.OnTableNewRow(DataTableNewRowEventArgs)
- uid: System.Data.DataTableNewRowEventArgs
  parent: System.Data
  isExternal: false
  name: DataTableNewRowEventArgs
  nameWithType: DataTableNewRowEventArgs
  fullName: System.Data.DataTableNewRowEventArgs
- uid: System.Data.DataTable.ParentRelations
  parent: System.Data.DataTable
  isExternal: false
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
  fullName: System.Data.DataTable.ParentRelations
- uid: System.Data.DataTable.Prefix
  parent: System.Data.DataTable
  isExternal: false
  name: Prefix
  nameWithType: DataTable.Prefix
  fullName: System.Data.DataTable.Prefix
- uid: System.Data.DataTable.PrimaryKey
  parent: System.Data.DataTable
  isExternal: false
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
  fullName: System.Data.DataTable.PrimaryKey
- uid: System.Data.DataColumn[]
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn[]
  spec.csharp:
  - uid: System.Data.DataColumn
    name: DataColumn
    nameWithType: DataColumn
    fullName: DataColumn[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataTable.ReadXml(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(Stream)
  nameWithType: DataTable.ReadXml(Stream)
  fullName: System.Data.DataTable.ReadXml(Stream)
- uid: System.Data.XmlReadMode
  parent: System.Data
  isExternal: false
  name: XmlReadMode
  nameWithType: XmlReadMode
  fullName: System.Data.XmlReadMode
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Data.DataTable.ReadXml(System.IO.TextReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(TextReader)
  nameWithType: DataTable.ReadXml(TextReader)
  fullName: System.Data.DataTable.ReadXml(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.DataTable.ReadXml(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(String)
  nameWithType: DataTable.ReadXml(String)
  fullName: System.Data.DataTable.ReadXml(String)
- uid: System.Data.DataTable.ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml(XmlReader)
  nameWithType: DataTable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.ReadXml(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(Stream)
  nameWithType: DataTable.ReadXmlSchema(Stream)
  fullName: System.Data.DataTable.ReadXmlSchema(Stream)
- uid: System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(TextReader)
  nameWithType: DataTable.ReadXmlSchema(TextReader)
  fullName: System.Data.DataTable.ReadXmlSchema(TextReader)
- uid: System.Data.DataTable.ReadXmlSchema(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(String)
  nameWithType: DataTable.ReadXmlSchema(String)
  fullName: System.Data.DataTable.ReadXmlSchema(String)
- uid: System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema(XmlReader)
  nameWithType: DataTable.ReadXmlSchema(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSchema(XmlReader)
- uid: System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSerializable(XmlReader)
  nameWithType: DataTable.ReadXmlSerializable(XmlReader)
  fullName: System.Data.DataTable.ReadXmlSerializable(XmlReader)
- uid: System.Data.DataTable.RejectChanges
  parent: System.Data.DataTable
  isExternal: false
  name: RejectChanges()
  nameWithType: DataTable.RejectChanges()
  fullName: System.Data.DataTable.RejectChanges()
- uid: System.Data.DataTable.RemotingFormat
  parent: System.Data.DataTable
  isExternal: false
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
  fullName: System.Data.DataTable.RemotingFormat
- uid: System.Data.SerializationFormat
  parent: System.Data
  isExternal: false
  name: SerializationFormat
  nameWithType: SerializationFormat
  fullName: System.Data.SerializationFormat
- uid: System.Data.DataTable.Reset
  parent: System.Data.DataTable
  isExternal: false
  name: Reset()
  nameWithType: DataTable.Reset()
  fullName: System.Data.DataTable.Reset()
- uid: System.Data.DataTable.RowChanged
  parent: System.Data.DataTable
  isExternal: false
  name: RowChanged
  nameWithType: DataTable.RowChanged
  fullName: System.Data.DataTable.RowChanged
- uid: System.Data.DataRowChangeEventHandler
  parent: System.Data
  isExternal: false
  name: DataRowChangeEventHandler
  nameWithType: DataRowChangeEventHandler
  fullName: System.Data.DataRowChangeEventHandler
- uid: System.Data.DataTable.RowChanging
  parent: System.Data.DataTable
  isExternal: false
  name: RowChanging
  nameWithType: DataTable.RowChanging
  fullName: System.Data.DataTable.RowChanging
- uid: System.Data.DataTable.RowDeleted
  parent: System.Data.DataTable
  isExternal: false
  name: RowDeleted
  nameWithType: DataTable.RowDeleted
  fullName: System.Data.DataTable.RowDeleted
- uid: System.Data.DataTable.RowDeleting
  parent: System.Data.DataTable
  isExternal: false
  name: RowDeleting
  nameWithType: DataTable.RowDeleting
  fullName: System.Data.DataTable.RowDeleting
- uid: System.Data.DataTable.Rows
  parent: System.Data.DataTable
  isExternal: false
  name: Rows
  nameWithType: DataTable.Rows
  fullName: System.Data.DataTable.Rows
- uid: System.Data.DataRowCollection
  parent: System.Data
  isExternal: false
  name: DataRowCollection
  nameWithType: DataRowCollection
  fullName: System.Data.DataRowCollection
- uid: System.Data.DataTable.Select
  parent: System.Data.DataTable
  isExternal: false
  name: Select()
  nameWithType: DataTable.Select()
  fullName: System.Data.DataTable.Select()
- uid: System.Data.DataTable.Select(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String)
  nameWithType: DataTable.Select(String)
  fullName: System.Data.DataTable.Select(String)
- uid: System.Data.DataTable.Select(System.String,System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String,String)
  nameWithType: DataTable.Select(String,String)
  fullName: System.Data.DataTable.Select(String,String)
- uid: System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)
  parent: System.Data.DataTable
  isExternal: false
  name: Select(String,String,DataViewRowState)
  nameWithType: DataTable.Select(String,String,DataViewRowState)
  fullName: System.Data.DataTable.Select(String,String,DataViewRowState)
- uid: System.Data.DataViewRowState
  parent: System.Data
  isExternal: false
  name: DataViewRowState
  nameWithType: DataViewRowState
  fullName: System.Data.DataViewRowState
- uid: System.Data.DataTable.Site
  parent: System.Data.DataTable
  isExternal: false
  name: Site
  nameWithType: DataTable.Site
  fullName: System.Data.DataTable.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList()
  fullName: System.Data.DataTable.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema()
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Data.DataTable.TableCleared
  parent: System.Data.DataTable
  isExternal: false
  name: TableCleared
  nameWithType: DataTable.TableCleared
  fullName: System.Data.DataTable.TableCleared
- uid: System.Data.DataTableClearEventHandler
  parent: System.Data
  isExternal: false
  name: DataTableClearEventHandler
  nameWithType: DataTableClearEventHandler
  fullName: System.Data.DataTableClearEventHandler
- uid: System.Data.DataTable.TableClearing
  parent: System.Data.DataTable
  isExternal: false
  name: TableClearing
  nameWithType: DataTable.TableClearing
  fullName: System.Data.DataTable.TableClearing
- uid: System.Data.DataTable.TableName
  parent: System.Data.DataTable
  isExternal: false
  name: TableName
  nameWithType: DataTable.TableName
  fullName: System.Data.DataTable.TableName
- uid: System.Data.DataTable.TableNewRow
  parent: System.Data.DataTable
  isExternal: false
  name: TableNewRow
  nameWithType: DataTable.TableNewRow
  fullName: System.Data.DataTable.TableNewRow
- uid: System.Data.DataTableNewRowEventHandler
  parent: System.Data
  isExternal: false
  name: DataTableNewRowEventHandler
  nameWithType: DataTableNewRowEventHandler
  fullName: System.Data.DataTableNewRowEventHandler
- uid: System.Data.DataTable.ToString
  parent: System.Data.DataTable
  isExternal: false
  name: ToString()
  nameWithType: DataTable.ToString()
  fullName: System.Data.DataTable.ToString()
- uid: System.Data.DataTable.WriteXml(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream)
  nameWithType: DataTable.WriteXml(Stream)
  fullName: System.Data.DataTable.WriteXml(Stream)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter)
  nameWithType: DataTable.WriteXml(TextWriter)
  fullName: System.Data.DataTable.WriteXml(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Data.DataTable.WriteXml(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String)
  nameWithType: DataTable.WriteXml(String)
  fullName: System.Data.DataTable.WriteXml(String)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter)
  nameWithType: DataTable.WriteXml(XmlWriter)
  fullName: System.Data.DataTable.WriteXml(XmlWriter)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,Boolean)
  nameWithType: DataTable.WriteXml(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode)
- uid: System.Data.XmlWriteMode
  parent: System.Data
  isExternal: false
  name: XmlWriteMode
  nameWithType: XmlWriteMode
  fullName: System.Data.XmlWriteMode
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.String,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,Boolean)
  nameWithType: DataTable.WriteXml(String,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,Boolean)
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,XmlWriteMode)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,Boolean)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode)
- uid: System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(Stream,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(Stream,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(TextWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(TextWriter,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(String,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(String,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(String,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml(XmlWriter,XmlWriteMode,Boolean)
  nameWithType: DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
  fullName: System.Data.DataTable.WriteXml(XmlWriter,XmlWriteMode,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(Stream)
  nameWithType: DataTable.WriteXmlSchema(Stream)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(TextWriter)
  nameWithType: DataTable.WriteXmlSchema(TextWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter)
- uid: System.Data.DataTable.WriteXmlSchema(System.String)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(String)
  nameWithType: DataTable.WriteXmlSchema(String)
  fullName: System.Data.DataTable.WriteXmlSchema(String)
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(XmlWriter)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(Stream,Boolean)
  nameWithType: DataTable.WriteXmlSchema(Stream,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(Stream,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(TextWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(TextWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(TextWriter,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(String,Boolean)
  nameWithType: DataTable.WriteXmlSchema(String,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(String,Boolean)
- uid: System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema(XmlWriter,Boolean)
  nameWithType: DataTable.WriteXmlSchema(XmlWriter,Boolean)
  fullName: System.Data.DataTable.WriteXmlSchema(XmlWriter,Boolean)
- uid: System.Data.DataTable.#ctor*
  parent: System.Data.DataTable
  isExternal: false
  name: DataTable
  nameWithType: DataTable.DataTable
- uid: System.Data.DataTable.AcceptChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: AcceptChanges
  nameWithType: DataTable.AcceptChanges
- uid: System.Data.DataTable.BeginInit*
  parent: System.Data.DataTable
  isExternal: false
  name: BeginInit
  nameWithType: DataTable.BeginInit
- uid: System.Data.DataTable.BeginLoadData*
  parent: System.Data.DataTable
  isExternal: false
  name: BeginLoadData
  nameWithType: DataTable.BeginLoadData
- uid: System.Data.DataTable.CaseSensitive*
  parent: System.Data.DataTable
  isExternal: false
  name: CaseSensitive
  nameWithType: DataTable.CaseSensitive
- uid: System.Data.DataTable.ChildRelations*
  parent: System.Data.DataTable
  isExternal: false
  name: ChildRelations
  nameWithType: DataTable.ChildRelations
- uid: System.Data.DataTable.Clear*
  parent: System.Data.DataTable
  isExternal: false
  name: Clear
  nameWithType: DataTable.Clear
- uid: System.Data.DataTable.Clone*
  parent: System.Data.DataTable
  isExternal: false
  name: Clone
  nameWithType: DataTable.Clone
- uid: System.Data.DataTable.Columns*
  parent: System.Data.DataTable
  isExternal: false
  name: Columns
  nameWithType: DataTable.Columns
- uid: System.Data.DataTable.Compute*
  parent: System.Data.DataTable
  isExternal: false
  name: Compute
  nameWithType: DataTable.Compute
- uid: System.Data.DataTable.Constraints*
  parent: System.Data.DataTable
  isExternal: false
  name: Constraints
  nameWithType: DataTable.Constraints
- uid: System.Data.DataTable.Copy*
  parent: System.Data.DataTable
  isExternal: false
  name: Copy
  nameWithType: DataTable.Copy
- uid: System.Data.DataTable.CreateDataReader*
  parent: System.Data.DataTable
  isExternal: false
  name: CreateDataReader
  nameWithType: DataTable.CreateDataReader
- uid: System.Data.DataTable.CreateInstance*
  parent: System.Data.DataTable
  isExternal: false
  name: CreateInstance
  nameWithType: DataTable.CreateInstance
- uid: System.Data.DataTable.DataSet*
  parent: System.Data.DataTable
  isExternal: false
  name: DataSet
  nameWithType: DataTable.DataSet
- uid: System.Data.DataTable.DefaultView*
  parent: System.Data.DataTable
  isExternal: false
  name: DefaultView
  nameWithType: DataTable.DefaultView
- uid: System.Data.DataTable.DisplayExpression*
  parent: System.Data.DataTable
  isExternal: false
  name: DisplayExpression
  nameWithType: DataTable.DisplayExpression
- uid: System.Data.DataTable.EndInit*
  parent: System.Data.DataTable
  isExternal: false
  name: EndInit
  nameWithType: DataTable.EndInit
- uid: System.Data.DataTable.EndLoadData*
  parent: System.Data.DataTable
  isExternal: false
  name: EndLoadData
  nameWithType: DataTable.EndLoadData
- uid: System.Data.DataTable.ExtendedProperties*
  parent: System.Data.DataTable
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataTable.ExtendedProperties
- uid: System.Data.DataTable.GetChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: GetChanges
  nameWithType: DataTable.GetChanges
- uid: System.Data.DataTable.GetDataTableSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: GetDataTableSchema
  nameWithType: DataTable.GetDataTableSchema
- uid: System.Data.DataTable.GetErrors*
  parent: System.Data.DataTable
  isExternal: false
  name: GetErrors
  nameWithType: DataTable.GetErrors
- uid: System.Data.DataTable.GetObjectData*
  parent: System.Data.DataTable
  isExternal: false
  name: GetObjectData
  nameWithType: DataTable.GetObjectData
- uid: System.Data.DataTable.GetRowType*
  parent: System.Data.DataTable
  isExternal: false
  name: GetRowType
  nameWithType: DataTable.GetRowType
- uid: System.Data.DataTable.GetSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: GetSchema
  nameWithType: DataTable.GetSchema
- uid: System.Data.DataTable.HasErrors*
  parent: System.Data.DataTable
  isExternal: false
  name: HasErrors
  nameWithType: DataTable.HasErrors
- uid: System.Data.DataTable.ImportRow*
  parent: System.Data.DataTable
  isExternal: false
  name: ImportRow
  nameWithType: DataTable.ImportRow
- uid: System.Data.DataTable.IsInitialized*
  parent: System.Data.DataTable
  isExternal: false
  name: IsInitialized
  nameWithType: DataTable.IsInitialized
- uid: System.Data.DataTable.Load*
  parent: System.Data.DataTable
  isExternal: false
  name: Load
  nameWithType: DataTable.Load
- uid: System.Data.DataTable.LoadDataRow*
  parent: System.Data.DataTable
  isExternal: false
  name: LoadDataRow
  nameWithType: DataTable.LoadDataRow
- uid: System.Data.DataTable.Locale*
  parent: System.Data.DataTable
  isExternal: false
  name: Locale
  nameWithType: DataTable.Locale
- uid: System.Data.DataTable.Merge*
  parent: System.Data.DataTable
  isExternal: false
  name: Merge
  nameWithType: DataTable.Merge
- uid: System.Data.DataTable.MinimumCapacity*
  parent: System.Data.DataTable
  isExternal: false
  name: MinimumCapacity
  nameWithType: DataTable.MinimumCapacity
- uid: System.Data.DataTable.Namespace*
  parent: System.Data.DataTable
  isExternal: false
  name: Namespace
  nameWithType: DataTable.Namespace
- uid: System.Data.DataTable.NewRow*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRow
  nameWithType: DataTable.NewRow
- uid: System.Data.DataTable.NewRowArray*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowArray
  nameWithType: DataTable.NewRowArray
- uid: System.Data.DataTable.NewRowFromBuilder*
  parent: System.Data.DataTable
  isExternal: false
  name: NewRowFromBuilder
  nameWithType: DataTable.NewRowFromBuilder
- uid: System.Data.DataTable.OnColumnChanged*
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanged
  nameWithType: DataTable.OnColumnChanged
- uid: System.Data.DataTable.OnColumnChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnColumnChanging
  nameWithType: DataTable.OnColumnChanging
- uid: System.Data.DataTable.OnPropertyChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataTable.OnPropertyChanging
- uid: System.Data.DataTable.OnRemoveColumn*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRemoveColumn
  nameWithType: DataTable.OnRemoveColumn
- uid: System.Data.DataTable.OnRowChanged*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanged
  nameWithType: DataTable.OnRowChanged
- uid: System.Data.DataTable.OnRowChanging*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowChanging
  nameWithType: DataTable.OnRowChanging
- uid: System.Data.DataTable.OnRowDeleted*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleted
  nameWithType: DataTable.OnRowDeleted
- uid: System.Data.DataTable.OnRowDeleting*
  parent: System.Data.DataTable
  isExternal: false
  name: OnRowDeleting
  nameWithType: DataTable.OnRowDeleting
- uid: System.Data.DataTable.OnTableCleared*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableCleared
  nameWithType: DataTable.OnTableCleared
- uid: System.Data.DataTable.OnTableClearing*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableClearing
  nameWithType: DataTable.OnTableClearing
- uid: System.Data.DataTable.OnTableNewRow*
  parent: System.Data.DataTable
  isExternal: false
  name: OnTableNewRow
  nameWithType: DataTable.OnTableNewRow
- uid: System.Data.DataTable.ParentRelations*
  parent: System.Data.DataTable
  isExternal: false
  name: ParentRelations
  nameWithType: DataTable.ParentRelations
- uid: System.Data.DataTable.Prefix*
  parent: System.Data.DataTable
  isExternal: false
  name: Prefix
  nameWithType: DataTable.Prefix
- uid: System.Data.DataTable.PrimaryKey*
  parent: System.Data.DataTable
  isExternal: false
  name: PrimaryKey
  nameWithType: DataTable.PrimaryKey
- uid: System.Data.DataTable.ReadXml*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXml
  nameWithType: DataTable.ReadXml
- uid: System.Data.DataTable.ReadXmlSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSchema
  nameWithType: DataTable.ReadXmlSchema
- uid: System.Data.DataTable.ReadXmlSerializable*
  parent: System.Data.DataTable
  isExternal: false
  name: ReadXmlSerializable
  nameWithType: DataTable.ReadXmlSerializable
- uid: System.Data.DataTable.RejectChanges*
  parent: System.Data.DataTable
  isExternal: false
  name: RejectChanges
  nameWithType: DataTable.RejectChanges
- uid: System.Data.DataTable.RemotingFormat*
  parent: System.Data.DataTable
  isExternal: false
  name: RemotingFormat
  nameWithType: DataTable.RemotingFormat
- uid: System.Data.DataTable.Reset*
  parent: System.Data.DataTable
  isExternal: false
  name: Reset
  nameWithType: DataTable.Reset
- uid: System.Data.DataTable.Rows*
  parent: System.Data.DataTable
  isExternal: false
  name: Rows
  nameWithType: DataTable.Rows
- uid: System.Data.DataTable.Select*
  parent: System.Data.DataTable
  isExternal: false
  name: Select
  nameWithType: DataTable.Select
- uid: System.Data.DataTable.Site*
  parent: System.Data.DataTable
  isExternal: false
  name: Site
  nameWithType: DataTable.Site
- uid: System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: DataTable.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.DataTable.System#ComponentModel#IListSource#GetList*
  parent: System.Data.DataTable
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: DataTable.System.ComponentModel.IListSource.GetList
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml*
  parent: System.Data.DataTable
  isExternal: false
  name: System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType: DataTable.System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Data.DataTable.TableName*
  parent: System.Data.DataTable
  isExternal: false
  name: TableName
  nameWithType: DataTable.TableName
- uid: System.Data.DataTable.ToString*
  parent: System.Data.DataTable
  isExternal: false
  name: ToString
  nameWithType: DataTable.ToString
- uid: System.Data.DataTable.WriteXml*
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXml
  nameWithType: DataTable.WriteXml
- uid: System.Data.DataTable.WriteXmlSchema*
  parent: System.Data.DataTable
  isExternal: false
  name: WriteXmlSchema
  nameWithType: DataTable.WriteXmlSchema
