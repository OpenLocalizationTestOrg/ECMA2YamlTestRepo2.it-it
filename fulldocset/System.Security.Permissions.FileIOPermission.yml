### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.FileIOPermission
  id: FileIOPermission
  children:
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])
  - System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  - System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  - System.Security.Permissions.FileIOPermission.AllFiles
  - System.Security.Permissions.FileIOPermission.AllLocalFiles
  - System.Security.Permissions.FileIOPermission.Copy
  - System.Security.Permissions.FileIOPermission.Equals(System.Object)
  - System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.FileIOPermission.GetHashCode
  - System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  - System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.FileIOPermission.IsUnrestricted
  - System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  - System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  - System.Security.Permissions.FileIOPermission.ToXml
  - System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: FileIOPermission
  nameWithType: FileIOPermission
  fullName: System.Security.Permissions.FileIOPermission
  type: Class
  summary: "Controlla la possibilità di accedere ai file e cartelle. Questa classe non può essere ereditata."
  remarks: "This permission distinguishes between the following four types of file IO access provided by <xref:System.Security.Permissions.FileIOPermissionAccess>:  \n  \n-   `Read`: Read access to the contents of the file or access to information about the file, such as its length or last modification time.  \n  \n-   `Write`: Write access to the contents of the file or access to change information about the file, such as its name. Also allows for deletion and overwriting.  \n  \n-   `Append`: Ability to write to the end of a file only. No ability to read.  \n  \n-   `PathDiscovery`: Access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure that is revealed in the path. This value does not grant access to files or folders represented by the path.  \n  \n> [!NOTE]\n>  Giving <xref:System.Security.Permissions.FileIOPermissionAccess> access to an assembly is similar to granting it full trust. If an application should not write to the file system, it should not have <xref:System.Security.Permissions.FileIOPermissionAccess> access.  \n  \n All these permissions are independent, meaning that rights to one do not imply rights to another. For example, `Write` permission does not imply permission to `Read` or `Append`. If more than one permission is desired, they can be combined using a bitwise OR as shown in the code example that follows. File permission is defined in terms of canonical absolute paths; calls should always be made with canonical file paths.  \n  \n FileIOPermission describes protected operations on files and folders. The <xref:System.IO.File> class helps provide secure access to files and folders. The security access check is performed when the handle to the file is created. By doing the check at creation time, the performance impact of the security check is minimized. Opening a file happens once, while reading and writing can happen multiple times. Once the file is opened, no further checks are done. If the object is passed to an untrusted caller, it can be misused. For example, file handles should not be stored in public global statics where code with less permission can access them.  \n  \n <xref:System.Security.Permissions.FileIOPermissionAccess> specifies actions that can be performed on the file or folder. In addition, these actions can be combined using a bitwise OR to form complex instances.  \n  \n Access to a folder implies access to all the files it contains, as well as access to all the files and folders in its subfolders. For example, `Read` access to C:\\folder1\\ implies `Read` access to C:\\folder1\\file1.txt, C:\\folder1\\folder2\\\\, C:\\folder1\\folder2\\file2.txt, and so on.  \n  \n> [!NOTE]\n>  In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following examples illustrate code that uses FileIOPermission. After the following two lines of code, the object `f` represents permission to read all files on the client computer's local disks. The code example then demands the permission to determine whether the application has permission to read the files.  \n  \n [!code-cs[Classic FileIOPermission Example#1](~/add/codesnippet/csharp/t-system.security.permis_23_1.cs)]\n [!code-vb[Classic FileIOPermission Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_23_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#1](~/add/codesnippet/cpp/t-system.security.permis_23_1.cpp)]  \n  \n After the following two lines of code, the object `f2` represents permissions to read C:\\test_r and read and write to C:\\example\\out.txt. `Read` and `Write` represent the file/folder permissions as previously described. After creating the permission, the code demands the permission to determine whether the application has the right to read and write to the file.  \n  \n [!code-cs[Classic FileIOPermission Example#2](~/add/codesnippet/csharp/t-system.security.permis_23_2.cs)]\n [!code-vb[Classic FileIOPermission Example#2](~/add/codesnippet/visualbasic/t-system.security.permis_23_2.vb)]\n [!code-cpp[Classic FileIOPermission Example#2](~/add/codesnippet/cpp/t-system.security.permis_23_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class FileIOPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(PermissionState)
  nameWithType: FileIOPermission.FileIOPermission(PermissionState)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> classe con autorizzazione con restrizioni o senza restrizioni, come specificato."
  remarks: "Consente di creare un con restrizioni (`None`) o `Unrestricted` accesso a file e directory."
  example:
  - "The following code example creates a new instance of the <xref:System.Security.Permissions.FileIOPermission> class with fully restricted read access.  \n  \n [!code-cs[Classic FileIOPermission Example#1](~/add/codesnippet/csharp/77d769e4-2464-4991-ba06-_1.cs)]\n [!code-vb[Classic FileIOPermission Example#1](~/add/codesnippet/visualbasic/77d769e4-2464-4991-ba06-_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#1](~/add/codesnippet/cpp/77d769e4-2464-4991-ba06-_1.cpp)]"
  syntax:
    content: public FileIOPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "Uno del <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref> valori di enumerazione."
  overload: System.Security.Permissions.FileIOPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> state </code> parametro non è un valore valido di <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> classe con l&quot;accesso al file designato o alla directory specificata."
  remarks: "Questo costruttore consente solo uno del <xref:System.Security.Permissions.FileIOPermissionAccess>valori da specificare per il file o directory specificata.</xref:System.Security.Permissions.FileIOPermissionAccess> Utilizzare il <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>metodo per definire autorizzazioni complesse.</xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>"
  example:
  - "The following code example shows the use of the FileIOPermission constructor to create a new instance of the <xref:System.Security.Permissions.FileIOPermission> class, which provides complete access to the C:\\test_r file.  \n  \n [!code-cs[Classic FileIOPermission Example#2](~/add/codesnippet/csharp/51a3f39e-30ae-4011-8c38-_1.cs)]\n [!code-vb[Classic FileIOPermission Example#2](~/add/codesnippet/visualbasic/51a3f39e-30ae-4011-8c38-_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#2](~/add/codesnippet/cpp/51a3f39e-30ae-4011-8c38-_1.cpp)]"
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref> valori di enumerazione."
    - id: path
      type: System.String
      description: "Il percorso assoluto del file o directory."
  overload: System.Security.Permissions.FileIOPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> access </code> parametro non è un valore valido di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>.       - o - <code> path </code> parametro non è una stringa valida.       - o - <code> path </code> parametro specifica il percorso assoluto al file o directory."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> classe con l&quot;accesso specificato alle directory e file designati."
  remarks: "Questo costruttore consente solo uno <xref:System.Security.Permissions.FileIOPermissionAccess>valore per i file specificati e le directory.</xref:System.Security.Permissions.FileIOPermissionAccess> Utilizzare il <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>metodo per definire autorizzazioni complesse.</xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>"
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref> valori di enumerazione."
    - id: pathList
      type: System.String[]
      description: "Matrice che contiene i percorsi assoluti dei file e directory."
  overload: System.Security.Permissions.FileIOPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> access </code> parametro non è un valore valido di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>.       - oppure - una voce di <code> pathList </code> matrice non è una stringa valida."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> classe con l&quot;accesso specificato per il file o directory e i diritti di accesso specificati alle informazioni di controllo file."
  remarks: "Questo costruttore consente solo uno <xref:System.Security.Permissions.FileIOPermissionAccess>valore per il file specificato o una directory.</xref:System.Security.Permissions.FileIOPermissionAccess> Utilizzare il <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>metodo per definire autorizzazioni complesse.</xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>       Il `control` parametro specifica se l&quot;elenco di controllo accesso (ACL) per il file o directory specificata da `path` può essere modificato, visualizzato o non è accessibile.      > [!IMPORTANT] > Un elenco di controllo di accesso (ACL) descrive i singoli utenti o gruppi che dispongono o non dispone dei diritti per azioni specifiche su un determinato file e le relative proprietà.  La possibilità di modificare o visualizzare un ACL è un&quot;autorizzazione importante e deve essere concessa con attenzione."
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref> valori di enumerazione."
    - id: control
      type: System.Security.AccessControl.AccessControlActions
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.AccessControlActions&quot;> </xref> valori di enumerazione."
    - id: path
      type: System.String
      description: "Il percorso assoluto del file o directory."
  overload: System.Security.Permissions.FileIOPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> access </code> parametro non è un valore valido di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>.       - o - <code> path </code> parametro non è una stringa valida.       - o - <code> path </code> parametro specifica il percorso assoluto al file o directory."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> classe con l&quot;accesso specificato alle directory e file designati e i diritti di accesso specificati alle informazioni di controllo file."
  remarks: "Questo costruttore consente solo uno <xref:System.Security.Permissions.FileIOPermissionAccess>valore per i file specificati e le directory.</xref:System.Security.Permissions.FileIOPermissionAccess> Utilizzare il <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>metodo per definire autorizzazioni complesse.</xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>       Il `control` parametro specifica se l&quot;elenco di controllo accesso (ACL) per il file o directory specificata da `path` può essere modificato, visualizzato o non è accessibile.      > [!IMPORTANT] > Un elenco di controllo di accesso (ACL) descrive i singoli utenti o gruppi che dispongono o non dispone dei diritti per azioni specifiche su un determinato file e le relative proprietà.  La possibilità di modificare o visualizzare un ACL è un&quot;autorizzazione importante e deve essere concessa con attenzione."
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref> valori di enumerazione."
    - id: control
      type: System.Security.AccessControl.AccessControlActions
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.AccessControl.AccessControlActions&quot;> </xref> valori di enumerazione."
    - id: pathList
      type: System.String[]
      description: "Matrice che contiene i percorsi assoluti dei file e directory."
  overload: System.Security.Permissions.FileIOPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> access </code> parametro non è un valore valido di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>.       - oppure - una voce di <code> pathList </code> matrice non è una stringa valida."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  id: AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AddPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Aggiunge allo stato esistente dell&quot;autorizzazione accesso per il file specificato o la directory."
  remarks: "Utilizzare questo metodo per modificare l&quot;accesso a file e directory aggiungendo allo stato dell&quot;autorizzazione corrente."
  example:
  - "The following code example shows the use of the AddPathList method.  \n  \n [!code-cs[Classic FileIOPermission Example#2](~/add/codesnippet/csharp/179395dd-6ede-43e0-bf6e-_1.cs)]\n [!code-vb[Classic FileIOPermission Example#2](~/add/codesnippet/visualbasic/179395dd-6ede-43e0-bf6e-_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#2](~/add/codesnippet/cpp/179395dd-6ede-43e0-bf6e-_1.cpp)]"
  syntax:
    content: public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref> valori."
    - id: path
      type: System.String
      description: "Il percorso assoluto di un file o directory."
  overload: System.Security.Permissions.FileIOPermission.AddPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> access </code> parametro non è un valore valido di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>.       - o - <code> path </code> parametro non è una stringa valida.       - o - <code> path </code> parametro non ha specificato il percorso assoluto al file o directory."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <code> path </code> parametro ha un formato non valido."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  id: AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AddPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Aggiunge allo stato esistente dell&quot;autorizzazione accesso per i file specificati e le directory."
  remarks: "Utilizzare questo metodo per modificare l&quot;accesso a file e directory aggiungendo allo stato dell&quot;autorizzazione corrente."
  syntax:
    content: public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref> valori."
    - id: pathList
      type: System.String[]
      description: "Matrice che contiene i percorsi assoluti dei file e directory."
  overload: System.Security.Permissions.FileIOPermission.AddPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> access </code> parametro non è un valore valido di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>.       - oppure - una voce di <code> pathList </code> matrice non è valida."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Una voce di <code> pathList </code> matrice ha un formato non valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>pathList</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.AllFiles
  id: AllFiles
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AllFiles
  nameWithType: FileIOPermission.AllFiles
  fullName: System.Security.Permissions.FileIOPermission.AllFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene o imposta l&quot;accesso consentito a tutti i file."
  remarks: "Questa proprietà ottiene o imposta l&quot;accesso consentito a tutti i file nelle unità di rete e il computer locale.       Un singolo <xref:System.Security.Permissions.FileIOPermissionAccess>valore può essere verificato per l&quot;utilizzo di un&quot;operazione con AND bit per bit.</xref:System.Security.Permissions.FileIOPermissionAccess>"
  example:
  - "The following code example shows the use of the AllFiles property.  \n  \n [!code-cs[Classic FileIOPermission Example#3](~/add/codesnippet/csharp/p-system.security.permis_9_1.cs)]\n [!code-vb[Classic FileIOPermission Example#3](~/add/codesnippet/visualbasic/p-system.security.permis_9_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#3](~/add/codesnippet/cpp/p-system.security.permis_9_1.cpp)]"
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Il set dei / o file flag di tutti i file."
  overload: System.Security.Permissions.FileIOPermission.AllFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.AllLocalFiles
  id: AllLocalFiles
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AllLocalFiles
  nameWithType: FileIOPermission.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermission.AllLocalFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene o imposta l&quot;accesso consentito a tutti i file locali."
  remarks: "File locali sono file contenuti nel computer locale. Qualsiasi file che non si accede tramite un&quot;unità di rete sono file locali.       Un singolo <xref:System.Security.Permissions.FileIOPermissionAccess>valore può essere verificato per l&quot;utilizzo di un&quot;operazione con AND bit per bit.</xref:System.Security.Permissions.FileIOPermissionAccess>"
  example:
  - "The following code example shows the use of the AllLocalFiles property.  \n  \n [!code-cs[Classic FileIOPermission Example#1](~/add/codesnippet/csharp/p-system.security.permis_10_1.cs)]\n [!code-vb[Classic FileIOPermission Example#1](~/add/codesnippet/visualbasic/p-system.security.permis_10_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#1](~/add/codesnippet/cpp/p-system.security.permis_10_1.cpp)]"
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Il set dei / o file flag di tutti i file locali."
  overload: System.Security.Permissions.FileIOPermission.AllLocalFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.Copy
  id: Copy
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: FileIOPermission.Copy()
  fullName: System.Security.Permissions.FileIOPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Crea e restituisce una copia identica dell&quot;autorizzazione corrente."
  remarks: "Una copia dell&quot;autorizzazione rappresenta lo stesso accesso alle risorse dell&quot;autorizzazione originale."
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Una copia dell&quot;autorizzazione corrente."
  overload: System.Security.Permissions.FileIOPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: FileIOPermission.Equals(Object)
  fullName: System.Security.Permissions.FileIOPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determina se l&quot;oggetto specificato <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> oggetto è uguale all&quot;oggetto corrente <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref>."
  remarks: "Per ulteriori informazioni, vedere <xref:System.Object.Equals%2A>.</xref:System.Object.Equals%2A>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Il <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> oggetto da confrontare con l&quot;oggetto corrente <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;oggetto specificato <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> è uguale all&quot;oggetto corrente <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> oggetto; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.FileIOPermission.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: FileIOPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.FileIOPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ricostruisce un&quot;autorizzazione con uno stato specificato da una codifica XML."
  syntax:
    content: public override void FromXml (System.Security.SecurityElement esd);
    parameters:
    - id: esd
      type: System.Security.SecurityElement
      description: "La codifica XML usata per ricostruire l&quot;autorizzazione."
  overload: System.Security.Permissions.FileIOPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>esd</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> esd </code> parametro non è un elemento di autorizzazione valido.       - o - <code> esd </code> il numero di versione del parametro non è compatibile."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: FileIOPermission.GetHashCode()
  fullName: System.Security.Permissions.FileIOPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene un codice hash per il <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> oggetto adatto per l&quot;utilizzo in algoritmi hash e dati strutture, ad esempio una tabella hash."
  remarks: "Il codice hash per due istanze della stessa autorizzazione potrebbe essere diverso, pertanto è consigliabile non utilizzare un codice hash per confrontare due <xref:System.Security.Permissions.FileIOPermission>oggetti.</xref:System.Security.Permissions.FileIOPermission>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Codice hash per l&quot;oggetto corrente <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref> oggetto."
  overload: System.Security.Permissions.FileIOPermission.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  id: GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: GetPathList(FileIOPermissionAccess)
  nameWithType: FileIOPermission.GetPathList(FileIOPermissionAccess)
  fullName: System.Security.Permissions.FileIOPermission.GetPathList(FileIOPermissionAccess)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Ottiene tutti i file e directory con l&quot;oggetto specificato <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>."
  remarks: "Utilizzare questo metodo per ottenere lo stato dell&quot;autorizzazione corrente. Per ottenere lo stato di entrambi `Read` e `Write` accesso, sono necessari due chiamate a questo metodo.      > [!NOTE] > Il `access` è limitato ai valori di parametro <xref:System.Security.Permissions.FileIOPermissionAccess>, che rappresentano singoli tipi di accesso ai file.</xref:System.Security.Permissions.FileIOPermissionAccess> Tali valori sono <xref:System.Security.Permissions.FileIOPermissionAccess>, <xref:System.Security.Permissions.FileIOPermissionAccess>, <xref:System.Security.Permissions.FileIOPermissionAccess>e <xref:System.Security.Permissions.FileIOPermissionAccess>.</xref:System.Security.Permissions.FileIOPermissionAccess> </xref:System.Security.Permissions.FileIOPermissionAccess> </xref:System.Security.Permissions.FileIOPermissionAccess> </xref:System.Security.Permissions.FileIOPermissionAccess> I valori accettati da `access` non includono <xref:System.Security.Permissions.FileIOPermissionAccess>e <xref:System.Security.Permissions.FileIOPermissionAccess>, che non rappresentano singoli tipi di accesso ai file.</xref:System.Security.Permissions.FileIOPermissionAccess> </xref:System.Security.Permissions.FileIOPermissionAccess>"
  example:
  - "The following code example shows the use of the GetPathList method. This example is part of a larger example provided for the <xref:System.Security.Permissions.FileIOPermission> class.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/cpp/996247c6-c512-46ad-9cab-_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/csharp/996247c6-c512-46ad-9cab-_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/visualbasic/996247c6-c512-46ad-9cab-_1.vb)]"
  syntax:
    content: public string[] GetPathList (System.Security.Permissions.FileIOPermissionAccess access);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Uno del <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref> valori che rappresenta un singolo tipo di accesso ai file."
    return:
      type: System.String[]
      description: "Matrice che contiene i percorsi dei file e directory in cui l&quot;accesso specificato da di <code> access </code> parametro viene concessa."
  overload: System.Security.Permissions.FileIOPermission.GetPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>access</code>non è un valore valido di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>.       - oppure - <code>access</code> è <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>, che rappresenta più di un tipo di accesso ai file, o <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>, che non rappresenta qualsiasi tipo di accesso ai file."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: FileIOPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Crea e restituisce un&quot;autorizzazione che rappresenta l&quot;intersezione dell&quot;autorizzazione corrente e l&quot;autorizzazione specificata."
  remarks: "L&quot;intersezione delle due autorizzazioni è un&quot;autorizzazione che descrive il set di operazioni che hanno in comune. Solo una richiesta che supera entrambe le autorizzazioni originali passerà l&quot;intersezione."
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Autorizzazione da intersecare con l&quot;autorizzazione corrente. Deve essere lo stesso tipo dell&quot;autorizzazione corrente."
    return:
      type: System.Security.IPermission
      description: "Nuova autorizzazione che rappresenta l&quot;intersezione dell&quot;autorizzazione corrente e l&quot;autorizzazione specificata. La nuova autorizzazione è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se l&quot;intersezione è vuota."
  overload: System.Security.Permissions.FileIOPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> target </code> parametro non è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e non è dello stesso tipo dell&quot;autorizzazione corrente."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: FileIOPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Determina se l&quot;autorizzazione corrente è un subset dell&quot;autorizzazione specificata."
  remarks: "Se l&quot;autorizzazione corrente specifica un set di operazioni che è contenuto l&quot;autorizzazione specificata, l&quot;autorizzazione corrente è un subset dell&quot;autorizzazione specificata. Ad esempio, un&quot;autorizzazione che rappresenta l&quot;accesso in lettura a C:\\example.txt è un subset di un&quot;autorizzazione che rappresenta l&quot;accesso in lettura a c:.\\\\. Se questo metodo restituisce `true`, l&quot;autorizzazione corrente non rappresenta un accesso alla risorsa protetta rispetto a quello dell&quot;autorizzazione specificata."
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Autorizzazione da testare per la relazione del subset. Questa autorizzazione deve essere lo stesso tipo dell&quot;autorizzazione corrente."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;autorizzazione corrente è un subset dell&quot;autorizzazione specificata. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.FileIOPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> target </code> parametro non è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e non è dello stesso tipo dell&quot;autorizzazione corrente."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: FileIOPermission.IsUnrestricted()
  fullName: System.Security.Permissions.FileIOPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Restituisce un valore che indica se l&quot;autorizzazione corrente è senza restrizioni."
  remarks: "Un&quot;autorizzazione senza restrizioni rappresenta l&quot;accesso a tutte le risorse protette dall&quot;autorizzazione."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;autorizzazione corrente è senza restrizioni. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.FileIOPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  id: SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: SetPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Imposta l&quot;accesso specificato per il file o directory specificata, sostituendo lo stato esistente dell&quot;autorizzazione."
  remarks: "The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess>.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#12](~/add/codesnippet/cpp/21456ab4-f876-4c97-b331-_1.cpp)]\n [!code-vb[System.Security.Permissions.FileIOPermission#12](~/add/codesnippet/visualbasic/21456ab4-f876-4c97-b331-_1.vb)]\n [!code-cs[System.Security.Permissions.FileIOPermission#12](~/add/codesnippet/csharp/21456ab4-f876-4c97-b331-_1.cs)]  \n  \n This access will not be overwritten by the following code because the access types are not the same.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#13](~/add/codesnippet/cpp/21456ab4-f876-4c97-b331-_2.cpp)]\n [!code-vb[System.Security.Permissions.FileIOPermission#13](~/add/codesnippet/visualbasic/21456ab4-f876-4c97-b331-_2.vb)]\n [!code-cs[System.Security.Permissions.FileIOPermission#13](~/add/codesnippet/csharp/21456ab4-f876-4c97-b331-_2.cs)]"
  example:
  - "The following code example shows the use of the SetPathList method.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/cpp/21456ab4-f876-4c97-b331-_3.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/csharp/21456ab4-f876-4c97-b331-_3.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/visualbasic/21456ab4-f876-4c97-b331-_3.vb)]"
  syntax:
    content: public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref> valori."
    - id: path
      type: System.String
      description: "Il percorso assoluto del file o directory."
  overload: System.Security.Permissions.FileIOPermission.SetPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> access </code> parametro non è un valore valido di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>.       - o - <code> path </code> parametro non è una stringa valida.       - o - <code> path </code> parametro non ha specificato il percorso assoluto al file o directory."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  id: SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: SetPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Imposta l&quot;accesso specificato ai file e alle directory indicati, sostituendo lo stato corrente per l&quot;accesso specificato con un nuovo set di percorsi."
  remarks: "The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess>.  \n  \n This access will not be overwritten by the following code because the access types are not the same.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#15](~/add/codesnippet/cpp/653665a4-6451-42cc-8bd1-_1.cpp)]\n [!code-vb[System.Security.Permissions.FileIOPermission#15](~/add/codesnippet/visualbasic/653665a4-6451-42cc-8bd1-_1.vb)]\n [!code-cs[System.Security.Permissions.FileIOPermission#15](~/add/codesnippet/csharp/653665a4-6451-42cc-8bd1-_1.cs)]"
  syntax:
    content: public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "Combinazione bit per bit di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref> valori."
    - id: pathList
      type: System.String[]
      description: "Matrice che contiene i percorsi assoluti dei file e directory."
  overload: System.Security.Permissions.FileIOPermission.SetPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> access </code> parametro non è un valore valido di <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>.       - oppure - una voce di <code> pathList </code> parametro non è una stringa valida."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: FileIOPermission.ToXml()
  fullName: System.Security.Permissions.FileIOPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Crea una codifica XML dell&quot;autorizzazione e del relativo stato corrente."
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "Codifica XML dell&quot;autorizzazione, che include le informazioni sullo stato."
  overload: System.Security.Permissions.FileIOPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: FileIOPermission.Union(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Crea un&quot;autorizzazione che rappresenta l&quot;unione dell&quot;autorizzazione corrente e l&quot;autorizzazione specificata."
  remarks: "Il risultato di una chiamata a un&quot;unione è un&quot;autorizzazione che rappresenta tutte le operazioni indicate sia dell&quot;autorizzazione corrente e l&quot;autorizzazione specificata. Qualsiasi richiesta che passa l&quot;autorizzazione passa l&quot;unione."
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "Autorizzazione da combinare con l&quot;autorizzazione corrente. Deve essere lo stesso tipo dell&quot;autorizzazione corrente."
    return:
      type: System.Security.IPermission
      description: "Nuova autorizzazione che rappresenta l&quot;unione dell&quot;autorizzazione corrente e l&quot;autorizzazione specificata."
  overload: System.Security.Permissions.FileIOPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> other </code> parametro non è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e non è dello stesso tipo dell&quot;autorizzazione corrente."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(PermissionState)
  nameWithType: FileIOPermission.FileIOPermission(PermissionState)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
- uid: System.Security.AccessControl.AccessControlActions
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlActions
  nameWithType: AccessControlActions
  fullName: System.Security.AccessControl.AccessControlActions
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AddPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String)
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AddPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
- uid: System.Security.Permissions.FileIOPermission.AllFiles
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AllFiles
  nameWithType: FileIOPermission.AllFiles
  fullName: System.Security.Permissions.FileIOPermission.AllFiles
- uid: System.Security.Permissions.FileIOPermission.AllLocalFiles
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AllLocalFiles
  nameWithType: FileIOPermission.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermission.AllLocalFiles
- uid: System.Security.Permissions.FileIOPermission.Copy
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Copy()
  nameWithType: FileIOPermission.Copy()
  fullName: System.Security.Permissions.FileIOPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.FileIOPermission.Equals(System.Object)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: FileIOPermission.Equals(Object)
  fullName: System.Security.Permissions.FileIOPermission.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: FileIOPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.FileIOPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.FileIOPermission.GetHashCode
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: FileIOPermission.GetHashCode()
  fullName: System.Security.Permissions.FileIOPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: GetPathList(FileIOPermissionAccess)
  nameWithType: FileIOPermission.GetPathList(FileIOPermissionAccess)
  fullName: System.Security.Permissions.FileIOPermission.GetPathList(FileIOPermissionAccess)
- uid: System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: FileIOPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Intersect(IPermission)
- uid: System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: FileIOPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.IsSubsetOf(IPermission)
- uid: System.Security.Permissions.FileIOPermission.IsUnrestricted
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: FileIOPermission.IsUnrestricted()
  fullName: System.Security.Permissions.FileIOPermission.IsUnrestricted()
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: SetPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String)
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: SetPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
- uid: System.Security.Permissions.FileIOPermission.ToXml
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: ToXml()
  nameWithType: FileIOPermission.ToXml()
  fullName: System.Security.Permissions.FileIOPermission.ToXml()
- uid: System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: FileIOPermission.Union(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Union(IPermission)
- uid: System.Security.Permissions.FileIOPermission.#ctor*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission
  nameWithType: FileIOPermission.FileIOPermission
- uid: System.Security.Permissions.FileIOPermission.AddPathList*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AddPathList
  nameWithType: FileIOPermission.AddPathList
- uid: System.Security.Permissions.FileIOPermission.AllFiles*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AllFiles
  nameWithType: FileIOPermission.AllFiles
- uid: System.Security.Permissions.FileIOPermission.AllLocalFiles*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AllLocalFiles
  nameWithType: FileIOPermission.AllLocalFiles
- uid: System.Security.Permissions.FileIOPermission.Copy*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Copy
  nameWithType: FileIOPermission.Copy
- uid: System.Security.Permissions.FileIOPermission.Equals*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Equals
  nameWithType: FileIOPermission.Equals
- uid: System.Security.Permissions.FileIOPermission.FromXml*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FromXml
  nameWithType: FileIOPermission.FromXml
- uid: System.Security.Permissions.FileIOPermission.GetHashCode*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: GetHashCode
  nameWithType: FileIOPermission.GetHashCode
- uid: System.Security.Permissions.FileIOPermission.GetPathList*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: GetPathList
  nameWithType: FileIOPermission.GetPathList
- uid: System.Security.Permissions.FileIOPermission.Intersect*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Intersect
  nameWithType: FileIOPermission.Intersect
- uid: System.Security.Permissions.FileIOPermission.IsSubsetOf*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: FileIOPermission.IsSubsetOf
- uid: System.Security.Permissions.FileIOPermission.IsUnrestricted*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: FileIOPermission.IsUnrestricted
- uid: System.Security.Permissions.FileIOPermission.SetPathList*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: SetPathList
  nameWithType: FileIOPermission.SetPathList
- uid: System.Security.Permissions.FileIOPermission.ToXml*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: ToXml
  nameWithType: FileIOPermission.ToXml
- uid: System.Security.Permissions.FileIOPermission.Union*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Union
  nameWithType: FileIOPermission.Union
