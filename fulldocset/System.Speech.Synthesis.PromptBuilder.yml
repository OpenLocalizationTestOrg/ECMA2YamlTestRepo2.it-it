### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.PromptBuilder
  id: PromptBuilder
  children:
  - System.Speech.Synthesis.PromptBuilder.#ctor
  - System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)
  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendBreak
  - System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)
  - System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)
  - System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)
  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)
  - System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)
  - System.Speech.Synthesis.PromptBuilder.ClearContent
  - System.Speech.Synthesis.PromptBuilder.Culture
  - System.Speech.Synthesis.PromptBuilder.EndParagraph
  - System.Speech.Synthesis.PromptBuilder.EndSentence
  - System.Speech.Synthesis.PromptBuilder.EndStyle
  - System.Speech.Synthesis.PromptBuilder.EndVoice
  - System.Speech.Synthesis.PromptBuilder.IsEmpty
  - System.Speech.Synthesis.PromptBuilder.StartParagraph
  - System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.StartSentence
  - System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  - System.Speech.Synthesis.PromptBuilder.ToXml
  langs:
  - csharp
  name: PromptBuilder
  nameWithType: PromptBuilder
  fullName: System.Speech.Synthesis.PromptBuilder
  type: Class
  summary: "Crea un oggetto vuoto <xref href=&quot;System.Speech.Synthesis.Prompt&quot;> </xref> dell&quot;oggetto e fornisce metodi per l&quot;aggiunta di contenuto, la selezione di voci, controllo degli attributi vocali e controllo della pronuncia delle parole."
  remarks: "Con PromptBuilder, è possibile aggiungere un&quot;ampia gamma di tipi di contenuto da un prompt dei comandi, inclusi testo normale, SSML markup (come una stringa o un file), registrata audio o anche un altro oggetto PromptBuilder.       Per aggiungere testo a un oggetto PromptBuilder e, facoltativamente, controllo degli attributi vocali, ad esempio enfasi, velocità e volume, utilizzare uno del <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>metodi.</xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>  È inoltre possibile controllare gli attributi vocali come un gruppo con il <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>e <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>metodi.</xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> </xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>       È possibile aggiungere testo e controllare ciò che viene pronunciata o come si è accentuato utilizzando il <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, o <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>metodi.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>       Modificare la voce parlante attualmente selezionata nella finestra di richiesta utilizzando uno degli overload <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>metodi, una voce specifica per l&quot;utilizzo o la specifica di denominazione necessari caratteristiche vocali, ad esempio età e sesso.</xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>       Per generare il riconoscimento vocale da un oggetto PromptBuilder, è possibile passarlo come argomento per il <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>metodo.</xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>       Per ulteriori informazioni, vedere [costruzione Prompt complessi](http://msdn.microsoft.com/en-us/552cb356-7344-473e-b0f2-7a9983f8c1a4)."
  syntax:
    content: public class PromptBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.#ctor
  id: '#ctor'
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: PromptBuilder()
  nameWithType: PromptBuilder.PromptBuilder()
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Crea una nuova istanza di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Speech.Synthesis.PromptBuilder> instance and adds a text string to it.  \n  \n```c#  \nusing System.Speech.Synthesis;  \n  \npublic void MySimpleText ()  \n{  \n    PromptBuilder builder = new PromptBuilder ();  \n    builder.AppendText(\"Hello world!\");  \n}  \n```  \n  \n The following markup shows the equivalent in Speech Synthesis Markup Language (SSML), (`xml:lang` is a required attribute of the `speak` element):  \n  \n```xml  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">  \n  Hello world!  \n</speak>  \n```"
  syntax:
    content: public PromptBuilder ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)
  id: '#ctor(System.Globalization.CultureInfo)'
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: PromptBuilder(CultureInfo)
  nameWithType: PromptBuilder.PromptBuilder(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder(CultureInfo)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Crea una nuova istanza di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> e specifica le impostazioni cultura."
  remarks: "Questo costruttore imposta il valore per il <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>proprietà.</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> Il <xref:System.Speech.Synthesis.SpeechSynthesizer>tenta di selezionare una voce installata che supporta il linguaggio specificato dall&quot;oggetto di `culture` parametro per elaborare la richiesta.</xref:System.Speech.Synthesis.SpeechSynthesizer> Se viene trovata una voce con le impostazioni cultura specificate, verrà utilizzato. Se non viene trovata una voce con le impostazioni cultura specificate, verrà utilizzata la voce predefinita.       Per correttamente pronunciare le parole nella lingua specificata per il `culture` parametro, un motore di sintesi (sintesi vocale o TTS) vocale che supporta il linguaggio deve essere installato. Un motore di sintesi vocale installata viene chiamato una voce. Per ottenere informazioni su cui sono installate voci per una lingua specifica, utilizzare il <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodo.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows e l&quot;API Speech accettare tutti i codici di lingua, paese validi come valori per `culture`. I motori di sintesi vocale forniti con Windows 7 supportano i seguenti codici di lingua, paese:-en-US. Inglese (Stati Uniti) - zh-CN. Cinese (Cina) - zh-TW. Sono inoltre consentiti i codici di lingua cinese (Taiwan) a due lettere, ad esempio &quot;en&quot;."
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies its <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.  \n  \n```c#  \nusing System.Speech.Synthesis;  \n  \npublic void MySimpleText ()  \n{  \n    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo(\"en-US\"));  \n    builder.AppendText(\"Hello world!\");  \n}  \n```  \n  \n The following markup shows the equivalent SSML:  \n  \n```xml  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">  \n  Hello world!  \n</speak>  \n```"
  syntax:
    content: public PromptBuilder (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Vengono fornite informazioni sulle impostazioni cultura specifiche, ad esempio la lingua, il nome di impostazioni cultura, il sistema di scrittura, calendario usato e come formattare le date e ordinamento delle stringhe."
  overload: System.Speech.Synthesis.PromptBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)
  id: AppendAudio(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendAudio(String)
  nameWithType: PromptBuilder.AppendAudio(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il file audio specificato per il <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>."
  syntax:
    content: public void AppendAudio (string path);
    parameters:
    - id: path
      type: System.String
      description: "Il percorso completo al file audio."
  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)
  id: AppendAudio(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendAudio(Uri)
  nameWithType: PromptBuilder.AppendAudio(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il file audio nell&quot;URI specificato per il <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>."
  remarks: ''
  example:
  - "The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.  \n  \n```c#  \nusing System.Speech.PromptBuilder;  \n  \npublic void SimpleConcatenation()  \n{  \n    // Add a prompt fragment from a .wav file.  \n    PromptBuilder builder = new PromptBuilder ();  \n    builder.AppendText(\"How are you today?\");  \n    builder.AppendAudio(new Uri (\"http://www.speech.microsoft.com/ding.wav\"));  \n}  \n```  \n  \n The following markup shows the equivalent SSML markup.  \n  \n```xml  \n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n       xmlns:ms=\"http://www.microsoft.com/speech/synthesis\" xml:lang=\"en\">  \n  \n  How are you today?  \n  <audio src=\"http://www.speech.microsoft.com/ding.wav\" />  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendAudio (Uri audioFile);
    parameters:
    - id: audioFile
      type: System.Uri
      description: "URI per il file audio."
  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)
  id: AppendAudio(System.Uri,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendAudio(Uri,String)
  nameWithType: PromptBuilder.AppendAudio(Uri,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il file audio specificato e il testo alternativo per il <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>."
  remarks: "Il motore di sintesi vocale leggerà il testo alternativo se non è possibile riprodurre il file audio."
  example:
  - "The following examples adds an audio file to a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies text to speak if the audio file cannot be played.  \n  \n```c#  \nusing System.Speech.PromptBuilder;  \n  \npublic void SimpleConcatenation()  \n{  \n  \n    // Concatenate a prompt fragment from a .wav file.  \n    PromptBuilder builder = new PromptBuilder ();  \n    builder.AppendAudio(new Uri (\"C:\\\\OnHold.wav\"), \"Your call will be answered in the order it was received\");  \n}  \n```  \n  \n The following markup shows the equivalent SSML markup.  \n  \n```xml  \n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n       xmlns:ms=\"http://www.microsoft.com/speech/synthesis\" xml:lang=\"en\">  \n  \n  <audio src=\"C:\\OnHold.wav\"> Your call will be answered in the order it was received. </audio>  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendAudio (Uri audioFile, string alternateText);
    parameters:
    - id: audioFile
      type: System.Uri
      description: "URI per il file audio."
    - id: alternateText
      type: System.String
      description: "Stringa contenente il testo alternativo che rappresenta l&quot;audio."
  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)
  id: AppendBookmark(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBookmark(String)
  nameWithType: PromptBuilder.AppendBookmark(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBookmark(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge un segnalibro per il <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Motore di sintesi vocale genererà un <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>evento se viene rilevato un segnalibro mentre si parla di un prompt dei comandi utilizzando uno del <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>metodi.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>"
  example:
  - "The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback. The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Build a prompt and append bookmarks.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"The weather forecast for today is partly cloudy with some sun breaks.\");  \n        builder.AppendBookmark(\"Daytime forecast\");  \n        builder.AppendText(  \n          \"Tonight's weather will be cloudy with a 30% chance of showers.\");  \n        builder.AppendBookmark(\"Nightime forecast\");  \n  \n        // Add a handler for the BookmarkReached event.  \n        synth.BookmarkReached +=  \n          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Write the name and position of the bookmark to the console.  \n    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  \n    {  \n      Console.WriteLine(\"Bookmark ({0}) reached at: {1} \",  \n        e.Bookmark, e.AudioPosition);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendBookmark (string bookmarkName);
    parameters:
    - id: bookmarkName
      type: System.String
      description: "Stringa contenente il nome del computer segnalibro aggiunto."
  overload: System.Speech.Synthesis.PromptBuilder.AppendBookmark*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak
  id: AppendBreak
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBreak()
  nameWithType: PromptBuilder.AppendBreak()
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge un&quot;interruzione per il <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Questo metodo non specifica una durata per l&quot;interruzione. Il <xref:System.Speech.Synthesis.SpeechSynthesizer>determina un valore di durata in base al contesto linguistico.</xref:System.Speech.Synthesis.SpeechSynthesizer>"
  example:
  - "The following example builds a prompt containing two sentences separated by a break and speaks the prompt to the default audio device on the computer.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Build a prompt with two sentences separated by a break.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.\");  \n        builder.AppendBreak();  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.\");  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendBreak ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)
  id: AppendBreak(System.Speech.Synthesis.PromptBreak)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBreak(PromptBreak)
  nameWithType: PromptBuilder.AppendBreak(PromptBreak)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(PromptBreak)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge un&quot;interruzione per il <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica la durata."
  remarks: "I valori di <xref:System.Speech.Synthesis.PromptBreak>enumerazione rappresentano un intervallo di intervalli di separazione (mette in pausa) tra i delimitatori di parola.</xref:System.Speech.Synthesis.PromptBreak> Il motore di sintesi vocale determina la durata dell&quot;intervallo esatto. Quando viene richiesta un&quot;interruzione, uno di questi valori viene passato al motore di sintesi vocale (TTS), che contiene un mapping tra questi valori e i corrispondenti valori interruzione millisecondo."
  example:
  - "The following example builds a prompt containing two sentences separated by a break and sends the output to a WAV file for playback.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Build a prompt with two sentences separated by a break.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45\");  \n        builder.AppendBreak(PromptBreak.Medium);  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\");  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);
    parameters:
    - id: strength
      type: System.Speech.Synthesis.PromptBreak
      description: 'Indica la durata dell&quot;interruzione, con i valori di incremento seguenti:'
  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)
  id: AppendBreak(System.TimeSpan)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBreak(TimeSpan)
  nameWithType: PromptBuilder.AppendBreak(TimeSpan)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(TimeSpan)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge un&quot;interruzione della durata specificata per il <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Un&quot;interruzione può essere utilizzata per controllare pause o altri limiti prosodica tra le parole. Un&quot;interruzione è facoltativa. Se non è presenta un&quot;interruzione, il sintetizzatore determina l&quot;interruzione tra le parole a seconda del contesto linguistico."
  example:
  - "The following example builds a prompt containing two sentences separated by a break of 15,000,000 ticks (1.5 seconds), and speaks the prompt to the default audio device on the computer.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Build a prompt with two sentences separated by a break.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45\");  \n        builder.AppendBreak(new TimeSpan(15000000));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\");  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void AppendBreak (TimeSpan duration);
    parameters:
    - id: duration
      type: System.TimeSpan
      description: "Tempo in tick, in cui un tick è uguale a 100 nanosecondi."
  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  id: AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendPromptBuilder(PromptBuilder)
  nameWithType: PromptBuilder.AppendPromptBuilder(PromptBuilder)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(PromptBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge un <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto a un altro <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: ''
  example:
  - "The example that follows creates two <xref:System.Speech.Synthesis.PromptBuilder> instances and then appends them to a third <xref:System.Speech.Synthesis.PromptBuilder>.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\showtimes.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\showtimes.wav\");  \n  \n        // Build child prompts.  \n        PromptBuilder theatreA = new PromptBuilder();  \n        theatreA.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30\");  \n        theatreA.AppendBreak(PromptBreak.Large);  \n        PromptBuilder theatreB = new PromptBuilder();  \n        theatreB.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\");  \n  \n        // Build the parent prompt and append the two child prompts.  \n        PromptBuilder showTimes = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        showTimes.AppendText(  \n          \"The following are the show times for tonight's movies:\");  \n        showTimes.AppendPromptBuilder(theatreA);  \n        showTimes.AppendPromptBuilder(theatreB);  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(showTimes);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);
    parameters:
    - id: promptBuilder
      type: System.Speech.Synthesis.PromptBuilder
      description: "Il contenuto da aggiungere."
  overload: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)
  id: AppendSsml(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsml(String)
  nameWithType: PromptBuilder.AppendSsml(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il file SSML nel percorso specificato per il <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Il file SSML deve essere un file di formato XML conforme al [vocale sintesi Markup Language (SSML) versione 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specifica.       È anche possibile aggiungere il markup SSML come una stringa utilizzando <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the AppendSsml method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and append a file that defines an SSML prompt.  \n        PromptBuilder ssmlFile = new PromptBuilder();  \n        ssmlFile.AppendSsml(\"c:\\\\test\\\\Weather.ssml\");  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(ssmlFile);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```  \n  \n The following is the SSML file that the preceding example references.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n xml:lang=\"en-US\">  \n  \n  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendSsml (string path);
    parameters:
    - id: path
      type: System.String
      description: "Il percorso completo al file SSML da aggiungere."
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)
  id: AppendSsml(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsml(Uri)
  nameWithType: PromptBuilder.AppendSsml(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(Uri)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il file SSML nell&quot;URI specificato per il <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Il file SSML deve essere un file di formato XML conforme al [vocale sintesi Markup Language (SSML) versione 1.0](http://www.w3.org/TR/speech-synthesis/) specifica.       È anche possibile aggiungere il markup SSML come una stringa utilizzando <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the AppendSsml method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and append a file that defines an SSML prompt.  \n        PromptBuilder ssmlFile = new PromptBuilder();  \n        ssmlFile.AppendSsml(new Uri(\"c:\\\\test\\\\Weather.ssml\"));  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(ssmlFile);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```  \n  \n The following is the SSML file that the preceding example references.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n xml:lang=\"en-US\">  \n  \n  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendSsml (Uri ssmlFile);
    parameters:
    - id: ssmlFile
      type: System.Uri
      description: "URI completo al file SSML da aggiungere."
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)
  id: AppendSsml(System.Xml.XmlReader)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsml(XmlReader)
  nameWithType: PromptBuilder.AppendSsml(XmlReader)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(XmlReader)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge un `XMLReader` oggetto che fa riferimento a un prompt SSML al <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Il file SSML deve essere un file di formato XML conforme al [vocale sintesi Markup Language (SSML) versione 1.0](http://www.w3.org/TR/speech-synthesis/) specifica.       È anche possibile aggiungere il markup SSML come una stringa utilizzando <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language (SSML) markup.  \n  \n```c#  \nusing System;  \nusing System.Xml;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Create the path to the SSML file.  \n        string weatherFile = Path.GetFullPath(\"c:\\\\test\\\\Weather.xml\");  \n        PromptBuilder builder = null;  \n  \n        // Create an XML Reader from the file, create a PromptBuilder and   \n        // append the XmlReader.  \n        if (File.Exists(weatherFile))  \n        {  \n          XmlReader reader = XmlReader.Create(weatherFile);  \n          builder = new PromptBuilder();  \n          builder.AppendSsml(reader);  \n          reader.Close();  \n        }  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendSsml (System.Xml.XmlReader ssmlFile);
    parameters:
    - id: ssmlFile
      type: System.Xml.XmlReader
      description: "Un nome completo del file XML da aggiungere."
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)
  id: AppendSsmlMarkup(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsmlMarkup(String)
  nameWithType: PromptBuilder.AppendSsmlMarkup(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Accoda la stringa specificata contenente markup SSML al <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "You must use the appropriate escape characters when appending SSML markup. Notice the backward-slashes preceding the quotation marks enclosing the value of the `interpret-as` attribute in the following example:  \n  \n```c#  \nbuilder.AppendSsmlMarkup(\"<say-as interpret-as = \\\"characters\\\"> chair </say-as>\");  \n```  \n  \n> [!NOTE]\n>  The string used as an argument to AppendSsmlMarkup cannot include a `speak` element.  \n  \n When using AppendSsmlMarkup to specify inline pronunciations in a `phoneme` element, you can use phones from any of the following phonetic alphabets, provided that the current speech engine supports it:  \n  \n-   International Phonetic Alphabet (IPA)  \n  \n-   Universal Phone Set (UPS)  \n  \n-   SAPI Phone Set  \n  \n Any SSML-compliant speech engine will speak phones from the IPA.  \n  \n You can also append a file containing SSML markup using one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods. To append text to be spoken that is not formatted with markup language, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods."
  syntax:
    content: public void AppendSsmlMarkup (string ssmlMarkup);
    parameters:
    - id: ssmlMarkup
      type: System.String
      description: "Stringa contenente markup SSML."
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String)
  id: AppendText(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String)
  nameWithType: PromptBuilder.AppendText(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Specifica il testo da aggiungere al <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Per aggiungere testo formattato come linguaggio di markup SSML, utilizzare <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the AppendText method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and append a text string.  \n        PromptBuilder speakText = new PromptBuilder();  \n        speakText.AppendText(\"Say the name of the song you want to hear\");  \n  \n        // Speak the contents of the prompt.  \n        synth.Speak(speakText);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void AppendText (string textToSpeak);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Stringa contenente il testo da leggere."
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  id: AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String,PromptEmphasis)
  nameWithType: PromptBuilder.AppendText(String,PromptEmphasis)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptEmphasis)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il testo di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica il livello di enfasi per il testo."
  remarks: "I motori di sintesi vocale in Windows non supportano il parametro di enfasi in questo momento. Impostazione dei valori per il parametro di enfasi non produrrà alcuna modifica acustico nell&quot;output di sintesi vocale."
  syntax:
    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Stringa contenente il testo da leggere."
    - id: emphasis
      type: System.Speech.Synthesis.PromptEmphasis
      description: "Il valore per l&quot;enfasi o l&quot;accento da applicare al testo."
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)
  id: AppendText(System.String,System.Speech.Synthesis.PromptRate)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String,PromptRate)
  nameWithType: PromptBuilder.AppendText(String,PromptRate)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptRate)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il testo di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica la velocità di pronuncia per il testo."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings. The example uses the AppendText method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content.  \n        PromptBuilder speakRate = new PromptBuilder();  \n        speakRate.AppendText(\"Your order for\");  \n        speakRate.AppendText(\"one kitchen sink and one faucet\", PromptRate.Slow);  \n        speakRate.AppendText(\"has been confirmed.\");  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(speakRate);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Stringa contenente il testo da leggere."
    - id: rate
      type: System.Speech.Synthesis.PromptRate
      description: "Il valore per la velocità di pronuncia da applicare al testo."
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  id: AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String,PromptVolume)
  nameWithType: PromptBuilder.AppendText(String,PromptVolume)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptVolume)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il testo di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica il volume della pronuncia il testo."
  remarks: "L&quot; <xref:System.Speech.Synthesis.PromptVolume>impostazione per <xref:System.Speech.Synthesis.PromptVolume>volume completo, ovvero lo stesso come <xref:System.Speech.Synthesis.PromptVolume>.</xref:System.Speech.Synthesis.PromptVolume> </xref:System.Speech.Synthesis.PromptVolume> </xref:System.Speech.Synthesis.PromptVolume> Le altre impostazioni di ridurre il volume dell&quot;output vocale rispetto al volume pieno."
  example:
  - "The following example uses the AppendText method to specify volume settings that the <xref:System.Speech.Synthesis.SpeechSynthesizer> should apply to speech output.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Build a prompt that applies different volume settings.  \n        PromptBuilder builder = new PromptBuilder();  \n        builder.AppendText(\"This is the default speaking volume.\", PromptVolume.Default);  \n        builder.AppendBreak();  \n        builder.AppendText(\"This is the extra loud speaking volume.\", PromptVolume.ExtraLoud);  \n        builder.AppendBreak();  \n        builder.AppendText(\"This is the medium speaking volume.\", PromptVolume.Medium);  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Stringa contenente il testo da leggere."
    - id: volume
      type: System.Speech.Synthesis.PromptVolume
      description: "Il valore per il volume della pronuncia (sonorità) da applicare al testo."
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)
  id: AppendTextWithAlias(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithAlias(String,String)
  nameWithType: PromptBuilder.AppendTextWithAlias(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il testo di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica il testo alias da pronunciare al posto del testo aggiunto."
  remarks: "In questo modo il documento contenga un parlata sia un modulo scritto per una richiesta. Ad esempio, la forma scritta potrebbe essere un acronimo, ad esempio SAPI, e la forma parlata potrebbe essere il testo per l&quot;acronimo, in questo riconoscimento vocale Application Programming Interface case espanso."
  example:
  - "The following example appends a text string (\"Speech Synthesis Markup Language\") and its alias (\"SSML\") to a <xref:System.Speech.Synthesis.PromptBuilder> object. The synthesizer will pronounce \"S S M L\".  \n  \n```  \nPromptBuilder alias = new PromptBuilder();  \nalias.AppendTextWithAlias(\"Speech Synthesis Markup Language\",\"SSML\");   \n```"
  syntax:
    content: public void AppendTextWithAlias (string textToSpeak, string substitute);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Stringa che contiene la rappresentazione di testo."
    - id: substitute
      type: System.String
      description: "Stringa contenente il testo da leggere."
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  id: AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithHint(String,SayAs)
  nameWithType: PromptBuilder.AppendTextWithHint(String,SayAs)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,SayAs)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il testo di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica il tipo di contenuto utilizzando un membro del <xref href=&quot;System.Speech.Synthesis.SayAs&quot;> </xref> enumerazione."
  remarks: "Il tipo di contenuto specificato da `sayAs` possono fornire linee guida per il motore di sintesi vocale sul pronunciare il contenuto di `textToSpeak`."
  example:
  - "```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and define the data types for some of the added strings.  \n        PromptBuilder sayAs = new PromptBuilder();  \n        sayAs.AppendText(\"Your\");  \n        sayAs.AppendTextWithHint(\"1st\", SayAs.NumberOrdinal);  \n        sayAs.AppendText(\"request was for\");  \n        sayAs.AppendTextWithHint(\"1\", SayAs.NumberCardinal);  \n        sayAs.AppendText(\"room, on\");  \n        sayAs.AppendTextWithHint(\"10/19/2012,\", SayAs.MonthDayYear);  \n        sayAs.AppendText(\"with early arrival at\");  \n        sayAs.AppendTextWithHint(\"12:35pm\", SayAs.Time12);  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(sayAs);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Stringa contenente il testo da leggere."
    - id: sayAs
      type: System.Speech.Synthesis.SayAs
      description: "Il tipo di contenuto del testo."
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)
  id: AppendTextWithHint(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithHint(String,String)
  nameWithType: PromptBuilder.AppendTextWithHint(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il testo di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto e un <xref:System.String>che specifica il tipo di contenuto del testo.</xref:System.String>"
  remarks: "È possibile utilizzare questo metodo per specificare un tipo di contenuto che non sia presenti i <xref:System.Speech.Synthesis.SayAs>enumerazione.</xref:System.Speech.Synthesis.SayAs> Tuttavia, il motore di sintesi vocale deve supportare il parametro specificato."
  syntax:
    content: public void AppendTextWithHint (string textToSpeak, string sayAs);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Stringa contenente il testo da leggere."
    - id: sayAs
      type: System.String
      description: "Il tipo di contenuto del testo."
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)
  id: AppendTextWithPronunciation(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithPronunciation(String,String)
  nameWithType: PromptBuilder.AppendTextWithPronunciation(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Aggiunge il testo di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica la pronuncia per il testo."
  remarks: "The synthesizer speaks the contents of the `pronunciation` parameter, not the contents of the `textToSpeak` parameter.  \n  \n Pronunciations specified inline in prompts apply only to the individual occurrence of a word and override pronunciations of the speech engine or any of its currently active lexicons. Typically, you will use inline pronunciations for custom pronunciations of existing words or for pronunciation of uncommon words, such as proper names, which the speech synthesis engine may not pronounce as well as expected.  \n  \n Inline pronunciations must be specified using phones from the International Phonetic Alphabet (IPA). A phone is a letter or character that represents a discreet sound of speech. Speech engines that comply with the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification will pronounce phones from the IPA. To specify inline pronunciations using other phonetic alphabets, see <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.  \n  \n The IPA publishes a [chart](http://go.microsoft.com/fwlink/?LinkId=58362) that lists its phones and maps them to Unicode numbers.  \n  \n Some phones in the IPA alphabet have the same representations as letters in the Latin alphabet. In those cases, it is possible to type the Latin character and have the proper representation for a phone. Because the Latin characters as commonly used in text may represent several phones of the IPA phone set, simply typing the Latin character might not result in the precise IPA phone desired. Other phones of the IPA alphabet need to be represented in code as character references consisting of an ampersand (&), the number sign (#), and a Unicode number for the desired phone in hexadecimal or decimal, all followed by a semicolon (;). For example, a schwa (&\\#x0259;) would be represented by `ə`.  \n  \n To add new or custom pronunciations for multiple words, for example to express regional dialects or to add proper names or vocabulary that is specific to an educational or medical discipline, build a lexicon and add it to the <xref:System.Speech.Synthesis.SpeechSynthesizer> using <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>."
  example:
  - "The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class. It then appends the text string \"My name is\" to the instance. Finally, it appends a string containing the proper name \"DuBois\" and specifies the pronunciation of the name.  \n  \n```c#  \npublic void ProperName()  \n{  \n    PromptBuilder builder = new PromptBuilder();  \n    builder.AppendText(\"My name is\");  \n  \n    // Add a proper name and its pronunciation.  \n    builder.AppendTextWithPronunciation(\"DuBois\", \"duˈbwɑ\");     \n}  \n```  \n  \n The following markup shows the SSML that this <xref:System.Speech.Synthesis.PromptBuilder> object generates.  \n  \n```xml  \n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-us\">  \n  My name is <phoneme ph=\"duˈbwɑ\"> DuBois </phoneme>  \n</speak>  \n```"
  syntax:
    content: public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Stringa contenente la forma scritta della parola che usa l&quot;alfabeto convenzionale per una lingua."
    - id: pronunciation
      type: System.String
      description: "Stringa contenente i fonemi da alfabeto fonetico internazionale (IPA)."
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.ClearContent
  id: ClearContent
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: ClearContent()
  nameWithType: PromptBuilder.ClearContent()
  fullName: System.Speech.Synthesis.PromptBuilder.ClearContent()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Cancella il contenuto di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  syntax:
    content: public void ClearContent ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.ClearContent*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.Culture
  id: Culture
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: Culture
  nameWithType: PromptBuilder.Culture
  fullName: System.Speech.Synthesis.PromptBuilder.Culture
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Ottiene o imposta le informazioni delle impostazioni cultura per il <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the Culture property to process the prompt. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used.  \n  \n A culture may also be specified within the prompt for discreet sections of content using the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> methods. A culture specified for a portion of content using one of the above methods will override the Culture property while in effect, and the <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter of the method.  \n  \n To correctly pronounce words in the language specified by the Culture property, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.  \n  \n Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:  \n  \n-   en-US. English (United States)  \n  \n-   zh-CN. Chinese (China)  \n  \n-   zh-TW. Chinese (Taiwan)  \n  \n Two-letter language codes such as \"en\" are also permitted.  See [Language Identifier Constants and Strings](http://msdn.microsoft.com/library/dd318693\\(VS.85\\).aspx) for a comprehensive list of language codes."
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "Da aggiungere."
  overload: System.Speech.Synthesis.PromptBuilder.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph
  id: EndParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndParagraph()
  nameWithType: PromptBuilder.EndParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.EndParagraph()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Specifica la fine di un paragrafo di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Richieste lungo possono essere visualizzate più simile voce umana se essi sono suddivisi in frasi e paragrafi. Vedere <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>per un esempio.</xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>"
  syntax:
    content: public void EndParagraph ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndSentence
  id: EndSentence
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndSentence()
  nameWithType: PromptBuilder.EndSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.EndSentence()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Specifica la fine di una frase nel <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Richieste lungo possono essere visualizzate più simile voce umana se essi sono suddivisi in frasi e paragrafi. Vedere <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>per un esempio.</xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>"
  syntax:
    content: public void EndSentence ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndSentence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndStyle
  id: EndStyle
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndStyle()
  nameWithType: PromptBuilder.EndStyle()
  fullName: System.Speech.Synthesis.PromptBuilder.EndStyle()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Specifica la fine di uno stile di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Il metodo EndStyle interrompe lo stile della voce corrente. Lo stile di pronuncia viene ripristinata l&quot;impostazione che era attivo prima di <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>metodo avviato un nuovo stile pronuncia.</xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> Vedere <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>per un esempio.</xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>"
  syntax:
    content: public void EndStyle ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndVoice
  id: EndVoice
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndVoice()
  nameWithType: PromptBuilder.EndVoice()
  fullName: System.Speech.Synthesis.PromptBuilder.EndVoice()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Specifica la fine dell&quot;uso di una voce nel <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Il metodo EndVoice interrompe l&quot;utilizzo della voce corrente per l&quot;output vocale. La voce viene ripristinata l&quot;impostazione che era attivo prima di <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>metodo avviata una nuova voce.</xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>"
  syntax:
    content: public void EndVoice ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty
  id: IsEmpty
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: IsEmpty
  nameWithType: PromptBuilder.IsEmpty
  fullName: System.Speech.Synthesis.PromptBuilder.IsEmpty
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Ottiene se il <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> è vuoto."
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: "Da aggiungere."
  overload: System.Speech.Synthesis.PromptBuilder.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph
  id: StartParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartParagraph()
  nameWithType: PromptBuilder.StartParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Specifica l&quot;inizio di un paragrafo di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Richieste lungo possono essere visualizzate più simile voce umana se essi sono suddivisi in frasi e paragrafi."
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content as paragraphs and sentences.  \n        PromptBuilder parSent = new PromptBuilder();  \n        parSent.StartParagraph();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"Introducing the sentence element.\");  \n        parSent.EndSentence();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"You can use it to mark individual sentences.\");  \n        parSent.EndSentence();  \n        parSent.EndParagraph();  \n        parSent.StartParagraph();  \n        parSent.AppendText(\"Another simple paragraph. Sentence structure in this paragraph\" +  \n          \"is not explicitly marked.\");  \n        parSent.EndParagraph();  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(parSent);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void StartParagraph ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.StartParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)
  id: StartParagraph(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartParagraph(CultureInfo)
  nameWithType: PromptBuilder.StartParagraph(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph(CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Specifica l&quot;inizio di un paragrafo nelle impostazioni cultura specificate nel <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Richieste lungo possono essere visualizzate più simile voce umana se essi sono suddivisi in frasi e paragrafi.       Il `culture` parametro per un paragrafo può essere diverso rispetto alla <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>proprietà dell&quot; <xref:System.Speech.Synthesis.PromptBuilder>oggetto che contiene.</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> In effetti, mentre il valore del `culture` parametro sostituiranno il <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>proprietà.</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> Il <xref:System.Speech.Synthesis.SpeechSynthesizer>tenterà di selezionare una voce installata che supporta la lingua specificata dal `culture` parametro parlare di paragrafo.</xref:System.Speech.Synthesis.SpeechSynthesizer> Se viene trovata una voce con le impostazioni cultura specificate, verrà utilizzato. Se non viene trovata una voce con le impostazioni cultura specificate, verrà utilizzata la voce predefinita. Per interrompere l&quot;uso della voce specificata da StartParagraph, chiamare <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>       Per correttamente pronunciare le parole nella lingua specificata per il `culture` parametro, un motore di sintesi (sintesi vocale o TTS) vocale che supporta il linguaggio deve essere installato. Un motore di sintesi vocale installata viene chiamato una voce. Per ottenere informazioni su cui sono installate voci per una lingua specifica, utilizzare il <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodo.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows e l&quot;API Speech accettare tutti i codici di lingua, paese validi come valori per `culture`. I motori di sintesi vocale forniti con Windows 7 supportano i seguenti codici di lingua, paese:-en-US. Inglese (Stati Uniti) - zh-CN. Cinese (Cina) - zh-TW. Sono inoltre consentiti i codici di lingua cinese (Taiwan) a due lettere, ad esempio &quot;en&quot;."
  syntax:
    content: public void StartParagraph (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Vengono fornite informazioni sulle impostazioni cultura specifiche, ad esempio la lingua, il nome di impostazioni cultura, il sistema di scrittura, calendario usato e come formattare le date e ordinamento delle stringhe."
  overload: System.Speech.Synthesis.PromptBuilder.StartParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence
  id: StartSentence
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartSentence()
  nameWithType: PromptBuilder.StartSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Specifica l&quot;inizio di una frase nel <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Richieste lungo possono essere visualizzate più simile voce umana se essi sono suddivisi in frasi e paragrafi."
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content as paragraphs and sentences.  \n        PromptBuilder parSent = new PromptBuilder();  \n        parSent.StartParagraph();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"Introducing the sentence element.\");  \n        parSent.EndSentence();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"You can use it to mark individual sentences.\");  \n        parSent.EndSentence();  \n        parSent.EndParagraph();  \n        parSent.StartParagraph();  \n        parSent.AppendText(\"Another simple paragraph. Sentence structure in this paragraph\" +  \n          \"is not explicitly marked.\");  \n        parSent.EndParagraph();  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(parSent);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void StartSentence ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.StartSentence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)
  id: StartSentence(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartSentence(CultureInfo)
  nameWithType: PromptBuilder.StartSentence(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence(CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Specifica l&quot;inizio di una frase nella lingua specificata nel <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Richieste lungo possono essere visualizzate più simile voce umana se essi sono suddivisi in frasi e paragrafi.       Il `culture` parametro di una frase può essere diverso da quello di `culture` parametro per il paragrafo contenente la frase o <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>proprietà del <xref:System.Speech.Synthesis.PromptBuilder>oggetto che li contiene.</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>       In effetti, mentre il valore del `culture` parametro sostituiranno il <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>proprietà e `culture` parametro per il paragrafo contenente la frase.</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> Il <xref:System.Speech.Synthesis.SpeechSynthesizer>tenterà di selezionare una voce installata che supporta la lingua specificata dal `culture` parametro pronuncia della frase.</xref:System.Speech.Synthesis.SpeechSynthesizer> Se viene trovata una voce con le impostazioni cultura specificate, verrà utilizzato. Se non viene trovata una voce con le impostazioni cultura specificate, verrà utilizzata la voce predefinita. Per interrompere l&quot;uso della voce specificata da StartSentence, chiamare <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>       Per correttamente pronunciare le parole nella lingua specificata per il `culture` parametro, un motore di sintesi (sintesi vocale o TTS) vocale che supporta il linguaggio deve essere installato. Un motore di sintesi vocale installata viene chiamato una voce. Per ottenere informazioni su cui sono installate voci per una lingua specifica, utilizzare il <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodo.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows e l&quot;API Speech accettare tutti i codici di lingua, paese validi come valori per `culture`. I motori di sintesi vocale forniti con Windows 7 supportano i seguenti codici di lingua, paese:-en-US. Inglese (Stati Uniti) - zh-CN. Cinese (Cina) - zh-TW. Sono inoltre consentiti i codici di lingua cinese (Taiwan) a due lettere, ad esempio &quot;en&quot;."
  syntax:
    content: public void StartSentence (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Vengono fornite informazioni sulle impostazioni cultura specifiche, ad esempio la lingua, il nome di impostazioni cultura, il sistema di scrittura, calendario usato e come formattare le date e ordinamento delle stringhe."
  overload: System.Speech.Synthesis.PromptBuilder.StartSentence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)
  id: StartStyle(System.Speech.Synthesis.PromptStyle)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartStyle(PromptStyle)
  nameWithType: PromptBuilder.StartStyle(PromptStyle)
  fullName: System.Speech.Synthesis.PromptBuilder.StartStyle(PromptStyle)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Specifica l&quot;inizio di uno stile di <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Il metodo StartStyle accetta un <xref:System.Speech.Synthesis.PromptStyle>oggetto come relativo argomento.</xref:System.Speech.Synthesis.PromptStyle> È possibile utilizzare le proprietà del <xref:System.Speech.Synthesis.PromptStyle>per impostare l&quot;enfasi, velocità di pronuncia e volume (sonorità) da applicare al riconoscimento vocale mentre lo stile è in corso di output.</xref:System.Speech.Synthesis.PromptStyle> Per arrestare utilizzando lo stile corrente, chiamare il <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>metodo.</xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>      > [!NOTE] >-I motori di sintesi vocale in Windows non supportano il parametro di enfasi in questo momento. Impostazione dei valori per il parametro di enfasi non produrrà alcuna modifica acustico nell&quot;output di sintesi vocale.   >-L&quot; <xref:System.Speech.Synthesis.PromptVolume>impostazione per <xref:System.Speech.Synthesis.PromptVolume>volume completo, ovvero lo stesso come <xref:System.Speech.Synthesis.PromptVolume>.</xref:System.Speech.Synthesis.PromptVolume> </xref:System.Speech.Synthesis.PromptVolume> </xref:System.Speech.Synthesis.PromptVolume> Le altre impostazioni di ridurre il volume dell&quot;output vocale rispetto al volume pieno."
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings. The example uses the StartStyle method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content.  \n        PromptBuilder style = new PromptBuilder();  \n        style.AppendText(\"Your order for\");  \n        style.StartStyle(new PromptStyle(PromptRate.Slow));  \n        style.AppendText(\"one kitchen sink and one faucet\");  \n        style.EndStyle();  \n        style.AppendText(\"has been confirmed.\");  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(style);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void StartStyle (System.Speech.Synthesis.PromptStyle style);
    parameters:
    - id: style
      type: System.Speech.Synthesis.PromptStyle
      description: "Stile da avviare."
  overload: System.Speech.Synthesis.PromptBuilder.StartStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)
  id: StartVoice(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(CultureInfo)
  nameWithType: PromptBuilder.StartVoice(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Indica al sintetizzatore di modificare la voce nel <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica le impostazioni cultura della voce da usare."
  remarks: "Il `culture` parametro per StartVoice può essere diverso rispetto alla <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>proprietà dell&quot; <xref:System.Speech.Synthesis.PromptBuilder>oggetto che contiene.</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>  In effetti, mentre il valore del `culture` parametro sostituiranno il <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>proprietà.</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> Il <xref:System.Speech.Synthesis.SpeechSynthesizer>tenterà di selezionare una voce installata che supporta la lingua specificata dal `culture` parametro per leggere il contenuto racchiuso da StartVoice e <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> a</xref:System.Speech.Synthesis.SpeechSynthesizer> Se viene trovata una voce con le impostazioni cultura specificate, verrà utilizzato. Se non viene trovata una voce con le impostazioni cultura specificate, verrà utilizzata la voce predefinita. Per interrompere l&quot;uso della voce specificata da StartVoice, chiamare <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>       Per correttamente pronunciare le parole nella lingua specificata per il `culture` parametro, un motore di sintesi (sintesi vocale o TTS) vocale che supporta il linguaggio deve essere installato. Un motore di sintesi vocale installata viene chiamato una voce. Per ottenere informazioni su cui sono installate voci per una lingua specifica, utilizzare il <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodo.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows e l&quot;API Speech accettare tutti i codici di lingua, paese validi come valori per `culture`. I motori di sintesi vocale forniti con Windows 7 supportano i seguenti codici di lingua, paese:-en-US. Inglese (Stati Uniti) - zh-CN. Cinese (Cina) - zh-TW. Sono inoltre consentiti i codici di lingua cinese (Taiwan) a due lettere, ad esempio &quot;en&quot;."
  syntax:
    content: public void StartVoice (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Vengono fornite informazioni sulle impostazioni cultura specifiche, ad esempio la lingua, il nome di impostazioni cultura, il sistema di scrittura, calendario usato e come formattare le date e ordinamento delle stringhe."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)
  id: StartVoice(System.Speech.Synthesis.VoiceGender)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceGender)
  nameWithType: PromptBuilder.StartVoice(VoiceGender)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Indica al sintetizzatore di modificare la voce nel <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica il genere della voce da usare."
  remarks: "Utilizzare il <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodi e <xref:System.Speech.Synthesis.VoiceInfo>installato di classe per ottenere i nomi e gli attributi di voci di sintesi vocale (TTS) che è possibile selezionare.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Per smettere di usare la voce specificata dalla chiamata StartVoice <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "Il genere della voce da usare."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)
  id: StartVoice(System.Speech.Synthesis.VoiceInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceInfo)
  nameWithType: PromptBuilder.StartVoice(VoiceInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Indica al sintetizzatore di modificare la voce nel <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica i criteri per la nuova voce."
  remarks: "Utilizzare il <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodi e <xref:System.Speech.Synthesis.VoiceInfo>installato di classe per ottenere i nomi e gli attributi di voci di sintesi vocale (TTS) che è possibile selezionare.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Per smettere di usare la voce specificata dalla chiamata StartVoice <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);
    parameters:
    - id: voice
      type: System.Speech.Synthesis.VoiceInfo
      description: "I criteri per la voce da usare."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)
  id: StartVoice(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(String)
  nameWithType: PromptBuilder.StartVoice(String)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Indica al sintetizzatore di modificare la voce nel <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica il nome della voce da usare."
  remarks: "Per ottenere informazioni sulle voci installate, usare uno del <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodi.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Per smettere di usare la voce specificata dalla chiamata StartVoice <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (string name);
    parameters:
    - id: name
      type: System.String
      description: "Nome della voce da usare."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  id: StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceGender,VoiceAge)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Indica al sintetizzatore di modificare la voce nel <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica il genere e l&quot;età della nuova voce."
  remarks: "Utilizzare il <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodi e <xref:System.Speech.Synthesis.VoiceInfo>installato di classe per ottenere i nomi e gli attributi di voci di sintesi vocale (TTS) che è possibile selezionare.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Per smettere di usare la voce specificata dalla chiamata StartVoice <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "Il genere della nuova voce da usare."
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "L&quot;età della voce da usare."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  id: StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceGender,VoiceAge,Int32)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Indica al sintetizzatore di modificare la voce nel <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> dell&quot;oggetto e specifica il sesso, età e una voce preferita che corrisponde al sesso specificato e l&quot;età."
  remarks: "Motore di sintesi vocale conta le corrispondenze individua per i parametri specificati e restituisce la voce quando il conteggio è uguale al `voiceAlternate` parametro.       Utilizzare il <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>metodi e <xref:System.Speech.Synthesis.VoiceInfo>installato di classe per ottenere i nomi e gli attributi di voci di sintesi vocale (TTS) che è possibile selezionare.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Per smettere di usare la voce specificata dalla chiamata StartVoice <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "Il genere della voce da usare."
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "L&quot;età della voce da usare."
    - id: voiceAlternate
      type: System.Int32
      description: "Valore intero che specifica una voce preferita quando più voci corrispondono la `gender` e `age` parametri."
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.ToXml
  id: ToXml
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: ToXml()
  nameWithType: PromptBuilder.ToXml()
  fullName: System.Speech.Synthesis.PromptBuilder.ToXml()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Restituisce l&quot;elemento SSML generato dal <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto."
  remarks: "Il metodo ToXml non effettua alcun tentativo di formattare l&quot;elemento SSML restituito in alcun modo."
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends text, and then writes the SSML equivalent of the prompt to the console before speaking the contents of the prompt.  \n  \n```c#  \n  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content.  \n        PromptBuilder style = new PromptBuilder();  \n        style.AppendText(\"Your order for\");  \n        style.StartStyle(new PromptStyle(PromptRate.Slow));  \n        style.AppendText(\"one kitchen sink and one faucet\");  \n        style.EndStyle();  \n        style.AppendText(\"has been confirmed.\");  \n  \n        // Write the contents of the PromptBuilder object to the console as  \n        // an SSML-compatible XML file.  \n        string myXml = style.ToXml();  \n        Console.WriteLine(\"This is the SSML equivalent of the PromptBuilder: \\n\\n\" + myXml);  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(style);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public string ToXml ();
    parameters: []
    return:
      type: System.String
      description: "Restituisce l&quot;elemento SSML generato dal <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> oggetto come una singola riga."
  overload: System.Speech.Synthesis.PromptBuilder.ToXml*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.PromptBuilder.#ctor
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: PromptBuilder()
  nameWithType: PromptBuilder.PromptBuilder()
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder()
- uid: System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: PromptBuilder(CultureInfo)
  nameWithType: PromptBuilder.PromptBuilder(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio(String)
  nameWithType: PromptBuilder.AppendAudio(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio(Uri)
  nameWithType: PromptBuilder.AppendAudio(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio(Uri,String)
  nameWithType: PromptBuilder.AppendAudio(Uri,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri,String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBookmark(String)
  nameWithType: PromptBuilder.AppendBookmark(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBookmark(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak()
  nameWithType: PromptBuilder.AppendBreak()
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak()
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak(PromptBreak)
  nameWithType: PromptBuilder.AppendBreak(PromptBreak)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(PromptBreak)
- uid: System.Speech.Synthesis.PromptBreak
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptBreak
  nameWithType: PromptBreak
  fullName: System.Speech.Synthesis.PromptBreak
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak(TimeSpan)
  nameWithType: PromptBuilder.AppendBreak(TimeSpan)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendPromptBuilder(PromptBuilder)
  nameWithType: PromptBuilder.AppendPromptBuilder(PromptBuilder)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(PromptBuilder)
- uid: System.Speech.Synthesis.PromptBuilder
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptBuilder
  nameWithType: PromptBuilder
  fullName: System.Speech.Synthesis.PromptBuilder
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml(String)
  nameWithType: PromptBuilder.AppendSsml(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml(Uri)
  nameWithType: PromptBuilder.AppendSsml(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(Uri)
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml(XmlReader)
  nameWithType: PromptBuilder.AppendSsml(XmlReader)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsmlMarkup(String)
  nameWithType: PromptBuilder.AppendSsmlMarkup(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String)
  nameWithType: PromptBuilder.AppendText(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String,PromptEmphasis)
  nameWithType: PromptBuilder.AppendText(String,PromptEmphasis)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptEmphasis)
- uid: System.Speech.Synthesis.PromptEmphasis
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptEmphasis
  nameWithType: PromptEmphasis
  fullName: System.Speech.Synthesis.PromptEmphasis
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String,PromptRate)
  nameWithType: PromptBuilder.AppendText(String,PromptRate)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptRate)
- uid: System.Speech.Synthesis.PromptRate
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptRate
  nameWithType: PromptRate
  fullName: System.Speech.Synthesis.PromptRate
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String,PromptVolume)
  nameWithType: PromptBuilder.AppendText(String,PromptVolume)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptVolume)
- uid: System.Speech.Synthesis.PromptVolume
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptVolume
  nameWithType: PromptVolume
  fullName: System.Speech.Synthesis.PromptVolume
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithAlias(String,String)
  nameWithType: PromptBuilder.AppendTextWithAlias(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(String,String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithHint(String,SayAs)
  nameWithType: PromptBuilder.AppendTextWithHint(String,SayAs)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,SayAs)
- uid: System.Speech.Synthesis.SayAs
  parent: System.Speech.Synthesis
  isExternal: false
  name: SayAs
  nameWithType: SayAs
  fullName: System.Speech.Synthesis.SayAs
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithHint(String,String)
  nameWithType: PromptBuilder.AppendTextWithHint(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithPronunciation(String,String)
  nameWithType: PromptBuilder.AppendTextWithPronunciation(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(String,String)
- uid: System.Speech.Synthesis.PromptBuilder.ClearContent
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ClearContent()
  nameWithType: PromptBuilder.ClearContent()
  fullName: System.Speech.Synthesis.PromptBuilder.ClearContent()
- uid: System.Speech.Synthesis.PromptBuilder.Culture
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: Culture
  nameWithType: PromptBuilder.Culture
  fullName: System.Speech.Synthesis.PromptBuilder.Culture
- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndParagraph()
  nameWithType: PromptBuilder.EndParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.EndParagraph()
- uid: System.Speech.Synthesis.PromptBuilder.EndSentence
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndSentence()
  nameWithType: PromptBuilder.EndSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.EndSentence()
- uid: System.Speech.Synthesis.PromptBuilder.EndStyle
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndStyle()
  nameWithType: PromptBuilder.EndStyle()
  fullName: System.Speech.Synthesis.PromptBuilder.EndStyle()
- uid: System.Speech.Synthesis.PromptBuilder.EndVoice
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndVoice()
  nameWithType: PromptBuilder.EndVoice()
  fullName: System.Speech.Synthesis.PromptBuilder.EndVoice()
- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: IsEmpty
  nameWithType: PromptBuilder.IsEmpty
  fullName: System.Speech.Synthesis.PromptBuilder.IsEmpty
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartParagraph()
  nameWithType: PromptBuilder.StartParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph()
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartParagraph(CultureInfo)
  nameWithType: PromptBuilder.StartParagraph(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph(CultureInfo)
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartSentence()
  nameWithType: PromptBuilder.StartSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence()
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartSentence(CultureInfo)
  nameWithType: PromptBuilder.StartSentence(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence(CultureInfo)
- uid: System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartStyle(PromptStyle)
  nameWithType: PromptBuilder.StartStyle(PromptStyle)
  fullName: System.Speech.Synthesis.PromptBuilder.StartStyle(PromptStyle)
- uid: System.Speech.Synthesis.PromptStyle
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptStyle
  nameWithType: PromptStyle
  fullName: System.Speech.Synthesis.PromptStyle
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(CultureInfo)
  nameWithType: PromptBuilder.StartVoice(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(CultureInfo)
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceGender)
  nameWithType: PromptBuilder.StartVoice(VoiceGender)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender)
- uid: System.Speech.Synthesis.VoiceGender
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceGender
  nameWithType: VoiceGender
  fullName: System.Speech.Synthesis.VoiceGender
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceInfo)
  nameWithType: PromptBuilder.StartVoice(VoiceInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceInfo)
- uid: System.Speech.Synthesis.VoiceInfo
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceInfo
  nameWithType: VoiceInfo
  fullName: System.Speech.Synthesis.VoiceInfo
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(String)
  nameWithType: PromptBuilder.StartVoice(String)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(String)
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceGender,VoiceAge)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge)
- uid: System.Speech.Synthesis.VoiceAge
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceAge
  nameWithType: VoiceAge
  fullName: System.Speech.Synthesis.VoiceAge
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceGender,VoiceAge,Int32)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.PromptBuilder.ToXml
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ToXml()
  nameWithType: PromptBuilder.ToXml()
  fullName: System.Speech.Synthesis.PromptBuilder.ToXml()
- uid: System.Speech.Synthesis.PromptBuilder.#ctor*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: PromptBuilder
  nameWithType: PromptBuilder.PromptBuilder
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio
  nameWithType: PromptBuilder.AppendAudio
- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBookmark
  nameWithType: PromptBuilder.AppendBookmark
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak
  nameWithType: PromptBuilder.AppendBreak
- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendPromptBuilder
  nameWithType: PromptBuilder.AppendPromptBuilder
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml
  nameWithType: PromptBuilder.AppendSsml
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsmlMarkup
  nameWithType: PromptBuilder.AppendSsmlMarkup
- uid: System.Speech.Synthesis.PromptBuilder.AppendText*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText
  nameWithType: PromptBuilder.AppendText
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithAlias
  nameWithType: PromptBuilder.AppendTextWithAlias
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithHint
  nameWithType: PromptBuilder.AppendTextWithHint
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithPronunciation
  nameWithType: PromptBuilder.AppendTextWithPronunciation
- uid: System.Speech.Synthesis.PromptBuilder.ClearContent*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ClearContent
  nameWithType: PromptBuilder.ClearContent
- uid: System.Speech.Synthesis.PromptBuilder.Culture*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: Culture
  nameWithType: PromptBuilder.Culture
- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndParagraph
  nameWithType: PromptBuilder.EndParagraph
- uid: System.Speech.Synthesis.PromptBuilder.EndSentence*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndSentence
  nameWithType: PromptBuilder.EndSentence
- uid: System.Speech.Synthesis.PromptBuilder.EndStyle*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndStyle
  nameWithType: PromptBuilder.EndStyle
- uid: System.Speech.Synthesis.PromptBuilder.EndVoice*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndVoice
  nameWithType: PromptBuilder.EndVoice
- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: IsEmpty
  nameWithType: PromptBuilder.IsEmpty
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartParagraph
  nameWithType: PromptBuilder.StartParagraph
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartSentence
  nameWithType: PromptBuilder.StartSentence
- uid: System.Speech.Synthesis.PromptBuilder.StartStyle*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartStyle
  nameWithType: PromptBuilder.StartStyle
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice
  nameWithType: PromptBuilder.StartVoice
- uid: System.Speech.Synthesis.PromptBuilder.ToXml*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ToXml
  nameWithType: PromptBuilder.ToXml
