### YamlMime:ManagedReference
items:
- uid: System.Messaging.AccessControlList
  id: AccessControlList
  children:
  - System.Messaging.AccessControlList.#ctor
  - System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  - System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)
  - System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)
  langs:
  - csharp
  name: AccessControlList
  nameWithType: AccessControlList
  fullName: System.Messaging.AccessControlList
  type: Class
  summary: "Contiene un elenco di voci di controllo di accesso, specificando i diritti di accesso per uno o più trustee."
  remarks: "Utilizzare la classe AccessControlList per specificare più fiduciari e diritti di accesso da aggiungere con una singola chiamata durante l&quot;impostazione di autorizzazioni. Costruire l&quot;elenco di controllo di accesso mediante l&quot;aggiunta di una voce di controllo di accesso per ogni combinazione di diritti di accesso e trustee.       Un AccessControlList identifica i fiduciari consentiti o negati l&quot;accesso a un oggetto a protezione diretta. Quando un processo tenta di accedere a un oggetto a protezione diretta, il sistema verifica le voci di controllo di accesso nell&quot;elenco di controllo di accesso dell&quot;oggetto per determinare se concedere l&quot;accesso a esso. Se l&quot;oggetto non ha un elenco di controllo di accesso, il sistema concede l&quot;accesso completo a tutti gli elementi. Se l&quot;elenco di controllo di accesso dell&quot;oggetto è presenti voci, il sistema Nega a tutti i tentativi di accedere all&quot;oggetto.       Il sistema verifica le voci di controllo di accesso in sequenza, fino a quando trova uno o più che concedono tutti i diritti di accesso richiesto o uno qualsiasi dei diritti di accesso negato.       Il sistema esamina ciascuna <xref:System.Messaging.AccessControlEntry>in sequenza, fino a quando non si verifica uno dei seguenti eventi:: un&quot;accesso negato <xref:System.Messaging.AccessControlEntry>Nega esplicitamente il qualsiasi dei diritti di accesso richiesto a uno dei fiduciari elencati nel token di accesso del thread.</xref:System.Messaging.AccessControlEntry> </xref:System.Messaging.AccessControlEntry>      -Uno o più accesso consentiti <xref:System.Messaging.AccessControlEntry>voci per tutti i diritti di accesso richiesto di concedere fiduciari elencati nel token di accesso del thread in modo esplicito.</xref:System.Messaging.AccessControlEntry>      -Tutto <xref:System.Messaging.AccessControlEntry>articoli sono stati verificati e vi è ancora almeno un diritto di accesso che non è stato esplicitamente concesso, nel qual caso, viene implicitamente negato l&quot;accesso.</xref:System.Messaging.AccessControlEntry>"
  syntax:
    content: 'public class AccessControlList : System.Collections.CollectionBase'
  inheritance:
  - System.Object
  - System.Collections.CollectionBase
  implements: []
  inheritedMembers:
  - System.Collections.CollectionBase.Capacity
  - System.Collections.CollectionBase.Clear
  - System.Collections.CollectionBase.Count
  - System.Collections.CollectionBase.GetEnumerator
  - System.Collections.CollectionBase.InnerList
  - System.Collections.CollectionBase.List
  - System.Collections.CollectionBase.OnClear
  - System.Collections.CollectionBase.OnClearComplete
  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnValidate(System.Object)
  - System.Collections.CollectionBase.RemoveAt(System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  platform:
  - net462
- uid: System.Messaging.AccessControlList.#ctor
  id: '#ctor'
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: AccessControlList()
  nameWithType: AccessControlList.AccessControlList()
  fullName: System.Messaging.AccessControlList.AccessControlList()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Messaging.AccessControlList&quot;> </xref> classe."
  syntax:
    content: public AccessControlList ();
    parameters: []
  overload: System.Messaging.AccessControlList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)
  id: Add(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Add(AccessControlEntry)
  nameWithType: AccessControlList.Add(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Add(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Aggiunge una voce di controllo di accesso all&quot;elenco di controllo di accesso."
  syntax:
    content: public int Add (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "Oggetto <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> da aggiungere alla fine dell&quot;elenco di controllo di accesso."
    return:
      type: System.Int32
      description: "La posizione in cui è stata inserita la nuova voce di controllo di accesso."
  overload: System.Messaging.AccessControlList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>entry</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)
  id: Contains(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Contains(AccessControlEntry)
  nameWithType: AccessControlList.Contains(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Contains(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Determina se l&quot;elenco di controllo di accesso contiene una voce di controllo di accesso specifico."
  syntax:
    content: public bool Contains (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "Il <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> da individuare nell&quot;elenco di controllo di accesso."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se viene trovata la voce di controllo di accesso nell&quot;elenco di controllo di accesso. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.AccessControlList.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  id: CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: CopyTo(AccessControlEntry[],Int32)
  nameWithType: AccessControlList.CopyTo(AccessControlEntry[],Int32)
  fullName: System.Messaging.AccessControlList.CopyTo(AccessControlEntry[],Int32)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Copia l&quot;elenco di controllo di accesso intero in una matrice unidimensionale compatibile di accesso controllo voci, a partire dall&quot;indice specificato della matrice di destinazione."
  syntax:
    content: public void CopyTo (System.Messaging.AccessControlEntry[] array, int index);
    parameters:
    - id: array
      type: System.Messaging.AccessControlEntry[]
      description: "Matrice di tipo <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> in cui verranno copiate voci di elenco di controllo di accesso. La matrice deve avere un&quot;indicizzazione in base zero."
    - id: index
      type: System.Int32
      description: "L&quot;indice nella matrice in corrispondenza del quale iniziare la copia di voci di elenco di controllo di accesso."
  overload: System.Messaging.AccessControlList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>array</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il <code> index </code> parametro è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> index </code> parametro è maggiore o uguale alla lunghezza del <code> array </code> parametro.       - oppure - il numero di elementi nell&quot;elenco di controllo di accesso di origine è maggiore dello spazio disponibile da <code> index </code> alla fine della matrice di destinazione delle voci di controllo di accesso."
  platform:
  - net462
- uid: System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)
  id: IndexOf(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: IndexOf(AccessControlEntry)
  nameWithType: AccessControlList.IndexOf(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.IndexOf(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Determina l&quot;indice di una voce di controllo di accesso nell&quot;elenco di controllo di accesso specifico."
  syntax:
    content: public int IndexOf (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "Il <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> da individuare nell&quot;elenco di controllo di accesso."
    return:
      type: System.Int32
      description: "L&quot;indice della voce, se è stato trovato nell&quot;elenco. in caso contrario, -1"
  overload: System.Messaging.AccessControlList.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)
  id: Insert(System.Int32,System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Insert(Int32,AccessControlEntry)
  nameWithType: AccessControlList.Insert(Int32,AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Insert(Int32,AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Inserisce una voce di controllo di accesso nell&quot;elenco di controllo di accesso in corrispondenza della posizione specificata."
  remarks: "Se il `index` parametro è uguale al numero di elementi nell&quot;elenco di controllo di accesso, quindi la voce viene aggiunta alla fine. In caso contrario, le voci dopo il punto di inserimento spostati verso il basso per consentire il nuovo elemento nell&quot;elenco."
  syntax:
    content: public void Insert (int index, System.Messaging.AccessControlEntry entry);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero in corrispondenza del quale deve essere inserita la voce di controllo di accesso."
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "Oggetto <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> da inserire nell&quot;elenco di controllo di accesso."
  overload: System.Messaging.AccessControlList.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il <code> index </code> parametro non è un indice valido in questo elenco di controllo di accesso."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>entry</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)
  id: Remove(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  langs:
  - csharp
  name: Remove(AccessControlEntry)
  nameWithType: AccessControlList.Remove(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Remove(AccessControlEntry)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rimuove la prima occorrenza di una voce di controllo di accesso specifico dall&quot;elenco di controllo di accesso."
  remarks: "Voci di controllo di accesso che seguono l&quot;elemento rimosso spostano in alto occupare la posizione rimasta vuota."
  syntax:
    content: public void Remove (System.Messaging.AccessControlEntry entry);
    parameters:
    - id: entry
      type: System.Messaging.AccessControlEntry
      description: "Il <xref href=&quot;System.Messaging.AccessControlEntry&quot;> </xref> da rimuovere dall&quot;elenco di controllo di accesso."
  overload: System.Messaging.AccessControlList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>entry</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.CollectionBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Messaging.AccessControlList.#ctor
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: AccessControlList()
  nameWithType: AccessControlList.AccessControlList()
  fullName: System.Messaging.AccessControlList.AccessControlList()
- uid: System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Add(AccessControlEntry)
  nameWithType: AccessControlList.Add(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Add(AccessControlEntry)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Messaging.AccessControlEntry
  parent: System.Messaging
  isExternal: false
  name: AccessControlEntry
  nameWithType: AccessControlEntry
  fullName: System.Messaging.AccessControlEntry
- uid: System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Contains(AccessControlEntry)
  nameWithType: AccessControlList.Contains(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Contains(AccessControlEntry)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: CopyTo(AccessControlEntry[],Int32)
  nameWithType: AccessControlList.CopyTo(AccessControlEntry[],Int32)
  fullName: System.Messaging.AccessControlList.CopyTo(AccessControlEntry[],Int32)
- uid: System.Messaging.AccessControlEntry[]
  parent: System.Messaging
  isExternal: false
  name: AccessControlEntry
  nameWithType: AccessControlEntry
  fullName: System.Messaging.AccessControlEntry[]
  spec.csharp:
  - uid: System.Messaging.AccessControlEntry
    name: AccessControlEntry
    nameWithType: AccessControlEntry
    fullName: AccessControlEntry[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: IndexOf(AccessControlEntry)
  nameWithType: AccessControlList.IndexOf(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.IndexOf(AccessControlEntry)
- uid: System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Insert(Int32,AccessControlEntry)
  nameWithType: AccessControlList.Insert(Int32,AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Insert(Int32,AccessControlEntry)
- uid: System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Remove(AccessControlEntry)
  nameWithType: AccessControlList.Remove(AccessControlEntry)
  fullName: System.Messaging.AccessControlList.Remove(AccessControlEntry)
- uid: System.Messaging.AccessControlList.#ctor*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: AccessControlList
  nameWithType: AccessControlList.AccessControlList
- uid: System.Messaging.AccessControlList.Add*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Add
  nameWithType: AccessControlList.Add
- uid: System.Messaging.AccessControlList.Contains*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Contains
  nameWithType: AccessControlList.Contains
- uid: System.Messaging.AccessControlList.CopyTo*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: CopyTo
  nameWithType: AccessControlList.CopyTo
- uid: System.Messaging.AccessControlList.IndexOf*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: IndexOf
  nameWithType: AccessControlList.IndexOf
- uid: System.Messaging.AccessControlList.Insert*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Insert
  nameWithType: AccessControlList.Insert
- uid: System.Messaging.AccessControlList.Remove*
  parent: System.Messaging.AccessControlList
  isExternal: false
  name: Remove
  nameWithType: AccessControlList.Remove
