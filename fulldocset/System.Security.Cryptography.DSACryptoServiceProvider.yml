### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DSACryptoServiceProvider
  id: DSACryptoServiceProvider
  children:
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  - System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  - System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  - System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  - System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  - System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  - System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  - System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  - System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: DSACryptoServiceProvider
  nameWithType: DSACryptoServiceProvider
  fullName: System.Security.Cryptography.DSACryptoServiceProvider
  type: Class
  summary: "Definisce un oggetto wrapper per l&quot;implementazione del provider (CSP) del servizio di crittografia di accesso di <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> algoritmo. Questa classe non può essere ereditata."
  remarks: "È possibile utilizzare la classe DSACryptoServiceProvider per creare firme digitali e proteggere l&quot;integrità dei dati.       Per utilizzare un sistema a chiave pubblica per firmare digitalmente un messaggio, il mittente applica innanzitutto una funzione hash al messaggio per creare un digest del messaggio. Il mittente quindi crittografa il digest del messaggio con la chiave privata del mittente per creare la firma del mittente personale. Dopo aver ricevuto il messaggio e la firma, il destinatario decrittografa la firma con chiave pubblica del mittente per recuperare il digest del messaggio e genera un hash per il messaggio utilizzando lo stesso algoritmo hash inviato dal mittente. Se il digest del messaggio dal destinatario corrisponde esattamente al digest del messaggio ricevuto dal mittente, il ricevitore può essere certi che il messaggio non è stato alterato durante il trasferimento. Si noti che è possibile verificare una firma da chiunque, poiché la chiave pubblica del mittente è conoscenze comuni.      > [!NOTE] > Più recenti algoritmi asimmetrici sono disponibili. È consigliabile utilizzare la <xref:System.Security.Cryptography.RSACryptoServiceProvider>classe anziché la classe DSACryptoServiceProvider.</xref:System.Security.Cryptography.RSACryptoServiceProvider> Utilizzare DSACryptoServiceProvider solo per compatibilità con le applicazioni legacy e i dati.       Questo algoritmo supporta lunghezze di chiave da 512 bit a 1024 bit in incrementi di 64 bit."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class DSACryptoServiceProvider : System.Security.Cryptography.DSA, System.Security.Cryptography.ICspAsymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  - System.Security.Cryptography.DSA
  implements:
  - System.Security.Cryptography.ICspAsymmetricAlgorithm
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.DSA.Create
  - System.Security.Cryptography.DSA.Create(System.String)
  - System.Security.Cryptography.DSA.FromXmlString(System.String)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider()
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> classe."
  syntax:
    content: public DSACryptoServiceProvider ();
    parameters: []
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(Int32)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> classe con la dimensione della chiave specificata."
  syntax:
    content: public DSACryptoServiceProvider (int dwKeySize);
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "Le dimensioni della chiave per l&quot;algoritmo asimmetrico in bit."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> classe con i parametri specificati per il provider del servizio di crittografia (CSP)."
  syntax:
    content: public DSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "I parametri del CSP."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Int32,System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: DSACryptoServiceProvider(Int32,CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> classe con i parametri per il provider del servizio di crittografia (CSP) e la dimensione della chiave specificata."
  syntax:
    content: public DSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);
    parameters:
    - id: dwKeySize
      type: System.Int32
      description: "Le dimensioni della chiave per l&quot;algoritmo di crittografia in bit."
    - id: parameters
      type: System.Security.Cryptography.CspParameters
      description: "I parametri del CSP."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Impossibile acquisire il provider CSP.       - oppure - non è possibile creare la chiave."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>dwKeySize</code>non compreso nell&quot;intervallo."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  id: CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: CreateSignature(Byte[])
  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Crea il <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> firma per i dati specificati."
  syntax:
    content: public override byte[] CreateSignature (byte[] rgbHash);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "I dati da firmare."
    return:
      type: System.Byte[]
      description: "La firma digitale per i dati specificati."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  id: CspKeyContainerInfo
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene un <xref href=&quot;System.Security.Cryptography.CspKeyContainerInfo&quot;> </xref> oggetto che descrive informazioni aggiuntive su una coppia di chiavi crittografiche."
  remarks: "Utilizzare la proprietà CspKeyContainerInfo per recuperare informazioni aggiuntive su una coppia di chiavi crittografiche.  L&quot;oggetto restituito <xref:System.Security.Cryptography.CspKeyContainerInfo>descrive se la chiave è esportabile e specifica il nome di contenitore di chiavi, informazioni sul provider e altre informazioni.</xref:System.Security.Cryptography.CspKeyContainerInfo>       Nei casi in cui viene generata una chiave casuale, non essere creato un contenitore di chiavi fino a quando non si chiama un metodo che utilizza la chiave.  Alcune proprietà di <xref:System.Security.Cryptography.CspKeyContainerInfo>oggetto restituito dalla proprietà CspKeyContainerInfo genererà un <xref:System.Security.Cryptography.CryptographicException>Se non è stato creato un contenitore di chiavi.</xref:System.Security.Cryptography.CryptographicException> </xref:System.Security.Cryptography.CspKeyContainerInfo>  Per assicurarsi che sia stato creato un contenitore di chiavi, chiamare un metodo, ad esempio <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>e così via, prima di chiamare la proprietà CspKeyContainerInfo.</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A> </xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> </xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A> </xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>"
  syntax:
    content: public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }
    return:
      type: System.Security.Cryptography.CspKeyContainerInfo
      description: "Oggetto <xref href=&quot;System.Security.Cryptography.CspKeyContainerInfo&quot;> </xref> oggetto che descrive informazioni aggiuntive su una coppia di chiavi crittografiche."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Da aggiungere."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  id: ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ExportCspBlob(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Esporta un blob che contiene le informazioni sulla chiave associate a un <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> oggetto."
  remarks: "Il metodo ExportCspBlob restituisce un blob che contiene informazioni sulla chiave che è compatibile con l&quot;API di crittografia Microsoft (CAPI)."
  syntax:
    content: public byte[] ExportCspBlob (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per includere la chiave privata. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Byte[]
      description: "Matrice di byte contenente le informazioni sulla chiave associate a un <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> oggetto."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Esportazioni di <xref href=&quot;System.Security.Cryptography.DSAParameters&quot;> </xref>."
  syntax:
    content: public override System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per includere i parametri privati; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Security.Cryptography.DSAParameters
      description: "I parametri per <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Impossibile esportare la chiave."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "Da aggiungere."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Da aggiungere."
    return:
      type: System.Byte[]
      description: "Da aggiungere."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Da aggiungere."
    - id: offset
      type: System.Int32
      description: "Da aggiungere."
    - id: count
      type: System.Int32
      description: "Da aggiungere."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Da aggiungere."
    return:
      type: System.Byte[]
      description: "Da aggiungere."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  id: ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ImportCspBlob(Byte[])
  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Importa un blob che rappresenta le informazioni chiave DSA."
  remarks: "Il metodo ImportCspBlob Inizializza i dati della chiave di un <xref:System.Security.Cryptography.DSACryptoServiceProvider>utilizzando un blob che è compatibile con l&quot;API di crittografia Microsoft (CAPI).</xref:System.Security.Cryptography.DSACryptoServiceProvider>"
  syntax:
    content: public void ImportCspBlob (byte[] keyBlob);
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "Matrice di byte che rappresenta un blob di chiave DSA."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  id: ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: ImportParameters(DSAParameters)
  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Importa l&quot;oggetto specificato <xref href=&quot;System.Security.Cryptography.DSAParameters&quot;> </xref>."
  syntax:
    content: public override void ImportParameters (System.Security.Cryptography.DSAParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.DSAParameters
      description: "I parametri per <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Impossibile acquisire il provider del servizio di crittografia (CSP).       - o - <code> parameters </code> parametro mancano dei campi."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene il nome dell&quot;algoritmo di scambio di chiave."
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "Il nome dell&quot;algoritmo di scambio di chiave."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  id: KeySize
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene le dimensioni della chiave usata dall&quot;algoritmo asimmetrico in bit."
  remarks: "Questo algoritmo supporta lunghezze di chiave da 512 bit a 1024 bit in incrementi di 64 bit.       La <xref:System.Security.Cryptography.DSACryptoServiceProvider>classe non consente di modificare le dimensioni delle chiavi utilizzando la proprietà KeySize.</xref:System.Security.Cryptography.DSACryptoServiceProvider>  Qualsiasi valore scritto per questa proprietà non verrà aggiornate le proprietà senza errori.  Per modificare la dimensione della chiave, utilizzare uno degli overload del costruttore."
  syntax:
    content: public override int KeySize { get; }
    return:
      type: System.Int32
      description: "Le dimensioni della chiave usata dall&quot;algoritmo asimmetrico."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  id: PersistKeyInCsp
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene o imposta un valore che indica se la chiave deve essere mantenuta nel provider del servizio di crittografia (CSP)."
  remarks: "Utilizzare questa proprietà quando si desidera mantenere una chiave in un contenitore di chiavi."
  syntax:
    content: public bool PersistKeyInCsp { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la chiave deve essere mantenuta nel provider CSP; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  id: PublicOnly
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> oggetto contiene solo una chiave pubblica."
  remarks: "La <xref:System.Security.Cryptography.DSACryptoServiceProvider>classe può essere inizializzata con una chiave pubblica sola o con entrambi una public e private key.</xref:System.Security.Cryptography.DSACryptoServiceProvider>  Utilizzare la proprietà PublicOnly per determinare se l&quot;istanza corrente contiene solo una chiave pubblica o una chiave pubblica e privata."
  syntax:
    content: public bool PublicOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Security.Cryptography.DSACryptoServiceProvider&quot;> </xref> oggetto contiene solo una chiave; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene il nome dell&quot;algoritmo di firma."
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "Il nome dell&quot;algoritmo di firma."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  id: SignData(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Byte[])
  nameWithType: DSACryptoServiceProvider.SignData(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Calcola il valore hash della matrice di byte specificato e firma il valore hash risultante."
  remarks: "Questo metodo crea una firma digitale viene verificata mediante la <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>metodo.</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>       <xref:System.Security.Cryptography.DSA>Usa il <xref:System.Security.Cryptography.SHA1>algoritmo hash.</xref:System.Security.Cryptography.SHA1></xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignData (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "I dati di input per il quale calcolare il valore hash."
    return:
      type: System.Byte[]
      description: "Il <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> firma per i dati specificati."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  id: SignData(System.IO.Stream)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Stream)
  nameWithType: DSACryptoServiceProvider.SignData(Stream)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Calcola il valore hash del flusso di input specificato e firma il valore hash risultante."
  remarks: "<xref:System.Security.Cryptography.DSA>Usa il <xref:System.Security.Cryptography.SHA1>algoritmo hash.</xref:System.Security.Cryptography.SHA1></xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignData (System.IO.Stream inputStream);
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: "I dati di input per il quale calcolare il valore hash."
    return:
      type: System.Byte[]
      description: "Il <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> firma per i dati specificati."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  id: SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32)
  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Segni di punto di una matrice di byte dall&quot;inizio specificato e il punto finale specificato."
  remarks: "Questo metodo crea una firma digitale viene verificata mediante la <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>metodo.</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>       <xref:System.Security.Cryptography.DSA>Usa il <xref:System.Security.Cryptography.SHA1>algoritmo hash.</xref:System.Security.Cryptography.SHA1></xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignData (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Per firmare i dati di input."
    - id: offset
      type: System.Int32
      description: "Offset nella matrice da cui iniziare a utilizzare i dati."
    - id: count
      type: System.Int32
      description: "Il numero di byte nella matrice da utilizzare come dati."
    return:
      type: System.Byte[]
      description: "Il <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> firma per i dati specificati."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  id: SignHash(System.Byte[],System.String)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: SignHash(Byte[],String)
  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Calcola la firma per il valore hash specificato crittografandola con la chiave privata."
  remarks: "Questo metodo crea una firma digitale viene verificata mediante la <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>metodo.</xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>       <xref:System.Security.Cryptography.DSA>Usa il <xref:System.Security.Cryptography.SHA1>algoritmo hash.</xref:System.Security.Cryptography.SHA1></xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public byte[] SignHash (byte[] rgbHash, string str);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "Il valore hash dei dati da firmare."
    - id: str
      type: System.String
      description: "Il nome dell&quot;algoritmo hash utilizzato per creare il valore hash dei dati."
    return:
      type: System.Byte[]
      description: "Il <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> firma per il valore hash specificato."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbHash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Impossibile acquisire il provider del servizio di crittografia (CSP).       oppure è presente alcuna chiave privata."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  id: UseMachineKeyStore
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ottiene o imposta un valore che indica se la chiave deve essere mantenuta nell&quot;archivio delle chiavi del computer anziché l&quot;archivio dei profili utente."
  remarks: "Impostando questa proprietà su true equivale a passare il flag UseMachineKeyStore per un <xref:System.Security.Cryptography.CspParameters>oggetto.</xref:System.Security.Cryptography.CspParameters> La proprietà UseMachineKeyStore si applica a tutto il codice nel dominio applicazione corrente, mentre l&quot; <xref:System.Security.Cryptography.CspParameters>oggetto si applica solo alle classi che fa riferimento in modo esplicito.</xref:System.Security.Cryptography.CspParameters> Queste impostazioni sono utili quando la rappresentazione o eseguito con un account con cui il profilo utente non è caricato."
  syntax:
    content: public static bool UseMachineKeyStore { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la chiave deve essere mantenuta nell&quot;archivio chiavi del computer; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  id: VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifica i dati di firma specificato confrontandolo con la firma calcolata per i dati specificati."
  remarks: "Questo metodo verifica la <xref:System.Security.Cryptography.DSA>firma digitale prodotta da <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>.</xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A> </xref:System.Security.Cryptography.DSA>       <xref:System.Security.Cryptography.DSA>Usa il <xref:System.Security.Cryptography.SHA1>algoritmo hash.</xref:System.Security.Cryptography.SHA1></xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public bool VerifyData (byte[] rgbData, byte[] rgbSignature);
    parameters:
    - id: rgbData
      type: System.Byte[]
      description: "I dati che è stati firmati."
    - id: rgbSignature
      type: System.Byte[]
      description: "I dati della firma da verificare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la firma viene verificata come valido. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  id: VerifyHash(System.Byte[],System.String,System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifyHash(Byte[],String,Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifica i dati di firma specificato confrontandolo con la firma calcolata per il valore hash specificato."
  remarks: "Questo metodo verifica la <xref:System.Security.Cryptography.DSA>firma digitale prodotta da <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>.</xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A> </xref:System.Security.Cryptography.DSA>       Se il `str` parametro `null`, viene utilizzato l&quot;algoritmo hash predefinito (SHA1). L&quot;algoritmo hash valido è <xref:System.Security.Cryptography.SHA1>.</xref:System.Security.Cryptography.SHA1>"
  syntax:
    content: public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "Il valore hash dei dati da firmare."
    - id: str
      type: System.String
      description: "Il nome dell&quot;algoritmo hash utilizzato per creare il valore hash dei dati."
    - id: rgbSignature
      type: System.Byte[]
      description: "I dati della firma da verificare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la firma viene verificata come valido. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>rgbHash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>rgbSignature</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Impossibile acquisire il provider del servizio di crittografia (CSP).       - oppure - non è possibile verificare la firma."
  platform:
  - net462
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  id: VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  langs:
  - csharp
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifica il <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> firma per i dati specificati."
  syntax:
    content: public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "Dati firmati con `rgbSignature`."
    - id: rgbSignature
      type: System.Byte[]
      description: "La firma da verificare per `rgbData`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> rgbSignature </code> corrisponde alla firma calcolata con l&quot;algoritmo hash specificato e la chiave in <code> rgbHash </code>; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.DSA
  isExternal: false
  name: System.Security.Cryptography.DSA
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider()
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(Int32)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider(Int32,CspParameters)
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CreateSignature(Byte[])
  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo
- uid: System.Security.Cryptography.CspKeyContainerInfo
  parent: System.Security.Cryptography
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: CspKeyContainerInfo
  fullName: System.Security.Cryptography.CspKeyContainerInfo
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportCspBlob(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)
- uid: System.Security.Cryptography.DSAParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: DSAParameters
  nameWithType: DSAParameters
  fullName: System.Security.Cryptography.DSAParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportCspBlob(Byte[])
  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportParameters(DSAParameters)
  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Byte[])
  nameWithType: DSACryptoServiceProvider.SignData(Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Stream)
  nameWithType: DSACryptoServiceProvider.SignData(Stream)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData(Byte[],Int32,Int32)
  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignHash(Byte[],String)
  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyData(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyHash(Byte[],String,Byte[])
  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])
- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: DSACryptoServiceProvider
  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CreateSignature
  nameWithType: DSACryptoServiceProvider.CreateSignature
- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: CspKeyContainerInfo
  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo
- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: Dispose
  nameWithType: DSACryptoServiceProvider.Dispose
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportCspBlob
  nameWithType: DSACryptoServiceProvider.ExportCspBlob
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ExportParameters
  nameWithType: DSACryptoServiceProvider.ExportParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: HashData
  nameWithType: DSACryptoServiceProvider.HashData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportCspBlob
  nameWithType: DSACryptoServiceProvider.ImportCspBlob
- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: ImportParameters
  nameWithType: DSACryptoServiceProvider.ImportParameters
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: KeySize
  nameWithType: DSACryptoServiceProvider.KeySize
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PersistKeyInCsp
  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp
- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: PublicOnly
  nameWithType: DSACryptoServiceProvider.PublicOnly
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignData
  nameWithType: DSACryptoServiceProvider.SignData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: SignHash
  nameWithType: DSACryptoServiceProvider.SignHash
- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: UseMachineKeyStore
  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyData
  nameWithType: DSACryptoServiceProvider.VerifyData
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifyHash
  nameWithType: DSACryptoServiceProvider.VerifyHash
- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*
  parent: System.Security.Cryptography.DSACryptoServiceProvider
  isExternal: false
  name: VerifySignature
  nameWithType: DSACryptoServiceProvider.VerifySignature
