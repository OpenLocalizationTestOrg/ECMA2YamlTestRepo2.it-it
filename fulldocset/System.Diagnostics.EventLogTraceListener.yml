### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogTraceListener
  id: EventLogTraceListener
  children:
  - System.Diagnostics.EventLogTraceListener.#ctor
  - System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  - System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  - System.Diagnostics.EventLogTraceListener.Close
  - System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  - System.Diagnostics.EventLogTraceListener.EventLog
  - System.Diagnostics.EventLogTraceListener.Name
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.EventLogTraceListener.Write(System.String)
  - System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener
  fullName: System.Diagnostics.EventLogTraceListener
  type: Class
  summary: "Fornisce un listener semplice che indirizza la traccia e debug per un <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>."
  remarks: "È possibile aggiungere un&quot;istanza di questa EventLogTraceListener per il <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>, <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>, o <xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName>raccolte per inviare l&quot;output di tracciatura o di debug per un <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.TraceSource.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> È possibile aggiungere l&quot;istanza nel codice o specificarla nel file di configurazione dell&quot;applicazione. Per aggiungere EventLogTraceListener utilizzando un file di configurazione dell&quot;applicazione, modificare il file che corrisponde al nome dell&quot;applicazione o il file app. config in un [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] progetto. In questo file, inserire un elemento per un tipo EventLogTraceListener.       L&quot;esempio seguente aggiunge un oggetto EventLogTraceListener denominato `myListener` per il <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>insieme.</xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> Il `initializeData` parametro specifica il nome dell&quot;origine che deve essere passata al registro eventi di <xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>costruttore.</xref:System.Diagnostics.EventLogTraceListener.%23ctor%28System.String%29>      ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;4&quot;>         <listeners>           <add name=&quot;myListener&quot;             type=&quot;System.Diagnostics.EventLogTraceListener&quot;             initializeData=&quot;TraceListenerLog&quot; />         </listeners>       </trace>     </system.diagnostics>   </configuration>   ```Per ulteriori informazioni su come aggiungere i listener di traccia nel file di configurazione dell&quot;applicazione, vedere o.      > [!NOTE] > Se il <xref:System.Diagnostics.EventLog.Source%2A>per il registro eventi che è associato all&quot;istanza EventLogTraceListener non esiste, viene creata una nuova origine evento.</xref:System.Diagnostics.EventLog.Source%2A> Per creare un&quot;origine evento in Windows Vista, Windows XP Professional o Windows Server 2003, è necessario disporre di privilegi amministrativi.   >> Il motivo per il requisito è che tutti i registri eventi, tra cui sicurezza, è necessario eseguire la ricerca per determinare se l&quot;origine evento è univoco. In Windows Vista, gli utenti non dispone dell&quot;autorizzazione per accedere al Registro di sicurezza; Pertanto, un <xref:System.Security.SecurityException>viene generata un&quot;eccezione.</xref:System.Security.SecurityException>   >> In Windows Vista, il controllo dell&quot;Account utente (UAC) determina i privilegi di un utente. Si è un membro del gruppo Administrators predefinito, vengono assegnati due token di accesso in fase di esecuzione: un token di accesso utente standard e un token di accesso di amministratore. Per impostazione predefinita, viene assegnato il ruolo dell&quot;utente standard. Per eseguire il codice che accede al Registro di sicurezza, è necessario elevare i privilegi da utente standard ad amministratore. È possibile farlo quando si avvia un&quot;applicazione facendo clic sull&quot;icona dell&quot;applicazione e indicando che si desidera eseguire come amministratore.       La classe fornisce la <xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>proprietà da ottenere o impostare il registro eventi che riceve la traccia di output o di debug, e <xref:System.Diagnostics.EventLogTraceListener.Name%2A>proprietà per specificare il nome del EventLogTraceListener.</xref:System.Diagnostics.EventLogTraceListener.Name%2A> </xref:System.Diagnostics.EventLogTraceListener.EventLog%2A>       Il <xref:System.Diagnostics.EventLogTraceListener.Close%2A>metodo chiude il log eventi in modo non riceva più traccia o di output di debug.</xref:System.Diagnostics.EventLogTraceListener.Close%2A> Gli <xref:System.Diagnostics.EventLogTraceListener.Write%2A>metodi e <xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A>scrivono un messaggio nel registro eventi.</xref:System.Diagnostics.EventLogTraceListener.WriteLine%2A> </xref:System.Diagnostics.EventLogTraceListener.Write%2A>      > [!NOTE] > Per evitare la possibilità di scrivere grandi quantità di dati nel registro eventi, il EventLogTraceListener non restituire i dati di traccia facoltativi specificati dal <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>proprietà.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  example:
  - "The following example creates a trace listener that sends output to an event log. First, the code creates a new EventLogTraceListener that uses the source `myEventLogSource`. Next, `myTraceListener` is added to the <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collection. Finally, the example sends a line of output to the <xref:System.Diagnostics.Trace.Listeners%2A> object.  \n  \n [!code-cs[Classic EventLogTraceListener Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_3_1.cs)]\n [!code-vb[Classic EventLogTraceListener Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_3_1.vb)]\n [!code-cpp[Classic EventLogTraceListener Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_3_1.cpp)]"
  syntax:
    content: 'public sealed class EventLogTraceListener : System.Diagnostics.TraceListener'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> classe senza un listener di traccia."
  syntax:
    content: public EventLogTraceListener ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  id: '#ctor(System.Diagnostics.EventLog)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> usando il registro eventi specificato."
  syntax:
    content: public EventLogTraceListener (System.Diagnostics.EventLog eventLog);
    parameters:
    - id: eventLog
      type: System.Diagnostics.EventLog
      description: "Il registro eventi in cui scrivere."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref> classe utilizzando l&quot;origine specificata."
  syntax:
    content: public EventLogTraceListener (string source);
    parameters:
    - id: source
      type: System.String
      description: "Il nome di un&quot;origine di log eventi esistente."
  overload: System.Diagnostics.EventLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Close
  id: Close
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Chiude il log eventi in modo che non riceva più output di tracciatura o di debug."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Diagnostics.EventLogTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Da aggiungere."
  overload: System.Diagnostics.EventLogTraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  id: EventLog
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene o imposta il registro eventi in cui scrivere."
  syntax:
    content: public System.Diagnostics.EventLog EventLog { get; set; }
    return:
      type: System.Diagnostics.EventLog
      description: "Il registro eventi in cui scrivere."
  overload: System.Diagnostics.EventLogTraceListener.EventLog*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Name
  id: Name
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Ottiene o imposta il nome dell&quot;oggetto <xref href=&quot;System.Diagnostics.EventLogTraceListener&quot;> </xref>."
  remarks: "Questa proprietà viene automaticamente il nome di origine del registro eventi."
  syntax:
    content: public override string Name { get; set; }
    return:
      type: System.String
      description: "Il nome del listener di traccia."
  overload: System.Diagnostics.EventLogTraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive le informazioni di traccia, un oggetto dati e informazioni sull&quot;evento nel registro eventi."
  remarks: "> [!IMPORTANT]> Di <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>metodi non sono destinati a essere chiamato dal codice dell&quot;applicazione.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> Vengono chiamati dai metodi di <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classi di dati di traccia di output.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Il <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>(metodo), ad esempio il <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metodo è destinato agli strumenti automatizzati ma consente inoltre di associare oggetti aggiuntivi, ad esempio un&quot;istanza di eccezione per la traccia.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       Il `eventCache` e `source` parametri vengono utilizzati per determinare se l&quot;evento deve essere tracciato. `id`è possibile creare un <xref:System.Diagnostics.EventInstance>oggetto e <xref:System.Diagnostics.TraceEventType>è equivalente a un <xref:System.Diagnostics.EventLogEntryType>per il <xref:System.Diagnostics.EventInstance.EntryType%2A>proprietà.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> Il <xref:System.Diagnostics.EventInstance>viene scritto nel registro eventi con il `data` object, formattata come una stringa, usando il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Il valore massimo di `id` parametro è di 65.535. Se il `id` valore specificato è maggiore di 65.535, viene utilizzato il valore massimo."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Oggetto che contiene l&quot;oggetto corrente ID processo, ID thread e le informazioni di traccia dello stack."
    - id: source
      type: System.String
      description: "Nome usato per identificare l&quot;output. in genere il nome dell&quot;applicazione che ha generato l&quot;evento di traccia."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Uno dei valori di enumerazione che specifica il tipo di evento che ha causato la traccia."
    - id: id
      type: System.Int32
      description: "Identificatore numerico per l&quot;evento. La combinazione di `source` e `id` identifica in modo univoco un evento."
    - id: data
      type: System.Object
      description: "Oggetto da scrivere nel flusso o nel file di output di dati."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>non è specificato.       oppure la stringa della voce di log supera i 32.766 caratteri."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive informazioni di traccia, una matrice di oggetti dati e informazioni sull&quot;evento nel registro eventi."
  remarks: "> [!IMPORTANT]> Di <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>metodi non sono destinati a essere chiamato dal codice dell&quot;applicazione.</xref:System.Diagnostics.EventLogTraceListener.TraceData%2A> Vengono chiamati dai metodi di <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>classi di dati di traccia di output.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Il <xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>(metodo), ad esempio il <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metodo è destinato agli strumenti automatizzati ma consente inoltre di associare oggetti aggiuntivi, ad esempio un&quot;istanza di eccezione per la traccia.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> </xref:System.Diagnostics.EventLogTraceListener.TraceData%2A>       Il `severity` e `id` dati del parametro viene utilizzati per creare un <xref:System.Diagnostics.EventInstance>oggetto, che viene scritto nel registro eventi con i dati dalla matrice di oggetti di data.</xref:System.Diagnostics.EventInstance>       Il `eventCache` e `source` parametri vengono utilizzati per determinare se l&quot;evento deve essere tracciato. `id`è possibile creare un <xref:System.Diagnostics.EventInstance>oggetto e <xref:System.Diagnostics.TraceEventType>è equivalente a un <xref:System.Diagnostics.EventLogEntryType>per il <xref:System.Diagnostics.EventInstance.EntryType%2A>proprietà.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> Il <xref:System.Diagnostics.EventInstance>viene scritto nel registro eventi con il `data` matrice object, formattata come una matrice di stringhe, usando il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Il valore massimo di `id` parametro è di 65.535. Se il `id` valore specificato è maggiore di 65.535, viene utilizzato il valore massimo."
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Oggetto che contiene l&quot;oggetto corrente ID processo, ID thread e le informazioni di traccia dello stack."
    - id: source
      type: System.String
      description: "Nome usato per identificare l&quot;output. in genere il nome dell&quot;applicazione che ha generato l&quot;evento di traccia."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Uno dei valori di enumerazione che specifica il tipo di evento che ha causato la traccia."
    - id: id
      type: System.Int32
      description: "Identificatore numerico per l&quot;evento. La combinazione di `source` e `id` identifica in modo univoco un evento."
    - id: data
      type: System.Object[]
      description: "Matrice di oggetti dati."
  overload: System.Diagnostics.EventLogTraceListener.TraceData*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>non è specificato.       oppure la stringa della voce di log supera i 32.766 caratteri."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive le informazioni, un messaggio e informazioni sull&quot;evento nel registro eventi di traccia."
  remarks: "> [!IMPORTANT]> Di <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metodi non sono destinati a essere chiamato dal codice dell&quot;applicazione.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Questi metodi vengono chiamati dai metodi del <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>per scrivere i dati di traccia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Il <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metodo è destinato agli eventi di traccia che possono essere elaborati automaticamente dagli strumenti.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Ad esempio uno strumento di monitoraggio può inviare una notifica amministratore se un evento specifico viene analizzato da un&quot;origine specifica.       Il `eventCache` e `source` parametri vengono utilizzati per determinare se l&quot;evento deve essere tracciato. `id`è possibile creare un <xref:System.Diagnostics.EventInstance>oggetto e <xref:System.Diagnostics.TraceEventType>è equivalente a un <xref:System.Diagnostics.EventLogEntryType>per il <xref:System.Diagnostics.EventInstance.EntryType%2A>proprietà.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> Il <xref:System.Diagnostics.EventInstance>viene scritto nel registro eventi con il `message` dati usando il <xref:System.Diagnostics.EventLog.WriteEvent%2A>metodo.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance>      > [!NOTE] > Il valore massimo di `id` parametro è di 65.535. Se il `id` valore specificato è maggiore di 65.535, viene utilizzato il valore massimo."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Oggetto che contiene l&quot;oggetto corrente ID processo, ID thread e le informazioni di traccia dello stack."
    - id: source
      type: System.String
      description: "Nome usato per identificare l&quot;output. in genere il nome dell&quot;applicazione che ha generato l&quot;evento di traccia."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Uno dei valori di enumerazione che specifica il tipo di evento che ha causato la traccia."
    - id: id
      type: System.Int32
      description: "Identificatore numerico per l&quot;evento. La combinazione di `source` e `id` identifica in modo univoco un evento."
    - id: message
      type: System.String
      description: "Il messaggio di traccia."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>non è specificato.       oppure la stringa della voce di log supera i 32.766 caratteri."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive informazioni di traccia, una matrice formattata di oggetti e informazioni sull&quot;evento nel registro eventi."
  remarks: "> [!IMPORTANT]> Di <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metodi non sono destinati a essere chiamato dal codice dell&quot;applicazione.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Questi metodi vengono chiamati dai metodi del <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, e <xref:System.Diagnostics.TraceSource>per scrivere i dati di traccia.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Il <xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A>metodo è destinato agli eventi di traccia che possono essere elaborati automaticamente dagli strumenti.</xref:System.Diagnostics.EventLogTraceListener.TraceEvent%2A> Ad esempio uno strumento di monitoraggio può inviare una notifica amministratore se un evento specifico viene analizzato da un&quot;origine specifica.       Il `eventCache` e `source` parametri vengono utilizzati per determinare se l&quot;evento deve essere tracciato. `id`è possibile creare un <xref:System.Diagnostics.EventInstance>oggetto e <xref:System.Diagnostics.TraceEventType>è equivalente a un <xref:System.Diagnostics.EventLogEntryType>per il <xref:System.Diagnostics.EventInstance.EntryType%2A>proprietà.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.EventInstance> Il <xref:System.Diagnostics.EventInstance>viene scritto nel registro eventi, utilizzando il <xref:System.Diagnostics.EventLog.WriteEvent%2A>con il messaggio ottenuto dal metodo di `format` e `args` parametri.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> Il `args` matrice di oggetti viene convertita in una stringa tramite il <xref:System.String.Format%2A>, passando il `format` stringa e `args` matrice per formattare la stringa del messaggio per il registro eventi.</xref:System.String.Format%2A>      > [!NOTE] > Il valore massimo di `id` parametro è di 65.535. Se il `id` valore specificato è maggiore di 65.535, viene utilizzato il valore massimo."
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType severity, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Oggetto che contiene l&quot;oggetto corrente ID processo, ID thread e le informazioni di traccia dello stack."
    - id: source
      type: System.String
      description: "Nome usato per identificare l&quot;output. in genere il nome dell&quot;applicazione che ha generato l&quot;evento di traccia."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Uno dei valori di enumerazione che specifica il tipo di evento che ha causato la traccia."
    - id: id
      type: System.Int32
      description: "Identificatore numerico per l&quot;evento. La combinazione di `source` e `id` identifica in modo univoco un evento."
    - id: format
      type: System.String
      description: "Stringa di formato che contiene zero o più elementi di formato che corrispondono agli oggetti di `args` matrice."
    - id: args
      type: System.Object[]
      description: "Un <xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> matrice che contiene zero o più oggetti da formattare."
  overload: System.Diagnostics.EventLogTraceListener.TraceEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code>non è specificato.       oppure la stringa della voce di log supera i 32.766 caratteri."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive un messaggio nel registro eventi per questa istanza."
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "Messaggio da scrivere."
  overload: System.Diagnostics.EventLogTraceListener.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>supera i 32.766 caratteri."
  platform:
  - net462
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Scrive un messaggio nel registro eventi per questa istanza."
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "Messaggio da scrivere."
  overload: System.Diagnostics.EventLogTraceListener.WriteLine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>message</code>supera i 32.766 caratteri."
  platform:
  - net462
references:
- uid: System.Diagnostics.TraceListener
  isExternal: false
  name: System.Diagnostics.TraceListener
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventLogTraceListener.#ctor
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener()
  nameWithType: EventLogTraceListener.EventLogTraceListener()
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener()
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(EventLog)
  nameWithType: EventLogTraceListener.EventLogTraceListener(EventLog)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(EventLog)
- uid: System.Diagnostics.EventLog
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
- uid: System.Diagnostics.EventLogTraceListener.#ctor(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener(String)
  nameWithType: EventLogTraceListener.EventLogTraceListener(String)
  fullName: System.Diagnostics.EventLogTraceListener.EventLogTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogTraceListener.Close
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close()
  nameWithType: EventLogTraceListener.Close()
  fullName: System.Diagnostics.EventLogTraceListener.Close()
- uid: System.Diagnostics.EventLogTraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogTraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.EventLogTraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogTraceListener.EventLog
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
  fullName: System.Diagnostics.EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
  fullName: System.Diagnostics.EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.EventLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.EventLogTraceListener.Write(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: EventLogTraceListener.Write(String)
  fullName: System.Diagnostics.EventLogTraceListener.Write(String)
- uid: System.Diagnostics.EventLogTraceListener.WriteLine(System.String)
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: EventLogTraceListener.WriteLine(String)
  fullName: System.Diagnostics.EventLogTraceListener.WriteLine(String)
- uid: System.Diagnostics.EventLogTraceListener.#ctor*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLogTraceListener
  nameWithType: EventLogTraceListener.EventLogTraceListener
- uid: System.Diagnostics.EventLogTraceListener.Close*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Close
  nameWithType: EventLogTraceListener.Close
- uid: System.Diagnostics.EventLogTraceListener.Dispose*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Dispose
  nameWithType: EventLogTraceListener.Dispose
- uid: System.Diagnostics.EventLogTraceListener.EventLog*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: EventLog
  nameWithType: EventLogTraceListener.EventLog
- uid: System.Diagnostics.EventLogTraceListener.Name*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Name
  nameWithType: EventLogTraceListener.Name
- uid: System.Diagnostics.EventLogTraceListener.TraceData*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceData
  nameWithType: EventLogTraceListener.TraceData
- uid: System.Diagnostics.EventLogTraceListener.TraceEvent*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: EventLogTraceListener.TraceEvent
- uid: System.Diagnostics.EventLogTraceListener.Write*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: Write
  nameWithType: EventLogTraceListener.Write
- uid: System.Diagnostics.EventLogTraceListener.WriteLine*
  parent: System.Diagnostics.EventLogTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: EventLogTraceListener.WriteLine
