### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.CanExecuteChangedEventManager
  id: CanExecuteChangedEventManager
  children:
  - System.Windows.Input.CanExecuteChangedEventManager.AddHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})
  - System.Windows.Input.CanExecuteChangedEventManager.Purge(System.Object,System.Object,System.Boolean)
  - System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})
  - System.Windows.Input.CanExecuteChangedEventManager.StartListening(System.Object)
  - System.Windows.Input.CanExecuteChangedEventManager.StopListening(System.Object)
  langs:
  - csharp
  name: CanExecuteChangedEventManager
  nameWithType: CanExecuteChangedEventManager
  fullName: System.Windows.Input.CanExecuteChangedEventManager
  type: Class
  summary: "Fornisce un <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> implementazione in modo che Ã¨ possibile utilizzare il modello &quot;listener di eventi deboli&quot; per allegare listener per il <xref:System.Windows.Input.ICommand.CanExecuteChanged>evento.</xref:System.Windows.Input.ICommand.CanExecuteChanged>"
  remarks: "Per informazioni su come utilizzare questa classe, vedere &quot;Utilizzando una esistente debole evento Manager Class&quot; nella[modelli di eventi deboli](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: 'public class CanExecuteChangedEventManager : System.Windows.WeakEventManager'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.WeakEventManager
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  - System.Windows.WeakEventManager.Item(System.Object)
  - System.Windows.WeakEventManager.NewListenerList
  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.ReadLock
  - System.Windows.WeakEventManager.Remove(System.Object)
  - System.Windows.WeakEventManager.ScheduleCleanup
  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  - System.Windows.WeakEventManager.WriteLock
  platform:
  - net462
- uid: System.Windows.Input.CanExecuteChangedEventManager.AddHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})
  id: AddHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})
  parent: System.Windows.Input.CanExecuteChangedEventManager
  langs:
  - csharp
  name: AddHandler(ICommand,EventHandler<EventArgs>)
  nameWithType: CanExecuteChangedEventManager.AddHandler(ICommand,EventHandler<EventArgs>)
  fullName: System.Windows.Input.CanExecuteChangedEventManager.AddHandler(ICommand,EventHandler<EventArgs>)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Aggiunge il delegato specificato come gestore eventi dell&quot;origine specificata."
  syntax:
    content: public static void AddHandler (System.Windows.Input.ICommand source, EventHandler<EventArgs> handler);
    parameters:
    - id: source
      type: System.Windows.Input.ICommand
      description: "L&quot;oggetto di origine che genera il <xref:System.Windows.Input.ICommand.CanExecuteChanged>evento.</xref:System.Windows.Input.ICommand.CanExecuteChanged>"
    - id: handler
      type: System.EventHandler{System.EventArgs}
      description: "Delegato che gestisce il <xref:System.Windows.Input.ICommand.CanExecuteChanged>evento.</xref:System.Windows.Input.ICommand.CanExecuteChanged>"
  overload: System.Windows.Input.CanExecuteChangedEventManager.AddHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>source</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       --or--       <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CanExecuteChangedEventManager.Purge(System.Object,System.Object,System.Boolean)
  id: Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.Input.CanExecuteChangedEventManager
  langs:
  - csharp
  name: Purge(Object,Object,Boolean)
  nameWithType: CanExecuteChangedEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.Input.CanExecuteChangedEventManager.Purge(Object,Object,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Rimuove le voci di listener inattivi dall&quot;elenco dei dati per l&quot;origine specificata."
  syntax:
    content: protected override bool Purge (object source, object data, bool purgeAll);
    parameters:
    - id: source
      type: System.Object
      description: "L&quot;origine per gli eventi attesi."
    - id: data
      type: System.Object
      description: "Dati da verificare. Questo oggetto deve essere un <xref:System.Windows.WeakEventManager.ListenerList>implementazione.</xref:System.Windows.WeakEventManager.ListenerList>"
    - id: purgeAll
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per interrompere l&quot;ascolto di `source`e rimuovere completamente tutte le voci da `data`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se alcune voci sono stati effettivamente rimossi. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.CanExecuteChangedEventManager.Purge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})
  id: RemoveHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})
  parent: System.Windows.Input.CanExecuteChangedEventManager
  langs:
  - csharp
  name: RemoveHandler(ICommand,EventHandler<EventArgs>)
  nameWithType: CanExecuteChangedEventManager.RemoveHandler(ICommand,EventHandler<EventArgs>)
  fullName: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler(ICommand,EventHandler<EventArgs>)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Rimuove il gestore dell&quot;evento specificato dall&quot;origine specificata."
  syntax:
    content: public static void RemoveHandler (System.Windows.Input.ICommand source, EventHandler<EventArgs> handler);
    parameters:
    - id: source
      type: System.Windows.Input.ICommand
      description: "L&quot;oggetto di origine che genera il <xref:System.Windows.Input.ICommand.CanExecuteChanged>evento.</xref:System.Windows.Input.ICommand.CanExecuteChanged>"
    - id: handler
      type: System.EventHandler{System.EventArgs}
      description: "Delegato che gestisce il <xref:System.Windows.Input.ICommand.CanExecuteChanged>evento.</xref:System.Windows.Input.ICommand.CanExecuteChanged>"
  overload: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>source</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       --or--       <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CanExecuteChangedEventManager.StartListening(System.Object)
  id: StartListening(System.Object)
  parent: System.Windows.Input.CanExecuteChangedEventManager
  langs:
  - csharp
  name: StartListening(Object)
  nameWithType: CanExecuteChangedEventManager.StartListening(Object)
  fullName: System.Windows.Input.CanExecuteChangedEventManager.StartListening(Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Avvia l&quot;ascolto di <xref:System.Windows.Input.ICommand.CanExecuteChanged>eventi sull&quot;origine specificata.</xref:System.Windows.Input.ICommand.CanExecuteChanged>"
  syntax:
    content: protected override void StartListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "L&quot;oggetto con l&quot;evento."
  overload: System.Windows.Input.CanExecuteChangedEventManager.StartListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CanExecuteChangedEventManager.StopListening(System.Object)
  id: StopListening(System.Object)
  parent: System.Windows.Input.CanExecuteChangedEventManager
  langs:
  - csharp
  name: StopListening(Object)
  nameWithType: CanExecuteChangedEventManager.StopListening(Object)
  fullName: System.Windows.Input.CanExecuteChangedEventManager.StopListening(Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Interrompe l&quot;ascolto di <xref:System.Windows.Input.ICommand.CanExecuteChanged>eventi sull&quot;origine specificata.</xref:System.Windows.Input.ICommand.CanExecuteChanged>"
  syntax:
    content: protected override void StopListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "Oggetto di origine per interrompere l&quot;attesa per."
  overload: System.Windows.Input.CanExecuteChangedEventManager.StopListening*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.WeakEventManager
  isExternal: false
  name: System.Windows.WeakEventManager
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.CanExecuteChangedEventManager.AddHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})
  parent: System.Windows.Input.CanExecuteChangedEventManager
  isExternal: false
  name: AddHandler(ICommand,EventHandler<EventArgs>)
  nameWithType: CanExecuteChangedEventManager.AddHandler(ICommand,EventHandler<EventArgs>)
  fullName: System.Windows.Input.CanExecuteChangedEventManager.AddHandler(ICommand,EventHandler<EventArgs>)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.EventHandler{System.EventArgs}
  parent: System
  isExternal: true
  name: EventHandler<EventArgs>
  nameWithType: EventHandler<EventArgs>
  fullName: System.EventHandler<System.EventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.EventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: EventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Input.CanExecuteChangedEventManager.Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.Input.CanExecuteChangedEventManager
  isExternal: false
  name: Purge(Object,Object,Boolean)
  nameWithType: CanExecuteChangedEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.Input.CanExecuteChangedEventManager.Purge(Object,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})
  parent: System.Windows.Input.CanExecuteChangedEventManager
  isExternal: false
  name: RemoveHandler(ICommand,EventHandler<EventArgs>)
  nameWithType: CanExecuteChangedEventManager.RemoveHandler(ICommand,EventHandler<EventArgs>)
  fullName: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler(ICommand,EventHandler<EventArgs>)
- uid: System.Windows.Input.CanExecuteChangedEventManager.StartListening(System.Object)
  parent: System.Windows.Input.CanExecuteChangedEventManager
  isExternal: false
  name: StartListening(Object)
  nameWithType: CanExecuteChangedEventManager.StartListening(Object)
  fullName: System.Windows.Input.CanExecuteChangedEventManager.StartListening(Object)
- uid: System.Windows.Input.CanExecuteChangedEventManager.StopListening(System.Object)
  parent: System.Windows.Input.CanExecuteChangedEventManager
  isExternal: false
  name: StopListening(Object)
  nameWithType: CanExecuteChangedEventManager.StopListening(Object)
  fullName: System.Windows.Input.CanExecuteChangedEventManager.StopListening(Object)
- uid: System.Windows.Input.CanExecuteChangedEventManager.AddHandler*
  parent: System.Windows.Input.CanExecuteChangedEventManager
  isExternal: false
  name: AddHandler
  nameWithType: CanExecuteChangedEventManager.AddHandler
- uid: System.Windows.Input.CanExecuteChangedEventManager.Purge*
  parent: System.Windows.Input.CanExecuteChangedEventManager
  isExternal: false
  name: Purge
  nameWithType: CanExecuteChangedEventManager.Purge
- uid: System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler*
  parent: System.Windows.Input.CanExecuteChangedEventManager
  isExternal: false
  name: RemoveHandler
  nameWithType: CanExecuteChangedEventManager.RemoveHandler
- uid: System.Windows.Input.CanExecuteChangedEventManager.StartListening*
  parent: System.Windows.Input.CanExecuteChangedEventManager
  isExternal: false
  name: StartListening
  nameWithType: CanExecuteChangedEventManager.StartListening
- uid: System.Windows.Input.CanExecuteChangedEventManager.StopListening*
  parent: System.Windows.Input.CanExecuteChangedEventManager
  isExternal: false
  name: StopListening
  nameWithType: CanExecuteChangedEventManager.StopListening
