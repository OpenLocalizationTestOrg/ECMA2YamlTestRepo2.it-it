### YamlMime:ManagedReference
items:
- uid: System.Drawing.Brush
  id: Brush
  children:
  - System.Drawing.Brush.#ctor
  - System.Drawing.Brush.Clone
  - System.Drawing.Brush.Dispose
  - System.Drawing.Brush.Dispose(System.Boolean)
  - System.Drawing.Brush.Finalize
  - System.Drawing.Brush.SetNativeBrush(System.IntPtr)
  langs:
  - csharp
  name: Brush
  nameWithType: Brush
  fullName: System.Drawing.Brush
  type: Class
  summary: "Definisce gli oggetti usati per riempire le parti interne di forme grafiche quali rettangoli, ellissi, torte, poligoni e percorsi."
  remarks: "Si tratta di una classe base astratta e non può essere creata un&quot;istanza. Per creare un oggetto brush, utilizzare le classi derivate da pennello, ad esempio <xref:System.Drawing.SolidBrush>, <xref:System.Drawing.TextureBrush>e <xref:System.Drawing.Drawing2D.LinearGradientBrush>.</xref:System.Drawing.Drawing2D.LinearGradientBrush> </xref:System.Drawing.TextureBrush> </xref:System.Drawing.SolidBrush>"
  syntax:
    content: 'public abstract class Brush : MarshalByRefObject, ICloneable, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.ICloneable
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Drawing.Brush.#ctor
  id: '#ctor'
  parent: System.Drawing.Brush
  langs:
  - csharp
  name: Brush()
  nameWithType: Brush.Brush()
  fullName: System.Drawing.Brush.Brush()
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Drawing.Brush&quot;> </xref> classe."
  syntax:
    content: protected Brush ();
    parameters: []
  overload: System.Drawing.Brush.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Brush.Clone
  id: Clone
  parent: System.Drawing.Brush
  langs:
  - csharp
  name: Clone()
  nameWithType: Brush.Clone()
  fullName: System.Drawing.Brush.Clone()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Quando sottoposto a override in una classe derivata, crea una copia esatta di questo <xref href=&quot;System.Drawing.Brush&quot;> </xref>."
  syntax:
    content: public abstract object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Il nuovo <xref href=&quot;System.Drawing.Brush&quot;> </xref> creato da questo metodo."
  overload: System.Drawing.Brush.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Brush.Dispose
  id: Dispose
  parent: System.Drawing.Brush
  langs:
  - csharp
  name: Dispose()
  nameWithType: Brush.Dispose()
  fullName: System.Drawing.Brush.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Rilascia tutte le risorse usate da questo <xref href=&quot;System.Drawing.Brush&quot;> </xref> oggetto."
  remarks: "La chiamata a Dispose consente le risorse usate da questo <xref:System.Drawing.Brush>oggetto riallocazione per altri scopi.</xref:System.Drawing.Brush>       Chiamare Dispose dopo aver terminato di utilizzare <xref:System.Drawing.Brush>.</xref:System.Drawing.Brush> Il metodo Dispose lascia il <xref:System.Drawing.Brush>in uno stato inutilizzabile.</xref:System.Drawing.Brush> Dopo aver chiamato Dispose, è necessario rilasciare tutti i riferimenti al <xref:System.Drawing.Brush>in modo che il garbage collector può recuperare la memoria che di <xref:System.Drawing.Brush>occupata.</xref:System.Drawing.Brush> </xref:System.Drawing.Brush> Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md) e [implementazione di un metodo Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Chiamare sempre Dispose prima di rilasciare l&quot;ultimo riferimento a <xref:System.Drawing.Brush>.</xref:System.Drawing.Brush> In caso contrario, le risorse non vengono liberate finché il garbage collector chiama la <xref:System.Drawing.Brush>dell&quot;oggetto `Finalize` metodo.</xref:System.Drawing.Brush>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Brush.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Brush.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Drawing.Brush
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Brush.Dispose(Boolean)
  fullName: System.Drawing.Brush.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Rilascia le risorse non gestite usate da di <xref href=&quot;System.Drawing.Brush&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico `Dispose()`(metodo) e <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A>richiama `Dispose` con `disposing` impostato su `false`.</xref:System.Object.Finalize%2A>       Quando il `disposing` parametro è true, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Drawing.Brush>riferimenti.</xref:System.Drawing.Brush> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Drawing.Brush.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Brush.Finalize
  id: Finalize
  parent: System.Drawing.Brush
  langs:
  - csharp
  name: Finalize()
  nameWithType: Brush.Finalize()
  fullName: System.Drawing.Brush.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "Consente a un oggetto tentare di liberare risorse ed eseguire altre operazioni di pulizia prima che venga recuperato da garbage collection."
  syntax:
    content: ~Brush ();
    parameters: []
  overload: System.Drawing.Brush.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Brush.SetNativeBrush(System.IntPtr)
  id: SetNativeBrush(System.IntPtr)
  parent: System.Drawing.Brush
  langs:
  - csharp
  name: SetNativeBrush(IntPtr)
  nameWithType: Brush.SetNativeBrush(IntPtr)
  fullName: System.Drawing.Brush.SetNativeBrush(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "In una classe derivata, imposta un riferimento a un [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] oggetto brush."
  syntax:
    content: protected void SetNativeBrush (IntPtr brush);
    parameters:
    - id: brush
      type: System.IntPtr
      description: "Un puntatore al [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)] oggetto brush."
  overload: System.Drawing.Brush.SetNativeBrush*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Drawing.Brush.#ctor
  parent: System.Drawing.Brush
  isExternal: false
  name: Brush()
  nameWithType: Brush.Brush()
  fullName: System.Drawing.Brush.Brush()
- uid: System.Drawing.Brush.Clone
  parent: System.Drawing.Brush
  isExternal: false
  name: Clone()
  nameWithType: Brush.Clone()
  fullName: System.Drawing.Brush.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Drawing.Brush.Dispose
  parent: System.Drawing.Brush
  isExternal: false
  name: Dispose()
  nameWithType: Brush.Dispose()
  fullName: System.Drawing.Brush.Dispose()
- uid: System.Drawing.Brush.Dispose(System.Boolean)
  parent: System.Drawing.Brush
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Brush.Dispose(Boolean)
  fullName: System.Drawing.Brush.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Brush.Finalize
  parent: System.Drawing.Brush
  isExternal: false
  name: Finalize()
  nameWithType: Brush.Finalize()
  fullName: System.Drawing.Brush.Finalize()
- uid: System.Drawing.Brush.SetNativeBrush(System.IntPtr)
  parent: System.Drawing.Brush
  isExternal: false
  name: SetNativeBrush(IntPtr)
  nameWithType: Brush.SetNativeBrush(IntPtr)
  fullName: System.Drawing.Brush.SetNativeBrush(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Drawing.Brush.#ctor*
  parent: System.Drawing.Brush
  isExternal: false
  name: Brush
  nameWithType: Brush.Brush
- uid: System.Drawing.Brush.Clone*
  parent: System.Drawing.Brush
  isExternal: false
  name: Clone
  nameWithType: Brush.Clone
- uid: System.Drawing.Brush.Dispose*
  parent: System.Drawing.Brush
  isExternal: false
  name: Dispose
  nameWithType: Brush.Dispose
- uid: System.Drawing.Brush.Finalize*
  parent: System.Drawing.Brush
  isExternal: false
  name: Finalize
  nameWithType: Brush.Finalize
- uid: System.Drawing.Brush.SetNativeBrush*
  parent: System.Drawing.Brush
  isExternal: false
  name: SetNativeBrush
  nameWithType: Brush.SetNativeBrush
