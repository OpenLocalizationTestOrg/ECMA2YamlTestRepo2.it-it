### YamlMime:ManagedReference
items:
- uid: System.Windows.Documents.TextPointer
  id: TextPointer
  children:
  - System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  - System.Windows.Documents.TextPointer.DocumentEnd
  - System.Windows.Documents.TextPointer.DocumentStart
  - System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  - System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  - System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.HasValidLayout
  - System.Windows.Documents.TextPointer.InsertLineBreak
  - System.Windows.Documents.TextPointer.InsertParagraphBreak
  - System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  - System.Windows.Documents.TextPointer.IsAtInsertionPosition
  - System.Windows.Documents.TextPointer.IsAtLineStartPosition
  - System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.LogicalDirection
  - System.Windows.Documents.TextPointer.Paragraph
  - System.Windows.Documents.TextPointer.Parent
  - System.Windows.Documents.TextPointer.ToString
  langs:
  - csharp
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
  type: Class
  summary: "Rappresenta una posizione all&quot;interno di un <xref href=&quot;System.Windows.Documents.FlowDocument&quot;> </xref> o <xref href=&quot;System.Windows.Controls.TextBlock&quot;> </xref>."
  remarks: "La classe TextPointer introduce la seguente terminologia: - posizione - per definizione, un TextPointer fa sempre riferimento a un *posizione* nel contenuto.  Le posizioni si trovano tra i caratteri nel contenuto o dal flusso di contenuto elemento tag che definiscono la struttura del contenuto.      -Posizione corrente – poiché un TextPointer indica sempre una posizione e, poiché molte delle operazioni che possono essere eseguite tramite un TextPointer riguardano la posizione a cui punta attualmente il TextPointer, è consigliabile fare riferimento alla posizione indicata da una TextPointer come il *posizione corrente*.      -Posizione inserimento - un *posizione di inserimento* è una posizione in cui è possibile aggiungere il nuovo contenuto senza interrompere tutte le regole semantiche per il contenuto associato.  In pratica, la posizione di inserimento è un punto qualsiasi nel contenuto in cui non può essere posizionato un punto di inserimento.  Un esempio di una posizione TextPointer valida che non è una posizione di inserimento è la posizione tra due adiacenti <xref:System.Windows.Documents.Paragraph>tag (vale a dire tra il tag di chiusura del paragrafo precedente e il tag di apertura del paragrafo successivo).</xref:System.Windows.Documents.Paragraph>      -Simbolo - ai fini di operazioni di TextPointer che includono simboli, una delle seguenti è considerato un *simbolo*:: un&quot;apertura o tag di chiusura per un <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>          -Un <xref:System.Windows.UIElement>elemento di contenuto all&quot;interno di una <xref:System.Windows.Documents.InlineUIContainer>o <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Si noti che tali un <xref:System.Windows.UIElement>vengono conteggiate come un solo simbolo; qualsiasi contenuto aggiuntivo o gli elementi contenuti dal <xref:System.Windows.UIElement>non vengono conteggiati come simboli.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>          -Ogni 16 bit [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] carattere all&quot;interno di un testo <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>      -Contenitore di testo - A *contenitore di testo* è l&quot;elemento che forma il bordo finale per il contenuto di flusso vicino; nella posizione indicata da un TextPointer si trova sempre all&quot;interno di un contenitore di testo.  Attualmente, un contenitore di testo deve essere un <xref:System.Windows.Documents.FlowDocument>o un <xref:System.Windows.Controls.TextBlock>.</xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.FlowDocument>  In generale, le operazioni tra istanze TextPointer in contenitori di testo diversi non sono supportate.      Contenitore - documento - il contenuto in un testo viene definita una *documento*, come nel <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>(metodo) e <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>e <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>proprietà.</xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>       La classe TextPointer è destinata a facilitare l&quot;attraversamento e la modifica del contenuto che è rappresentato da [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] elementi di contenuto del flusso; in genere, tali elementi derivano da <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  Alcune delle operazioni che facilita la TextPointer includono i seguenti:-eseguire un confronto ordinale della posizione corrente con una seconda posizione specificata.  Vedere il <xref:System.Windows.Documents.TextPointer.CompareTo%2A>metodo.</xref:System.Windows.Documents.TextPointer.CompareTo%2A>      -Determinare il tipo di contenuto adiacente alla posizione corrente in una direzione specificata.  Vedere il <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>(metodo) e <xref:System.Windows.Documents.TextPointerContext>enumerazione.</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>      -Consente di ottenere il <xref:System.Windows.Documents.TextElement>che definisce l&quot;ambito o non è adiacente alla posizione corrente.</xref:System.Windows.Documents.TextElement>  Vedere <xref:System.Windows.Documents.Paragraph>e <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A>metodo.</xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> </xref:System.Windows.Documents.Paragraph>      -Ottenere il contenitore di testo che definisce l&quot;ambito del documento corrente.  Vedere il <xref:System.Windows.Documents.TextPointer.Parent%2A>proprietà.</xref:System.Windows.Documents.TextPointer.Parent%2A>      -Ottenere un numero specificato di caratteri che precedono o seguono la posizione corrente.  Vedere il <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>metodo.</xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>      -Inserire una stringa di caratteri in corrispondenza della posizione corrente.  Vedere il <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>metodo.</xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>      -Individuare i limiti di riga nel contenuto.  Vedere il <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>(metodo) e <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>proprietà.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>      -La conversione tra posizioni TextPointer e gli offset dei simboli nel contenuto.  Vedere il <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>metodi.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>      -Esegue l&quot;hit testing visivo effettuando la conversione tra una posizione TextPointer e un <xref:System.Windows.Point>che rappresenta le coordinate relative.</xref:System.Windows.Point>      -Individuare una posizione di inserimento nelle vicinanze, oppure controllare se la posizione corrente è una posizione di inserimento.  Vedere il <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>metodi e <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A>proprietà.</xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>       La posizione e <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>indicate da un oggetto TextPointer non sono modificabili.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>  Quando il contenuto viene modificato, la posizione indicata da una TextPointer non modifica rispetto al testo circostante; piuttosto, l&quot;offset di tale posizione a partire dall&quot;inizio del contenuto viene regolato in proporzione per riflettere la nuova posizione relativa nel contenuto.  Ad esempio, un TextPointer che indica una posizione all&quot;inizio di un paragrafo specificato continua in modo da puntare all&quot;inizio di questo paragrafo, anche quando il contenuto viene inserito o eliminato prima o dopo il paragrafo.       La classe TextPointer non fornisce alcun costruttore pubblico.  Viene creata un&quot;istanza di TextPointer utilizzando le proprietà o metodi di altri oggetti (inclusi altri oggetti TextPointer). Nell&quot;elenco seguente fornisce alcuni esempi di metodi e proprietà che crea e restituisce un TextPointer.  Questo elenco non è completo: - da un <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A> <xref:System.Windows.Documents.TextRange.End%2A>.</xref:System.Windows.Documents.TextRange.End%2A> e</xref:System.Windows.Documents.TextRange.Start%2A> </xref:System.Windows.Documents.TextRange>      -   From a <xref:System.Windows.Documents.TextElement>:  <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>, <xref:System.Windows.Documents.TextElement.ElementStart%2A>, and <xref:System.Windows.Documents.TextElement.ElementEnd%2A>.</xref:System.Windows.Documents.TextElement.ElementEnd%2A></xref:System.Windows.Documents.TextElement.ElementStart%2A></xref:System.Windows.Documents.TextElement.ContentEnd%2A></xref:System.Windows.Documents.TextElement.ContentStart%2A></xref:System.Windows.Documents.TextElement>      -Da un <xref:System.Windows.Controls.TextBlock>(contenitore di testo): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>, <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>e <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>.</xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A> </xref:System.Windows.Controls.TextBlock.ContentEnd%2A> </xref:System.Windows.Controls.TextBlock.ContentStart%2A> </xref:System.Windows.Controls.TextBlock>      -Da un <xref:System.Windows.Documents.FlowDocument>(contenitore di testo): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, e <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>- da un TextPointer esistente: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>, <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>, <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.FlowDocument.ContentEnd%2A> </xref:System.Windows.Documents.FlowDocument.ContentStart%2A> </xref:System.Windows.Documents.FlowDocument>"
  example:
  - "The following example demonstrates how to use a TextPointer to find a position just inside of the first <xref:System.Windows.Documents.Run> element in a specified text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer1)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer1)]  \n  \n The following example implements a simplistic find algorithm using TextPointer facilities.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer2)]"
  syntax:
    content: 'public class TextPointer : System.Windows.Documents.ContentPosition'
  inheritance:
  - System.Object
  - System.Windows.Documents.ContentPosition
  implements: []
  inheritedMembers:
  - System.Windows.Documents.ContentPosition.Missing
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  id: CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Esegue un confronto ordinale tra le posizioni specificate dall&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e un secondo oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Il valore -1 indica che la posizione specificata dall&quot;oggetto corrente <xref:System.Windows.Documents.TextPointer>precede la posizione specificata da `position`.</xref:System.Windows.Documents.TextPointer>  Il valore 0 indica che le posizioni indicate sono uguali.  Un valore positivo +&1; indica che la posizione specificata dall&quot;oggetto corrente <xref:System.Windows.Documents.TextPointer>segue la posizione specificata da `position`.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  In the example, the CompareTo method is used in conjunction with the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> method to test whether a specified <xref:System.Windows.Documents.TextElement> is empty.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public int CompareTo (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> che specifica una posizione da confrontare con la posizione corrente."
    return:
      type: System.Int32
      description: "-1 se l&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> precede <code> position </code>; 0 se i percorsi sono identici; + 1 se l&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> segue <code> position </code>."
  overload: System.Windows.Documents.TextPointer.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Specifica una posizione di fuori del contenitore di testo associato alla posizione corrente."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  id: DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Elimina il numero specificato di caratteri dalla posizione indicata dall&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Specificare un valore positivo per eliminare i caratteri che seguono la posizione corrente (come in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>); specificare un valore negativo per eliminare i caratteri che precedono la posizione corrente (come in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Il numero di caratteri effettivamente eliminati può essere inferiore al numero specificato da `count`.  Ciò si verifica nei casi in cui `count` specifica più caratteri di quelli esistenti da eliminare."
  syntax:
    content: public int DeleteTextInRun (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "Il numero di caratteri da eliminare, a partire dalla posizione corrente. Specificare un valore positivo per eliminare i caratteri che seguono la posizione corrente; specificare un valore negativo per eliminare i caratteri che precedono la posizione corrente."
    return:
      type: System.Int32
      description: "Il numero di caratteri effettivamente eliminati."
  overload: System.Windows.Documents.TextPointer.DeleteTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Il metodo viene chiamato in una posizione in testo non è consentito."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  id: DocumentEnd
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Ottiene un <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> alla fine del contenuto nel contenitore di testo associato alla posizione corrente."
  remarks: "Il <xref:System.Windows.Documents.TextPointer.Parent%2A>per l&quot;oggetto restituito <xref:System.Windows.Documents.TextPointer>è sempre un contenitore di testo (<xref:System.Windows.Controls.TextBlock> o <xref:System.Windows.Documents.FlowDocument>), anziché un <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentEnd { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> alla fine del contenuto nel contenitore di testo associato alla posizione corrente."
  overload: System.Windows.Documents.TextPointer.DocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentStart
  id: DocumentStart
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Ottiene un <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> all&quot;inizio del contenuto nel contenitore di testo associato alla posizione corrente."
  remarks: "Utilizzare la posizione restituita da questa proprietà in una posizione di base da cui lavorare con gli offset relativi in altre posizioni.  Il <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>e <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>metodi forniscono un modo per convertire tra posizioni e posizione dell&quot;offset.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>       Il <xref:System.Windows.Documents.TextPointer.Parent%2A>per l&quot;oggetto restituito <xref:System.Windows.Documents.TextPointer>è sempre un contenitore di testo (<xref:System.Windows.Controls.TextBlock> o <xref:System.Windows.Documents.FlowDocument>), anziché un <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentStart { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> all&quot;inizio del contenuto nel contenitore di testo associato alla posizione corrente."
  overload: System.Windows.Documents.TextPointer.DocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  id: GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce l&quot;elemento, se presente, che delimita l&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella direzione logica specificata."
  remarks: "L&quot;elemento restituito è in genere un <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  Oggetto <xref:System.Windows.UIElement>può essere restituito quando il <xref:System.Windows.Documents.TextPointer>indica una posizione all&quot;interno di un <xref:System.Windows.Documents.BlockUIContainer>elemento o un <xref:System.Windows.Documents.InlineUIContainer>elemento.</xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.UIElement>"
  syntax:
    content: public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uno del <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valori che specifica la direzione logica in cui cercare un elemento adiacente."
    return:
      type: System.Windows.DependencyObject
      description: "L&quot;elemento adiacente specificato <code> direction </code>, o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se non esiste alcun elemento adiacente."
  overload: System.Windows.Documents.TextPointer.GetAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  id: GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce un rettangolo di selezione (<xref href=&quot;System.Windows.Rect&quot;></xref>) per il contenuto che delimita l&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella direzione logica specificata."
  remarks: "<xref:System.Windows.Documents.TextElement>bordi non sono considerati contenuto ai fini di questo metodo.</xref:System.Windows.Documents.TextElement>  Se il <xref:System.Windows.Documents.TextPointer>precede un <xref:System.Windows.Documents.TextElement>bordo, il valore restituito è un rettangolo di selezione per il successivo non<xref:System.Windows.Documents.TextElement> contenuto nella direzione specificata.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextPointer>  Se non è disponibile contenuto nella direzione specificata, a larghezza zero <xref:System.Windows.Rect>viene restituito con un&quot;altezza corrispondente all&quot;altezza del precedente del contenuto.</xref:System.Windows.Rect>       L&quot;operazione eseguita da questo metodo dipende da un layout valido.  Se necessario, questo metodo tenta di rigenerare automaticamente un layout valido prima di procedere con l&quot;operazione.  La rigenerazione di un layout può essere un&quot;operazione relativamente costosa.  Utilizzare il <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>proprietà per cercare un layout valido prima di eseguire operazioni che possono rigenerare il layout.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Per ulteriori informazioni, vedere [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uno del <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valori che specifica la direzione logica in cui cercare un rettangolo di selezione del contenuto."
    return:
      type: System.Windows.Rect
      description: "Un rettangolo di selezione per il contenuto che delimita l&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella direzione specificata, o &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; se correnti, le informazioni sul layout valido non è disponibile."
  overload: System.Windows.Documents.TextPointer.GetCharacterRect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce un <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella posizione di inserimento più vicina nella direzione logica specificata."
  remarks: "Posizione di inserimento è una posizione in cui è possibile aggiungere il nuovo contenuto senza interrompere tutte le regole semantiche per il contenuto associato.  In pratica, la posizione di inserimento è un punto qualsiasi nel contenuto in cui non può essere posizionato un punto di inserimento.  Un esempio di un oggetto valido <xref:System.Windows.Documents.TextPointer>posizione che non è una posizione di inserimento è la posizione tra due adiacenti <xref:System.Windows.Documents.Paragraph>tag (vale a dire tra il tag di chiusura del paragrafo precedente e il tag di apertura del paragrafo successivo).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>       Se il <xref:System.Windows.Documents.TextPointer>fa già riferimento a una posizione di inserimento valida, ma il tag di chiusura per una sequenza di formattazione non vuota segue direttamente tale posizione nella direzione specificata, il <xref:System.Windows.Documents.TextPointer>restituito da questo metodo viene regolato in modo da puntare alla posizione di inserimento subito dopo la chiusura della sequenza di formattazione.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>    Si consideri ad esempio la sequenza di markup `<Bold>``a``</Bold>``b`.  Si noti che esistono due posizioni di inserimento tra le lettere `a` e `b`: uno che precede la chiusura `Bold` tag e una direttamente dopo la chiusura `Bold` tag.  Se GetInsertionPosition viene chiamato su un <xref:System.Windows.Documents.TextPointer>alla posizione immediatamente dopo la lettera `a` e prima della chiusura `Bold` tag e con un `direction` di <xref:System.Windows.Documents.LogicalDirection>, restituito <xref:System.Windows.Documents.TextPointer>viene regolato in modo da puntare alla posizione precedente la lettera `b`, dopo la chiusura `Bold` tag.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> </xref:System.Windows.Documents.TextPointer>  Per l&quot;apertura di tag di formattazione quando si lavora nella direzione opposta logica viene eseguita una regolazione di simile.  Questo metodo è destinato a fornire un sistema di risoluzione dell&quot;ambiguità tra posizioni di inserimento in casi simili.       Questo metodo può essere utilizzato anche per selezionare i punti di inserimento quando è coinvolto nella sequenza di tag strutturali. Ad esempio, quando si trova in una posizione tra i tag di apertura e di chiusura, il parametro direzione può essere utilizzato per selezionare il punto di inserimento più vicino all&quot;inizio del paragrafo seguente (specificando <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) o alla fine del paragrafo precedente (specificando <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Se il puntatore si trova già nella posizione di inserimento e non sono adiacenti tag di formattazione nell&quot;oggetto specificato `direction`, restituito <xref:System.Windows.Documents.TextPointer>fa riferimento alla stessa posizione dell&quot;oggetto chiamante <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>       È presente alcuna posizione di inserimento valido rispetto alla posizione a cui fa riferimento un <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer>  Questa situazione può verificarsi se il contenuto di riferimento è strutturalmente incompleto, come in una tabella vuota o un elenco.  In questi casi, questo metodo restituisce semplicemente un <xref:System.Windows.Documents.TextPointer>nella stessa posizione come il <xref:System.Windows.Documents.TextPointer>da cui è stato chiamato questo metodo.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>  Questo metodo restituisce sempre un <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> valido"
  example:
  - "This example shows how to use the GetInsertionPosition method to check whether a specified <xref:System.Windows.Documents.TextElement> is empty of printable content.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uno del <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valori che specifica la direzione logica in cui cercare la posizione di inserimento più vicina."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella posizione di inserimento più vicina nella direzione specificata."
  overload: System.Windows.Documents.TextPointer.GetInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  id: GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce un <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> all&quot;inizio di una riga che viene specificata in relazione corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Se il <xref:System.Windows.Documents.TextPointer>punta a una posizione ambigua, ad esempio, tra due righe, la riga nella direzione specificata da <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>sia selezionato come riga iniziale relativa.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       L&quot;operazione eseguita da questo metodo dipende da un layout valido.  Se necessario, questo metodo tenta di rigenerare automaticamente un layout valido prima di procedere con l&quot;operazione.  La rigenerazione di un layout può essere un&quot;operazione relativamente costosa.  Utilizzare <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>per cercare un layout valido prima di eseguire operazioni che possono rigenerare il layout.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Per ulteriori informazioni, vedere [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "Il numero di marcatori di inizio della riga da ignorare quando si determina la riga per il quale restituire la posizione iniziale. I valori negativi specificano le righe precedenti, 0 specifica la riga corrente e i valori positivi specificano le righe successive."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> che punta all&quot;inizio della riga specificata (con il <xref:System.Windows.Documents.TextPointer.LogicalDirection*>impostato su <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se la riga specificata è compresa nell&quot;intervallo o in caso contrario non è stata trova.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  id: GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce un <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> all&quot;inizio di una riga che viene specificata in relazione corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>e segnala il numero di righe sono stato ignorato."
  remarks: "Se il <xref:System.Windows.Documents.TextPointer>punta a una posizione ambigua, ad esempio, tra due righe, la riga nella direzione specificata per il <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>proprietà è selezionata come riga iniziale relativa.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);
    parameters:
    - id: count
      type: System.Int32
      description: "Il numero di marcatori di inizio della riga da ignorare quando si determina la riga per il quale restituire la posizione iniziale. I valori negativi specificano le righe precedenti, 0 specifica la riga corrente e i valori positivi specificano le righe successive."
    - id: actualCount
      type: System.Int32
      description: "Quando termina, questo metodo contiene il numero effettivo di marcatori di inizio-of-line che sono stati ignorati quando si determina la riga per il quale restituire la posizione iniziale.  Questo valore può essere minore di `count` se viene rilevato l&quot;inizio o alla fine del contenuto prima che venga ignorato il numero di righe specificato. Questo parametro viene passato non inizializzato."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> che punta all&quot;inizio della riga specificata (con il <xref:System.Windows.Documents.TextPointer.LogicalDirection*>impostato su <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), o all&quot;inizio della riga più vicina alla riga specificata se la riga specificata è compreso nell&quot;intervallo.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce un puntatore per il simbolo successivo nella direzione logica specificata."
  remarks: "Uno dei seguenti viene considerato un simbolo:: un&quot;apertura o tag di chiusura per un <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Un <xref:System.Windows.UIElement>elemento contenuto in una <xref:System.Windows.Documents.InlineUIContainer>o <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Si noti che tali un <xref:System.Windows.UIElement>vengono conteggiate come un solo simbolo; qualsiasi contenuto aggiuntivo o gli elementi contenuti dal <xref:System.Windows.UIElement>non vengono conteggiati come simboli.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bit [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] carattere all&quot;interno di un testo <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>       Se il simbolo successivo è stato categorizzato come <xref:System.Windows.Documents.TextPointerContext>, <xref:System.Windows.Documents.TextPointerContext>, o <xref:System.Windows.Documents.TextPointerContext>(identificato con il <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>(metodo)), il <xref:System.Windows.Documents.TextPointer>restituito da questo metodo viene avanzato esattamente di un simbolo dalla posizione corrente.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext>       Se il simbolo successivo è stato categorizzato come <xref:System.Windows.Documents.TextPointerContext>, il <xref:System.Windows.Documents.TextPointer>restituito da questo metodo è avanzato oltre il testo per il simbolo non di testo successivo (vale a dire la posizione successiva nel <xref:System.Windows.Documents.TextPointerContext>non <xref:System.Windows.Documents.TextPointerContext>).</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Il conteggio esatto dei simboli attraversati può essere calcolato in anticipo chiamando il <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>metodo.</xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the GetNextContextPosition method in conjunction with the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method to traverse and extract the symbols in a specified <xref:System.Windows.Documents.TextElement>.  \n  \n While the example can be used to extract a [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)] structure for the contents of a given <xref:System.Windows.Documents.TextElement>, it is intended for illustrative purposes only, and should not be used in production code.  See the <xref:System.Xml> namespace for a rich set of types designed for working with and processing XML.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextcontextposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextcontextposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uno del <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valori che specifica la direzione logica in cui cercare il simbolo successivo."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> il simbolo successivo nella direzione richiesta, o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> delimita l&quot;inizio o fine del contenuto."
  overload: System.Windows.Documents.TextPointer.GetNextContextPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce un <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella posizione di inserimento successiva nella direzione logica specificata."
  remarks: "Un *posizione di inserimento* è una posizione in cui è possibile aggiungere il nuovo contenuto senza interrompere tutte le regole semantiche per il contenuto associato.  In pratica, la posizione di inserimento è un punto qualsiasi nel contenuto in cui non può essere posizionato un punto di inserimento.  Un esempio di un oggetto valido <xref:System.Windows.Documents.TextPointer>posizione che non è una posizione di inserimento è la posizione tra due adiacenti <xref:System.Windows.Documents.Paragraph>tag (vale a dire tra il tag di chiusura del paragrafo precedente e il tag di apertura del paragrafo successivo).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetNextInsertionPosition method to traverse content element boundaries in order to count the number of <xref:System.Windows.Documents.Paragraph> elements present between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uno del <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valori che specifica la direzione logica in cui cercare la posizione di inserimento."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> che identifica la posizione di inserimento successiva nella direzione richiesta, o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se non è disponibile alcuna posizione di inserimento."
  overload: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  id: GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce il conteggio dei simboli tra corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e un secondo oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Uno dei seguenti viene considerato un simbolo:: un&quot;apertura o tag di chiusura per un <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Un <xref:System.Windows.UIElement>elemento contenuto in una <xref:System.Windows.Documents.InlineUIContainer>o <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Si noti che tali un <xref:System.Windows.UIElement>vengono conteggiate come un solo simbolo; qualsiasi contenuto aggiuntivo o gli elementi contenuti dal <xref:System.Windows.UIElement>non vengono conteggiati come simboli.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bit [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] carattere all&quot;interno di un testo <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetOffsetToPosition method to find the offsets for two <xref:System.Windows.Documents.TextPointer> instances, and then uses this information to save and restore the selection in a <xref:System.Windows.Controls.RichTextBox>.  The example assumes that the contents of the <xref:System.Windows.Controls.RichTextBox> have not changed between a selection save and a selection restore.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition)]"
  syntax:
    content: public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> che specifica una posizione per trovare la distanza (in simboli) per."
    return:
      type: System.Int32
      description: "Il numero di simboli tra corrente relativo <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e <code> position </code>.  Un valore negativo indica che corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> segue la posizione specificata da <code> position </code>, 0 indica che le posizioni sono uguali e un valore positivo indica che l&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> precede la posizione specificata da <code> position </code>."
  overload: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Specifica una posizione di fuori del contenitore di testo associato alla posizione corrente."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  id: GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce un indicatore di categoria per il contenuto adiacente all&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella direzione logica specificata."
  remarks: ''
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPointerContext method to implement an algorithm for calculating the balance of opening and closing element tags between two specified <xref:System.Windows.Documents.TextPointer> positions.  Each opening element tag is counted as +1, and each closing element tag is counted as –1.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition2)]"
  syntax:
    content: public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uno del <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valori che specifica la direzione logica in cui si desidera determinare la categoria per il contenuto adiacente."
    return:
      type: System.Windows.Documents.TextPointerContext
      description: "Uno del <xref href=&quot;System.Windows.Documents.TextPointerContext&quot;> </xref> valori che indica la categoria per il contenuto adiacente nella direzione logica specificata."
  overload: System.Windows.Documents.TextPointer.GetPointerContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  id: GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce un <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella posizione indicata dall&quot;offset specificato, in simboli, dall&quot;inizio dell&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Uno dei seguenti viene considerato un simbolo:: un&quot;apertura o tag di chiusura per il <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Un <xref:System.Windows.UIElement>elemento contenuto in una <xref:System.Windows.Documents.InlineUIContainer>o <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Si noti che tali un <xref:System.Windows.UIElement>vengono conteggiate come un solo simbolo; qualsiasi contenuto aggiuntivo o gli elementi contenuti dal <xref:System.Windows.UIElement>non vengono conteggiati come simboli.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bit [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] carattere all&quot;interno di un testo <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPositionAtOffset method to implement a pair of methods, one to calculate the offset to a specified position relative to any hosting paragraph, and the other to return a <xref:System.Windows.Documents.TextPointer> to a specified offset in a specified paragraph.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getpositionatoffset)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getpositionatoffset)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "Offset, in, i simboli per il quale calcolare e restituire la posizione.  Se l&quot;offset è negativo, la posizione viene calcolata in una direzione logica opposta a quella indicata dal <xref:System.Windows.Documents.TextPointer.LogicalDirection*>proprietà.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
    return:
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella posizione indicata dall&quot;offset specificato, o<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>se non è disponibile alcuna posizione corrispondente."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  id: GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce un <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella posizione indicata dall&quot;offset specificato, in simboli, dall&quot;inizio dell&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e nella direzione specificata."
  remarks: "Uno dei seguenti viene considerato un simbolo:: un&quot;apertura o tag di chiusura per il <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Un <xref:System.Windows.UIElement>elemento contenuto in una <xref:System.Windows.Documents.InlineUIContainer>o <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Si noti che tali un <xref:System.Windows.UIElement>vengono conteggiate come un solo simbolo; qualsiasi contenuto aggiuntivo o gli elementi contenuti dal <xref:System.Windows.UIElement>non vengono conteggiati come simboli.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bit [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] carattere all&quot;interno di un testo <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: offset
      type: System.Int32
      description: "Offset, in, i simboli per il quale calcolare e restituire la posizione.  Se l&quot;offset è negativo, l&quot;oggetto restituito <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> precede corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>; in caso contrario, vengono seguite."
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uno del <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valori che specifica la direzione logica dell&quot;oggetto restituito <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella posizione indicata dall&quot;offset specificato, o<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>se l&quot;offset si estende oltre la fine del contenuto."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce una stringa contenente il testo adiacente all&quot;oggetto corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> nella direzione logica specificata."
  remarks: "Questo metodo restituisce solo viene eseguito senza interruzioni di testo.  Non viene restituito se un tipo di simbolo diverso da <xref:System.Windows.Documents.TextPointerContext>adiacente all&quot;oggetto corrente <xref:System.Windows.Documents.TextPointer>nella direzione specificata.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Analogamente, verrà restituito testo solo fino al successivo simbolo non di testo."
  example:
  - "The following example demonstrates a use for this method. The example uses the GetTextInRun method to implement a simple text extractor.  The method returns a string concatenation of all text between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n While the example can be used to extract any text between two <xref:System.Windows.Documents.TextPointer> instances, it is intended for illustrative purposes only, and should not be used in production code.  Use the <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=fullName> property instead.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_gettextinrun)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_gettextinrun)]"
  syntax:
    content: public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uno del <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valori che specifica la direzione logica in cui trovare e restituire il testo adiacente."
    return:
      type: System.String
      description: "Stringa contenente il testo adiacente nella direzione logica specificata, o &lt;xref:System.String?displayProperty=fullName&gt; se non viene trovato alcun testo adiacente."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Copia il numero massimo specificato di caratteri da testo adiacente nella direzione specificata in una matrice di caratteri fornito dal chiamante."
  remarks: "Questo metodo restituisce solo viene eseguito senza interruzioni di testo.  Non viene restituito se un tipo di simbolo diverso da <xref:System.Windows.Documents.TextPointerContext>adiacente all&quot;oggetto corrente <xref:System.Windows.Documents.TextPointer>nella direzione specificata.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Analogamente, verrà restituito testo solo fino al successivo simbolo non di testo."
  syntax:
    content: public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uno del <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valori che specifica la direzione logica in cui si desidera trovare e copiare il testo adiacente."
    - id: textBuffer
      type: System.Char[]
      description: "Un buffer in cui il testo viene copiato."
    - id: startIndex
      type: System.Int32
      description: "Un indice in `textBuffer` in corrispondenza del quale iniziare a scrivere il testo copiato."
    - id: count
      type: System.Int32
      description: "Numero massimo di caratteri da copiare."
    return:
      type: System.Int32
      description: "Il numero di caratteri effettivamente copiato <code> textBuffer </code>."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>startIndex</code>è minore di 0 o maggiore di <xref:System.Array.Length*> proprietà <code>textBuffer</code>.       - oppure - <code>count</code> è minore di 0 o maggiore di spazio rimanente in <code>textBuffer</code> (<code>textBuffer</code>.<xref:System.Array.Length*> meno <code>startIndex</code>)."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  id: GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Restituisce il numero di caratteri Unicode tra corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e il simbolo non di testo successivo, nella direzione logica specificata."
  remarks: "Uno dei seguenti viene considerato un simbolo:: un&quot;apertura o tag di chiusura per il <xref:System.Windows.Documents.TextElement>elemento.</xref:System.Windows.Documents.TextElement>      -Un <xref:System.Windows.UIElement>elemento contenuto in una <xref:System.Windows.Documents.InlineUIContainer>o <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Si noti che tali un <xref:System.Windows.UIElement>vengono conteggiate come un solo simbolo; qualsiasi contenuto aggiuntivo o gli elementi contenuti dal <xref:System.Windows.UIElement>non vengono conteggiati come simboli.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -A 16 bit [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] carattere all&quot;interno di un testo <xref:System.Windows.Documents.Run>elemento.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Uno del <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valori che specifica la direzione logica in cui si desidera contare il numero di caratteri."
    return:
      type: System.Int32
      description: "Il numero di caratteri Unicode tra corrente <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> e il simbolo non di testo successivo.  Questo numero può essere 0 se è disponibile alcun testo adiacente."
  overload: System.Windows.Documents.TextPointer.GetTextRunLength*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  id: HasValidLayout
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Ottiene un valore che indica se il contenitore di testo associato alla posizione corrente ha un layout (aggiornato) valido."
  remarks: "Quando necessario, le operazioni che dipendono da un layout valido (ad esempio il <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>(metodo), <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A>(metodo), e <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>proprietà) tentano di rigenerare automaticamente un layout valido prima di procedere con l&quot;operazione.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>  La rigenerazione di un layout può essere un&quot;operazione relativamente costosa.  Utilizzare questa proprietà per cercare un layout valido prima di eseguire operazioni che possono rigenerare il layout.  Per ulteriori informazioni, vedere [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool HasValidLayout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il layout è aggiornato e valido. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.HasValidLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  id: InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Inserisce un&quot;interruzione di riga in corrispondenza della posizione corrente."
  syntax:
    content: public System.Windows.Documents.TextPointer InsertLineBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> posizionato immediatamente dopo il <xref href=&quot;System.Windows.Documents.LineBreak&quot;> </xref> elemento inserito da questo metodo."
  overload: System.Windows.Documents.TextPointer.InsertLineBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  id: InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Inserisce un&quot;interruzione di paragrafo in corrispondenza della posizione corrente."
  remarks: "Se questo metodo viene chiamato quando la posizione corrente si trova all&quot;interno di un oggetto esistente <xref:System.Windows.Documents.Paragraph>elemento, il paragrafo esistente e il contenuto viene suddivisa in due paragrafi in corrispondenza della posizione corrente.</xref:System.Windows.Documents.Paragraph>  Se questo metodo viene chiamato quando la posizione corrente non è presente all&quot;interno di un paragrafo esistente, viene inserito un paragrafo di nuovo e vuoto.  Se questo metodo viene chiamato in una posizione non è adatto per la suddivisione o l&quot;inserimento di un paragrafo (ad esempio, se la posizione corrente si trova all&quot;interno di un <xref:System.Windows.Documents.Hyperlink>elemento), viene generata un&quot;eccezione.</xref:System.Windows.Documents.Hyperlink>"
  syntax:
    content: public System.Windows.Documents.TextPointer InsertParagraphBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> all&quot;inizio (<xref:System.Windows.Documents.TextElement.ContentStart*>) del nuovo paragrafo.</xref:System.Windows.Documents.TextElement.ContentStart*>"
  overload: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Questo metodo viene chiamato in una posizione che non può essere divisa per contenere un nuovo paragrafo, ad esempio nell&quot;ambito di un <xref href=&quot;System.Windows.Documents.Hyperlink&quot;> </xref> o <xref href=&quot;System.Windows.Documents.InlineUIContainer&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  id: InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Inserisce il testo specificato nel testo <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> in corrispondenza della posizione corrente."
  remarks: "Se il <xref:System.Windows.Documents.TextPointer>non ha l&quot;ambito da un <xref:System.Windows.Documents.Run>elemento, un <xref:System.Windows.Documents.Run>viene inserito insieme con il `textData`.</xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public void InsertTextInRun (string textData);
    parameters:
    - id: textData
      type: System.String
      description: "Il testo da inserire."
  overload: System.Windows.Documents.TextPointer.InsertTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La posizione corrente non è in un <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> elemento."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  id: IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Ottiene un valore che indica se la posizione corrente è una posizione di inserimento."
  remarks: "Posizione di inserimento è una posizione in cui è possibile aggiungere il nuovo contenuto senza interrompere tutte le regole semantiche per il contenuto associato.  In pratica, la posizione di inserimento è un punto qualsiasi nel contenuto in cui non può essere posizionato un punto di inserimento.  Un esempio di un oggetto valido <xref:System.Windows.Documents.TextPointer>posizione che non è una posizione di inserimento è la posizione tra due adiacenti <xref:System.Windows.Documents.Paragraph>tag (vale a dire tra il tag di chiusura del paragrafo precedente e il tag di apertura del paragrafo successivo).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public bool IsAtInsertionPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la posizione corrente è una posizione di inserimento. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  id: IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Ottiene un valore che indica se la posizione corrente è all&quot;inizio di una riga."
  remarks: "Se il <xref:System.Windows.Documents.TextPointer>punta a una posizione ambigua, ad esempio, tra due righe, la riga nella direzione specificata per il <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>proprietà è selezionata come riga iniziale relativa.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       L&quot;operazione eseguita da questa proprietà dipende da un layout valido.  Se necessario, questo metodo tenta di rigenerare automaticamente un layout valido prima di procedere con l&quot;operazione.  La rigenerazione di un layout può essere un&quot;operazione relativamente costosa.  Utilizzare il <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>proprietà per cercare un layout valido prima di eseguire operazioni che possono rigenerare il layout.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Per ulteriori informazioni, vedere [Layout](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool IsAtLineStartPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la posizione corrente all&quot;inizio di una linea. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  id: IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Indica se la posizione specificata è nello stesso contenitore di testo della posizione corrente."
  remarks: "La maggior parte delle operazioni che implicano più <xref:System.Windows.Documents.TextPointer>istanze sono valide solo se le istanze in questione indicano le posizioni che sono nell&quot;ambito del contenitore di testo stesso.</xref:System.Windows.Documents.TextPointer>  Ad esempio il <xref:System.Windows.Documents.TextPointer.CompareTo%2A>e <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>non possono essere utilizzati con un <xref:System.Windows.Documents.TextPointer>in una posizione di fuori del contenitore di testo associato alla posizione corrente.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> </xref:System.Windows.Documents.TextPointer.CompareTo%2A>  Utilizzare questo metodo per verificare che un oggetto specificato <xref:System.Windows.Documents.TextPointer>è compatibile con la posizione corrente per tali operazioni.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the IsInSameDocument method to check whether a specified <xref:System.Windows.Documents.TextPointer> is positioned between two other specified <xref:System.Windows.Documents.TextPointer> instances in a situation when there is no guarantee that all three positions belong to the same text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_isinsamedocument)]\n [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_isinsamedocument)]"
  syntax:
    content: public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);
    parameters:
    - id: textPosition
      type: System.Windows.Documents.TextPointer
      description: "Oggetto <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> che specifica una posizione da confrontare con la posizione corrente."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> textPosition </code> indica una posizione che si trova nello stesso contenitore di testo della posizione corrente; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsInSameDocument*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textPosition</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  id: LogicalDirection
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Ottiene la direzione logica associata alla posizione corrente che viene utilizzata per distinguere il contenuto associato alla posizione corrente."
  remarks: "Ad esempio dell&quot;utilizzo di questa proprietà, il <xref:System.Windows.Documents.LogicalDirection>del <xref:System.Windows.Documents.TextPointer>restituito da un hit test metodo fornisce un riscontro tra due caratteri del testo.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> La direzione logica specifica quale dei due caratteri effettivamente raggiunto, sinistra o destra."
  syntax:
    content: public System.Windows.Documents.LogicalDirection LogicalDirection { get; }
    return:
      type: System.Windows.Documents.LogicalDirection
      description: "Il <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> valore associato alla posizione corrente."
  overload: System.Windows.Documents.TextPointer.LogicalDirection*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Paragraph
  id: Paragraph
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Ottiene il paragrafo che definisce l&quot;ambito della posizione corrente, se presente."
  syntax:
    content: public System.Windows.Documents.Paragraph Paragraph { get; }
    return:
      type: System.Windows.Documents.Paragraph
      description: "Il <xref href=&quot;System.Windows.Documents.Paragraph&quot;> </xref> la posizione corrente, che fornisce l&quot;ambito o<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>se tali paragrafo non esiste."
  overload: System.Windows.Documents.TextPointer.Paragraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Parent
  id: Parent
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Ottiene l&quot;elemento padre logico che definisce l&quot;ambito della posizione corrente."
  syntax:
    content: public System.Windows.DependencyObject Parent { get; }
    return:
      type: System.Windows.DependencyObject
      description: "L&quot;elemento padre logico che definisce l&quot;ambito della posizione corrente."
  overload: System.Windows.Documents.TextPointer.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.ToString
  id: ToString
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Questo tipo o membro supporta il [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] dell&quot;infrastruttura e non deve essere utilizzato direttamente dal codice."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Stringa che rappresenta l&quot;oggetto."
  overload: System.Windows.Documents.TextPointer.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Documents.ContentPosition
  isExternal: false
  name: System.Windows.Documents.ContentPosition
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Documents.TextPointer
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Documents.LogicalDirection
  parent: System.Windows.Documents
  isExternal: false
  name: LogicalDirection
  nameWithType: LogicalDirection
  fullName: System.Windows.Documents.LogicalDirection
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
- uid: System.Windows.Documents.TextPointerContext
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointerContext
  nameWithType: TextPointerContext
  fullName: System.Windows.Documents.TextPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
- uid: System.Windows.Documents.Paragraph
  parent: System.Windows.Documents
  isExternal: false
  name: Paragraph
  nameWithType: Paragraph
  fullName: System.Windows.Documents.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
- uid: System.Windows.Documents.TextPointer.CompareTo*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo
  nameWithType: TextPointer.CompareTo
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun
  nameWithType: TextPointer.DeleteTextInRun
- uid: System.Windows.Documents.TextPointer.DocumentEnd*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement
  nameWithType: TextPointer.GetAdjacentElement
- uid: System.Windows.Documents.TextPointer.GetCharacterRect*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect
  nameWithType: TextPointer.GetCharacterRect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition
  nameWithType: TextPointer.GetInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition
  nameWithType: TextPointer.GetLineStartPosition
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition
  nameWithType: TextPointer.GetNextContextPosition
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition
  nameWithType: TextPointer.GetNextInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition
  nameWithType: TextPointer.GetOffsetToPosition
- uid: System.Windows.Documents.TextPointer.GetPointerContext*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext
  nameWithType: TextPointer.GetPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset
  nameWithType: TextPointer.GetPositionAtOffset
- uid: System.Windows.Documents.TextPointer.GetTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun
  nameWithType: TextPointer.GetTextInRun
- uid: System.Windows.Documents.TextPointer.GetTextRunLength*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength
  nameWithType: TextPointer.GetTextRunLength
- uid: System.Windows.Documents.TextPointer.HasValidLayout*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
- uid: System.Windows.Documents.TextPointer.InsertLineBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak
  nameWithType: TextPointer.InsertLineBreak
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak
  nameWithType: TextPointer.InsertParagraphBreak
- uid: System.Windows.Documents.TextPointer.InsertTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun
  nameWithType: TextPointer.InsertTextInRun
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument
  nameWithType: TextPointer.IsInSameDocument
- uid: System.Windows.Documents.TextPointer.LogicalDirection*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString
  nameWithType: TextPointer.ToString
