### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  id: ProviderConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  type: Class
  summary: "Definisce un oggetto punto di connessione che consente a un server di controllo funge da provider in modo da formare una connessione con un consumer."
  remarks: "In ogni connessione Web part tra due controlli server, ogni controllo deve avere (tra gli altri requisiti) un oggetto punto di connessione associata che consente di connettersi a altro controllo e di fornire o utilizzare i dati, a seconda se il controllo è designato come il provider o consumer per la connessione. Oggetto <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>in generale l&quot;oggetto contiene i dettagli per la modalità di connessione a un altro controllo e il tipo di dati che è possibile condividere un controllo.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Per un controllo che funge da provider in una connessione, il punto di connessione deve essere un oggetto di ProviderConnectionPoint. Per informazioni sulle connessioni Web part e punti di connessione, vedere gli argomenti elencati nella sezione Vedere anche.       Per creare un oggetto ProviderConnectionPoint, sono necessari diversi passaggi: 1.  Creare un&quot;interfaccia. Dati di condivisioni un provider con un consumer, esegue il recupero di un&quot;istanza di un&quot;interfaccia e restituendo tale istanza a un consumer.      2.  Implementare l&quot;interfaccia in un provider. Oggetto <xref:System.Web.UI.WebControls.WebParts.WebPart>o un altro server di controllo (qualsiasi tipo di controllo del server in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona può essere utilizzata) che sarà il provider deve implementare l&quot;interfaccia creata nel primo passaggio.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      3.  Identificare un metodo di callback. Un metodo del provider deve essere identificato come metodo di callback per stabilire una connessione. Questo metodo restituisce un&quot;istanza dell&quot;interfaccia implementata da un consumer. L&quot;approccio di Web part per l&quot;identificazione di un metodo di callback nel provider consiste nell&quot;aggiungere un `ConnectionProvider` attributo dei metadati (definito dalla <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>classe) per il metodo che restituisce l&quot;istanza dell&quot;interfaccia.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Quando viene aggiunto l&quot;attributo, l&quot;unico parametro obbligatorio è un nome visualizzato da utilizzare per il punto di connessione del provider. Parametri facoltativi possono anche essere aggiunto, ad esempio un ID per il punto di connessione.       Dopo che un controllo sia stato preparato per agire come un provider, il controllo può partecipare alle connessioni (presupponendo che un controllo consumer sia in modo analogo e reso disponibile). Per creare una connessione dichiarativa statica nel markup della pagina Web, gli sviluppatori possono utilizzare il `<asp:webpartconnection>` elemento. Se il `ConnectionProvider` attributo nel codice sorgente del provider che identifica il metodo di callback specifica un ID per il punto di connessione, quindi tale valore deve essere assegnato per il `ProviderConnectionPointID` attributo il `<asp:webpartconnection>` elemento in una pagina. Uno dei motivi che uno sviluppatore può specificare un ID per un punto di connessione è se sono presenti più punti di connessione nel controllo del provider. Se non è specificato un ID per il punto di connessione del provider del controllo del provider, è un valore da assegnare al `ProviderConnectionPointID` attributo nella pagina, in quanto la connessione verrà creata utilizzando il valore predefinito ottenuto dal <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>campo.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Per creare una connessione nel codice, gli sviluppatori devono creare un nuovo oggetto ProviderConnectionPoint chiamando il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>metodo e passando l&quot;ID del controllo del provider, con l&quot;ID o indice dell&quot;oggetto ProviderConnectionPoint definito nel controllo del provider.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Oggetto ProviderConnectionPoint restituito, insieme a un riferimento al provider di controllo, un riferimento al controllo consumer e un oggetto corrispondente <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>oggetto, viene passato al <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>metodo per creare un nuovo <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>oggetto.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Anche se gli sviluppatori possono utilizzare i punti di connessione provider come parte delle connessioni in modo dichiarativo o a livello di codice, gli utenti possono anche interagire con i punti di connessione provider per stabilire connessioni tramite l&quot;interfaccia utente (UI). Se gli sviluppatori di dichiarano un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>controllo in una pagina Web, fornisce un&quot;interfaccia utente in fase di esecuzione per gli utenti di creare connessioni.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Se si sceglie il controllo consumer come punto di partenza per stabilire la connessione facendo clic il verbo di connessione (possono anche scegliere il provider, ovvero non c&quot;è alcuna differenza nella connessione risultante), nell&quot;interfaccia utente verrà visualizzato un controllo elenco a discesa con il nome visualizzato del punto di connessione del provider disponibile (o punti se sono presenti più di uno). Gli utenti devono selezionare un punto di connessione per creare una connessione.       Un oggetto di ProviderConnectionPoint viene associato direttamente a un controllo provider specifico e archivia i dettagli relativi a una connessione nelle proprietà del che componente eredita dalla classe base di <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Ad esempio, in ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>proprietà, un punto di connessione provider mantiene il tipo di interfaccia restituito dal provider.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Se il provider e consumer in una connessione che funzionano con lo stesso tipo di interfaccia, i controlli sono compatibili e in grado di creare una connessione diretta. Se il provider e l&quot;utente non può funzionare con lo stesso tipo di interfaccia, sono incompatibili e devono utilizzare un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>oggetto da tradurre il punto di connessione provider <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>valore in un tipo che il consumer può funzionare con.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Un&quot;altra importante proprietà ereditata è la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>proprietà che fornisce un nome descrittivo visualizzato nell&quot;interfaccia utente per gli utenti di scegliere una connessione del provider punto durante la creazione di connessioni.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Il nome visualizzato è il parametro obbligatorio quando gli sviluppatori aggiungono un `ConnectionProvider` attributo al metodo di callback in un controllo di provider. Ereditato <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>proprietà è anche utile, come indicato in precedenza, perché fornisce un identificatore univoco per un punto di connessione nel caso in cui un provider include più punti di connessione.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Un provider può disporre di più oggetti ProviderConnectionPoint definiti all&quot;interno e in questo caso, quando gli sviluppatori aggiungono il `ConnectionProvider` attributo a un metodo, è necessario specificare un valore di ID per distinguere ogni punto di connessione. Un&quot;altra proprietà ereditata significativa è la <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>proprietà, che indica se un punto di connessione può connettersi contemporaneamente a più consumer.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Valore di questa proprietà è `true` per impostazione predefinita per i punti di connessione provider (mentre il valore predefinito è `false` per i punti di connessione consumer).       La classe ProviderConnectionPoint aggiunge diversi metodi univoci ai membri ereditati dalla <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>che consente di recuperare un&quot;istanza dell&quot;interfaccia che verrà restituito dal metodo di callback per i consumer.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>metodo recupera ulteriori interfacce del consumer che fanno parte di una connessione esistente, ma non le interfacce consentono di stabilire la connessione.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ProviderConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Provider** link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Then, click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.  \n  \n The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ProviderConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> classe."
  remarks: "Il costruttore ProviderConnectionPoint per la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>classe chiama semplicemente il costruttore base, passando i diversi parametri e l&quot;inizializzazione della classe base.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Il costruttore della classe base controlla un numero di parametri per un punto di connessione e può generare eccezioni diverse. Per un elenco di possibili eccezioni, vedere la sezione relativa alle eccezioni.       È possibile chiamare il costruttore ProviderConnectionPoint per creare un&quot;istanza personalizzata della <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>classe.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Tuttavia, nei casi in cui desidera stabilire una connessione non si estende la classe, è necessario chiamare il <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>per restituire un oggetto punto di connessione esistente da un provider.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`. Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter. This demonstrates how to create a custom provider connection point and then associate it with a provider control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "Il metodo nel controllo provider che restituisce un&quot;istanza di interfaccia ai consumer per stabilire una connessione."
    - id: interfaceType
      type: System.Type
      description: "Il <xref:System.Type>dell&quot;interfaccia che il provider assegna ai consumer.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "Il <xref:System.Type>del controllo provider a cui è associato il punto di connessione del provider.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Un nome descrittivo per il punto di connessione che viene visualizzato agli utenti nell&quot;interfaccia di connessione (UI)."
    - id: id
      type: System.String
      description: "Identificatore univoco per il punto di connessione del provider."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Valore booleano che indica se il punto di connessione può avere più connessioni simultanee con i consumer."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>non è dello stesso tipo del controllo del provider (o una classe valida derivato da esso)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  id: GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Richiama il metodo di callback in un controllo di provider che ottiene un&quot;istanza di interfaccia da restituire ai consumer."
  remarks: "Questo metodo restituisce un oggetto dal controllo provider che è un&quot;istanza dell&quot;interfaccia utilizzata per stabilire una connessione. Il tipo dell&quot;oggetto sarà il tipo dell&quot;interfaccia implementata. Ad esempio, sono di due interfacce implementate per le connessioni in set di controlli Web part <xref:System.Web.UI.WebControls.WebParts.IWebPartField>e <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</xref:System.Web.UI.WebControls.WebParts.IWebPartRow> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> Quando viene chiamato il metodo di GetObject in un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>dell&quot;oggetto, se il provider associato implementa una di queste interfacce, l&quot;oggetto restituito è dello stesso tipo.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Viene chiamato il metodo GetObject da <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>oggetti durante l&quot;attivazione di una connessione.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Si tratta di una fase critica che avvia una connessione e avvia il processo che consente a due controlli di condividere i dati effettivamente.       Il controllo consumer in una connessione deve essere in grado di funzionare con lo stesso tipo dell&quot;interfaccia come il provider. In caso contrario, i controlli sono incompatibili e un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>oggetto deve essere utilizzato per stabilire una connessione.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual object GetObject (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Il controllo che funge da provider in una connessione Web part."
    return:
      type: System.Object
      description: "Un <xref:System.Object>che è un&quot;istanza dell&quot;interfaccia di un provider restituisce ai consumer per stabilire una connessione.</xref:System.Object>"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  id: GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ottiene una raccolta facoltativa di interfacce secondarie che possono essere supportati da un punto di connessione."
  remarks: "Un oggetto punto di connessione provider dispone sempre di un&quot;interfaccia predefinita che viene usata per stabilire una connessione con i consumer. Un&quot;istanza dell&quot;interfaccia predefinita viene recuperata chiamando il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>metodo su un <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>oggetto.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>       Tuttavia, alcuni controlli di provider implementano più interfacce per fornire agli utenti come parte di una connessione. Queste interfacce, che non sono quelle predefinite utilizzate per stabilire una connessione, vengono chiamate interfacce secondarie. Il metodo GetSecondaryInterfaces fornisce un modo per restituire una raccolta di riferimenti alle interfacce secondarie, come il <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>metodo restituisce un riferimento all&quot;interfaccia predefinita.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Il controllo che funge da provider in una connessione Web part."
    return:
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "Oggetto <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> di interfacce aggiuntive fornite dal controllo che funge da provider."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject
  nameWithType: ProviderConnectionPoint.GetObject
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces
