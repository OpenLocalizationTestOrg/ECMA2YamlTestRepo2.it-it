### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.ReplacementText
  id: ReplacementText
  children:
  - System.Speech.Recognition.ReplacementText.CountOfWords
  - System.Speech.Recognition.ReplacementText.DisplayAttributes
  - System.Speech.Recognition.ReplacementText.FirstWordIndex
  - System.Speech.Recognition.ReplacementText.Text
  langs:
  - csharp
  name: ReplacementText
  nameWithType: ReplacementText
  fullName: System.Speech.Recognition.ReplacementText
  type: Class
  summary: "Contiene informazioni su una procedura di normalizzazione vocale che è stata eseguita sui risultati di riconoscimento."
  remarks: "Normalizzazione di riconoscimento vocale è l&quot;utilizzo dei costrutti speciali o dei simboli per esprimere il riconoscimento vocale in scrittura.       Ad esempio, si supponga che questo sia il testo riconosciuto: &quot;luglio quattro dodici uno 30 PM, acquistati kg uno punto sei di fish per quattordici euro e sei centesimi, in continuamente inserire mercato Seattle washington nove otto uno due due&quot; questo è lo stesso testo dopo la normalizzazione: &quot;il 4 luglio alle 12:31 PM acquistati 1,6 kg di fish per $14,06 , a mercato continuamente sul posto in Seattle WA 98122&quot; In questo esempio sono presenti cinque sostituzioni, ognuno dei quali potrebbe essere descritti da un&quot;istanza di ReplacementText.       Utilizzo dell&quot;oggetto ReplacementText, un&quot;applicazione può determinare:-il percorso e il numero di parole sostituito dalla normalizzazione. Per ulteriori informazioni, vedere <xref:System.Speech.Recognition.ReplacementText.FirstWordIndex%2A>o <xref:System.Speech.Recognition.ReplacementText.CountOfWords%2A>.</xref:System.Speech.Recognition.ReplacementText.CountOfWords%2A> </xref:System.Speech.Recognition.ReplacementText.FirstWordIndex%2A>      -Il testo sostituito e i relativi attributi di visualizzazione. Per ulteriori informazioni, vedere <xref:System.Speech.Recognition.ReplacementText.Text%2A>e <xref:System.Speech.Recognition.ReplacementText.DisplayAttributes%2A>.</xref:System.Speech.Recognition.ReplacementText.DisplayAttributes%2A> </xref:System.Speech.Recognition.ReplacementText.Text%2A>       Le istanze di ReplacementText vengono ottenute in genere come membri del <xref:System.Collections.ObjectModel.Collection%601>oggetto restituito dal <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A>proprietà <xref:System.Speech.Recognition.RecognizedPhrase>(o le classi che ereditano da <xref:System.Speech.Recognition.RecognizedPhrase>, ad esempio <xref:System.Speech.Recognition.RecognitionResult>) quando normalizzato testo restituito.</xref:System.Speech.Recognition.RecognitionResult> </xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> </xref:System.Collections.ObjectModel.Collection%601>"
  example:
  - "The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \n  \n```c#  \ninternal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null && label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             \"  Recognizer currently at:   {0} mSec\\n\" +  \n                             \"  Audio Device currently at: {1} mSec\\n\",  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n  \n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(\"  Emulated input\\n\");  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               \"  Candidate Phrase at:       {0} mSec\\n\" +  \n                               \"  Phrase Length:             {1} mSec\\n\" +  \n                               \"  Input State Time:          {2}\\n\" +  \n                               \"  Input Format:              {3}\\n\",  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n  \n      label.Text += String.Format(\"  Confidence Level:          {0}\\n\", result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            \"  Recognizing Grammar:       {0}\\n\" +  \n                            \"  Recognizing Rule:          {1}\\n\",  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \"None\"),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \"None\"));  \n      }  \n  \n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(\"  Replacement text:\\n\");  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n  \n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += \" \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += \"  \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           \"      At index {0} for {1} words. Text: \\\"{2}\\\"\\n\",  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n  \n        }  \n        label.Text += String.Format(\"\\n\\n\");  \n      }  \n    }  \n  }    \n}  \n```"
  syntax:
    content: public class ReplacementText
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.ReplacementText.CountOfWords
  id: CountOfWords
  parent: System.Speech.Recognition.ReplacementText
  langs:
  - csharp
  name: CountOfWords
  nameWithType: ReplacementText.CountOfWords
  fullName: System.Speech.Recognition.ReplacementText.CountOfWords
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ottiene il numero di parole riconosciute sostituito la procedura di normalizzazione del riconoscimento vocale."
  remarks: ''
  example:
  - "The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \n  \n```c#  \ninternal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null && label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             \"  Recognizer currently at:   {0} mSec\\n\" +  \n                             \"  Audio Device currently at: {1} mSec\\n\",  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n  \n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(\"  Emulated input\\n\");  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               \"  Candidate Phrase at:       {0} mSec\\n\" +  \n                               \"  Phrase Length:             {1} mSec\\n\" +  \n                               \"  Input State Time:          {2}\\n\" +  \n                               \"  Input Format:              {3}\\n\",  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n  \n      label.Text += String.Format(\"  Confidence Level:          {0}\\n\", result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            \"  Recognizing Grammar:       {0}\\n\" +  \n                            \"  Recognizing Rule:          {1}\\n\",  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \"None\"),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \"None\"));  \n      }  \n  \n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(\"  Replacement text:\\n\");  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n  \n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += \" \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += \"  \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           \"      At index {0} for {1} words. Text: \\\"{2}\\\"\\n\",  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n  \n        }  \n        label.Text += String.Format(\"\\n\\n\");  \n      }  \n    }  \n  }    \n}  \n```"
  syntax:
    content: public int CountOfWords { get; }
    return:
      type: System.Int32
      description: "Restituisce il numero di parole riconosciute sostituito la procedura di normalizzazione del riconoscimento vocale."
  overload: System.Speech.Recognition.ReplacementText.CountOfWords*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.ReplacementText.DisplayAttributes
  id: DisplayAttributes
  parent: System.Speech.Recognition.ReplacementText
  langs:
  - csharp
  name: DisplayAttributes
  nameWithType: ReplacementText.DisplayAttributes
  fullName: System.Speech.Recognition.ReplacementText.DisplayAttributes
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ottiene informazioni gli spazi iniziali e finali per il testo sostituito la procedura di normalizzazione del riconoscimento vocale."
  remarks: ''
  example:
  - "The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \n  \n```c#  \ninternal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null && label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             \"  Recognizer currently at:   {0} mSec\\n\" +  \n                             \"  Audio Device currently at: {1} mSec\\n\",  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n  \n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(\"  Emulated input\\n\");  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               \"  Candidate Phrase at:       {0} mSec\\n\" +  \n                               \"  Phrase Length:             {1} mSec\\n\" +  \n                               \"  Input State Time:          {2}\\n\" +  \n                               \"  Input Format:              {3}\\n\",  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n  \n      label.Text += String.Format(\"  Confidence Level:          {0}\\n\", result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            \"  Recognizing Grammar:       {0}\\n\" +  \n                            \"  Recognizing Rule:          {1}\\n\",  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \"None\"),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \"None\"));  \n      }  \n  \n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(\"  Replacement text:\\n\");  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n  \n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += \" \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += \"  \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           \"      At index {0} for {1} words. Text: \\\"{2}\\\"\\n\",  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n  \n        }  \n        label.Text += String.Format(\"\\n\\n\");  \n      }  \n    }  \n  }    \n}  \n```"
  syntax:
    content: public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }
    return:
      type: System.Speech.Recognition.DisplayAttributes
      description: "Restituisce un <xref href=&quot;System.Speech.Recognition.DisplayAttributes&quot;> </xref> oggetto che specifica l&quot;utilizzo di spazio per visualizzare il testo sostituito normalizzazione."
  overload: System.Speech.Recognition.ReplacementText.DisplayAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.ReplacementText.FirstWordIndex
  id: FirstWordIndex
  parent: System.Speech.Recognition.ReplacementText
  langs:
  - csharp
  name: FirstWordIndex
  nameWithType: ReplacementText.FirstWordIndex
  fullName: System.Speech.Recognition.ReplacementText.FirstWordIndex
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ottiene la posizione della prima parola riconosciuta sostituita la procedura di normalizzazione del riconoscimento vocale."
  remarks: ''
  example:
  - "In the following example, information about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine is displayed to a user interface.  \n  \n```c#  \ninternal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null && label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             \"  Recognizer currently at:   {0} mSec\\n\" +  \n                             \"  Audio Device currently at: {1} mSec\\n\",  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n  \n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(\"  Emulated input\\n\");  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               \"  Candidate Phrase at:       {0} mSec\\n\" +  \n                               \"  Phrase Length:             {1} mSec\\n\" +  \n                               \"  Input State Time:          {2}\\n\" +  \n                               \"  Input Format:              {3}\\n\",  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n  \n      label.Text += String.Format(\"  Confidence Level:          {0}\\n\", result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            \"  Recognizing Grammar:       {0}\\n\" +  \n                            \"  Recognizing Rule:          {1}\\n\",  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \"None\"),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \"None\"));  \n      }  \n  \n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(\"  Replacement text:\\n\");  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n  \n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += \" \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += \"  \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           \"      At index {0} for {1} words. Text: \\\"{2}\\\"\\n\",  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n  \n        }  \n        label.Text += String.Format(\"\\n\\n\");  \n      }  \n    }  \n  }    \n}  \n```"
  syntax:
    content: public int FirstWordIndex { get; }
    return:
      type: System.Int32
      description: "Restituisce la posizione della prima parola riconosciuta sostituita la procedura di normalizzazione del riconoscimento vocale."
  overload: System.Speech.Recognition.ReplacementText.FirstWordIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.ReplacementText.Text
  id: Text
  parent: System.Speech.Recognition.ReplacementText
  langs:
  - csharp
  name: Text
  nameWithType: ReplacementText.Text
  fullName: System.Speech.Recognition.ReplacementText.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Ottiene il testo riconosciuto sostituito la procedura di normalizzazione del riconoscimento vocale."
  remarks: ''
  example:
  - "The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \n  \n```c#  \ninternal static void DisplayBasicPhraseInfo(  \n        Label label,   \n        RecognizedPhrase result,   \n        SpeechRecognizer rec)   \n{  \n  if (result != null && label != null)   \n  {  \n    // Blank  \n    if (rec != null)   \n    {   \n      // Clear  \n      label.Text += String.Format(  \n                             \"  Recognizer currently at:   {0} mSec\\n\" +  \n                             \"  Audio Device currently at: {1} mSec\\n\",  \n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \n                             rec.AudioPosition.TotalMilliseconds);  \n    }  \n  \n    if (result != null)   \n    { // Clear  \n      RecognitionResult recResult = result as RecognitionResult;  \n      if (recResult != null)   \n      {  \n        RecognizedAudio resultAudio = recResult.Audio;  \n        if (resultAudio == null)   \n        {  \n          label.Text += String.Format(\"  Emulated input\\n\");  \n        }   \n        else   \n        {  \n          label.Text += String.Format(  \n                               \"  Candidate Phrase at:       {0} mSec\\n\" +  \n                               \"  Phrase Length:             {1} mSec\\n\" +  \n                               \"  Input State Time:          {2}\\n\" +  \n                               \"  Input Format:              {3}\\n\",  \n                               resultAudio.AudioPosition.TotalMilliseconds,  \n                               resultAudio.Duration.TotalMilliseconds,  \n                               resultAudio.StartTime.ToShortTimeString(),  \n                               resultAudio.Format.EncodingFormat.ToString());  \n        }  \n      }  \n  \n      label.Text += String.Format(\"  Confidence Level:          {0}\\n\", result.Confidence);  \n      if (result.Grammar != null)   \n      {  \n        label.Text += String.Format(  \n                            \"  Recognizing Grammar:       {0}\\n\" +  \n                            \"  Recognizing Rule:          {1}\\n\",  \n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \"None\"),  \n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \"None\"));  \n      }  \n  \n      if  (result.ReplacementWordUnits.Count !=  0)    \n      {  \n        label.Text += String.Format(\"  Replacement text:\\n\");  \n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \n        {  \n          string repText = rep.Text;  \n          // Add trailing spaces  \n  \n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \n          {  \n            repText += \" \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \n          {  \n            repText += \"  \";  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \n          {  \n            repText=repText.TrimStart();  \n          }  \n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n          {  \n            repText = repText.TrimEnd();  \n          }  \n          label.Text += String.Format(  \n                           \"      At index {0} for {1} words. Text: \\\"{2}\\\"\\n\",  \n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \n  \n        }  \n        label.Text += String.Format(\"\\n\\n\");  \n      }  \n    }  \n  }    \n}  \n```"
  syntax:
    content: public string Text { get; }
    return:
      type: System.String
      description: "Restituisce il testo riconosciuto sostituito la procedura di normalizzazione del riconoscimento vocale."
  overload: System.Speech.Recognition.ReplacementText.Text*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.ReplacementText.CountOfWords
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: CountOfWords
  nameWithType: ReplacementText.CountOfWords
  fullName: System.Speech.Recognition.ReplacementText.CountOfWords
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.ReplacementText.DisplayAttributes
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: DisplayAttributes
  nameWithType: ReplacementText.DisplayAttributes
  fullName: System.Speech.Recognition.ReplacementText.DisplayAttributes
- uid: System.Speech.Recognition.DisplayAttributes
  parent: System.Speech.Recognition
  isExternal: false
  name: DisplayAttributes
  nameWithType: DisplayAttributes
  fullName: System.Speech.Recognition.DisplayAttributes
- uid: System.Speech.Recognition.ReplacementText.FirstWordIndex
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: FirstWordIndex
  nameWithType: ReplacementText.FirstWordIndex
  fullName: System.Speech.Recognition.ReplacementText.FirstWordIndex
- uid: System.Speech.Recognition.ReplacementText.Text
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: Text
  nameWithType: ReplacementText.Text
  fullName: System.Speech.Recognition.ReplacementText.Text
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.ReplacementText.CountOfWords*
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: CountOfWords
  nameWithType: ReplacementText.CountOfWords
- uid: System.Speech.Recognition.ReplacementText.DisplayAttributes*
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: DisplayAttributes
  nameWithType: ReplacementText.DisplayAttributes
- uid: System.Speech.Recognition.ReplacementText.FirstWordIndex*
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: FirstWordIndex
  nameWithType: ReplacementText.FirstWordIndex
- uid: System.Speech.Recognition.ReplacementText.Text*
  parent: System.Speech.Recognition.ReplacementText
  isExternal: false
  name: Text
  nameWithType: ReplacementText.Text
