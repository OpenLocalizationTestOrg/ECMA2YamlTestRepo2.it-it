### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlServer.Server.IBinarySerialize
  id: IBinarySerialize
  children:
  - Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)
  - Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)
  langs:
  - csharp
  name: IBinarySerialize
  nameWithType: IBinarySerialize
  fullName: Microsoft.SqlServer.Server.IBinarySerialize
  type: Interface
  summary: "Fornisce l&quot;implementazione personalizzata per il tipo definito dall&quot;utente (UDT) e serializzazione di aggregazione definita dall&quot;utente e la deserializzazione."
  remarks: "Tipi definiti dall&quot;utente (UDT) e le aggregazioni definite dall&quot;utente sono necessari per definire un formato di archiviazione, che può essere <xref:Microsoft.SqlServer.Server.Format>.`Native` </xref:Microsoft.SqlServer.Server.Format> or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</xref:Microsoft.SqlServer.Server.Format>       <xref:Microsoft.SqlServer.Server.Format>.`Native`</xref:Microsoft.SqlServer.Server.Format> consente a SQL Server gestire la serializzazione e deserializzazione automaticamente, ma il formato presenta limitazioni sui tipi che è possibile gestire. <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</xref:Microsoft.SqlServer.Server.Format> consente ai tipi definiti dall&quot;utente e aggregati gestire la propria serializzazione. Tipi definiti dall&quot;utente e funzioni di aggregazione deve essere contrassegnati con <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` </xref:Microsoft.SqlServer.Server.Format> nel `SqlUserDefinedType` o `SqlUserDefinedAggregate` e di attributo deve implementare l&quot;interfaccia IBinarySerialize.       Si noti che anche con la serializzazione personalizzata, la dimensione totale di ogni istanza deve essere sotto il limite massimo consentito, è di 8000 byte."
  syntax:
    content: public interface IBinarySerialize
  implements: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)
  id: Read(System.IO.BinaryReader)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  langs:
  - csharp
  name: Read(BinaryReader)
  nameWithType: IBinarySerialize.Read(BinaryReader)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Read(BinaryReader)
  type: Method
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "Genera un tipo definito dall&quot;utente (UDT) o un&quot;aggregazione definita dall&quot;utente dal formato binario."
  remarks: "Il metodo Read deve ricostituire l&quot;oggetto utilizzando le informazioni scritte dal <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>metodo.</xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>"
  example:
  - "The following example shows the implementation of the Read method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT. This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.  \n  \n [!code-cs[DataWorks IBinarySerialize Samples#1](~/add/codesnippet/csharp/m-microsoft.sqlserver.se_1_1.cs)]\n [!code-vb[DataWorks IBinarySerialize Samples#1](~/add/codesnippet/visualbasic/m-microsoft.sqlserver.se_1_1.vb)]"
  syntax:
    content: public void Read (System.IO.BinaryReader r);
    parameters:
    - id: r
      type: System.IO.BinaryReader
      description: "Il <xref:System.IO.BinaryReader>flusso da cui viene deserializzato l&quot;oggetto.</xref:System.IO.BinaryReader>"
  overload: Microsoft.SqlServer.Server.IBinarySerialize.Read*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)
  id: Write(System.IO.BinaryWriter)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  langs:
  - csharp
  name: Write(BinaryWriter)
  nameWithType: IBinarySerialize.Write(BinaryWriter)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Write(BinaryWriter)
  type: Method
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "Converte un tipo definito dall&quot;utente (UDT) o un&quot;aggregazione definita dall&quot;utente in formato binario, in modo che può essere resa persistente."
  remarks: "Scrivere informazioni sufficienti per il flusso binario per consentire il <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>metodo per ricostituire l&quot;UDT o l&quot;aggregazione definita dall&quot;utente.</xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A>"
  example:
  - "The following example shows the implementation of the Writemethod of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format. The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.  \n  \n [!code-cs[DataWorks IBinarySerialize Samples#2](~/add/codesnippet/csharp/m-microsoft.sqlserver.se_0_1.cs)]\n [!code-vb[DataWorks IBinarySerialize Samples#2](~/add/codesnippet/visualbasic/m-microsoft.sqlserver.se_0_1.vb)]"
  syntax:
    content: public void Write (System.IO.BinaryWriter w);
    parameters:
    - id: w
      type: System.IO.BinaryWriter
      description: "Il <xref:System.IO.BinaryWriter>flusso nel quale viene serializzato il tipo definito dall&quot;utente o l&quot;aggregazione definita dall&quot;utente.</xref:System.IO.BinaryWriter>"
  overload: Microsoft.SqlServer.Server.IBinarySerialize.Write*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Read(BinaryReader)
  nameWithType: IBinarySerialize.Read(BinaryReader)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Read(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Write(BinaryWriter)
  nameWithType: IBinarySerialize.Write(BinaryWriter)
  fullName: Microsoft.SqlServer.Server.IBinarySerialize.Write(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Read*
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Read
  nameWithType: IBinarySerialize.Read
- uid: Microsoft.SqlServer.Server.IBinarySerialize.Write*
  parent: Microsoft.SqlServer.Server.IBinarySerialize
  isExternal: false
  name: Write
  nameWithType: IBinarySerialize.Write
