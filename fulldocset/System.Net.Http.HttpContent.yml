### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpContent
  id: HttpContent
  children:
  - System.Net.Http.HttpContent.#ctor
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.CreateContentReadStreamAsync
  - System.Net.Http.HttpContent.Dispose
  - System.Net.Http.HttpContent.Dispose(System.Boolean)
  - System.Net.Http.HttpContent.Headers
  - System.Net.Http.HttpContent.LoadIntoBufferAsync
  - System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  - System.Net.Http.HttpContent.ReadAsByteArrayAsync
  - System.Net.Http.HttpContent.ReadAsStreamAsync
  - System.Net.Http.HttpContent.ReadAsStringAsync
  - System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  langs:
  - csharp
  name: HttpContent
  nameWithType: HttpContent
  fullName: System.Net.Http.HttpContent
  type: Class
  summary: "Classe di base che rappresenta un corpo entità HTTP e le intestazioni del contenuto."
  syntax:
    content: 'public abstract class HttpContent : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: HttpContent()
  nameWithType: HttpContent.HttpContent()
  fullName: System.Net.Http.HttpContent.HttpContent()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Net.Http.HttpContent&quot;> </xref> classe."
  syntax:
    content: protected HttpContent ();
    parameters: []
  overload: System.Net.Http.HttpContent.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  id: CopyToAsync(System.IO.Stream)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CopyToAsync(Stream)
  nameWithType: HttpContent.CopyToAsync(Stream)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializza il contenuto HTTP in un flusso di byte e lo copia nell&quot;oggetto flusso fornito come il <code> stream </code> parametro."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che tutto il contenuto è stato scritto per l&quot;oggetto flusso passato come il `stream` parametro.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso di destinazione."
    return:
      type: System.Threading.Tasks.Task
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.HttpContent.CopyToAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  id: CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CopyToAsync(Stream,TransportContext)
  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializza il contenuto HTTP in un flusso di byte e lo copia nell&quot;oggetto flusso fornito come il <code> stream </code> parametro."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che tutto il contenuto è stato scritto per l&quot;oggetto flusso passato come il `stream` parametro.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso di destinazione."
    - id: context
      type: System.Net.TransportContext
      description: "Informazioni sul trasporto (channel binding token, ad esempio). Questo parametro può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.HttpContent.CopyToAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync
  id: CreateContentReadStreamAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: CreateContentReadStreamAsync()
  nameWithType: HttpContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializza il contenuto HTTP in un flusso di memoria come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che tutto il contenuto è stato scritto nel flusso di memoria.</xref:System.Threading.Tasks.Task%601>       Al termine dell&quot;operazione, il <xref:System.Threading.Tasks.Task%601.Result%2A>proprietà nell&quot;oggetto attività restituito contiene il flusso di memoria che rappresenta il contenuto HTTP.</xref:System.Threading.Tasks.Task%601.Result%2A> Il flusso restituito è quindi utilizzabile per leggere il contenuto utilizzando le API di flusso diversi.       Il metodo CreateContentReadStreamAsync memorizza nel buffer il contenuto da un flusso di memoria. Classi derivate possono eseguire l&quot;override di questo comportamento se esiste un modo migliore per recuperare il contenuto come flusso. Impossibile utilizzare un modo più efficiente metodo, ad esempio il wrapping di una proprietà di sola lettura, ad esempio, una matrice di byte o una stringa <xref:System.IO.MemoryStream>intorno al byte o una stringa.)</xref:System.IO.MemoryStream>"
  syntax:
    content: protected virtual System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.HttpContent.CreateContentReadStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Dispose
  id: Dispose
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpContent.Dispose()
  fullName: System.Net.Http.HttpContent.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Rilascia le risorse non gestite ed Elimina le risorse gestite utilizzate da di <xref href=&quot;System.Net.Http.HttpContent&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpContent.Dispose(Boolean)
  fullName: System.Net.Http.HttpContent.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Rilascia le risorse non gestite usate da di <xref href=&quot;System.Net.Http.HttpContent&quot;> </xref> e, facoltativamente, Elimina le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico `Dispose()` (metodo) e la <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A>richiama `Dispose` con `disposing` impostato su `false`. Quando il `disposing` parametro `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Net.Http.HttpContent>riferimenti.</xref:System.Net.Http.HttpContent></xref:System.Object.Finalize%2A> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Net.Http.HttpContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.Headers
  id: Headers
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: Headers
  nameWithType: HttpContent.Headers
  fullName: System.Net.Http.HttpContent.Headers
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Ottiene le intestazioni di contenuto HTTP come definito in RFC 2616."
  syntax:
    content: public System.Net.Http.Headers.HttpContentHeaders Headers { get; }
    return:
      type: System.Net.Http.Headers.HttpContentHeaders
      description: "Intestazioni di contenuto come definito in RFC 2616."
  overload: System.Net.Http.HttpContent.Headers*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync
  id: LoadIntoBufferAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: LoadIntoBufferAsync()
  nameWithType: HttpContent.LoadIntoBufferAsync()
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializza il contenuto HTTP in un buffer di memoria come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task>oggetto verrà completato dopo che tutto il contenuto è stato serializzato nel buffer di memoria.</xref:System.Threading.Tasks.Task>       Dopo il contenuto viene serializzato in un buffer di memoria, le chiamate a uno del <xref:System.Net.Http.HttpContent.CopyToAsync%2A>metodi copierà il contenuto del buffer di memoria nel flusso di destinazione.</xref:System.Net.Http.HttpContent.CopyToAsync%2A>"
  syntax:
    content: public System.Threading.Tasks.Task LoadIntoBufferAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  id: LoadIntoBufferAsync(System.Int64)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: LoadIntoBufferAsync(Int64)
  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializza il contenuto HTTP in un buffer di memoria come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task>oggetto verrà completato dopo che tutto il contenuto è stato serializzato nel buffer di memoria.</xref:System.Threading.Tasks.Task>       Dopo il contenuto viene serializzato in un buffer di memoria, le chiamate a uno del <xref:System.Net.Http.HttpContent.CopyToAsync%2A>metodi copierà il contenuto del buffer di memoria nel flusso di destinazione.</xref:System.Net.Http.HttpContent.CopyToAsync%2A>       Se il contenuto supera il valore passato il `maxBufferSize` parametro, viene generata un&quot;eccezione."
  syntax:
    content: public System.Threading.Tasks.Task LoadIntoBufferAsync (long maxBufferSize);
    parameters:
    - id: maxBufferSize
      type: System.Int64
      description: "La dimensione massima, in byte, del buffer da utilizzare."
    return:
      type: System.Threading.Tasks.Task
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync
  id: ReadAsByteArrayAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsByteArrayAsync()
  nameWithType: HttpContent.ReadAsByteArrayAsync()
  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializza il contenuto HTTP in una matrice di byte come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che tutto il contenuto è stato scritto come una matrice di byte.</xref:System.Threading.Tasks.Task%601>       Al termine dell&quot;operazione, il <xref:System.Threading.Tasks.Task%601.Result%2A>proprietà nell&quot;oggetto attività restituito contiene la matrice di byte con il contenuto HTTP.</xref:System.Threading.Tasks.Task%601.Result%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<byte[]> ReadAsByteArrayAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.HttpContent.ReadAsByteArrayAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync
  id: ReadAsStreamAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsStreamAsync()
  nameWithType: HttpContent.ReadAsStreamAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializza il contenuto HTTP e restituire un flusso che rappresenta il contenuto come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completata dopo tutte del flusso che rappresenta contenuto è stato letto.</xref:System.Threading.Tasks.Task%601>       Al termine dell&quot;operazione, il <xref:System.Threading.Tasks.Task%601.Result%2A>proprietà nell&quot;oggetto attività restituito contiene il flusso che rappresenta il contenuto HTTP.</xref:System.Threading.Tasks.Task%601.Result%2A> Il flusso restituito è quindi utilizzabile per leggere il contenuto utilizzando le API di flusso diversi."
  syntax:
    content: public System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.HttpContent.ReadAsStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.ReadAsStringAsync
  id: ReadAsStringAsync
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: ReadAsStringAsync()
  nameWithType: HttpContent.ReadAsStringAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializza il contenuto HTTP in una stringa come un&quot;operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che tutto il contenuto è stato scritto sotto forma di stringa.</xref:System.Threading.Tasks.Task%601>       Al termine dell&quot;operazione, il <xref:System.Threading.Tasks.Task%601.Result%2A>proprietà nell&quot;oggetto attività restituito contiene la stringa con il contenuto HTTP.</xref:System.Threading.Tasks.Task%601.Result%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<string> ReadAsStringAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.HttpContent.ReadAsStringAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  id: SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Serializza il contenuto HTTP in un flusso come operazione asincrona."
  remarks: "Questa operazione non verrà bloccata. L&quot;oggetto restituito <xref:System.Threading.Tasks.Task%601>oggetto verrà completato dopo che tutto il contenuto è stato serializzato nell&quot;oggetto flusso passato il `stream` parametro.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: protected abstract System.Threading.Tasks.Task SerializeToStreamAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Flusso di destinazione."
    - id: context
      type: System.Net.TransportContext
      description: "Informazioni sul trasporto (channel binding token, ad esempio). Questo parametro può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "Oggetto dell&quot;attività che rappresenta l&quot;operazione asincrona."
  overload: System.Net.Http.HttpContent.SerializeToStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  id: TryComputeLength(System.Int64@)
  parent: System.Net.Http.HttpContent
  langs:
  - csharp
  name: TryComputeLength(Int64)
  nameWithType: HttpContent.TryComputeLength(Int64)
  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Determina se il contenuto HTTP ha una lunghezza valida in byte."
  remarks: "Il metodo TryComputeLength consente un contenuto HTTP di calcolare la lunghezza del contenuto. Ciò è utile per i tipi di contenuto che sono in grado di calcolare facilmente la lunghezza del contenuto. Se calcolare la lunghezza del contenuto non è possibile o costoso (richiede il sistema per memorizzare nel buffer l&quot;intero contenuto in cui la serializzazione è dispendiosa o richiedere al sistema di allocare una quantità elevata di memoria), questo metodo può restituire `false`. Se questo metodo restituisce `false`, ciò implica che è necessario di trasferimento chunked o deve ottenere memorizzato nel buffer il contenuto prima di essere inviati al server."
  syntax:
    content: protected abstract bool TryComputeLength (out long length);
    parameters:
    - id: length
      type: System.Int64
      description: "La lunghezza in byte del contenuto HTTP."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> length </code> è una lunghezza valida; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Http.HttpContent.TryComputeLength*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Http.HttpContent.#ctor
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: HttpContent()
  nameWithType: HttpContent.HttpContent()
  fullName: System.Net.Http.HttpContent.HttpContent()
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync(Stream)
  nameWithType: HttpContent.CopyToAsync(Stream)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync(Stream,TransportContext)
  nameWithType: HttpContent.CopyToAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.CopyToAsync(Stream,TransportContext)
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CreateContentReadStreamAsync()
  nameWithType: HttpContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.IO.Stream>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.Dispose
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose()
  nameWithType: HttpContent.Dispose()
  fullName: System.Net.Http.HttpContent.Dispose()
- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpContent.Dispose(Boolean)
  fullName: System.Net.Http.HttpContent.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpContent.Headers
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Headers
  nameWithType: HttpContent.Headers
  fullName: System.Net.Http.HttpContent.Headers
- uid: System.Net.Http.Headers.HttpContentHeaders
  parent: System.Net.Http.Headers
  isExternal: false
  name: HttpContentHeaders
  nameWithType: HttpContentHeaders
  fullName: System.Net.Http.Headers.HttpContentHeaders
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync()
  nameWithType: HttpContent.LoadIntoBufferAsync()
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync(Int64)
  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)
  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsByteArrayAsync()
  nameWithType: HttpContent.ReadAsByteArrayAsync()
  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()
- uid: System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Byte>
  nameWithType: Task<Byte>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Byte[]>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStreamAsync()
  nameWithType: HttpContent.ReadAsStreamAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()
- uid: System.Net.Http.HttpContent.ReadAsStringAsync
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStringAsync()
  nameWithType: HttpContent.ReadAsStringAsync()
  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: HttpContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(Stream,TransportContext)
- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: TryComputeLength(Int64)
  nameWithType: HttpContent.TryComputeLength(Int64)
  fullName: System.Net.Http.HttpContent.TryComputeLength(Int64)
- uid: System.Net.Http.HttpContent.#ctor*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: HttpContent
  nameWithType: HttpContent.HttpContent
- uid: System.Net.Http.HttpContent.CopyToAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CopyToAsync
  nameWithType: HttpContent.CopyToAsync
- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: CreateContentReadStreamAsync
  nameWithType: HttpContent.CreateContentReadStreamAsync
- uid: System.Net.Http.HttpContent.Dispose*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Dispose
  nameWithType: HttpContent.Dispose
- uid: System.Net.Http.HttpContent.Headers*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: Headers
  nameWithType: HttpContent.Headers
- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: LoadIntoBufferAsync
  nameWithType: HttpContent.LoadIntoBufferAsync
- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsByteArrayAsync
  nameWithType: HttpContent.ReadAsByteArrayAsync
- uid: System.Net.Http.HttpContent.ReadAsStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStreamAsync
  nameWithType: HttpContent.ReadAsStreamAsync
- uid: System.Net.Http.HttpContent.ReadAsStringAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: ReadAsStringAsync
  nameWithType: HttpContent.ReadAsStringAsync
- uid: System.Net.Http.HttpContent.SerializeToStreamAsync*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: SerializeToStreamAsync
  nameWithType: HttpContent.SerializeToStreamAsync
- uid: System.Net.Http.HttpContent.TryComputeLength*
  parent: System.Net.Http.HttpContent
  isExternal: false
  name: TryComputeLength
  nameWithType: HttpContent.TryComputeLength
