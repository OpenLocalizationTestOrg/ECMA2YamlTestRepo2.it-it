### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement
  id: ReliableSessionBindingElement
  children:
  - System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor
  - System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor(System.Boolean)
  - System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval
  - System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)
  - System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)
  - System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)
  - System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)
  - System.ServiceModel.Channels.ReliableSessionBindingElement.Clone
  - System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled
  - System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)
  - System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout
  - System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels
  - System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount
  - System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize
  - System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered
  - System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion
  - System.ServiceModel.Channels.ReliableSessionBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)
  langs:
  - csharp
  name: ReliableSessionBindingElement
  nameWithType: ReliableSessionBindingElement
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement
  type: Class
  summary: "Rappresenta l&quot;elemento di associazione che può produrre l&quot;invio e ricezione canali necessari per una sessione affidabile tra endpoint."
  remarks: "Fornisce le sessioni e, facoltativamente, fornisce il recapito ordinato dei messaggi. Questa sessione implementata può attraversare intermediari SOAP e di trasporto.       Ogni elemento di associazione rappresenta una fase di elaborazione durante l&quot;invio o ricezione di messaggi. In fase di esecuzione, gli elementi di associazione creano le channel factory e i listener necessari per compilare stack di canali in uscita e in ingresso necessarie per inviare e ricevere messaggi. ReliableSessionBindingElement fornisce un livello facoltativo nello stack che può stabilire una sessione affidabile tra endpoint e configurare il comportamento di questa sessione.       ReliableSessionBindingElement viene fornita nelle associazioni standard nella tabella seguente.      | Associazione | Predefinito |   |-------------|-------------|   | <xref:System.ServiceModel.NetTcpBinding>| Off |   | <xref:System.ServiceModel.WSHttpBinding>| Off |   | <xref:System.ServiceModel.WSDualHttpBinding>| In (obbligatorio) |</xref:System.ServiceModel.WSDualHttpBinding> </xref:System.ServiceModel.WSHttpBinding> </xref:System.ServiceModel.NetTcpBinding>"
  example:
  - "The ReliableSessionBindingElement can be added to any custom binding. This is done using the following configuration elements.  \n  \n```  \n<bindings>  \n    <customBinding>  \n        <binding configurationName=”ReliabilityHTTP”>  \n            <reliableSession/>  \n        </binding>  \n    </customBinding>  \n</bindings>  \n```  \n  \n The following sample code demonstrates how to use ReliableSessionBindingElement in code.  \n  \n [!code-vb[S_Imperative#1](~/add/codesnippet/visualbasic/t-system.servicemodel.ch_0_1.vb)]\n [!code-cs[S_Imperative#1](~/add/codesnippet/csharp/t-system.servicemodel.ch_0_1.cs)]"
  syntax:
    content: 'public sealed class ReliableSessionBindingElement : System.ServiceModel.Channels.BindingElement, System.ServiceModel.Description.IPolicyExportExtension'
  inheritance:
  - System.ServiceModel.Channels.BindingElement
  implements:
  - System.ServiceModel.Description.IPolicyExportExtension
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: ReliableSessionBindingElement()
  nameWithType: ReliableSessionBindingElement.ReliableSessionBindingElement()
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableSessionBindingElement()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.ServiceModel.Channels.ReliableSessionBindingElement&quot;> </xref> classe."
  syntax:
    content: public ReliableSessionBindingElement ();
    parameters: []
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: ReliableSessionBindingElement(Boolean)
  nameWithType: ReliableSessionBindingElement.ReliableSessionBindingElement(Boolean)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableSessionBindingElement(Boolean)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.ServiceModel.Channels.ReliableSessionBindingElement&quot;> </xref> classe che specifica se il recapito dei messaggi deve rispettare l&quot;ordine in cui vengono inviati i messaggi."
  syntax:
    content: public ReliableSessionBindingElement (bool ordered);
    parameters:
    - id: ordered
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se i messaggi devono essere recapitati nell&quot;ordine in cui vengono inviati; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval
  id: AcknowledgementInterval
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: AcknowledgementInterval
  nameWithType: ReliableSessionBindingElement.AcknowledgementInterval
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Ottiene o imposta l&quot;intervallo di tempo che una destinazione attende prima di inviare un acknowledgment all&quot;origine del messaggio sui canali affidabili creati dalla factory."
  remarks: "La destinazione che riceve i messaggi su un canale affidabile Raggruppa gli acknowledgment relativi questi messaggi in un singolo messaggio per ridurre il traffico di rete e per aumentare la densità di informazioni sui messaggi. Raggruppamento offre una maggiore scalabilità man mano che aumenta il traffico. Non tenta di inviare un riconoscimento per ogni messaggio riceve appena possibile, ma attende invece un intervallo di tempo, raggruppa gli acknowledgment arrivati durante questo intervallo e li invia tutti insieme. Il primo messaggio ricevuto è l&quot;eccezione. viene confermato non appena viene recapitato. Inoltre, se si utilizzano sessioni affidabili con singole connessioni HTTP, come accade ad esempio con il <xref:System.ServiceModel.WSHttpBinding>ma non <xref:System.ServiceModel.WSDualHttpBinding>, questa impostazione non viene utilizzata.</xref:System.ServiceModel.WSDualHttpBinding> </xref:System.ServiceModel.WSHttpBinding>       Il valore impostato con la proprietà AcknowledgementInterval è un&quot;indicazione per l&quot;infrastruttura e non un limite."
  syntax:
    content: public TimeSpan AcknowledgementInterval { get; set; }
    return:
      type: System.TimeSpan
      description: "Il <xref:System.TimeSpan>che specifica l&quot;intervallo di tempo che un servizio attende fino a quando invii un acknowledgment all&quot;origine del messaggio.</xref:System.TimeSpan> Il valore predefinito è 2 secondi."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il valore impostato è minore o uguale a zero."
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)
  id: BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: BuildChannelFactory(BindingContext)
  nameWithType: ReliableSessionBindingElement.BuildChannelFactory(BindingContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory(BindingContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  syntax:
    content: public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel> (System.ServiceModel.Channels.BindingContext context);
    parameters:
    - id: context
      type: System.ServiceModel.Channels.BindingContext
      description: "Da aggiungere."
    return:
      type: System.ServiceModel.Channels.IChannelFactory{TChannel}
      description: "Da aggiungere."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory<TChannel>*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)
  id: BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: BuildChannelListener(BindingContext)
  nameWithType: ReliableSessionBindingElement.BuildChannelListener(BindingContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener(BindingContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  syntax:
    content: 'public override System.ServiceModel.Channels.IChannelListener<TChannel> BuildChannelListener<TChannel> (System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;'
    parameters:
    - id: context
      type: System.ServiceModel.Channels.BindingContext
      description: "Da aggiungere."
    return:
      type: System.ServiceModel.Channels.IChannelListener`1
      description: "Da aggiungere."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener<TChannel>*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)
  id: CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: CanBuildChannelFactory(BindingContext)
  nameWithType: ReliableSessionBindingElement.CanBuildChannelFactory(BindingContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory(BindingContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  syntax:
    content: public override bool CanBuildChannelFactory<TChannel> (System.ServiceModel.Channels.BindingContext context);
    parameters:
    - id: context
      type: System.ServiceModel.Channels.BindingContext
      description: "Da aggiungere."
    return:
      type: System.Boolean
      description: "Da aggiungere."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory<TChannel>*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)
  id: CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: CanBuildChannelListener(BindingContext)
  nameWithType: ReliableSessionBindingElement.CanBuildChannelListener(BindingContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener(BindingContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  syntax:
    content: 'public override bool CanBuildChannelListener<TChannel> (System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;'
    parameters:
    - id: context
      type: System.ServiceModel.Channels.BindingContext
      description: "Da aggiungere."
    return:
      type: System.Boolean
      description: "Da aggiungere."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener<TChannel>*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone
  id: Clone
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: Clone()
  nameWithType: ReliableSessionBindingElement.Clone()
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Crea una copia dell&quot;elemento di associazione di sessione affidabile corrente."
  syntax:
    content: public override System.ServiceModel.Channels.BindingElement Clone ();
    parameters: []
    return:
      type: System.ServiceModel.Channels.BindingElement
      description: "Oggetto <xref:System.ServiceModel.Channels.BindingElement>che è un clone dell&quot;elemento di associazione corrente.</xref:System.ServiceModel.Channels.BindingElement>"
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled
  id: FlowControlEnabled
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: FlowControlEnabled
  nameWithType: ReliableSessionBindingElement.FlowControlEnabled
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Ottiene o imposta un valore che indica se la sessione affidabile è abilitato il controllo di flusso."
  remarks: "Controllo di flusso è un meccanismo implementato dalle sessioni affidabili per garantire che gli utenti non inviare più messaggi di quanti in grado di gestire un ricevitore. Ricevitori dispone di un buffer dei messaggi che viene utilizzato per gestire i picchi di messaggio e i messaggi in ordine. I destinatari comunicano ai mittenti la quantità di spazio che rimane in questo buffer in ogni acknowledgment. I mittenti possono utilizzare queste informazioni per interrompere l&quot;invio di nuovi messaggi ogni volta che il destinatario non dispone di buffer spazio a sinistra."
  syntax:
    content: public bool FlowControlEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la sessione affidabile è abilitato; il controllo di flusso in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)
  id: GetProperty``1(System.ServiceModel.Channels.BindingContext)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: GetProperty(BindingContext)
  nameWithType: ReliableSessionBindingElement.GetProperty(BindingContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty(BindingContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  syntax:
    content: 'public override T GetProperty<T> (System.ServiceModel.Channels.BindingContext context) where T : class;'
    parameters:
    - id: context
      type: System.ServiceModel.Channels.BindingContext
      description: "Da aggiungere."
    return:
      type: T
      description: "Da aggiungere."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty<T>*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout
  id: InactivityTimeout
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: InactivityTimeout
  nameWithType: ReliableSessionBindingElement.InactivityTimeout
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Ottiene o imposta un intervallo di tempo che un servizio può rimanere inattivo prima della chiusura."
  remarks: "Attività in un canale viene definita come ricezione di un messaggio di applicazione o dell&quot;infrastruttura. Il parametro di timeout di inattività controlla la quantità massima di tempo per mantenere attiva una sessione inattiva. Se più InactivityTimeout intervallo di tempo con alcuna attività, la sessione viene interrotta dall&quot;infrastruttura e il canale genera un errore. La sessione affidabile viene eliminata in modo unilaterale.       Se l&quot;applicazione di invio non ha messaggi da inviare quindi la sessione affidabile in genere non viene interrotta a causa di inattività; invece un meccanismo keep-alive mantiene la sessione attiva per un periodo illimitato. Si noti che il dispatcher può comunque interrompere la sessione affidabile se i messaggi dell&quot;applicazione non vengono inviati o ricevuti. Pertanto, il timeout di inattività scade in genere se le condizioni della rete sono tali che non vengono ricevuti messaggi o se si verifica un errore nel mittente."
  syntax:
    content: public TimeSpan InactivityTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "Il <xref:System.TimeSpan>che specifica l&quot;intervallo di tempo che un servizio può rimanere inattivo prima della chiusura.</xref:System.TimeSpan> Il valore predefinito è 10 minuti."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il valore impostato è minore o uguale a zero o maggiore di uno <xref:System.Int32.MaxValue>o <xref:System.TimeSpan.MaxValue>.</xref:System.TimeSpan.MaxValue> </xref:System.Int32.MaxValue>"
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels
  id: MaxPendingChannels
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: MaxPendingChannels
  nameWithType: ReliableSessionBindingElement.MaxPendingChannels
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Ottiene o imposta il numero massimo di canali che possono essere in sospeso durante la sessione affidabile."
  remarks: "I canali sono in sospeso quando attendono di essere accettati. Una volta raggiunto tale limite, nessun canale vengono creato e impostato modalità sospesa finché questo numero non diminuisce (accettando i canali in sospeso). Si tratta di un limite per ogni listener.       Quando viene raggiunta la soglia e un&quot;applicazione remota tenta di stabilire una nuova sessione affidabile, la richiesta è negata e l&quot;operazione di apertura che produce un errore di richiesta."
  syntax:
    content: public int MaxPendingChannels { get; set; }
    return:
      type: System.Int32
      description: "Il numero massimo di canali che possono essere in sospeso. Il valore predefinito è 4."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il valore impostato è minore o uguale a zero o maggiore di 16384."
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount
  id: MaxRetryCount
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: MaxRetryCount
  nameWithType: ReliableSessionBindingElement.MaxRetryCount
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Ottiene o imposta il numero massimo di volte in cui un messaggio di prova devono essere trasferiti durante la sessione affidabile."
  remarks: "Un messaggio è considerato trasferito se il recapito al destinatario è stato riconosciuto dal destinatario.       Se un riconoscimento non è stato ricevuto entro un determinato periodo di tempo per un messaggio che è stato trasmesso, l&quot;infrastruttura lo ritrasmette automaticamente. L&quot;infrastruttura tenta di inviare il messaggio al massimo un numero MaxRetryCount di volte. Non riceve un riconoscimento prima che venga raggiunto questo limite viene considerata un errore di comunicazione irreversibile e causa la generazione dell&quot;evento di errore del canale.       L&quot;infrastruttura Usa un algoritmo di backoff esponenziale per determinare quando ritrasmettere, in base a un tempo di round trip medio calcolato. Il tempo di riesecuzione iniziale viene calcolato in base all&quot;ora di round trip misurato per stabilire la sessione. L&quot;algoritmo di ritrasmissione raddoppia il ritardo con ogni tentativo, determinando di circa 8,5 minuti tra il primo tentativo di trasmissione e l&quot;ultimo tentativo di ritrasmissione. L&quot;ora del primo tentativo di ritrasmissione viene regolato in base al tempo di andata e ritorno calcolato e l&quot;adattamento temporale richiesto da tali tentativi varia di conseguenza. In questo modo il tempo di ritrasmissione di adattarsi dinamicamente alle mutevoli condizioni della rete."
  syntax:
    content: public int MaxRetryCount { get; set; }
    return:
      type: System.Int32
      description: "Il numero massimo di volte in cui un messaggio di prova venga inviato nuovamente. Il valore minimo è 1. il valore massimo è <xref:System.Int32>; e il valore predefinito è 8.</xref:System.Int32>"
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il valore impostato è minore o uguale a zero."
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize
  id: MaxTransferWindowSize
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: MaxTransferWindowSize
  nameWithType: ReliableSessionBindingElement.MaxTransferWindowSize
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Ottiene o imposta il numero massimo di messaggi che possono essere presenti nel buffer di invio o il buffer di ricezione."
  remarks: "Il valore della proprietà MaxTransferWindowSize impostare il mittente e destinatario. Questo valore è incluso nei criteri di associazione del file WSDL, se si utilizza il [strumento ServiceModel Metadata Utility Tool (Svcutil.exe)](~/add/includes/ajax-current-ext-md.md) per costruire il client, avrà lo stesso valore. In caso contrario questo valore è corrisponderà a quello impostato nel client.       Quando viene raggiunto questo limite nel mittente, eventuali chiamate aggiuntive da inviare vengono bloccate. Quando viene raggiunto questo limite nel destinatario, non sono accettati i nuovi messaggi che arrivano sul canale sottostante.       Una sessione affidabile utilizza un protocollo di windowing per migliorare l&quot;utilizzo della rete. La quantità di buffer richiesto viene derivata direttamente dalla dimensione della finestra di trasmissione. Durante l&quot;ottimizzazione di questo valore, si noti che la finestra di trasmissione ottimale è correlata a larghezza di banda e la latenza in modo semplice. La dimensione massima ideale della finestra è la larghezza di banda moltiplicata per la latenza. Qualsiasi valore inferiore determina minore utilizzo della rete di 100%; qualsiasi valore superiore è determina semplicemente uno spreco di spazio."
  syntax:
    content: public int MaxTransferWindowSize { get; set; }
    return:
      type: System.Int32
      description: "Il numero massimo di messaggi che possono essere memorizzati nel buffer. Il valore minimo è 1. il valore massimo è 4096; e il valore predefinito è 32."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Il valore impostato è minore o uguale a uno o maggiore di 4096."
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered
  id: Ordered
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: Ordered
  nameWithType: ReliableSessionBindingElement.Ordered
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Ottiene o imposta un valore che indica se il recapito dei messaggi deve rispettare l&quot;ordine in cui vengono inviati i messaggi."
  remarks: "Per ottenere i messaggi inviati in ordine, è inoltre necessario impostare <xref:System.ServiceModel.ConcurrencyMode>per <xref:System.ServiceModel.ConcurrencyMode>.</xref:System.ServiceModel.ConcurrencyMode> </xref:System.ServiceModel.ConcurrencyMode>"
  syntax:
    content: public bool Ordered { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se i messaggi devono essere recapitati nell&quot;ordine in cui vengono inviati; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion
  id: ReliableMessagingVersion
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: ReliableMessagingVersion
  nameWithType: ReliableSessionBindingElement.ReliableMessagingVersion
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Ottiene o imposta la versione di WS-ReliableMessaging specificata dall&quot;elemento di associazione."
  remarks: 'Esistono attualmente due versioni del protocollo WS-ReliableMessaging supportate da [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]: WS-ReliableMessaging&1;.1 e WS-ReliableMessagingFebruary2005. La versione predefinita è WS-ReliableMessagingFebruary2005.'
  syntax:
    content: public System.ServiceModel.ReliableMessagingVersion ReliableMessagingVersion { get; set; }
    return:
      type: System.ServiceModel.ReliableMessagingVersion
      description: "Istanza derivata da <xref href=&quot;System.ServiceModel.ReliableMessagingVersion&quot;> </xref> che rappresenta la versione del protocollo WS-ReliableMessaging utilizzato dall&quot;elemento di configurazione."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)
  id: System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)
  isEii: true
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  langs:
  - csharp
  name: System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)
  nameWithType: ReliableSessionBindingElement.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Channels
  summary: "Esegue il mapping delle informazioni contenute nell&quot;elemento di associazione di sessione affidabile negli elementi WSDL che consentono a un endpoint remoto accedere al servizio con una sessione affidabile."
  syntax:
    content: void IPolicyExportExtension.ExportPolicy (System.ServiceModel.Description.MetadataExporter exporter, System.ServiceModel.Description.PolicyConversionContext context);
    parameters:
    - id: exporter
      type: System.ServiceModel.Description.MetadataExporter
      description: "Il <xref href=&quot;System.ServiceModel.Description.MetadataExporter&quot;> </xref> che esporta le informazioni di associazione nell&quot;elemento di associazione di sessione affidabile negli elementi WSDL."
    - id: context
      type: System.ServiceModel.Description.PolicyConversionContext
      description: "Il <xref href=&quot;System.ServiceModel.Description.PolicyConversionContext&quot;> </xref> che fornisce il mapping tra gli elementi WSDL esportati alla descrizione dell&quot;endpoint."
  overload: System.ServiceModel.Channels.ReliableSessionBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Channels.BindingElement
  isExternal: false
  name: System.ServiceModel.Channels.BindingElement
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: ReliableSessionBindingElement()
  nameWithType: ReliableSessionBindingElement.ReliableSessionBindingElement()
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableSessionBindingElement()
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor(System.Boolean)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: ReliableSessionBindingElement(Boolean)
  nameWithType: ReliableSessionBindingElement.ReliableSessionBindingElement(Boolean)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableSessionBindingElement(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: AcknowledgementInterval
  nameWithType: ReliableSessionBindingElement.AcknowledgementInterval
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: BuildChannelFactory(BindingContext)
  nameWithType: ReliableSessionBindingElement.BuildChannelFactory(BindingContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory(BindingContext)
- uid: System.ServiceModel.Channels.IChannelFactory{TChannel}
  parent: System.ServiceModel.Channels
  isExternal: true
  name: IChannelFactory<TChannel>
  nameWithType: IChannelFactory<TChannel>
  fullName: System.ServiceModel.Channels.IChannelFactory<TChannel>
  spec.csharp:
  - uid: System.ServiceModel.Channels.IChannelFactory`1
    name: IChannelFactory
    nameWithType: IChannelFactory
    fullName: IChannelFactory<TChannel>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TChannel
    name: TChannel
    nameWithType: TChannel
    fullName: TChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Channels.BindingContext
  parent: System.ServiceModel.Channels
  isExternal: true
  name: BindingContext
  nameWithType: BindingContext
  fullName: System.ServiceModel.Channels.BindingContext
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: BuildChannelListener(BindingContext)
  nameWithType: ReliableSessionBindingElement.BuildChannelListener(BindingContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener(BindingContext)
- uid: System.ServiceModel.Channels.IChannelListener`1
  parent: System.ServiceModel.Channels
  isExternal: false
  name: IChannelListener<TChannel>
  nameWithType: IChannelListener<TChannel>
  fullName: System.ServiceModel.Channels.IChannelListener<TChannel>
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: CanBuildChannelFactory(BindingContext)
  nameWithType: ReliableSessionBindingElement.CanBuildChannelFactory(BindingContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory(BindingContext)
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: CanBuildChannelListener(BindingContext)
  nameWithType: ReliableSessionBindingElement.CanBuildChannelListener(BindingContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener(BindingContext)
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: Clone()
  nameWithType: ReliableSessionBindingElement.Clone()
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone()
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: FlowControlEnabled
  nameWithType: ReliableSessionBindingElement.FlowControlEnabled
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: GetProperty(BindingContext)
  nameWithType: ReliableSessionBindingElement.GetProperty(BindingContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty(BindingContext)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: InactivityTimeout
  nameWithType: ReliableSessionBindingElement.InactivityTimeout
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: MaxPendingChannels
  nameWithType: ReliableSessionBindingElement.MaxPendingChannels
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: MaxRetryCount
  nameWithType: ReliableSessionBindingElement.MaxRetryCount
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: MaxTransferWindowSize
  nameWithType: ReliableSessionBindingElement.MaxTransferWindowSize
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: Ordered
  nameWithType: ReliableSessionBindingElement.Ordered
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: ReliableMessagingVersion
  nameWithType: ReliableSessionBindingElement.ReliableMessagingVersion
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion
- uid: System.ServiceModel.ReliableMessagingVersion
  parent: System.ServiceModel
  isExternal: false
  name: ReliableMessagingVersion
  nameWithType: ReliableMessagingVersion
  fullName: System.ServiceModel.ReliableMessagingVersion
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)
  nameWithType: ReliableSessionBindingElement.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter,PolicyConversionContext)
- uid: System.ServiceModel.Description.MetadataExporter
  parent: System.ServiceModel.Description
  isExternal: false
  name: MetadataExporter
  nameWithType: MetadataExporter
  fullName: System.ServiceModel.Description.MetadataExporter
- uid: System.ServiceModel.Description.PolicyConversionContext
  parent: System.ServiceModel.Description
  isExternal: false
  name: PolicyConversionContext
  nameWithType: PolicyConversionContext
  fullName: System.ServiceModel.Description.PolicyConversionContext
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.#ctor*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: ReliableSessionBindingElement
  nameWithType: ReliableSessionBindingElement.ReliableSessionBindingElement
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.AcknowledgementInterval*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: AcknowledgementInterval
  nameWithType: ReliableSessionBindingElement.AcknowledgementInterval
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelFactory<TChannel>*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: BuildChannelFactory<TChannel>
  nameWithType: ReliableSessionBindingElement.BuildChannelFactory<TChannel>
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.BuildChannelListener<TChannel>*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: BuildChannelListener<TChannel>
  nameWithType: ReliableSessionBindingElement.BuildChannelListener<TChannel>
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelFactory<TChannel>*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: CanBuildChannelFactory<TChannel>
  nameWithType: ReliableSessionBindingElement.CanBuildChannelFactory<TChannel>
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.CanBuildChannelListener<TChannel>*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: CanBuildChannelListener<TChannel>
  nameWithType: ReliableSessionBindingElement.CanBuildChannelListener<TChannel>
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Clone*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: Clone
  nameWithType: ReliableSessionBindingElement.Clone
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.FlowControlEnabled*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: FlowControlEnabled
  nameWithType: ReliableSessionBindingElement.FlowControlEnabled
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.GetProperty<T>*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: GetProperty<T>
  nameWithType: ReliableSessionBindingElement.GetProperty<T>
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: InactivityTimeout
  nameWithType: ReliableSessionBindingElement.InactivityTimeout
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxPendingChannels*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: MaxPendingChannels
  nameWithType: ReliableSessionBindingElement.MaxPendingChannels
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxRetryCount*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: MaxRetryCount
  nameWithType: ReliableSessionBindingElement.MaxRetryCount
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.MaxTransferWindowSize*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: MaxTransferWindowSize
  nameWithType: ReliableSessionBindingElement.MaxTransferWindowSize
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: Ordered
  nameWithType: ReliableSessionBindingElement.Ordered
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.ReliableMessagingVersion*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: ReliableMessagingVersion
  nameWithType: ReliableSessionBindingElement.ReliableMessagingVersion
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy*
  parent: System.ServiceModel.Channels.ReliableSessionBindingElement
  isExternal: false
  name: System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy
  nameWithType: ReliableSessionBindingElement.System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy
