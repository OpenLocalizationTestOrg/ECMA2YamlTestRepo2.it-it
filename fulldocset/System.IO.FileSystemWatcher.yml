### YamlMime:ManagedReference
items:
- uid: System.IO.FileSystemWatcher
  id: FileSystemWatcher
  children:
  - System.IO.FileSystemWatcher.#ctor
  - System.IO.FileSystemWatcher.#ctor(System.String)
  - System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  - System.IO.FileSystemWatcher.BeginInit
  - System.IO.FileSystemWatcher.Changed
  - System.IO.FileSystemWatcher.Created
  - System.IO.FileSystemWatcher.Deleted
  - System.IO.FileSystemWatcher.Dispose(System.Boolean)
  - System.IO.FileSystemWatcher.EnableRaisingEvents
  - System.IO.FileSystemWatcher.EndInit
  - System.IO.FileSystemWatcher.Error
  - System.IO.FileSystemWatcher.Filter
  - System.IO.FileSystemWatcher.IncludeSubdirectories
  - System.IO.FileSystemWatcher.InternalBufferSize
  - System.IO.FileSystemWatcher.NotifyFilter
  - System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  - System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  - System.IO.FileSystemWatcher.Path
  - System.IO.FileSystemWatcher.Renamed
  - System.IO.FileSystemWatcher.Site
  - System.IO.FileSystemWatcher.SynchronizingObject
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  langs:
  - csharp
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher
  fullName: System.IO.FileSystemWatcher
  type: Class
  summary: "Ãˆ in attesa nel file System di modificare le notifiche e genera eventi quando una directory o un file in una directory, le modifiche.       Per esaminare il codice sorgente di .NET Framework per questo tipo, vedere il [origine riferimento](http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use FileSystemWatcher to watch for changes in a specified directory. You can watch for changes in files and subdirectories of the specified directory. You can create a component to watch files on a local computer, a network drive, or a remote computer.  \n  \n To watch for changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string (\"\") or use wildcards (\"*.\\*\"). To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name. For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"\\*.txt\".  \n  \n There are several types of changes you can watch for in a directory or file. For example, you can watch for changes in `Attributes`, the `LastWrite` date and time, or the `Size` of files or directories. This is done by setting the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to one of the <xref:System.IO.NotifyFilters> values. For more information on the type of changes you can watch, see <xref:System.IO.NotifyFilters>.  \n  \n You can watch for renaming, deletion, or creation of files or directories. For example, to watch for renaming of text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"*.txt\" and call the <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method with a <xref:System.IO.WatcherChangeTypes> specified for its parameter.  \n  \n The Windows operating system notifies your component of file changes in a buffer created by the FileSystemWatcher. If there are many changes in a short time, the buffer can overflow. This causes the component to lose track of changes in the directory, and it will only provide blanket notification. Increasing the size of the buffer with the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events. To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties so you can filter out unwanted change notifications.  \n  \n For a list of initial property values for an instance of FileSystemWatcher, see the <xref:System.IO.FileSystemWatcher.%23ctor%2A> constructor.  \n  \n Please note the following when using the FileSystemWatcher class.  \n  \n-   Hidden files are not ignored.  \n  \n-   In some systems, FileSystemWatcher reports changes to files using the short 8.3 file name format. For example, a change to  \"LongFileName.LongExtension\" could be reported as \"LongFil~.Lon\".  \n  \n-   This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md).  \n  \n-   The maximum size you can set for the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property for monitoring a directory over the network is 64 KB.  \n  \n> [!NOTE]\n>  Running FileSystemWatcher on Windows 98 is not supported.  \n  \n## Copying and moving folders  \n The operating system and FileSystemWatcher object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents. If you cut and paste a folder with files into a folder being watched, the FileSystemWatcher object reports only the folder as new, but not its contents because they are essentially only renamed.  \n  \n To be notified that the contents of folders have been moved or copied into a watched folder, provide <xref:System.IO.FileSystemWatcher.OnChanged%2A> and <xref:System.IO.FileSystemWatcher.OnRenamed%2A> event handler methods as suggested in the following table.  \n  \n|Event Handler|Events Handled|Performs|  \n|-------------------|--------------------|--------------|  \n|<xref:System.IO.FileSystemWatcher.OnChanged%2A>|<xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>|Report changes in file attributes, created files, and deleted files.|  \n|<xref:System.IO.FileSystemWatcher.OnRenamed%2A>|<xref:System.IO.FileSystemWatcher.Renamed>|List the old and new paths of renamed files and folders, expanding recursively if needed.|  \n  \n## Events and Buffer Sizes  \n Note that several factors can affect which file system change events are raised, as described by the following:  \n  \n-   Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by FileSystemWatcher.  \n  \n-   The FileSystemWatcher can watch disks as long as they are not switched or removed. The FileSystemWatcher does not raise events for CDs and DVDs, because time stamps and properties cannot change. Remote computers must have one of the required platforms installed for the component to function properly.  \n  \n-   If multiple FileSystemWatcher objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event. On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all FileSystemWatcher objects will raise the appropriate events.  \n  \n Note that a FileSystemWatcher may miss an event when the buffer size is exceeded. To avoid missing events, follow these guidelines:  \n  \n-   Increase the buffer size by setting the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property.  \n  \n-   Avoid watching files with long file names, because a long file name contributes to filling up the buffer. Consider renaming these files using shorter names.  \n  \n-   Keep your event handling code as short as possible."
  example:
  - "The following example creates a FileSystemWatcher to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/t-system.io.filesystemwa_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/t-system.io.filesystemwa_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/t-system.io.filesystemwa_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Changed")]

      [System.IO.IODescription("FileSystemWatcherDesc")]

      public class FileSystemWatcher : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor
  id: '#ctor'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher()
  nameWithType: FileSystemWatcher.FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> classe."
  remarks: "You cannot watch a remote computer that does not have Windows NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.  \n  \n The following table shows initial property values for an instance of <xref:System.IO.FileSystemWatcher>.  \n  \n|Property|Initial Value|  \n|--------------|-------------------|  \n|<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>|bitwise OR combination of `LastWrite`, `FileName`, and `DirectoryName`|  \n|<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>|`false`|  \n|<xref:System.IO.FileSystemWatcher.Filter%2A>|\"*.\\*\" (Watch all files.)|  \n|<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>|`false`|  \n|<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>|8192|  \n|<xref:System.IO.FileSystemWatcher.Path%2A>|empty string (\"\")|  \n  \n> [!NOTE]\n>  The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> object to watch the directory specified at run time. The <xref:System.IO.FileSystemWatcher> object watches for changes in `LastWrite` and `LastAccess` times, and for the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file displays to the console. When a file is renamed, the old and new paths display to the console.  \n  \n This example uses the <xref:System.Diagnostics> and <xref:System.IO> namespaces.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/m-system.io.filesystemwa_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/m-system.io.filesystemwa_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/m-system.io.filesystemwa_1.vb)]"
  syntax:
    content: public FileSystemWatcher ();
    parameters: []
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher(String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> classe, data la directory da monitorare."
  remarks: "> [!NOTE]> Il componente non controllerÃ  la directory specificata finchÃ© la <xref:System.IO.FileSystemWatcher.Path%2A>Ã¨ impostata, e <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>Ã¨ `true`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> </xref:System.IO.FileSystemWatcher.Path%2A>       Il componente puÃ² controllare i file nel computer personale, un&quot;unitÃ  di rete o un computer remoto.       Ãˆ possibile controllare un computer remoto che non dispone di Windows NT o Windows 2000. Ãˆ possibile controllare un computer remoto di Windows NT 4.0 da un computer Windows NT 4.0. Il <xref:System.IO.FileSystemWatcher.Filter%2A>proprietÃ  Ã¨ impostata per impostazione predefinita per il controllo di tutti i file.</xref:System.IO.FileSystemWatcher.Filter%2A>"
  syntax:
    content: public FileSystemWatcher (string path);
    parameters:
    - id: path
      type: System.String
      description: "La directory da monitorare, nella notazione standard o UNC Universal Naming Convention ()."
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> path </code> parametro Ã¨ una stringa vuota (&quot;&quot;).       - oppure - il percorso specificato mediante il <code> path </code> parametro non esiste."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>Ã¨ troppo lungo."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher(String,String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String,String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> classe, data la directory specificata e il tipo di file da monitorare."
  remarks: "> [!NOTE]> Il componente non controllerÃ  la directory specificata finchÃ© la <xref:System.IO.FileSystemWatcher.Path%2A>Ã¨ impostata, e <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>Ã¨ `true`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> </xref:System.IO.FileSystemWatcher.Path%2A>       Il componente puÃ² controllare i file nel computer personale, un&quot;unitÃ  di rete o un computer remoto.       Ãˆ possibile controllare un computer remoto che non dispone di Windows NT o Windows 2000. Ãˆ possibile controllare un computer remoto di Windows NT 4.0 da un computer Windows NT 4.0."
  syntax:
    content: public FileSystemWatcher (string path, string filter);
    parameters:
    - id: path
      type: System.String
      description: "La directory da monitorare, nella notazione standard o UNC Universal Naming Convention ()."
    - id: filter
      type: System.String
      description: "Il tipo di file da controllare. Ad esempio, &quot;*.txt&quot; Controlla le modifiche apportate a tutti i file di testo."
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>filter</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> path </code> parametro Ã¨ una stringa vuota (&quot;&quot;).       - oppure - il percorso specificato mediante il <code> path </code> parametro non esiste."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>Ã¨ troppo lungo."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.BeginInit
  id: BeginInit
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: BeginInit()
  nameWithType: FileSystemWatcher.BeginInit()
  fullName: System.IO.FileSystemWatcher.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Avvia l&quot;inizializzazione di un <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> utilizzato in un form o da un altro componente. L&quot;inizializzazione avviene in fase di esecuzione."
  remarks: "Il [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] ambiente di progettazione questo metodo per avviare l&quot;inizializzazione di un componente utilizzato in un form o da un altro componente. Il <xref:System.IO.FileSystemWatcher.EndInit%2A>metodo termina l&quot;inizializzazione.</xref:System.IO.FileSystemWatcher.EndInit%2A> Utilizzo di BeginInit e <xref:System.IO.FileSystemWatcher.EndInit%2A>metodi evita che il controllo venga utilizzato prima che il completamento dell&quot;inizializzazione.</xref:System.IO.FileSystemWatcher.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.IO.FileSystemWatcher.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Changed
  id: Changed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Changed
  nameWithType: FileSystemWatcher.Changed
  fullName: System.IO.FileSystemWatcher.Changed
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Si verifica quando un file o directory nella proprietÃ  <xref:System.IO.FileSystemWatcher.Path*>viene modificato.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "L&quot;evento Changed viene generato quando vengono apportate modifiche alle dimensioni, attributi di sistema, dell&quot;ultima scrittura ora, l&quot;ora dell&quot;ultimo accesso o le autorizzazioni di sicurezza di un file o directory nella directory da monitorare.      > [!NOTE] > Operazioni comuni di file system potrebbero generare piÃ¹ eventi. Ad esempio, quando un file viene spostato da una directory a un altro, molti <xref:System.IO.FileSystemWatcher.OnChanged%2A>e alcuni <xref:System.IO.FileSystemWatcher.OnCreated%2A>e <xref:System.IO.FileSystemWatcher.OnDeleted%2A>eventi potrebbero essere generati.</xref:System.IO.FileSystemWatcher.OnDeleted%2A> </xref:System.IO.FileSystemWatcher.OnCreated%2A> </xref:System.IO.FileSystemWatcher.OnChanged%2A> Lo spostamento di che un file Ã¨ un&quot;operazione complessa costituito da piÃ¹ semplici operazioni, generano piÃ¹ eventi. Analogamente, alcune applicazioni (ad esempio, il software antivirus) vengano generati gli eventi di sistema aggiuntive del file che vengono rilevati da <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher>       Utilizzare <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>per limitare il numero di notifiche generate quando questo evento viene gestito.</xref:System.IO.FileSystemWatcher.NotifyFilter%2A>      > [!NOTE] > Modificato l&quot;evento viene generato in modo imprevisto quando un file viene rinominato, ma non viene generato quando viene rinominata una directory. Per controllare la ridenominazione, utilizzare il <xref:System.IO.FileSystemWatcher.Renamed>evento.</xref:System.IO.FileSystemWatcher.Renamed>      > [!NOTE] > L&quot;ordine in cui l&quot;evento Changed viene generato in relazione a altra <xref:System.IO.FileSystemWatcher>eventi potrebbero cambiare quando il <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>proprietÃ  non Ã¨ `null`.</xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> </xref:System.IO.FileSystemWatcher>"
  example:
  - "The following example uses the Changed event to display the file path to the console whenever the watched file is changed.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_0_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_0_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_0_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Changed;
    return:
      type: System.IO.FileSystemEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Created
  id: Created
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Created
  nameWithType: FileSystemWatcher.Created
  fullName: System.IO.FileSystemWatcher.Created
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Si verifica quando un file o directory nella proprietÃ  <xref:System.IO.FileSystemWatcher.Path*>viene creato.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a Created event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a Created event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a Created event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.  \n  \n> [!NOTE]\n>  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.  \n  \n> [!NOTE]\n>  The order in which the Created event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.  \n  \n The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events."
  example:
  - "The following example uses the Created event to display the file path to the console whenever the watched file is created.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_3_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_3_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_3_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Created;
    return:
      type: System.IO.FileSystemEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Deleted
  id: Deleted
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Deleted
  nameWithType: FileSystemWatcher.Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Si verifica quando un file o directory nella proprietÃ  <xref:System.IO.FileSystemWatcher.Path*>viene eliminato.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a Deleted event would be raised by FileSystemWatcher1.  \n  \n> [!NOTE]\n>  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.  \n  \n> [!NOTE]\n>  The order in which the Deleted event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`."
  example:
  - "The following example uses the Deleted event to display the file path to the console whenever the watched file is deleted.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_1_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_1_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_1_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Deleted;
    return:
      type: System.IO.FileSystemEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FileSystemWatcher.Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Rilascia le risorse non gestite usate da di <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico <xref:System.ComponentModel.Component.Dispose%2A>metodo e <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> <xref:System.ComponentModel.Component.Dispose%2A>richiama il metodo Dispose protetto con il `disposing` parametro impostato su `true`.</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>richiama Dispose con `disposing` impostato su `false`.</xref:System.Object.Finalize%2A>       Quando il `disposing` parametro `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.IO.Compression.DeflateStream>riferimenti.</xref:System.IO.Compression.DeflateStream> Questo metodo richiama il <xref:System.ComponentModel.Component.Dispose%2A>metodo di ciascun oggetto cui viene fatto riferimento.</xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.IO.FileSystemWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  id: EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Ottiene o imposta un valore che indica se il componente Ã¨ abilitato."
  remarks: "Il componente non genera eventi a meno che non si imposta EnableRaisingEvents su `true`.      > [!NOTE] > Il componente non controllerÃ  la directory specificata finchÃ© la <xref:System.IO.FileSystemWatcher.Path%2A>proprietÃ  Ã¨ stata impostata ed EnableRaisingEvents Ã¨ `true`.</xref:System.IO.FileSystemWatcher.Path%2A>       Il <xref:System.IO.FileSystemWatcher.WaitForChanged%2A>metodo consente ai gestori di eventi da richiamare per rispondere alle modifiche al file anche se questa proprietÃ  Ã¨ impostata su `false`.</xref:System.IO.FileSystemWatcher.WaitForChanged%2A>"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_2_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_2_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_2_1.vb)]"
  syntax:
    content: public bool EnableRaisingEvents { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il componente Ã¨ abilitato. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito Ã¨ <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Se si utilizza il componente in una finestra di progettazione [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], il valore predefinito Ã¨ <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.EnableRaisingEvents*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Il <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> oggetto Ã¨ stato eliminato."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Il sistema operativo corrente non Ã¨ Microsoft Windows NT o versione successiva."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "La directory specificata nel <xref:System.IO.FileSystemWatcher.Path*>non Ã¨ stato trovato.</xref:System.IO.FileSystemWatcher.Path*>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.IO.FileSystemWatcher.Path*>non Ã¨ stato impostato o non Ã¨ valido.</xref:System.IO.FileSystemWatcher.Path*>"
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.EndInit
  id: EndInit
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: EndInit()
  nameWithType: FileSystemWatcher.EndInit()
  fullName: System.IO.FileSystemWatcher.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Termina l&quot;inizializzazione di un <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> utilizzato in un form o da un altro componente. L&quot;inizializzazione avviene in fase di esecuzione."
  remarks: "Il [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] ambiente di progettazione questo metodo per terminare l&quot;inizializzazione di un componente utilizzato in un form o da un altro componente. Il <xref:System.IO.FileSystemWatcher.BeginInit%2A>metodo avvia l&quot;inizializzazione.</xref:System.IO.FileSystemWatcher.BeginInit%2A> Utilizzo di <xref:System.IO.FileSystemWatcher.BeginInit%2A>EndInit metodi e impedisce il controllo venga utilizzato prima che il completamento dell&quot;inizializzazione.</xref:System.IO.FileSystemWatcher.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.IO.FileSystemWatcher.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Error
  id: Error
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Error
  nameWithType: FileSystemWatcher.Error
  fullName: System.IO.FileSystemWatcher.Error
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Si verifica quando l&quot;istanza di <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> non Ã¨ in grado di continuare il monitoraggio delle modifiche o quando causa l&quot;overflow del buffer interno."
  remarks: "Questo evento viene generato ogni volta che un elemento impedisce il <xref:System.IO.FileSystemWatcher>oggetto di monitoraggio delle modifiche.</xref:System.IO.FileSystemWatcher> Ad esempio, se l&quot;oggetto esegue il monitoraggio delle modifiche in una directory remota e viene persa la connessione a tale directory, viene generato l&quot;evento di errore.       Il sistema di notifica di modifiche al file, e tali modifiche vengono memorizzate in un buffer che il componente creato e passato alle API. Se si apportano numerose modifiche in breve tempo, puÃ² espandersi, il buffer. In questo modo il componente non terrÃ  traccia delle modifiche nella directory, ed esegue solo la notifica programmato. Aumento delle dimensioni del buffer Ã¨ costoso, perchÃ© proviene da non di paging della memoria che non puÃ² essere scambiata su disco, quindi tenere buffer quanto piÃ¹ breve possibile. Per evitare un overflow del buffer, utilizzare il <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.Filter%2A>, e <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>le notifiche di modifica di proprietÃ  da filtrare indesiderati.</xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.Filter%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>      > [!NOTE] > Operazioni comuni di file system potrebbero generare piÃ¹ eventi. Ad esempio, quando un file viene spostato da una directory a un altro, molti <xref:System.IO.FileSystemWatcher.OnChanged%2A>e alcuni <xref:System.IO.FileSystemWatcher.OnCreated%2A>e <xref:System.IO.FileSystemWatcher.OnDeleted%2A>eventi potrebbero essere generati.</xref:System.IO.FileSystemWatcher.OnDeleted%2A> </xref:System.IO.FileSystemWatcher.OnCreated%2A> </xref:System.IO.FileSystemWatcher.OnChanged%2A> Lo spostamento di che un file Ã¨ un&quot;operazione complessa costituito da piÃ¹ semplici operazioni, generano piÃ¹ eventi. Analogamente, alcune applicazioni (ad esempio, il software antivirus) vengano generati gli eventi di sistema aggiuntive del file che vengono rilevati da <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher>"
  syntax:
    content: public event System.IO.ErrorEventHandler Error;
    return:
      type: System.IO.ErrorEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Filter
  id: Filter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Filter
  nameWithType: FileSystemWatcher.Filter
  fullName: System.IO.FileSystemWatcher.Filter
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Ottiene o imposta la stringa di filtro utilizzata per determinare quali file vengono monitorati in una directory."
  remarks: "To watch changes in all files, set the Filter property to an empty string (\"\"). To watch a specific file, set the Filter property to the file name. For example, to watch for changes in the file MyDoc.txt, set the Filter property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in any text files, set the Filter property to \"*.txt\". Use of multiple filters such as \"\\*.txt&#124;\\*.doc\" is not supported.  \n  \n The Filter property can be changed after the <xref:System.IO.FileSystemWatcher> object has started receiving events.  \n  \n For more information about filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.  \n  \n Filter accepts wildcards for matching files, as shown in the following examples.  \n  \n|Filter string|Watches the following files|  \n|-------------------|---------------------------------|  \n|*.\\*|All files (default). An empty string (\"\") also watches all files.|  \n|*.txt|All files with a \"txt\" extension.|  \n|*recipe.doc|All files ending in \"recipe\" with a \"doc\" extension.|  \n|win*.xml|All files beginning with \"win\" with an \"xml\" extension.|  \n|Sales*200?.xls|Matches the following:<br /><br /> Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls<br /><br /> but does not match:<br /><br /> Sales Nov 1999.xls|  \n|MyReport.Doc|Watches only MyReport.doc|"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_3_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_3_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_3_1.vb)]"
  syntax:
    content: public string Filter { get; set; }
    return:
      type: System.String
      description: "La stringa di filtro. Il valore predefinito Ã¨ &quot;*. \\*&quot; (Controlla tutti i file)."
  overload: System.IO.FileSystemWatcher.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  id: IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Ottiene o imposta un valore che indica se le sottodirectory nel percorso specificato devono essere monitorate."
  remarks: "Impostare la proprietÃ  IncludeSubdirectories `true` quando si desidera controllare le notifiche di modifica per file e directory contenute all&quot;interno della directory specificata tramite la <xref:System.IO.FileSystemWatcher.Path%2A>proprietÃ  e nelle relative sottodirectory.</xref:System.IO.FileSystemWatcher.Path%2A> Imposta la proprietÃ  proprietÃ  IncludeSubdirectories `false` contribuisce a ridurre il numero di notifiche inviate al buffer interno. Per ulteriori informazioni sull&quot;applicazione di filtri alle notifiche, vedere il <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>e <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>proprietÃ .</xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>       Quando `true`, proprietÃ  IncludeSubdirectories Ã¨ ricorsiva in tutta la sottostruttura, non solo le directory figlio immediati. Il percorso relativo di un file o directory all&quot;interno della sottostruttura restituito nella <xref:System.IO.FileSystemEventArgs.Name%2A>proprietÃ  e <xref:System.IO.FileSystemEventArgs>la <xref:System.IO.RenamedEventArgs.OldName%2A>proprietÃ  di <xref:System.IO.RenamedEventArgs>, a seconda delle modifiche che si sta controllando for.</xref:System.IO.RenamedEventArgs> </xref:System.IO.RenamedEventArgs.OldName%2A> </xref:System.IO.FileSystemEventArgs> </xref:System.IO.FileSystemEventArgs.Name%2A> Ãˆ possibile ottenere il percorso completo della <xref:System.IO.FileSystemEventArgs.FullPath%2A>proprietÃ  e <xref:System.IO.FileSystemEventArgs>la <xref:System.IO.RenamedEventArgs.OldFullPath%2A>proprietÃ  di <xref:System.IO.RenamedEventArgs>, a seconda delle modifiche che si sta controllando for.</xref:System.IO.RenamedEventArgs> </xref:System.IO.RenamedEventArgs.OldFullPath%2A> </xref:System.IO.FileSystemEventArgs> </xref:System.IO.FileSystemEventArgs.FullPath%2A>       Se viene creata una directory nella sottostruttura della directory che si sta controllando e proprietÃ  IncludeSubdirectories `true`, tale directory verrÃ  creata automaticamente."
  syntax:
    content: public bool IncludeSubdirectories { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se si desidera monitorare le sottodirectory; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito Ã¨ <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.IncludeSubdirectories*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  id: InternalBufferSize
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Ottiene o imposta le dimensioni (in byte) del buffer interno."
  remarks: "Ãˆ possibile impostare il buffer a 4 KB o superiori, ma non deve superare i 64 KB. Se si tenta di impostare la proprietÃ  proprietÃ  InternalBufferSize inferiore a 4096 byte, il valore viene rimosso e la proprietÃ  proprietÃ  InternalBufferSize Ã¨ impostata su 4096 byte. Per prestazioni ottimali, utilizzare un multiplo di 4 KB nei computer basati su Intel.       Il sistema informa il componente di modifiche al file, e tali modifiche vengono memorizzate in un buffer creato e passato alle API il componente. Ogni evento puÃ² utilizzare fino a 16 byte di memoria, non comprensivo del nome di file. Se si apportano numerose modifiche in breve tempo, puÃ² espandersi, il buffer. In questo modo il componente non terrÃ  traccia delle modifiche nella directory, ed esegue solo la notifica programmato. PuÃ² impedire l&quot;aumento delle dimensioni del buffer degli eventi di modifica mancante file sistema. Tuttavia, l&quot;aumento delle dimensioni del buffer Ã¨ operazioni onerose, perchÃ© proviene dalla memoria non di paging che non Ã¨ possibile eseguire lo swapping su disco, Ã¨ consigliabile limitare al minimo il buffer. Per evitare un overflow del buffer, utilizzare il <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>e <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>le notifiche di modifica di proprietÃ  da filtrare indesiderati.</xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>"
  syntax:
    content: public int InternalBufferSize { get; set; }
    return:
      type: System.Int32
      description: "Dimensioni del buffer interno in byte. Il valore predefinito Ã¨ 8192 (8 KB)."
  overload: System.IO.FileSystemWatcher.InternalBufferSize*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.NotifyFilter
  id: NotifyFilter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Ottiene o imposta il tipo di modifiche da controllare."
  remarks: "Ãˆ possibile combinare i membri del <xref:System.IO.NotifyFilters>enumerazione per controllare piÃ¹ di un tipo di modifica alla volta.</xref:System.IO.NotifyFilters> Ad esempio, Ã¨ possibile controllare le modifiche nella dimensione di un file e le modifiche apportate il `LastWrite` ora. Questo genera un evento ogni volta che viene apportata una modifica nelle dimensioni file o cartella oppure una modifica nel `LastWrite` ora del file o della cartella.       Questo Ã¨ un modo per filtrare le notifiche non desiderate. Per ulteriori informazioni sull&quot;applicazione di filtri alle notifiche, vedere il <xref:System.IO.FileSystemWatcher.Filter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, e <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>proprietÃ .</xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> </xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.Filter%2A>"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_0_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_0_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_0_1.vb)]"
  syntax:
    content: public System.IO.NotifyFilters NotifyFilter { get; set; }
    return:
      type: System.IO.NotifyFilters
      description: "Uno del <xref href=&quot;System.IO.NotifyFilters&quot;> </xref> valori. Il valore predefinito Ã¨ la combinazione OR bit per bit di <xref uid=&quot;langword_csharp_LastWrite&quot; name=&quot;LastWrite&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_FileName&quot; name=&quot;FileName&quot; href=&quot;&quot;> </xref>, e <xref uid=&quot;langword_csharp_DirectoryName&quot; name=&quot;DirectoryName&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.NotifyFilter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il valore non Ã¨ una combinazione OR bit per bit valida di <xref href=&quot;System.IO.NotifyFilters&quot;> </xref> valori."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Il valore impostato non Ã¨ valido."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  id: OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnChanged(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Genera il <xref href=&quot;System.IO.FileSystemWatcher.Changed&quot;> </xref> evento."
  remarks: "OnChanged viene chiamato quando vengono apportate modifiche alle dimensioni, attributi di sistema, dell&quot;ultima scrittura ora, l&quot;ora dell&quot;ultimo accesso o le autorizzazioni di sicurezza di un file o directory nella directory da monitorare.       Utilizzare il <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>proprietÃ  per limitare il numero di eventi di eccezione generata quando il <xref:System.IO.FileSystemWatcher.Changed>viene gestito l&quot;evento.</xref:System.IO.FileSystemWatcher.Changed> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>       Il <xref:System.IO.FileSystemWatcher.OnCreated%2A>viene generato l&quot;evento non appena viene creato un file.</xref:System.IO.FileSystemWatcher.OnCreated%2A> Se un file viene copiato o essere trasferiti in una directory controllata, la <xref:System.IO.FileSystemWatcher.OnCreated%2A>evento verrÃ  generato immediatamente, seguito da uno o piÃ¹ eventi OnChanged.</xref:System.IO.FileSystemWatcher.OnCreated%2A>       Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per ulteriori informazioni, vedere [eventi](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnChanged (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "Oggetto <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.IO.FileSystemWatcher.OnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  id: OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnCreated(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Genera il <xref href=&quot;System.IO.FileSystemWatcher.Created&quot;> </xref> evento."
  remarks: "OnCreated is called when a file or directory is created in the directory being monitored.  \n  \n Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" and paste it into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised in FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised in FileSystemWatcher1.  \n  \n The OnCreated event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the OnCreated event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnCreated (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "Oggetto <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.IO.FileSystemWatcher.OnCreated*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  id: OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnDeleted(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Genera il <xref href=&quot;System.IO.FileSystemWatcher.Deleted&quot;> </xref> evento."
  remarks: "OnDeleted is called when a file or directory, within the directory being monitored, is deleted.  \n  \n Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnDeleted (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "Oggetto <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.IO.FileSystemWatcher.OnDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  id: OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnError(ErrorEventArgs)
  nameWithType: FileSystemWatcher.OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(ErrorEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Genera il <xref href=&quot;System.IO.FileSystemWatcher.Error&quot;> </xref> evento."
  remarks: "OnError viene chiamato quando si verifica un errore.       Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per ulteriori informazioni, vedere [eventi](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnError (System.IO.ErrorEventArgs e);
    parameters:
    - id: e
      type: System.IO.ErrorEventArgs
      description: "Un <xref href=&quot;System.IO.ErrorEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.IO.FileSystemWatcher.OnError*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  id: OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnRenamed(RenamedEventArgs)
  nameWithType: FileSystemWatcher.OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(RenamedEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Genera il <xref href=&quot;System.IO.FileSystemWatcher.Renamed&quot;> </xref> evento."
  remarks: "OnRenamed viene chiamato quando viene rinominato un file o directory all&quot;interno della directory da monitorare.       Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per ulteriori informazioni, vedere [eventi](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnRenamed (System.IO.RenamedEventArgs e);
    parameters:
    - id: e
      type: System.IO.RenamedEventArgs
      description: "Oggetto <xref href=&quot;System.IO.RenamedEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.IO.FileSystemWatcher.OnRenamed*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Path
  id: Path
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Path
  nameWithType: FileSystemWatcher.Path
  fullName: System.IO.FileSystemWatcher.Path
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Ottiene o imposta il percorso della directory da controllare."
  remarks: "This is a fully qualified path to a directory. If the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property is `true`, this directory is the root at which the system watches for changes; otherwise it is the only directory watched. To watch a specific file, set the Path property to the fully qualified, correct directory, and the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.  \n  \n The Path property supports Universal Naming Convention (UNC) paths.  \n  \n> [!NOTE]\n>  This property must be set before the component can watch for changes.  \n  \n When a directory is renamed, the <xref:System.IO.FileSystemWatcher> automatically reattaches itself to the newly renamed item. For example, if you set the Path property to \"C:\\My Documents\" and then manually rename the directory to \"C:\\Your Documents\", the component continues listening for change notifications on the newly renamed directory. However, when you ask for the Path property, it contains the old path. This happens because the component determines what directory watches based on the handle, rather than the name of the directory. Renaming does not affect the handle. So, if you destroy the component, and then recreate it without updating the Path property, your application will fail because the directory no longer exists."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_1_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_1_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_1_1.vb)]"
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "Percorso da monitorare. Il valore predefinito Ã¨ una stringa vuota (&quot;&quot;)."
  overload: System.IO.FileSystemWatcher.Path*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il percorso specificato non esiste o non Ã¨ stato trovato.       - oppure - il percorso specificato contiene caratteri jolly.       - oppure - il percorso specificato contiene caratteri di percorso non valido."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Renamed
  id: Renamed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Renamed
  nameWithType: FileSystemWatcher.Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Si verifica quando un file o directory nella proprietÃ  <xref:System.IO.FileSystemWatcher.Path*>viene rinominato.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "La ridenominazione della directory che si sta controllando non genererÃ  una notifica. Le notifiche vengono generate solo per le voci all&quot;interno della directory che si sta controllando."
  example:
  - "The following example uses the Renamed event to display the file path to the console whenever the watched file is renamed.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_2_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_2_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_2_1.vb)]"
  syntax:
    content: public event System.IO.RenamedEventHandler Renamed;
    return:
      type: System.IO.RenamedEventHandler
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Site
  id: Site
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Site
  nameWithType: FileSystemWatcher.Site
  fullName: System.IO.FileSystemWatcher.Site
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Ottiene o imposta un <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> per il <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref>."
  remarks: "Siti associano un <xref:System.ComponentModel.Component>per un <xref:System.ComponentModel.Design.IDesignerHost.Container%2A>e abilitare la comunicazione tra di essi, nonchÃ© fornire un modo per il contenitore gestire i relativi componenti.</xref:System.ComponentModel.Design.IDesignerHost.Container%2A> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref>."
  overload: System.IO.FileSystemWatcher.Site*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.SynchronizingObject
  id: SynchronizingObject
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
  fullName: System.IO.FileSystemWatcher.SynchronizingObject
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Ottiene o imposta l&quot;oggetto usato per effettuare il marshalling delle chiamate del gestore eventi generate in seguito a una modifica della directory."
  remarks: "Quando SynchronizingObject Ã¨ `null`, metodi che gestiscono il <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, e <xref:System.IO.FileSystemWatcher.Renamed>eventi vengono chiamati su un thread dal pool di thread del sistema.</xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed> Per ulteriori informazioni sui pool di thread del sistema, vedere <xref:System.Threading.ThreadPool>.</xref:System.Threading.ThreadPool>       Quando il <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, e <xref:System.IO.FileSystemWatcher.Renamed>vengono gestiti gli eventi da un componente di Windows Form visivo, ad esempio un <xref:System.Windows.Forms.Button>, accesso al componente tramite il pool di thread di sistema potrebbero non funzionare o generare un&quot;eccezione.</xref:System.Windows.Forms.Button> </xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed> Evitare questa situazione impostando SynchronizingObject a un componente di Windows Form, che chiama i metodi che gestiscono il <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, e <xref:System.IO.FileSystemWatcher.Renamed>gli eventi da chiamare sullo stesso thread in cui Ã¨ stato creato il componente.</xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed>       Se il <xref:System.IO.FileSystemWatcher>viene utilizzato all&quot;interno di [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] in una finestra di progettazione Windows Form, SynchronizingObject imposta automaticamente al controllo che contiene il <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher> </xref:System.IO.FileSystemWatcher> Ad esempio, se si inserisce un <xref:System.IO.FileSystemWatcher>in una finestra di progettazione Form1 (che eredita da <xref:System.Windows.Forms.Form>) la proprietÃ  SynchronizingObject di <xref:System.IO.FileSystemWatcher>Ã¨ impostato per l&quot;istanza di Form1.</xref:System.IO.FileSystemWatcher> </xref:System.Windows.Forms.Form> </xref:System.IO.FileSystemWatcher>"
  syntax:
    content: public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
    return:
      type: System.ComponentModel.ISynchronizeInvoke
      description: "Il <xref href=&quot;System.ComponentModel.ISynchronizeInvoke&quot;> </xref> che rappresenta l&quot;oggetto utilizzato per effettuare il marshalling delle chiamate del gestore eventi generate in seguito a una modifica della directory. Il valore predefinito Ã¨ <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.SynchronizingObject*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  id: WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: WaitForChanged(WatcherChangeTypes)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Metodo sincrono che restituisce una struttura contenente informazioni specifiche sulle modifica effettuata, dato il tipo di modifica che si desidera monitorare."
  remarks: "Questo metodo attende indefinitamente la prima modifica viene generato e quindi restituisce. CiÃ² Ã¨ simile all&quot;utilizzo WaitForChanged con il `timeout` parametro impostato su -1.      > [!NOTE] > Questo metodo consente a un gestore eventi da richiamare in modo che risponda se anche le modifiche di file di <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>Ã¨ impostata su `false`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>       In alcuni sistemi <xref:System.IO.FileSystemWatcher>segnala le modifiche apportate ai file utilizzando il formato del nome 8.3 file breve.</xref:System.IO.FileSystemWatcher> Ad esempio, potrebbe essere segnalata una modifica a &quot;Longfilename&quot; come &quot;LongFi ~. LON&quot;."
  syntax:
    content: public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType);
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "Il <xref href=&quot;System.IO.WatcherChangeTypes&quot;> </xref> da controllare."
    return:
      type: System.IO.WaitForChangedResult
      description: "Oggetto <xref href=&quot;System.IO.WaitForChangedResult&quot;> </xref> che contiene informazioni specifiche sulle modifica effettuata."
  overload: System.IO.FileSystemWatcher.WaitForChanged*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  id: WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: WaitForChanged(WatcherChangeTypes,Int32)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Metodo sincrono che restituisce una struttura contenente informazioni specifiche sulle modifica effettuata, dato il tipo di modifica che si desidera monitorare e il tempo (in millisecondi) di attesa prima del timeout."
  remarks: "Questo metodo attende fino a quando non viene apportata una modifica o Ã¨ scaduta. Il valore-1 per il `timeout` parametro indica un&quot;attesa indefinita.      > [!NOTE] > Questo metodo consente a un gestore eventi da richiamare in modo che risponda se anche le modifiche di file di <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>Ã¨ impostata su `false`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>       In alcuni sistemi <xref:System.IO.FileSystemWatcher>segnala le modifiche apportate ai file utilizzando il formato del nome 8.3 file breve.</xref:System.IO.FileSystemWatcher> Ad esempio, potrebbe essere segnalata una modifica a &quot;Longfilename&quot; come &quot;LongFi ~. LON&quot;."
  syntax:
    content: public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType, int timeout);
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "Il <xref href=&quot;System.IO.WatcherChangeTypes&quot;> </xref> da controllare."
    - id: timeout
      type: System.Int32
      description: "Il tempo (in millisecondi) di attesa prima del timeout."
    return:
      type: System.IO.WaitForChangedResult
      description: "Oggetto <xref href=&quot;System.IO.WaitForChangedResult&quot;> </xref> che contiene informazioni specifiche sulle modifica effettuata."
  overload: System.IO.FileSystemWatcher.WaitForChanged*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.IO.FileSystemWatcher.#ctor
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher()
  nameWithType: FileSystemWatcher.FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher(String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher(String,String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String,String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String,String)
- uid: System.IO.FileSystemWatcher.BeginInit
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: BeginInit()
  nameWithType: FileSystemWatcher.BeginInit()
  fullName: System.IO.FileSystemWatcher.BeginInit()
- uid: System.IO.FileSystemWatcher.Changed
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Changed
  nameWithType: FileSystemWatcher.Changed
  fullName: System.IO.FileSystemWatcher.Changed
- uid: System.IO.FileSystemEventHandler
  parent: System.IO
  isExternal: false
  name: FileSystemEventHandler
  nameWithType: FileSystemEventHandler
  fullName: System.IO.FileSystemEventHandler
- uid: System.IO.FileSystemWatcher.Created
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Created
  nameWithType: FileSystemWatcher.Created
  fullName: System.IO.FileSystemWatcher.Created
- uid: System.IO.FileSystemWatcher.Deleted
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Deleted
  nameWithType: FileSystemWatcher.Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FileSystemWatcher.Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
- uid: System.IO.FileSystemWatcher.EndInit
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EndInit()
  nameWithType: FileSystemWatcher.EndInit()
  fullName: System.IO.FileSystemWatcher.EndInit()
- uid: System.IO.FileSystemWatcher.Error
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Error
  nameWithType: FileSystemWatcher.Error
  fullName: System.IO.FileSystemWatcher.Error
- uid: System.IO.ErrorEventHandler
  parent: System.IO
  isExternal: false
  name: ErrorEventHandler
  nameWithType: ErrorEventHandler
  fullName: System.IO.ErrorEventHandler
- uid: System.IO.FileSystemWatcher.Filter
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Filter
  nameWithType: FileSystemWatcher.Filter
  fullName: System.IO.FileSystemWatcher.Filter
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.FileSystemWatcher.NotifyFilter
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
- uid: System.IO.NotifyFilters
  parent: System.IO
  isExternal: false
  name: NotifyFilters
  nameWithType: NotifyFilters
  fullName: System.IO.NotifyFilters
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnChanged(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(FileSystemEventArgs)
- uid: System.IO.FileSystemEventArgs
  parent: System.IO
  isExternal: false
  name: FileSystemEventArgs
  nameWithType: FileSystemEventArgs
  fullName: System.IO.FileSystemEventArgs
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnCreated(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnDeleted(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnError(ErrorEventArgs)
  nameWithType: FileSystemWatcher.OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(ErrorEventArgs)
- uid: System.IO.ErrorEventArgs
  parent: System.IO
  isExternal: false
  name: ErrorEventArgs
  nameWithType: ErrorEventArgs
  fullName: System.IO.ErrorEventArgs
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnRenamed(RenamedEventArgs)
  nameWithType: FileSystemWatcher.OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(RenamedEventArgs)
- uid: System.IO.RenamedEventArgs
  parent: System.IO
  isExternal: false
  name: RenamedEventArgs
  nameWithType: RenamedEventArgs
  fullName: System.IO.RenamedEventArgs
- uid: System.IO.FileSystemWatcher.Path
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Path
  nameWithType: FileSystemWatcher.Path
  fullName: System.IO.FileSystemWatcher.Path
- uid: System.IO.FileSystemWatcher.Renamed
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Renamed
  nameWithType: FileSystemWatcher.Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
- uid: System.IO.RenamedEventHandler
  parent: System.IO
  isExternal: false
  name: RenamedEventHandler
  nameWithType: RenamedEventHandler
  fullName: System.IO.RenamedEventHandler
- uid: System.IO.FileSystemWatcher.Site
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Site
  nameWithType: FileSystemWatcher.Site
  fullName: System.IO.FileSystemWatcher.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.IO.FileSystemWatcher.SynchronizingObject
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
  fullName: System.IO.FileSystemWatcher.SynchronizingObject
- uid: System.ComponentModel.ISynchronizeInvoke
  parent: System.ComponentModel
  isExternal: false
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged(WatcherChangeTypes)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
- uid: System.IO.WaitForChangedResult
  parent: System.IO
  isExternal: false
  name: WaitForChangedResult
  nameWithType: WaitForChangedResult
  fullName: System.IO.WaitForChangedResult
- uid: System.IO.WatcherChangeTypes
  parent: System.IO
  isExternal: false
  name: WatcherChangeTypes
  nameWithType: WatcherChangeTypes
  fullName: System.IO.WatcherChangeTypes
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged(WatcherChangeTypes,Int32)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
- uid: System.IO.FileSystemWatcher.#ctor*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher.FileSystemWatcher
- uid: System.IO.FileSystemWatcher.BeginInit*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: BeginInit
  nameWithType: FileSystemWatcher.BeginInit
- uid: System.IO.FileSystemWatcher.Dispose*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Dispose
  nameWithType: FileSystemWatcher.Dispose
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
- uid: System.IO.FileSystemWatcher.EndInit*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EndInit
  nameWithType: FileSystemWatcher.EndInit
- uid: System.IO.FileSystemWatcher.Filter*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Filter
  nameWithType: FileSystemWatcher.Filter
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
- uid: System.IO.FileSystemWatcher.InternalBufferSize*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
- uid: System.IO.FileSystemWatcher.NotifyFilter*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
- uid: System.IO.FileSystemWatcher.OnChanged*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnChanged
  nameWithType: FileSystemWatcher.OnChanged
- uid: System.IO.FileSystemWatcher.OnCreated*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnCreated
  nameWithType: FileSystemWatcher.OnCreated
- uid: System.IO.FileSystemWatcher.OnDeleted*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnDeleted
  nameWithType: FileSystemWatcher.OnDeleted
- uid: System.IO.FileSystemWatcher.OnError*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnError
  nameWithType: FileSystemWatcher.OnError
- uid: System.IO.FileSystemWatcher.OnRenamed*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnRenamed
  nameWithType: FileSystemWatcher.OnRenamed
- uid: System.IO.FileSystemWatcher.Path*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Path
  nameWithType: FileSystemWatcher.Path
- uid: System.IO.FileSystemWatcher.Site*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Site
  nameWithType: FileSystemWatcher.Site
- uid: System.IO.FileSystemWatcher.SynchronizingObject*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
- uid: System.IO.FileSystemWatcher.WaitForChanged*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged
  nameWithType: FileSystemWatcher.WaitForChanged
