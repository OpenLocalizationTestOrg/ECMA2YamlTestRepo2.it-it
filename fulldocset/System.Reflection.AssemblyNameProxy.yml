### YamlMime:ManagedReference
items:
- uid: System.Reflection.AssemblyNameProxy
  id: AssemblyNameProxy
  children:
  - System.Reflection.AssemblyNameProxy.#ctor
  - System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)
  langs:
  - csharp
  name: AssemblyNameProxy
  nameWithType: AssemblyNameProxy
  fullName: System.Reflection.AssemblyNameProxy
  type: Class
  summary: "Fornisce una versione utilizzabile in remoto il <xref uid=&quot;langword_csharp_AssemblyName&quot; name=&quot;AssemblyName&quot; href=&quot;&quot;> </xref>."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AssemblyNameProxy : MarshalByRefObject
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Reflection.AssemblyNameProxy.#ctor
  id: '#ctor'
  parent: System.Reflection.AssemblyNameProxy
  langs:
  - csharp
  name: AssemblyNameProxy()
  nameWithType: AssemblyNameProxy.AssemblyNameProxy()
  fullName: System.Reflection.AssemblyNameProxy.AssemblyNameProxy()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Reflection.AssemblyNameProxy&quot;> </xref> classe."
  syntax:
    content: public AssemblyNameProxy ();
    parameters: []
  overload: System.Reflection.AssemblyNameProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)
  id: GetAssemblyName(System.String)
  parent: System.Reflection.AssemblyNameProxy
  langs:
  - csharp
  name: GetAssemblyName(String)
  nameWithType: AssemblyNameProxy.GetAssemblyName(String)
  fullName: System.Reflection.AssemblyNameProxy.GetAssemblyName(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Ottiene il <xref uid=&quot;langword_csharp_AssemblyName&quot; name=&quot;AssemblyName&quot; href=&quot;&quot;> </xref> per un determinato file."
  remarks: "Questa impostazione funziona solo se il file contiene un manifesto dell&quot;assembly. Questo metodo, il file essere aperto e chiuso."
  syntax:
    content: public System.Reflection.AssemblyName GetAssemblyName (string assemblyFile);
    parameters:
    - id: assemblyFile
      type: System.String
      description: "Il file di assembly per cui ottenere il <xref uid=&quot;langword_csharp_AssemblyName&quot; name=&quot;AssemblyName&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Reflection.AssemblyName
      description: "Un <xref uid=&quot;langword_csharp_AssemblyName&quot; name=&quot;AssemblyName&quot; href=&quot;&quot;> </xref> oggetto che rappresenta il file specificato."
  overload: System.Reflection.AssemblyNameProxy.GetAssemblyName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>assemblyFile</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>assemblyFile</code>è vuoto."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>assemblyFile</code>non è stato trovato."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Il chiamante non dispone dell&quot;autorizzazione richiesta."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code>non è un assembly valido."
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.BadImageFormatException
  isExternal: true
  name: System.BadImageFormatException
- uid: System.Reflection.AssemblyNameProxy.#ctor
  parent: System.Reflection.AssemblyNameProxy
  isExternal: false
  name: AssemblyNameProxy()
  nameWithType: AssemblyNameProxy.AssemblyNameProxy()
  fullName: System.Reflection.AssemblyNameProxy.AssemblyNameProxy()
- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)
  parent: System.Reflection.AssemblyNameProxy
  isExternal: false
  name: GetAssemblyName(String)
  nameWithType: AssemblyNameProxy.GetAssemblyName(String)
  fullName: System.Reflection.AssemblyNameProxy.GetAssemblyName(String)
- uid: System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: true
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.AssemblyNameProxy.#ctor*
  parent: System.Reflection.AssemblyNameProxy
  isExternal: false
  name: AssemblyNameProxy
  nameWithType: AssemblyNameProxy.AssemblyNameProxy
- uid: System.Reflection.AssemblyNameProxy.GetAssemblyName*
  parent: System.Reflection.AssemblyNameProxy
  isExternal: false
  name: GetAssemblyName
  nameWithType: AssemblyNameProxy.GetAssemblyName
