### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DSA
  id: DSA
  children:
  - System.Security.Cryptography.DSA.#ctor
  - System.Security.Cryptography.DSA.Create
  - System.Security.Cryptography.DSA.Create(System.String)
  - System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  - System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  - System.Security.Cryptography.DSA.FromXmlString(System.String)
  - System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: DSA
  nameWithType: DSA
  fullName: System.Security.Cryptography.DSA
  type: Class
  summary: "Rappresenta la classe base astratta dalla quale devono ereditare tutte le implementazioni di Digital Signature Algorithm (DSA)."
  remarks: "È possibile utilizzare la classe DSA e le classi derivate per creare firme digitali che consentono di proteggere l&quot;integrità dei dati.  <xref:System.Security.Cryptography.DSACryptoServiceProvider>Fornisce un&quot;implementazione di questa classe.</xref:System.Security.Cryptography.DSACryptoServiceProvider>       Per utilizzare un sistema a chiave pubblica per firmare digitalmente un messaggio, il mittente applica innanzitutto una funzione hash al messaggio per creare un digest del messaggio. Il mittente quindi crittografa il digest del messaggio con la chiave privata del mittente per creare la firma del mittente personale. Dopo aver ricevuto il messaggio e la firma, il destinatario decrittografa la firma con chiave pubblica del mittente per recuperare il digest del messaggio e genera un hash per il messaggio utilizzando lo stesso algoritmo hash inviato dal mittente. Se il digest del messaggio dal destinatario corrisponde esattamente al digest del messaggio ricevuto dal mittente, il destinatario può presupporre che il messaggio non è stato alterato durante il trasferimento. Si noti che è possibile verificare una firma da chiunque, poiché la chiave pubblica del mittente è conoscenze comuni.       Gli algoritmi asimmetrici più recenti sono disponibili. È consigliabile utilizzare la <xref:System.Security.Cryptography.RSA>classe, <xref:System.Security.Cryptography.ECDsa>classe, o la <xref:System.Security.Cryptography.ECDiffieHellman>classe anziché la classe DSA.</xref:System.Security.Cryptography.ECDiffieHellman> </xref:System.Security.Cryptography.ECDsa> </xref:System.Security.Cryptography.RSA> Utilizzare DSA solo per compatibilità con le applicazioni legacy e i dati.       Questo algoritmo supporta lunghezze di chiave da 512 bit a 1024 bit in incrementi di 64 bit."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DSA : System.Security.Cryptography.AsymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: DSA()
  nameWithType: DSA.DSA()
  fullName: System.Security.Cryptography.DSA.DSA()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> classe."
  syntax:
    content: protected DSA ();
    parameters: []
  overload: System.Security.Cryptography.DSA.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.Create
  id: Create
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: Create()
  nameWithType: DSA.Create()
  fullName: System.Security.Cryptography.DSA.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Crea l&quot;oggetto di crittografia predefinito usato per eseguire l&quot;algoritmo asimmetrico."
  syntax:
    content: public static System.Security.Cryptography.DSA Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.DSA
      description: "Oggetto di crittografia utilizzato per eseguire l&quot;algoritmo asimmetrico."
  overload: System.Security.Cryptography.DSA.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: Create(String)
  nameWithType: DSA.Create(String)
  fullName: System.Security.Cryptography.DSA.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Crea l&quot;oggetto di crittografia specificato usato per eseguire l&quot;algoritmo asimmetrico."
  remarks: "Per <xref:System.Security.Cryptography.DSA>, utilizzare il nome DSA.</xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public static System.Security.Cryptography.DSA Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "Il nome dell&quot;implementazione specifica di <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> da utilizzare."
    return:
      type: System.Security.Cryptography.DSA
      description: "Oggetto di crittografia utilizzato per eseguire l&quot;algoritmo asimmetrico."
  overload: System.Security.Cryptography.DSA.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  id: CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: CreateSignature(Byte[])
  nameWithType: DSA.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSA.CreateSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, crea il <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> firma per i dati specificati."
  syntax:
    content: public abstract byte[] CreateSignature (byte[] rgbHash);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "I dati da firmare."
    return:
      type: System.Byte[]
      description: "La firma digitale per i dati specificati."
  overload: System.Security.Cryptography.DSA.CreateSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: DSA.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSA.ExportParameters(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, Esporta la <xref href=&quot;System.Security.Cryptography.DSAParameters&quot;> </xref>."
  syntax:
    content: public abstract System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per includere i parametri privati; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Security.Cryptography.DSAParameters
      description: "I parametri per <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>."
  overload: System.Security.Cryptography.DSA.ExportParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: DSA.FromXmlString(String)
  fullName: System.Security.Cryptography.DSA.FromXmlString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Ricostruisce un <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> oggetto da una stringa XML."
  syntax:
    content: public override void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: "La stringa XML da usare per ricostruire il <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> oggetto."
  overload: System.Security.Cryptography.DSA.FromXmlString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>xmlString</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Il formato del <code> xmlString </code> parametro non è valido."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSA.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, calcola il valore hash di un flusso binario specificato usando un algoritmo hash specificato."
  syntax:
    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "Il flusso binario per la codifica hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "L&quot;algoritmo da utilizzare per l&quot;hashing dei dati."
    return:
      type: System.Byte[]
      description: "I dati con hash."
  overload: System.Security.Cryptography.DSA.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "Una classe derivata deve eseguire l&quot;override di questo metodo."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, calcola il valore hash di una parte di una matrice di byte specificata usando un algoritmo hash specificato."
  syntax:
    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "I dati di cui eseguire l&quot;hashing."
    - id: offset
      type: System.Int32
      description: "L&quot;indice del primo byte in `data` che consiste nell&quot;eseguire l&quot;hashing."
    - id: count
      type: System.Int32
      description: "Il numero di byte di hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "L&quot;algoritmo da utilizzare per l&quot;hashing dei dati."
    return:
      type: System.Byte[]
      description: "I dati con hash."
  overload: System.Security.Cryptography.DSA.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "Una classe derivata deve eseguire l&quot;override di questo metodo."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  id: ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ImportParameters(DSAParameters)
  nameWithType: DSA.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSA.ImportParameters(DSAParameters)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, Importa l&quot;oggetto specificato <xref href=&quot;System.Security.Cryptography.DSAParameters&quot;> </xref>."
  syntax:
    content: public abstract void ImportParameters (System.Security.Cryptography.DSAParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.DSAParameters
      description: "I parametri per <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>."
  overload: System.Security.Cryptography.DSA.ImportParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Calcola il valore hash della matrice di byte specificata usando l&quot;algoritmo hash specificato e firma il valore hash risultante."
  syntax:
    content: public byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "I dati di input per il quale calcolare il valore hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "L&quot;algoritmo hash da usare per creare il valore hash."
    return:
      type: System.Byte[]
      description: "La firma DSA per i dati specificati."
  overload: System.Security.Cryptography.DSA.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: DSA.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Calcola il valore hash del flusso specificato usando l&quot;algoritmo hash specificato e firma il valore hash risultante."
  syntax:
    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "Flusso di input per il quale calcolare il valore hash."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "L&quot;algoritmo hash da usare per creare il valore hash."
    return:
      type: System.Byte[]
      description: "La firma DSA per i dati specificati."
  overload: System.Security.Cryptography.DSA.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Calcola il valore hash di una parte della matrice di byte specificata usando l&quot;algoritmo hash specificato e firma il valore hash risultante."
  syntax:
    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "I dati di input per il quale calcolare il valore hash."
    - id: offset
      type: System.Int32
      description: "Offset nella matrice in corrispondenza del quale iniziare a utilizzare i dati."
    - id: count
      type: System.Int32
      description: "Il numero di byte nella matrice da utilizzare come dati."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "L&quot;algoritmo hash da usare per creare il valore hash."
    return:
      type: System.Byte[]
      description: "La firma DSA per i dati specificati."
  overload: System.Security.Cryptography.DSA.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>è minore di zero.       - oppure - <code>count</code> è minore di zero.       - oppure - <code>offset</code>  + <code>count</code> – 1 genera un indice che supera il limite superiore di <code>data</code>."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: DSA.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.DSA.ToXmlString(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Crea e restituisce una rappresentazione di stringa XML dell&quot;oggetto corrente <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> oggetto."
  syntax:
    content: public override string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Per includere i parametri privati; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "Stringa codifica XML dell&quot;oggetto corrente <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> oggetto."
  overload: System.Security.Cryptography.DSA.ToXmlString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifica che una firma digitale sia valida calcolando il valore hash dei dati specificati usando l&quot;oggetto hash algoritmo e confrontandolo con la firma fornita."
  syntax:
    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Dati firmati."
    - id: signature
      type: System.Byte[]
      description: "I dati della firma da verificare."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "L&quot;algoritmo hash utilizzato per creare il valore hash dei dati."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la firma digitale è valida. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSA.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifica che una firma digitale sia valida calcolando il valore hash dell&quot;oggetto specificato del flusso usando l&quot;algoritmo hash specificato e confrontandolo con la firma fornita."
  syntax:
    content: public virtual bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "Dati firmati."
    - id: signature
      type: System.Byte[]
      description: "I dati della firma da verificare."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "L&quot;algoritmo hash utilizzato per creare il valore hash dei dati."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la firma digitale è valida. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSA.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Verifica che una firma digitale sia valida calcolando il valore hash dei dati in una parte di un byte della matrice usando l&quot;algoritmo hash specificato e confrontandolo con la firma fornita."
  syntax:
    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Dati firmati."
    - id: offset
      type: System.Int32
      description: "Indice iniziale in corrispondenza del quale calcolare il valore hash."
    - id: count
      type: System.Int32
      description: "Il numero di byte di hash."
    - id: signature
      type: System.Byte[]
      description: "I dati della firma da verificare."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "L&quot;algoritmo hash utilizzato per creare il valore hash dei dati."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se la firma digitale è valida. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSA.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> o &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>è minore di zero.       - oppure - <code>count</code> è minore di zero.       - oppure - <code>offset</code>  + <code>count</code> – 1 genera un indice che supera il limite superiore di <code>data</code>."
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  id: VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSA.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSA.VerifySignature(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Quando sottoposto a override in una classe derivata, verifica la <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> firma per i dati specificati."
  syntax:
    content: public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "L&quot;hash dei dati firmati con `rgbSignature`."
    - id: rgbSignature
      type: System.Byte[]
      description: "La firma da verificare per `rgbData`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se <code> rgbSignature </code> corrisponde alla firma calcolata con l&quot;algoritmo hash specificato e la chiave in <code> rgbHash </code>; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.DSA.VerifySignature*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.DSA.#ctor
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: DSA()
  nameWithType: DSA.DSA()
  fullName: System.Security.Cryptography.DSA.DSA()
- uid: System.Security.Cryptography.DSA.Create
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create()
  nameWithType: DSA.Create()
  fullName: System.Security.Cryptography.DSA.Create()
- uid: System.Security.Cryptography.DSA
  parent: System.Security.Cryptography
  isExternal: false
  name: DSA
  nameWithType: DSA
  fullName: System.Security.Cryptography.DSA
- uid: System.Security.Cryptography.DSA.Create(System.String)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create(String)
  nameWithType: DSA.Create(String)
  fullName: System.Security.Cryptography.DSA.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: CreateSignature(Byte[])
  nameWithType: DSA.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSA.CreateSignature(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: DSA.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSA.ExportParameters(Boolean)
- uid: System.Security.Cryptography.DSAParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: DSAParameters
  nameWithType: DSAParameters
  fullName: System.Security.Cryptography.DSAParameters
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: FromXmlString(String)
  nameWithType: DSA.FromXmlString(String)
  fullName: System.Security.Cryptography.DSA.FromXmlString(String)
- uid: System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSA.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Stream,HashAlgorithmName)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ImportParameters(DSAParameters)
  nameWithType: DSA.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSA.ImportParameters(DSAParameters)
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: DSA.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Stream,HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: DSA.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.DSA.ToXmlString(Boolean)
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSA.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSA.VerifySignature(Byte[],Byte[])
- uid: System.Security.Cryptography.DSA.#ctor*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: DSA
  nameWithType: DSA.DSA
- uid: System.Security.Cryptography.DSA.Create*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create
  nameWithType: DSA.Create
- uid: System.Security.Cryptography.DSA.CreateSignature*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: CreateSignature
  nameWithType: DSA.CreateSignature
- uid: System.Security.Cryptography.DSA.ExportParameters*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ExportParameters
  nameWithType: DSA.ExportParameters
- uid: System.Security.Cryptography.DSA.FromXmlString*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: FromXmlString
  nameWithType: DSA.FromXmlString
- uid: System.Security.Cryptography.DSA.HashData*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: HashData
  nameWithType: DSA.HashData
- uid: System.Security.Cryptography.DSA.ImportParameters*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ImportParameters
  nameWithType: DSA.ImportParameters
- uid: System.Security.Cryptography.DSA.SignData*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData
  nameWithType: DSA.SignData
- uid: System.Security.Cryptography.DSA.ToXmlString*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ToXmlString
  nameWithType: DSA.ToXmlString
- uid: System.Security.Cryptography.DSA.VerifyData*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData
  nameWithType: DSA.VerifyData
- uid: System.Security.Cryptography.DSA.VerifySignature*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifySignature
  nameWithType: DSA.VerifySignature
