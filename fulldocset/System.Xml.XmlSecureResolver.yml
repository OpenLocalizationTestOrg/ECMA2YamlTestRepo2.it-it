### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlSecureResolver
  id: XmlSecureResolver
  children:
  - System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)
  - System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)
  - System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)
  - System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)
  - System.Xml.XmlSecureResolver.Credentials
  - System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)
  - System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  - System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)
  langs:
  - csharp
  name: "XmlSecureResolver"
  nameWithType: XmlSecureResolver
  fullName: System.Xml.XmlSecureResolver
  type: Class
  summary: Helps to secure another implementation of <see cref="T:System.Xml.XmlResolver"></see> by wrapping the <see cref="T:System.Xml.XmlResolver"></see> object and restricting the resources that the underlying <see cref="T:System.Xml.XmlResolver"></see> has access to.
  remarks: "The <xref:System.Xml.XmlUrlResolver> class is the default resolver for all classes in the <xref:System.Xml> namespace. It is used to load XML documents and to resolve external resources such as entities, DTDs or schemas, and import or include directives.  \n  \n You can override this default by specifying the <xref:System.Xml.XmlResolver> object to use. For example, if you want to restrict the resources that the underlying <xref:System.Xml.XmlResolver> can access, you can use an XmlSecureResolver object.  \n  \n XmlSecureResolver wraps around a concrete implementation of <xref:System.Xml.XmlResolver> and restricts the resources that the underlying <xref:System.Xml.XmlResolver> has access to. For example, XmlSecureResolver has the ability to prohibit cross-domain redirection, which occurs from an embedded Uniform Resource Identifier (URI) reference.  \n  \n When you construct an XmlSecureResolver object, you provide a valid <xref:System.Xml.XmlResolver> implementation along with a URL, an instance of an evidence object, or a permission set, which is used by the XmlSecureResolver to determine security. Either a <xref:System.Security.PermissionSet?displayProperty=fullName> is generated or the existing one is used and <xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName> is called on it to help secure the underlying <xref:System.Xml.XmlResolver>.  \n  \n> [!IMPORTANT]\n>  XmlSecureResolver objects can contain sensitive information such as user credentials. You should be careful when caching XmlSecureResolver objects and should not pass the XmlSecureResolver object to an untrusted component.  \n  \n> [!IMPORTANT]\n>  There are differences in the security infrastructure for code running on the .NET Framework common language runtime (CLR) and for code running on the CLR that is integrated within Microsoft SQL Server 2005. This can lead to cases where code developed for the .NET Framework CLR operates differently when used on the SQL Server integrated CLR. One of these differences affects the XmlSecureResolver class when you have evidence that is based on a URL (that is, when you use the <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%28System.String%29> method or the <xref:System.Xml.XmlSecureResolver.%23ctor%2A> constructor). The policy resolution mechanism of the SQL Server integrated CLR does not use the <xref:System.Security.Policy.Url> or <xref:System.Security.Policy.Zone> information. Instead, it grants permissions based on the GUID that the server adds when assemblies are loaded. When you use the XmlSecureResolver in the SQL Server integrated CLR, provide any required evidence directly by using a specified <xref:System.Security.PermissionSet>.  \n  \n## To use a secure resolver  \n  \n1.  Create an XmlSecureResolver with the correct permission set.  \n  \n2.  Create an <xref:System.Xml.XmlReaderSettings> object that uses the XmlSecureResolver object.  \n  \n     [!code-vb[XmlSecureResolver_Samples#5a](~/add/codesnippet/VisualBasic/t-system.xml.xmlsecurere_1.vb)]\n     [!code-cs[XmlSecureResolver_Samples#5a](~/add/codesnippet/CSharp/t-system.xml.xmlsecurere_1.cs)]  \n  \n3.  Pass  the <xref:System.Xml.XmlReaderSettings> object to the <xref:System.Xml.XmlReader.Create%2A> method when you're creating the <xref:System.Xml.XmlReader> object.  \n  \n     [!code-vb[XmlSecureResolver_Samples#5b](~/add/codesnippet/VisualBasic/t-system.xml.xmlsecurere_2.vb)]\n     [!code-cs[XmlSecureResolver_Samples#5b](~/add/codesnippet/CSharp/t-system.xml.xmlsecurere_2.cs)]  \n  \n## To restrict access by using a URL  \n Use the <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29> constructor to create an XmlSecureResolver object that is allowed to access your local intranet site only.  \n  \n [!code-vb[XmlSecureResolver_Samples#3](~/add/codesnippet/VisualBasic/t-system.xml.xmlsecurere_3.vb)]\n [!code-cs[XmlSecureResolver_Samples#3](~/add/codesnippet/CSharp/t-system.xml.xmlsecurere_3.cs)]  \n  \n## To restrict access by using a permission set  \n  \n1.  Create a <xref:System.Net.WebPermission> object.  \n  \n     [!code-vb[XmlSecureResolver_Samples#4a](~/add/codesnippet/VisualBasic/t-system.xml.xmlsecurere_4.vb)]\n     [!code-cs[XmlSecureResolver_Samples#4a](~/add/codesnippet/CSharp/t-system.xml.xmlsecurere_4.cs)]  \n  \n2.  Specify the URLs that you want to allow access to.  \n  \n     [!code-vb[XmlSecureResolver_Samples#4b](~/add/codesnippet/VisualBasic/t-system.xml.xmlsecurere_5.vb)]\n     [!code-cs[XmlSecureResolver_Samples#4b](~/add/codesnippet/CSharp/t-system.xml.xmlsecurere_5.cs)]  \n  \n3.  Add the web permissions to the <xref:System.Security.PermissionSet> object.  \n  \n     [!code-vb[XmlSecureResolver_Samples#4c](~/add/codesnippet/VisualBasic/t-system.xml.xmlsecurere_6.vb)]\n     [!code-cs[XmlSecureResolver_Samples#4c](~/add/codesnippet/CSharp/t-system.xml.xmlsecurere_6.cs)]  \n  \n4.  Use the <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.PermissionSet%29> constructor to create an XmlSecureResolver object by using the permission set.  \n  \n     [!code-vb[XmlSecureResolver_Samples#4d](~/add/codesnippet/VisualBasic/t-system.xml.xmlsecurere_7.vb)]\n     [!code-cs[XmlSecureResolver_Samples#4d](~/add/codesnippet/CSharp/t-system.xml.xmlsecurere_7.cs)]  \n  \n     See the <xref:System.Xml.XmlSecureResolver.%23ctor%2A> reference page for another example.  \n  \n## To restrict access by using evidence  \n You can restrict access by using the <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> constructor and specifying <xref:System.Security.Policy.Evidence>. The <xref:System.Security.Policy.Evidence> is used to create the <xref:System.Security.PermissionSet> that is applied to the underlying <xref:System.Xml.XmlResolver>. The XmlSecureResolver calls <xref:System.Security.PermissionSet.PermitOnly%2A> on the created <xref:System.Security.PermissionSet> before opening any resources.  \n  \n Here are some common scenarios and the type of evidence to provide for each:  \n  \n-   If you are working in a fully trusted environment, use your assembly to create the evidence:  \n  \n     [!code-vb[XmlSecureResolver_Samples#1](~/add/codesnippet/VisualBasic/t-system.xml.xmlsecurere_8.vb)]\n     [!code-cs[XmlSecureResolver_Samples#1](~/add/codesnippet/CSharp/t-system.xml.xmlsecurere_8.cs)]  \n  \n-   If you are working in a semi-trusted environment, you have code or data coming from an outside source, and you know the origin of the outside source and have a verifiable URI, use the URI to create the evidence:  \n  \n     [!code-vb[XmlSecureResolver_Samples#2](~/add/codesnippet/VisualBasic/t-system.xml.xmlsecurere_9.vb)]\n     [!code-cs[XmlSecureResolver_Samples#2](~/add/codesnippet/CSharp/t-system.xml.xmlsecurere_9.cs)]  \n  \n-   If you are working in a semi-trusted environment and you have code or data coming from an outside source, but you don't know the origin of the outside source, either:  \n  \n     Set the `evidence` parameter to `null`. This allows no access to resources.  \n  \n     -or-  \n  \n     If your application requires some access to resources, request evidence from the caller.  \n  \n## To use the secure resolver to load an XSLT style sheet  \n  \n1.  Create an XmlSecureResolver with the correct permission set.  \n  \n2.  Pass the XmlSecureResolver to the <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> method.  \n  \n     [!code-vb[XmlSecureResolver_Samples#6](~/add/codesnippet/VisualBasic/t-system.xml.xmlsecurere_10.vb)]\n     [!code-cs[XmlSecureResolver_Samples#6](~/add/codesnippet/CSharp/t-system.xml.xmlsecurere_10.cs)]"
  syntax:
    content: 'public class XmlSecureResolver : System.Xml.XmlResolver'
  inheritance:
  - System.Object
  - System.Xml.XmlResolver
  implements: []
  inheritedMembers:
  - System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)
  id: '#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)'
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: "XmlSecureResolver(XmlResolver,PermissionSet)"
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,PermissionSet)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,PermissionSet)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver"></see> class with the <see cref="T:System.Xml.XmlResolver"></see> and <see cref="T:System.Security.PermissionSet"></see> specified.
  remarks: ''
  example:
  - "The following example constructs an <xref:System.Xml.XmlSecureResolver> object by using a customized permission set.  \n  \n [!code-cs[XmlSecureResolver.cctor#1](~/add/codesnippet/CSharp/e6fb0edb-66a8-45c7-82d0-_1.cs)]\n [!code-cpp[XmlSecureResolver.cctor#1](~/add/codesnippet/CPP/e6fb0edb-66a8-45c7-82d0-_1.cpp)]\n [!code-vb[XmlSecureResolver.cctor#1](~/add/codesnippet/VisualBasic/e6fb0edb-66a8-45c7-82d0-_1.vb)]"
  syntax:
    content: public XmlSecureResolver (System.Xml.XmlResolver resolver, System.Security.PermissionSet permissionSet);
    parameters:
    - id: resolver
      type: System.Xml.XmlResolver
      description: "The XML resolver that is wrapped by the ."
    - id: permissionSet
      type: System.Security.PermissionSet
      description: "The permission set to apply to the underlying . The  calls the <xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName> method on the permission set before calling the <xref:System.Xml.XmlSecureResolver.GetEntity%2A> method on the underlying XML resolver."
  overload: System.Xml.XmlSecureResolver.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)
  id: '#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)'
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: "XmlSecureResolver(XmlResolver,Evidence)"
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,Evidence)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,Evidence)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver"></see> class with the <see cref="T:System.Xml.XmlResolver"></see> and <see cref="T:System.Security.Policy.Evidence"></see> specified.
  remarks: "Here are some possible scenarios and the type of evidence to provide for each scenario:  \n  \n-   If you are working in a fully trusted environment, use your assembly to create the evidence:  \n  \n     [!code-vb[XmlSecureResolver_Samples#1](~/add/codesnippet/VisualBasic/74601da4-12bd-44fe-a117-_1.vb)]\n     [!code-cs[XmlSecureResolver_Samples#1](~/add/codesnippet/CSharp/74601da4-12bd-44fe-a117-_1.cs)]  \n  \n-   If you are working in a semi-trusted environment, you have code or data coming from an outside source, and you know the origin of the outside source and have a verifiable URI, use the URI to create the evidence:  \n  \n     [!code-vb[XmlSecureResolver_Samples#2](~/add/codesnippet/VisualBasic/74601da4-12bd-44fe-a117-_2.vb)]\n     [!code-cs[XmlSecureResolver_Samples#2](~/add/codesnippet/CSharp/74601da4-12bd-44fe-a117-_2.cs)]  \n  \n-   If you are working in a semi-trusted environment and you have code or data coming from an outside source, but you don't know the origin of the outside source, either:  \n  \n     Set the `evidence` parameter to `null`. This allows no access to resources.  \n  \n     -or-  \n  \n     If your application requires some access to resources, request evidence from the caller."
  syntax:
    content: public XmlSecureResolver (System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);
    parameters:
    - id: resolver
      type: System.Xml.XmlResolver
      description: "The XML resolver that is wrapped by the ."
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "The evidence used to create the  that will be applied to the underlying . The  calls the <xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName> method on the created  before calling <xref:System.Xml.XmlSecureResolver.GetEntity%2A> on the underlying ."
  overload: System.Xml.XmlSecureResolver.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)
  id: '#ctor(System.Xml.XmlResolver,System.String)'
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: "XmlSecureResolver(XmlResolver,String)"
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,String)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,String)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Initializes a new instance of the <see cref="T:System.Xml.XmlSecureResolver"></see> class with the <see cref="T:System.Xml.XmlResolver"></see> and URL provided.
  remarks: >-
    > [!IMPORTANT]

    >  There are differences in the security infrastructure for code running on the .NET Framework common language runtime (CLR) and for code running on the CLR that is integrated within Microsoft SQL Server 2005. This can lead to cases where code developed for the .NET Framework CLR operates differently when used on the SQL Server integrated CLR. One of these differences affects the <xref:System.Xml.XmlSecureResolver> class when you have evidence that is based on a URL (that is, when you use the <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A> method or the XmlSecureResolver constructor). The policy resolution mechanism of the SQL Server integrated CLR does not use the <xref:System.Security.Policy.Url> or <xref:System.Security.Policy.Zone> information. Instead, it grants permissions based on the GUID that the server adds when assemblies are loaded. When you use the <xref:System.Xml.XmlSecureResolver> in the SQL Server integrated CLR, provide any required evidence directly by using a specified <xref:System.Security.PermissionSet>.
  example:
  - "This example uses the XmlSecureResolver constructor to create an <xref:System.Xml.XmlSecureResolver> object that is allowed to access your local intranet site only.  \n  \n [!code-vb[XmlSecureResolver_Samples#3](~/add/codesnippet/VisualBasic/m-system.xml.xmlsecurere_1.vb)]\n [!code-cs[XmlSecureResolver_Samples#3](~/add/codesnippet/CSharp/m-system.xml.xmlsecurere_1.cs)]"
  syntax:
    content: public XmlSecureResolver (System.Xml.XmlResolver resolver, string securityUrl);
    parameters:
    - id: resolver
      type: System.Xml.XmlResolver
      description: "The XML resolver that is wrapped by the ."
    - id: securityUrl
      type: System.String
      description: "The URL used to create the  that will be applied to the underlying . The  calls <xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName> on the created  before calling <xref:System.Xml.XmlSecureResolver.GetEntity%2A> on the underlying ."
  overload: System.Xml.XmlSecureResolver.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)
  id: CreateEvidenceForUrl(System.String)
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: "CreateEvidenceForUrl(String)"
  nameWithType: XmlSecureResolver.CreateEvidenceForUrl(String)
  fullName: System.Xml.XmlSecureResolver.CreateEvidenceForUrl(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Creates evidence using the supplied URL.
  remarks: >-
    > [!IMPORTANT]

    >  There are differences in the security infrastructure for code running on the .NET Framework common language runtime (CLR) and for code running on the CLR that is integrated within Microsoft SQL Server 2005. This can lead to cases where code developed for the .NET Framework CLR operates differently when used on the SQL Server integrated CLR. One of these differences affects the <xref:System.Xml.XmlSecureResolver> class when you have evidence that is based on a URL (that is, when you use the CreateEvidenceForUrl method or the <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29> constructor). The policy resolution mechanism of the SQL Server integrated CLR doesn't use the <xref:System.Security.Policy.Url> or <xref:System.Security.Policy.Zone> information. Instead, it grants permissions based on the GUID that the server adds when assemblies are loaded. When you use the <xref:System.Xml.XmlSecureResolver> in the SQL Server integrated CLR, provide any required evidence directly by using a specified <xref:System.Security.PermissionSet>.
  syntax:
    content: public static System.Security.Policy.Evidence CreateEvidenceForUrl (string securityUrl);
    parameters:
    - id: securityUrl
      type: System.String
      description: "The URL used to create the evidence."
    return:
      type: System.Security.Policy.Evidence
      description: "To be added."
  overload: System.Xml.XmlSecureResolver.CreateEvidenceForUrl*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlSecureResolver.Credentials
  id: Credentials
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: "Credentials"
  nameWithType: XmlSecureResolver.Credentials
  fullName: System.Xml.XmlSecureResolver.Credentials
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Sets credentials used to authenticate web requests.
  remarks: ''
  example:
  - "The following example uses an <xref:System.Xml.XmlSecureResolver> with default credentials to resolve and open network resources needed by the <xref:System.Xml.XmlTextReader>.  \n  \n [!code-cpp[XmlSecureResolver.Credentials#1](~/add/codesnippet/CPP/p-system.xml.xmlsecurere_1.cpp)]\n [!code-vb[XmlSecureResolver.Credentials#1](~/add/codesnippet/VisualBasic/p-system.xml.xmlsecurere_1.vb)]\n [!code-cs[XmlSecureResolver.Credentials#1](~/add/codesnippet/CSharp/p-system.xml.xmlsecurere_1.cs)]"
  syntax:
    content: public override System.Net.ICredentials Credentials { set; }
    return:
      type: System.Net.ICredentials
      description: "The credentials to be used to authenticate web requests. The <see cref=&quot;T:System.Xml.XmlSecureResolver&quot;></see> sets the given credentials on the underlying <see cref=&quot;T:System.Xml.XmlResolver&quot;></see>. If this property is not set, the value defaults to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>; that is, the <see cref=&quot;T:System.Xml.XmlSecureResolver&quot;></see> has no user credentials."
  overload: System.Xml.XmlSecureResolver.Credentials*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)
  id: GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: "GetEntity(Uri,String,Type)"
  nameWithType: XmlSecureResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlSecureResolver.GetEntity(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Maps a URI to an object that contains the actual resource. This method temporarily sets the <see cref="T:System.Security.PermissionSet"></see> created in the constructor by calling &lt;xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName&gt; before calling <xref uid="langword_csharp_GetEntity" name="GetEntity" href=""></xref> on the underlying <see cref="T:System.Xml.XmlResolver"></see> to open the resource.
  remarks: >-
    > [!IMPORTANT]

    >  Your application can mitigate memory denial of service threats to the GetEntity method by implementing an <xref:System.Runtime.InteropServices.ComTypes.IStream> that limits the number of bytes read. This helps guard against situations where malicious code attempts to pass an infinite stream of bytes to the GetEntity method.
  syntax:
    content: public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "The URI that is returned from <xref:System.Xml.XmlSecureResolver.ResolveUri%2A>."
    - id: role
      type: System.String
      description: "Currently not used."
    - id: ofObjectToReturn
      type: System.Type
      description: "The type of object to return. The current version only returns <xref:System.IO.Stream> objects."
    return:
      type: System.Object
      description: "To be added."
  overload: System.Xml.XmlSecureResolver.GetEntity*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n    ofObjectToReturn is neither  nor a <xref:System.IO.Stream> type."
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "The specified URI is not an absolute URI."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n    absoluteUri is ."
  - type: System.Exception
    commentId: T:System.Exception
    description: "There is a runtime error (for example, an interrupted server connection)."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  id: GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: "GetEntityAsync(Uri,String,Type)"
  nameWithType: XmlSecureResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlSecureResolver.GetEntityAsync(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Asynchronously maps a URI to an object that contains the actual resource.
  syntax:
    content: public override System.Threading.Tasks.Task<object> GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "The URI returned from <xref:System.Xml.XmlSecureResolver.ResolveUri%2A>."
    - id: role
      type: System.String
      description: "Currently not used."
    - id: ofObjectToReturn
      type: System.Type
      description: "The type of object to return. The current version only returns <xref:System.IO.Stream> objects."
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "To be added."
  overload: System.Xml.XmlSecureResolver.GetEntityAsync*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)
  id: ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlSecureResolver
  langs:
  - csharp
  name: "ResolveUri(Uri,String)"
  nameWithType: XmlSecureResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlSecureResolver.ResolveUri(Uri,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: Resolves the absolute URI from the base and relative URIs by calling <xref uid="langword_csharp_ResolveUri" name="ResolveUri" href=""></xref> on the underlying <see cref="T:System.Xml.XmlResolver"></see>.
  syntax:
    content: public override Uri ResolveUri (Uri baseUri, string relativeUri);
    parameters:
    - id: baseUri
      type: System.Uri
      description: "The base URI used to resolve the relative URI."
    - id: relativeUri
      type: System.String
      description: "The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the `baseUri` value. If relative, it combines with the `baseUri` to make an absolute URI."
    return:
      type: System.Uri
      description: "To be added."
  overload: System.Xml.XmlSecureResolver.ResolveUri*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n    relativeUri is ."
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Xml.XmlResolver
  isExternal: false
  name: "System.Xml.XmlResolver"
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "XmlSecureResolver(XmlResolver,PermissionSet)"
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,PermissionSet)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,PermissionSet)
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: "PermissionSet"
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "XmlSecureResolver(XmlResolver,Evidence)"
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,Evidence)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,Evidence)
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: "Evidence"
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "XmlSecureResolver(XmlResolver,String)"
  nameWithType: XmlSecureResolver.XmlSecureResolver(XmlResolver,String)
  fullName: System.Xml.XmlSecureResolver.XmlSecureResolver(XmlResolver,String)
- uid: System.String
  parent: System
  isExternal: true
  name: "String"
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "CreateEvidenceForUrl(String)"
  nameWithType: XmlSecureResolver.CreateEvidenceForUrl(String)
  fullName: System.Xml.XmlSecureResolver.CreateEvidenceForUrl(String)
- uid: System.Xml.XmlSecureResolver.Credentials
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "Credentials"
  nameWithType: XmlSecureResolver.Credentials
  fullName: System.Xml.XmlSecureResolver.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: "ICredentials"
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "GetEntity(Uri,String,Type)"
  nameWithType: XmlSecureResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlSecureResolver.GetEntity(Uri,String,Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: "Object"
  nameWithType: Object
  fullName: System.Object
- uid: System.Uri
  parent: System
  isExternal: true
  name: "Uri"
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Type
  parent: System
  isExternal: true
  name: "Type"
  nameWithType: Type
  fullName: System.Type
- uid: System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "GetEntityAsync(Uri,String,Type)"
  nameWithType: XmlSecureResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlSecureResolver.GetEntityAsync(Uri,String,Type)
- uid: System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  isExternal: true
  name: "Task<Object>"
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "Task"
    nameWithType: Task
    fullName: Task<System.Object>
  - name: "<"
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: "Object"
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "ResolveUri(Uri,String)"
  nameWithType: XmlSecureResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlSecureResolver.ResolveUri(Uri,String)
- uid: System.Xml.XmlSecureResolver.#ctor*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "XmlSecureResolver"
  nameWithType: XmlSecureResolver.XmlSecureResolver
- uid: System.Xml.XmlSecureResolver.CreateEvidenceForUrl*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "CreateEvidenceForUrl"
  nameWithType: XmlSecureResolver.CreateEvidenceForUrl
- uid: System.Xml.XmlSecureResolver.Credentials*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "Credentials"
  nameWithType: XmlSecureResolver.Credentials
- uid: System.Xml.XmlSecureResolver.GetEntity*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "GetEntity"
  nameWithType: XmlSecureResolver.GetEntity
- uid: System.Xml.XmlSecureResolver.GetEntityAsync*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "GetEntityAsync"
  nameWithType: XmlSecureResolver.GetEntityAsync
- uid: System.Xml.XmlSecureResolver.ResolveUri*
  parent: System.Xml.XmlSecureResolver
  isExternal: false
  name: "ResolveUri"
  nameWithType: XmlSecureResolver.ResolveUri
