### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Logging.Log
  id: Log
  children:
  - Microsoft.VisualBasic.Logging.Log.#ctor
  - Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  - Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  - Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  - Microsoft.VisualBasic.Logging.Log.TraceSource
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  langs:
  - csharp
  name: Log
  nameWithType: Log
  fullName: Microsoft.VisualBasic.Logging.Log
  type: Class
  summary: "Fornisce una proprietà e metodi per la scrittura di eventi e informazioni sull&quot;eccezione ai listener di log dell&quot;applicazione."
  remarks: "Il `My.Application.Log` oggetto fornisce un punto di ingresso semplice da cui accedere il [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]di servizi di registrazione. Il `WriteEntry` e `WriteException` metodi scrivono i messaggi di listener di log dell&quot;applicazione. I listener possono essere configurati dal file di configurazione dell&quot;applicazione. Per ulteriori informazioni, vedere [procedura dettagliata: modifica di destinazione di scrittura delle informazioni con My](~/add/includes/ajax-current-ext-md.md) e [utilizzo dei log applicazione](~/add/includes/ajax-current-ext-md.md).       Il `My.Application.Log` l&quot;oggetto è disponibile solo per le applicazioni client. Per le applicazioni Web, utilizzare `My.Log`. Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.Logging.AspLog>.</xref:Microsoft.VisualBasic.Logging.AspLog>       Nella tabella seguente sono elencati esempi di attività che coinvolgono la `My.Application.Log` oggetto.      | Per | Vedere |   |--------|---------|   | Scrivere informazioni sugli eventi ai listener di log dell&quot;applicazione | [Procedura: scrivere messaggi di Log](~/add/includes/ajax-current-ext-md.md)|   | Scrive informazioni sull&quot;eccezione ai listener di log dell&quot;applicazione | [Procedura: registrare eccezioni](~/add/includes/ajax-current-ext-md.md)|   | Determinare dove `My.Application.Log` scrive informazioni |[ Procedura dettagliata: Individuazione di My in cui scrive le informazioni](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]"
  syntax:
    content: public class Log
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: Log()
  nameWithType: Log.Log()
  fullName: Microsoft.VisualBasic.Logging.Log.Log()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Inizializza una nuova istanza di <xref href=&quot;Microsoft.VisualBasic.Logging.Log&quot;> </xref> classe."
  syntax:
    content: public Log ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.Log.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: Log(String)
  nameWithType: Log.Log(String)
  fullName: Microsoft.VisualBasic.Logging.Log.Log(String)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Inizializza una nuova istanza di <xref href=&quot;Microsoft.VisualBasic.Logging.Log&quot;> </xref> classe."
  syntax:
    content: public Log (string name);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.String>.</xref:System.String> Il nome da assegnare al <xref:Microsoft.VisualBasic.Logging.Log.TraceSource*>oggetto property.</xref:Microsoft.VisualBasic.Logging.Log.TraceSource*>"
  overload: Microsoft.VisualBasic.Logging.Log.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  id: DefaultFileLogWriter
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
  fullName: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Ottiene il file di <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref> oggetto sottostante la <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref> oggetto."
  remarks: "È possibile utilizzare questa proprietà per determinare la configurazione corrente del <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>oggetto.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>       Nelle applicazioni client, il `Log` oggetto è disponibile attraverso il `My.Application.Log` oggetto. Nelle applicazioni Web, il `Log` oggetto è disponibile attraverso il `My.Log` oggetto."
  syntax:
    content: public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }
    return:
      type: Microsoft.VisualBasic.Logging.FileLogTraceListener
      description: "Restituisce il <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref> oggetto sottostante la <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref> oggetto."
  overload: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  id: InitializeWithDefaultsSinceNoConfigExists
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: InitializeWithDefaultsSinceNoConfigExists()
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()
  fullName: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Crea un nuovo <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref> e lo aggiunge al <xref:System.Diagnostics.TraceSource.Listeners*>insieme.</xref:System.Diagnostics.TraceSource.Listeners*>"
  remarks: "Questo metodo crea un nuovo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, imposta il nome nel `FileLog`e lo configura per registrare i messaggi con livello di gravità <xref:System.Diagnostics.SourceLevels>e versioni successive.</xref:System.Diagnostics.SourceLevels> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Il nuovo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>oggetto viene quindi aggiunto al <xref:System.Diagnostics.TraceSource.Listeners%2A>insieme.</xref:System.Diagnostics.TraceSource.Listeners%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>       Il <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A>chiama il metodo se il <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A>proprietà non è stata configurata.</xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> </xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> L&quot;origine di traccia può essere configurato nel file di configurazione dell&quot;applicazione."
  syntax:
    content: protected virtual void InitializeWithDefaultsSinceNoConfigExists ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource
  id: TraceSource
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: TraceSource
  nameWithType: Log.TraceSource
  fullName: Microsoft.VisualBasic.Logging.Log.TraceSource
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Ottiene il <xref href=&quot;System.Diagnostics.TraceSource&quot;> </xref> oggetto sottostante la <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref> oggetto."
  remarks: "È possibile utilizzare questa proprietà per determinare la configurazione corrente del `Log` oggetto.       Nelle applicazioni client, il `Log` oggetto è disponibile attraverso il `My.Application.Log` oggetto. Nelle applicazioni Web, il `Log` oggetto è disponibile attraverso il `My.Log` oggetto.       Si tratta di un membro avanzato. non è visibile in IntelliSense a meno che non si seleziona il **tutti** scheda.       La tabella seguente elenca un esempio di un&quot;attività che coinvolgono la `TraceSource` proprietà.      | Per | Vedere |   |--------|---------|   | Ottenere informazioni per ogni il `Log` listener di log dell&quot;oggetto. | [Risoluzione dei problemi: listener di Log](~/add/includes/ajax-current-ext-md.md)|      # # Disponibilità per il tipo di progetto | Tipo di progetto | Disponibile |   |------------------|---------------|   | Applicazione di Windows | **Yes**|   | Libreria di classi | **Yes**|   | Applicazione console | **Yes**|   | Libreria di controlli Windows | **Yes**|   | Libreria di controlli Web | Non |   | Servizio Windows | **Yes**|   | Sito Web | **Yes**|"
  syntax:
    content: public System.Diagnostics.TraceSource TraceSource { get; }
    return:
      type: System.Diagnostics.TraceSource
      description: "Restituisce il <xref href=&quot;System.Diagnostics.TraceSource&quot;> </xref> oggetto sottostante la <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref> oggetto."
  overload: Microsoft.VisualBasic.Logging.Log.TraceSource*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  id: WriteEntry(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String)
  nameWithType: Log.WriteEntry(String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Scrive un messaggio ai listener di log dell&quot;applicazione."
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message);
    parameters:
    - id: message
      type: System.String
      description: "Obbligatorio. Messaggio da registrare. Se `message` è <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, viene utilizzata una stringa vuota."
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Codice con attendibilità parziale chiama il metodo, ma scrive in un listener di log che richiede attendibilità totale."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  id: WriteEntry(System.String,System.Diagnostics.TraceEventType)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String,TraceEventType)
  nameWithType: Log.WriteEntry(String,TraceEventType)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Scrive un messaggio ai listener di log dell&quot;applicazione."
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);
    parameters:
    - id: message
      type: System.String
      description: "Obbligatorio. Messaggio da registrare. Se `message` è <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, viene utilizzata una stringa vuota."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Il tipo di messaggio. Per impostazione predefinita, <xref uid=&quot;langword_csharp_TraceEventType.Information&quot; name=&quot;TraceEventType.Information&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Il tipo di messaggio non è uno del <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valori di enumerazione."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Codice con attendibilità parziale chiama il metodo, ma scrive in un listener di log che richiede attendibilità totale."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  id: WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String,TraceEventType,Int32)
  nameWithType: Log.WriteEntry(String,TraceEventType,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Scrive un messaggio ai listener di log dell&quot;applicazione."
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);
    parameters:
    - id: message
      type: System.String
      description: "Obbligatorio. Messaggio da registrare. Se `message` è <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, viene utilizzata una stringa vuota."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Il tipo di messaggio. Per impostazione predefinita, <xref uid=&quot;langword_csharp_TraceEventType.Information&quot; name=&quot;TraceEventType.Information&quot; href=&quot;&quot;> </xref>."
    - id: id
      type: System.Int32
      description: "Identificatore del messaggio, in genere utilizzato per la correlazione. Per impostazione predefinita, è correlato al `entryType` come descritto nella tabella."
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Il tipo di messaggio non è uno del <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valori di enumerazione."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Codice con attendibilità parziale chiama il metodo, ma scrive in un listener di log che richiede attendibilità totale."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  id: WriteException(System.Exception)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception)
  nameWithType: Log.WriteException(Exception)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Scrive informazioni sull&quot;eccezione ai listener di log dell&quot;applicazione."
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex);
    parameters:
    - id: ex
      type: System.Exception
      description: "Obbligatorio. Eccezione da registrare."
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ex</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Codice con attendibilità parziale chiama il metodo, ma scrive in un listener di log che richiede attendibilità totale."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception,TraceEventType,String)
  nameWithType: Log.WriteException(Exception,TraceEventType,String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Scrive informazioni sull&quot;eccezione ai listener di log dell&quot;applicazione."
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);
    parameters:
    - id: ex
      type: System.Exception
      description: "Obbligatorio. Eccezione da registrare."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Il tipo di messaggio. Per impostazione predefinita, <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>."
    - id: additionalInfo
      type: System.String
      description: "Stringa da aggiungere al messaggio. Per impostazione predefinita, questa è una stringa vuota."
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ex</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Il tipo di messaggio non è uno del <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valori di enumerazione."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Codice con attendibilità parziale chiama il metodo, ma scrive in un listener di log che richiede attendibilità totale."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception,TraceEventType,String,Int32)
  nameWithType: Log.WriteException(Exception,TraceEventType,String,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Scrive informazioni sull&quot;eccezione ai listener di log dell&quot;applicazione."
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);
    parameters:
    - id: ex
      type: System.Exception
      description: "Obbligatorio. Eccezione da registrare."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Il tipo di messaggio. Per impostazione predefinita, <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>."
    - id: additionalInfo
      type: System.String
      description: "Stringa da aggiungere al messaggio. Per impostazione predefinita, questa è una stringa vuota."
    - id: id
      type: System.Int32
      description: "Identificatore del messaggio, in genere utilizzato per la correlazione. Per impostazione predefinita, è correlato al `entryType` come descritto nella tabella nella sezione Osservazioni."
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ex</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Il tipo di messaggio non è uno del <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> valori di enumerazione."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Codice con attendibilità parziale chiama il metodo, ma scrive in un listener di log che richiede attendibilità totale."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Logging.Log.#ctor
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log()
  nameWithType: Log.Log()
  fullName: Microsoft.VisualBasic.Logging.Log.Log()
- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log(String)
  nameWithType: Log.Log(String)
  fullName: Microsoft.VisualBasic.Logging.Log.Log(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
  fullName: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: FileLogTraceListener
  nameWithType: FileLogTraceListener
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: InitializeWithDefaultsSinceNoConfigExists()
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()
  fullName: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists()
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: TraceSource
  nameWithType: Log.TraceSource
  fullName: Microsoft.VisualBasic.Logging.Log.TraceSource
- uid: System.Diagnostics.TraceSource
  parent: System.Diagnostics
  isExternal: false
  name: TraceSource
  nameWithType: TraceSource
  fullName: System.Diagnostics.TraceSource
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String)
  nameWithType: Log.WriteEntry(String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String)
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String,TraceEventType)
  nameWithType: Log.WriteEntry(String,TraceEventType)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType)
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String,TraceEventType,Int32)
  nameWithType: Log.WriteEntry(String,TraceEventType,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception)
  nameWithType: Log.WriteException(Exception)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception,TraceEventType,String)
  nameWithType: Log.WriteException(Exception,TraceEventType,String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String)
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception,TraceEventType,String,Int32)
  nameWithType: Log.WriteException(Exception,TraceEventType,String,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String,Int32)
- uid: Microsoft.VisualBasic.Logging.Log.#ctor*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log
  nameWithType: Log.Log
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: InitializeWithDefaultsSinceNoConfigExists
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: TraceSource
  nameWithType: Log.TraceSource
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry
  nameWithType: Log.WriteEntry
- uid: Microsoft.VisualBasic.Logging.Log.WriteException*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException
  nameWithType: Log.WriteException
