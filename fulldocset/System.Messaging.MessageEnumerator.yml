### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageEnumerator
  id: MessageEnumerator
  children:
  - System.Messaging.MessageEnumerator.Close
  - System.Messaging.MessageEnumerator.Current
  - System.Messaging.MessageEnumerator.CursorHandle
  - System.Messaging.MessageEnumerator.Dispose
  - System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  - System.Messaging.MessageEnumerator.MoveNext
  - System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.Reset
  - System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: MessageEnumerator
  nameWithType: MessageEnumerator
  fullName: System.Messaging.MessageEnumerator
  type: Class
  summary: "Fornisce un cursore forward-only per enumerare i messaggi in una coda di messaggi."
  remarks: "Utilizzare MessageEnumerator per un&quot;interazione dinamica con i messaggi in una coda. Metodi disponibili tramite il <xref:System.Messaging.MessageQueue>classe può restituire entrambe un MessageEnumerator che punta a un elenco dinamico di messaggi nella coda o una matrice che contiene una copia in un determinato istante - uno snapshot - della coda al momento è stato chiamato il metodo specificato.</xref:System.Messaging.MessageQueue>       A differenza di uno snapshot statico, un enumeratore consente di modificare la raccolta. Utilizza un oggetto MessageEnumerator, è possibile rimuovere i messaggi dalla coda e la modifica viene riflessa immediatamente nella coda.       Un enumeratore non rimuove i messaggi dalla coda quando viene eseguita una query la coda. Restituisce informazioni sul messaggio nella posizione corrente del cursore, ma lascia il messaggio nella coda.       Un oggetto MessageEnumerator è un cursore, inizializzato all&quot;inizio di un elenco dinamico. L&quot;ordine dell&quot;elenco è identico all&quot;ordine dei messaggi nella coda, in base alla priorità del messaggio. È possibile spostare il cursore per il primo messaggio nella coda chiamando <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> Dopo l&quot;enumeratore è stato inizializzato, è possibile utilizzare <xref:System.Messaging.MessageEnumerator.MoveNext%2A>per avanzare tra i messaggi rimanenti.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> È possibile specificare se per l&quot;attesa di un messaggio diventi disponibile passando un timeout di <xref:System.Messaging.MessageEnumerator.MoveNext%2A>metodo.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Poiché l&quot;enumeratore è dinamico, un messaggio che viene aggiunto oltre la posizione del cursore corrente (ad esempio, a causa di priorità bassa), sono accessibili dall&quot;enumeratore. Un messaggio che viene inserito prima che la posizione corrente del cursore non è accessibile. Non è possibile tornare indietro con un oggetto MessageEnumerator. Un cursore consente lo spostamento di tipo forward-only. Il <xref:System.Messaging.MessageEnumerator.Reset%2A>metodo consente di posizionare il cursore all&quot;inizio della coda.</xref:System.Messaging.MessageEnumerator.Reset%2A>       Le istanze di MessageEnumerator per una determinata coda funzionano in modo indipendente. È possibile creare due istanze di MessageEnumerator che si applicano alla stessa coda. Le modifiche apportate ai messaggi nella coda uno MessageEnumerator verranno riportate immediatamente in un secondo enumeratore se il secondo enumeratore è posizionato prima del primo. Tuttavia, se due enumeratori hanno la stessa posizione e uno di essi rimuove il messaggio in tale posizione, viene generata un&quot;eccezione se l&quot;altro enumeratore tenta di ottenere il valore della <xref:System.Messaging.MessageEnumerator.Current%2A>proprietà sul messaggio appena eliminato.</xref:System.Messaging.MessageEnumerator.Current%2A>      > [!NOTE] > Se si crea un&quot;istanza di <xref:System.Messaging.MessageQueue>con <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName>impostato su `true`, altre applicazioni non possono modificare i messaggi dell&quot;enumeratore mentre è attiva la connessione alla coda.</xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue>"
  example:
  - "The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority?displayProperty=fullName>.  \n  \n [!code-cs[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/csharp/t-system.messaging.messa_2_1.cs)]\n [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/cpp/t-system.messaging.messa_2_1.cpp)]\n [!code-vb[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_2_1.vb)]"
  syntax:
    content: 'public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Close
  id: Close
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Libera le risorse associate all&quot;enumeratore."
  remarks: "Il sistema operativo mantiene un handle aperto per la coda nel corso della durata del cursore. Al termine dell&quot;utilizzo con l&quot;enumeratore, chiamata Chiudi per rilasciare le risorse associate all&quot;handle."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Current
  id: Current
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene l&quot;oggetto corrente <xref href=&quot;System.Messaging.Message&quot;> </xref> punta questo enumeratore."
  remarks: "Quando viene creato l&quot;enumeratore, fa riferimento all&quot;inizio della coda, in corrispondenza della posizione prima del primo messaggio. In questo caso, corrente non è valido e verrà generata un&quot;eccezione se vi si accede. È necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A>per posizionare il cursore il primo messaggio nella coda.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message Current { get; }
    return:
      type: System.Messaging.Message
      description: "Il messaggio corrente."
  overload: System.Messaging.MessageEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La chiamata corrente prima della prima chiamata a <> </> *>. Il cursore si trova prima del primo elemento dell&quot;enumerazione del messaggio.       - oppure - corrente è stato chiamato dopo una chiamata a <> </> *> ha restituito <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> (che indica il cursore si trova dopo l&quot;ultimo elemento dell&quot;enumerazione del messaggio.)"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Il messaggio in cui che l&quot;enumeratore fa attualmente riferimento non esiste. Potrebbe essere stato eliminato."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.CursorHandle
  id: CursorHandle
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene il servizio Accodamento messaggi cursore handle nativo utilizzato per visualizzare i messaggi nella coda."
  remarks: "Questa proprietà contiene l&quot;handle nativo di enumerazione. Quando si termina di utilizzare con l&quot;enumeratore, chiamare <xref:System.Messaging.MessageEnumerator.Close%2A>per rilasciare la risorsa.</xref:System.Messaging.MessageEnumerator.Close%2A>"
  syntax:
    content: public IntPtr CursorHandle { get; }
    return:
      type: System.IntPtr
      description: "L&quot;handle nativo dei cursori."
  overload: System.Messaging.MessageEnumerator.CursorHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "L&quot;handle non esiste."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose
  id: Dispose
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rilascia tutte le risorse usate dal <xref href=&quot;System.Messaging.MessageEnumerator&quot;> </xref>."
  remarks: "La chiamata a Dispose consente le risorse usate dal <xref:System.Messaging.MessageEnumerator>riallocazione per altri scopi.</xref:System.Messaging.MessageEnumerator> Per ulteriori informazioni su Dispose, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.Messaging.MessageEnumerator&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico <xref:System.Messaging.MessageEnumerator.Dispose%2A>metodo e <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageEnumerator.Dispose%2A> `Dispose()`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A>richiama `Dispose` con `disposing` impostato su `false`.</xref:System.Object.Finalize%2A>       Quando il `disposing` parametro `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Messaging.MessageEnumerator>riferimenti.</xref:System.Messaging.MessageEnumerator> Questo metodo richiama il `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext
  id: MoveNext
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Sposta l&quot;enumeratore per il messaggio successivo nella coda, se è attualmente disponibile."
  remarks: "Questo overload restituisce immediatamente se non sono presenti messaggi nella coda. Un altro overload in attesa di un oggetto specificato è <xref:System.TimeSpan>per un messaggio in arrivo.</xref:System.TimeSpan>       Se un messaggio non è attualmente disponibile perché la coda è vuota o perché sono stati spostati oltre l&quot;ultimo elemento nella raccolta, MoveNext restituisce `false` al metodo di chiamata.       Al momento della creazione, un enumeratore concettualmente prima del primo messaggio della coda e la prima chiamata a MoveNext consente di visualizzare il messaggio prima della coda."
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;enumeratore ha completato il passaggio al successivo messaggio; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se l&quot;enumeratore ha raggiunto la fine della coda."
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "È stata generata un&quot;eccezione specifica di Accodamento messaggi."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  id: MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Sposta l&quot;enumeratore per il messaggio successivo nella coda. Se l&quot;enumeratore è posizionato alla fine della coda, <xref:System.Messaging.MessageEnumerator.MoveNext*>attende fino a quando non è disponibile un messaggio o alla scadenza del timeout specificato.</xref:System.Messaging.MessageEnumerator.MoveNext*>"
  remarks: "Questo overload è in attesa se sono presenti messaggi nella coda o se il cursore ha raggiunto la fine della coda. Se un messaggio non è attualmente disponibile perché la coda è vuota o perché sono stati spostati oltre l&quot;ultimo elemento nella raccolta, <xref:System.Messaging.MessageEnumerator.MoveNext%2A>attende il timeout specificato.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Se il cursore si trova già alla fine della coda, <xref:System.Messaging.MessageEnumerator.MoveNext%2A>restituisce solo `true` se il nuovo messaggio arriva entro l&quot;intervallo di tempo specificato, ha una priorità inferiore rispetto a tutti i messaggi attualmente nella coda e viene inserito alla fine della coda.</xref:System.Messaging.MessageEnumerator.MoveNext%2A> Un overload senza parametri restituisce immediatamente se sono presenti altri messaggi nella coda.       Al momento della creazione, un enumeratore concettualmente prima del primo messaggio dell&quot;enumerazione e la prima chiamata a <xref:System.Messaging.MessageEnumerator.MoveNext%2A>consente il primo messaggio dell&quot;enumerazione nella visualizzazione.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public bool MoveNext (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Il <xref:System.TimeSpan>attendere un messaggio diventi disponibile se l&quot;enumeratore è posizionato alla fine della coda.</xref:System.TimeSpan>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;enumeratore viene spostato sul messaggio successivo; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se l&quot;enumeratore ha raggiunto la fine della coda e si rende disponibile un messaggio entro il tempo specificato per il <code> timeout </code> parametro."
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il valore specificato per il parametro di timeout non è valido. Potrebbe rappresentare un numero negativo."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "È stata generata un&quot;eccezione specifica di Accodamento messaggi.       - oppure - il timeout è scaduto."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  id: RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rimuove il messaggio corrente da una coda transazionale o non transazionale e restituisce il messaggio all&quot;applicazione chiamante. Non vi è alcun timeout specificato per un messaggio è arrivato nella coda."
  remarks: "RemoveCurrent rimuove e restituisce il messaggio nella posizione corrente del cursore.       Se si utilizza l&quot;inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <xref:System.Messaging.MessageQueue>della classe <xref:System.Messaging.MessageQueue.Receive%2A>metodo.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo. Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A>dopo la chiamata RemoveCurrent.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Se si chiama questo overload in una coda transazionale, Accodamento messaggi consente di creare una singola transazione interna."
  syntax:
    content: public System.Messaging.Message RemoveCurrent ();
    parameters: []
    return:
      type: System.Messaging.Message
      description: "Oggetto <xref href=&quot;System.Messaging.Message&quot;> </xref> che fa riferimento il primo messaggio disponibile nella coda."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rimuove il messaggio corrente da una coda transazionale e restituisce il messaggio all&quot;applicazione chiamante. Non vi è alcun timeout specificato per un messaggio è arrivato nella coda."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Rimuove e restituisce il messaggio nella posizione corrente del cursore, utilizzando il contesto di transazione interna definito per il `transaction` parametro.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       Se si utilizza l&quot;inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <xref:System.Messaging.MessageQueue>della classe <xref:System.Messaging.MessageQueue.Receive%2A>metodo.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando si utilizzano code transazionali, un rollback di una transazione provoca dei messaggi rimossi da una chiamata a <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>deve essere restituito alla coda.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> La rimozione non è irreversibile fino a quando non viene eseguito il commit della transazione.       Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo. Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A>dopo la chiamata <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "Il <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> oggetto che specifica la transazione in cui il messaggio verrà rimosso."
    return:
      type: System.Messaging.Message
      description: "Oggetto <xref href=&quot;System.Messaging.Message&quot;> </xref> che fa riferimento il primo messaggio disponibile nella coda."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rimuove il messaggio corrente da una coda e restituisce il messaggio all&quot;applicazione chiamante. Non vi è alcun timeout specificato per un messaggio è arrivato nella coda."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Rimuove e restituisce il messaggio nella posizione corrente del cursore, utilizzando il contesto di transazione definito dal `transactionType` parametro.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       Specificare `Automatic` per il `transactionType` parametro se è già presente un contesto di transazione esterno associato al thread che si desidera utilizzare per ricevere il messaggio. Specificare `Single` se si desidera ricevere il messaggio come una singola transazione interna. È possibile specificare `None` se si desidera ricevere un messaggio da una coda transazionale di fuori di un contesto di transazione.       Se si utilizza l&quot;inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <xref:System.Messaging.MessageQueue>della classe <xref:System.Messaging.MessageQueue.Receive%2A>metodo.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando si utilizzano code transazionali, un rollback di una transazione provoca dei messaggi rimossi da una chiamata a <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>deve essere restituito alla coda.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> La rimozione non è irreversibile fino a quando non viene eseguito il commit della transazione.       Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo. Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A>dopo la chiamata <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "Uno del <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> valori, che descrive il tipo di contesto di transazione da associare al messaggio."
    return:
      type: System.Messaging.Message
      description: "Oggetto <xref href=&quot;System.Messaging.Message&quot;> </xref> che fa riferimento il primo messaggio disponibile nella coda."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Il <code> transactionType </code> parametro non fa parte di <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> membri."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  id: RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rimuove il messaggio corrente dalla coda e restituisce il messaggio all&quot;applicazione chiamante. Se è necessario rimuovere un messaggio, il metodo restituisce immediatamente. In caso contrario, il metodo attende il timeout specificato per un nuovo messaggio in arrivo."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Rimuove e restituisce il messaggio nella posizione corrente del cursore.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Se il cursore si trova alla fine della coda, l&quot;overload del metodo attende fino a quando non è disponibile un messaggio o l&quot;intervallo specificato da di `timeout` parametro è scaduto.       Se si utilizza l&quot;inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <xref:System.Messaging.MessageQueue>della classe <xref:System.Messaging.MessageQueue.Receive%2A>metodo.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo. Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A>dopo la chiamata <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>       Se si chiama questo overload in una coda transazionale, Accodamento messaggi consente di creare una singola transazione interna."
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "L&quot;intervallo di tempo di attesa di un messaggio è arrivato nella coda."
    return:
      type: System.Messaging.Message
      description: "Oggetto <xref href=&quot;System.Messaging.Message&quot;> </xref> che fa riferimento il primo messaggio disponibile nella coda."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il valore specificato per il <code> timeout </code> parametro non è valido."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Il timeout è scaduto."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rimuove il messaggio corrente da una coda transazionale e restituisce il messaggio all&quot;applicazione chiamante. Se è necessario rimuovere un messaggio, il metodo restituisce immediatamente. In caso contrario, il metodo attende il timeout specificato per un nuovo messaggio in arrivo."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Rimuove e restituisce il messaggio nella posizione corrente del cursore.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Se il cursore si trova alla fine della coda, l&quot;overload del metodo attende fino a quando non è disponibile un messaggio o l&quot;intervallo specificato da di `timeout` parametro è scaduto.       Quando si utilizzano code transazionali, un rollback di una transazione provoca dei messaggi rimossi da una chiamata a <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>deve essere restituito alla coda.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> La rimozione non è irreversibile fino a quando non viene eseguito il commit della transazione.       Se si utilizza l&quot;inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <xref:System.Messaging.MessageQueue>della classe <xref:System.Messaging.MessageQueue.Receive%2A>metodo.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo. Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A>dopo la chiamata <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "L&quot;intervallo di tempo di attesa per il messaggio deve essere rimosso."
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "Il <xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> oggetto che specifica il contesto di transazione per il messaggio."
    return:
      type: System.Messaging.Message
      description: "Oggetto <xref href=&quot;System.Messaging.Message&quot;> </xref> che fa riferimento il primo messaggio disponibile nella coda."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il valore specificato per il <code> timeout </code> parametro non è valido."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Il timeout è scaduto."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rimuove il messaggio corrente da una coda e restituisce il messaggio all&quot;applicazione chiamante. Se è necessario rimuovere un messaggio, il metodo restituisce immediatamente. In caso contrario, il metodo attende il timeout specificato per un nuovo messaggio in arrivo."
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>Rimuove e restituisce il messaggio nella posizione corrente del cursore, utilizzando il contesto di transazione definito dal `transactionType` parametro.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Se il cursore si trova alla fine della coda, l&quot;overload del metodo attende fino a quando non è disponibile un messaggio o l&quot;intervallo specificato da di `timeout` parametro è scaduto.       Specificare `Automatic` per il `transactionType` parametro se è già presente un contesto di transazione esterno associato al thread che si desidera utilizzare per ricevere il messaggio. Specificare `Single` se si desidera ricevere il messaggio come una singola transazione interna. È possibile specificare `None` se si desidera ricevere un messaggio da una coda transazionale di fuori di un contesto di transazione.       Se si utilizza l&quot;inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <xref:System.Messaging.MessageQueue>della classe <xref:System.Messaging.MessageQueue.Receive%2A>metodo.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       Quando si utilizzano code transazionali, un rollback di una transazione provoca dei messaggi rimossi da una chiamata a <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>deve essere restituito alla coda.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> La rimozione non è irreversibile fino a quando non viene eseguito il commit della transazione.       Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo. Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A>dopo la chiamata <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> </xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "L&quot;intervallo di tempo di attesa per il messaggio deve essere rimosso."
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "Uno del <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> valori, che descrive il tipo di contesto di transazione da associare al messaggio."
    return:
      type: System.Messaging.Message
      description: "Oggetto <xref href=&quot;System.Messaging.Message&quot;> </xref> che fa riferimento il primo messaggio disponibile nella coda."
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il valore specificato per il <code> timeout </code> parametro non è valido."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "Il timeout è scaduto."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Il <code> transactionType </code> parametro non fa parte di <xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;> </xref> membri."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Reset
  id: Reset
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Reimposta l&quot;enumeratore corrente in modo che punti all&quot;inizio della coda."
  remarks: "Un enumeratore possibile solo spostare in avanti. Utilizzare questo metodo per ricominciare all&quot;inizio della coda.       Dopo la chiamata a Reset, il cursore punta al primo messaggio. Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A>dopo la chiamata di reimpostazione per spostare il cursore avanti al primo messaggio nella coda.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Restituisce un <xref href=&quot;System.Messaging.Message&quot;> </xref> che fa riferimento il messaggio nella posizione corrente del cursore."
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "Oggetto <xref href=&quot;System.Messaging.Message&quot;> </xref> che fa riferimento il messaggio nella posizione corrente del cursore."
  overload: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Messaging.MessageEnumerator.Close
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
- uid: System.Messaging.MessageEnumerator.Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.MessageEnumerator.CursorHandle
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageEnumerator.Dispose
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageEnumerator.MoveNext
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
- uid: System.Messaging.MessageQueueTransaction
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
- uid: System.Messaging.MessageQueueTransactionType
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionType
  nameWithType: MessageQueueTransactionType
  fullName: System.Messaging.MessageQueueTransactionType
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
- uid: System.Messaging.MessageEnumerator.Reset
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageEnumerator.Close*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close
  nameWithType: MessageEnumerator.Close
- uid: System.Messaging.MessageEnumerator.Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
- uid: System.Messaging.MessageEnumerator.CursorHandle*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
- uid: System.Messaging.MessageEnumerator.Dispose*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose
  nameWithType: MessageEnumerator.Dispose
- uid: System.Messaging.MessageEnumerator.MoveNext*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: MessageEnumerator.MoveNext
- uid: System.Messaging.MessageEnumerator.RemoveCurrent*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent
  nameWithType: MessageEnumerator.RemoveCurrent
- uid: System.Messaging.MessageEnumerator.Reset*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset
  nameWithType: MessageEnumerator.Reset
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
