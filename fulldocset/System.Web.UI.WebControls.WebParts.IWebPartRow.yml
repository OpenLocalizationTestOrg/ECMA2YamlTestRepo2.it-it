### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow
  id: IWebPartRow
  children:
  - System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  - System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  langs:
  - csharp
  name: IWebPartRow
  nameWithType: IWebPartRow
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow
  type: Interface
  summary: "Definisce un&quot;interfaccia di provider per la connessione di due controlli server tramite un singolo campo di dati."
  remarks: "Questa interfaccia è progettata per essere utilizzato con le connessioni Web part. In una connessione Web part, due controlli server che risiedono in un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zona stabilire una connessione e condividono dati, con un controllo che funge da consumer e l&quot;altro controllo che funge da provider.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Il meccanismo per la condivisione dei dati in una connessione Web part è un&quot;istanza di interfaccia, viene utilizzato il provider al consumer tramite un metodo di callback. Per stabilire una connessione, il consumer e provider devono utilizzare entrambi con lo stesso tipo di interfaccia per la condivisione dei dati. Se il consumer non riconosce il tipo di interfaccia inviato dal provider, è comunque possibile connettere i controlli tramite un trasformatore (un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>oggetto) che converte l&quot;istanza dell&quot;interfaccia inviata dal provider in un tipo riconosciuto dal consumer.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Per informazioni dettagliate sulle connessioni, vedere <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>e [Cenni preliminari sulle connessioni di Web part](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       L&quot;interfaccia IWebPartRow è un&quot;interfaccia del provider inclusa con il controllo di Web part come interfaccia standard per la creazione di connessioni basate su una riga di dati. È inoltre possibile creare interfacce personalizzate da utilizzare con le connessioni Web part, ma in molte applicazioni Web basate sui dati è utile creare le connessioni basate su un campo comune (per informazioni dettagliate, vedere il <xref:System.Web.UI.WebControls.WebParts.IWebPartField>interfaccia), tabella (per informazioni dettagliate, vedere il <xref:System.Web.UI.WebControls.WebParts.IWebPartTable>interfaccia), o una riga dall&quot;origine dati.</xref:System.Web.UI.WebControls.WebParts.IWebPartTable> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> In una normale connessione, un <xref:System.Web.UI.WebControls.WebParts.WebPart>controllare agisce come un provider implementa l&quot;interfaccia IWebPartRow e fornire un&quot;istanza dell&quot;interfaccia ai consumer in un metodo di callback speciale.</xref:System.Web.UI.WebControls.WebParts.WebPart> Ad esempio, il provider potrebbe implementare un&quot;interfaccia IWebPartRow per una riga che corrisponde a un utente nella tabella delle informazioni utente. Un altro <xref:System.Web.UI.WebControls.WebParts.WebPart>controllare agisce come un consumer, potrebbe definire un metodo speciale per ricevere l&quot;istanza dell&quot;interfaccia e può quindi estrarre i dati utente, utilizzato per cercare ulteriori informazioni sull&quot;account dell&quot;utente e visualizzare tutte le informazioni relative all&quot;utente nella pagina.</xref:System.Web.UI.WebControls.WebParts.WebPart>       L&quot;interfaccia IWebPartRow include due membri esposti. Il <xref:System.Web.UI.WebControls.WebParts.IWebPartRow.Schema%2A>restituisce informazioni sullo schema relative alla riga di dati incapsulata in un <xref:System.ComponentModel.PropertyDescriptorCollection>oggetto.</xref:System.ComponentModel.PropertyDescriptorCollection> </xref:System.Web.UI.WebControls.WebParts.IWebPartRow.Schema%2A> Il <xref:System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData%2A>metodo dichiara un metodo che utilizza un responsabile dell&quot;implementazione (ad esempio un controllo provider) per recuperare i dati dell&quot;istanza dell&quot;interfaccia della riga quando viene richiamato il metodo di callback.</xref:System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData%2A>"
  example:
  - "The following code example demonstrates how to create a static connection between two controls using the IWebPartRow interface. The code example has three parts:  \n  \n-   Source code for two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can form a connection using the IWebPartRow interface, with one control acting as the provider, and the other acting as the consumer.  \n  \n-   A Web page that hosts the controls and declares the static connection in persistence format.  \n  \n-   A description of what happens when the example code runs.  \n  \n The first part of the code example is the source code for the two custom controls. First is the code for the provider, which implements the IWebPartRow interface. For simplicity in the example, the provider creates a table with some data rather than connecting to a database. The `GetConnectionInterface` method serves as the provider's connection point, the callback method that returns the interface instance to the consumer. As for the consumer, it retrieves the interface instance from the provider in its method named `SetConnectionInterface`, which is marked with a `ConnectionConsumer` attribute. After retrieving the instance of the interface, the consumer, in its `OnPreRender` method, calls the implementation of the <xref:System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData%2A> method in the provider, to retrieve the actual data and write it to the page.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_327_1.cs)]\n [!code-vb[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_327_1.vb)]  \n  \n The second part of the code example is the Web page that declares the static connection and hosts the controls. Near the top of the page is a `Register` directive that declares the namespace of the source code contained in the App_Code directory. The connection is declared using an `<asp:webpartconnection>` element. The custom consumer and provider controls are declared in a `<zonetemplate>` element within an `<asp:webpartzone>` element, which is required for them to be able to connect (they must reside within a zone that inherits from the <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> class).  \n  \n [!code-vb[WebParts_IWebPartRow_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_327_2.aspx)]\n [!code-cs[WebParts_IWebPartRow_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_327_2.aspx)]  \n  \n Load the page in a browser. The consumer control displays the data provided from the specified row, which the provider makes available through an instance of the IWebPartRow interface."
  syntax:
    content: public interface IWebPartRow
  implements: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  id: GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  langs:
  - csharp
  name: GetRowData(RowCallback)
  nameWithType: IWebPartRow.GetRowData(RowCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(RowCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Restituisce i dati per la riga che viene utilizzato dall&quot;interfaccia come base di una connessione tra due <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controlli."
  remarks: "Utilizzare questo metodo per recuperare i valori di riga di dati passati dall&quot;interfaccia. Il provider implementa questo metodo, e il consumer richiama in corrispondenza del punto quando il consumer non è pronto per elaborare o eseguire il rendering di dati."
  example:
  - "The following code example shows the implementation and use of the GetRowData method. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartRow> interface. The provider control implements the GetRowData method, returning the value of a particular row in the data table. The consumer control calls the GetRowData method in its `OnPreRender` method, so that the value of the data can be written to the page.  \n  \n [!code-cs[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/csharp/98668bea-41a0-4fc3-85fe-_1.cs)]\n [!code-vb[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/visualbasic/98668bea-41a0-4fc3-85fe-_1.vb)]"
  syntax:
    content: public void GetRowData (System.Web.UI.WebControls.WebParts.RowCallback callback);
    parameters:
    - id: callback
      type: System.Web.UI.WebControls.WebParts.RowCallback
      description: "Oggetto <xref href=&quot;System.Web.UI.WebControls.WebParts.RowCallback&quot;> </xref> delegato che contiene l&quot;indirizzo di un metodo che riceve i dati."
  overload: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  id: Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  langs:
  - csharp
  name: Schema
  nameWithType: IWebPartRow.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Ottiene informazioni sullo schema per una riga di dati utilizzato per condividere dati tra due <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> controlli."
  remarks: "Questa proprietà fornisce informazioni sulle proprietà per i dati. Utilizzo di <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>interfaccia in una connessione, viene visualizzato un <xref:System.ComponentModel.PropertyDescriptorCollection>oggetto, che fa riferimento la proprietà dello Schema.</xref:System.ComponentModel.PropertyDescriptorCollection> </xref:System.Web.UI.WebControls.WebParts.IWebPartRow> Il contratto specifica che la chiamata `Schema[n].GetValue(RowData)` restituisce il valore della *n*colonne nella riga. È necessario utilizzare la proprietà dello Schema per ottenere i valori nella riga."
  example:
  - "The following code example shows the implementation and use of the Schema property. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartRow> interface. The provider control implements the Schema property. Then the consumer control, in its `RenderContents` method, queries the Schema property to retrieve information about the row as it writes the row data to the page.  \n  \n [!code-cs[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_721_1.cs)]\n [!code-vb[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_721_1.vb)]"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection Schema { get; }
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Oggetto <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> che descrive i dati."
  overload: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: GetRowData(RowCallback)
  nameWithType: IWebPartRow.GetRowData(RowCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(RowCallback)
- uid: System.Web.UI.WebControls.WebParts.RowCallback
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: RowCallback
  nameWithType: RowCallback
  fullName: System.Web.UI.WebControls.WebParts.RowCallback
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: Schema
  nameWithType: IWebPartRow.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData*
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: GetRowData
  nameWithType: IWebPartRow.GetRowData
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema*
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: Schema
  nameWithType: IWebPartRow.Schema
