### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueEnumerator
  id: MessageQueueEnumerator
  children:
  - System.Messaging.MessageQueueEnumerator.Close
  - System.Messaging.MessageQueueEnumerator.Current
  - System.Messaging.MessageQueueEnumerator.Dispose
  - System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  - System.Messaging.MessageQueueEnumerator.LocatorHandle
  - System.Messaging.MessageQueueEnumerator.MoveNext
  - System.Messaging.MessageQueueEnumerator.Reset
  - System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: MessageQueueEnumerator
  nameWithType: MessageQueueEnumerator
  fullName: System.Messaging.MessageQueueEnumerator
  type: Class
  summary: "Fornisce un cursore forward-only per enumerare i messaggi in una coda di messaggi."
  remarks: "Utilizzare MessageQueueEnumerator per un&quot;interazione dinamica con le code in rete. Metodi disponibili tramite il <xref:System.Messaging.MessageQueue>classe può restituire entrambe un MessageQueueEnumerator contenente un elenco dinamico di code o una matrice che contiene uno snapshot dell&quot;insieme di code al momento è stato chiamato il metodo specificato.</xref:System.Messaging.MessageQueue>       Non è stato definito nessun ordine di code in una rete. Non sono ordinati, ad esempio, per computer, etichetta, stato pubblico o privato o altri criteri accessibili all&quot;utente. Un oggetto MessageQueueEnumerator è un cursore, inizializzato all&quot;inizio di un elenco dinamico. È possibile spostare il cursore sulla prima coda dell&quot;enumerazione chiamando <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> Dopo l&quot;enumeratore è stato inizializzato, è possibile utilizzare <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>per avanzare tra le code rimanenti.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>       Non è possibile tornare indietro con un oggetto MessageQueueEnumerator. Un cursore consente solo il movimento in avanti mediante l&quot;enumerazione di coda. Tuttavia, è possibile chiamare <xref:System.Messaging.MessageQueueEnumerator.Reset%2A>per reimpostare l&quot;enumerazione e posizionare il cursore all&quot;inizio dell&quot;elenco.</xref:System.Messaging.MessageQueueEnumerator.Reset%2A> Poiché l&quot;enumeratore è dinamico, una coda che viene aggiunto oltre la posizione corrente del cursore sono accessibili dall&quot;enumeratore. Impossibile accedere a una coda che viene inserita prima della posizione del cursore corrente senza prima chiamare Reset."
  example:
  - "The following code example iterates through all the message queues in the network, and examines the path for each queue. Finally, it displays the number of public queues on the network.  \n  \n [!code-cs[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/csharp/t-system.messaging.messa_7_1.cs)]\n [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/cpp/t-system.messaging.messa_7_1.cpp)]\n [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_7_1.vb)]"
  syntax:
    content: 'public class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Close
  id: Close
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Close()
  nameWithType: MessageQueueEnumerator.Close()
  fullName: System.Messaging.MessageQueueEnumerator.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Libera le risorse associate all&quot;enumeratore."
  remarks: "Il sistema operativo mantiene un handle aperto, <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, per l&quot;enumeratore della coda nel corso della durata del cursore.</xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A> Al termine del lavoro con l&quot;enumeratore, chiamata Chiudi per rilasciare le risorse associate all&quot;handle."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Current
  id: Current
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: MessageQueueEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene l&quot;oggetto corrente <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> dell&quot;enumerazione."
  remarks: "Quando viene creato l&quot;enumeratore, non corrisponde ad alcun elemento, in modo corrente non è valido e verrà generata un&quot;eccezione se vi si accede. È necessario chiamare <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>per posizionare il cursore nella prima coda nell&quot;enumerazione.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>       Più chiamate a corrente senza alcuna chiamata a <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>restituirà lo stesso <xref:System.Messaging.MessageQueue>oggetto.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.MessageQueue Current { get; }
    return:
      type: System.Messaging.MessageQueue
      description: "La coda in cui è attualmente posizionato il cursore."
  overload: System.Messaging.MessageQueueEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La chiamata corrente prima della prima chiamata a <> </> *>. Il cursore precede la prima coda nell&quot;enumerazione.       - oppure - corrente è stato chiamato dopo una chiamata a <> </> *> ha restituito false (che indica il cursore si trova dopo l&quot;ultima coda dell&quot;enumerazione)."
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueEnumerator.Dispose()
  fullName: System.Messaging.MessageQueueEnumerator.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rilascia tutte le risorse usate dal <xref href=&quot;System.Messaging.MessageQueueEnumerator&quot;> </xref>."
  remarks: "La chiamata a Dispose consente le risorse usate dal <xref:System.Messaging.MessageQueueEnumerator>riallocazione per altri scopi.</xref:System.Messaging.MessageQueueEnumerator> Per ulteriori informazioni su Dispose, vedere [la pulizia di risorse non gestite](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.Messaging.MessageQueueEnumerator&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  remarks: "Questo metodo viene chiamato dal metodo pubblico <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>metodo e <xref:System.Object.Finalize%2A>metodo.</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> `Dispose`richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A>richiama `Dispose` con `disposing` impostato su `false`.</xref:System.Object.Finalize%2A>       Quando il `disposing` parametro `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <xref:System.Messaging.MessageQueueEnumerator>riferimenti.</xref:System.Messaging.MessageQueueEnumerator> Questo metodo richiama il `Dispose` metodo di ciascun oggetto cui viene fatto riferimento."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Messaging.MessageQueueEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle
  id: LocatorHandle
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene l&quot;handle nativo di Accodamento messaggi utilizzato per individuare le code in una rete."
  remarks: "Quando non è più necessario questo <xref:System.Messaging.MessageQueueEnumerator>dell&quot;istanza, chiamare <xref:System.Messaging.MessageQueueEnumerator.Close%2A>per liberare l&quot;handle per la risorsa.</xref:System.Messaging.MessageQueueEnumerator.Close%2A> </xref:System.Messaging.MessageQueueEnumerator>"
  syntax:
    content: public IntPtr LocatorHandle { get; }
    return:
      type: System.IntPtr
      description: "L&quot;handle nativo per la coda corrente."
  overload: System.Messaging.MessageQueueEnumerator.LocatorHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "L&quot;handle non esiste."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Il codice chiamante non dispone di autorizzazioni di visualizzazione."
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.MoveNext
  id: MoveNext
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: MessageQueueEnumerator.MoveNext()
  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Sposta l&quot;enumeratore per la coda successiva dell&quot;enumerazione, se è attualmente disponibile."
  remarks: "MoveNext restituisce `false` immediatamente se non esistono code associate all&quot;enumerazione.       MoveNext restituirà `true` fino a quando non raggiunta la fine della raccolta. Verrà quindi restituito `false` per ogni chiamata successiva. Tuttavia una volta MoveNext ha restituito `false`, l&quot;accesso al <xref:System.Messaging.MessageQueueEnumerator.Current%2A>proprietà genererà un&quot;eccezione.</xref:System.Messaging.MessageQueueEnumerator.Current%2A>       Al momento della creazione, un enumeratore concettualmente prima del primo <xref:System.Messaging.MessageQueue>dell&quot;enumerazione e la prima chiamata a MoveNext consente la prima coda dell&quot;enumerazione nella visualizzazione.</xref:System.Messaging.MessageQueue>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;enumeratore è stato spostato correttamente in avanti coda; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> se l&quot;enumeratore ha raggiunto la fine dell&quot;enumerazione."
  overload: System.Messaging.MessageQueueEnumerator.MoveNext*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Il codice chiamante non dispone di autorizzazioni di visualizzazione."
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Reset
  id: Reset
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: MessageQueueEnumerator.Reset()
  fullName: System.Messaging.MessageQueueEnumerator.Reset()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Reimposta il cursore, in modo che punti all&quot;inizio dell&quot;enumerazione."
  remarks: "Un enumeratore viene spostato in una direzione forward-only. Utilizzare questo metodo per tornare all&quot;inizio dell&quot;enumerazione delle code.       Reimpostazione posiziona il cursore nella prima coda nell&quot;elenco. Non è necessario chiamare <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>dopo la chiamata di reimpostazione per spostare il cursore avanti sulla prima coda nell&quot;enumerazione.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Ottiene l&quot;oggetto corrente <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> dell&quot;enumerazione."
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "La coda in cui è attualmente posizionato il cursore."
  overload: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Messaging.MessageQueueEnumerator.Close
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Close()
  nameWithType: MessageQueueEnumerator.Close()
  fullName: System.Messaging.MessageQueueEnumerator.Close()
- uid: System.Messaging.MessageQueueEnumerator.Current
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageQueueEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.Current
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.MessageQueueEnumerator.Dispose
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueEnumerator.Dispose()
  fullName: System.Messaging.MessageQueueEnumerator.Dispose()
- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageQueueEnumerator.MoveNext
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: MessageQueueEnumerator.MoveNext()
  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()
- uid: System.Messaging.MessageQueueEnumerator.Reset
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Reset()
  nameWithType: MessageQueueEnumerator.Reset()
  fullName: System.Messaging.MessageQueueEnumerator.Reset()
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageQueueEnumerator.Close*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Close
  nameWithType: MessageQueueEnumerator.Close
- uid: System.Messaging.MessageQueueEnumerator.Current*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageQueueEnumerator.Current
- uid: System.Messaging.MessageQueueEnumerator.Dispose*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueEnumerator.Dispose
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
- uid: System.Messaging.MessageQueueEnumerator.MoveNext*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: MessageQueueEnumerator.MoveNext
- uid: System.Messaging.MessageQueueEnumerator.Reset*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Reset
  nameWithType: MessageQueueEnumerator.Reset
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
