### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.ClaimsPrincipal
  id: ClaimsPrincipal
  children:
  - System.Security.Claims.ClaimsPrincipal.#ctor
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsPrincipal.Claims
  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  - System.Security.Claims.ClaimsPrincipal.Clone
  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.Current
  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  - System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsPrincipal.Identities
  - System.Security.Claims.ClaimsPrincipal.Identity
  - System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
  type: Class
  summary: "Un <xref:System.Security.Principal.IPrincipal>implementazione che supporta più identità basata sulle attestazioni.</xref:System.Security.Principal.IPrincipal>"
  remarks: "A partire da .NET Framework 4.5, Windows Identity Foundation (WIF) e l&quot;identità basata sulle attestazioni sono state completamente integrate in .NET Framework. Ciò significa che molte classi che rappresentano un&quot;entità in .NET Framework ora derivano da ClaimsPrincipal anziché semplicemente l&quot;implementazione di <xref:System.Security.Principal.IPrincipal>interfaccia.</xref:System.Security.Principal.IPrincipal> Oltre all&quot;implementazione di <xref:System.Security.Principal.IPrincipal>interfaccia ClaimsPrincipal espone proprietà e metodi utili per l&quot;utilizzo di attestazioni.</xref:System.Security.Principal.IPrincipal>       ClaimsPrincipal espone una raccolta di valori Identity, ognuno dei quali è un <xref:System.Security.Claims.ClaimsIdentity>.</xref:System.Security.Claims.ClaimsIdentity> In genere, questa raccolta, a cui si accede tramite il <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>proprietà, sarà necessario solo un singolo elemento.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>       L&quot;introduzione di ClaimsPrincipal in .NET 4.5 come entità da cui derivano più classi di entità non impone di modificare qualsiasi elemento nel modo in cui si gestiscono identità. Tuttavia aprire altre possibilità e offrire ulteriori possibilità di esercitare un maggiore controllo di accesso. Ad esempio:-il codice dell&quot;applicazione stessa può lavorare direttamente con le attestazioni contenute nel principale corrente per operazioni di autenticazione, autorizzazione e personalizzazione aggiuntive.      -È possibile front le risorse con una pipeline, che consente di gestire richieste di autenticazione e criteri di autorizzazione prima dell&quot;esecuzione raggiunge il codice di elaborazione delle richieste. Ad esempio, è possibile configurare un servizio o applicazione basata sul web con un gestore di autenticazione attestazioni personalizzate, un&quot;istanza di una classe che deriva dalla <xref:System.Security.Claims.ClaimsAuthenticationManager>classe.</xref:System.Security.Claims.ClaimsAuthenticationManager> Se così configurato, la pipeline di elaborazione richieste richiama il <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>metodo del gestore di autenticazione attestazioni passandolo ClaimsPrincipal che rappresenta il contesto della richiesta in arrivo.</xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> Il gestore di autenticazione delle attestazioni è quindi possibile eseguire l&quot;autenticazione in base ai valori delle attestazioni in ingresso. Anche possibile filtrare, trasformare o aggiungere attestazioni al set di attestazioni in ingresso. Ad esempio, può essere usato per arricchire l&quot;attestazione in ingresso impostato con nuove attestazioni create da un&quot;origine dati locale, ad esempio un profilo utente locale, è possibile configurare un&quot;applicazione basata su web con un gestore autorizzazioni di attestazioni personalizzate, un&quot;istanza di una classe che deriva dalla <xref:System.Security.Claims.ClaimsAuthorizationManager>classe.</xref:System.Security.Claims.ClaimsAuthorizationManager> Se così configurato, la pipeline di elaborazione richieste pacchetti in ingresso entità ClaimsPrincipal in un <xref:System.Security.Claims.AuthorizationContext>e richiama il <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A>metodo nel gestore di autorizzazione delle attestazioni.</xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> </xref:System.Security.Claims.AuthorizationContext> Il gestore di autorizzazione delle attestazioni può quindi applicare l&quot;autorizzazione basata sulle attestazioni in ingresso.      -Inline controlli di accesso di codice basato su attestazioni possono essere eseguiti tramite la configurazione dell&quot;applicazione con un oggetto personalizzato attestazioni Gestione autorizzazioni e utilizzando la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>classe per eseguire controlli di accesso imperativo o <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute>per eseguire l&quot;accesso dichiarativo i controlli.</xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> </xref:System.IdentityModel.Services.ClaimsPrincipalPermission> Controlli di accesso di codice basato su attestazioni vengono eseguite in linea, di fuori della pipeline di elaborazione e pertanto sono disponibili a tutte le applicazioni come un gestore di autorizzazione delle attestazioni è configurato.       Per ottenere un&quot;istanza ClaimsPrincipal per l&quot;entità associata a una richiesta in un&quot;applicazione relying Party (o l&quot;entità in cui un thread è in esecuzione), è possibile eseguire il cast di <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>proprietà ClaimsPrincipal.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> Le attestazioni associate a un oggetto ClaimsPrincipal sono disponibili tramite il relativo <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>proprietà.</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> Il <xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>restituisce tutte le attestazioni contenute dalle identità associato all&quot;entità.</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> Nel caso comune in cui l&quot;entità ClaimsPrincipal contiene più <xref:System.Security.Claims.ClaimsIdentity>istanze, è possibile utilizzare il <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>proprietà oppure è possibile accedere alle identità primaria con la <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>proprietà.</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> </xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Claims.ClaimsIdentity> ClaimsPrincipal fornisce diversi metodi tramite cui possono cercare tali attestazioni e supporta completamente Language Integrated Query (LINQ). Identità possono essere aggiunto all&quot;entità utilizzando la <xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A>o <xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A>metodi.</xref:System.Security.Claims.ClaimsPrincipal.AddIdentity%2A> </xref:System.Security.Claims.ClaimsPrincipal.AddIdentities%2A>      > [!NOTE] > Per aggiungere le identità all&quot;entità ClaimsPrincipal, un chiamante deve essere completamente attendibile.       Per impostazione predefinita, WIF priorità <xref:System.Security.Principal.WindowsIdentity>oggetti quando si seleziona l&quot;identità primaria restituita attraverso il <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>proprietà.</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A> </xref:System.Security.Principal.WindowsIdentity> È possibile modificare questo comportamento specificando un delegato tramite il <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>proprietà per eseguire la selezione.</xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A> Il <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>proprietà fornisce una funzionalità simile per la <xref:System.Security.Claims.ClaimsPrincipal.Current%2A>proprietà.</xref:System.Security.Claims.ClaimsPrincipal.Current%2A> </xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>       Nel modello basato sulle attestazioni, se un&quot;entità è un ruolo specificato è le attestazioni presentate dalle identità sottostante. Il <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A>metodo essenzialmente esamina ogni identità associato all&quot;entità per determinare se dispone di un&quot;attestazione con il valore di ruolo specificato.</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A> Il tipo di attestazione (rappresentato da relativo <xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>proprietà) utilizzato per determinare quali attestazioni devono essere esaminate durante ruolo controlli viene specificato in un&quot;identità tramite il relativo <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>proprietà.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName> </xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> Pertanto, le attestazioni esaminate durante i controlli di ruolo possono essere di tipo diverso per diverse identità associato all&quot;entità."
  example:
  - "The following example extracts the claims presented by a user in an HTTP request and writes them to the HTTP response. The current user is read from the <xref:System.Web.HttpContext> as a ClaimsPrincipal. The claims are then read from it and then are written to the response.  \n  \n```  \n  \nClaimsPrincipal principal = HttpContext.Current.User as ClaimsPrincipal;  \nif (null != principal)  \n{  \n   foreach (Claim claim in principal.Claims)  \n   {  \n      Response.Write(\"CLAIM TYPE: \" + claim.Type + \"; CLAIM VALUE: \" + claim.Value + \"</br>\");  \n   }  \n}  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ClaimsPrincipal : System.Security.Principal.IPrincipal
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IPrincipal
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal()
  nameWithType: ClaimsPrincipal.ClaimsPrincipal()
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> classe."
  remarks: "Nessuna identità è associata con la nuova istanza. (Il <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>raccolta è vuota).</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public ClaimsPrincipal ();
    parameters: []
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> classe utilizzando l&quot;identità delle attestazioni specificate."
  remarks: "Il <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>insieme viene inizializzato con l&quot;identità specificata.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public ClaimsPrincipal (System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities);
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "Identità da cui inizializzare la nuova entità delle attestazioni."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identities</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(BinaryReader)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public ClaimsPrincipal (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "Da aggiungere."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IIdentity)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> classe dall&quot;identità specificata."
  remarks: "Se l&quot;identità specificata non è assegnabile da <xref:System.Security.Claims.ClaimsIdentity>, viene utilizzato per inizializzare il <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>insieme.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Claims.ClaimsIdentity> In caso contrario, un <xref:System.Security.Claims.ClaimsIdentity>viene creato utilizzando l&quot;identità specificata e viene utilizzato per inizializzare la raccolta.</xref:System.Security.Claims.ClaimsIdentity>"
  syntax:
    content: public ClaimsPrincipal (System.Security.Principal.IIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "L&quot;identità da cui inizializzare la nuova entità delle attestazioni."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  id: '#ctor(System.Security.Principal.IPrincipal)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(IPrincipal)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> classe dall&quot;entità specificata."
  remarks: "Se l&quot;entità specificata è assegnabile da <xref:System.Security.Claims.ClaimsPrincipal>, tutte le identità vengono aggiunti i <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>insieme.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Claims.ClaimsPrincipal> Se l&quot;entità specificata non è assegnabile da <xref:System.Security.Claims.ClaimsPrincipal>, un nuovo <xref:System.Security.Claims.ClaimsIdentity>viene creato dal <xref:System.Security.Principal.IIdentity>nel relativo <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>proprietà e aggiunto al <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>insieme.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsPrincipal>"
  syntax:
    content: public ClaimsPrincipal (System.Security.Principal.IPrincipal principal);
    parameters:
    - id: principal
      type: System.Security.Principal.IPrincipal
      description: "L&quot;entità da cui inizializzare la nuova entità delle attestazioni."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>principal</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipal(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> classe da un flusso serializzato creato usando <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>."
  syntax:
    content: protected ClaimsPrincipal (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "I dati serializzati."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Il contesto per la serializzazione."
  overload: System.Security.Claims.ClaimsPrincipal.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: AddIdentities(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Aggiunge le identità delle attestazioni specificate a questa entità delle attestazioni."
  remarks: "Le identità vengono aggiunti per il <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>insieme.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public virtual void AddIdentities (System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities);
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "Le identità delle attestazioni da aggiungere."
  overload: System.Security.Claims.ClaimsPrincipal.AddIdentities*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identities</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  id: AddIdentity(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: AddIdentity(ClaimsIdentity)
  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Aggiunge l&quot;identità delle attestazioni specificate a questa entità delle attestazioni."
  remarks: "L&quot;identità viene aggiunto per il <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>insieme.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>"
  syntax:
    content: public virtual void AddIdentity (System.Security.Claims.ClaimsIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Claims.ClaimsIdentity
      description: "Identità basata sulle attestazioni da aggiungere."
  overload: System.Security.Claims.ClaimsPrincipal.AddIdentity*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
  fullName: System.Security.Claims.ClaimsPrincipal.Claims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Ottiene una raccolta che contiene tutte le attestazioni da tutte le identità delle attestazioni associata a questa entità delle attestazioni."
  remarks: "Un&quot;entità delle attestazioni è una raccolta di <xref:System.Security.Claims.ClaimsIdentity>gli oggetti che è possibile accedere tramite la proprietà di identità.</xref:System.Security.Claims.ClaimsIdentity> Ogni <xref:System.Security.Claims.ClaimsIdentity>nella raccolta contiene una o più attestazioni.</xref:System.Security.Claims.ClaimsIdentity> La proprietà di attestazioni restituisce tutte le attestazioni da tutte le identità delle attestazioni in questa raccolta.       La proprietà di attestazioni può essere esaminata le implementazioni personalizzate della <xref:System.Security.Claims.ClaimsAuthenticationManager>classe per prendere decisioni di autenticazione o per filtrare, trasformare o migliorare un set di attestazioni in ingresso; da implementazioni personalizzate del <xref:System.Security.Claims.ClaimsAuthorizationManager>classe per applicare i criteri di autorizzazione; o dal codice dell&quot;applicazione per prendere decisioni di autorizzazione o per personalizzare l&quot;utente un&quot;esperienza in base alle attestazioni presente nella raccolta.</xref:System.Security.Claims.ClaimsAuthorizationManager> </xref:System.Security.Claims.ClaimsAuthenticationManager>"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Le attestazioni associate all&quot;entità."
  overload: System.Security.Claims.ClaimsPrincipal.Claims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  id: ClaimsPrincipalSelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Ottiene e imposta il delegato utilizzato per selezionare l&quot;entità delle attestazioni restituita dal <xref:System.Security.Claims.ClaimsPrincipal.Current*>proprietà.</xref:System.Security.Claims.ClaimsPrincipal.Current*>"
  remarks: "È possibile impostare questa proprietà per eseguire l&quot;override del comportamento predefinito del <xref:System.Security.Claims.ClaimsPrincipal.Current%2A>proprietà.</xref:System.Security.Claims.ClaimsPrincipal.Current%2A>"
  syntax:
    content: public static Func<System.Security.Claims.ClaimsPrincipal> ClaimsPrincipalSelector { get; set; }
    return:
      type: System.Func{System.Security.Claims.ClaimsPrincipal}
      description: "Il delegato. Il valore predefinito è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Clone()
  nameWithType: ClaimsPrincipal.Clone()
  fullName: System.Security.Claims.ClaimsPrincipal.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Restituisce una copia di questa istanza."
  syntax:
    content: public virtual System.Security.Claims.ClaimsPrincipal Clone ();
    parameters: []
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "Una nuova copia di <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> oggetto."
  overload: System.Security.Claims.ClaimsPrincipal.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  id: CreateClaimsIdentity(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: CreateClaimsIdentity(BinaryReader)
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Crea una nuova identità di attestazioni."
  syntax:
    content: protected virtual System.Security.Claims.ClaimsIdentity CreateClaimsIdentity (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "Lettore binario."
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "L&quot;identità delle attestazioni creata."
  overload: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Current
  id: Current
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Current
  nameWithType: ClaimsPrincipal.Current
  fullName: System.Security.Claims.ClaimsPrincipal.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Ottiene l&quot;entità delle attestazioni corrente."
  remarks: "Per impostazione predefinita, <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>viene restituito.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> È possibile modificare questo comportamento impostando la <xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>proprietà per specificare un delegato da chiamare per determinare l&quot;entità corrente.</xref:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector%2A>"
  syntax:
    content: public static System.Security.Claims.ClaimsPrincipal Current { get; }
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "L&quot;entità delle attestazioni corrente."
  overload: System.Security.Claims.ClaimsPrincipal.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    return:
      type: System.Byte[]
      description: "Da aggiungere."
  overload: System.Security.Claims.ClaimsPrincipal.CustomSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Recupera tutte le attestazioni corrispondenti al predicato specificato."
  remarks: "Restituisce le attestazioni da tutte le identità associate all&quot;entità delle attestazioni."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "Funzione che esegue la logica corrispondente."
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Attestazioni corrispondenti."
  overload: System.Security.Claims.ClaimsPrincipal.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindAll(String)
  nameWithType: ClaimsPrincipal.FindAll(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Recupera tutti o le attestazioni che presentano il tipo di attestazione specificato."
  remarks: "Restituisce le attestazioni da tutte le identità associate all&quot;entità delle attestazioni. Viene eseguito il confronto ordinale maiuscole in basate su `type`."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (string type);
    parameters:
    - id: type
      type: System.String
      description: "Tipo di attestazione su cui eseguire la corrispondenza di attestazioni."
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "Attestazioni corrispondenti."
  overload: System.Security.Claims.ClaimsPrincipal.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Recupera la prima attestazione che corrisponde al predicato specificato."
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "Funzione che esegue la logica corrispondente."
    return:
      type: System.Security.Claims.Claim
      description: "La prima attestazione corrispondente o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se viene trovata alcuna corrispondenza."
  overload: System.Security.Claims.ClaimsPrincipal.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: FindFirst(String)
  nameWithType: ClaimsPrincipal.FindFirst(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Recupera la prima attestazione con il tipo di attestazione specificato."
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (string type);
    parameters:
    - id: type
      type: System.String
      description: "Il tipo di attestazione per la corrispondenza."
    return:
      type: System.Security.Claims.Claim
      description: "La prima attestazione corrispondente o <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> se viene trovata alcuna corrispondenza."
  overload: System.Security.Claims.ClaimsPrincipal.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Consente di popolare il <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> con i dati necessari per serializzare l&quot;oggetto corrente <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> oggetto."
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Oggetto da popolare con i dati."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "La destinazione per questa serializzazione. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Claims.ClaimsPrincipal.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Determina che se una qualsiasi delle identità di attestazioni associate all&quot;entità delle attestazioni contiene un&quot;attestazione che corrisponde al predicato specificato."
  syntax:
    content: public virtual bool HasClaim (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "Funzione che esegue la logica corrispondente."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esiste un&quot;attestazione corrispondente. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: HasClaim(String,String)
  nameWithType: ClaimsPrincipal.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Determina che se una qualsiasi delle identità di attestazioni associate all&quot;entità delle attestazioni contiene un&quot;attestazione con il tipo di attestazione specificato e il valore."
  remarks: "Non controlla il <xref:System.Security.Claims.Claim.Issuer%2A>o <xref:System.Security.Claims.Claim.OriginalIssuer%2A>proprietà.</xref:System.Security.Claims.Claim.OriginalIssuer%2A> </xref:System.Security.Claims.Claim.Issuer%2A> Il confronto viene eseguito utilizzando l&quot;ordinale, tra maiuscole e minuscole nel valore. case tipo dipendente."
  syntax:
    content: public virtual bool HasClaim (string type, string value);
    parameters:
    - id: type
      type: System.String
      description: "Il tipo di attestazione per la corrispondenza."
    - id: value
      type: System.String
      description: "Il valore dell&quot;attestazione per la corrispondenza."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se esiste un&quot;attestazione corrispondente. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**.       -or-       <code>value</code> is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Identities
  id: Identities
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
  fullName: System.Security.Claims.ClaimsPrincipal.Identities
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Ottiene una raccolta che contiene tutte le identità delle attestazioni associata a questa entità delle attestazioni."
  remarks: "In genere, la raccolta contiene un solo elemento.       È possibile che la raccolta contenere alcuni elementi che sono `null`."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> Identities { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "Raccolta di identità delle attestazioni."
  overload: System.Security.Claims.ClaimsPrincipal.Identities*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.Identity
  id: Identity
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
  fullName: System.Security.Claims.ClaimsPrincipal.Identity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Ottiene il database primario associato a questa entità delle attestazioni di identità basata sulle attestazioni."
  remarks: "Per impostazione predefinita, il framework assegna la priorità delle identità di tipo <xref:System.Security.Principal.WindowsIdentity>quando viene restituita l&quot;identità.</xref:System.Security.Principal.WindowsIdentity> Il primo <xref:System.Security.Principal.WindowsIdentity>, vedere il <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>viene restituita una raccolta.</xref:System.Security.Claims.ClaimsPrincipal.Identities%2A> </xref:System.Security.Principal.WindowsIdentity> Se è presente alcun <xref:System.Security.Principal.WindowsIdentity>nella raccolta, la prima identità assegnabile da <xref:System.Security.Claims.ClaimsIdentity>viene restituito.</xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Principal.WindowsIdentity> Se è presente alcun <xref:System.Security.Claims.ClaimsIdentity>, `null` viene restituito.</xref:System.Security.Claims.ClaimsIdentity> Se il <xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>raccolta è vuota, un <xref:System.ArgumentNullException>viene generata un&quot;eccezione.</xref:System.ArgumentNullException> </xref:System.Security.Claims.ClaimsPrincipal.Identities%2A>       È possibile modificare il comportamento predefinito impostando il <xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>proprietà per specificare un delegato da chiamare per determinare l&quot;identità.</xref:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector%2A>"
  syntax:
    content: public virtual System.Security.Principal.IIdentity Identity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "L&quot;identità delle attestazioni primaria associata a questa entità delle attestazioni."
  overload: System.Security.Claims.ClaimsPrincipal.Identity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: IsInRole(String)
  nameWithType: ClaimsPrincipal.IsInRole(String)
  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Restituisce un valore che indica se l&quot;entità (utente) rappresentata da questa entità delle attestazioni è nel ruolo specificato."
  remarks: "Il metodo IsInRole controlla se un&quot;identità che dispone di questa entità delle attestazioni contiene un&quot;attestazione di tipo <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>dove il valore dell&quot;attestazione è uguale al valore specificato per il `role` parametro.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>      > [!NOTE] > Ogni <xref:System.Security.Claims.ClaimsIdentity>ha una propria definizione del tipo di attestazione che rappresenta un ruolo.</xref:System.Security.Claims.ClaimsIdentity> Questo tipo di attestazione siano accessibili e impostato tramite la <xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>proprietà.</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A?displayProperty=fullName>"
  syntax:
    content: public virtual bool IsInRole (string role);
    parameters:
    - id: role
      type: System.String
      description: "Il ruolo per cui si desidera controllare."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;entità delle attestazioni è nel ruolo specificato. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  id: PrimaryIdentitySelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Ottiene e imposta il delegato utilizzato per selezionare l&quot;identità di attestazioni restituita da di <xref:System.Security.Claims.ClaimsPrincipal.Identity*>proprietà.</xref:System.Security.Claims.ClaimsPrincipal.Identity*>"
  remarks: "È possibile impostare questa proprietà per eseguire l&quot;override del comportamento predefinito del <xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>proprietà.</xref:System.Security.Claims.ClaimsPrincipal.Identity%2A>"
  syntax:
    content: public static Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity> PrimaryIdentitySelector { get; set; }
    return:
      type: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
      description: "Il delegato. Il valore predefinito è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public virtual void WriteTo (System.IO.BinaryWriter writer);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "Da aggiungere."
  overload: System.Security.Claims.ClaimsPrincipal.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "Da aggiungere."
    - id: userData
      type: System.Byte[]
      description: "Da aggiungere."
  overload: System.Security.Claims.ClaimsPrincipal.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Claims.ClaimsPrincipal.#ctor
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal()
  nameWithType: ClaimsPrincipal.ClaimsPrincipal()
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ClaimsIdentity>
  nameWithType: IEnumerable<ClaimsIdentity>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(BinaryReader)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IIdentity)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IIdentity)
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(IPrincipal)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentities(IEnumerable<ClaimsIdentity>)
  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentity(ClaimsIdentity)
  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(ClaimsIdentity)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Claims
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
  fullName: System.Security.Claims.ClaimsPrincipal.Claims
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
- uid: System.Func{System.Security.Claims.ClaimsPrincipal}
  parent: System
  isExternal: true
  name: Func<ClaimsPrincipal>
  nameWithType: Func<ClaimsPrincipal>
  fullName: System.Func<System.Security.Claims.ClaimsPrincipal>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<System.Security.Claims.ClaimsPrincipal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    nameWithType: ClaimsPrincipal
    fullName: ClaimsPrincipal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.Clone
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Clone()
  nameWithType: ClaimsPrincipal.Clone()
  fullName: System.Security.Claims.ClaimsPrincipal.Clone()
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CreateClaimsIdentity(BinaryReader)
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
- uid: System.Security.Claims.ClaimsPrincipal.Current
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Current
  nameWithType: ClaimsPrincipal.Current
  fullName: System.Security.Claims.ClaimsPrincipal.Current
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(Predicate<Claim>)
- uid: System.Predicate{System.Security.Claims.Claim}
  parent: System
  isExternal: true
  name: Predicate<Claim>
  nameWithType: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll(String)
  nameWithType: ClaimsPrincipal.FindAll(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(Predicate<Claim>)
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst(String)
  nameWithType: ClaimsPrincipal.FindFirst(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(String)
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(Predicate<Claim>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim(String,String)
  nameWithType: ClaimsPrincipal.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(String,String)
- uid: System.Security.Claims.ClaimsPrincipal.Identities
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
  fullName: System.Security.Claims.ClaimsPrincipal.Identities
- uid: System.Security.Claims.ClaimsPrincipal.Identity
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
  fullName: System.Security.Claims.ClaimsPrincipal.Identity
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: IsInRole(String)
  nameWithType: ClaimsPrincipal.IsInRole(String)
  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(String)
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
- uid: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
  parent: System
  isExternal: true
  name: Func<IEnumerable<ClaimsIdentity>,ClaimsIdentity>
  nameWithType: Func<IEnumerable<ClaimsIdentity>,ClaimsIdentity>
  fullName: System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>,System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(BinaryWriter,Byte[])
- uid: System.Security.Claims.ClaimsPrincipal.#ctor*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal.ClaimsPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentities
  nameWithType: ClaimsPrincipal.AddIdentities
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: AddIdentity
  nameWithType: ClaimsPrincipal.AddIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Claims*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Claims
  nameWithType: ClaimsPrincipal.Claims
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: ClaimsPrincipalSelector
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
- uid: System.Security.Claims.ClaimsPrincipal.Clone*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Clone
  nameWithType: ClaimsPrincipal.Clone
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CreateClaimsIdentity
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity
- uid: System.Security.Claims.ClaimsPrincipal.Current*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Current
  nameWithType: ClaimsPrincipal.Current
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsPrincipal.CustomSerializationData
- uid: System.Security.Claims.ClaimsPrincipal.FindAll*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindAll
  nameWithType: ClaimsPrincipal.FindAll
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: FindFirst
  nameWithType: ClaimsPrincipal.FindFirst
- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: GetObjectData
  nameWithType: ClaimsPrincipal.GetObjectData
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: HasClaim
  nameWithType: ClaimsPrincipal.HasClaim
- uid: System.Security.Claims.ClaimsPrincipal.Identities*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identities
  nameWithType: ClaimsPrincipal.Identities
- uid: System.Security.Claims.ClaimsPrincipal.Identity*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: Identity
  nameWithType: ClaimsPrincipal.Identity
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: IsInRole
  nameWithType: ClaimsPrincipal.IsInRole
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: PrimaryIdentitySelector
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo*
  parent: System.Security.Claims.ClaimsPrincipal
  isExternal: false
  name: WriteTo
  nameWithType: ClaimsPrincipal.WriteTo
