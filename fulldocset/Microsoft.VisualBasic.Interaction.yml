### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Interaction
  id: Interaction
  children:
  - Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  - Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  - Microsoft.VisualBasic.Interaction.Beep
  - Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  - Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  - Microsoft.VisualBasic.Interaction.Command
  - Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  - Microsoft.VisualBasic.Interaction.Environ(System.String)
  - Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  - Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  - Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  - Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  - Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  langs:
  - csharp
  name: Interaction
  nameWithType: Interaction
  fullName: Microsoft.VisualBasic.Interaction
  type: Class
  summary: "Il <xref uid=&quot;langword_csharp_Interaction&quot; name=&quot;Interaction&quot; href=&quot;&quot;> </xref> modulo contiene procedure utilizzate per interagire con gli oggetti, applicazioni e sistemi."
  remarks: "Questo modulo supporta le parole chiave del linguaggio Visual Basic e membri delle librerie di runtime che eseguono altri programmi, chiamare un metodo o proprietà, un segnale acustico dal computer, forniscono una stringa della riga di comando, modificare gli oggetti COM e il controllo delle finestre di dialogo."
  example:
  - "The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  \n  \n```  \nDim procID As Integer  \n' Run calculator.  \nprocID = Shell(\"C:\\Windows\\system32\\calc.exe\", AppWinStyle.NormalFocus)  \n' The preceding path is for Windows XP.  \n' The Windows 2000 path is C:\\WINNT\\system32\\calc.exe.  \n```"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Interaction
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  id: AppActivate(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: AppActivate(Int32)
  nameWithType: Interaction.AppActivate(Int32)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Attiva un&quot;applicazione che è già in esecuzione."
  remarks: "Utilizzare `AppActivate` per rendere la finestra attiva di un&quot;applicazione attivo. Potrebbe non disporre di un handle o un riferimento alla finestra attiva oppure anche sapere quale finestra è attiva in un momento specifico. In tal caso, è possibile utilizzare il <xref:System.Windows.Forms.Control.Focus%2A>metodo.</xref:System.Windows.Forms.Control.Focus%2A>       Il `AppActivate` funzione Cambia lo stato attivo alla finestra o al nome dell&quot;applicazione ma non influisce sulla viene ingrandita o ridotta a icona. Consente di spostare lo stato attivo dalla finestra dell&quot;applicazione attivata quando l&quot;utente intraprende un&quot;azione per modificare lo stato attivo o chiudere la finestra. È possibile utilizzare il `Shell` funzione per avviare un&quot;applicazione e impostare lo stile della finestra.       Se si utilizza il `Title` parametro `AppActivate` utilizza un confronto tra maiuscole e minuscole, ma in caso contrario richiede una corrispondenza esatta con il contenuto della barra del titolo. Eseguita la ricerca tramite le finestre di primo livello e quindi le finestre figlio. Se non viene trovata una corrispondenza, viene generata un <xref:System.ArgumentException>.</xref:System.ArgumentException>       È possibile utilizzare `AppActivate` solo con processi di cui è proprietaria di finestre. La maggior parte delle applicazioni console non dispone di windows, il che significa che non vengono visualizzati nell&quot;elenco dei processi `AppActivate` ricerche. Quando si esegue da un&quot;applicazione console, il sistema crea un processo separato per eseguire l&quot;applicazione e restituisce l&quot;output al processo di console. Di conseguenza, quando si richiede l&quot;ID del processo corrente, si ottiene l&quot;ID del processo di questo processo distinto, anziché l&quot;ID del processo. dell&quot;applicazione console       In fase di esecuzione di `AppActivate` funzione attiva qualsiasi applicazione in esecuzione con un titolo corrispondente `Title` o con un ID di processo corrispondente `ProcessId`. Se è presente alcuna corrispondenza esatta, attiva qualsiasi applicazione in cui la stringa del titolo termina con `Title`. Se è presente più di un&quot;applicazione denominata `Title`, `AppActivate` funzione attiverà una per l&quot;attivazione.      > [!NOTE] > Il `AppActivate` funzione richiede `UIPermission` nel <xref:System.Security.Permissions.UIPermissionWindow>livello, che potrebbe influire sulla relativa esecuzione in situazioni di attendibilità parziale.</xref:System.Security.Permissions.UIPermissionWindow> Per ulteriori informazioni, vedere <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  \n  \n [!code-vb[VbVbalrCatRef#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._135_1.vb)]"
  syntax:
    content: public static void AppActivate (int ProcessId);
    parameters:
    - id: ProcessId
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>Specifica il numero di ID di processo Win32 assegnato al processo. È possibile utilizzare l&quot;ID restituito dal <xref:Microsoft.VisualBasic.Interaction.Shell*>, purché sia diverso da zero.</xref:Microsoft.VisualBasic.Interaction.Shell*>"
  overload: Microsoft.VisualBasic.Interaction.AppActivate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  id: AppActivate(System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: AppActivate(String)
  nameWithType: Interaction.AppActivate(String)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Attiva un&quot;applicazione che è già in esecuzione."
  remarks: "Utilizzare `AppActivate` per rendere la finestra attiva di un&quot;applicazione attivo. Potrebbe non disporre di un handle o un riferimento alla finestra attiva oppure anche sapere quale finestra è attiva in un momento specifico. In tal caso, è possibile utilizzare il <xref:System.Windows.Forms.Control.Focus%2A>metodo.</xref:System.Windows.Forms.Control.Focus%2A>       Il `AppActivate` funzione Cambia lo stato attivo alla finestra o al nome dell&quot;applicazione ma non influisce sulla viene ingrandita o ridotta a icona. Consente di spostare lo stato attivo dalla finestra dell&quot;applicazione attivata quando l&quot;utente intraprende un&quot;azione per modificare lo stato attivo o chiudere la finestra. È possibile utilizzare il `Shell` funzione per avviare un&quot;applicazione e impostare lo stile della finestra.       Se si utilizza il `Title` parametro `AppActivate` utilizza un confronto tra maiuscole e minuscole, ma in caso contrario richiede una corrispondenza esatta con il contenuto della barra del titolo. Eseguita la ricerca tramite le finestre di primo livello e quindi le finestre figlio. Se non viene trovata una corrispondenza, viene generata un <xref:System.ArgumentException>.</xref:System.ArgumentException>       È possibile utilizzare `AppActivate` solo con processi di cui è proprietaria di finestre. La maggior parte delle applicazioni console non dispone di windows, il che significa che non vengono visualizzati nell&quot;elenco dei processi `AppActivate` ricerche. Quando si esegue da un&quot;applicazione console, il sistema crea un processo separato per eseguire l&quot;applicazione e restituisce l&quot;output al processo di console. Di conseguenza, quando si richiede l&quot;ID del processo corrente, si ottiene l&quot;ID del processo di questo processo distinto, anziché l&quot;ID del processo. dell&quot;applicazione console       In fase di esecuzione di `AppActivate` funzione attiva qualsiasi applicazione in esecuzione con un titolo corrispondente `Title` o con un ID di processo corrispondente `ProcessId`. Se è presente alcuna corrispondenza esatta, attiva qualsiasi applicazione in cui la stringa del titolo termina con `Title`. Se è presente più di un&quot;applicazione denominata `Title`, `AppActivate` funzione attiverà una per l&quot;attivazione.      > [!NOTE] > Il `AppActivate` funzione richiede `UIPermission` nel <xref:System.Security.Permissions.UIPermissionWindow>livello, che potrebbe influire sulla relativa esecuzione in situazioni di attendibilità parziale.</xref:System.Security.Permissions.UIPermissionWindow> Per ulteriori informazioni, vedere <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  \n  \n [!code-vb[VbVbalrCatRef#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._229_1.vb)]"
  syntax:
    content: public static void AppActivate (string Title);
    parameters:
    - id: Title
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione che specifica il titolo nella barra del titolo dell&quot;applicazione che si desidera attivare. È possibile utilizzare il titolo assegnato all&quot;applicazione quando è stata avviata."
  overload: Microsoft.VisualBasic.Interaction.AppActivate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Beep
  id: Beep
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Beep()
  nameWithType: Interaction.Beep()
  fullName: Microsoft.VisualBasic.Interaction.Beep()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Emette un segnale acustico tramite l&quot;altoparlante del computer."
  remarks: "Il passo e la durata del segnale acustico dipendono dal software di hardware e del sistema e pertanto variare tra computer.      > [!NOTE] > Il `Beep` funzione richiede `UIPermission` nel <xref:System.Security.Permissions.UIPermissionWindow>livello, che potrebbe influire sulla relativa esecuzione in situazioni di attendibilità parziale.</xref:System.Security.Permissions.UIPermissionWindow> Per ulteriori informazioni, vedere <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example uses the `Beep` function to sound a tone through the computer's speaker.  \n  \n [!code-vb[VbVbalrCatRef#59](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._129_1.vb)]"
  syntax:
    content: public static void Beep ();
    parameters: []
  overload: Microsoft.VisualBasic.Interaction.Beep*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  id: CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: CallByName(Object,String,CallType,Object[])
  nameWithType: Interaction.CallByName(Object,String,CallType,Object[])
  fullName: Microsoft.VisualBasic.Interaction.CallByName(Object,String,CallType,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Esegue un metodo su un oggetto, imposta o restituisce una proprietà su un oggetto."
  remarks: "Il `CallByName` funzione viene utilizzata in fase di esecuzione per ottenere una proprietà, impostare una proprietà o richiamare un metodo."
  example:
  - "In the following example, the first line uses `CallByName` to set the `Text` property of a text box, the second line retrieves the value of the `Text` property, and the third line invokes the `Move` method to move the text box.  \n  \n [!code-vb[VbVbalrFunctions#99](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_1.vb)]  \n  \n [!code-vb[VbVbalrFunctions#20](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_2.vb)]  \n  \n The next example uses the `CallByName` function to invoke the `Add` and `Item` methods of a collection object.  \n  \n [!code-vb[VbVbalrFunctions#21](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_3.vb)]"
  syntax:
    content: public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, object[] Args);
    parameters:
    - id: ObjectRef
      type: System.Object
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Un puntatore all&quot;oggetto che espone la proprietà o metodo."
    - id: ProcName
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Un&quot;espressione stringa contenente il nome della proprietà o metodo sull&quot;oggetto."
    - id: UseCallType
      type: Microsoft.VisualBasic.CallType
      description: "Obbligatorio. Un membro di enumerazione di tipo <xref href=&quot;Microsoft.VisualBasic.CallType&quot;> </xref> che rappresenta il tipo di routine chiamato. The value of <xref uid=&quot;langword_csharp_CallType&quot; name=&quot;CallType&quot; href=&quot;&quot;></xref> can be <xref uid=&quot;langword_csharp_Method&quot; name=&quot;Method&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Get&quot; name=&quot;Get&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Set&quot; name=&quot;Set&quot; href=&quot;&quot;></xref>."
    - id: Args
      type: System.Object[]
      description: "Facoltativa. <xref uid=&quot;langword_csharp_ParamArray&quot; name=&quot;ParamArray&quot; href=&quot;&quot;></xref>. Una matrice di parametri che contiene gli argomenti da passare alla proprietà o al metodo chiamato."
    return:
      type: System.Object
      description: "Esegue un metodo su un oggetto, imposta o restituisce una proprietà su un oggetto."
  overload: Microsoft.VisualBasic.Interaction.CallByName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Invalid <code>UseCallType</code> value; must be <xref uid=&quot;langword_csharp_Method&quot; name=&quot;Method&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Get&quot; name=&quot;Get&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Set&quot; name=&quot;Set&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  id: Choose(System.Double,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Choose(Double,Object[])
  nameWithType: Interaction.Choose(Double,Object[])
  fullName: Microsoft.VisualBasic.Interaction.Choose(Double,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Seleziona e restituisce un valore da un elenco di argomenti."
  remarks: "Il `Choose` funzione restituisce un membro dell&quot;elenco passato `Choice()`, in base al valore di `Index`. Il primo membro dell&quot;elenco è selezionato quando `Index` è 1. L&quot;ultimo membro dell&quot;elenco è selezionato quando `Index` è `UBound`(`Choice()`). Se `Index` è di fuori di questi limiti, `Choose` restituisce `Nothing`.       Se `Index` non è un numero intero, viene arrotondato al numero intero più vicino prima di essere valutato.       È possibile utilizzare `Choose` per cercare un valore in un elenco di possibili.      > [!NOTE] > Le espressioni nell&quot;elenco di argomenti possono includere chiamate di funzione. Come parte della preparazione all&quot;elenco di argomenti per la chiamata a `Choose`, il compilatore Visual Basic chiama ogni funzione in tutte le espressioni. Ciò significa che non è possibile basarsi su una particolare funzione non viene chiamata se è selezionata un&quot;espressione diversa da `Index`."
  example:
  - "This example uses the `Choose` function to display a name in response to an index passed into the procedure in the `Ind` parameter.  \n  \n [!code-vb[VbVbalrFunctions#22](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._248_1.vb)]"
  syntax:
    content: public static object Choose (double Index, object[] Choice);
    parameters:
    - id: Index
      type: System.Double
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>. Espressione numerica che restituisce un valore compreso tra 1 e il numero di elementi passato il `Choice` argomento."
    - id: Choice
      type: System.Object[]
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>Matrice di parametri. È possibile fornire una singola variabile o un&quot;espressione che restituisce il <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> il tipo di dati, a un elenco di <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variabili o espressioni separate da virgole, o a una matrice unidimensionale di <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> elementi."
    return:
      type: System.Object
      description: "Seleziona e restituisce un valore da un elenco di argomenti."
  overload: Microsoft.VisualBasic.Interaction.Choose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Command
  id: Command
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Command()
  nameWithType: Interaction.Command()
  fullName: Microsoft.VisualBasic.Interaction.Command()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce la parte relativa all&quot;argomento della riga di comando utilizzata per avviare Visual Basic o un programma eseguibile sviluppato con Visual Basic. Il <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> offre una maggiore produttività e prestazioni rispetto al <xref uid=&quot;langword_csharp_Command &quot; name=&quot;Command &quot; href=&quot;&quot;> </xref>(funzione). Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>.</xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>"
  remarks: "Dopo che vengono restituiti gli argomenti, è possibile cercare i delimitatori comuni, ad esempio spazi, barre in avanti o indietro, trattini o virgolette, per suddividere o cercare la stringa per i singoli parametri.       Per le applicazioni sviluppate con Visual Basic e compilate in un file, .exe il `Command` funzione restituisce tutti gli argomenti visualizzati dopo il nome dell&quot;applicazione nella riga di comando, in questo formato: `MyApp(cmdlineargs)`."
  example:
  - "This example uses the `Command` function to return the command-line arguments in an object that contains an array.  \n  \n [!code-vb[VbVbalrCatRef#58](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._185_1.vb)]"
  syntax:
    content: public static string Command ();
    parameters: []
    return:
      type: System.String
      description: "Restituisce la parte relativa all&quot;argomento della riga di comando utilizzata per avviare Visual Basic o un programma eseguibile sviluppato con Visual Basic.       Il <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> offre una maggiore produttività e prestazioni rispetto al <xref uid=&quot;langword_csharp_Command &quot; name=&quot;Command &quot; href=&quot;&quot;> </xref>(funzione). Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>.</xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>"
  overload: Microsoft.VisualBasic.Interaction.Command*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  id: CreateObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: CreateObject(String,String)
  nameWithType: Interaction.CreateObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.CreateObject(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Crea e restituisce un riferimento a un oggetto COM. <xref uid=&quot;langword_csharp_CreateObject&quot; name=&quot;CreateObject&quot; href=&quot;&quot;></xref>non può essere utilizzato per creare istanze delle classi in Visual Basic, a meno che tali classi siano esposte in modo esplicito come componenti COM."
  remarks: "To create an instance of a COM component, assign the object returned by `CreateObject` to an object variable:  \n  \n```vb#  \nSub CreateADODB()  \n   Dim adoApp As Object  \n   adoApp = CreateObject(\"ADODB.Connection\")  \nEnd Sub  \n```  \n  \n The type of object variable you use to store the returned object can affect your application's performance. Declaring an object variable with the `As Object` clause creates a variable that can contain a reference to any type of object. However, access to the object through that variable is *late-bound*, that is, the binding occurs when your program runs. There are many reasons you should avoid late binding, including slower application performance.  \n  \n You can create an object variable that results in early binding—that is, binding when the program is compiled. To do so, add a reference to the type library for your object from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. Then declare the object variable of the specific type of your object. In most cases, it is more efficient to use the `Dim` statement and a primary interop assembly to create objects than it is to use the `CreateObject` function.  \n  \n## Interacting with Unmanaged Code  \n Another issue is that COM objects use unmanaged code — code without the benefit of the common language runtime. There is a fair degree of complexity involved in mixing the managed code of Visual Basic with unmanaged code from COM. When you add a reference to a COM object, Visual Basic searches for a primary interop assembly (PIA) for that library; if it finds one, then it uses it. If it does not find a PIA, then it creates an interoperability assembly that contains local interoperability classes for each class in the COM library. For more information, see [COM Interoperability in .NET Framework Applications](~/add/includes/ajax-current-ext-md.md).  \n  \n You should generally use strongly bound objects and primary interop assemblies whenever possible. The examples below use the `CreateObject` function with Microsoft Office objects for demonstration purposes only. However, these objects are easier to use and more reliable when used with the appropriate primary interop assembly.  \n  \n## Creating an Object on a Remote Computer  \n You can create an object on a remote networked computer by passing the name of the computer to the `ServerName` argument of the `CreateObject` function. That name is the same as the Machine Name portion of a share name: for a share named \"\\\\\\MyServer\\Public,\" `ServerName` is \"MyServer.\"  \n  \n> [!NOTE]\n>  Refer to COM documentation (see Microsoft Developer Network) for additional information on making an application accessible on a remote networked computer. You may need to add a registry key for your application.  \n  \n The following code returns the version number of an instance of Excel running on a remote computer named `MyServer`:  \n  \n```vb#  \nSub CreateRemoteExcelObj()  \n    Dim xlApp As Object  \n    ' Replace string \"\\\\MyServer\" with name of the remote computer.  \n    xlApp = CreateObject(\"Excel.Application\", \"\\\\MyServer\")  \n    MsgBox(xlApp.Version)  \nEnd Sub  \n```  \n  \n If the remote server name is incorrect, or if it is unavailable, a run-time error occurs.  \n  \n> [!NOTE]\n>  Use `CreateObject` when there is no current instance of the object. If an instance of the object is already running, a new instance is started, and an object of the specified type is created. To use the current instance, or to start the application and have it load a file, use the `GetObject` function. If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is executed.  \n  \n## Creating Framework Objects  \n You can use the `CreateObject` function only to create a COM object. While there is no exact equivalent mechanism for creating a .NET Framework object, the <xref:System.Activator> in the <xref:System> namespace contains methods to create local or remote objects. In particular, the <xref:System.Activator.CreateInstance%2A> method or the <xref:System.Activator.CreateInstanceFrom%2A> method might be useful.  \n  \n> [!IMPORTANT]\n>  The `CreateObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `CreateObject` function to create a Microsoft Excel worksheet and saves the worksheet to a file. To use this example, Excel must be installed on the computer where this program runs. Also, you must add a reference to the type library from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. The name of the type library varies depending on the version of Excel installed on your computer. For example, the type library for Microsoft Excel 2002 is named **Microsoft Excel 10.0 Object Library**.  \n  \n [!code-vb[VbVbalrExcelObject#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._59_1.vb)]"
  syntax:
    content: public static object CreateObject (string ProgId, string ServerName = "");
    parameters:
    - id: ProgId
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. ID di programma dell&quot;oggetto da creare."
    - id: ServerName
      type: System.String
      description: "Facoltativa. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Il nome del server di rete in cui verrà creato l&quot;oggetto. Se `ServerName` è una stringa vuota (&quot;&quot;), viene usato il computer locale."
    return:
      type: System.Object
      description: "Crea e restituisce un riferimento a un oggetto COM. <xref uid=&quot;langword_csharp_CreateObject&quot; name=&quot;CreateObject&quot; href=&quot;&quot;></xref>non può essere utilizzato per creare istanze delle classi in Visual Basic, a meno che tali classi siano esposte in modo esplicito come componenti COM."
  overload: Microsoft.VisualBasic.Interaction.CreateObject*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Server non è disponibile"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Non esiste alcun oggetto del tipo specificato"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  id: DeleteSetting(System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: DeleteSetting(String,String,String)
  nameWithType: Interaction.DeleteSetting(String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.DeleteSetting(String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Elimina una sezione o l&quot;impostazione della chiave da una voce del Registro di sistema di un&quot;applicazione. Il <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> nelle funzionalità garantisce maggiore produttività e prestazioni migliori rispetto alle operazioni del Registro di sistema di <xref uid=&quot;langword_csharp_DeleteSetting &quot; name=&quot;DeleteSetting &quot; href=&quot;&quot;> </xref>(funzione). Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "If all arguments are provided, the specified setting is deleted. A run-time error occurs if you attempt to use `DeleteSetting` on a nonexistent section or key setting.  \n  \n `DeleteSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys."
  example:
  - "The following example first uses the `SaveSetting` procedure to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them. Because no `Key` argument is specified, the whole `Startup` section is deleted, including the section name and all of its keys.  \n  \n [!code-vb[VbVbalrCatRef#45](~/add/codesnippet/visualbasic/e195f0a5-815a-4af5-b672-_1.vb)]"
  syntax:
    content: public static void DeleteSetting (string AppName, string Section = null, string Key = null);
    parameters:
    - id: AppName
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente il nome dell&quot;applicazione o del progetto a cui si applica l&quot;impostazione di sezione o la chiave."
    - id: Section
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente il nome della sezione da cui si desidera eliminare l&quot;impostazione della chiave. Se solo `AppName` e `Section` sono forniti, la sezione specificata viene eliminata insieme a tutte le relative impostazioni delle chiavi."
    - id: Key
      type: System.String
      description: "Facoltativa. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente il nome dell&quot;impostazione della chiave da eliminare."
  overload: Microsoft.VisualBasic.Interaction.DeleteSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Utente non è connesso."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  id: Environ(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Environ(Int32)
  nameWithType: Interaction.Environ(Int32)
  fullName: Microsoft.VisualBasic.Interaction.Environ(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce la stringa associata a una variabile di ambiente del sistema operativo."
  remarks: "Se `Expression` contiene una stringa, il <xref:Microsoft.VisualBasic.Interaction.Environ%2A>funzione restituisce il testo assegnato alla stringa di ambiente specificata, il testo che segue il segno di uguale (=) nella tabella di stringhe per tale variabile di ambiente.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Se la stringa in `Expression` Impossibile trovare nella tabella di stringhe, una stringa di lunghezza zero (&quot;&quot;) viene restituito.       Se `Expression` contiene un numero intero, la stringa che occupa la posizione numerica nella tabella di stringhe di ambiente viene restituita. In questo caso, <xref:Microsoft.VisualBasic.Interaction.Environ%2A>restituisce tutto il testo, incluso il nome della variabile di ambiente.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Se è presente alcuna stringa di ambiente nella posizione specificata, <xref:Microsoft.VisualBasic.Interaction.Environ%2A>restituisce una stringa di lunghezza zero.</xref:Microsoft.VisualBasic.Interaction.Environ%2A>      > [!IMPORTANT] > Il <xref:Microsoft.VisualBasic.Interaction.Environ%2A>funzione richiede l&quot;autorizzazione per l&quot;ambiente, che possono influire sulla relativa esecuzione in situazioni di attendibilità parziale.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Per ulteriori informazioni, vedere <xref:System.Security.Permissions.SecurityPermission>e [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function to supply the entry number and length of the `PATH` statement from the environment-string table.  \n  \n [!code-vb[VbVbalrCatRef#28](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._74_1.vb)]"
  syntax:
    content: public static string Environ (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "Obbligatorio. Espressione che restituisce una stringa contenente il nome di una variabile di ambiente o un numero intero corrispondente all&quot;ordine numerico di una stringa nella tabella di stringhe di ambiente."
    return:
      type: System.String
      description: "Restituisce la stringa associata a una variabile di ambiente del sistema operativo."
  overload: Microsoft.VisualBasic.Interaction.Environ*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>non è presente."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Environ(System.String)
  id: Environ(System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Environ(String)
  nameWithType: Interaction.Environ(String)
  fullName: Microsoft.VisualBasic.Interaction.Environ(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce la stringa associata a una variabile di ambiente del sistema operativo."
  remarks: "Se `Expression` contiene una stringa, la funzione restituisce il testo assegnato alla stringa di ambiente specificata di Environ, ovvero, il testo che segue il segno di uguale (=) nella tabella di stringhe per tale variabile di ambiente. Se la stringa in `Expression` Impossibile trovare nella tabella di stringhe, una stringa di lunghezza zero (&quot;&quot;) viene restituito.       Se `Expression` contiene un numero intero, la stringa che occupa la posizione numerica nella tabella di stringhe di ambiente viene restituita. In questo caso, Environ restituisce tutto il testo, incluso il nome della variabile di ambiente. Se non è presente alcuna stringa di ambiente nella posizione specificata, Environ restituisce una stringa di lunghezza zero.      > [!IMPORTANT] > Environ la funzione richiede l&quot;autorizzazione per l&quot;ambiente, che possono influire sulla relativa esecuzione in situazioni di attendibilità parziale. Per ulteriori informazioni, vedere <xref:System.Security.Permissions.SecurityPermission>e [le autorizzazioni di accesso di codice](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the Environ function to supply the entry number and length of the `PATH` statement from the environment-string table.  \n  \n [!code-vb[VbVbalrCatRef#28](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._35_1.vb)]"
  syntax:
    content: public static string Environ (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Obbligatorio. Espressione che restituisce una stringa contenente il nome di una variabile di ambiente o un numero intero corrispondente all&quot;ordine numerico di una stringa nella tabella di stringhe di ambiente."
    return:
      type: System.String
      description: "Restituisce la stringa associata a una variabile di ambiente del sistema operativo."
  overload: Microsoft.VisualBasic.Interaction.Environ*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>non è presente."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  id: GetAllSettings(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetAllSettings(String,String)
  nameWithType: Interaction.GetAllSettings(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetAllSettings(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un elenco di impostazioni delle chiavi e dei rispettivi valori (originariamente creato con <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>) da una voce del Registro di sistema di un&quot;applicazione. Utilizzo di <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> nelle funzionalità garantisce maggiore produttività e prestazioni migliori rispetto alle operazioni del Registro di sistema <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "`GetAllSettings` returns an uninitialized `Object` if either `AppName` or `Section` does not exist.  \n  \n Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetAllSettings` requires that a user be logged on.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys."
  example:
  - "This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, then uses the `GetAllSettings` function to display the settings. Note that application names and `Section` names cannot be retrieved with `GetAllSettings`. Finally, the `DeleteSetting` function removes the application's entries.  \n  \n [!code-vb[VbVbalrCatRef#68](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._40_1.vb)]"
  syntax:
    content: public static string[,] GetAllSettings (string AppName, string Section);
    parameters:
    - id: AppName
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente il nome dell&quot;applicazione o del progetto vengono richieste le cui impostazioni chiave."
    - id: Section
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente il nome della sezione sono richieste la cui le impostazioni della chiave. <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;></xref>Restituisce un oggetto che contiene una matrice bidimensionale di stringhe. Le stringhe contengono tutte le impostazioni nella sezione specificata e i relativi valori chiave."
    return:
      type: System.String[,]
      description: "Restituisce un elenco di impostazioni delle chiavi e dei rispettivi valori (originariamente creato con <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>) da una voce del Registro di sistema di un&quot;applicazione.       Utilizzo di <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> nelle funzionalità garantisce maggiore produttività e prestazioni migliori rispetto alle operazioni del Registro di sistema <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  overload: Microsoft.VisualBasic.Interaction.GetAllSettings*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Utente non è connesso."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  id: GetObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetObject(String,String)
  nameWithType: Interaction.GetObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetObject(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un riferimento a un oggetto fornito da un componente COM."
  remarks: "Use the `GetObject` function to load an instance of a COM component from a file. The following example illustrates this.  \n  \n```vb#  \nDim CADObject As Object  \nCADObject = GetObject(\"C:\\CAD\\schema.cad\")  \n```  \n  \n When this code runs, the application associated with the specified `PathName` is started and the object in the specified file is activated.  \n  \n## Default Cases  \n If `PathName` is a zero-length string (`\"\"`), `GetObject` returns a new object instance of the specified class type. If the `PathName` argument is omitted, `GetObject` returns a currently active object of the class type specified in `Class`. If no object of the specified type exists, an error occurs.  \n  \n## Accessing a Subobject  \n Some applications allow you to activate a subobject associated with a file. To do this, add an exclamation point (`!`) to the end of the file name and follow it with a string that identifies the part of the file you want to activate. For information on how to create this string, see the documentation for the application that created the object.  \n  \n For example, in a drawing application you might have multiple layers to a drawing stored in a file. You could use the following code to activate a layer within a drawing called `schema.cad`.  \n  \n```vb#  \nlayerObject = GetObject(\"C:\\CAD\\schema.cad!Layer3\")  \n```  \n  \n## Specifying a Class  \n If you do not specify the object's `Class`, Automation determines the application to start and the object to activate, based on the file name you provide. Some files, however, can support more than one class of object. For example, a drawing might support three different types of objects: an `Application` object, a `Drawing` object, and a `Toolbar` object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional `Class` argument. The following example illustrates this.  \n  \n```vb#  \nDim drawObj As Object  \ndrawObj = GetObject(\"C:\\Drawings\\sample.drw\", \"Figment.Drawing\")  \n```  \n  \n In the preceding example, `Figment` is the name of a drawing application and `Drawing` is one of the object types it supports.  \n  \n## Using the Object  \n Once an object is activated, you refer to it in code using the object variable you declared. In the preceding example, you access properties and methods of the new object using the object variable `drawObj`. The following example illustrates this.  \n  \n```vb#  \ndrawObj.Line(9, 90)  \ndrawObj.InsertText(9, 100, \"Hello, world.\")  \ndrawObj.SaveAs(\"C:\\Drawings\\sample.drw\")  \n```  \n  \n> [!NOTE]\n>  Use the `GetObject` function when there is a current instance of the object or if you want to create the object with a file loaded. If there is no current instance, and you do not want the object started with a file loaded, use the <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> function.  \n>   \n>  If an object has registered itself as an ActiveX single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is called. With a single-instance object, `GetObject` always returns the same instance when called with the zero-length string (`\"\"`) syntax, and it causes an error if the `PathName` argument is omitted. You cannot use `GetObject` to obtain a reference to a class created with Visual Basic.  \n  \n> [!IMPORTANT]\n>  The `GetObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `GetObject` function to obtain a reference to a specific Microsoft Excel worksheet (`excelObj`). It uses the worksheet's `Application` property to make Excel visible, to close it, and to perform other actions. Using two API calls, the `detectExcel` procedure looks for Excel, and if it is running, enters it in the Running Object table. The first call to `GetObject` causes an error if Excel is not already running, which in this example causes the `excelWasNotRunning` flag to be set to `True`. The second call to `GetObject` specifies a file to open. If Excel is not already running, the second call starts it and returns a reference to the worksheet represented by the specified file, `test.xls`. The file must exist in the specified location; otherwise, Visual Basic throws a <xref:System.IO.FileNotFoundException>. Next, the example code makes both Excel and the window containing the specified worksheet visible.  \n  \n This example requires `Option Strict Off` because it uses late binding, where objects are assigned to variables of type `Object`. You can specify `Option Strict On` and declare objects of specific object types if you add a reference to the Excel type library from the **COM** tab of the **Add Reference** dialog box of the **Project** menu in Visual Studio.  \n  \n [!code-vb[VbVbalrExcelObject#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_1.vb)]  \n  \n [!code-vb[VbVbalrExcelObject#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_2.vb)]  \n  \n [!code-vb[VbVbalrExcelObject#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_3.vb)]  \n  \n When you call the `getExcel` function, a check is made to see if Excel is already running. If it is not, then an instance is created.  \n  \n> [!IMPORTANT]\n>  For simplicity, the preceding example assumes that any window called `XLMAIN` belongs to an instance of Microsoft Excel. If another object, possibly launched by illicit tampering, created a window with that name, it would receive all the messages you intended for Excel. In an application to be used for production, you should include some more rigorous testing to verify that `XLMAIN` really belongs to Excel."
  syntax:
    content: public static object GetObject (string PathName = null, string Class = null);
    parameters:
    - id: PathName
      type: System.String
      description: "Facoltativa. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Il percorso completo e il nome del file contenente l&quot;oggetto da recuperare. Se `PathName` viene omesso, `Class` è obbligatorio."
    - id: Class
      type: System.String
      description: "Obbligatorio se `PathName` non viene fornito. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Stringa che rappresenta la classe dell&quot;oggetto. Il `Class` presenta la sintassi e le parti seguenti: `appname` `.` `objecttype` [1 |&1;] parametro [1 |&2;] descrizione [2 |&1;] `appname` [2 |&2;] richiesto. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Il nome dell&quot;applicazione che fornisce l&quot;oggetto.       [3 |&1;] `objecttype` [3 |&2;] richiesto. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Il tipo o classe dell&quot;oggetto da creare."
    return:
      type: System.Object
      description: "Restituisce un riferimento a un oggetto fornito da un componente COM."
  overload: Microsoft.VisualBasic.Interaction.GetObject*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Non esiste alcun oggetto del tipo di classe specificato."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Non esiste alcun oggetto con il nome di percorso e il file specificato."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  id: GetSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetSetting(String,String,String,String)
  nameWithType: Interaction.GetSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetSetting(String,String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un valore di impostazione della chiave da una voce del Registro di sistema di un&quot;applicazione. Il <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> nelle funzionalità garantisce maggiore produttività e prestazioni migliori rispetto alle operazioni del Registro di sistema <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "If any of the items named in the `GetSetting` arguments do not exist, `GetSetting` returns a value of `Default`.  \n  \n Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetSetting` requires that a user be logged on.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys.  \n  \n `GetSetting` requires `Read`<xref:System.Security.Permissions.RegistryPermission> ."
  example:
  - "This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, and then uses the `GetSetting` function to display one of the settings. Because the `Default` argument is specified, some value is guaranteed to be returned. Notice that `Section` names cannot be retrieved with `GetSetting`. Finally, the `DeleteSetting` function removes all the application's entries.  \n  \n [!code-vb[VbVbalrCatRef#61](~/add/codesnippet/visualbasic/1601a1b5-4317-44fc-9f01-_1.vb)]"
  syntax:
    content: public static string GetSetting (string AppName, string Section, string Key, string Default = "");
    parameters:
    - id: AppName
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente il nome dell&quot;applicazione o del progetto viene richiesta la cui impostazione della chiave."
    - id: Section
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente il nome della sezione in cui è disponibile l&quot;impostazione della chiave."
    - id: Key
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente il nome dell&quot;impostazione della chiave da restituire."
    - id: Default
      type: System.String
      description: "Facoltativa. Espressione contenente il valore da restituire se viene impostato alcun valore `Key` impostazione. Se omesso, `Default` si presuppone che sia una stringa di lunghezza zero (&quot;&quot;)."
    return:
      type: System.String
      description: "Restituisce un valore di impostazione della chiave da una voce del Registro di sistema di un&quot;applicazione.       Il <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> nelle funzionalità garantisce maggiore produttività e prestazioni migliori rispetto alle operazioni del Registro di sistema <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Interaction.GetSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Uno o più argomenti non sono <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressioni o utente non è connesso."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  id: IIf(System.Boolean,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: IIf(Boolean,Object,Object)
  nameWithType: Interaction.IIf(Boolean,Object,Object)
  fullName: Microsoft.VisualBasic.Interaction.IIf(Boolean,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce uno dei due oggetti, a seconda della valutazione di un&quot;espressione."
  remarks: 'Il `IIf` funzione fornisce un equivalente del ternario [operatore condizionale:?:](~/add/includes/ajax-current-ext-md.md) in Visual C++.'
  example:
  - "This example uses the `IIf` function to evaluate the `testMe` parameter of the `checkIt` procedure and returns the word \"Large\" if the amount is greater than 1000; otherwise, it returns the word \"Small\".  \n  \n [!code-vb[VbVbalrFunctions#33](~/add/codesnippet/visualbasic/296aac5d-5997-4225-8ac0-_1.vb)]  \n  \n Note that if `Option Strict` is `On`, you must use the `CStr` keyword to explicitly convert the return from `Object` to `String`."
  syntax:
    content: public static object IIf (bool Expression, object TruePart, object FalsePart);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. L&quot;espressione da valutare."
    - id: TruePart
      type: System.Object
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Restituito se `Expression` restituisce <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
    - id: FalsePart
      type: System.Object
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Restituito se `Expression` restituisce <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Object
      description: "Restituisce uno dei due oggetti, a seconda della valutazione di un&quot;espressione."
  overload: Microsoft.VisualBasic.Interaction.IIf*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  id: InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: InputBox(String,String,String,Int32,Int32)
  nameWithType: Interaction.InputBox(String,String,String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Interaction.InputBox(String,String,String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Visualizza un prompt dei comandi in una finestra di dialogo, attende che l&quot;utente per il testo di input oppure fare clic su un pulsante e quindi restituisce una stringa contenente il contenuto della casella di testo."
  remarks: "Se l&quot;utente fa clic **Annulla**, viene restituita una stringa di lunghezza zero.       Per specificare più il primo argomento, è necessario utilizzare il `InputBox` funzione in un&quot;espressione. Se si omette un argomento di posizione, è necessario mantenere la virgola di delimitazione corrispondente.      > [!NOTE] > Il `InputBox` funzione richiede `UIPermission` nel <xref:System.Security.Permissions.UIPermissionWindow>livello, che potrebbe influire sulla relativa esecuzione in situazioni di attendibilità parziale.</xref:System.Security.Permissions.UIPermissionWindow> Per ulteriori informazioni, vedere e <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example shows various ways to use the `InputBox` function to prompt the user to enter a value. If the x and y positions are omitted, the dialog box is automatically centered for the respective axes. The variable `MyValue` contains the value entered by the user if the user clicks OK or presses the ENTER key.  \n  \n [!code-vb[VbVbalrCatRef#67](~/add/codesnippet/visualbasic/e8c4ff4e-3901-4354-99c7-_1.vb)]"
  syntax:
    content: public static string InputBox (string Prompt, string Title = "", string DefaultResponse = "", int XPos = -1, int YPos = -1);
    parameters:
    - id: Prompt
      type: System.String
      description: "Richiesto <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> espressione visualizzata nella finestra di dialogo del messaggio. La lunghezza massima di `Prompt` circa 1024 caratteri, a seconda della larghezza dei caratteri utilizzati. Se `Prompt` costituito da più di una riga, è possibile separare le righe utilizzando un carattere di ritorno a capo (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), avanzamento riga (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), o un ritorno a capo/avanzamento riga combinazione (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;> </xref> &amp; <xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;> </xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>) tra ogni riga."
    - id: Title
      type: System.String
      description: "Facoltativa. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione visualizzata nella barra del titolo della finestra di dialogo. Se si omette `Title`, il nome dell&quot;applicazione si trova nella barra del titolo."
    - id: DefaultResponse
      type: System.String
      description: "Facoltativa. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione visualizzata nella casella di testo come risposta predefinita se è specificato nessun altro input. Se si omette `DefaultResponse`, la casella di testo visualizzato è vuota."
    - id: XPos
      type: System.Int32
      description: "Facoltativa. Espressione numerica che specifica, in twip, la distanza tra il bordo sinistro della finestra di dialogo dal bordo sinistro della schermata. Se si omette `XPos`, la finestra di dialogo viene centrata in senso orizzontale."
    - id: YPos
      type: System.Int32
      description: "Facoltativa. Espressione numerica che specifica, in twip, la distanza tra il bordo superiore della finestra di dialogo dalla parte superiore della schermata. Se si omette `YPos`, la finestra di dialogo è posizionata verticalmente circa un terzo del modo in cui sullo schermo."
    return:
      type: System.String
      description: "Visualizza un prompt dei comandi in una finestra di dialogo, attende che l&quot;utente per il testo di input oppure fare clic su un pulsante e quindi restituisce una stringa contenente il contenuto della casella di testo."
  overload: Microsoft.VisualBasic.Interaction.InputBox*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  id: MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: MsgBox(Object,MsgBoxStyle,Object)
  nameWithType: Interaction.MsgBox(Object,MsgBoxStyle,Object)
  fullName: Microsoft.VisualBasic.Interaction.MsgBox(Object,MsgBoxStyle,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Visualizza un messaggio in una finestra di dialogo, attende che l&quot;utente di selezionare un pulsante e quindi restituisce un intero che indica quale pulsante l&quot;utente ha fatto clic."
  remarks: "Se si omette un argomento di posizione, è necessario mantenere la virgola di delimitazione corrispondente.       Se viene visualizzata la finestra di dialogo un **Annulla** pulsante, premendo il tasto ESC ha lo stesso effetto della selezione di **Annulla** se la finestra di dialogo contiene un **Guida** pulsante, Guida sensibile al contesto viene fornita per la finestra di dialogo. Tuttavia, viene restituito alcun valore finché non viene scelto uno degli altri pulsanti. Nelle applicazioni Windows Form, la scelta di **Guida** viene eseguita la <xref:System.Windows.Forms.Control.HelpRequested>evento per il form.</xref:System.Windows.Forms.Control.HelpRequested>      > [!NOTE] > Il `MsgBox` funzione richiede `UIPermission` nel <xref:System.Security.Permissions.UIPermissionWindow>livello, che potrebbe influire sulla relativa esecuzione in situazioni di attendibilità parziale.</xref:System.Security.Permissions.UIPermissionWindow> Per ulteriori informazioni, vedere <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>       Il `MsgBoxStyle` valori di enumerazione sono elencati nella tabella seguente.      ||||   |-|-|-|   | Membro | Valore | Descrizione |   | `OKOnly`|0| Solo il pulsante Visualizza OK. |   | `OKCancel`|1| Visualizza OK e Annulla pulsanti. |   | `AbortRetryIgnore`|2| Visualizza i pulsanti Interrompi, Riprova e Ignora. |   | `YesNoCancel`|3| Viene visualizzato Sì, No e Annulla. |   | `YesNo`|4| Non visualizza i pulsanti Sì e. |   | `RetryCancel`|5| Visualizza i pulsanti Annulla e i tentativi. |   | `Critical`|16| Visualizza l&quot;icona di messaggio critico. |   | `Question`|32| Visualizza l&quot;icona di avviso Query. |   | `Exclamation`|48| Visualizza l&quot;icona di messaggio di avviso. |   | `Information`|64| Visualizza l&quot;icona di messaggio di informazioni. |   | `DefaultButton1`|0| Il primo pulsante è predefinito. |   | `DefaultButton2`|256| Secondo pulsante è l&quot;impostazione predefinita. |   | `DefaultButton3`|512| Valore predefinito è il terzo pulsante. |   | `ApplicationModal`|0| L&quot;applicazione è modale. L&quot;utente deve rispondere al messaggio prima di continuare a utilizzare l&quot;applicazione corrente. |   | `SystemModal`|4096| Il sistema è modale. Tutte le applicazioni vengono sospesi finché l&quot;utente risponde al messaggio. |   | `MsgBoxSetForeground`|&65536; | Specifica la finestra di messaggio della finestra di primo piano. |   | `MsgBoxRight`|&52428;8 | Il testo è allineato a destra. |   | `MsgBoxRtlReading`|&10485;76 | Specifica il testo deve essere visualizzato come destra-sinistra lettura nei sistemi di lingua ebraica e araba. |       Il primo gruppo di valori (0-5) descrive il numero e tipo dei pulsanti visualizzati nella finestra di dialogo. Il secondo gruppo (16, 32, 48, 64) descrive lo stile di icona. Il terzo gruppo (0, 256, 512) determina quale pulsante è il valore predefinito. Il quarto gruppo (0, 4096) determina la modalità della finestra di messaggio e al quinto gruppo consente di specificare se la finestra di messaggio è la finestra di primo piano, insieme all&quot;allineamento e orientamento del testo. Quando si aggiungono numeri per creare un valore finale per il `Buttons` argomento, utilizzare un solo numero per ogni gruppo."
  example:
  - "This example uses the `MsgBox` function to display a critical-error message in a dialog box with Yes and No buttons. The No button is specified as the default response. This is done by combining the `MsgBox` constant values into one numeric expression. In this case, adding 4 (the Yes/No button combination) and 16 (the **Critical Message** window) and 256 (the second button as default button) gives a total of 276. The value returned by the `MsgBox` function depends on the button chosen by the user: Yes returns a value of 6; No returns a value of 7.  \n  \n [!code-vb[VbVbalrCatRef#20](~/add/codesnippet/visualbasic/b9e37542-f81a-4692-86e1-_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);
    parameters:
    - id: Prompt
      type: System.Object
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione visualizzata come messaggio nella finestra di dialogo. La lunghezza massima di `Prompt` circa 1024 caratteri, a seconda della larghezza dei caratteri utilizzati. Se `Prompt` costituito da più di una riga, è possibile separare le righe utilizzando un carattere di ritorno a capo (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), avanzamento riga (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), o una combinazione di caratteri di ritorno/avanzamento riga, ritorno a capo (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;> </xref> &amp; <xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;> </xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>) tra ogni riga."
    - id: Buttons
      type: Microsoft.VisualBasic.MsgBoxStyle
      description: "Facoltativa. Espressione numerica che rappresenta la somma dei valori che specifica il numero e tipo dei pulsanti da visualizzare, lo stile di icona da utilizzare, l&quot;identità del pulsante predefinito e la modalità della finestra di messaggio. Se si omette `Buttons`, il valore predefinito è zero."
    - id: Title
      type: System.Object
      description: "Facoltativa. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione visualizzata nella barra del titolo della finestra di dialogo. Se si omette `Title`, il nome dell&quot;applicazione si trova nella barra del titolo."
    return:
      type: Microsoft.VisualBasic.MsgBoxResult
      description: "<table><tbody><tr><td> Costante       </td><td> Valore       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_OK&quot; name=&quot;OK&quot; href=&quot;&quot;></xref>         </td><td> 1       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Cancel&quot; name=&quot;Cancel&quot; href=&quot;&quot;></xref>         </td><td> 2       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Abort&quot; name=&quot;Abort&quot; href=&quot;&quot;></xref>         </td><td> 3       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Retry&quot; name=&quot;Retry&quot; href=&quot;&quot;></xref>         </td><td> 4       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Ignore&quot; name=&quot;Ignore&quot; href=&quot;&quot;></xref>         </td><td> 5       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Yes&quot; name=&quot;Yes&quot; href=&quot;&quot;></xref>         </td><td> 6       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_No&quot; name=&quot;No&quot; href=&quot;&quot;></xref>         </td><td> 7       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Interaction.MsgBox*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Prompt</code>non è un <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> , espressione o <code>Title</code> non è valido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Processo non è in esecuzione in modalità interattiva utente."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Uno o più parametri non è un membro di <xref uid=&quot;langword_csharp_MsgBoxResult&quot; name=&quot;MsgBoxResult&quot; href=&quot;&quot;> </xref> o <xref uid=&quot;langword_csharp_MsgBoxStyle&quot; name=&quot;MsgBoxStyle&quot; href=&quot;&quot;> </xref> enumerazione."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  id: Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Partition(Int64,Int64,Int64,Int64)
  nameWithType: Interaction.Partition(Int64,Int64,Int64,Int64)
  fullName: Microsoft.VisualBasic.Interaction.Partition(Int64,Int64,Int64,Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce una stringa che rappresenta l&quot;intervallo calcolato che contiene un numero."
  remarks: "Il `Partition` funzione calcola un set di intervalli numerici, ognuno dei quali contiene il numero di valori specificato in `Interval`. Il primo intervallo inizia `Start`, e l&quot;ultimo intervallo termina `Stop`. Il `Partition` funzione identifica quindi l&quot;intervallo contiene `Number` e restituisce una stringa che descrive tale intervallo. L&quot;intervallo è rappresentato nella stringa come &quot;*lowervalue*:*valoremassimo*&quot;, dove parte inferiore dell&quot;intervallo (*lowervalue*) è separato dal valore massimo (*valoremassimo*) da due punti (:).       Se necessario, il `Partition` funzione inserisce gli spazi iniziali prima *lowervalue* e *valoremassimo* in modo che abbiano lo stesso numero di caratteri della rappresentazione di stringa del valore (`Stop` + 1). In questo modo, se si utilizza l&quot;output del `Partition` funzione con valori diversi di `Number`, il testo risultante verrà gestito correttamente durante le successive operazioni di ordinamento.       Nella tabella seguente vengono illustrate alcune stringhe di esempio per gli intervalli calcolati utilizzando tre set di `Start`, `Stop`, e `Interval`. Le colonne di &quot;Ultimo intervallo&quot; e &quot;Primo intervallo&quot; mostrano gli intervalli minimi e massimi possibili in base ai valori di `Start` e `Stop`. Il &quot;prima del primo intervallo&quot; e &quot;dopo l&quot;ultimo intervallo&quot; colonne contengono le stringhe restituite per i valori di `Number` minore `Start` e maggiore `Stop`, rispettivamente.      ||||||||   |-|-|-|-|-|-|-|   | `Start`|`Stop`|`Interval`| Prima del primo intervallo | Primo intervallo | Ultimo intervallo | Dopo l&quot;ultimo intervallo |   | 0 | 99 | 5 | &quot;: -1&quot; | &quot;  0: 4&quot;|&quot; 95: 99 &quot;|&quot; 100: &quot;|   | 20 | 199 | 10 | &quot;: 19&quot; | &quot; 20:29 &quot;|&quot; 190:199 &quot;|&quot; 200: &quot;|   | 100 | 1010 | 20 | &quot;: 99&quot; | &quot; 100: 119 &quot;|&quot; 1000:1010 &quot;|&quot; 1011: &quot;|       Nella tabella precedente, la terza riga contiene il risultato quando `Start` e `Stop` definire un set di numeri che non possono essere diviso in modo uniforme per `Interval`. L&quot;ultimo intervallo termina `Stop`, rendendolo 11 solo numeri, anche se `Interval` è 20.       Se `Interval` è 1, l&quot;intervallo è &quot;`Number`:`Number`&quot;, indipendentemente dal `Start` e `Stop` argomenti. Ad esempio, se `Number` è 267, `Stop` è 1000, e `Interval` è 1, `Partition` restituisce &quot;267: 267&quot;.       `Partition`può essere utile quando si creano query di database. È possibile creare una query SELECT che mostra il numero di ordini si verifica all&quot;interno di intervalli diversi, ad esempio con valori di fattura da 1 a 1000, 1001 a 2000 e così via."
  example:
  - "The following example sets up a series of ranges for decades from 1950 through 2049. It locates the value of `year` within the appropriate range and returns a `String` value showing the range. If `year` has a value of 1984, for example, `Partition` returns \"1980:1989\".  \n  \n [!code-vb[VbVbalrFunctions#45](~/add/codesnippet/visualbasic/2056d306-036e-4f9b-954c-_1.vb)]"
  syntax:
    content: public static string Partition (long Number, long Start, long Stop, long Interval);
    parameters:
    - id: Number
      type: System.Int64
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Numero intero che si desidera individuare all&quot;interno di uno degli intervalli calcolati."
    - id: Start
      type: System.Int64
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Numero intero che indica l&quot;inizio del set di intervalli calcolati. `Start`non può essere minore di 0."
    - id: Stop
      type: System.Int64
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Numero intero che indica la fine del set di intervalli calcolati. `Stop`non può essere minore o uguale a `Start`."
    - id: Interval
      type: System.Int64
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Numero intero che indica le dimensioni di ogni intervallo calcolato tra `Start` e `Stop`. `Interval`non può essere minore di 1."
    return:
      type: System.String
      description: "Restituisce una stringa che rappresenta l&quot;intervallo calcolato che contiene un numero."
  overload: Microsoft.VisualBasic.Interaction.Partition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt; 0, <code>Stop</code> &lt;= <code>Start</code>, or <code>Interval</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  id: SaveSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: SaveSetting(String,String,String,String)
  nameWithType: Interaction.SaveSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.SaveSetting(String,String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Salva o crea una voce di applicazione del Registro di sistema. Il <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> nelle funzionalità garantisce maggiore produttività e prestazioni migliori rispetto alle operazioni del Registro di sistema <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>. Per ulteriori informazioni, vedere <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "The `SaveSetting` function adds the key to `HKEY_CURRENT_USER\\Software\\VB and VBA Program Settings`.  \n  \n If the key setting cannot be saved for any reason, an error occurs.  \n  \n `SaveSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys.  \n  \n `SaveSetting` requires `Write` and `Create`<xref:System.Security.Permissions.RegistryPermission> ."
  example:
  - "The following example first uses the `SaveSetting` function to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them.  \n  \n [!code-vb[VbVbalrCatRef#56](~/add/codesnippet/visualbasic/771356b4-108a-4f31-9d7a-_1.vb)]"
  syntax:
    content: public static void SaveSetting (string AppName, string Section, string Key, string Setting);
    parameters:
    - id: AppName
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente il nome dell&quot;applicazione o del progetto a cui si applica l&quot;impostazione."
    - id: Section
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente il nome della sezione in cui salvare l&quot;impostazione della chiave."
    - id: Key
      type: System.String
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>espressione contenente il nome dell&quot;impostazione della chiave viene salvata."
    - id: Setting
      type: System.String
      description: "Obbligatorio. Espressione contenente il valore a cui `Key` viene impostata."
  overload: Microsoft.VisualBasic.Interaction.SaveSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Non è stato possibile creare chiavi di registro o utente non è connesso."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  id: Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Shell(String,AppWinStyle,Boolean,Int32)
  nameWithType: Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  fullName: Microsoft.VisualBasic.Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Esegue un programma eseguibile e restituisce un valore integer contenente l&quot;ID di processo del programma se è ancora in esecuzione."
  remarks: "The return value of the `Shell` function depends on whether the program named in `PathName` is still executing when `Shell` returns. If you set `Wait` to `True` and the program finishes before the timeout expires, `Shell` returns zero. If the timeout expires, or if you omit `Wait` or set it to `False`, `Shell` returns the process ID of the program. The process ID is a unique number that identifies the running program.  \n  \n## Failure to Start  \n If the `Shell` function cannot start the named program, a <xref:System.IO.FileNotFoundException> error occurs. This can happen, for example, when you attempt to run a 16-bit program, such as `command.com`, from an application using <xref:System.Windows.Forms?displayProperty=fullName>. For a workaround, you can run a 32-bit program that calls the desired 16-bit program. In the case of `command.com`, you can run `cmd.exe` as an alternative.  \n  \n## Waiting for Completion  \n By default, the `Shell` function runs the program asynchronously. This means that a program started with the `Shell` function might not finish executing before the statements following the `Shell` function are executed. If you want to wait for the program to finish before you continue, set `Wait` to `True`.  \n  \n## Determining the Exit Code  \n A process can return an *exit code* when it terminates. However, you cannot use `Shell` to retrieve this exit code, because `Shell` returns zero if it waits for termination, and also because the process runs in a different object from `Shell`.  \n  \n To retrieve the exit code from a process, you must write your own code to initiate the process and wait for termination. The following example shows how to initiate a process, wait for it to terminate, and retrieve its exit code.  \n  \n```vb#  \nDim procID As Integer  \nDim newProc As Diagnostics.Process  \nnewProc = Diagnostics.Process.Start(\"C:\\WINDOWS\\NOTEPAD.EXE\")  \nprocID = newProc.Id  \nnewProc.WaitForExit()  \nDim procEC As Integer = -1  \nIf newProc.HasExited Then  \n    procEC = newProc.ExitCode  \nEnd If  \nMsgBox(\"Process with ID \" & CStr(ProcID) & _  \n    \" terminated with exit code \" & CStr(procEC))  \n```  \n  \n## Protecting the File Specification  \n You should always enclose the entire path and file specification in quotation marks, as the following example shows.  \n  \n```vb#  \nID = Shell(\"\"\"C:\\Program Files\\display.exe\"\" -a -q\", , True, 100000)  \n```  \n  \n Each pair of adjacent double quotation marks (`\" \"`) within the string literal is interpreted as one double quotation character in the string. Therefore, the preceding example presents the following string to the `Shell` function:  \n  \n```  \n\"C:\\Program Files\\display.exe\" -a -q  \n```  \n  \n If you did not have the path enclosed in quotation marks, Windows would look for a file called `Program.exe` in the C:\\ directory, instead of `display.exe` in the C:\\Program Files directory.  \n  \n> [!IMPORTANT]\n>  If you do not enclose the path and file specification in quotation marks, there is a security risk if the file name or a path node contains spaces. In the preceding example, the path node `\\Program Files` includes a space. If the specification were not inside quotation marks and a program named `Program.exe` had been installed in C:\\\\, for example by illicit tampering, Windows would execute it instead of `display.exe`.  \n  \n> [!IMPORTANT]\n>  The `Shell` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  \n  \n [!code-vb[VbVbalrFunctions#47](~/add/codesnippet/visualbasic/a0f7fa2d-96c5-4a1d-b721-_1.vb)]"
  syntax:
    content: public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);
    parameters:
    - id: PathName
      type: System.String
      description: "Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. Name of the program to execute, together with any required arguments and command-line switches. `PathName` can also include the drive and the directory path or folder.  \n  \n If you do not know the path to the program, you can use the <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles*> to locate it. For example, you can call `My.Computer.FileSystem.GetFiles(\"C:\\\", True, \"testFile.txt\")`, which returns the full path of every file named `testFile.txt` anywhere on drive C:\\\\."
    - id: Style
      type: Microsoft.VisualBasic.AppWinStyle
      description: "Facoltativa. <xref uid=&quot;langword_csharp_AppWinStyle&quot; name=&quot;AppWinStyle&quot; href=&quot;&quot;></xref>. Valore scelto dal <xref href=&quot;Microsoft.VisualBasic.AppWinStyle&quot;> </xref> che specifica lo stile della finestra in cui viene eseguito il programma. Se `Style` viene omesso, <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> Usa <xref uid=&quot;langword_csharp_AppWinStyle.MinimizedFocus&quot; name=&quot;AppWinStyle.MinimizedFocus&quot; href=&quot;&quot;> </xref>, che avvia il programma ridotto a icona e con lo stato attivo."
    - id: Wait
      type: System.Boolean
      description: "Facoltativa. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Un valore che indica se il <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> funzione deve attendere il completamento del programma. If `Wait` is omitted, <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;></xref> uses <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
    - id: Timeout
      type: System.Int32
      description: "Facoltativa. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. Il numero di millisecondi di attesa del completamento se `Wait` è <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>. Se `Timeout` viene omesso, <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> Usa -1, che non esiste alcun timeout e <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> non restituisce fino al completamento del programma. Pertanto, se si omette `Timeout` o impostato su-1, è possibile che <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> mai restituisca il controllo al programma."
    return:
      type: System.Int32
      description: "Esegue un programma eseguibile e restituisce un valore integer contenente l&quot;ID di processo del programma se è ancora in esecuzione."
  overload: Microsoft.VisualBasic.Interaction.Shell*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Style</code>non è incluso l&quot;intervallo compreso tra 0 e 9, inclusi."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;></xref>Impossibile trovare il <code> PathName </code> file."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>PathName</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  id: Switch(System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Switch(Object[])
  nameWithType: Interaction.Switch(Object[])
  fullName: Microsoft.VisualBasic.Interaction.Switch(Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Restituisce un elenco di espressioni e restituisce un <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> valore corrispondente alla prima espressione nell&quot;elenco che è <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
  remarks: "L&quot;argomento fornito a `VarExpr` è costituito da coppie di espressioni e valori. Il `Switch` funzione valuta le espressioni dispari dal livello più basso all&quot;indice più alto in `VarExpr`e restituisce il valore pari associato alla prima espressione che restituisce `True`. Ad esempio, se `VarExpr(0)` è `True`, `Switch` restituisce `VarExpr(1)`e se `VarExpr(0)` è `False` ma `VarExpr(2)` è `True`, `Switch` restituisce `VarExpr(3)`e così via.       Se non si specifica il `VarExpr` argomento, `Switch` restituisce `Nothing`.      > [!NOTE] > Le espressioni nell&quot;elenco di argomenti possono includere chiamate di funzione. Come parte della preparazione all&quot;elenco di argomenti per la chiamata a `Switch`, il compilatore Visual Basic chiama ogni funzione in tutte le espressioni. Ciò significa che non è possibile basarsi su una particolare funzione non viene chiamata se un&quot;espressione precedente nell&quot;elenco di argomenti è `True`."
  example:
  - "The following example uses the `Switch` function to return the name of a language that matches the name of a city. It requires that `Option Strict` be `Off`.  \n  \n [!code-vb[VbVbalrFunctions#48](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._108_1.vb)]  \n  \n Because the <xref:System.Diagnostics> namespace also contains a class called <xref:System.Diagnostics.Switch>, a call to the `Switch` function must be qualified with the <xref:Microsoft.VisualBasic> namespace."
  syntax:
    content: public static object Switch (object[] VarExpr);
    parameters:
    - id: VarExpr
      type: System.Object[]
      description: "Obbligatorio. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>Matrice di parametri. Deve avere un numero pari di elementi. È possibile fornire un elenco di <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variabili o espressioni separate da virgole oppure una matrice unidimensionale di <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> elementi."
    return:
      type: System.Object
      description: "Restituisce un elenco di espressioni e restituisce un <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> valore corrispondente alla prima espressione nell&quot;elenco che è <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Interaction.Switch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Numero di argomenti è dispari."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate(Int32)
  nameWithType: Interaction.AppActivate(Int32)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate(String)
  nameWithType: Interaction.AppActivate(String)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Interaction.Beep
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Beep()
  nameWithType: Interaction.Beep()
  fullName: Microsoft.VisualBasic.Interaction.Beep()
- uid: Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CallByName(Object,String,CallType,Object[])
  nameWithType: Interaction.CallByName(Object,String,CallType,Object[])
  fullName: Microsoft.VisualBasic.Interaction.CallByName(Object,String,CallType,Object[])
- uid: Microsoft.VisualBasic.CallType
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CallType
  nameWithType: CallType
  fullName: Microsoft.VisualBasic.CallType
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Choose(Double,Object[])
  nameWithType: Interaction.Choose(Double,Object[])
  fullName: Microsoft.VisualBasic.Interaction.Choose(Double,Object[])
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Interaction.Command
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Command()
  nameWithType: Interaction.Command()
  fullName: Microsoft.VisualBasic.Interaction.Command()
- uid: Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CreateObject(String,String)
  nameWithType: Interaction.CreateObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.CreateObject(String,String)
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: DeleteSetting(String,String,String)
  nameWithType: Interaction.DeleteSetting(String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.DeleteSetting(String,String,String)
- uid: Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ(Int32)
  nameWithType: Interaction.Environ(Int32)
  fullName: Microsoft.VisualBasic.Interaction.Environ(Int32)
- uid: Microsoft.VisualBasic.Interaction.Environ(System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ(String)
  nameWithType: Interaction.Environ(String)
  fullName: Microsoft.VisualBasic.Interaction.Environ(String)
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetAllSettings(String,String)
  nameWithType: Interaction.GetAllSettings(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetAllSettings(String,String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[,]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[,]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetObject(String,String)
  nameWithType: Interaction.GetObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetObject(String,String)
- uid: Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetSetting(String,String,String,String)
  nameWithType: Interaction.GetSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetSetting(String,String,String,String)
- uid: Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: IIf(Boolean,Object,Object)
  nameWithType: Interaction.IIf(Boolean,Object,Object)
  fullName: Microsoft.VisualBasic.Interaction.IIf(Boolean,Object,Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: InputBox(String,String,String,Int32,Int32)
  nameWithType: Interaction.InputBox(String,String,String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Interaction.InputBox(String,String,String,Int32,Int32)
- uid: Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: MsgBox(Object,MsgBoxStyle,Object)
  nameWithType: Interaction.MsgBox(Object,MsgBoxStyle,Object)
  fullName: Microsoft.VisualBasic.Interaction.MsgBox(Object,MsgBoxStyle,Object)
- uid: Microsoft.VisualBasic.MsgBoxResult
  parent: Microsoft.VisualBasic
  isExternal: false
  name: MsgBoxResult
  nameWithType: MsgBoxResult
  fullName: Microsoft.VisualBasic.MsgBoxResult
- uid: Microsoft.VisualBasic.MsgBoxStyle
  parent: Microsoft.VisualBasic
  isExternal: false
  name: MsgBoxStyle
  nameWithType: MsgBoxStyle
  fullName: Microsoft.VisualBasic.MsgBoxStyle
- uid: Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Partition(Int64,Int64,Int64,Int64)
  nameWithType: Interaction.Partition(Int64,Int64,Int64,Int64)
  fullName: Microsoft.VisualBasic.Interaction.Partition(Int64,Int64,Int64,Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: SaveSetting(String,String,String,String)
  nameWithType: Interaction.SaveSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.SaveSetting(String,String,String,String)
- uid: Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Shell(String,AppWinStyle,Boolean,Int32)
  nameWithType: Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  fullName: Microsoft.VisualBasic.Interaction.Shell(String,AppWinStyle,Boolean,Int32)
- uid: Microsoft.VisualBasic.AppWinStyle
  parent: Microsoft.VisualBasic
  isExternal: false
  name: AppWinStyle
  nameWithType: AppWinStyle
  fullName: Microsoft.VisualBasic.AppWinStyle
- uid: Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Switch(Object[])
  nameWithType: Interaction.Switch(Object[])
  fullName: Microsoft.VisualBasic.Interaction.Switch(Object[])
- uid: Microsoft.VisualBasic.Interaction.AppActivate*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate
  nameWithType: Interaction.AppActivate
- uid: Microsoft.VisualBasic.Interaction.Beep*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Beep
  nameWithType: Interaction.Beep
- uid: Microsoft.VisualBasic.Interaction.CallByName*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CallByName
  nameWithType: Interaction.CallByName
- uid: Microsoft.VisualBasic.Interaction.Choose*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Choose
  nameWithType: Interaction.Choose
- uid: Microsoft.VisualBasic.Interaction.Command*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Command
  nameWithType: Interaction.Command
- uid: Microsoft.VisualBasic.Interaction.CreateObject*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CreateObject
  nameWithType: Interaction.CreateObject
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: DeleteSetting
  nameWithType: Interaction.DeleteSetting
- uid: Microsoft.VisualBasic.Interaction.Environ*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ
  nameWithType: Interaction.Environ
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetAllSettings
  nameWithType: Interaction.GetAllSettings
- uid: Microsoft.VisualBasic.Interaction.GetObject*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetObject
  nameWithType: Interaction.GetObject
- uid: Microsoft.VisualBasic.Interaction.GetSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetSetting
  nameWithType: Interaction.GetSetting
- uid: Microsoft.VisualBasic.Interaction.IIf*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: IIf
  nameWithType: Interaction.IIf
- uid: Microsoft.VisualBasic.Interaction.InputBox*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: InputBox
  nameWithType: Interaction.InputBox
- uid: Microsoft.VisualBasic.Interaction.MsgBox*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: MsgBox
  nameWithType: Interaction.MsgBox
- uid: Microsoft.VisualBasic.Interaction.Partition*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Partition
  nameWithType: Interaction.Partition
- uid: Microsoft.VisualBasic.Interaction.SaveSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: SaveSetting
  nameWithType: Interaction.SaveSetting
- uid: Microsoft.VisualBasic.Interaction.Shell*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Shell
  nameWithType: Interaction.Shell
- uid: Microsoft.VisualBasic.Interaction.Switch*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Switch
  nameWithType: Interaction.Switch
