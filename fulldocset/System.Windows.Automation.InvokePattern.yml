### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.InvokePattern
  id: InvokePattern
  children:
  - System.Windows.Automation.InvokePattern.Invoke
  - System.Windows.Automation.InvokePattern.InvokedEvent
  - System.Windows.Automation.InvokePattern.Pattern
  langs:
  - csharp
  name: InvokePattern
  nameWithType: InvokePattern
  fullName: System.Windows.Automation.InvokePattern
  type: Class
  summary: "Rappresenta controlli che avviano o eseguono una singola azione non ambigua e non mantengono lo stato quando attivati."
  remarks: "I controlli supportano InvokePattern se lo stesso comportamento non viene esposto tramite un altro pattern di controllo. Ad esempio, se il <xref:System.Windows.Automation.InvokePattern.Invoke%2A>metodo su un controllo esegue la stessa azione il <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A>o <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A>(metodo), il controllo non supporta InvokePattern.</xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> </xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> </xref:System.Windows.Automation.InvokePattern.Invoke%2A>       [!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]gli elementi che rappresentano i controlli, ad esempio caselle di controllo e pulsanti di opzione, che gestiscono un stato, supportano invece <xref:System.Windows.Automation.TogglePattern>o <xref:System.Windows.Automation.SelectionItemPattern>.</xref:System.Windows.Automation.SelectionItemPattern> </xref:System.Windows.Automation.TogglePattern>"
  syntax:
    content: 'public class InvokePattern : System.Windows.Automation.BasePattern'
  inheritance:
  - System.Object
  - System.Windows.Automation.BasePattern
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Automation.InvokePattern.Invoke
  id: Invoke
  parent: System.Windows.Automation.InvokePattern
  langs:
  - csharp
  name: Invoke()
  nameWithType: InvokePattern.Invoke()
  fullName: System.Windows.Automation.InvokePattern.Invoke()
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation
  summary: "Invia una richiesta di attivazione di un controllo e di avviare l&quot;azione singola e non ambiguo."
  remarks: "Le chiamate a Invoke deve essere restituito immediatamente senza bloccare. Tuttavia, questo comportamento dipende interamente il [!INCLUDE[TLA#tla_uiautomation](~/add/includes/tlasharptla-uiautomation-md.md)] implementazione del provider. Negli scenari in cui la chiamata a Invoke causa un problema di blocco (ad esempio una finestra di dialogo modale) un supporto separato thread potrebbe essere necessario chiamare il metodo."
  example:
  - "In the following example an <xref:System.Windows.Automation.InvokePattern>control pattern is obtained from a control and the Invoke method is called.  \n  \n [!code-cs[UIAInvokePattern_snip#101](~/add/codesnippet/csharp/UIAInvokePattern_snip/UIAInvokePattern_snippets.cs#101)]\n [!code-vb[UIAInvokePattern_snip#101](~/add/codesnippet/visualbasic/UIAInvokePattern_snip/UIAInvokePattern_snippets.vb#101)]"
  syntax:
    content: public void Invoke ();
    parameters: []
  overload: System.Windows.Automation.InvokePattern.Invoke*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "L&quot;elemento non supporta il <xref href=&quot;System.Windows.Automation.InvokePattern&quot;> </xref> pattern di controllo è nascosto o bloccato."
  - type: System.Windows.Automation.ElementNotEnabledException
    commentId: T:System.Windows.Automation.ElementNotEnabledException
    description: "L&quot;elemento non è abilitato. Può essere generato quando un provider di automazione interfaccia utente ha implementato la gestione della <xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled*>proprietà.</xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled*>"
  platform:
  - net462
- uid: System.Windows.Automation.InvokePattern.InvokedEvent
  id: InvokedEvent
  parent: System.Windows.Automation.InvokePattern
  langs:
  - csharp
  name: InvokedEvent
  nameWithType: InvokePattern.InvokedEvent
  fullName: System.Windows.Automation.InvokePattern.InvokedEvent
  type: Field
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation
  summary: "Identifica l&quot;evento generato quando un controllo viene richiamato o attivato."
  remarks: "Questo identificatore viene usato dalle applicazioni client di automazione interfaccia utente. Provider di automazione interfaccia utente devono utilizzare il campo equivalente in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</xref:System.Windows.Automation.InvokePatternIdentifiers>       L&quot;identificatore InvokedEvent viene passato come parametro al <xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>.</xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>"
  example:
  - "In the following example, the event handler identifies the event as an Invoked event by comparing the <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> in the event arguments with the InvokedEvent identifier field.  \n  \n [!code-vb[UIAClient_snip#101](~/add/codesnippet/visualbasic/UIAClient_snip/ClientForm.vb#101)]\n [!code-cs[UIAClient_snip#101](~/add/codesnippet/csharp/CustomElementClient/ClientForm.cs#101)]"
  syntax:
    content: public static readonly System.Windows.Automation.AutomationEvent InvokedEvent;
    return:
      type: System.Windows.Automation.AutomationEvent
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.InvokePattern.Pattern
  id: Pattern
  parent: System.Windows.Automation.InvokePattern
  langs:
  - csharp
  name: Pattern
  nameWithType: InvokePattern.Pattern
  fullName: System.Windows.Automation.InvokePattern.Pattern
  type: Field
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation
  summary: "Identifica la <xref href=&quot;System.Windows.Automation.InvokePattern&quot;> </xref> pattern di controllo."
  remarks: "Questo identificatore viene usato dalle applicazioni client di automazione interfaccia utente. Provider di automazione interfaccia utente devono utilizzare il campo equivalente in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</xref:System.Windows.Automation.InvokePatternIdentifiers>       Identificatore del pattern viene passata ai metodi, ad esempio <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>per recuperare il pattern di controllo di interesse da specificata <xref:System.Windows.Automation.AutomationElement>.</xref:System.Windows.Automation.AutomationElement> </xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>"
  example:
  - "In the following example an <xref:System.Windows.Automation.InvokePattern> control pattern is obtained from a control and the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method is called.  \n  \n [!code-cs[UIAInvokePattern_snip#101](~/add/codesnippet/csharp/UIAInvokePattern_snip/UIAInvokePattern_snippets.cs#101)]\n [!code-vb[UIAInvokePattern_snip#101](~/add/codesnippet/visualbasic/UIAInvokePattern_snip/UIAInvokePattern_snippets.vb#101)]"
  syntax:
    content: public static readonly System.Windows.Automation.AutomationPattern Pattern;
    return:
      type: System.Windows.Automation.AutomationPattern
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Automation.BasePattern
  isExternal: false
  name: System.Windows.Automation.BasePattern
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Automation.ElementNotEnabledException
  parent: System.Windows.Automation
  isExternal: false
  name: ElementNotEnabledException
  nameWithType: ElementNotEnabledException
  fullName: System.Windows.Automation.ElementNotEnabledException
- uid: System.Windows.Automation.InvokePattern.Invoke
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: Invoke()
  nameWithType: InvokePattern.Invoke()
  fullName: System.Windows.Automation.InvokePattern.Invoke()
- uid: System.Windows.Automation.InvokePattern.InvokedEvent
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: InvokedEvent
  nameWithType: InvokePattern.InvokedEvent
  fullName: System.Windows.Automation.InvokePattern.InvokedEvent
- uid: System.Windows.Automation.AutomationEvent
  parent: System.Windows.Automation
  isExternal: false
  name: AutomationEvent
  nameWithType: AutomationEvent
  fullName: System.Windows.Automation.AutomationEvent
- uid: System.Windows.Automation.InvokePattern.Pattern
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: Pattern
  nameWithType: InvokePattern.Pattern
  fullName: System.Windows.Automation.InvokePattern.Pattern
- uid: System.Windows.Automation.AutomationPattern
  parent: System.Windows.Automation
  isExternal: false
  name: AutomationPattern
  nameWithType: AutomationPattern
  fullName: System.Windows.Automation.AutomationPattern
- uid: System.Windows.Automation.InvokePattern.Invoke*
  parent: System.Windows.Automation.InvokePattern
  isExternal: false
  name: Invoke
  nameWithType: InvokePattern.Invoke
