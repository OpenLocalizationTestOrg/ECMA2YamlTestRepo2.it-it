### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.MessageFilter
  id: MessageFilter
  children:
  - System.ServiceModel.Dispatcher.MessageFilter.#ctor
  - System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1
  - System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)
  - System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)
  langs:
  - csharp
  name: MessageFilter
  nameWithType: MessageFilter
  fullName: System.ServiceModel.Dispatcher.MessageFilter
  type: Class
  summary: "<xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;></xref>classe di base per classi diverse di filtri usati per eseguire query sui messaggi."
  remarks: "MessageFilter è un `abstract` classe che gli sviluppatori implementano per specificare i criteri da utilizzare per il controllo messaggi. In genere, i filtri vengono utilizzati da un&quot;applicazione endpoint per determinare cosa fare con un messaggio in base a un esame di alcune parti del messaggio. Un processo di accodamento, ad esempio possibile utilizzare una query XPath 1.0 per controllare l&quot;elemento prioritario di un&quot;intestazione nota per determinare se spostare un messaggio all&quot;inizio della coda.       I filtri vengono archiviati in una tabella dei filtri che implementa <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>.</xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> Ogni filtro nella tabella è associato a dati filtro specificati che possono essere utilizzati per indicare quali azioni intraprendere se un messaggio corrisponde al filtro. Il <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A>metodi vengono utilizzati per determinare se un messaggio soddisfa un filtro.</xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A>       Impossibile modificare i criteri utilizzati da un filtro di una volta costruito il filtro perché le tabelle dei filtri non hanno modo di rilevare una modifica. L&quot;unico modo per modificare i criteri di un filtro è per costruire una nuova istanza ed eliminare il filtro esistente.       Le seguenti classi implementano la `abstract`classe MessageFilter:- <xref:System.ServiceModel.Dispatcher.XPathMessageFilter>utilizza un&quot;espressione di XPath 1.0 per specificare i criteri per la corrispondenza.</xref:System.ServiceModel.Dispatcher.XPathMessageFilter>      - <xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter>corrisponde a tutti i messaggi.</xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter>      - <xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter>corrisponde a nessuno dei messaggi.</xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter>      - <xref:System.ServiceModel.Dispatcher.ActionMessageFilter>verifica se l&quot;azione di un messaggio fa parte di un set specificato di azioni.</xref:System.ServiceModel.Dispatcher.ActionMessageFilter>      - <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter>Controlla se un messaggio soddisfa un indirizzo endpoint specificato.</xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter>       <xref:System.ServiceModel.Channels.ChannelListenerBase%601>è un `abstract` classe base che è possibile utilizzare per la scrittura di listener senza Accodamento.</xref:System.ServiceModel.Channels.ChannelListenerBase%601>"
  syntax:
    content: >-
      [System.Runtime.Serialization.DataContract]

      [System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))]

      [System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))]

      [System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))]

      [System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))]

      public abstract class MessageFilter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilter.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Dispatcher.MessageFilter
  langs:
  - csharp
  name: MessageFilter()
  nameWithType: MessageFilter.MessageFilter()
  fullName: System.ServiceModel.Dispatcher.MessageFilter.MessageFilter()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Quando viene chiamato in una classe derivata, Inizializza una nuova istanza di <xref href=&quot;System.ServiceModel.Dispatcher.MessageFilter&quot;> </xref> classe."
  remarks: "Il costruttore è protetto in modo che solo i filtri che derivano da <xref:System.ServiceModel.Dispatcher.MessageFilter>è possibile creare istanze.</xref:System.ServiceModel.Dispatcher.MessageFilter>"
  syntax:
    content: protected MessageFilter ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.MessageFilter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1
  id: CreateFilterTable``1
  parent: System.ServiceModel.Dispatcher.MessageFilter
  langs:
  - csharp
  name: CreateFilterTable()
  nameWithType: MessageFilter.CreateFilterTable()
  fullName: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  syntax:
    content: protected virtual System.ServiceModel.Dispatcher.IMessageFilterTable<FilterData> CreateFilterTable<FilterData> ();
    parameters: []
    return:
      type: System.ServiceModel.Dispatcher.IMessageFilterTable{FilterData}
      description: "Da aggiungere."
  overload: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable<FilterData>*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)
  id: Match(System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.MessageFilter
  langs:
  - csharp
  name: Match(Message)
  nameWithType: MessageFilter.Match(Message)
  fullName: System.ServiceModel.Dispatcher.MessageFilter.Match(Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Quando sottoposto a override in una classe derivata, controlla se un messaggio soddisfa i criteri di filtro. Non è possibile esaminare il corpo."
  remarks: "Questo metodo non è possibile esaminare il contenuto del corpo del messaggio."
  syntax:
    content: public abstract bool Match (System.ServiceModel.Channels.Message message);
    parameters:
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "L&quot; <xref:System.ServiceModel.Channels.Message>oggetto da testare.</xref:System.ServiceModel.Channels.Message>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref:System.ServiceModel.Channels.Message>oggetto soddisfa i criteri di filtro; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.Channels.Message>"
  overload: System.ServiceModel.Dispatcher.MessageFilter.Match*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)
  id: Match(System.ServiceModel.Channels.MessageBuffer)
  parent: System.ServiceModel.Dispatcher.MessageFilter
  langs:
  - csharp
  name: Match(MessageBuffer)
  nameWithType: MessageFilter.Match(MessageBuffer)
  fullName: System.ServiceModel.Dispatcher.MessageFilter.Match(MessageBuffer)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Quando sottoposto a override in una classe derivata, controlla se un messaggio memorizzato nel buffer soddisfa i criteri del filtro."
  remarks: "Il messaggio deve essere completamente memorizzato nel buffer se il corpo deve essere controllato dal filtro. Il corpo del <xref:System.ServiceModel.Channels.MessageBuffer>completamente memorizzato nel buffer e quindi può essere controllato da un filtro.</xref:System.ServiceModel.Channels.MessageBuffer> Il corpo di un <xref:System.ServiceModel.Channels.Message>che non è stato completamente memorizzato nel buffer può essere utilizzato dal controllo del filtro.</xref:System.ServiceModel.Channels.Message> L&quot;elemento di intestazione di un <xref:System.ServiceModel.Channels.Message>viene automaticamente memorizzato nel buffer e quindi può essere controllato senza essere utilizzate.</xref:System.ServiceModel.Channels.Message>"
  syntax:
    content: public abstract bool Match (System.ServiceModel.Channels.MessageBuffer buffer);
    parameters:
    - id: buffer
      type: System.ServiceModel.Channels.MessageBuffer
      description: "L&quot; <xref:System.ServiceModel.Channels.MessageBuffer>oggetto da testare.</xref:System.ServiceModel.Channels.MessageBuffer>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref:System.ServiceModel.Channels.MessageBuffer>oggetto soddisfa i criteri di filtro; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.Channels.MessageBuffer>"
  overload: System.ServiceModel.Dispatcher.MessageFilter.Match*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.Dispatcher.MessageFilter.#ctor
  parent: System.ServiceModel.Dispatcher.MessageFilter
  isExternal: false
  name: MessageFilter()
  nameWithType: MessageFilter.MessageFilter()
  fullName: System.ServiceModel.Dispatcher.MessageFilter.MessageFilter()
- uid: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1
  parent: System.ServiceModel.Dispatcher.MessageFilter
  isExternal: false
  name: CreateFilterTable()
  nameWithType: MessageFilter.CreateFilterTable()
  fullName: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable()
- uid: System.ServiceModel.Dispatcher.IMessageFilterTable{FilterData}
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: IMessageFilterTable<FilterData>
  nameWithType: IMessageFilterTable<FilterData>
  fullName: System.ServiceModel.Dispatcher.IMessageFilterTable<FilterData>
  spec.csharp:
  - uid: System.ServiceModel.Dispatcher.IMessageFilterTable`1
    name: IMessageFilterTable
    nameWithType: IMessageFilterTable
    fullName: IMessageFilterTable<FilterData>
  - name: <
    nameWithType: <
    fullName: <
  - uid: FilterData
    name: FilterData
    nameWithType: FilterData
    fullName: FilterData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.MessageFilter
  isExternal: false
  name: Match(Message)
  nameWithType: MessageFilter.Match(Message)
  fullName: System.ServiceModel.Dispatcher.MessageFilter.Match(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)
  parent: System.ServiceModel.Dispatcher.MessageFilter
  isExternal: false
  name: Match(MessageBuffer)
  nameWithType: MessageFilter.Match(MessageBuffer)
  fullName: System.ServiceModel.Dispatcher.MessageFilter.Match(MessageBuffer)
- uid: System.ServiceModel.Channels.MessageBuffer
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageBuffer
  nameWithType: MessageBuffer
  fullName: System.ServiceModel.Channels.MessageBuffer
- uid: System.ServiceModel.Dispatcher.MessageFilter.#ctor*
  parent: System.ServiceModel.Dispatcher.MessageFilter
  isExternal: false
  name: MessageFilter
  nameWithType: MessageFilter.MessageFilter
- uid: System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable<FilterData>*
  parent: System.ServiceModel.Dispatcher.MessageFilter
  isExternal: false
  name: CreateFilterTable<FilterData>
  nameWithType: MessageFilter.CreateFilterTable<FilterData>
- uid: System.ServiceModel.Dispatcher.MessageFilter.Match*
  parent: System.ServiceModel.Dispatcher.MessageFilter
  isExternal: false
  name: Match
  nameWithType: MessageFilter.Match
