### YamlMime:ManagedReference
items:
- uid: System.Security.SecureString
  id: SecureString
  children:
  - System.Security.SecureString.#ctor
  - System.Security.SecureString.#ctor(System.Char*,System.Int32)
  - System.Security.SecureString.AppendChar(System.Char)
  - System.Security.SecureString.Clear
  - System.Security.SecureString.Copy
  - System.Security.SecureString.Dispose
  - System.Security.SecureString.InsertAt(System.Int32,System.Char)
  - System.Security.SecureString.IsReadOnly
  - System.Security.SecureString.Length
  - System.Security.SecureString.MakeReadOnly
  - System.Security.SecureString.RemoveAt(System.Int32)
  - System.Security.SecureString.SetAt(System.Int32,System.Char)
  langs:
  - csharp
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
  type: Class
  summary: "Rappresenta il testo che deve essere mantenuto riservato, ad esempio eliminandolo dalla memoria del computer quando non è più necessario. Questa classe non può essere ereditata."
  remarks: "SecureString è un tipo di stringa che fornisce una misura di sicurezza. Tenta di evitare di archiviare le stringhe potrebbero contenere informazioni riservate nella memoria di processo come testo normale.  (Per le limitazioni, tuttavia, vedere il [come proteggere è SecureString?](#HowSecure) sezione.) Il valore di un&quot;istanza di SecureString viene protetto automaticamente utilizzando un meccanismo supportato dalla piattaforma sottostante, quando l&quot;istanza è inizializzata o quando il valore viene modificato. L&quot;applicazione può eseguire il rendering di istanza non modificabile e impedire un&quot;ulteriore modifica richiamando il <xref:System.Security.SecureString.MakeReadOnly%2A>metodo.</xref:System.Security.SecureString.MakeReadOnly%2A>       La lunghezza massima di un&quot;istanza di SecureString è 65.536 caratteri.      > [!IMPORTANT] > Questo tipo implementa il <xref:System.IDisposable>interfaccia.</xref:System.IDisposable> Al termine dell&quot;utilizzo di un&quot;istanza del tipo, è necessario eliminarlo direttamente o indirettamente di esso. Per eliminare direttamente il tipo, chiamare il relativo <xref:System.IDisposable.Dispose%2A>metodo in un `try` / `catch` blocco.</xref:System.IDisposable.Dispose%2A> Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio, ad esempio `using` (in c#) o `Using` (in Visual Basic). Per ulteriori informazioni, vedere la sezione &quot;Utilizzo di oggetti che implementano IDisposable&quot; nel <xref:System.IDisposable>argomento relativo all&quot;interfaccia.</xref:System.IDisposable>       La classe SecureString e i relativi membri non sono visibili a COM. Per ulteriori informazioni, vedere <xref:System.Runtime.InteropServices.ComVisibleAttribute>.</xref:System.Runtime.InteropServices.ComVisibleAttribute>       In questa sezione: [stringa Visual Studio. SecureString](#vsString)[operazioni SecureString](#Ops)[SecureString e interoperabilità](#interop)[come proteggere è SecureString?               ](#HowSecure)      <a name=&quot;vsString&quot;></a># # Stringa SecureString rispetto a un&quot;istanza di <xref:System.String?displayProperty=fullName>classe non è modificabile e, quando non è più necessario, non può essere pianificata a livello di codice per l&quot;operazione di garbage collection; l&quot;istanza è in sola lettura dopo la creazione e non è possibile prevedere quando l&quot;istanza verrà eliminata dalla memoria del computer.</xref:System.String?displayProperty=fullName> Poiché <xref:System.String?displayProperty=fullName>istanze non sono modificabili, operazioni che vengono visualizzati per modificare un&quot;istanza esistente in realtà creano una copia da modificare.</xref:System.String?displayProperty=fullName> Di conseguenza, se un <xref:System.String>oggetto contiene informazioni riservate, ad esempio una password, il numero di carta di credito o dati personali, vi è un rischio per le informazioni possano essere rivelate dopo che è utilizzato in quanto l&quot;applicazione non è possibile eliminare i dati dalla memoria del computer.</xref:System.String>       Un oggetto SecureString è simile a un <xref:System.String>in quanto dispone di un valore di testo dell&quot;oggetto.</xref:System.String> Tuttavia, il valore di SecureString oggetto è bloccato in memoria, è possibile utilizzare un meccanismo di protezione, ad esempio la crittografia, fornita dal sistema operativo sottostante, può essere modificata fino a quando l&quot;applicazione viene contrassegnato come di sola lettura e può essere eliminato dalla memoria del computer tramite l&quot;applicazione che chiama il <xref:System.Security.SecureString.Dispose%2A>metodo o dal garbage collector di .NET Framework.</xref:System.Security.SecureString.Dispose%2A>       Per una descrizione delle limitazioni della classe SecureString, vedere il [come proteggere è SecureString?](#HowSecure) sezione.       [Torna all&quot;inizio](#top) <a name=&quot;Ops&quot;> </a> # # SecureString operazioni SecureString la classe include membri che consentono di eseguire le operazioni seguenti: creare un&quot;istanza di un oggetto SecureString si crea un&quot;istanza di un oggetto SecureString chiamando il costruttore senza parametri.             Aggiungere caratteri SecureString dell&quot;oggetto è possibile aggiungere un singolo carattere alla volta a un oggetto SecureString chiamando il relativo <xref:System.Security.SecureString.AppendChar%2A>o <xref:System.Security.SecureString.InsertAt%2A>metodo.</xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      > [!IMPORTANT] > Oggetto SecureString A mai deve essere creato da un oggetto <xref:System.String>in quanto i dati sensibili sono già soggetto a delle conseguenze di persistenza di memoria della classe non modificabile di <xref:System.String>classe.</xref:System.String> </xref:System.String> Il modo migliore per costruire un oggetto SecureString proviene da un&quot;origine non gestita di carattere per volta, ad esempio il <xref:System.Console.ReadKey%2A?displayProperty=fullName>metodo.</xref:System.Console.ReadKey%2A?displayProperty=fullName>       Rimuovi caratteri da SecureString dell&quot;oggetto è possibile sostituire un singolo carattere chiamando il <xref:System.Security.SecureString.SetAt%2A>(metodo), rimuovere un singolo carattere chiamando il <xref:System.Security.SecureString.RemoveAt%2A>metodo oppure rimuovere tutti i caratteri da SecureString istanza chiamando il <xref:System.Security.SecureString.Clear%2A>metodo.</xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.SetAt%2A>       Rendere l&quot;oggetto SecureString di sola lettura dopo aver definito la stringa che rappresenta l&quot;oggetto SecureString, chiamare il relativo <xref:System.Security.SecureString.MakeReadOnly%2A>metodo per rendere la stringa di sola lettura.</xref:System.Security.SecureString.MakeReadOnly%2A>       Informazioni sull&quot;oggetto SecureString SecureString la classe contiene solo due membri che forniscono informazioni sulla stringa di: relativo <xref:System.Security.SecureString.Length%2A>proprietà, che indica il numero di unità di codice UTF16 codificate nella stringa; e <xref:System.Security.SecureString.IsReadOnly%2A>, metodo, che indica se l&quot;istanza è di sola lettura.</xref:System.Security.SecureString.IsReadOnly%2A> </xref:System.Security.SecureString.Length%2A>       Rilasciare la memoria allocata per l&quot;istanza di SecureString SecureString perché implementa il <xref:System.IDisposable>interfaccia, si rilascia la memoria chiamando la <xref:System.Security.SecureString.Dispose%2A>metodo.</xref:System.Security.SecureString.Dispose%2A> </xref:System.IDisposable>       La classe SecureString non contiene membri che esaminano, confrontano o convertono il valore di SecureString. L&quot;assenza di tali membri consente di proteggere il valore dell&quot;istanza da un&quot;esposizione accidentale o intenzionali. Utilizzare i membri appropriati del <xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>classe, ad esempio il <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>(metodo), per modificare il valore di un oggetto SecureString.</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> </xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>       Libreria di classi .NET Framework utilizza in genere le istanze di SecureString nei modi seguenti:, per fornire informazioni relative alle password a un processo tramite il <xref:System.Diagnostics.ProcessStartInfo>struttura o chiamando un overload del <xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName>metodo che presenta un parametro di tipo SecureString.</xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> </xref:System.Diagnostics.ProcessStartInfo>      -Per fornire informazioni sulla password di rete chiamando un <xref:System.Net.NetworkCredential>il costruttore di classe con un parametro di tipo SecureString o utilizzando il <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName>proprietà.</xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> </xref:System.Net.NetworkCredential>      -Per fornire informazioni relative alle password per l&quot;autenticazione di SQL Server tramite la chiamata di <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>costruttore o il recupero del valore del <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName>proprietà.</xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>      -Per passare una stringa a codice non gestito. Per ulteriori informazioni, vedere il [SecureString e interoperabilità](#interop) sezione.       [Torna all&quot;inizio](#top) <a name=&quot;interop&quot;> </a> # # SecureString e interoperabilità perché il sistema operativo non supporta direttamente SecureString, è necessario convertire il valore dell&quot;oggetto SecureString al tipo di stringa necessarie prima di passare la stringa di un metodo nativo.        La <xref:System.Runtime.InteropServices.Marshal>classe dispone di cinque metodi di eseguire tale operazione:- <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>, che converte il valore di stringa SecureString in una stringa binaria (BSTR) riconosciuto da COM.</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>e <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>, che copia il valore di stringa SecureString in una stringa ANSI nella memoria non gestita.</xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>e <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>, che copia il valore di stringa SecureString in una stringa Unicode in memoria non gestita.</xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>       Ognuno di questi metodi crea una stringa di testo non crittografato nella memoria non gestita. È responsabilità dello sviluppatore per azzerare e liberare la memoria non appena non è più necessario. Ciascuno dei metodi di allocazione della memoria e di conversione stringa ha un metodo corrispondente per azzerare e liberare la memoria allocata: | Metodo di allocazione e la conversione | Zero e metodo free |   |--------------------------------------|--------------------------|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>|       [Back to top](#top)      <a name=&quot;HowSecure&quot;></a>    ## How secure is SecureString?</xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>    Quando creato correttamente, un&quot;istanza di SecureString offre una protezione dati maggiore rispetto a un <xref:System.String>.</xref:System.String> Quando si crea una stringa da una carattere in fase origine, <xref:System.String>Crea più intermedio in memoria, mentre SecureString viene creata una sola istanza.</xref:System.String>  Operazione di Garbage collection <xref:System.String>oggetti è non deterministico.</xref:System.String> Inoltre, poiché la memoria non è stato aggiunto, il garbage collector renderà copie aggiuntive di <xref:System.String>valori quando lo spostamento e la compattazione della memoria.</xref:System.String> Al contrario, la memoria allocata a un oggetto SecureString viene aggiunto e che la memoria può essere liberata chiamando la <xref:System.Security.SecureString.Dispose%2A>metodo.</xref:System.Security.SecureString.Dispose%2A>       Anche se i dati archiviati in un&quot;istanza di SecureString sono più sicuro rispetto ai dati archiviati in un&quot; <xref:System.String>istanza, esistono numerose limitazioni in modalità di protezione valido. un&quot;istanza SecureString</xref:System.String> Tra cui: piattaforma sul sistema operativo Windows, il contenuto della matrice di caratteri interno di un&quot;istanza di SecureString è crittografato. Tuttavia, se a causa di API o problemi di gestione delle chiavi mancanti, la crittografia non è disponibile in tutte le piattaforme. Per questo motivo, è disponibile sul Desktop (solo Windows) e non su .NET Core SecureString.       Durata anche se l&quot;implementazione di SecureString è in grado di sfruttare i vantaggi della crittografia, il testo normale assegnato all&quot;istanza può essere esposte in vari momenti SecureString:, perché Windows non offre un&quot;implementazione di stringa sicura a livello di sistema operativo, .NET Framework ancora deve convertire il valore di stringa sicura nella relativa rappresentazione di testo normale per poter essere utilizzato.      -Ogni volta che viene modificato il valore della stringa protetta dai metodi, ad esempio <xref:System.Security.SecureString.AppendChar%2A>o <xref:System.Security.SecureString.RemoveAt%2A>, deve essere decrittografato (ad esempio, convertire indietro in testo normale), modificare e quindi crittografate di nuovo.</xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      -Se la stringa sicura viene utilizzata in una chiamata di interoperabilità, è necessario convertirlo in una stringa ANSI, una stringa Unicode o una stringa binaria (BSTR). Per ulteriori informazioni, vedere il [SecureString e interoperabilità](#interop) sezione.       L&quot;intervallo di tempo per cui viene esposta SecureString del valore dell&quot;istanza viene semplicemente ridotto rispetto a quando la <xref:System.String>classe.</xref:System.String>       Archiviazione e utilizzo di più in generale, la classe SecureString definisce un meccanismo di archiviazione per i valori stringa che deve essere protetto o mantenuto riservato. Tuttavia, di fuori di .NET Framework stesso, alcun meccanismo di utilizzo non supporta SecureString. Ciò significa che la stringa sicura deve essere convertita in un formato utilizzabile (in genere una forma di testo non crittografato) che possa essere riconosciuto dalla relativa destinazione e che la conversione e la decrittografia deve verificarsi nello spazio utente.       In generale, SecureString è più sicura <xref:System.String>poiché limita l&quot;esposizione dei dati di stringa sensibile.</xref:System.String> Tuttavia, tali stringhe possono essere ancora esposte per qualsiasi operazione che ha accesso alla memoria non elaborata, ad esempio un processo dannoso in esecuzione nel computer host, un dump del processo o un file di swapping visualizzabile dall&quot;utente o processo. Anziché utilizzare SecureString per proteggere le password, l&quot;alternativa consigliata è di utilizzare un handle opaco per le credenziali archiviate all&quot;esterno del processo.       [Torna all&quot;inizio](#top)"
  example:
  - "The following example demonstrates how to use a SecureString to secure a user’s password for use as a credential to start a new process.  \n  \n [!code-vb[System.Security.SecureString.Ctor#4](~/add/codesnippet/visualbasic/t-system.security.secure_1.vb)]\n [!code-cs[System.Security.SecureString.Ctor#4](~/add/codesnippet/csharp/t-system.security.secure_1.cs)]"
  syntax:
    content: 'public sealed class SecureString : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecureString.#ctor
  id: '#ctor'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.SecureString&quot;> </xref> classe."
  remarks: ''
  example:
  - "The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object. It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.  \n  \n [!code-cs[System.Security.SecureString.Ctor#2](~/add/codesnippet/csharp/m-system.security.secure_7_1.cs)]\n [!code-cpp[System.Security.SecureString.Ctor#2](~/add/codesnippet/cpp/m-system.security.secure_7_1.cpp)]\n [!code-vb[System.Security.SecureString.Ctor#2](~/add/codesnippet/visualbasic/m-system.security.secure_7_1.vb)]  \n  \n The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.  \n  \n [!code-vb[System.Security.SecureString.Ctor#3](~/add/codesnippet/visualbasic/m-system.security.secure_7_2.vb)]\n [!code-cpp[System.Security.SecureString.Ctor#3](~/add/codesnippet/cpp/m-system.security.secure_7_2.cpp)]\n [!code-cs[System.Security.SecureString.Ctor#3](~/add/codesnippet/csharp/m-system.security.secure_7_2.cs)]"
  syntax:
    content: public SecureString ();
    parameters: []
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Si è verificato un errore durante la protezione o la rimozione della protezione il valore di questa istanza."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Questa operazione non è supportata in questa piattaforma."
  platform:
  - net462
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  id: '#ctor(System.Char*,System.Int32)'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Security.SecureString&quot;> </xref> classe da una sottomatrice di &lt;xref:System.Char?displayProperty=fullName&gt; oggetti.       Questo costruttore non è conforme a CLS. L&quot;alternativa conforme a CLS è &lt;xref:System.Security.SecureString.%23ctor?displayProperty=fullName&gt;."
  remarks: "Questo costruttore inizializza la nuova <xref:System.Security.SecureString>oggetto per il numero di caratteri in `value` specificato da `length`; il valore dell&quot;istanza viene quindi crittografato.</xref:System.Security.SecureString>       In c#, questo costruttore viene definito solo nel contesto del codice unsafe."
  example:
  - "The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.  \n  \n [!code-cpp[System.Security.SecureString.Ctor2#1](~/add/codesnippet/cpp/m-system.security.secure_3_1.cpp)]\n [!code-cs[System.Security.SecureString.Ctor2#1](~/add/codesnippet/csharp/securestringctor/ctor1.cs#1)]"
  syntax:
    content: public SecureString (char* value, int length);
    parameters:
    - id: value
      type: System.Char*
      description: "Un puntatore a una matrice di &lt;xref:System.Char?displayProperty=fullName&gt; oggetti."
    - id: length
      type: System.Int32
      description: "Il numero di elementi di `value` da includere nella nuova istanza."
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>length</code>è minore di zero o maggiore di 65.536."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Si è verificato un errore durante la protezione o la rimozione della protezione il valore di questa stringa protetta."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Questa operazione non è supportata in questa piattaforma."
  platform:
  - net462
- uid: System.Security.SecureString.AppendChar(System.Char)
  id: AppendChar(System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Aggiunge un carattere alla fine della stringa protetta corrente."
  remarks: "Se l&quot;implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore di questa stringa protetta, se presente, non è protetto; `c` viene aggiunto; quindi il nuovo valore della stringa protetta è nuovo protetto."
  example:
  - "The following example demonstrates how the AppendChar, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_6_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_6_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_1.vb)]  \n  \n The following example demonstrates how the AppendChar and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_6_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_6_2.cs)]"
  syntax:
    content: public void AppendChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "Un carattere da aggiungere a questa stringa protetta."
  overload: System.Security.SecureString.AppendChar*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questa stringa protetta è già stata eliminata."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Questa stringa protetta è di sola lettura."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Eseguire questa operazione renderebbe la lunghezza di questa stringa protetta maggiore di 65.536 caratteri."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Si è verificato un errore durante la protezione o la rimozione della protezione il valore di questa stringa protetta."
  platform:
  - net462
- uid: System.Security.SecureString.Clear
  id: Clear
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Elimina il valore della stringa protetta corrente."
  remarks: "La memoria del computer che contiene il valore di questa stringa protetta viene azzerata, quindi la lunghezza del valore di questa stringa protetta è impostata su zero."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and Clear methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_5_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_5_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_5_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.SecureString.Clear*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questa stringa protetta è già stata eliminata."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Questa stringa protetta è di sola lettura."
  platform:
  - net462
- uid: System.Security.SecureString.Copy
  id: Copy
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Crea una copia della stringa protetta corrente."
  remarks: "Se un&quot;istanza di un <xref:System.Security.SecureString>è di sola lettura, la copia di tale istanza non sarà in sola lettura.</xref:System.Security.SecureString>"
  syntax:
    content: public System.Security.SecureString Copy ();
    parameters: []
    return:
      type: System.Security.SecureString
      description: "Copia duplicata di questa stringa protetta."
  overload: System.Security.SecureString.Copy*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questa stringa protetta è già stata eliminata."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Si è verificato un errore durante la protezione o la rimozione della protezione il valore di questa stringa protetta."
  platform:
  - net462
- uid: System.Security.SecureString.Dispose
  id: Dispose
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Rilascia tutte le risorse usate dall&quot;oggetto corrente <xref href=&quot;System.Security.SecureString&quot;> </xref> oggetto."
  remarks: "Il metodo Dispose scrive zero binari per la memoria allocata che contiene il valore di questo <xref:System.Security.SecureString>dell&quot;oggetto, quindi libera la memoria allocata.</xref:System.Security.SecureString>       Per ulteriori informazioni, vedere [Garbage Collection](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.SecureString.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  id: InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Inserisce un carattere in questa stringa protetta nella posizione di indice specificata."
  remarks: "L&quot;indice è in base zero. il primo carattere in questa stringa protetta è nella posizione di indice zero.       Se l&quot;implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore della stringa protetta, se presente, non è protetto; `c` viene inserito in corrispondenza della posizione di indice specificato; quindi il nuovo valore è di nuovo protetto. Il metodo InsertAt produce gli stessi risultati di <xref:System.Security.SecureString.AppendChar%2A>metodo, che inserisce un carattere alla fine di una stringa sicura, se il `index` parametro di InsertAt è impostato per la lunghezza di questa istanza.</xref:System.Security.SecureString.AppendChar%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, InsertAt, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_0_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_0_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_0_1.vb)]"
  syntax:
    content: public void InsertAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "La posizione dell&quot;indice in cui parametro `c` viene inserito."
    - id: c
      type: System.Char
      description: "Carattere da inserire."
  overload: System.Security.SecureString.InsertAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questa stringa protetta è già stata eliminata."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Questa stringa protetta è di sola lettura."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero o maggiore della lunghezza di questa stringa protetta.       - oppure - questa operazione renderebbe la lunghezza di questa stringa protetta maggiore di 65.536 caratteri."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Si è verificato un errore durante la protezione o la rimozione della protezione il valore di questa stringa protetta."
  platform:
  - net462
- uid: System.Security.SecureString.IsReadOnly
  id: IsReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Indica se questa stringa protetta è di sola lettura."
  remarks: "Dopo un&quot;istanza di <xref:System.Security.SecureString>è di sola lettura dal <xref:System.Security.SecureString.MakeReadOnly%2A>metodo, qualsiasi tentativo di modificare il valore di istanza genera un <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.SecureString.MakeReadOnly%2A> </xref:System.Security.SecureString> Utilizzare il metodo IsReadOnly per verificare se una <xref:System.Security.SecureString>è di sola lettura prima di tentare di modificare i dati.</xref:System.Security.SecureString>"
  syntax:
    content: public bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se questa stringa protetta è contrassegnata come sola lettura. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecureString.IsReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questa stringa protetta è già stata eliminata."
  platform:
  - net462
- uid: System.Security.SecureString.Length
  id: Length
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Ottiene il numero di caratteri nella stringa protetta corrente."
  remarks: "La proprietà Length restituisce il numero di <xref:System.Char>oggetti in questa istanza, non il numero di caratteri Unicode.</xref:System.Char> Un carattere Unicode può essere rappresentato da più <xref:System.Char>oggetto.</xref:System.Char>       La lunghezza massima di un <xref:System.Security.SecureString>istanza è 65.536 caratteri.</xref:System.Security.SecureString>"
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "Il numero di &lt;xref:System.Char?displayProperty=fullName&gt; gli oggetti in questa stringa protetta."
  overload: System.Security.SecureString.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questa stringa protetta è già stata eliminata."
  platform:
  - net462
- uid: System.Security.SecureString.MakeReadOnly
  id: MakeReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Imposta il valore di testo di questa stringa protetta di sola lettura."
  remarks: "Inizializzare il valore di testo di un&quot;istanza del <xref:System.Security.SecureString>classe con il <xref:System.Security.SecureString.%23ctor%2A>costruttori e modificare il valore con il <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, e <xref:System.Security.SecureString.AppendChar%2A>metodi.</xref:System.Security.SecureString.AppendChar%2A> </xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.SetAt%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.%23ctor%2A> </xref:System.Security.SecureString>       Dopo che si sono apportate le modifiche finali, utilizzare il metodo di MakeReadOnly per rendere il valore dell&quot;istanza non modificabile (sola lettura). Dopo che il valore è contrassegnato come di sola lettura, qualsiasi ulteriore tentativo di modificarlo genererà un <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>       L&quot;effetto della chiamata MakeReadOnly è permanente perché la <xref:System.Security.SecureString>classe in alcun modo per rendere modificabile la stringa sicura nuovamente.</xref:System.Security.SecureString> Utilizzare il <xref:System.Security.SecureString.IsReadOnly%2A>metodo per verificare se un&quot;istanza di <xref:System.Security.SecureString>è di sola lettura.</xref:System.Security.SecureString> </xref:System.Security.SecureString.IsReadOnly%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_1_1.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_1_1.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_1_1.cs)]"
  syntax:
    content: public void MakeReadOnly ();
    parameters: []
  overload: System.Security.SecureString.MakeReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questa stringa protetta è già stata eliminata."
  platform:
  - net462
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Rimuove il carattere alla posizione di indice specificata da questa stringa protetta."
  remarks: "L&quot;indice è in base zero. il primo carattere in questa istanza è nella posizione di indice zero.       Se l&quot;implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore di questa stringa protetta, se presente, non è protetto; viene rimosso il carattere alla posizione di indice specificata. quindi il nuovo valore è di nuovo protetto."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, RemoveAt, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_2_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_2_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_1.vb)]  \n  \n The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and RemoveAt methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_2_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_2_2.cs)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Posizione di indice di un carattere in questa stringa protetta."
  overload: System.Security.SecureString.RemoveAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questa stringa protetta è già stata eliminata."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Questa stringa protetta è di sola lettura."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero o maggiore di o uguale alla lunghezza di questa stringa protetta."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Si è verificato un errore durante la protezione o la rimozione della protezione il valore di questa stringa protetta."
  platform:
  - net462
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  id: SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Sostituisce il carattere esistente nella posizione di indice specificato con un altro carattere."
  remarks: "L&quot;indice è in base zero. il primo carattere in questa istanza è nella posizione di indice zero.       Se l&quot;implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore della stringa protetta, se presente, non è protetto; `c` viene assegnato alla posizione dell&quot;indice specificato; quindi il nuovo valore è di nuovo protetto."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, SetAt, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_4_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_4_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_4_1.vb)]"
  syntax:
    content: public void SetAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "La posizione di indice di un carattere esistente in questa stringa protetta"
    - id: c
      type: System.Char
      description: "Un carattere che sostituisce il carattere esistente."
  overload: System.Security.SecureString.SetAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Questa stringa protetta è già stata eliminata."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Questa stringa protetta è di sola lettura."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero o maggiore di o uguale alla lunghezza di questa stringa protetta."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Si è verificato un errore durante la protezione o la rimozione della protezione il valore di questa stringa protetta."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecureString.#ctor
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.SecureString.AppendChar(System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Security.SecureString.Clear
  parent: System.Security.SecureString
  isExternal: false
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
- uid: System.Security.SecureString.Copy
  parent: System.Security.SecureString
  isExternal: false
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.SecureString.Dispose
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
- uid: System.Security.SecureString.IsReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecureString.Length
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
- uid: System.Security.SecureString.#ctor*
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString
  nameWithType: SecureString.SecureString
- uid: System.Security.SecureString.AppendChar*
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar
  nameWithType: SecureString.AppendChar
- uid: System.Security.SecureString.Clear*
  parent: System.Security.SecureString
  isExternal: false
  name: Clear
  nameWithType: SecureString.Clear
- uid: System.Security.SecureString.Copy*
  parent: System.Security.SecureString
  isExternal: false
  name: Copy
  nameWithType: SecureString.Copy
- uid: System.Security.SecureString.Dispose*
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose
  nameWithType: SecureString.Dispose
- uid: System.Security.SecureString.InsertAt*
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt
  nameWithType: SecureString.InsertAt
- uid: System.Security.SecureString.IsReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly
  nameWithType: SecureString.IsReadOnly
- uid: System.Security.SecureString.Length*
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly
  nameWithType: SecureString.MakeReadOnly
- uid: System.Security.SecureString.RemoveAt*
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt
  nameWithType: SecureString.RemoveAt
- uid: System.Security.SecureString.SetAt*
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt
  nameWithType: SecureString.SetAt
