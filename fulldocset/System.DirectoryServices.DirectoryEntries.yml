### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.DirectoryEntries
  id: DirectoryEntries
  children:
  - System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)
  - System.DirectoryServices.DirectoryEntries.Find(System.String)
  - System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)
  - System.DirectoryServices.DirectoryEntries.GetEnumerator
  - System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)
  - System.DirectoryServices.DirectoryEntries.SchemaFilter
  langs:
  - csharp
  name: DirectoryEntries
  nameWithType: DirectoryEntries
  fullName: System.DirectoryServices.DirectoryEntries
  type: Class
  summary: "Contiene una raccolta di <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> oggetti."
  syntax:
    content: 'public class DirectoryEntries : System.Collections.IEnumerable'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  inheritedMembers: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: Add(String,String)
  nameWithType: DirectoryEntries.Add(String,String)
  fullName: System.DirectoryServices.DirectoryEntries.Add(String,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Crea una nuova voce nel contenitore."
  remarks: "È necessario chiamare il <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>metodo sulla nuova voce per rendere permanente la creazione.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> Quando si chiama questo metodo, è quindi possibile impostare valori di proprietà obbligatori sulla nuova voce. I provider hanno requisiti diversi per le proprietà che è necessario impostare prima di chiamare il <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>metodo è costituito.</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> Se questi requisiti non vengono soddisfatti, il provider può generare un&quot;eccezione. Rivolgersi al provider per determinare quali proprietà devono essere impostate prima di eseguire il commit delle modifiche."
  example:
  - "The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.  \n  \n```vb  \nDim strPath As String = \"IIS://localhost/W3SVC/1/Root\"  \n' Create a new 'DirectoryEntry' object with the given path.  \nDim myDE As New DirectoryEntry(strPath)  \nDim myEntries As DirectoryEntries = myDE.Children  \n' Create a new entry 'Sample' in the container.  \nDim myDirectoryEntry As DirectoryEntry = myEntries.Add(\"CN=Sample\", myDE.SchemaClassName)  \n' Save changes of entry in the 'Active Directory Domain Services'.  \nmyDirectoryEntry.CommitChanges()  \nConsole.WriteLine(myDirectoryEntry.Name + \" entry is created in container.\")  \n```  \n  \n The following C# example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.  \n  \n [C#]  \n  \n```  \nString strPath = \"IIS://localhost/W3SVC/1/Root\";  \n  \n// Create a new 'DirectoryEntry' object with the given path.  \nDirectoryEntry myDE = new DirectoryEntry(strPath);  \nDirectoryEntries myEntries = myDE.Children;  \n  \n// Create a new entry 'Sample' in the container.  \nDirectoryEntry myDirectoryEntry =   \n   myEntries.Add(\"CN=Sample\", myDE.SchemaClassName);  \n// Save changes of entry in the 'Active Directory Domain Services'.  \nmyDirectoryEntry.CommitChanges();  \nConsole.WriteLine (myDirectoryEntry.Name + \" entry is created in container.\");  \n```  \n  \n The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with a specified path, then creates a new entry in the container and saves it.  \n  \n```  \nString* strPath = S\"IIS://localhost/W3SVC/1/Root\";  \n  \n// Create a new 'DirectoryEntry' object with the given path.  \nDirectoryEntry* myDE = new DirectoryEntry(strPath);  \nDirectoryEntries* myEntries = myDE->Children;  \n  \n// Create a new entry 'Sample' in the container.  \nDirectoryEntry* myDirectoryEntry = myEntries->Add(S\"CN=Sample\", myDE->SchemaClassName);  \n// Save changes of entry in the 'Active Directory Domain Services'.  \nmyDirectoryEntry->CommitChanges();  \nConsole::WriteLine(\"{0} entry is created in container.\", myDirectoryEntry->Name);  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry Add (string name, string schemaClassName);
    parameters:
    - id: name
      type: System.String
      description: "Il nome della nuova voce."
    - id: schemaClassName
      type: System.String
      description: "Il nome dello schema che viene utilizzato per la nuova voce."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "Oggetto <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> oggetto che rappresenta la nuova voce."
  overload: System.DirectoryServices.DirectoryEntries.Add*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Si è verificato un errore durante la chiamata all&quot;interfaccia sottostante."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.Find(System.String)
  id: Find(System.String)
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: Find(String)
  nameWithType: DirectoryEntries.Find(String)
  fullName: System.DirectoryServices.DirectoryEntries.Find(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Restituisce il membro della raccolta con il nome specificato."
  remarks: "Se gli oggetti figlio di tipi diversi hanno lo stesso nome, viene restituito il primo oggetto figlio corrispondente.      > [!NOTE] > Provider Internet Information Services (IIS) non supporta questo metodo. Utilizzare il metodo di overload <xref:System.DirectoryServices.DirectoryEntries.Find%2A>(metodo) e specificare una stringa vuota (&quot;&quot;) per il `schemaClassName` parametro.</xref:System.DirectoryServices.DirectoryEntries.Find%2A>   >> Se non viene trovato alcun risultato corrispondente, un <xref:System.DirectoryServices.DirectoryServicesCOMException>con errore viene generato codice 0x2030.</xref:System.DirectoryServices.DirectoryServicesCOMException>"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry Find (string name);
    parameters:
    - id: name
      type: System.String
      description: "Contiene il nome dell&quot;oggetto figlio da cercare."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "Oggetto <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> che rappresenta l&quot;oggetto figlio che è stato trovato."
  overload: System.DirectoryServices.DirectoryEntries.Find*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "L&quot;oggetto servizi di dominio Active Directory non è un contenitore."
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Si è verificato un errore durante la chiamata all&quot;interfaccia sottostante."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)
  id: Find(System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: Find(String,String)
  nameWithType: DirectoryEntries.Find(String,String)
  fullName: System.DirectoryServices.DirectoryEntries.Find(String,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Restituisce il membro della raccolta con il nome specificato e del tipo specificato."
  remarks: "Se non viene trovato alcun risultato corrispondente, un <xref:System.DirectoryServices.DirectoryServicesCOMException>con errore viene generato codice 0x2030.</xref:System.DirectoryServices.DirectoryServicesCOMException>"
  example:
  - "The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. It attempts to retrieve the newly created entry.  \n  \n```vb  \nTry  \n     Dim myEntry1 As DirectoryEntry  \n     Dim myEntry2 As DirectoryEntry  \n     Dim strPath As String = \"LDAP://DC=fabrikam,DC=com\"  \n  \n     ' Create a 'DirectoryEntry' object with the given path.  \n     Dim myDE As New DirectoryEntry(strPath)  \n     Dim myEntries As DirectoryEntries = myDE.Children  \n  \n     ' Create a new entry in the container.  \n     myEntry1 = myEntries.Add(\"CN=Sample Entry\", myDE.SchemaClassName)  \n     ' Save changes in the 'Active Directory Domain Services' store.  \n     myEntry1.CommitChanges()  \n  \n     ' Find a child in the 'DirectoryEntries' collection which has the   \n     ' specified name and type.  \n     myEntry2 = myEntries.Find(\"CN=Sample Entry\", myDE.SchemaClassName)  \n     Console.WriteLine(myEntry2.Name + \" is found in container.\")  \n  \n     Catch e As Exception  \n          Console.WriteLine(\"The following exception was raised : {0}\", e.Message.ToString())  \n     End Try  \n```  \n  \n The following C# example shows how to create a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. It attempts to retrieve the newly- created entry.  \n  \n```c#  \nusing System;  \nusing System.DirectoryServices;   \n  \nclass MyClass1  \n{  \n   static void Main()  \n   {  \n      try  \n      {          \n         DirectoryEntry myEntry1;  \n         DirectoryEntry myEntry2;  \n         String strPath = \"LDAP://DC=fabrikam,DC=com\";  \n  \n         // Create a 'DirectoryEntry' object with the given path.  \n         DirectoryEntry myDE = new DirectoryEntry(strPath);  \n         DirectoryEntries myEntries = myDE.Children;  \n  \n         // Create a new entry in the container.  \n         myEntry1 = myEntries.Add(\"CN=Sample Entry\",myDE.SchemaClassName);  \n         // Save changes in the 'Active Directory Domain Services' store.  \n         myEntry1.CommitChanges();  \n  \n         // Find a child in the 'DirectoryEntries' collection which has the   \n         // specified name and type.  \n         myEntry2 = myEntries.Find(\"CN=Sample Entry\",myDE.SchemaClassName);  \n         Console.WriteLine (myEntry2.Name + \" is found in container.\");  \n  \n      }  \n      catch(Exception e)  \n      {  \n         Console.WriteLine(\"The following exception was raised : {0}\",e.Message);  \n      }  \n   }  \n}  \n  \n```  \n  \n The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. It attempts to retrieve the new entry.  \n  \n```cpp#  \n#using <mscorlib.dll>  \n#using <System.dll>  \n#using <System.Directoryservices.dll>  \n  \nusing namespace System;  \nusing namespace System::DirectoryServices;   \n  \nint main() {  \n    try {          \n        DirectoryEntry* myEntry1;  \n        DirectoryEntry* myEntry2;  \n        String* strPath = S\"LDAP://DC=fabrikam,DC=com\";  \n  \n        // Create a 'DirectoryEntry' object with the given path.  \n        DirectoryEntry* myDE = new DirectoryEntry(strPath);  \n        DirectoryEntries* myEntries = myDE->Children;  \n  \n        // Create a new entry in the container.  \n        myEntry1 = myEntries->Add(S\"CN=Sample Entry\", myDE->SchemaClassName);  \n        // Save changes in the 'Active Directory Domain Services' store.  \n        myEntry1->CommitChanges();  \n  \n        // Find a child in the 'DirectoryEntries' collection which has the   \n        // specified name and type.  \n        myEntry2 = myEntries->Find(S\"CN=Sample Entry\", myDE->SchemaClassName);  \n        Console::WriteLine (\"{0} is found in container.\", myEntry2->Name);  \n    } catch(Exception* e) {  \n        Console::WriteLine(\"The following exception was raised : {0}\", e->Message);  \n    }  \n}  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry Find (string name, string schemaClassName);
    parameters:
    - id: name
      type: System.String
      description: "Il nome dell&quot;oggetto directory figlio da cercare."
    - id: schemaClassName
      type: System.String
      description: "Il nome della classe dell&quot;oggetto directory figlio da cercare."
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "Oggetto <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> oggetto che rappresenta l&quot;oggetto figlio che è stato trovato."
  overload: System.DirectoryServices.DirectoryEntries.Find*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "L&quot;oggetto servizi di dominio Active Directory non è un contenitore."
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Si è verificato un errore durante la chiamata all&quot;interfaccia sottostante."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: DirectoryEntries.GetEnumerator()
  fullName: System.DirectoryServices.DirectoryEntries.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Restituisce un enumeratore che scorre la raccolta."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Un <xref:System.Collections.IEnumerator>oggetto che può essere usato per scorrere la raccolta.</xref:System.Collections.IEnumerator>"
  overload: System.DirectoryServices.DirectoryEntries.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)
  id: Remove(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: Remove(DirectoryEntry)
  nameWithType: DirectoryEntries.Remove(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntries.Remove(DirectoryEntry)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Elimina un membro di questa raccolta."
  remarks: "Se la voce da rimuovere è un contenitore, il contenitore deve essere vuoto. Per eliminare un contenitore e tutti gli elementi figlio, utilizzare il <xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A>metodo.</xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A>"
  example:
  - "The following Visual Basic .NET example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. Finally, it retrieves the new entry and deletes it.  \n  \n```vb  \nImports System  \nImports System.DirectoryServices  \n  \nClass MyClass1  \n   Shared Sub Main()  \n      Try  \n         Dim strPath As String = \"IIS://localhost/W3SVC/1/Root\"  \n         Dim strName As String = \"\"  \n  \n         ' Create a new 'DirectoryEntry' object with the given path.  \n         Dim myDE As New DirectoryEntry(strPath)  \n         Dim myEntries As DirectoryEntries = myDE.Children  \n  \n         ' Create a new entry 'Sample' in the container.  \n         Dim myDirectoryEntry As DirectoryEntry = myEntries.Add(\"Sample\", myDE.SchemaClassName)  \n         ' Save changes of entry in the 'Active Directory Domain Services'.  \n         myDirectoryEntry.CommitChanges()  \n         Console.WriteLine(myDirectoryEntry.Name + \" entry is created in container.\")  \n  \n         ' Find 'Sample' entry in container.  \n         myDirectoryEntry = myEntries.Find(\"Sample\", myDE.SchemaClassName)  \n         Console.WriteLine(myDirectoryEntry.Name + \" found in container.\")  \n         ' Remove 'Sample' entry from container.  \n         strName = myDirectoryEntry.Name  \n         myEntries.Remove(myDirectoryEntry)  \n         Console.WriteLine(strName + \" entry is removed from container.\")  \n  \n      Catch e As Exception  \n         Console.WriteLine(\"The following exception was raised : {0}\", e.Message.ToString())  \n      End Try  \n   End Sub 'Main  \nEnd Class 'MyClass1  \n  \n```  \n  \n The following C# example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. Finally, it retrieves the new entry and deletes it.  \n  \n```c#  \nusing System;  \nusing System.DirectoryServices;   \n  \nclass MyClass1  \n{  \n   static void Main()  \n   {  \n      try  \n      {  \n         String strPath = \"IIS://localhost/W3SVC/1/Root\";  \n         String strName = \"\";  \n  \n         // Create a new 'DirectoryEntry' object with the given path.  \n         DirectoryEntry myDE = new DirectoryEntry(strPath);  \n         DirectoryEntries myEntries = myDE.Children;  \n  \n         // Create a new entry 'Sample' in the container.  \n         DirectoryEntry myDirectoryEntry =   \n            myEntries.Add(\"Sample\", myDE.SchemaClassName);  \n         // Save changes of entry in the 'Active Directory Domain Services'.  \n         myDirectoryEntry.CommitChanges();  \n         Console.WriteLine (myDirectoryEntry.Name +   \n            \" entry is created in container.\");  \n  \n         // Find 'Sample' entry in container.  \n         myDirectoryEntry = myEntries.Find(\"Sample\", myDE.SchemaClassName);  \n         Console.WriteLine(myDirectoryEntry.Name + \" found in container.\");  \n         // Remove 'Sample' entry from container.  \n         strName = myDirectoryEntry.Name;  \n         myEntries.Remove(myDirectoryEntry);  \n         Console.WriteLine(strName+ \" entry is removed from container.\");  \n  \n      }  \n      catch(Exception e)  \n      {  \n         Console.WriteLine(\"The following exception was raised : {0}\",  \n            e.Message);  \n      }  \n   }  \n}  \n  \n```  \n  \n The following C++ example creates a new <xref:System.DirectoryServices.DirectoryEntry> object with the specified path, then creates a new entry in the container and saves it. Finally, it retrieves the new entry and deletes it.  \n  \n```cpp#  \n#using <mscorlib.dll>  \n#using <System.dll>  \n#using <System.Directoryservices.dll>  \n  \nusing namespace System;  \nusing namespace System::DirectoryServices;   \n  \nint main() {  \n    try {  \n        String* strPath = S\"IIS://localhost/W3SVC/1/Root\";  \n        String* strName = S\"\";  \n  \n        // Create a new 'DirectoryEntry' object with the given path.  \n        DirectoryEntry* myDE = new DirectoryEntry(strPath);  \n        DirectoryEntries* myEntries = myDE->Children;  \n  \n        // Create a new entry 'Sample' in the container.  \n        DirectoryEntry* myDirectoryEntry =  myEntries->Add(S\"Sample\", myDE->SchemaClassName);  \n        // Save changes of entry in the 'Active Directory Domain Services'.  \n        myDirectoryEntry->CommitChanges();  \n        Console::WriteLine(S\"{0} entry is created in container.\", myDirectoryEntry->Name);  \n  \n        // Find 'Sample' entry in container.  \n        myDirectoryEntry = myEntries->Find(S\"Sample\", myDE->SchemaClassName);  \n        Console::WriteLine(S\"{0} found in container.\", myDirectoryEntry->Name);  \n        // Remove 'Sample' entry from container.  \n        strName = myDirectoryEntry->Name;  \n        myEntries->Remove(myDirectoryEntry);  \n        Console::WriteLine(S\"{0} entry is removed from container.\", strName);  \n    } catch(Exception* e) {  \n        Console::WriteLine(S\"The following exception was raised : {0}\", e->Message);  \n    }  \n}  \n  \n```"
  syntax:
    content: public void Remove (System.DirectoryServices.DirectoryEntry entry);
    parameters:
    - id: entry
      type: System.DirectoryServices.DirectoryEntry
      description: "Il nome del <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> oggetto da eliminare."
  overload: System.DirectoryServices.DirectoryEntries.Remove*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Si è verificato un errore durante la chiamata all&quot;interfaccia sottostante."
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntries.SchemaFilter
  id: SchemaFilter
  parent: System.DirectoryServices.DirectoryEntries
  langs:
  - csharp
  name: SchemaFilter
  nameWithType: DirectoryEntries.SchemaFilter
  fullName: System.DirectoryServices.DirectoryEntries.SchemaFilter
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Ottiene gli schemi che specificano quali oggetti figlio sono contenuti nella raccolta."
  remarks: "Se la proprietà SchemaFilter è vuota, gli oggetti figlio di tutti i tipi sono visibili nella raccolta. in caso contrario, solo quelli dei tipi specificati sono visibili."
  syntax:
    content: public System.DirectoryServices.SchemaNameCollection SchemaFilter { get; }
    return:
      type: System.DirectoryServices.SchemaNameCollection
      description: "Oggetto <xref href=&quot;System.DirectoryServices.SchemaNameCollection&quot;> </xref> che specifica quali oggetti figlio sono contenuti nel <xref href=&quot;System.DirectoryServices.DirectoryEntries&quot;> </xref> istanza."
  overload: System.DirectoryServices.DirectoryEntries.SchemaFilter*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.InteropServices.COMException
  isExternal: true
  name: System.Runtime.InteropServices.COMException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Add(String,String)
  nameWithType: DirectoryEntries.Add(String,String)
  fullName: System.DirectoryServices.DirectoryEntries.Add(String,String)
- uid: System.DirectoryServices.DirectoryEntry
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.DirectoryEntries.Find(System.String)
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Find(String)
  nameWithType: DirectoryEntries.Find(String)
  fullName: System.DirectoryServices.DirectoryEntries.Find(String)
- uid: System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Find(String,String)
  nameWithType: DirectoryEntries.Find(String,String)
  fullName: System.DirectoryServices.DirectoryEntries.Find(String,String)
- uid: System.DirectoryServices.DirectoryEntries.GetEnumerator
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: GetEnumerator()
  nameWithType: DirectoryEntries.GetEnumerator()
  fullName: System.DirectoryServices.DirectoryEntries.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Remove(DirectoryEntry)
  nameWithType: DirectoryEntries.Remove(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntries.Remove(DirectoryEntry)
- uid: System.DirectoryServices.DirectoryEntries.SchemaFilter
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: SchemaFilter
  nameWithType: DirectoryEntries.SchemaFilter
  fullName: System.DirectoryServices.DirectoryEntries.SchemaFilter
- uid: System.DirectoryServices.SchemaNameCollection
  parent: System.DirectoryServices
  isExternal: false
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
- uid: System.DirectoryServices.DirectoryEntries.Add*
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Add
  nameWithType: DirectoryEntries.Add
- uid: System.DirectoryServices.DirectoryEntries.Find*
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Find
  nameWithType: DirectoryEntries.Find
- uid: System.DirectoryServices.DirectoryEntries.GetEnumerator*
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: GetEnumerator
  nameWithType: DirectoryEntries.GetEnumerator
- uid: System.DirectoryServices.DirectoryEntries.Remove*
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: Remove
  nameWithType: DirectoryEntries.Remove
- uid: System.DirectoryServices.DirectoryEntries.SchemaFilter*
  parent: System.DirectoryServices.DirectoryEntries
  isExternal: false
  name: SchemaFilter
  nameWithType: DirectoryEntries.SchemaFilter
