### YamlMime:ManagedReference
items:
- uid: System.Security.IStackWalk
  id: IStackWalk
  children:
  - System.Security.IStackWalk.Assert
  - System.Security.IStackWalk.Demand
  - System.Security.IStackWalk.Deny
  - System.Security.IStackWalk.PermitOnly
  langs:
  - csharp
  name: IStackWalk
  nameWithType: IStackWalk
  fullName: System.Security.IStackWalk
  type: Interface
  summary: "Gestisce il percorso dello stack che determina se tutti i chiamanti nello stack di chiamate hanno le autorizzazioni necessarie per accedere a una risorsa protetta."
  remarks: "Codice parzialmente attendibile rappresenta sempre un rischio di sicurezza. In alcuni casi, possono essere modificato per eseguire azioni per conto di codice dannoso che non dispone dell&quot;autorizzazione per accedere a una risorsa. In questo modo, il codice dannoso può ottenere un accesso di sicurezza superiore a quello che dovrebbe essere consentito.       Common language runtime consente di proteggere il codice gestito da tali attacchi mediante l&quot;esecuzione di un&quot;analisi dello stack su tutte le chiamate. Il percorso dello stack è necessario che tutto il codice dello stack di chiamate dispone dell&quot;autorizzazione per accedere a una risorsa protetta. Poiché il codice che tenta l&quot;attacco sarà sempre un punto nello stack di chiamate, in grado di superare le proprie autorizzazioni di sicurezza."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IStackWalk
  implements: []
  platform:
  - net462
- uid: System.Security.IStackWalk.Assert
  id: Assert
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Indica che il codice chiamante può accedere alla risorsa identificata dall&quot;oggetto autorizzazioni corrente, anche se i chiamanti nello stack non dispongono dell&quot;autorizzazione per accedere alla risorsa."
  remarks: "La chiamata Assert interrompe il controllo delle autorizzazioni su chiamanti nello stack di chiamate. Pertanto, anche se ai chiamanti non dispone delle autorizzazioni necessarie, sarà comunque possibile accedere alle risorse. Un&quot;asserzione è efficace solo se il codice che chiama Assert passa il controllo della sicurezza per l&quot;autorizzazione che genera un&quot;asserzione.       Una chiamata a Assert è efficace fino a quando il codice chiamante restituisce al chiamante o una chiamata successiva a Assert inefficace la asserzione precedente. Inoltre, <xref:System.Security.CodeAccessPermission.RevertAssert%2A>o <xref:System.Security.CodeAccessPermission.RevertAll%2A>rimuove un&quot;asserzione in sospeso.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       L&quot;asserzione viene ignorato per un&quot;autorizzazione non concessa perché una richiesta di tale autorizzazione non riuscirà. Tuttavia, se il codice inferiore nello stack di chiamate chiama <xref:System.Security.IStackWalk.Demand%2A>per l&quot;autorizzazione, un <xref:System.Security.SecurityException>viene generata quando il percorso stack raggiunge il codice che ha tentato di chiamare Assert.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Ciò accade perché il codice che ha chiamato l&quot;asserzione non è stata concessa l&quot;autorizzazione, anche se si è tentato di asserzione.      > [!CAUTION] > Perché la chiamata Assert rimuove il requisito che tutto il codice nella catena di chiamate deve essere concessa l&quot;autorizzazione per accedere alla risorsa specificata, può provocare problemi di sicurezza se usata in modo non corretto o inappropriato. Pertanto, devono essere utilizzata con estrema cautela."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.IStackWalk.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Il codice chiamante non ha <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.IStackWalk.Demand
  id: Demand
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Determina in fase di esecuzione se tutti i chiamanti nello stack di chiamate dispongono dell&quot;autorizzazione specificata dall&quot;oggetto autorizzazioni corrente."
  remarks: "Questo metodo viene in genere utilizzato da librerie protette per garantire che i chiamanti dispongano dell&quot;autorizzazione per accedere a una risorsa. Ad esempio, una classe di file in una libreria di classi protette chiama richiesta per gli oggetti necessari <xref:System.Security.Permissions.FileIOPermission>prima di eseguire un&quot;operazione di file richiesta dal chiamante.</xref:System.Security.Permissions.FileIOPermission>       Le autorizzazioni del codice che chiama questo metodo non vengono esaminate; il controllo inizia da parte del chiamante immediato del codice e continua fino allo stack. Richiesta ha esito positivo solo se nessun <xref:System.Security.SecurityException>viene generato.</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IStackWalk.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Un chiamante di livello superiore nello stack di chiamate non dispone dell&quot;autorizzazione specificata dall&quot;oggetto autorizzazioni corrente.       - oppure - un chiamante nello stack di chiamate ha chiamato <xref:System.Security.IStackWalk.Deny*>sull&quot;oggetto di autorizzazione corrente.</xref:System.Security.IStackWalk.Deny*>"
  platform:
  - net462
- uid: System.Security.IStackWalk.Deny
  id: Deny
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Fa sì che ogni <xref:System.Security.IStackWalk.Demand*>per l&quot;oggetto corrente che passa attraverso il codice chiamante.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "Questo metodo impedisce ai chiamanti più in alto nello stack di chiamate di accedere alla risorsa protetta tramite il codice che chiama questo metodo, anche se i chiamanti dispongono dell&quot;autorizzazione per accedervi. Lo stack di chiamate viene rappresentato in genere come espansione verso il basso, in modo che più in alto nello stack di chiamate a metodi chiamano metodi inferiore nello stack di chiamate.       Deny può limitare la responsabilità del programmatore o impedire vulnerabilità della sicurezza accidentale, in quanto impedisce che il metodo che chiama Deny venga utilizzato per accedere alla risorsa protetta dall&quot;autorizzazione negata. Se un metodo chiama nega un&quot;autorizzazione e un <xref:System.Security.IStackWalk.Demand%2A>per tale autorizzazione viene richiamato da un chiamante inferiore nello stack di chiamate, la verifica della sicurezza avrà esito negativo quando viene raggiunta l&quot;istruzione Deny.</xref:System.Security.IStackWalk.Demand%2A>       Negare viene ignorato per un&quot;autorizzazione non concessa perché una richiesta di tale autorizzazione non riuscirà."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.IStackWalk.Deny*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IStackWalk.PermitOnly
  id: PermitOnly
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Fa sì che ogni <xref:System.Security.IStackWalk.Demand*>per tutti gli oggetti ad eccezione di quello corrente che passa attraverso il codice chiamante ha esito negativo, anche se codice di livello superiore nello stack di chiamate è stata concessa l&quot;autorizzazione per accedere ad altre risorse.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "È simile a PermitOnly <xref:System.Security.IStackWalk.Deny%2A>, perché entrambi provocano l&quot;analisi dello stack se avranno esito positivo.</xref:System.Security.IStackWalk.Deny%2A> La differenza è che <xref:System.Security.IStackWalk.Deny%2A>Specifica le autorizzazioni che provocano lo stack di percorso, mentre PermitOnly specifica solo le autorizzazioni che non provocano il percorso di stack.</xref:System.Security.IStackWalk.Deny%2A> Chiamare questo metodo per verificare che il codice può essere utilizzato per accedere solo le risorse specificate.       PermitOnly viene ignorato per un&quot;autorizzazione non concessa perché una richiesta di tale autorizzazione non riuscirà. Tuttavia, se il codice inferiore nello stack di in un secondo momento chiama <xref:System.Security.IStackWalk.Demand%2A>per l&quot;autorizzazione, un <xref:System.Security.SecurityException>viene generata quando il percorso stack raggiunge il codice che ha tentato di chiamare PermitOnly.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> In questo modo il codice che ha chiamato PermitOnly non è stata concessa l&quot;autorizzazione, anche se chiamato PermitOnly per l&quot;autorizzazione. Lo stack di chiamate viene rappresentato in genere come espansione verso il basso, in modo che più in alto nello stack di chiamate a metodi chiamano metodi inferiore nello stack di chiamate."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.IStackWalk.PermitOnly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.IStackWalk.Assert
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
- uid: System.Security.IStackWalk.Demand
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
- uid: System.Security.IStackWalk.Deny
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
- uid: System.Security.IStackWalk.PermitOnly
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
- uid: System.Security.IStackWalk.Assert*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert
  nameWithType: IStackWalk.Assert
- uid: System.Security.IStackWalk.Demand*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand
  nameWithType: IStackWalk.Demand
- uid: System.Security.IStackWalk.Deny*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny
  nameWithType: IStackWalk.Deny
- uid: System.Security.IStackWalk.PermitOnly*
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly
  nameWithType: IStackWalk.PermitOnly
