### YamlMime:ManagedReference
items:
- uid: System.Web.Security.UrlAuthorizationModule
  id: UrlAuthorizationModule
  children:
  - System.Web.Security.UrlAuthorizationModule.#ctor
  - System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  - System.Web.Security.UrlAuthorizationModule.Dispose
  - System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  langs:
  - csharp
  name: UrlAuthorizationModule
  nameWithType: UrlAuthorizationModule
  fullName: System.Web.Security.UrlAuthorizationModule
  type: Class
  summary: "Verifica che l&quot;utente disponga dell&quot;autorizzazione per accedere all&quot;URL richiesto. Questa classe non può essere ereditata."
  remarks: "UrlAuthorizationModule determina se l&quot;utente corrente è autorizzato ad accedere all&quot;URL richiesto, in base all&quot;utente <xref:System.Security.Principal.IIdentity.Name%2A>oppure l&quot;elenco di ruoli che un utente è membro.</xref:System.Security.Principal.IIdentity.Name%2A> Per informazioni sulla determinazione il nome utente, vedere [autenticazione ASP.NET](~/add/includes/ajax-current-ext-md.md). Per informazioni su come gestire i ruoli utente, vedere [gestione dei ruoli di autorizzazione utilizzando](~/add/includes/ajax-current-ext-md.md).       Autorizzazione per un utente o un ruolo è gestita mediante l&quot;elemento di configurazione. È possibile consentire o negare a un utente o un ruolo utilizzando il `allow` o `deny` sottoelementi, rispettivamente. Il `allow` e `deny` sottoelementi vengono interpretati in ordine appaiono nella configurazione. Una volta che un elemento specifica che l&quot;accesso è consentito o negato, UrlAuthorizationModule completa il controllo delle autorizzazioni. Ad esempio, nella sezione seguente da un file Web. config richiede agli utenti di accedere (negando utenti anonimi) e quindi consente solo agli utenti nel ruolo amministratori di accedere. Gli utenti non presenti il ruolo di amministratore vengono negati.      ```   <authorization>     <deny users=&quot;?&quot; />     <allow roles=&quot;Administrators&quot; />     <deny users=&quot;*&quot; />   </authorization>   ```Un utente o ruolo deve essere negato in modo specifico per rifiutare l&quot;utente o ruolo l&quot;autorizzazione a un URL. Vale a dire, se l&quot;esempio precedente non fosse stato specificato il `<deny users=&quot;*&quot; />` elemento, quindi tutti gli utenti autenticati sarebbe stato consentito l&quot;accesso all&quot;URL richiesto, indipendentemente dal ruolo è un membro di."
  example:
  - "The following code example grants access to Kim and members of the Admins role, while denying it to John and all anonymous users.  \n  \n```  \n<authorization>  \n  <allow users=\"Kim\"/>  \n  <allow roles=\"Admins\"/>  \n  <deny users=\"John\"/>  \n  <deny users=\"?\"/>  \n</authorization>  \n```"
  syntax:
    content: 'public sealed class UrlAuthorizationModule : System.Web.IHttpModule'
  inheritance:
  - System.Object
  implements:
  - System.Web.IHttpModule
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.#ctor
  id: '#ctor'
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: UrlAuthorizationModule()
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule()
  fullName: System.Web.Security.UrlAuthorizationModule.UrlAuthorizationModule()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Crea un&quot;istanza di <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;> </xref> classe."
  remarks: "Questo costruttore non è destinato a essere chiamato dal codice dell&quot;applicazione.       In ASP.NET viene chiamato questo costruttore per creare un&quot;istanza della <xref:System.Web.Security.UrlAuthorizationModule>classe.</xref:System.Web.Security.UrlAuthorizationModule> Dopo aver chiamato il costruttore, viene chiamato il <xref:System.Web.Security.UrlAuthorizationModule.Init%2A>metodo per inizializzare la nuova <xref:System.Web.Security.UrlAuthorizationModule>oggetto.</xref:System.Web.Security.UrlAuthorizationModule> </xref:System.Web.Security.UrlAuthorizationModule.Init%2A>"
  syntax:
    content: public UrlAuthorizationModule ();
    parameters: []
  overload: System.Web.Security.UrlAuthorizationModule.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  id: CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: CheckUrlAccessForPrincipal(String,IPrincipal,String)
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  fullName: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Determina se l&quot;utente ha accesso al file richiesto."
  remarks: "Il metodo CheckUrlAccessForPrincipal verifica se l&quot;utente corrente è concesso l&quot;accesso al file richiesto nel file Web. config per l&quot;applicazione.       Se il verbo HTTP utilizzato per eseguire la richiesta è `GET`, `POST`, o `HEAD`, il metodo CheckUrlAccessForPrincipal controlla l&quot;accesso in lettura al file. Se si utilizza un qualsiasi altro verbo, la CheckUrlAccessForPrincipal verifica per l&quot;accesso in lettura/scrittura al file.       Per ulteriori informazioni e un file Web. config di esempio, vedere il <xref:System.Web.Security.UrlAuthorizationModule>documentazione relativa alla classe.</xref:System.Web.Security.UrlAuthorizationModule>"
  syntax:
    content: public static bool CheckUrlAccessForPrincipal (string virtualPath, System.Security.Principal.IPrincipal user, string verb);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Il percorso virtuale del file."
    - id: user
      type: System.Security.Principal.IPrincipal
      description: "Un <xref:System.Security.Principal.IPrincipal>che rappresenta l&quot;utente corrente.</xref:System.Security.Principal.IPrincipal>"
    - id: verb
      type: System.String
      description: "Il verbo HTTP utilizzato per eseguire la richiesta."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;utente corrente può accedere al file. in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>virtualPath</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>user</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>verb</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>virtualPath</code>non è compreso il percorso radice dell&quot;applicazione."
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.Dispose
  id: Dispose
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: Dispose()
  nameWithType: UrlAuthorizationModule.Dispose()
  fullName: System.Web.Security.UrlAuthorizationModule.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Rilascia tutte le risorse, tranne la memoria, usate per il <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;> </xref>."
  remarks: "Questo metodo non deve essere chiamato dal codice dell&quot;applicazione."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Web.Security.UrlAuthorizationModule.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  id: Init(System.Web.HttpApplication)
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: Init(HttpApplication)
  nameWithType: UrlAuthorizationModule.Init(HttpApplication)
  fullName: System.Web.Security.UrlAuthorizationModule.Init(HttpApplication)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Inizializza il <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;> </xref> oggetto."
  remarks: "Questo metodo non deve essere chiamato dal codice dell&quot;applicazione.       Il metodo di inizializzazione assicura che il <xref:System.Web.Security.UrlAuthorizationModule>è incluso nell&quot;elaborazione del <xref:System.Web.HttpApplication.AuthorizeRequest>evento.</xref:System.Web.HttpApplication.AuthorizeRequest> </xref:System.Web.Security.UrlAuthorizationModule>"
  syntax:
    content: public void Init (System.Web.HttpApplication app);
    parameters:
    - id: app
      type: System.Web.HttpApplication
      description: "Corrente <xref href=&quot;System.Web.HttpApplication&quot;> </xref> istanza."
  overload: System.Web.Security.UrlAuthorizationModule.Init*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Security.UrlAuthorizationModule.#ctor
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: UrlAuthorizationModule()
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule()
  fullName: System.Web.Security.UrlAuthorizationModule.UrlAuthorizationModule()
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: CheckUrlAccessForPrincipal(String,IPrincipal,String)
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  fullName: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.Security.UrlAuthorizationModule.Dispose
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Dispose()
  nameWithType: UrlAuthorizationModule.Dispose()
  fullName: System.Web.Security.UrlAuthorizationModule.Dispose()
- uid: System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Init(HttpApplication)
  nameWithType: UrlAuthorizationModule.Init(HttpApplication)
  fullName: System.Web.Security.UrlAuthorizationModule.Init(HttpApplication)
- uid: System.Web.HttpApplication
  parent: System.Web
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
- uid: System.Web.Security.UrlAuthorizationModule.#ctor*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: UrlAuthorizationModule
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: CheckUrlAccessForPrincipal
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal
- uid: System.Web.Security.UrlAuthorizationModule.Dispose*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Dispose
  nameWithType: UrlAuthorizationModule.Dispose
- uid: System.Web.Security.UrlAuthorizationModule.Init*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Init
  nameWithType: UrlAuthorizationModule.Init
