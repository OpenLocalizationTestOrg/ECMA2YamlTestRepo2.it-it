### YamlMime:ManagedReference
items:
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter
  id: PropertyFilter
  children:
  - System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})
  - System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.String)
  - System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty
  - System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)
  langs:
  - csharp
  name: PropertyFilter
  nameWithType: PropertyFilter
  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilter
  type: Class
  summary: "Fornisce funzionalità di filtro per un host di modifica delle proprietà."
  remarks: "Contiene un elenco di stringhe, definite *predicati*, che vengono confrontate con un nome di proprietà di destinazione fino a quando non viene trovata una corrispondenza."
  syntax:
    content: public class PropertyFilter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})'
  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter
  langs:
  - csharp
  name: PropertyFilter(IEnumerable<PropertyFilterPredicate>)
  nameWithType: PropertyFilter.PropertyFilter(IEnumerable<PropertyFilterPredicate>)
  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilter.PropertyFilter(IEnumerable<PropertyFilterPredicate>)
  type: Constructor
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.PropertyEditing
  summary: "Crea una nuova istanza di <xref href=&quot;System.Activities.Presentation.PropertyEditing.PropertyFilter&quot;> </xref> classe che include un&quot;enumerazione delle stringhe, di filtro denominata *predicati*, che può essere confrontata con un nome di proprietà di destinazione fino a quando non viene trovata una corrispondenza."
  syntax:
    content: public PropertyFilter (System.Collections.Generic.IEnumerable<System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate> predicates);
    parameters:
    - id: predicates
      type: System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate}
      description: "Un <xref:System.Collections.IEnumerable>elenco di predicati o stringhe utilizzate per la corrispondenza.</xref:System.Collections.IEnumerable>"
  overload: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter
  langs:
  - csharp
  name: PropertyFilter(String)
  nameWithType: PropertyFilter.PropertyFilter(String)
  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilter.PropertyFilter(String)
  type: Constructor
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.PropertyEditing
  summary: "Crea una nuova istanza di <xref href=&quot;System.Activities.Presentation.PropertyEditing.PropertyFilter&quot;> </xref> classe che include un <xref:System.String>che contiene una sequenza delimitata da spazi delle frasi, chiamate di filtro *predicati*, che può essere confrontata con un nome di proprietà di destinazione fino a quando non viene trovata una corrispondenza.</xref:System.String>"
  syntax:
    content: public PropertyFilter (string filterText);
    parameters:
    - id: filterText
      type: System.String
      description: "Oggetto <xref:System.String>che contiene predicati delimitati da spazi per il filtro delle proprietà.</xref:System.String>"
  overload: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty
  id: IsEmpty
  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter
  langs:
  - csharp
  name: IsEmpty
  nameWithType: PropertyFilter.IsEmpty
  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.PropertyEditing
  summary: "Proprietà di sola lettura che indica se questo <xref:System.Activities.Design.PropertyEditing.PropertyFilter>non presenta predicati di filtro.</xref:System.Activities.Design.PropertyEditing.PropertyFilter>"
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se i predicati sono assenti; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)
  id: Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)
  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter
  langs:
  - csharp
  name: Match(IPropertyFilterTarget)
  nameWithType: PropertyFilter.Match(IPropertyFilterTarget)
  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(IPropertyFilterTarget)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.PropertyEditing
  summary: "Trova le stringhe di predicato dell&quot;oggetto filtro corrente con il nome di proprietà di destinazione specificato e restituisce un valore booleano che indica se uno o più stringhe di predicato corrispondono al nome di destinazione o se questo <xref href=&quot;System.Activities.Presentation.PropertyEditing.PropertyFilter&quot;> </xref> non dispone di predicati."
  syntax:
    content: public bool Match (System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget target);
    parameters:
    - id: target
      type: System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget
      description: "Il nome della proprietà che verrà confrontato con il filtro corrente durante la ricerca per trovare una corrispondenza."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se viene trovata una corrispondenza di filtro/destinazione o se nessun elemento da utilizzare per il confronto; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Activities.Presentation.PropertyEditing.PropertyFilter.Match*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate})
  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter
  isExternal: false
  name: PropertyFilter(IEnumerable<PropertyFilterPredicate>)
  nameWithType: PropertyFilter.PropertyFilter(IEnumerable<PropertyFilterPredicate>)
  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilter.PropertyFilter(IEnumerable<PropertyFilterPredicate>)
- uid: System.Collections.Generic.IEnumerable{System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<PropertyFilterPredicate>
  nameWithType: IEnumerable<PropertyFilterPredicate>
  fullName: System.Collections.Generic.IEnumerable<System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate
    name: PropertyFilterPredicate
    nameWithType: PropertyFilterPredicate
    fullName: PropertyFilterPredicate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor(System.String)
  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter
  isExternal: false
  name: PropertyFilter(String)
  nameWithType: PropertyFilter.PropertyFilter(String)
  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilter.PropertyFilter(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty
  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter
  isExternal: false
  name: IsEmpty
  nameWithType: PropertyFilter.IsEmpty
  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget)
  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter
  isExternal: false
  name: Match(IPropertyFilterTarget)
  nameWithType: PropertyFilter.Match(IPropertyFilterTarget)
  fullName: System.Activities.Presentation.PropertyEditing.PropertyFilter.Match(IPropertyFilterTarget)
- uid: System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget
  parent: System.Activities.Presentation.PropertyEditing
  isExternal: false
  name: IPropertyFilterTarget
  nameWithType: IPropertyFilterTarget
  fullName: System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.#ctor*
  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter
  isExternal: false
  name: PropertyFilter
  nameWithType: PropertyFilter.PropertyFilter
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.IsEmpty*
  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter
  isExternal: false
  name: IsEmpty
  nameWithType: PropertyFilter.IsEmpty
- uid: System.Activities.Presentation.PropertyEditing.PropertyFilter.Match*
  parent: System.Activities.Presentation.PropertyEditing.PropertyFilter
  isExternal: false
  name: Match
  nameWithType: PropertyFilter.Match
