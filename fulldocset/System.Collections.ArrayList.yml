### YamlMime:ManagedReference
items:
- uid: System.Collections.ArrayList
  id: ArrayList
  children:
  - System.Collections.ArrayList.#ctor
  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  - System.Collections.ArrayList.#ctor(System.Int32)
  - System.Collections.ArrayList.Adapter(System.Collections.IList)
  - System.Collections.ArrayList.Add(System.Object)
  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - System.Collections.ArrayList.BinarySearch(System.Object)
  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.Capacity
  - System.Collections.ArrayList.Clear
  - System.Collections.ArrayList.Clone
  - System.Collections.ArrayList.Contains(System.Object)
  - System.Collections.ArrayList.CopyTo(System.Array)
  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  - System.Collections.ArrayList.Count
  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  - System.Collections.ArrayList.FixedSize(System.Collections.IList)
  - System.Collections.ArrayList.GetEnumerator
  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.IsFixedSize
  - System.Collections.ArrayList.IsReadOnly
  - System.Collections.ArrayList.IsSynchronized
  - System.Collections.ArrayList.Item(System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  - System.Collections.ArrayList.Remove(System.Object)
  - System.Collections.ArrayList.RemoveAt(System.Int32)
  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  - System.Collections.ArrayList.Reverse
  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.Sort
  - System.Collections.ArrayList.Sort(System.Collections.IComparer)
  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  - System.Collections.ArrayList.Synchronized(System.Collections.IList)
  - System.Collections.ArrayList.SyncRoot
  - System.Collections.ArrayList.ToArray
  - System.Collections.ArrayList.ToArray(System.Type)
  - System.Collections.ArrayList.TrimToSize
  langs:
  - csharp
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
  type: Class
  summary: "Implementa il <xref:System.Collections.IList>interfaccia usando una matrice le cui dimensioni sono incrementate in modo dinamico in base alle necessità.</xref:System.Collections.IList>       Per esaminare il codice sorgente di .NET Framework per questo tipo, vedere il [origine riferimento](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)."
  remarks: "> [!NOTE]> Per visualizzare il codice sorgente di .NET Framework per questo tipo, vedere il [origine riferimento](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). È possibile esplorare il codice sorgente online, scaricare i riferimenti per la visualizzazione offline e scorrere le origini (inclusi aggiornamenti e patch) durante l&quot;esecuzione del debug. vedere [istruzioni](http://referencesource.microsoft.com/).       La classe ArrayList è progettata per contenere raccolte eterogenee di oggetti. Tuttavia, non sempre offre le migliori prestazioni. Al contrario, si consiglia quanto segue:: per un insieme eterogeneo di oggetti, utilizzare il `List<Object>` (in c#) o `List(Of Object)` digitare (in Visual Basic).      -Per una raccolta omogenea di oggetti, usare la <xref:System.Collections.Generic.List%601>classe.</xref:System.Collections.Generic.List%601>       Nella sezione &quot;Considerazioni sulle prestazioni&quot; il <xref:System.Collections.Generic.List%601>argomento di riferimento per una discussione sulle prestazioni relative di queste classi.</xref:System.Collections.Generic.List%601>       Non è garantito l&quot;ArrayList da ordinare.  È necessario ordinare ArrayList chiamando il relativo <xref:System.Collections.ArrayList.Sort%2A>metodo prima di eseguire le operazioni (ad esempio <xref:System.Collections.ArrayList.BinarySearch%2A>) che richiedono l&quot;ArrayList da ordinare.</xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Sort%2A> Per mantenere una raccolta che verrà automaticamente ordinata come vengono aggiunti nuovi elementi, è possibile utilizzare la <xref:System.Collections.Generic.SortedSet%601>classe.</xref:System.Collections.Generic.SortedSet%601>       La capacità di una classe ArrayList è il numero di elementi che ArrayList può contenere. Se gli elementi vengono aggiunti a un ArrayList, la capacità viene aumentata automaticamente in base alle necessità, tramite riallocazione. È possibile diminuire la capacità chiamando <xref:System.Collections.ArrayList.TrimToSize%2A>o impostando la <xref:System.Collections.ArrayList.Capacity%2A>proprietà in modo esplicito.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A>       Per gli oggetti ArrayList molto grandi, è possibile aumentare la capacità massima a 2 miliardi di elementi in un sistema a 64 bit impostando il `enabled` attributo dell&quot;elemento di configurazione per `true` nell&quot;ambiente di runtime.       Elementi nella raccolta è accessibile tramite un indice intero.  Gli indici in questa raccolta sono in base zero.       La raccolta ArrayList accetta `null` come un valore valido. Consente, inoltre, gli elementi duplicati.       Non è supportato l&quot;utilizzo di matrici multidimensionali come elementi nella raccolta ArrayList."
  example:
  - "The following code example shows how to create and initialize an ArrayList and how to display its values.  \n  \n [!code-cpp[Classic ArrayList Example#1](~/add/codesnippet/cpp/t-system.collections.arr_1.cpp)]\n [!code-cs[Classic ArrayList Example#1](~/add/codesnippet/csharp/t-system.collections.arr_1.cs)]\n [!code-vb[Classic ArrayList Example#1](~/add/codesnippet/visualbasic/t-system.collections.arr_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.ArrayList/ArrayListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ArrayList : ICloneable, System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor
  id: '#ctor'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> classe vuota e con capacità iniziale predefinita."
  remarks: "La capacità di un <xref:System.Collections.ArrayList>è il numero di elementi che la <xref:System.Collections.ArrayList>può contenere.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Quando gli elementi vengono aggiunti a un <xref:System.Collections.ArrayList>, incrementata automaticamente come richiesto tramite la riallocazione della matrice interna.</xref:System.Collections.ArrayList>       Se è possibile stimare le dimensioni della raccolta, specificando la capacità iniziale si elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Questo costruttore è un&quot;operazione o (1)."
  syntax:
    content: public ArrayList ();
    parameters: []
  overload: System.Collections.ArrayList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> classe che contiene gli elementi copiati dalla raccolta specificata e ha la stessa capacità iniziale come numero di elementi copiati."
  remarks: "La capacità di un <xref:System.Collections.ArrayList>è il numero di elementi che la <xref:System.Collections.ArrayList>può contenere.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Quando gli elementi vengono aggiunti a un <xref:System.Collections.ArrayList>, incrementata automaticamente come richiesto tramite la riallocazione della matrice interna.</xref:System.Collections.ArrayList>       Se è possibile stimare le dimensioni della raccolta, specificando la capacità iniziale si elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Gli elementi vengono copiati nello <xref:System.Collections.ArrayList>nello stesso ordine in cui vengono letti dalla <xref:System.Collections.IEnumerator> <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.IEnumerator> </xref:System.Collections.ArrayList>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi in `c`."
  syntax:
    content: public ArrayList (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "Il <xref:System.Collections.ICollection>i cui elementi sono copiati nel nuovo elenco.</xref:System.Collections.ICollection>"
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> classe vuota e con la capacità iniziale specificata."
  remarks: "La capacità di un <xref:System.Collections.ArrayList>è il numero di elementi che la <xref:System.Collections.ArrayList>può contenere.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Quando gli elementi vengono aggiunti a un <xref:System.Collections.ArrayList>, incrementata automaticamente come richiesto tramite la riallocazione della matrice interna.</xref:System.Collections.ArrayList>       Se è possibile stimare le dimensioni della raccolta, specificando la capacità iniziale si elimina la necessità di eseguire numerose operazioni di ridimensionamento durante l&quot;aggiunta di elementi a <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Questo costruttore è un&quot;operazione O (`n`) operazione, in cui `n` è `capacity`."
  syntax:
    content: public ArrayList (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Il numero di elementi che può essere archiviati inizialmente nel nuovo elenco."
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>è minore di zero."
  platform:
  - net462
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  id: Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Crea un <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper per uno specifico <xref:System.Collections.IList>.</xref:System.Collections.IList>"
  remarks: "Adapter non copia il contenuto di <xref:System.Collections.IList>.</xref:System.Collections.IList> Al contrario, viene creato solo un <xref:System.Collections.ArrayList>wrapper <xref:System.Collections.IList>; pertanto, le modifiche per <xref:System.Collections.IList>influenzare il <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.IList> </xref:System.Collections.IList> </xref:System.Collections.ArrayList>       Il <xref:System.Collections.ArrayList>fornisce è generica <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A>e <xref:System.Collections.ArrayList.Sort%2A>metodi.</xref:System.Collections.ArrayList.Sort%2A> </xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Reverse%2A> </xref:System.Collections.ArrayList> Il wrapper può costituire un modo per utilizzare questi metodi su <xref:System.Collections.IList>; tuttavia, svolgimento di queste operazioni tramite il wrapper generiche potrebbe essere meno efficiente dell&quot;applicazione direttamente su <xref:System.Collections.IList>.</xref:System.Collections.IList> operazioni</xref:System.Collections.IList>       Questo metodo è un&quot;operazione o (1).      ## Versione compatibilità In .NET Framework versioni 1.0 e 1.1, la chiamata di <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29>overload del metodo nel <xref:System.Collections.ArrayList>wrapper ha restituito un enumeratore che è considerato il secondo argomento un limite superiore anziché come un numero.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> Nel [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] il secondo argomento correttamente viene considerato come un numero."
  syntax:
    content: public static System.Collections.ArrayList Adapter (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "Il <xref:System.Collections.IList>per eseguire il wrapping.</xref:System.Collections.IList>"
    return:
      type: System.Collections.ArrayList
      description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper <xref:System.Collections.IList>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Adapter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aggiunge un oggetto alla fine di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>accetta `null` come un valore valido e consente elementi duplicati.</xref:System.Collections.ArrayList>       Se <xref:System.Collections.ArrayList.Count%2A>è già uguale <xref:System.Collections.ArrayList.Capacity%2A>, la capacità del <xref:System.Collections.ArrayList>viene aumentata automaticamente la riallocazione della matrice interna e gli elementi esistenti vengono copiati nella nuova matrice prima che venga aggiunto il nuovo elemento.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Se <xref:System.Collections.ArrayList.Count%2A>è minore di <xref:System.Collections.ArrayList.Capacity%2A>, questo metodo è un&quot;operazione o (1).</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> Se la capacità deve essere incrementata per far posto al nuovo elemento, questo metodo diventa un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_4_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_4_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_4_1.cpp)]"
  syntax:
    content: public virtual int Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>da aggiungere alla fine di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> indice in corrispondenza del quale il <code> value </code> è stato aggiunto."
  overload: System.Collections.ArrayList.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  id: AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aggiunge gli elementi di un <xref:System.Collections.ICollection>alla fine del <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ArrayList>accetta `null` come un valore valido e consente elementi duplicati.</xref:System.Collections.ArrayList>       L&quot;ordine degli elementi <xref:System.Collections.ICollection>viene mantenuto in <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Se il nuovo <xref:System.Collections.ArrayList.Count%2A>(corrente <xref:System.Collections.ArrayList.Count%2A>più le dimensioni della raccolta) sarà maggiore <xref:System.Collections.ArrayList.Capacity%2A>, la capacità del <xref:System.Collections.ArrayList>viene aumentata automaticamente la riallocazione della matrice interna per contenere i nuovi elementi e gli elementi esistenti vengono copiati nella nuova matrice prima vengono aggiunti nuovi elementi.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Se il <xref:System.Collections.ArrayList>può contenere i nuovi elementi senza aumentare il <xref:System.Collections.ArrayList.Capacity%2A>, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi da aggiungere.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList> Se la capacità deve essere aumentato di conseguenza i nuovi elementi, questo metodo diventa un&quot;operazione O (`n` + `m`) operazione, in cui `n` è il numero di elementi da aggiungere e `m` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_0_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_0_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_0_1.cpp)]"
  syntax:
    content: public virtual void AddRange (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "Il <xref:System.Collections.ICollection>i cui elementi devono essere aggiunti alla fine del <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> La raccolta non può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, ma può contenere elementi <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  id: BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cerca nell&quot;intero ordinato <xref href=&quot;System.Collections.ArrayList&quot;> </xref> per un elemento utilizzando l&quot;operatore di confronto predefinito e restituisce l&quot;indice in base zero dell&quot;elemento."
  remarks: "Il `value` parametro e ogni elemento del <xref:System.Collections.ArrayList>deve implementare il <xref:System.IComparable>interfaccia, che viene utilizzata per i confronti.</xref:System.IComparable> </xref:System.Collections.ArrayList> Gli elementi del <xref:System.Collections.ArrayList>già devono essere ordinati in ordine crescente in base all&quot;ordinamento definito per il <xref:System.IComparable>implementazione; in caso contrario, il risultato potrebbe essere errato.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Confronto tra `null` è consentita con qualsiasi tipo e non genera un&quot;eccezione quando si utilizza <xref:System.IComparable>.</xref:System.IComparable> Durante l&quot;ordinamento, `null` viene considerato minore rispetto a qualsiasi altro oggetto.       Se il <xref:System.Collections.ArrayList>contiene più di un elemento con lo stesso valore, il metodo restituisce solo una delle occorrenze e potrebbe essere una qualsiasi delle occorrenze, non necessariamente il primo.</xref:System.Collections.ArrayList>       Se il <xref:System.Collections.ArrayList>non contiene il valore specificato, il metodo restituisce un numero intero negativo.</xref:System.Collections.ArrayList> È possibile applicare l&quot;operazione di complemento bit per bit (~) per questo numero intero negativo per ottenere l&quot;indice del primo elemento che è maggiore del valore di ricerca. Quando si inserisce il valore nel <xref:System.Collections.ArrayList>, l&quot;indice deve essere utilizzato come punto di inserimento per gestire l&quot;ordinamento.</xref:System.Collections.ArrayList>       Questo metodo è un&quot;operazione O (log `n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to use <xref:System.Collections.ArrayList.BinarySearch%2A> to locate a specific object in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_13_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_13_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_13_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>da individuare.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "L&quot;indice in base zero di <code> value </code> in ordinato <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, se <code> value </code> è stato trovato; in caso contrario, un valore negativo numero, che rappresenta il complemento bit per bit dell&quot;indice dell&quot;elemento successivo maggiore di <code> value </code> o, se è presente alcun elemento maggiore, il complemento bit per bit di <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Né <code> value </code> né gli elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementare il <xref:System.IComparable>interfaccia.</xref:System.IComparable>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>value</code>non è dello stesso tipo degli elementi del <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cerca nell&quot;intero ordinato <xref href=&quot;System.Collections.ArrayList&quot;> </xref> per un elemento utilizzando l&quot;operatore di confronto specificato e restituisce l&quot;indice in base zero dell&quot;elemento."
  remarks: "L&quot;operatore di confronto consente di personalizzare la modalità di confronto di elementi. Ad esempio, è possibile utilizzare un <xref:System.Collections.CaseInsensitiveComparer>istanza come operatore di confronto per eseguire ricerche di stringhe tra maiuscole e minuscole.</xref:System.Collections.CaseInsensitiveComparer>       Se `comparer` viene fornito, gli elementi del <xref:System.Collections.ArrayList>vengono confrontati con il valore specificato utilizzando l&quot;oggetto specificato <xref:System.Collections.IComparer>implementazione.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> Gli elementi del <xref:System.Collections.ArrayList>già devono essere ordinati in ordine crescente in base all&quot;ordinamento definito da `comparer`; in caso contrario, il risultato potrebbe essere errato.</xref:System.Collections.ArrayList>       Se `comparer` è `null`, il confronto viene eseguito utilizzando il <xref:System.IComparable>implementazione fornita dall&quot;elemento stesso o dal valore specificato.</xref:System.IComparable> Gli elementi del <xref:System.Collections.ArrayList>già devono essere ordinati in ordine crescente in base all&quot;ordinamento definito per il <xref:System.IComparable>implementazione; in caso contrario, il risultato potrebbe essere errato.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Confronto tra `null` è consentita con qualsiasi tipo e non genera un&quot;eccezione quando si utilizza <xref:System.IComparable>.</xref:System.IComparable> Durante l&quot;ordinamento, `null` viene considerato minore rispetto a qualsiasi altro oggetto.       Se il <xref:System.Collections.ArrayList>contiene più di un elemento con lo stesso valore, il metodo restituisce solo una delle occorrenze e potrebbe essere una qualsiasi delle occorrenze, non necessariamente il primo.</xref:System.Collections.ArrayList>       Se il <xref:System.Collections.ArrayList>non contiene il valore specificato, il metodo restituisce un numero intero negativo.</xref:System.Collections.ArrayList> È possibile applicare l&quot;operazione di complemento bit per bit (~) per questo numero intero negativo per ottenere l&quot;indice del primo elemento che è maggiore del valore di ricerca. Quando si inserisce il valore nel <xref:System.Collections.ArrayList>, l&quot;indice deve essere utilizzato come punto di inserimento per gestire l&quot;ordinamento.</xref:System.Collections.ArrayList>       Questo metodo è un&quot;operazione O (log `n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following example creates an <xref:System.Collections.ArrayList> of colored animals. The provided <xref:System.Collections.IComparer> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/cpp/51ebb232-4223-422e-9ecb-_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/csharp/51ebb232-4223-422e-9ecb-_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/visualbasic/51ebb232-4223-422e-9ecb-_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value, System.Collections.IComparer comparer);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>da individuare.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>implementazione da usare quando si confrontano elementi.</xref:System.Collections.IComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare l&quot;operatore di confronto predefinito è il <xref:System.IComparable>implementazione di ciascun elemento.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "L&quot;indice in base zero di <code> value </code> in ordinato <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, se <code> value </code> è stato trovato; in caso contrario, un valore negativo numero, che rappresenta il complemento bit per bit dell&quot;indice dell&quot;elemento successivo maggiore di <code> value </code> o, se è presente alcun elemento maggiore, il complemento bit per bit di <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>comparer</code>è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e né <code>value</code> né gli elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementare il <xref:System.IComparable> interfaccia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e <code>value</code> non è dello stesso tipo degli elementi del <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cerca in un intervallo di elementi ordinato <xref href=&quot;System.Collections.ArrayList&quot;> </xref> per un elemento utilizzando l&quot;operatore di confronto specificato e restituisce l&quot;indice in base zero dell&quot;elemento."
  remarks: "L&quot;operatore di confronto consente di personalizzare la modalità di confronto di elementi. Ad esempio, è possibile utilizzare un <xref:System.Collections.CaseInsensitiveComparer>istanza come operatore di confronto per eseguire ricerche di stringhe tra maiuscole e minuscole.</xref:System.Collections.CaseInsensitiveComparer>       Se `comparer` viene fornito, gli elementi del <xref:System.Collections.ArrayList>vengono confrontati con il valore specificato utilizzando l&quot;oggetto specificato <xref:System.Collections.IComparer>implementazione.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> Gli elementi del <xref:System.Collections.ArrayList>già devono essere ordinati in ordine crescente in base all&quot;ordinamento definito da `comparer`; in caso contrario, il risultato potrebbe essere errato.</xref:System.Collections.ArrayList>       Se `comparer` è `null`, il confronto viene eseguito utilizzando il <xref:System.IComparable>implementazione fornita dall&quot;elemento stesso o dal valore specificato.</xref:System.IComparable> Gli elementi del <xref:System.Collections.ArrayList>già devono essere ordinati in ordine crescente in base all&quot;ordinamento definito per il <xref:System.IComparable>implementazione; in caso contrario, il risultato potrebbe essere errato.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Confronto tra `null` è consentita con qualsiasi tipo e non genera un&quot;eccezione quando si utilizza <xref:System.IComparable>.</xref:System.IComparable> Durante l&quot;ordinamento, `null` viene considerato minore rispetto a qualsiasi altro oggetto.       Se il <xref:System.Collections.ArrayList>contiene più di un elemento con lo stesso valore, il metodo restituisce solo una delle occorrenze e potrebbe essere una qualsiasi delle occorrenze, non necessariamente il primo.</xref:System.Collections.ArrayList>       Se il <xref:System.Collections.ArrayList>non contiene il valore specificato, il metodo restituisce un numero intero negativo.</xref:System.Collections.ArrayList> È possibile applicare l&quot;operazione di complemento bit per bit (~) per questo numero intero negativo per ottenere l&quot;indice del primo elemento che è maggiore del valore di ricerca. Quando si inserisce il valore nel <xref:System.Collections.ArrayList>, l&quot;indice deve essere utilizzato come punto di inserimento per gestire l&quot;ordinamento.</xref:System.Collections.ArrayList>       Questo metodo è un&quot;operazione O (log `n`) operazione, in cui `n` è `count`."
  syntax:
    content: public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice iniziale in base zero dell&quot;intervallo da cercare."
    - id: count
      type: System.Int32
      description: "La lunghezza dell&quot;intervallo da cercare."
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>da individuare.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>implementazione da usare quando si confrontano elementi.</xref:System.Collections.IComparer>       - oppure - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> per utilizzare l&quot;operatore di confronto predefinito è il <xref:System.IComparable>implementazione di ciascun elemento.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "L&quot;indice in base zero di <code> value </code> in ordinato <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, se <code> value </code> è stato trovato; in caso contrario, un valore negativo numero, che rappresenta il complemento bit per bit dell&quot;indice dell&quot;elemento successivo maggiore di <code> value </code> o, se è presente alcun elemento maggiore, il complemento bit per bit di <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> non indicano un intervallo valido nel <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - oppure - <code>comparer</code> è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e né <code>value</code> né gli elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementare il <xref:System.IComparable> interfaccia."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>è <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> e <code>value</code> non è dello stesso tipo degli elementi del <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>count</code> è minore di zero."
  platform:
  - net462
- uid: System.Collections.ArrayList.Capacity
  id: Capacity
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene o imposta il numero di elementi che la <xref href=&quot;System.Collections.ArrayList&quot;> </xref> può contenere."
  remarks: "Capacità è il numero di elementi che la <xref:System.Collections.ArrayList>archiviabili.</xref:System.Collections.ArrayList> <xref:System.Collections.ArrayList.Count%2A>è il numero di elementi effettivamente contenuti nella <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Count%2A>       Capacità è sempre maggiore di o uguale a <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> Se <xref:System.Collections.ArrayList.Count%2A>supera la capacità durante l&quot;aggiunta di elementi, la capacità viene aumentata automaticamente tramite la riallocazione della matrice interna prima di copiare gli elementi e aggiunta di nuovi elementi.</xref:System.Collections.ArrayList.Count%2A>       È possibile diminuire la capacità chiamando <xref:System.Collections.ArrayList.TrimToSize%2A>o impostando la proprietà di capacità in modo esplicito.</xref:System.Collections.ArrayList.TrimToSize%2A> Quando il valore di capacità è impostato in modo esplicito, la matrice interna viene riallocata anche per consentire la capacità specificata.       Il recupero del valore di questa proprietà è un&quot;operazione o (1). l&quot;impostazione della proprietà è un&quot;operazione O (`n`) operazione, in cui `n` è la nuova capacità."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Il numero di elementi che la <xref href=&quot;System.Collections.ArrayList&quot;> </xref> può contenere."
  overload: System.Collections.ArrayList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Capacità è impostata su un valore che è minore di <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Non c&quot;è sufficiente memoria disponibile nel sistema."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clear
  id: Clear
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove tutti gli elementi dal <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Count%2A>è impostato su zero e vengono rilasciati anche i riferimenti ad altri oggetti da elementi della raccolta.</xref:System.Collections.ArrayList.Count%2A>       <xref:System.Collections.ArrayList.Capacity%2A>rimane invariato.</xref:System.Collections.ArrayList.Capacity%2A>  Per reimpostare la capacità del <xref:System.Collections.ArrayList>, chiamare <xref:System.Collections.ArrayList.TrimToSize%2A>o impostare il <xref:System.Collections.ArrayList.Capacity%2A>proprietà direttamente.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A> </xref:System.Collections.ArrayList> L&quot;eliminazione di un oggetto vuoto <xref:System.Collections.ArrayList>Imposta la capacità del <xref:System.Collections.ArrayList>per la capacità predefinita.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_18_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_18_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_18_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.ArrayList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clone
  id: Clone
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Crea una copia superficiale del <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Una copia superficiale di un insieme copia solo gli elementi della raccolta, indipendentemente che siano tipi riferimento o tipi di valore, ma non copia gli oggetti che fanno riferimento i riferimenti a. I riferimenti nella nuova raccolta puntano agli stessi oggetti che puntano i riferimenti nella raccolta originale.       Al contrario, una copia completa di una raccolta copia gli elementi e tutti gli elementi direttamente o indirettamente a cui fa riferimento gli elementi.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Una copia dei riferimenti di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Determina se un elemento è incluso il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Questo metodo determina l&quot;uguaglianza chiamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  syntax:
    content: public virtual bool Contains (object item);
    parameters:
    - id: item
      type: System.Object
      description: "Il <xref:System.Object>per individuare il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> is found in the <xref href=&quot;System.Collections.ArrayList&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.ArrayList.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  id: CopyTo(System.Array)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia l&quot;intero <xref href=&quot;System.Collections.ArrayList&quot;> </xref> in una matrice unidimensionale compatibile <xref:System.Array>, a partire dall&quot;inizio della matrice di destinazione.</xref:System.Array>"
  remarks: "La matrice specificata deve essere di un tipo compatibile.       Questo metodo utilizza <xref:System.Array.Copy%2A?displayProperty=fullName>per copiare gli elementi.</xref:System.Array.Copy%2A?displayProperty=fullName>       Gli elementi vengono copiati lo <xref:System.Array>nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cs[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.arr_6_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_6_1.vb)]\n [!code-cpp[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.arr_6_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array);
    parameters:
    - id: array
      type: System.Array
      description: "Oggetto unidimensionale <xref:System.Array>che rappresenta la destinazione degli elementi copiati da <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> Il <xref:System.Array>deve avere un&quot;indicizzazione in base zero.</xref:System.Array>"
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>è multidimensionale.       - oppure - il numero di elementi nell&quot;origine <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è maggiore del numero di elementi che la destinazione <code>array</code> può contenere."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Il tipo di origine <xref href=&quot;System.Collections.ArrayList&quot;> </xref> non può essere eseguire automaticamente il cast al tipo della destinazione <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia l&quot;intero <xref href=&quot;System.Collections.ArrayList&quot;> </xref> in una matrice unidimensionale compatibile <xref:System.Array>, a partire dall&quot;indice specificato della matrice di destinazione.</xref:System.Array>"
  remarks: "La matrice specificata deve essere di un tipo compatibile.       Questo metodo utilizza <xref:System.Array.Copy%2A?displayProperty=fullName>per copiare gli elementi.</xref:System.Array.Copy%2A?displayProperty=fullName>       Gli elementi vengono copiati lo <xref:System.Array>nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_27_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_27_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_27_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "Oggetto unidimensionale <xref:System.Array>che rappresenta la destinazione degli elementi copiati da <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> Il <xref:System.Array>deve avere un&quot;indicizzazione in base zero.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "Indice in base zero `array` da cui avviare la copia."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>è multidimensionale.       - oppure - il numero di elementi nell&quot;origine <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è maggiore dello spazio disponibile da <code>arrayIndex</code> alla fine della destinazione <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Il tipo di origine <xref href=&quot;System.Collections.ArrayList&quot;> </xref> non può essere eseguire automaticamente il cast al tipo della destinazione <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia un intervallo di elementi dal <xref href=&quot;System.Collections.ArrayList&quot;> </xref> in una matrice unidimensionale compatibile <xref:System.Array>, a partire dall&quot;indice specificato della matrice di destinazione.</xref:System.Array>"
  remarks: "La matrice specificata deve essere di un tipo compatibile.       Questo metodo utilizza <xref:System.Array.Copy%2A?displayProperty=fullName>per copiare gli elementi.</xref:System.Array.Copy%2A?displayProperty=fullName>       Gli elementi vengono copiati lo <xref:System.Array>nello stesso ordine in cui l&quot;enumeratore scorre la <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è `count`."
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/971aa346-8de3-42af-8cd4-_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/971aa346-8de3-42af-8cd4-_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/971aa346-8de3-42af-8cd4-_1.vb)]"
  syntax:
    content: public virtual void CopyTo (int index, Array array, int arrayIndex, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "L&quot;indice in base zero nell&quot;origine <xref href=&quot;System.Collections.ArrayList&quot;> </xref> da cui avviare la copia."
    - id: array
      type: System.Array
      description: "Oggetto unidimensionale <xref:System.Array>che rappresenta la destinazione degli elementi copiati da <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> Il <xref:System.Array>deve avere un&quot;indicizzazione in base zero.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "Indice in base zero `array` da cui avviare la copia."
    - id: count
      type: System.Int32
      description: "Il numero di elementi da copiare."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>arrayIndex</code> è minore di zero.       - oppure - <code>count</code> è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>è multidimensionale.       - oppure - <code>index</code> è uguale a o maggiore di <xref:System.Collections.ArrayList.Count*> dell&quot;origine <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - oppure - il numero di elementi da <code>index</code> alla fine dell&quot;origine <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è maggiore dello spazio disponibile da <code>arrayIndex</code> alla fine della destinazione <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Il tipo di origine <xref href=&quot;System.Collections.ArrayList&quot;> </xref> non può essere eseguire automaticamente il cast al tipo della destinazione <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Count
  id: Count
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene il numero di elementi effettivamente contenuti nella <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Capacity%2A>è il numero di elementi che la <xref:System.Collections.ArrayList>archiviabili.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Capacity%2A> Conteggio indica il numero di elementi effettivamente contenuti nella <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       <xref:System.Collections.ArrayList.Capacity%2A>è sempre maggiore di o uguale al numero specificato.</xref:System.Collections.ArrayList.Capacity%2A> Se il conteggio supera <xref:System.Collections.ArrayList.Capacity%2A>durante l&quot;aggiunta di elementi, la capacità viene aumentata automaticamente tramite la riallocazione della matrice interna prima di copiare gli elementi e aggiunta di nuovi elementi.</xref:System.Collections.ArrayList.Capacity%2A>       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Il numero di elementi effettivamente contenuti nella <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  id: FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper con dimensioni fisse."
  remarks: "Questo wrapper può essere utilizzato per evitare di aggiunte o eliminazioni dall&quot;originale <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> Gli elementi possono comunque essere modificati o sostituiti.       Una raccolta con una dimensione fissa è semplicemente una raccolta con un wrapper che impedisce l&quot;aggiunta e rimozione di elementi. Pertanto, se vengono apportate modifiche alla raccolta sottostante, incluse l&quot;aggiunta o la rimozione di elementi, la raccolta a dimensione fissa riflette le modifiche.       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/m-system.collections.arr_12_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_12_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/m-system.collections.arr_12_1.cpp)]"
  syntax:
    content: public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> per eseguire il wrapping."
    return:
      type: System.Collections.ArrayList
      description: "Un <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper con dimensioni fisse."
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  id: FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un <xref:System.Collections.IList>wrapper con una dimensione fissa.</xref:System.Collections.IList>"
  remarks: "Questo wrapper può essere utilizzato per evitare di aggiunte o eliminazioni dall&quot;originale <xref:System.Collections.IList>.</xref:System.Collections.IList> Gli elementi possono comunque essere modificati o sostituiti.       Una raccolta con una dimensione fissa è semplicemente una raccolta con un wrapper che impedisce l&quot;aggiunta e rimozione di elementi. Pertanto, se vengono apportate modifiche alla raccolta sottostante, incluse l&quot;aggiunta o la rimozione di elementi, la raccolta a dimensione fissa riflette le modifiche.       Questo metodo è un&quot;operazione o (1)."
  syntax:
    content: public static System.Collections.IList FixedSize (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "Il <xref:System.Collections.IList>per eseguire il wrapping.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Un <xref:System.Collections.IList>wrapper con una dimensione fissa.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un enumeratore per l&quot;intero <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Il `foreach` istruzione del linguaggio c# (`for each` in Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, l&quot;utilizzo `foreach` è consigliabile, anziché la modifica diretta dell&quot;enumeratore.       È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non possono essere utilizzati per modificare la raccolta sottostante.       Inizialmente l&quot;enumeratore è posizionato prima del primo elemento nella raccolta. <xref:System.Collections.IEnumerator.Reset%2A>riporta l&quot;enumeratore in questa posizione.</xref:System.Collections.IEnumerator.Reset%2A>  In questa posizione, <xref:System.Collections.IEnumerator.Current%2A>è definito.</xref:System.Collections.IEnumerator.Current%2A> Pertanto, è necessario chiamare <xref:System.Collections.IEnumerator.MoveNext%2A>per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Restituisce lo stesso oggetto finché non <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>viene chiamato.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>imposta <xref:System.Collections.IEnumerator.Current%2A>all&quot;elemento successivo.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>raggiunge la fine della raccolta, l&quot;enumeratore è posizionato dopo l&quot;ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A>restituisce `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando l&quot;enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A>restituire anche `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se l&quot;ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>restituito `false`, <xref:System.Collections.IEnumerator.Current%2A>è definito.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Per impostare <xref:System.Collections.IEnumerator.Current%2A>il primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A>seguito dal <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l&quot;enumeratore viene invalidato e il relativo comportamento sarà indefinito.       L&quot;enumeratore non dispone di accesso esclusivo alla raccolta. Pertanto, l&quot;enumerazione di una raccolta non è quindi una procedura thread-safe.  Per garantire la protezione dei thread durante l&quot;enumerazione, è possibile bloccare la raccolta per l&quot;intera enumerazione.  Per consentire la raccolta a cui accedere da più thread per la lettura e scrittura, è necessario implementare la propria sincronizzazione.       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_2_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_2_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Un <xref:System.Collections.IEnumerator>per l&quot;intero <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  id: GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un enumeratore per un intervallo di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Il `foreach` istruzione del linguaggio c# (`for each` in Visual C++, `For Each` Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, l&quot;utilizzo `foreach` è consigliabile, anziché la modifica diretta dell&quot;enumeratore.       È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non possono essere utilizzati per modificare la raccolta sottostante.       Inizialmente l&quot;enumeratore è posizionato prima del primo elemento nella raccolta. <xref:System.Collections.IEnumerator.Reset%2A>riporta l&quot;enumeratore in questa posizione.</xref:System.Collections.IEnumerator.Reset%2A>  In questa posizione, <xref:System.Collections.IEnumerator.Current%2A>è definito.</xref:System.Collections.IEnumerator.Current%2A> Pertanto, è necessario chiamare <xref:System.Collections.IEnumerator.MoveNext%2A>per passare l&quot;enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Restituisce lo stesso oggetto finché non <xref:System.Collections.IEnumerator.MoveNext%2A>o <xref:System.Collections.IEnumerator.Reset%2A>viene chiamato.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>imposta <xref:System.Collections.IEnumerator.Current%2A>all&quot;elemento successivo.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Se <xref:System.Collections.IEnumerator.MoveNext%2A>raggiunge la fine della raccolta, l&quot;enumeratore è posizionato dopo l&quot;ultimo elemento nella raccolta e <xref:System.Collections.IEnumerator.MoveNext%2A>restituisce `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Quando l&quot;enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.IEnumerator.MoveNext%2A>restituire anche `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Se l&quot;ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A>restituito `false`, <xref:System.Collections.IEnumerator.Current%2A>è definito.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Per impostare <xref:System.Collections.IEnumerator.Current%2A>il primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A>seguito dal <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Un enumeratore rimane valido fino a quando la raccolta rimane invariata. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l&quot;enumeratore viene invalidato e il relativo comportamento sarà indefinito.       L&quot;enumeratore non dispone di accesso esclusivo alla raccolta. Pertanto, l&quot;enumerazione di una raccolta non è quindi una procedura thread-safe.  Per garantire la protezione dei thread durante l&quot;enumerazione, è possibile bloccare la raccolta per l&quot;intera enumerazione.  Per consentire la raccolta a cui accedere da più thread per la lettura e scrittura, è necessario implementare la propria sincronizzazione.       Questo metodo è un&quot;operazione o (1).      ## Compatibilità In .NET Framework versioni 1.0 e 1.1, l&quot;enumeratore per un <xref:System.Collections.ArrayList>wrapper restituito dal <xref:System.Collections.ArrayList.Adapter%2A>metodo trattato il secondo argomento un limite superiore anziché come un numero.</xref:System.Collections.ArrayList.Adapter%2A> </xref:System.Collections.ArrayList> Nel [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] il secondo argomento correttamente viene considerato come un numero."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_10_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_10_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice iniziale in base zero del <xref href=&quot;System.Collections.ArrayList&quot;> </xref> sezione in cui l&quot;enumeratore deve fare riferimento."
    - id: count
      type: System.Int32
      description: "Il numero di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> sezione in cui l&quot;enumeratore deve fare riferimento."
    return:
      type: System.Collections.IEnumerator
      description: "Un <xref:System.Collections.IEnumerator>per l&quot;intervallo specificato di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>count</code> è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> non si specifica un intervallo valido nel <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un <xref href=&quot;System.Collections.ArrayList&quot;> </xref> che rappresenta un subset di elementi nell&quot;origine <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Questo metodo non crea copie degli elementi. Il nuovo <xref:System.Collections.ArrayList>è solo una finestra di visualizzazione nell&quot;origine <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Tuttavia, tutte le successive modifiche di origine <xref:System.Collections.ArrayList>deve essere eseguita tramite questa finestra di visualizzazione <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Se vengono apportate modifiche direttamente all&quot;origine <xref:System.Collections.ArrayList>, la finestra di visualizzazione <xref:System.Collections.ArrayList>viene invalidato e qualsiasi operazione su di essa verranno restituito un <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/m-system.collections.arr_7_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/m-system.collections.arr_7_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_7_1.vb)]"
  syntax:
    content: public virtual System.Collections.ArrayList GetRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "In base zero <xref href=&quot;System.Collections.ArrayList&quot;> </xref> indice in corrispondenza del quale inizia la serie."
    - id: count
      type: System.Int32
      description: "Il numero di elementi nell&quot;intervallo."
    return:
      type: System.Collections.ArrayList
      description: "Un <xref href=&quot;System.Collections.ArrayList&quot;> </xref> che rappresenta un subset di elementi nell&quot;origine <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.GetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>count</code> è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> non indicano un intervallo valido di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cerca l&quot;oggetto specificato <xref:System.Object>e restituisce l&quot;indice in base zero della prima occorrenza all&quot;interno dell&quot;intero <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "Il <xref:System.Collections.ArrayList>Avanti al primo elemento fino all&quot;ultimo elemento, viene eseguita la ricerca.</xref:System.Collections.ArrayList>       Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Questo metodo determina l&quot;uguaglianza chiamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_28_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_28_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_28_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>per individuare il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "L&quot;indice in base zero della prima occorrenza di <code> value </code> all&quot;interno dell&quot;intero <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, se presente; in caso contrario, -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  id: IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cerca l&quot;oggetto specificato <xref:System.Object>e restituisce l&quot;indice in base zero della prima occorrenza all&quot;interno dell&quot;intervallo di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> compreso tra l&quot;indice specificato e l&quot;ultimo elemento.</xref:System.Object>"
  remarks: "Il <xref:System.Collections.ArrayList>viene eseguita la ricerca in avanti a partire da `startIndex` e termina con l&quot;ultimo elemento.</xref:System.Collections.ArrayList>       Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi da `startIndex` alla fine di <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Questo metodo determina l&quot;uguaglianza chiamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_22_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_22_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_22_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>per individuare il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto."
    return:
      type: System.Int32
      description: "L&quot;indice in base zero della prima occorrenza di <code> value </code> all&quot;interno dell&quot;intervallo di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> compreso tra <code> startIndex </code> all&quot;ultimo elemento, se trovato; in caso contrario, -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>è compreso nell&quot;intervallo di indici validi per il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cerca l&quot;oggetto specificato <xref:System.Object>e restituisce l&quot;indice in base zero della prima occorrenza all&quot;interno dell&quot;intervallo di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> che inizia in corrispondenza dell&quot;indice specificato e contiene il numero specificato di elementi.</xref:System.Object>"
  remarks: "Il <xref:System.Collections.ArrayList>viene eseguita la ricerca in avanti a partire da `startIndex` e fine `startIndex` più `count` -1, se `count` è maggiore di 0.</xref:System.Collections.ArrayList>       Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è `count`.       Questo metodo determina l&quot;uguaglianza chiamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_19_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_19_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_19_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>per individuare il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto."
    - id: count
      type: System.Int32
      description: "Il numero di elementi nella sezione per eseguire la ricerca."
    return:
      type: System.Int32
      description: "L&quot;indice in base zero della prima occorrenza di <code> value </code> all&quot;interno dell&quot;intervallo di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> che inizia da <code> startIndex </code> e contiene <code> count </code> numero di elementi, se trovato; in caso contrario, -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>è compreso nell&quot;intervallo di indici validi per il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - oppure - <code>count</code> è minore di zero.       - oppure - <code>startIndex</code> e <code>count</code> non si specifica una sezione valida nel <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inserisce un elemento nel <xref href=&quot;System.Collections.ArrayList&quot;> </xref> in corrispondenza dell&quot;indice specificato."
  remarks: "<xref:System.Collections.ArrayList>accetta `null` come un valore valido e consente elementi duplicati.</xref:System.Collections.ArrayList>       Se <xref:System.Collections.ArrayList.Count%2A>è già uguale <xref:System.Collections.ArrayList.Capacity%2A>, la capacità del <xref:System.Collections.ArrayList>viene aumentata automaticamente la riallocazione della matrice interna e gli elementi esistenti vengono copiati nella nuova matrice prima che venga aggiunto il nuovo elemento.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Se `index` è uguale a <xref:System.Collections.ArrayList.Count%2A>, `value` viene aggiunto alla fine di <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Count%2A>       In raccolte di elementi adiacenti, quali gli elenchi, gli elementi successivi al punto di inserimento vengono spostati verso il basso per consentire l&quot;inserimento del nuovo elemento. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente in bucket, come una tabella hash.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/m-system.collections.arr_15_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_15_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/m-system.collections.arr_15_1.cpp)]"
  syntax:
    content: public virtual void Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "L&quot;indice in base zero in corrispondenza del quale `value` deve essere inserito."
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>da inserire.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>index</code> è maggiore di <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  id: InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inserisce gli elementi di una raccolta nel <xref href=&quot;System.Collections.ArrayList&quot;> </xref> in corrispondenza dell&quot;indice specificato."
  remarks: "<xref:System.Collections.ArrayList>accetta `null` come un valore valido e consente elementi duplicati.</xref:System.Collections.ArrayList>       Se il nuovo <xref:System.Collections.ArrayList.Count%2A>(corrente <xref:System.Collections.ArrayList.Count%2A>più le dimensioni della raccolta) sarà maggiore <xref:System.Collections.ArrayList.Capacity%2A>, la capacità del <xref:System.Collections.ArrayList>viene aumentata automaticamente la riallocazione della matrice interna per contenere i nuovi elementi e gli elementi esistenti vengono copiati nella nuova matrice prima vengono aggiunti nuovi elementi.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Se `index` è uguale a <xref:System.Collections.ArrayList.Count%2A>, gli elementi vengono aggiunti alla fine di <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Count%2A>       L&quot;ordine degli elementi <xref:System.Collections.ICollection>viene mantenuto in <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       In raccolte di elementi adiacenti, quali gli elenchi, gli elementi successivi al punto di inserimento vengono spostati verso il basso per consentire l&quot;inserimento del nuovo elemento. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente in bucket, come una tabella hash.       Questo metodo è un&quot;operazione O (`n` + `m`) operazione, in cui `n` è il numero di elementi da aggiungere e `m` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/2b051d32-7260-4f65-b4d6-_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/2b051d32-7260-4f65-b4d6-_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/2b051d32-7260-4f65-b4d6-_1.cpp)]"
  syntax:
    content: public virtual void InsertRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero in corrispondenza del quale devono essere inseriti i nuovi elementi."
    - id: c
      type: System.Collections.ICollection
      description: "Il <xref:System.Collections.ICollection>i cui elementi devono essere inseriti i <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> La raccolta non può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, ma può contenere elementi <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.InsertRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>index</code> è maggiore di <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.ArrayList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ha dimensioni fisse."
  remarks: "Una raccolta con dimensioni fisse non consente l&quot;aggiunta o la rimozione di elementi dopo la sua creazione, ma consente la modifica degli elementi esistenti.       Una raccolta con una dimensione fissa è semplicemente una raccolta con un wrapper che impedisce l&quot;aggiunta e rimozione di elementi. Pertanto, se vengono apportate modifiche alla raccolta sottostante, incluse l&quot;aggiunta o la rimozione di elementi, la raccolta a dimensione fissa riflette le modifiche.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/p-system.collections.arr_2_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_2_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/p-system.collections.arr_2_1.cpp)]"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> sono fisse dimensioni; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura."
  remarks: "Una raccolta di sola lettura non consente l&quot;aggiunta, rimozione o modifica di elementi dopo la sua creazione.       Una raccolta di sola lettura è semplicemente una raccolta con un wrapper che impedisce la modifica. Pertanto, se vengono apportate modifiche alla raccolta sottostante, la raccolta di sola lettura riflette le modifiche.       Il recupero del valore di questa proprietà è un&quot;operazione o (1)."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/p-system.collections.arr_3_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/p-system.collections.arr_3_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura; in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un valore che indica se l&quot;accesso per il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è sincronizzato (thread-safe)."
  remarks: "Per garantire la thread-safe di <xref:System.Collections.ArrayList>, tutte le operazioni devono essere eseguite tramite il wrapper restituito dal <xref:System.Collections.ArrayList.Synchronized%2A>metodo.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_0_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_0_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_0_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_0_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.arr_0_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.arr_0_2.cs)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Se l&quot;accesso al <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è sincronizzato (thread-safe); in caso contrario, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Il valore predefinito è <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene o imposta l&quot;elemento in corrispondenza dell&quot;indice specificato."
  remarks: "L&quot;elemento restituisce un oggetto <xref:System.Object>pertanto potrebbe essere necessario eseguire il cast al tipo originale per poter modificare tale valore restituito</xref:System.Object> È importante notare che <xref:System.Collections.ArrayList>non è una raccolta fortemente tipizzata.</xref:System.Collections.ArrayList> Per un&quot;alternativa fortemente tipizzati, vedere <xref:System.Collections.Generic.List%601>.</xref:System.Collections.Generic.List%601>       <xref:System.Collections.ArrayList>accetta `null` come un valore valido e consente elementi duplicati.</xref:System.Collections.ArrayList>       Questa proprietà consente di accedere a un elemento specifico nella raccolta utilizzando la sintassi seguente: `myCollection[index]`.       Nel linguaggio c# viene utilizzata la parola chiave per definire gli indicizzatori anziché implementare la proprietà dell&quot;elemento. Visual Basic implementa elemento come una proprietà predefinita, che fornisce la stessa funzionalità di indicizzazione.       Il recupero del valore di questa proprietà è un&quot;operazione o (1). l&quot;impostazione della proprietà è un&quot;operazione o (1)."
  example:
  - "The following code example creates an <xref:System.Collections.ArrayList> and adds several items. The example demonstrates accessing elements with the Item property (the indexer in C#), and changing an element by assigning a new value to the Item property for a specified index. The example also shows that the Item property cannot be used to access or add elements outside the current size of the list.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#1](~/add/codesnippet/cpp/p-system.collections.arr_1_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Item#1](~/add/codesnippet/csharp/p-system.collections.arr_1_1.cs)]\n [!code-vb[System.Collections.ArrayList.Item#1](~/add/codesnippet/visualbasic/p-system.collections.arr_1_1.vb)]  \n  \n The following example uses the Item property explicitly to assign values to items in the list. The example defines a class that inherits an <xref:System.Collections.ArrayList> and adds a method to scramble the list items.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#2](~/add/codesnippet/cpp/p-system.collections.arr_1_2.cpp)]\n [!code-vb[System.Collections.ArrayList.Item#2](~/add/codesnippet/visualbasic/p-system.collections.arr_1_2.vb)]\n [!code-cs[System.Collections.ArrayList.Item#2](~/add/codesnippet/csharp/p-system.collections.arr_1_2.cs)]"
  syntax:
    content: public virtual object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero dell&quot;elemento da ottenere o impostare."
    return:
      type: System.Object
      description: "L&quot;elemento in corrispondenza dell&quot;indice specificato."
  overload: System.Collections.ArrayList.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>index</code> è maggiore o uguale a <xref:System.Collections.ArrayList.Count*>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  id: LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cerca l&quot;oggetto specificato <xref:System.Object>e restituisce l&quot;indice in base zero dell&quot;ultima occorrenza all&quot;interno dell&quot;intero <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "Il <xref:System.Collections.ArrayList>viene eseguita la ricerca all&quot;indietro a partire dall&quot;ultimo elemento e termina in corrispondenza del primo elemento.</xref:System.Collections.ArrayList>       Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_14_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_14_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_14_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>per individuare il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "L&quot;indice in base zero dell&quot;ultima occorrenza di <code> value </code> all&quot;interno dell&quot;intero il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, se presente; in caso contrario, -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  id: LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cerca l&quot;oggetto specificato <xref:System.Object>e restituisce l&quot;indice in base zero dell&quot;ultima occorrenza all&quot;interno dell&quot;intervallo di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> compreso tra il primo elemento in corrispondenza dell&quot;indice specificato.</xref:System.Object>"
  remarks: "Il <xref:System.Collections.ArrayList>viene eseguita con le versioni precedenti a partire dall&quot;indice `startIndex` e termina in corrispondenza del primo elemento.</xref:System.Collections.ArrayList>       Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è il numero di elementi dall&quot;inizio del <xref:System.Collections.ArrayList>a `startIndex`.</xref:System.Collections.ArrayList>       Questo metodo determina l&quot;uguaglianza chiamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_26_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_26_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_26_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>per individuare il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Indice iniziale in base zero della ricerca all&quot;indietro."
    return:
      type: System.Int32
      description: "L&quot;indice in base zero dell&quot;ultima occorrenza di <code> value </code> all&quot;interno dell&quot;intervallo di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> compreso tra il primo elemento e <code> startIndex </code>, se presente; in caso contrario, -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>è compreso nell&quot;intervallo di indici validi per il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Cerca l&quot;oggetto specificato <xref:System.Object>e restituisce l&quot;indice in base zero dell&quot;ultima occorrenza all&quot;interno dell&quot;intervallo di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> che contiene il numero specificato di elementi e termina in corrispondenza dell&quot;indice specificato.</xref:System.Object>"
  remarks: "Il <xref:System.Collections.ArrayList>viene eseguita con le versioni precedenti a partire dall&quot;indice `startIndex` e fine `startIndex` meno `count` + 1, se `count` è maggiore di 0.</xref:System.Collections.ArrayList>       Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è `count`.       Questo metodo determina l&quot;uguaglianza chiamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       A partire da .NET Framework 2.0, questo metodo utilizza degli oggetti della raccolta <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi su `item` per determinare se esiste un elemento.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> Nelle versioni precedenti di .NET Framework, questa operazione è stata effettuata utilizzando il <xref:System.Object.Equals%2A>e <xref:System.IComparable.CompareTo%2A>metodi il `item` parametro per gli oggetti nella raccolta.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element. Note that `LastIndexOf` is a backward search; therefore, `count` must be less than or equal to `startIndex` + 1.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/62fe9219-7086-43ad-b565-_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/62fe9219-7086-43ad-b565-_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/62fe9219-7086-43ad-b565-_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>per individuare il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Indice iniziale in base zero della ricerca all&quot;indietro."
    - id: count
      type: System.Int32
      description: "Il numero di elementi nella sezione per eseguire la ricerca."
    return:
      type: System.Int32
      description: "L&quot;indice in base zero dell&quot;ultima occorrenza di <code> value </code> all&quot;interno dell&quot;intervallo di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref> contenente <code> count </code> numero di elementi e termina in corrispondenza <code> startIndex </code>, se presente; in caso contrario, -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>è compreso nell&quot;intervallo di indici validi per il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - oppure - <code>count</code> è minore di zero.       - oppure - <code>startIndex</code> e <code>count</code> non si specifica una sezione valida nel <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  id: ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce una proprietà di sola lettura <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper."
  remarks: "Per evitare che venga `list`, esporre `list` solo tramite il wrapper.       Una raccolta di sola lettura è semplicemente una raccolta con un wrapper che ne impedisce la modifica della raccolta. Se vengono apportate modifiche alla raccolta sottostante, la raccolta di sola lettura riflette le modifiche.       Questo metodo è un&quot;operazione o (1)."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_9_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_9_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_9_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> per eseguire il wrapping."
    return:
      type: System.Collections.ArrayList
      description: "Sola lettura <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper <code> list </code>."
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  id: ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce una proprietà di sola lettura <xref:System.Collections.IList>wrapper.</xref:System.Collections.IList>"
  remarks: "Per evitare che venga `list`, esporre `list` solo tramite il wrapper.       Una raccolta di sola lettura è semplicemente una raccolta con un wrapper che ne impedisce la modifica della raccolta. Se vengono apportate modifiche alla raccolta sottostante, la raccolta di sola lettura riflette le modifiche.       Questo metodo è un&quot;operazione o (1)."
  syntax:
    content: public static System.Collections.IList ReadOnly (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "Il <xref:System.Collections.IList>per eseguire il wrapping.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Sola lettura <xref:System.Collections.IList>wrapper <code> list </code>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove la prima occorrenza di un oggetto specifico dal <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Se il <xref:System.Collections.ArrayList>non contiene l&quot;oggetto specificato, il <xref:System.Collections.ArrayList>rimane invariato.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Viene generata alcuna eccezione.       Questo metodo esegue una ricerca lineare. Pertanto, questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Questo metodo determina l&quot;uguaglianza chiamando <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       In raccolte di elementi adiacenti, quali gli elenchi, gli elementi che seguono l&quot;elemento rimosso Sposta su per occupare la posizione rimasta vuota. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente in bucket, come una tabella hash."
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_5_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_5_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_5_1.cs)]"
  syntax:
    content: public virtual void Remove (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Il <xref:System.Object>per rimuovere il <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove l&quot;elemento in corrispondenza dell&quot;indice specificato del <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Dopo l&quot;elemento viene rimosso, le dimensioni della raccolta vengono modificate e il valore della <xref:System.Collections.ArrayList.Count%2A>proprietà viene ridotta di uno.</xref:System.Collections.ArrayList.Count%2A>       In raccolte di elementi adiacenti, quali gli elenchi, gli elementi che seguono l&quot;elemento rimosso Sposta su per occupare la posizione rimasta vuota. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente in bucket, come una tabella hash.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_24_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_24_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_24_1.cs)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice in base zero dell&quot;elemento da rimuovere."
  overload: System.Collections.ArrayList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>index</code> è maggiore o uguale a <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Rimuove un intervallo di elementi dal <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "In raccolte di elementi adiacenti, quali gli elenchi, gli elementi che seguono l&quot;elemento rimosso Sposta su per occupare la posizione rimasta vuota. Se la raccolta è indicizzata, vengono aggiornati anche gli indici degli elementi spostati. Questo comportamento non viene applicato alle raccolte in cui gli elementi sono raggruppati concettualmente in bucket, come una tabella hash.       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_21_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_21_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_21_1.cs)]"
  syntax:
    content: public virtual void RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice iniziale in base zero dell&quot;intervallo di elementi da rimuovere."
    - id: count
      type: System.Int32
      description: "Il numero di elementi da rimuovere."
  overload: System.Collections.ArrayList.RemoveRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>count</code> è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> non indicano un intervallo valido di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  id: Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un <xref href=&quot;System.Collections.ArrayList&quot;> </xref> i cui elementi sono copie del valore specificato."
  remarks: "<xref:System.Collections.ArrayList>accetta `null` come un valore valido e consente elementi duplicati.</xref:System.Collections.ArrayList>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è `count`."
  example:
  - "The following code example shows how to create and initialize a new <xref:System.Collections.ArrayList> with the same value.  \n  \n [!code-cpp[Classic ArrayList.Repeat Example#1](~/add/codesnippet/cpp/m-system.collections.arr_1_1.cpp)]\n [!code-cs[Classic ArrayList.Repeat Example#1](~/add/codesnippet/csharp/m-system.collections.arr_1_1.cs)]\n [!code-vb[Classic ArrayList.Repeat Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_1_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList Repeat (object value, int count);
    parameters:
    - id: value
      type: System.Object
      description: "Il <xref:System.Object>per copiare più volte nel nuovo <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Il valore può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: count
      type: System.Int32
      description: "Il numero di volte in cui `value` devono essere copiati."
    return:
      type: System.Collections.ArrayList
      description: "Un <xref href=&quot;System.Collections.ArrayList&quot;> </xref> con <code> count </code> numero di elementi, ognuno dei quali sono copie di <code> value </code>."
  overload: System.Collections.ArrayList.Repeat*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code>è minore di zero."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse
  id: Reverse
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inverte l&quot;ordine degli elementi nell&quot;intero <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Questo metodo utilizza <xref:System.Array.Reverse%2A?displayProperty=fullName>per invertire l&quot;ordine degli elementi, in modo che l&quot;elemento in corrispondenza <xref:System.Collections.ArrayList>[i], dove i è un indice all&quot;interno dell&quot;intervallo, viene spostato <xref:System.Collections.ArrayList>[j#], dove j equivale `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to reverse the sort order of the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Reverse Example#1](~/add/codesnippet/csharp/m-system.collections.arr_20_1.cs)]\n [!code-cpp[Classic ArrayList.Reverse Example#1](~/add/codesnippet/cpp/m-system.collections.arr_20_1.cpp)]\n [!code-vb[Classic ArrayList.Reverse Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_20_1.vb)]"
  syntax:
    content: public virtual void Reverse ();
    parameters: []
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Inverte l&quot;ordine degli elementi nell&quot;intervallo specificato."
  remarks: "Questo metodo utilizza <xref:System.Array.Reverse%2A?displayProperty=fullName>per invertire l&quot;ordine degli elementi, in modo che l&quot;elemento in corrispondenza <xref:System.Collections.ArrayList>[i], dove i è un indice all&quot;interno dell&quot;intervallo, viene spostato <xref:System.Collections.ArrayList>[j#], dove j equivale `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è `count`."
  example:
  - "The following code example shows how to reverse the sort order of the values in a range of elements in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_3_1.cpp)]\n [!code-cs[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_3_1.cs)]\n [!code-vb[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual void Reverse (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice iniziale in base zero dell&quot;intervallo da invertire."
    - id: count
      type: System.Int32
      description: "Il numero di elementi nell&quot;intervallo da invertire."
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>count</code> è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> non indicano un intervallo valido di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura."
  platform:
  - net462
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  id: SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia gli elementi di una raccolta in un intervallo di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>accetta `null` come un valore valido e consente elementi duplicati.</xref:System.Collections.ArrayList>       L&quot;ordine degli elementi <xref:System.Collections.ICollection>viene mantenuto in <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Questo metodo è un&quot;operazione O (`n` + 1) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/23e2a8fa-8e09-46ee-8256-_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/23e2a8fa-8e09-46ee-8256-_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/23e2a8fa-8e09-46ee-8256-_1.vb)]"
  syntax:
    content: public virtual void SetRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "In base zero <xref href=&quot;System.Collections.ArrayList&quot;> </xref> indice in corrispondenza del quale iniziare a copiare gli elementi di `c`."
    - id: c
      type: System.Collections.ICollection
      description: "Il <xref:System.Collections.ICollection>cui copiare gli elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> La raccolta non può essere <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, ma può contenere elementi <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.SetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>index</code> più il numero di elementi in <code>c</code> è maggiore di <xref:System.Collections.ArrayList.Count*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort
  id: Sort
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ordina gli elementi dell&quot;intero <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Questo metodo utilizza <xref:System.Array.Sort%2A?displayProperty=fullName>, che utilizza l&quot;algoritmo QuickSort.</xref:System.Array.Sort%2A?displayProperty=fullName> L&quot;algoritmo QuickSort è un confronto di ordinamento (denominato anche ordinamento instabile), il che significa che un &quot;minore o uguale a&quot; operazione di confronto determina quale dei due elementi deve trovarsi per primo nell&quot;elenco ordinato finale. Tuttavia, se due elementi sono uguali, l&quot;ordine originale potrebbe non essere mantenuta. Al contrario, un ordinamento stabile mantiene l&quot;ordine degli elementi che sono uguali. Per eseguire un ordinamento stabile, è necessario implementare una classe personalizzata <xref:System.Collections.IComparer>interfaccia da utilizzare con gli altri overload di questo metodo.</xref:System.Collections.IComparer>       In Media, questo metodo è un&quot;operazione O (`n` log `n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>; nel peggiore dei casi si tratta di un&quot;operazione O (`n`^&2;) operazione.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Sort Example#1](~/add/codesnippet/csharp/m-system.collections.arr_11_1.cs)]\n [!code-vb[Classic ArrayList.Sort Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_11_1.vb)]\n [!code-cpp[Classic ArrayList.Sort Example#1](~/add/codesnippet/cpp/m-system.collections.arr_11_1.cpp)]"
  syntax:
    content: public virtual void Sort ();
    parameters: []
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ordina gli elementi dell&quot;intero <xref href=&quot;System.Collections.ArrayList&quot;> </xref> utilizzando l&quot;operatore di confronto specificato."
  remarks: "Utilizzare il metodo di ordinamento per ordinare un elenco di oggetti con un operatore di confronto personalizzato che implementa il <xref:System.Collections.IComparer>interfaccia.</xref:System.Collections.IComparer> Se si passa `null` per `comparer`, questo metodo Usa il <xref:System.IComparable>implementazione di ciascun elemento.</xref:System.IComparable> In questo caso, è necessario assicurarsi che gli oggetti contenuti nell&quot;elenco implementino il <xref:System.Collections.IComparer>si verifica un&quot;eccezione o interfaccia.</xref:System.Collections.IComparer>       Inoltre, l&quot;utilizzo di <xref:System.IComparable>implementazione indica che l&quot;elenco viene eseguito un ordinamento basato sul confronto (denominato anche ordinamento instabile); ovvero, se due elementi sono uguali, l&quot;ordine potrebbe non essere mantenuta.</xref:System.IComparable> Al contrario, un ordinamento stabile mantiene l&quot;ordine degli elementi che sono uguali. Per eseguire un ordinamento stabile, è necessario implementare una classe personalizzata <xref:System.Collections.IComparer>interfaccia.</xref:System.Collections.IComparer>       In Media, questo metodo è un&quot;operazione O (`n` log `n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>; nel peggiore dei casi si tratta di un&quot;operazione O (`n`^&2;) operazione.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/cpp/m-system.collections.arr_16_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/csharp/m-system.collections.arr_16_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/visualbasic/m-system.collections.arr_16_1.vb)]"
  syntax:
    content: public virtual void Sort (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>implementazione da usare quando si confrontano elementi.</xref:System.Collections.IComparer>       - oppure - un riferimento null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic) per utilizzare il <xref:System.IComparable>implementazione di ciascun elemento.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Si è verificato un errore durante il confronto tra due elementi."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>viene passato <code> comparer </code>, e gli elementi nell&quot;elenco non implementano <xref:System.IComparable>.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ordina gli elementi in un intervallo di elementi in <xref href=&quot;System.Collections.ArrayList&quot;> </xref> utilizzando l&quot;operatore di confronto specificato."
  remarks: "Se `comparer` è impostato su `null`, questo metodo esegue un ordinamento basato sul confronto (denominato anche ordinamento instabile), vale a dire, se due elementi sono uguali, l&quot;ordine potrebbe non essere mantenuta. Al contrario, un ordinamento stabile mantiene l&quot;ordine degli elementi che sono uguali. Per eseguire un ordinamento stabile, è necessario implementare una classe personalizzata <xref:System.Collections.IComparer>interfaccia.</xref:System.Collections.IComparer>       In Media, questo metodo è un&quot;operazione O (`n` log `n`) operazione, in cui `n` è `count`; nel peggiore dei casi si tratta di un&quot;operazione O(n^2)."
  example:
  - "The following code example shows how to sort the values in a range of elements in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/cpp/b0a7df76-2f5d-45d4-bb7a-_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/csharp/b0a7df76-2f5d-45d4-bb7a-_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/visualbasic/b0a7df76-2f5d-45d4-bb7a-_1.vb)]"
  syntax:
    content: public virtual void Sort (int index, int count, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "Indice iniziale in base zero dell&quot;intervallo da ordinare."
    - id: count
      type: System.Int32
      description: "La lunghezza dell&quot;intervallo da ordinare."
    - id: comparer
      type: System.Collections.IComparer
      description: "Il <xref:System.Collections.IComparer>implementazione da usare quando si confrontano elementi.</xref:System.Collections.IComparer>       - oppure - un riferimento null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic) per utilizzare il <xref:System.IComparable>implementazione di ciascun elemento.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>è minore di zero.       - oppure - <code>count</code> è minore di zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>e <code>count</code> non si specifica un intervallo valido nel <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Si è verificato un errore durante il confronto tra due elementi."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  id: Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper sincronizzato (thread-safe)."
  remarks: "Per garantire la thread-safe di <xref:System.Collections.ArrayList>, tutte le operazioni devono essere eseguite tramite questo wrapper.</xref:System.Collections.ArrayList>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_25_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_25_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_25_1.cs)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_25_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.arr_25_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.arr_25_2.cs)]"
  syntax:
    content: public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> per la sincronizzazione."
    return:
      type: System.Collections.ArrayList
      description: "Un <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper sincronizzato (thread-safe)."
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  id: Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Restituisce un <xref:System.Collections.IList>wrapper sincronizzato (thread-safe).</xref:System.Collections.IList>"
  remarks: "Per garantire la thread-safe di <xref:System.Collections.ArrayList>, tutte le operazioni devono essere eseguite tramite questo wrapper.</xref:System.Collections.ArrayList>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_23_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_23_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_23_1.cs)]  \n  \n This method is an O(1) operation."
  syntax:
    content: public static System.Collections.IList Synchronized (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "Il <xref:System.Collections.IList>per la sincronizzazione.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Un <xref:System.Collections.IList>wrapper sincronizzato (thread-safe).</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.SyncRoot
  id: SyncRoot
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Ottiene un oggetto che può essere utilizzato per sincronizzare l&quot;accesso al <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Per creare una versione sincronizzata del <xref:System.Collections.ArrayList>, utilizzare il <xref:System.Collections.ArrayList.Synchronized%2A>metodo.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList> Tuttavia, le classi derivate possono fornire una propria versione sincronizzata del <xref:System.Collections.ArrayList>utilizzando la proprietà SyncRoot.</xref:System.Collections.ArrayList> Il codice di sincronizzazione deve essere eseguite nella radice di sincronizzazione del <xref:System.Collections.ArrayList>, non direttamente sulla <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> In questo modo si garantisce il corretto funzionamento delle raccolte derivate da altri oggetti. In particolare, viene mantenuta la sincronizzazione con altri thread che potrebbero modificare contemporaneamente il <xref:System.Collections.ArrayList>oggetto.</xref:System.Collections.ArrayList>       L&quot;enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread possa comunque modificare la raccolta, che determina l&quot;enumeratore generare un&quot;eccezione. Per garantire la protezione dei thread durante l&quot;enumerazione, bloccare la raccolta per l&quot;intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_4_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_4_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_4_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Oggetto che può essere utilizzato per sincronizzare l&quot;accesso al <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray
  id: ToArray
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia gli elementi del <xref href=&quot;System.Collections.ArrayList&quot;> </xref> a un nuovo <xref:System.Object>array.</xref:System.Object>"
  remarks: "Gli elementi vengono copiati mediante <xref:System.Array.Copy%2A?displayProperty=fullName>, che è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  syntax:
    content: public virtual object[] ToArray ();
    parameters: []
    return:
      type: System.Object[]
      description: "Un <xref:System.Object>contenente le copie degli elementi della matrice di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.ArrayList.ToArray*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray(System.Type)
  id: ToArray(System.Type)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Copia gli elementi del <xref href=&quot;System.Collections.ArrayList&quot;> </xref> in una nuova matrice del tipo di elemento specificato."
  remarks: "Tutti gli oggetti nel <xref:System.Collections.ArrayList>oggetto sarà possibile eseguire il cast di <xref:System.Type>specificato nella `type` parametro.</xref:System.Type> </xref:System.Collections.ArrayList>       Gli elementi vengono copiati mediante <xref:System.Array.Copy%2A?displayProperty=fullName>, che è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  example:
  - "The following copy example shows how to copy the elements of an <xref:System.Collections.ArrayList> to a string array.  \n  \n [!code-cs[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/csharp/m-system.collections.arr_17_1.cs)]\n [!code-cpp[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/cpp/m-system.collections.arr_17_1.cpp)]\n [!code-vb[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/visualbasic/m-system.collections.arr_17_1.vb)]"
  syntax:
    content: public virtual Array ToArray (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "L&quot;elemento <xref:System.Type>della matrice di destinazione per creare e copiare gli elementi.</xref:System.Type>"
    return:
      type: System.Array
      description: "Matrice di tipo di elemento specificato che contiene copie degli elementi del <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.ToArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Il tipo di origine <xref href=&quot;System.Collections.ArrayList&quot;> </xref> non può essere eseguire automaticamente il cast al tipo specificato."
  platform:
  - net462
- uid: System.Collections.ArrayList.TrimToSize
  id: TrimToSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Imposta la capacità sul numero effettivo di elementi di <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Questo metodo può essere utilizzato per ridurre il sovraccarico della memoria di una raccolta se nessun nuovo elemento verrà aggiunto alla raccolta.       Per reimpostare un <xref:System.Collections.ArrayList>lo stato iniziale, chiamare il metodo di <xref:System.Collections.ArrayList.Clear%2A>prima del metodo TrimToSize.</xref:System.Collections.ArrayList.Clear%2A> </xref:System.Collections.ArrayList> L&quot;eliminazione di un oggetto vuoto <xref:System.Collections.ArrayList>Imposta la capacità del <xref:System.Collections.ArrayList>per la capacità predefinita.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Questo metodo è un&quot;operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_8_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_8_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_8_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.ArrayList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Il <xref href=&quot;System.Collections.ArrayList&quot;> </xref> è di sola lettura.       - o - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> ha dimensioni fisse."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.ArrayList.#ctor
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ArrayList.Add(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
- uid: System.Collections.ArrayList.Capacity
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
- uid: System.Collections.ArrayList.Clone
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
- uid: System.Collections.ArrayList.Contains(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
- uid: System.Collections.ArrayList.Count
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
- uid: System.Collections.ArrayList.GetEnumerator
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
- uid: System.Collections.ArrayList.IsFixedSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
- uid: System.Collections.ArrayList.Remove(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
- uid: System.Collections.ArrayList.Reverse
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
- uid: System.Collections.ArrayList.Sort
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
- uid: System.Collections.ArrayList.SyncRoot
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.ArrayList.ToArray(System.Type)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ArrayList.TrimToSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
- uid: System.Collections.ArrayList.#ctor*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList.ArrayList
- uid: System.Collections.ArrayList.Adapter*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter
  nameWithType: ArrayList.Adapter
- uid: System.Collections.ArrayList.Add*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add
  nameWithType: ArrayList.Add
- uid: System.Collections.ArrayList.AddRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange
  nameWithType: ArrayList.AddRange
- uid: System.Collections.ArrayList.BinarySearch*
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch
  nameWithType: ArrayList.BinarySearch
- uid: System.Collections.ArrayList.Capacity*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear
  nameWithType: ArrayList.Clear
- uid: System.Collections.ArrayList.Clone*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone
  nameWithType: ArrayList.Clone
- uid: System.Collections.ArrayList.Contains*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains
  nameWithType: ArrayList.Contains
- uid: System.Collections.ArrayList.CopyTo*
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo
  nameWithType: ArrayList.CopyTo
- uid: System.Collections.ArrayList.Count*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize
  nameWithType: ArrayList.FixedSize
- uid: System.Collections.ArrayList.GetEnumerator*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator
  nameWithType: ArrayList.GetEnumerator
- uid: System.Collections.ArrayList.GetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange
  nameWithType: ArrayList.GetRange
- uid: System.Collections.ArrayList.IndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf
  nameWithType: ArrayList.IndexOf
- uid: System.Collections.ArrayList.Insert*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert
  nameWithType: ArrayList.Insert
- uid: System.Collections.ArrayList.InsertRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange
  nameWithType: ArrayList.InsertRange
- uid: System.Collections.ArrayList.IsFixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item
  nameWithType: ArrayList.Item
- uid: System.Collections.ArrayList.LastIndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf
  nameWithType: ArrayList.LastIndexOf
- uid: System.Collections.ArrayList.ReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly
  nameWithType: ArrayList.ReadOnly
- uid: System.Collections.ArrayList.Remove*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove
  nameWithType: ArrayList.Remove
- uid: System.Collections.ArrayList.RemoveAt*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt
  nameWithType: ArrayList.RemoveAt
- uid: System.Collections.ArrayList.RemoveRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange
  nameWithType: ArrayList.RemoveRange
- uid: System.Collections.ArrayList.Repeat*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat
  nameWithType: ArrayList.Repeat
- uid: System.Collections.ArrayList.Reverse*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse
  nameWithType: ArrayList.Reverse
- uid: System.Collections.ArrayList.SetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange
  nameWithType: ArrayList.SetRange
- uid: System.Collections.ArrayList.Sort*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort
  nameWithType: ArrayList.Sort
- uid: System.Collections.ArrayList.Synchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized
  nameWithType: ArrayList.Synchronized
- uid: System.Collections.ArrayList.SyncRoot*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray
  nameWithType: ArrayList.ToArray
- uid: System.Collections.ArrayList.TrimToSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize
  nameWithType: ArrayList.TrimToSize
