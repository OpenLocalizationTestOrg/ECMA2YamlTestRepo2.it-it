### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitCallback
  id: WaitCallback
  langs:
  - csharp
  name: WaitCallback
  nameWithType: WaitCallback
  fullName: System.Threading.WaitCallback
  type: Delegate
  summary: "Rappresenta un metodo di callback deve essere eseguito da un pool di thread."
  remarks: "WaitCallback rappresenta un metodo di callback che si desidera eseguire in un <xref:System.Threading.ThreadPool>thread.</xref:System.Threading.ThreadPool> Creare il delegato passando il metodo di callback al costruttore WaitCallback. Il metodo deve avere la firma illustrata di seguito.       Accoda l&quot;attività per l&quot;esecuzione passando il delegato WaitCallback <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName> Il metodo di callback viene eseguito quando un thread di pool di thread diventa disponibile.      > [!NOTE] >, Omettere il costruttore WaitCallback agli utenti di Visual Basic e utilizzare semplicemente la `AddressOf` operatore quando si passa il metodo di callback a <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> Visual Basic chiama automaticamente il costruttore di delegato corretto.       Se si desidera passare le informazioni per il metodo di callback, creare un oggetto che contiene le informazioni necessarie e passarlo a <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>quando si mette in coda le attività da eseguire.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> Ogni volta che viene eseguito il metodo di callback, la `state` parametro contiene questo oggetto.       Per ulteriori informazioni sull&quot;utilizzo di callback per sincronizzare i thread del pool, vedere [il Pool di Thread gestiti](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This section contains two examples. The first example demonstrates how you can queue a simple task for execution by the thread pool.  \n  \n The second example demonstrates how you can queue a task and pass information to it.  \n  \n **Example 1**  \n  \n This example shows how to use the WaitCallback delegate to queue a task for execution by the thread pool. The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=fullName> method overload to queue a task, which is represented by a WaitCallback that wraps the `ThreadProc` method, to execute when a thread becomes available. No task information is supplied with this overload. Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/cpp/t-system.threading.waitc_1.cpp)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_1.vb)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/csharp/t-system.threading.waitc_1.cs)]  \n  \n **Example 2**  \n  \n This example shows how to create an object that contains task information. It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/cpp/t-system.threading.waitc_2.cpp)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/csharp/t-system.threading.waitc_2.cs)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitCallback(object state);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
