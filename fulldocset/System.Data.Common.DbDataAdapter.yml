### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbDataAdapter
  id: DbDataAdapter
  children:
  - System.Data.Common.DbDataAdapter.#ctor
  - System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.DeleteCommand
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.InsertCommand
  - System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbDataAdapter.SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.Data.Common.DbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
  type: Class
  summary: "Semplifica l&quot;implementazione del <xref href=&quot;System.Data.IDbDataAdapter&quot;> </xref> interfaccia. Gli eredi di DbDataAdapter implementano un set di funzioni per fornire tipizzazione forte, ma ereditano la maggior parte delle funzionalità necessarie per implementare completamente un **DataAdapter**."
  remarks: "La classe DbDataAdapter eredita il <xref:System.Data.Common.DataAdapter>classe e consente di implementare una classe un **DataAdapter** progettato per l&quot;uso con un database relazionale.</xref:System.Data.Common.DataAdapter>       Un&quot;applicazione non crea un&quot;istanza dell&quot;interfaccia DbDataAdapter direttamente, ma crea un&quot;istanza di una classe che eredita <xref:System.Data.IDbDataAdapter>e DbDataAdapter.</xref:System.Data.IDbDataAdapter>       Le classi che ereditano DbDataAdapter devono implementare i membri ereditati e in genere definire membri aggiuntivi per aggiungere funzionalità specifiche del provider. Ad esempio, la classe DbDataAdapter definisce il <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, proprietà e l&quot;interfaccia DbDataAdapter definisce otto overload del <xref:System.Data.IDataAdapter.Fill%2A>metodo.</xref:System.Data.IDataAdapter.Fill%2A> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> A sua volta, il <xref:System.Data.OleDb.OleDbDataAdapter>classe eredita il <xref:System.Data.Common.DbDataAdapter.Fill%2A>(metodo) che definisce anche altri due overload di <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>che accettano un oggetto Recordset ADO come parametro.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: 'public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  implements:
  - System.Data.IDbDataAdapter
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inizializza una nuova istanza di un **DataAdapter** classe."
  remarks: "Quando si crea un&quot;istanza di <xref:System.Data.Common.DbDataAdapter>, le seguenti proprietà di lettura/scrittura vengono impostate per i seguenti valori iniziali.</xref:System.Data.Common.DbDataAdapter>      | Proprietà | Il valore iniziale |   |----------------|-------------------|   | <xref:System.Data.IDbDataAdapter.SelectCommand%2A>| Un nuovo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.InsertCommand%2A>| Un nuovo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>| Un nuovo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>| Un nuovo <xref:System.Data.IDbCommand>. |   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|       È possibile modificare il valore di una di queste proprietà tramite una chiamata distinta per la proprietà.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: protected DbDataAdapter ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  id: '#ctor(System.Data.Common.DbDataAdapter)'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inizializza una nuova istanza di un <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> classe da un oggetto esistente dello stesso tipo."
  remarks: "Questo overload del metodo di <xref:System.Data.Common.DbDataAdapter>costruttore è progettato per l&quot;uso da un provider di dati .NET Framework, quando si implementa un costruttore simile da utilizzare in un&quot;implementazione di clone.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "Oggetto <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> oggetto utilizzato per creare il nuovo <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  id: AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge un <xref href=&quot;System.Data.IDbCommand&quot;> </xref> per il batch corrente."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera un&quot;eccezione <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter>eseguire l&quot;override di questo metodo per fornire il supporto per i batch.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int AddToBatch (System.Data.IDbCommand command);
    parameters:
    - id: command
      type: System.Data.IDbCommand
      description: "Il <xref href=&quot;System.Data.IDbCommand&quot;> </xref> da aggiungere al batch."
    return:
      type: System.Int32
      description: "Il numero di comandi nel batch prima di aggiungere il <xref href=&quot;System.Data.IDbCommand&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.AddToBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "L&quot;adapter non supporta i batch."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  id: ClearBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Rimuove tutti <xref href=&quot;System.Data.IDbCommand&quot;> </xref> oggetti dal batch."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera un&quot;eccezione <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter>eseguire l&quot;override di questo metodo per fornire il supporto per i batch.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void ClearBatch ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.ClearBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "L&quot;adapter non supporta i batch."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> classe."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "Il <xref href=&quot;System.Data.DataRow&quot;> </xref> utilizzato per aggiornare l&quot;origine dati."
    - id: command
      type: System.Data.IDbCommand
      description: "Il <xref href=&quot;System.Data.IDbCommand&quot;> </xref> eseguita durante la <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Se il comando è un aggiornamento, inserire, eliminare o un&quot;istruzione SELECT."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "Una nuova istanza di <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> classe."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inizializza una nuova istanza di <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> classe."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "Il <xref href=&quot;System.Data.DataRow&quot;> </xref> che aggiorna l&quot;origine dati."
    - id: command
      type: System.Data.IDbCommand
      description: "Il <xref href=&quot;System.Data.IDbCommand&quot;> </xref> da eseguire durante la <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Se il comando è un aggiornamento, inserire, eliminare o un&quot;istruzione SELECT."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "Una nuova istanza di <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> classe."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  id: DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Il nome predefinito utilizzato per il <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> oggetto per il mapping di tabella."
  remarks: "&quot;Table&quot; è il nome predefinito utilizzato per il <xref:System.Data.Common.DataAdapter>oggetto per il mapping di tabella.</xref:System.Data.Common.DataAdapter>       DefaultSourceTableName è quando un&quot;applicazione viene aggiunto un mapping di tabella da utilizzare con <xref:System.Data.Common.DbDataAdapter.Fill%2A>, ma non specifica un <xref:System.Data.DataTable>nome.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public const string DefaultSourceTableName;
    return:
      type: System.String
      description: "Da aggiungere."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene o imposta un comando per l&quot;eliminazione di record dal set di dati."
  remarks: "Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, se questa proprietà non è impostata e informazioni sulla chiave primarie è presente nel <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>viene generato automaticamente.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_3_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Un <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizzato durante <xref:System.Data.IDataAdapter.Update*>per eliminare i record nell&quot;origine dati per le righe eliminate nel set di dati.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Rilascia le risorse non gestite usate dal <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> e facoltativamente rilascia le risorse gestite."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>per rilasciare le risorse gestite e non gestite. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> per rilasciare solo le risorse non gestite."
  overload: System.Data.Common.DbDataAdapter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  id: ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Esegue il batch corrente."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera un&quot;eccezione <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter>eseguire l&quot;override di questo metodo per fornire il supporto per i batch.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int ExecuteBatch ();
    parameters: []
    return:
      type: System.Int32
      description: "Il valore restituito dall&quot;ultimo comando nel batch."
  overload: System.Data.Common.DbDataAdapter.ExecuteBatch*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge o aggiorna righe nel <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Il metodo di riempimento recupera i dati dall&quot;origine dati utilizzando un&quot;istruzione SELECT. Il <xref:System.Data.IDbConnection>oggetto associato al comando select deve essere valido, ma non devono essere aperte.</xref:System.Data.IDbConnection> Se il <xref:System.Data.IDbConnection>viene chiuso prima che venga chiamato riempimento, verrà aperto per recuperare i dati, quindi viene chiusa.</xref:System.Data.IDbConnection> Se la connessione è aperta prima di chiamata riempimento, rimane aperto.       Se durante il popolamento delle tabelle di dati viene rilevata un errore o un&quot;eccezione, le righe aggiunte prima occorrenza dell&quot;errore restano nelle tabelle di dati. Il resto dell&quot;operazione viene interrotta.       Se un comando non restituisce alcuna riga, non vengono aggiunte tabelle per il <xref:System.Data.DataSet>, e viene generata alcuna eccezione.</xref:System.Data.DataSet>       Se il <xref:System.Data.Common.DbDataAdapter>oggetto rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive utilizzando il modello &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet>       Quando la query specificata restituisce più risultati, il set di risultati per ciascuna riga viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; e così via). Perché se si effettua una query di inserimento seguita da una query select, per una query che non restituisce righe, viene creata alcuna tabella, tabella creata per la query select è denominata &quot;Table&quot; perché è la prima tabella creata. Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.       Quando l&quot;istruzione SELECT utilizzata per popolare <xref:System.Data.DataSet>restituisce più risultati, ad esempio le istruzioni SQL batch, se uno dei risultati contiene un errore, tutti i risultati successivi vengono ignorati e non vengono aggiunti a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando tramite successive riempimento chiamate per aggiornare il contenuto del <xref:System.Data.DataSet>, è necessario soddisfare due condizioni: 1.</xref:System.Data.DataSet>  L&quot;istruzione SQL deve corrispondere a quello inizialmente utilizzato per popolare il <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  Il **chiave** informazioni di colonna devono essere presente.       Se le informazioni sulla chiave primarie è presente, tutte le righe duplicate sono risolte e comparire una sola volta in <xref:System.Data.DataTable>che corrisponde a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Informazioni sulla chiave primarie possono essere impostate mediante <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, specificando il <xref:System.Data.DataTable.PrimaryKey%2A>proprietà del <xref:System.Data.DataTable>, o impostando la <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>proprietà `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Se il `SelectCommand` restituisce i risultati di un OUTER JOIN, il `DataAdapter` non è stato impostato un <xref:System.Data.DataTable.PrimaryKey%2A>valore per il <xref:System.Data.DataTable>.</xref:System.Data.DataTable> risultante</xref:System.Data.DataTable.PrimaryKey%2A> È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l&quot;implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Per recuperare informazioni sullo schema per più risultati, usare il riempimento con il <xref:System.Data.MissingSchemaAction>impostato su `AddWithKey`.</xref:System.Data.MissingSchemaAction>"
  syntax:
    content: public override int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Oggetto <xref href=&quot;System.Data.DataSet&quot;> </xref> per inserire i record e, se necessario, dello schema."
    return:
      type: System.Int32
      description: "Il numero di righe correttamente aggiunte o aggiornate nel <xref href=&quot;System.Data.DataSet&quot;> </xref>. Non include righe interessate da istruzioni che non restituiscono righe."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  id: Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge o aggiorna righe in un intervallo specificato nel <xref href=&quot;System.Data.DataSet&quot;> </xref> affinché corrispondano a quelle nell&quot;origine dati mediante il <xref href=&quot;System.Data.DataTable&quot;> </xref> nome."
  remarks: "Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>che consente di recuperare le righe dall&quot;origine dati utilizzando l&quot;istruzione SELECT specificata da un oggetto associato <xref:System.Data.IDbDataAdapter.SelectCommand%2A>proprietà.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> L&quot;oggetto connessione associato con l&quot;istruzione SELECT deve essere valido, ma non devono essere aperte. Se la connessione viene chiusa prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, verrà aperta per recuperare i dati, quindi chiusa.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, rimane aperto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>aggiunge quindi le righe di destinazione <xref:System.Data.DataTable>gli oggetti di <xref:System.Data.DataSet>, creando il <xref:System.Data.DataTable>oggetti se non sono già presenti.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Quando si creano <xref:System.Data.DataTable>oggetti, il <xref:System.Data.Common.DbDataAdapter.Fill%2A>operazione consente di creare solo i metadati dei nomi di colonna.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Tuttavia, se il <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>è impostata su `AddWithKey`, chiavi primarie appropriate e i vincoli vengono creati.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se il <xref:System.Data.Common.DbDataAdapter>rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet> Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet>ogni set di risultati viene inserito in una tabella separata.</xref:System.Data.DataSet>       L&quot;overload del metodo <xref:System.Data.Common.DbDataAdapter.Fill%2A>che accetta `DataTable` come parametro ottiene solo il primo risultato.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Usare un overload di <xref:System.Data.Common.DbDataAdapter.Fill%2A>che accetta `DataSet` come parametro per ottenere più risultati.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo supporta scenari in cui il <xref:System.Data.DataSet>contiene più <xref:System.Data.DataTable>oggetti i cui nomi differiscono solo dalle maiuscole o minuscole.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In tali situazioni, <xref:System.Data.Common.DbDataAdapter.Fill%2A>esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);    dataset.Tables.Add(&quot;AAA&quot;);    adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.       adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato e <xref:System.Data.DataSet>contiene solo <xref:System.Data.DataTable>il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable>viene aggiornato.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```È possibile utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo più volte sulla stessa <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Se esiste una chiave primaria, le righe in ingresso vengono unite con le righe corrispondenti che esistono già. Se è presente alcuna chiave primaria, le righe in ingresso vengono aggiunti a <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Se il `SelectCommand` restituisce i risultati di un OUTER JOIN, il `DataAdapter` non è stato impostato un <xref:System.Data.DataTable.PrimaryKey%2A>valore per il <xref:System.Data.DataTable>.</xref:System.Data.DataTable> risultante</xref:System.Data.DataTable.PrimaryKey%2A> È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l&quot;implementazione di <xref:System.Data.Common.DbDataAdapter.Fill%2A>e <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>per i dati di .NET Framework provider recupera le informazioni sullo schema solo per il primo risultato.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Il nome del <xref href=&quot;System.Data.DataTable&quot;> </xref> da utilizzare per il mapping di tabella."
    return:
      type: System.Int32
      description: "Il numero di righe correttamente aggiunte o aggiornate nel <xref href=&quot;System.Data.DataSet&quot;> </xref>. Non include righe interessate da istruzioni che non restituiscono righe."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La tabella di origine non è valida."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  id: Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge o aggiorna righe nel <xref href=&quot;System.Data.DataSet&quot;> </xref> affinché corrispondano a quelle nell&quot;origine dati mediante il <xref href=&quot;System.Data.DataSet&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref> nomi."
  remarks: "Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo recupera i dati dall&quot;origine dati utilizzando un&quot;istruzione SELECT.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Il <xref:System.Data.IDbConnection>oggetto associato al comando select deve essere valido, ma non devono essere aperte.</xref:System.Data.IDbConnection> Se il <xref:System.Data.IDbConnection>viene chiuso prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, verrà aperta per recuperare i dati, quindi chiusa.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, rimane aperto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se un comando non restituisce alcuna riga, non vengono aggiunte tabelle per il <xref:System.Data.DataSet>, e viene generata alcuna eccezione.</xref:System.Data.DataSet>       Se il <xref:System.Data.Common.DbDataAdapter>oggetto rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, utilizzando il modello &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet>       Quando la query specificata restituisce più risultati, ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; e così via). Poiché se fosse necessario elaborare una query di inserimento seguita da una query select, per una query che non restituisce righe, viene creata alcuna tabella, tabella creata per la query select verrebbe denominata perché si tratta della prima tabella creata &quot;Tabella&quot;. Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.       Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo supporta scenari in cui il <xref:System.Data.DataSet>contiene più <xref:System.Data.DataTable>oggetti i cui nomi differiscono solo dalle maiuscole o minuscole.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In tali situazioni, <xref:System.Data.Common.DbDataAdapter.Fill%2A>esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato e <xref:System.Data.DataSet>contiene solo <xref:System.Data.DataTable>il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable>viene aggiornato.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Se durante il popolamento delle tabelle di dati viene rilevata un errore o un&quot;eccezione, le righe aggiunte prima occorrenza dell&quot;errore restano nelle tabelle di dati. Il resto dell&quot;operazione viene interrotta.       Quando l&quot;istruzione SELECT utilizzata per popolare il <xref:System.Data.DataSet>restituisce più risultati, come un batch di istruzione SQL, è necessario tenere presente quanto segue:-se uno dei risultati contiene un errore, tutti i risultati successivi vengono ignorati e non aggiunti a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Quando si utilizza successive <xref:System.Data.Common.DbDataAdapter.Fill%2A>chiamate per aggiornare il contenuto del <xref:System.Data.DataSet>, è necessario soddisfare due condizioni: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  L&quot;istruzione SQL deve corrispondere a quello inizialmente utilizzato per popolare il <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  Il **chiave** informazioni di colonna devono essere presente. Se le informazioni sulla chiave primarie è presente, tutte le righe duplicate sono risolte e comparire una sola volta in <xref:System.Data.DataTable>che corrisponde a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Informazioni sulla chiave primarie possono essere impostate mediante <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, specificando il <xref:System.Data.DataTable.PrimaryKey%2A>proprietà del <xref:System.Data.DataTable>, o impostando la <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>proprietà `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Se il `SelectCommand` restituisce i risultati di un OUTER JOIN, il `DataAdapter` non è stato impostato un <xref:System.Data.DataTable.PrimaryKey%2A>valore per il <xref:System.Data.DataTable>.</xref:System.Data.DataTable> risultante</xref:System.Data.DataTable.PrimaryKey%2A> È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere[la definizione di chiavi primarie](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l&quot;implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A>con il <xref:System.Data.MissingSchemaAction>impostato su `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with rows from the categories table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_3_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_3_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Oggetto <xref href=&quot;System.Data.DataSet&quot;> </xref> per inserire i record e, se necessario, dello schema."
    - id: srcTable
      type: System.String
      description: "Il nome della tabella di origine da utilizzare per il mapping di tabella."
    return:
      type: System.Int32
      description: "Il numero di righe correttamente aggiunte o aggiornate nel <xref href=&quot;System.Data.DataSet&quot;> </xref>. Non include righe interessate da istruzioni che non restituiscono righe."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "La tabella di origine non è valida."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge o aggiorna righe in un <xref href=&quot;System.Data.DataTable&quot;> </xref> affinché corrispondano a quelle nell&quot;origine dati utilizzando l&quot;oggetto specificato <xref href=&quot;System.Data.DataTable&quot;> </xref>, <xref href=&quot;System.Data.IDbCommand&quot;> </xref> e <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>."
  remarks: "Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>che consente di recuperare le righe dall&quot;origine dati utilizzando l&quot;istruzione SELECT specificata da un oggetto associato <xref:System.Data.IDbDataAdapter.SelectCommand%2A>proprietà.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> L&quot;oggetto connessione associato con l&quot;istruzione SELECT deve essere valido, ma non devono essere aperte. Se la connessione viene chiusa prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, verrà aperto per recuperare i dati, quindi viene chiusa.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, rimane aperto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>aggiunge quindi le righe nella destinazione specificata <xref:System.Data.DataTable>oggetto di <xref:System.Data.DataSet>, creando il <xref:System.Data.DataTable>dell&quot;oggetto se non già esiste.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Quando si crea un <xref:System.Data.DataTable>oggetto, il <xref:System.Data.Common.DbDataAdapter.Fill%2A>operazione consente di creare solo i metadati dei nomi di colonna.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Tuttavia, se il <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>è impostata su `AddWithKey`, chiavi primarie appropriate e i vincoli vengono creati.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se il <xref:System.Data.Common.DbDataAdapter>oggetto rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genererà nomi per le colonne successive, usando il modello &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet>       L&quot;overload del metodo <xref:System.Data.Common.DbDataAdapter.Fill%2A>che accetta `DataTable` come parametro ottiene solo il primo risultato.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Usare un overload di <xref:System.Data.Common.DbDataAdapter.Fill%2A>che accetta `DataSet` come parametro per ottenere più risultati.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       È possibile utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo più volte sulla stessa <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Se esiste una chiave primaria, le righe in ingresso vengono unite con le righe corrispondenti che esistono già. Se è presente alcuna chiave primaria, le righe in ingresso vengono aggiunti a <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Se il `SelectCommand` restituisce i risultati di un OUTER JOIN, il `DataAdapter` non è stato impostato un <xref:System.Data.DataTable.PrimaryKey%2A>valore per il <xref:System.Data.DataTable>.</xref:System.Data.DataTable> risultante</xref:System.Data.DataTable.PrimaryKey%2A> È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l&quot;implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A>con il <xref:System.Data.MissingSchemaAction>impostato su `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Oggetto <xref href=&quot;System.Data.DataTable&quot;> </xref> per inserire i record e, se necessario, dello schema."
    - id: command
      type: System.Data.IDbCommand
      description: "L&quot;istruzione SQL SELECT utilizzata per recuperare le righe dall&quot;origine dati."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Uno del <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valori."
    return:
      type: System.Int32
      description: "Il numero di righe correttamente aggiunte o aggiornate nel <xref href=&quot;System.Data.DataTable&quot;> </xref>. Non include righe interessate da istruzioni che non restituiscono righe."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  id: Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge o aggiorna righe in un <xref href=&quot;System.Data.DataTable&quot;> </xref> affinché corrispondano a quelle nell&quot;origine dati a partire dal record specificato e il recupero fino al numero massimo specificato di record."
  remarks: "Il <xref:System.Data.Common.DataAdapter.Fill%2A>che consente di recuperare le righe dall&quot;origine dati utilizzando l&quot;istruzione SELECT specificata da un oggetto associato <xref:System.Data.IDbDataAdapter.SelectCommand%2A>proprietà.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DataAdapter.Fill%2A> L&quot;oggetto connessione associato con l&quot;istruzione SELECT deve essere valido, ma non devono essere aperte. Se la connessione viene chiusa prima <xref:System.Data.Common.DataAdapter.Fill%2A>viene chiamato, viene aperto per recuperare i dati e quindi viene chiuso.</xref:System.Data.Common.DataAdapter.Fill%2A> Se la connessione è aperta prima <xref:System.Data.Common.DataAdapter.Fill%2A>viene chiamato, rimane aperto.</xref:System.Data.Common.DataAdapter.Fill%2A>       Il <xref:System.Data.Common.DataAdapter.Fill%2A>aggiunge quindi le righe di destinazione <xref:System.Data.DataTable>gli oggetti di <xref:System.Data.DataSet>, creando il <xref:System.Data.DataTable>oggetti se non sono già presenti.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> Quando si creano <xref:System.Data.DataTable>oggetti, il <xref:System.Data.Common.DataAdapter.Fill%2A>operazione consente di creare solo i metadati dei nomi di colonna.</xref:System.Data.Common.DataAdapter.Fill%2A> </xref:System.Data.DataTable> Tuttavia, se il <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>è impostata su `AddWithKey`, chiavi primarie appropriate e i vincoli vengono creati.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se il `SelectCommand` restituisce i risultati di un OUTER JOIN, il `DataAdapter` non è stato impostato un <xref:System.Data.DataTable.PrimaryKey%2A>valore per il <xref:System.Data.DataTable>.</xref:System.Data.DataTable> risultante</xref:System.Data.DataTable.PrimaryKey%2A> È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/add/includes/ajax-current-ext-md.md).       Se l&quot;adattatore dati di rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, utilizzando il modello &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot; e così via.</xref:System.Data.DataTable> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet> Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet>, ogni set di risultati viene inserito in una tabella separata.</xref:System.Data.DataSet> Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; e così via). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.       Quando l&quot;istruzione SELECT utilizzata per popolare il <xref:System.Data.DataSet>restituisce più risultati, ad esempio istruzioni batch SQL, se uno dei risultati contiene un errore, tutti i risultati successivi vengono ignorati e non aggiunti a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       È possibile utilizzare il <xref:System.Data.Common.DataAdapter.Fill%2A>metodo più volte sulla stessa <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> Se esiste una chiave primaria, le righe in ingresso vengono unite con le righe corrispondenti che esistono già. Se è presente alcuna chiave primaria, le righe in ingresso vengono aggiunti a <xref:System.Data.DataTable>.</xref:System.Data.DataTable>      > [!NOTE] > Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l&quot;implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A>con il <xref:System.Data.MissingSchemaAction>impostato su `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (int startRecord, int maxRecords, System.Data.DataTable[] dataTables);
    parameters:
    - id: startRecord
      type: System.Int32
      description: "Il numero di record in base zero da avviare con."
    - id: maxRecords
      type: System.Int32
      description: "Il numero massimo di record da recuperare."
    - id: dataTables
      type: System.Data.DataTable[]
      description: "Il <xref href=&quot;System.Data.DataTable&quot;> </xref> oggetti in cui inserire l&quot;origine dati."
    return:
      type: System.Int32
      description: "Il numero di righe correttamente aggiunte o aggiornate nel <xref href=&quot;System.Data.DataTable&quot;> </xref>. Questo valore non include righe interessate da istruzioni che non restituiscono righe."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge o aggiorna righe in un intervallo specificato nel <xref href=&quot;System.Data.DataSet&quot;> </xref> affinché corrispondano a quelle nell&quot;origine dati mediante il <xref href=&quot;System.Data.DataSet&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref> nomi."
  remarks: "Oggetto `maxRecords` valore pari a 0 Ottiene tutti i record trovati dopo il record iniziale. Se `maxRecords` è maggiore del numero di righe restanti, solo le righe rimanenti vengono restituite e viene generato alcun errore.       Se il comando select corrispondente è un&quot;istruzione che restituisce più risultati, <xref:System.Data.Common.DbDataAdapter.Fill%2A>si applica solo `maxRecords` al primo risultato.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo recupera i dati dall&quot;origine dati utilizzando un&quot;istruzione SELECT.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Il <xref:System.Data.IDbConnection>oggetto associato all&quot;istruzione SELECT deve essere valido, ma non devono essere aperte.</xref:System.Data.IDbConnection> Se il <xref:System.Data.IDbConnection>viene chiuso prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, verrà aperto per recuperare i dati, quindi viene chiusa.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, rimane aperto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se un comando non restituisce alcuna riga, non vengono aggiunte tabelle per il <xref:System.Data.DataSet>, ma viene generata alcuna eccezione.</xref:System.Data.DataSet>       Se il <xref:System.Data.Common.DbDataAdapter>oggetto rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genererà nomi per le colonne successive, usando il modello &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet>       Quando la query specificata restituisce più risultati, ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; e così via). Perché se si effettua una query di inserimento seguita da una query select, per una query che non restituisce righe, viene creata alcuna tabella, tabella creata per la query select è denominata &quot;Table&quot;, perché si tratta della prima tabella creata. Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.       Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo supporta scenari in cui il <xref:System.Data.DataSet>contiene più <xref:System.Data.DataTable>oggetti i cui nomi differiscono solo dalle maiuscole o minuscole.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In tali situazioni, <xref:System.Data.Common.DbDataAdapter.Fill%2A>esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato e <xref:System.Data.DataSet>contiene solo <xref:System.Data.DataTable>il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable>viene aggiornato.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Se durante il popolamento delle tabelle di dati viene rilevata un errore o un&quot;eccezione, le righe aggiunte prima occorrenza dell&quot;errore restano nelle tabelle di dati. Il resto dell&quot;operazione viene interrotta.       Quando l&quot;istruzione SELECT utilizzata per popolare il <xref:System.Data.DataSet>restituisce più risultati, ad esempio istruzioni batch SQL, tenere presente quanto segue:: durante l&quot;elaborazione di più risultati da un&quot;istruzione SQL, batch `maxRecords` si applica solo al primo risultato.</xref:System.Data.DataSet> Lo stesso vale per le righe che contengono risultati con capitoli (Provider di dati .NET Framework per OLE DB solo). Il risultato di primo livello è limitato da `maxRecords`, ma vengono aggiunte tutte le righe figlio.      -Se uno dei risultati contiene un errore, tutti i risultati successivi vengono ignorati e non aggiunti a <xref:System.Data.DataSet>.</xref:System.Data.DataSet>       Quando si utilizza successive <xref:System.Data.Common.DbDataAdapter.Fill%2A>chiamate per aggiornare il contenuto del <xref:System.Data.DataSet>, è necessario soddisfare due condizioni: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  L&quot;istruzione SQL deve corrispondere a quello inizialmente utilizzato per popolare il <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  Il **chiave** informazioni di colonna devono essere presente.       Se le informazioni sulla chiave primarie è presente, tutte le righe duplicate verranno risolte e solo una volta nella <xref:System.Data.DataTable>che corrisponde a <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Informazioni sulla chiave primarie possono essere impostate mediante <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, specificando il <xref:System.Data.DataTable.PrimaryKey%2A>proprietà del <xref:System.Data.DataTable>, o impostando la <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>proprietà `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Se il `SelectCommand` restituisce i risultati di un OUTER JOIN, il `DataAdapter` non è stato impostato un <xref:System.Data.DataTable.PrimaryKey%2A>valore per il <xref:System.Data.DataTable>.</xref:System.Data.DataTable> risultante</xref:System.Data.DataTable.PrimaryKey%2A> È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere [la definizione di chiavi primarie](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l&quot;implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A>con il <xref:System.Data.MissingSchemaAction>impostato su `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Il `DataSet` non conterrà più il numero di record indicato da `maxRecords`. Tuttavia, l&quot;intero set di risultati generato dalla query viene comunque restituito dal server."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with 15 rows, beginning at row 10, from the **Categories** table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/visualbasic/db016a7d-8591-46f9-abcc-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/csharp/db016a7d-8591-46f9-abcc-_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Oggetto <xref href=&quot;System.Data.DataSet&quot;> </xref> per inserire i record e, se necessario, dello schema."
    - id: startRecord
      type: System.Int32
      description: "Il numero di record in base zero da avviare con."
    - id: maxRecords
      type: System.Int32
      description: "Il numero massimo di record da recuperare."
    - id: srcTable
      type: System.String
      description: "Il nome della tabella di origine da utilizzare per il mapping di tabella."
    return:
      type: System.Int32
      description: "Il numero di righe correttamente aggiunte o aggiornate nel <xref href=&quot;System.Data.DataSet&quot;> </xref>. Non include righe interessate da istruzioni che non restituiscono righe."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Il <xref href=&quot;System.Data.DataSet&quot;> </xref> non è valido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La tabella di origine non è valida.       - oppure - la connessione non è valida."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Non è stato possibile trovare la connessione."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> startRecord </code> parametro è minore di 0.       - o - <code> maxRecords </code> parametro è minore di 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge o aggiorna righe in un intervallo specificato nel <xref href=&quot;System.Data.DataSet&quot;> </xref> affinché corrispondano a quelle nell&quot;origine dati mediante il <xref href=&quot;System.Data.DataSet&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref> nomi."
  remarks: "Oggetto `maxRecords` valore pari a 0 Ottiene tutti i record trovati dopo il record iniziale. Se `maxRecords` è maggiore del numero di righe restanti, solo le righe rimanenti vengono restituite e viene generato alcun errore.       Il metodo di riempimento recupera i dati dall&quot;origine dati utilizzando un&quot;istruzione SELECT. Il <xref:System.Data.IDbConnection>oggetto associato all&quot;istruzione SELECT deve essere valido, ma non devono essere aperte.</xref:System.Data.IDbConnection> Se il <xref:System.Data.IDbConnection>viene chiuso prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, verrà aperta per recuperare i dati, quindi chiusa.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, rimane aperto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se un comando non restituisce alcuna riga, non vengono aggiunte tabelle per il <xref:System.Data.DataSet>, ma viene generata alcuna eccezione.</xref:System.Data.DataSet>       Se il <xref:System.Data.Common.DbDataAdapter>oggetto rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genererà nomi per le colonne successive, usando il modello &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet>       Quando la query specificata restituisce più risultati, ogni set di risultati viene inserito in una tabella separata. Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; e così via). Poiché se fosse necessario elaborare una query di inserimento seguita da una query select, per una query che non restituisce righe, viene creata alcuna tabella, tabella creata per la query select verrebbe denominata perché si tratta della prima tabella creata &quot;Tabella&quot;. Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.       Il metodo di riempimento supporta scenari in cui il <xref:System.Data.DataSet>contiene più <xref:System.Data.DataTable>oggetti i cui nomi differiscono solo dalle maiuscole o minuscole.</xref:System.Data.DataTable> </xref:System.Data.DataSet> In tali situazioni, <xref:System.Data.Common.DbDataAdapter.Fill%2A>esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato e <xref:System.Data.DataSet>contiene solo <xref:System.Data.DataTable>il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable>viene aggiornato.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Se durante il popolamento delle tabelle di dati viene rilevata un errore o un&quot;eccezione, le righe aggiunte prima occorrenza dell&quot;errore restano nelle tabelle di dati. Il resto dell&quot;operazione viene interrotta.       Quando l&quot;istruzione SELECT utilizzata per popolare il <xref:System.Data.DataTable>oggetti restituisce più risultati, come un batch di istruzione SQL, è necessario tenere presente quanto segue:: durante l&quot;elaborazione di più risultati da un&quot;istruzione SQL, batch `maxRecords` si applica solo al primo risultato.</xref:System.Data.DataTable> Lo stesso vale per le righe che contengono risultati con capitoli (Provider di dati .NET Framework per OLE DB solo). Il risultato di primo livello è limitato da `maxRecords`, ma vengono aggiunte tutte le righe figlio.      -Se uno dei risultati contiene un errore, tutti i risultati successivi vengono ignorati.      > [!NOTE] > Il `DataSet` non conterrà più il numero di record indicato da `maxRecords`. Tuttavia, l&quot;intero set di risultati generato dalla query viene comunque restituito dal server."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "Il <xref href=&quot;System.Data.DataTable&quot;> </xref> oggetti in cui inserire l&quot;origine dati."
    - id: startRecord
      type: System.Int32
      description: "Il numero di record in base zero da avviare con."
    - id: maxRecords
      type: System.Int32
      description: "Il numero massimo di record da recuperare."
    - id: command
      type: System.Data.IDbCommand
      description: "Il <xref href=&quot;System.Data.IDbCommand&quot;> </xref> eseguita per riempire il <xref href=&quot;System.Data.DataTable&quot;> </xref> oggetti."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Uno del <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valori."
    return:
      type: System.Int32
      description: "Il numero di righe aggiunte o aggiornate nelle tabelle di dati."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Il <xref href=&quot;System.Data.DataSet&quot;> </xref> non è valido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La tabella di origine non è valida.       - oppure - la connessione non è valida."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Non è stato possibile trovare la connessione."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> startRecord </code> parametro è minore di 0.       - o - <code> maxRecords </code> parametro è minore di 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge o aggiorna righe in un intervallo specificato nel <xref href=&quot;System.Data.DataSet&quot;> </xref> affinché corrispondano a quelle nell&quot;origine dati mediante il <xref href=&quot;System.Data.DataSet&quot;> </xref> e comportamento del comando, la stringa di comando e i nomi delle tabelle di origine."
  remarks: "Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>che consente di recuperare le righe dall&quot;origine dati utilizzando l&quot;istruzione SELECT specificata da un oggetto associato <xref:System.Data.IDbDataAdapter.SelectCommand%2A>proprietà.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> L&quot;oggetto connessione associato con l&quot;istruzione SELECT deve essere valido, ma non devono essere aperte. Se la connessione viene chiusa prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, verrà aperta per recuperare i dati, quindi chiusa.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato, rimane aperto.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>aggiunge quindi le righe di destinazione <xref:System.Data.DataTable>gli oggetti di <xref:System.Data.DataSet>, creando il <xref:System.Data.DataTable>oggetti se non sono già presenti.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Quando si creano <xref:System.Data.DataTable>oggetti, il <xref:System.Data.Common.DbDataAdapter.Fill%2A>operazione consente di creare solo i metadati dei nomi di colonna.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Tuttavia, se il <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>è impostata su `AddWithKey`, chiavi primarie appropriate e i vincoli vengono creati.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Se il <xref:System.Data.Common.DbDataAdapter>rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet> Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet>ogni set di risultati viene inserito in una tabella separata.</xref:System.Data.DataSet> Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; e così via). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.       Il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo supporta scenari in cui il <xref:System.Data.DataSet>contiene più <xref:System.Data.DataTable>oggetti i cui nomi differiscono solo dalle maiuscole o minuscole.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In tali situazioni, <xref:System.Data.Common.DbDataAdapter.Fill%2A>esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.Fill%2A>viene chiamato e <xref:System.Data.DataSet>contiene solo <xref:System.Data.DataTable>il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable>viene aggiornato.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```È possibile utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo più volte sulla stessa <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Se esiste una chiave primaria, le righe in ingresso vengono unite con le righe corrispondenti che esistono già. Se è presente alcuna chiave primaria, le righe in ingresso vengono aggiunti a <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Se il `SelectCommand` restituisce i risultati di un OUTER JOIN, il `DataAdapter` non è stato impostato un <xref:System.Data.DataTable.PrimaryKey%2A>valore per il <xref:System.Data.DataTable>.</xref:System.Data.DataTable> risultante</xref:System.Data.DataTable.PrimaryKey%2A> È necessario definire in modo esplicito la chiave primaria per garantire che le righe duplicate vengano risolte correttamente. Per ulteriori informazioni, vedere[la definizione di chiavi primarie](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l&quot;implementazione di <xref:System.Data.Common.DbDataAdapter.Fill%2A>e <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>per i dati di .NET Framework provider recupera le informazioni sullo schema solo per il primo risultato.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Oggetto <xref href=&quot;System.Data.DataSet&quot;> </xref> per inserire i record e, se necessario, dello schema."
    - id: startRecord
      type: System.Int32
      description: "Il numero di record in base zero da avviare con."
    - id: maxRecords
      type: System.Int32
      description: "Il numero massimo di record da recuperare."
    - id: srcTable
      type: System.String
      description: "Il nome della tabella di origine da utilizzare per il mapping di tabella."
    - id: command
      type: System.Data.IDbCommand
      description: "L&quot;istruzione SQL SELECT utilizzata per recuperare le righe dall&quot;origine dati."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Uno del <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valori."
    return:
      type: System.Int32
      description: "Il numero di righe correttamente aggiunte o aggiornate nel <xref href=&quot;System.Data.DataSet&quot;> </xref>. Non include righe interessate da istruzioni che non restituiscono righe."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La tabella di origine non è valida."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Il <code> startRecord </code> parametro è minore di 0.       - o - <code> maxRecords </code> parametro è minore di 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  id: FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene o imposta il comportamento del comando utilizzato per riempire l&quot;adattatore dati."
  syntax:
    content: protected System.Data.CommandBehavior FillCommandBehavior { get; set; }
    return:
      type: System.Data.CommandBehavior
      description: "Il <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> del comando utilizzato per riempire l&quot;adattatore dati."
  overload: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge un <xref href=&quot;System.Data.DataTable&quot;> </xref> denominato &quot;Table&quot; all&quot;oggetto specificato <xref href=&quot;System.Data.DataSet&quot;> </xref> e configura lo schema in modo che corrisponda a quello nell&quot;origine dati in base all&quot;opzione <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "Questo metodo recupera le informazioni sullo schema dall&quot;origine dati utilizzando <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       Un&quot; <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operazione aggiunge una <xref:System.Data.DataTable>destinazione <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Aggiunge quindi le colonne per la <xref:System.Data.DataColumnCollection>del <xref:System.Data.DataTable>e configura gli elementi seguenti <xref:System.Data.DataColumn>proprietà, se sono presenti nell&quot;origine dati:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> È necessario impostare <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separatamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Configura anche il <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>proprietà secondo le regole seguenti: - se uno o più colonne chiave primaria vengono restituite da <xref:System.Data.IDbDataAdapter.SelectCommand%2A>vengono utilizzati come colonne chiave primaria per <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se viene restituita alcuna colonna di chiave primaria, ma sono colonne univoche, le colonne univoche vengono utilizzate come chiave primaria se e solo se tutte le colonne univoche sono ammessi valori null. Se una o più colonne ammettono valori null, un <xref:System.Data.UniqueConstraint>viene aggiunto per il <xref:System.Data.ConstraintCollection>, ma la <xref:System.Data.DataTable.PrimaryKey%2A>non è impostata.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se vengono restituite sia colonne chiave primaria che colonne univoche, le colonne chiave primaria vengono utilizzate come colonne chiave primaria per <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Si noti che le chiavi primarie e i vincoli unique vengono aggiunti il <xref:System.Data.ConstraintCollection>in base alle regole precedenti, ma altri vincoli non vengono aggiunti i tipi.</xref:System.Data.ConstraintCollection>       Se il cluster univoco viene definito l&quot;indice in una colonna o colonne in una tabella di SQL Server e il vincolo di chiave primaria è definito in un set diverso di colonne, quindi verranno restituiti i nomi delle colonne nell&quot;indice cluster. Per restituire il nome o i nomi delle colonne chiave primaria, utilizzare un hint per la query con l&quot;istruzione SELECT che specifica il nome dell&quot;indice di chiave primaria. Per ulteriori informazioni sulla specifica di hint per la query, vedere [Hint per la Query (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Informazioni sulla chiave primarie viene utilizzati durante <xref:System.Data.Common.DbDataAdapter.Fill%2A>per trovare e sostituire tutte le righe le cui colonne chiave corrispondono.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se non si tratta del comportamento, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A>senza richiedere informazioni sullo schema.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se il <xref:System.Data.IDataAdapter>rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet> Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet>ogni set di risultati viene inserito in una tabella separata.</xref:System.Data.DataSet> Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; e così via.). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.       Il <xref:System.Data.IDbConnection>oggetto associato al comando select deve essere valido, ma non è necessario aprire.</xref:System.Data.IDbConnection> Se il <xref:System.Data.IDbConnection>viene chiuso prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>viene chiamato, verrà aperta per recuperare i dati, quindi chiusa.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>viene chiamato, viene lasciato aperto.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] > Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l&quot;implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A>con il <xref:System.Data.MissingSchemaAction>impostato su `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Quando si utilizza <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, il Provider di dati .NET Framework per SQL Server aggiunge una clausola FOR BROWSE all&quot;istruzione da eseguire.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> L&quot;utente deve essere consapevole dei potenziali effetti collaterali, ad esempio un&quot;interferenza con l&quot;utilizzo di istruzioni SET FMTONLY ON. Per ulteriori informazioni, vedere la documentazione Online di SQL Server."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/visualbasic/5283d285-2680-48b0-856a-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/csharp/5283d285-2680-48b0-856a-_1.cs)]"
  syntax:
    content: public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Oggetto <xref href=&quot;System.Data.DataSet&quot;> </xref> per inserire lo schema."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Uno del <xref href=&quot;System.Data.SchemaType&quot;> </xref> valori che specificano come inserire lo schema."
    return:
      type: System.Data.DataTable[]
      description: "Un riferimento a una raccolta di <xref href=&quot;System.Data.DataTable&quot;> </xref> gli oggetti che sono stati aggiunti per il <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Configura lo schema dell&quot;oggetto specificato <xref href=&quot;System.Data.DataTable&quot;> </xref> in base all&quot;opzione <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "Il metodo FillSchema recupera lo schema dall&quot;origine dati utilizzando <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> L&quot;oggetto connessione associato il <xref:System.Data.IDbDataAdapter.SelectCommand%2A>deve essere valido, ma non deve essere aperto.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Se la connessione viene chiusa prima che venga chiamato FillSchema, verrà aperta per recuperare i dati, quindi chiusa. Se la connessione è aperta prima di chiamata FillSchema, rimane aperto.       Un&quot;operazione FillSchema restituisce un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Aggiunge quindi le colonne per la <xref:System.Data.DataColumnCollection>del <xref:System.Data.DataTable>e configura gli elementi seguenti <xref:System.Data.DataColumn>proprietà, se sono presenti nell&quot;origine dati:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> È necessario impostare <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separatamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema configura anche il <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>proprietà secondo le regole seguenti: - se un <xref:System.Data.DataTable.PrimaryKey%2A>è già stato definito per il `DataTable`, o `DataTable` contiene dati, il `PrimaryKey` verrà non impostata.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se uno o più colonne chiave primaria vengono restituite dal <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, verranno utilizzate come colonne chiave primaria per la `DataTable`.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>      -Se viene restituita alcuna colonna di chiave primaria, ma sono colonne univoche, le colonne univoche vengono utilizzate come chiave primaria se e solo se tutte le colonne univoche sono ammessi valori null. Se una o più colonne ammettono valori null, un <xref:System.Data.UniqueConstraint>viene aggiunto per il <xref:System.Data.ConstraintCollection>, ma la `PrimaryKey` non è impostata.</xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se vengono restituite sia colonne chiave primaria che colonne univoche, le colonne chiave primaria vengono utilizzate come colonne chiave primaria per la `DataTable`.       Si noti che le chiavi primarie e i vincoli unique vengono aggiunti il <xref:System.Data.ConstraintCollection>in base alle regole precedenti, ma altri vincoli non vengono aggiunti i tipi.</xref:System.Data.ConstraintCollection> Questo processo può richiedere più round trip al server.       Se il cluster univoco viene definito l&quot;indice in una colonna o colonne in una tabella di SQL Server e il vincolo di chiave primaria è definito in un set diverso di colonne, quindi verranno restituiti i nomi delle colonne nell&quot;indice cluster. Per restituire il nome o i nomi delle colonne chiave primaria, utilizzare un hint per la query con l&quot;istruzione SELECT che specifica il nome dell&quot;indice di chiave primaria. Per ulteriori informazioni sulla specifica di hint per la query, vedere [Hint per la Query (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Se il <xref:System.Data.Common.DbDataAdapter>rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet> Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet>ogni set di risultati viene inserito in una tabella separata.</xref:System.Data.DataSet> Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; e così via.). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.       FillSchema non restituisce alcuna riga. Utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo per aggiungere righe a un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Quando si gestiscono istruzioni batch SQL che restituiscono più risultati, l&quot;implementazione di FillSchema per il Provider di dati .NET Framework per OLE DB recupera le informazioni sullo schema solo per il primo risultato. Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A>con il <xref:System.Data.MissingSchemaAction>impostato su `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Quando si utilizza FillSchema, il Provider di dati .NET Framework per SQL Server aggiunge una clausola FOR BROWSE all&quot;istruzione da eseguire. L&quot;utente deve essere consapevole dei potenziali effetti collaterali, ad esempio un&quot;interferenza con l&quot;utilizzo di istruzioni SET FMTONLY ON. Per ulteriori informazioni, vedere la documentazione Online di SQL Server."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/visualbasic/658ac10a-3a87-4693-8b37-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/csharp/658ac10a-3a87-4693-8b37-_1.cs)]"
  syntax:
    content: public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Il <xref href=&quot;System.Data.DataTable&quot;> </xref> in cui inserire lo schema dall&quot;origine dati."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Uno del <xref href=&quot;System.Data.SchemaType&quot;> </xref> valori."
    return:
      type: System.Data.DataTable
      description: "Oggetto <xref href=&quot;System.Data.DataTable&quot;> </xref> che contiene informazioni sullo schema restituite dall&quot;origine dati."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge un <xref href=&quot;System.Data.DataTable&quot;> </xref> specificata <xref href=&quot;System.Data.DataSet&quot;> </xref> e configura lo schema in modo che corrisponda a quello nell&quot;origine dati in base al tipo specificato <xref href=&quot;System.Data.SchemaType&quot;> </xref> e <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Questo metodo recupera le informazioni sullo schema dall&quot;origine dati utilizzando <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       Un&quot; <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operazione aggiunge una <xref:System.Data.DataTable>destinazione <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Aggiunge quindi le colonne per la <xref:System.Data.DataColumnCollection>del <xref:System.Data.DataTable>e configura gli elementi seguenti <xref:System.Data.DataColumn>proprietà, se sono presenti nell&quot;origine dati:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> È necessario impostare <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separatamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Configura anche il <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>proprietà secondo le regole seguenti: - se uno o più colonne chiave primaria vengono restituite da <xref:System.Data.IDbDataAdapter.SelectCommand%2A>vengono utilizzati come colonne chiave primaria per <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se viene restituita alcuna colonna di chiave primaria, ma sono colonne univoche, le colonne univoche vengono utilizzate come chiave primaria se e solo se tutte le colonne univoche sono ammessi valori null. Se una o più colonne ammettono valori null, un <xref:System.Data.UniqueConstraint>viene aggiunto per il <xref:System.Data.ConstraintCollection>, ma la <xref:System.Data.DataTable.PrimaryKey%2A>non è impostata.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se vengono restituite sia colonne chiave primaria che colonne univoche, le colonne chiave primaria vengono utilizzate come colonne chiave primaria per <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Si noti che le chiavi primarie e i vincoli unique vengono aggiunti il <xref:System.Data.ConstraintCollection>in base alle regole precedenti, ma altri vincoli non vengono aggiunti i tipi.</xref:System.Data.ConstraintCollection>       Se il cluster univoco viene definito l&quot;indice in una colonna o colonne in una tabella di SQL Server e il vincolo di chiave primaria è definito in un set diverso di colonne, quindi verranno restituiti i nomi delle colonne nell&quot;indice cluster. Per restituire il nome o i nomi delle colonne chiave primaria, utilizzare un hint per la query con l&quot;istruzione SELECT che specifica il nome dell&quot;indice di chiave primaria. Per ulteriori informazioni sulla specifica di hint per la query, vedere [Hint per la Query (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Informazioni sulla chiave primarie viene utilizzati durante <xref:System.Data.Common.DbDataAdapter.Fill%2A>per trovare e sostituire tutte le righe le cui colonne chiave corrispondono.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Se non si tratta del comportamento, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A>senza richiedere informazioni sullo schema.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Se il <xref:System.Data.Common.DbDataAdapter>rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet> Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet>ogni set di risultati viene inserito in una tabella separata.</xref:System.Data.DataSet> Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; e così via.). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.       Il <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>metodo supporta scenari in cui il <xref:System.Data.DataSet>contiene più <xref:System.Data.DataTable>oggetti i cui nomi differiscono solo dalle maiuscole o minuscole.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> In tali situazioni, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>viene chiamato e <xref:System.Data.DataSet>contiene solo <xref:System.Data.DataTable>il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable>viene aggiornato.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Il <xref:System.Data.IDbConnection>oggetto associato al comando select deve essere valido, ma non è necessario aprire.</xref:System.Data.IDbConnection> Se il <xref:System.Data.IDbConnection>viene chiuso prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>viene chiamato, verrà aperta per recuperare i dati, quindi chiusa.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>viene chiamato, viene lasciato aperto.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] > Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l&quot;implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A>con il <xref:System.Data.MissingSchemaAction>impostato su `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Quando si utilizza <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, il Provider di dati .NET Framework per SQL Server aggiunge una clausola FOR BROWSE all&quot;istruzione da eseguire.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> L&quot;utente deve essere consapevole dei potenziali effetti collaterali, ad esempio un&quot;interferenza con l&quot;utilizzo di istruzioni SET FMTONLY ON. Per ulteriori informazioni, vedere la documentazione Online di SQL Server."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/visualbasic/c7e2b899-0a44-4d9d-9e8d-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/csharp/c7e2b899-0a44-4d9d-9e8d-_1.cs)]"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Oggetto <xref href=&quot;System.Data.DataSet&quot;> </xref> per inserire lo schema."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Uno del <xref href=&quot;System.Data.SchemaType&quot;> </xref> valori che specificano come inserire lo schema."
    - id: srcTable
      type: System.String
      description: "Il nome della tabella di origine da utilizzare per il mapping di tabella."
    return:
      type: System.Data.DataTable[]
      description: "Un riferimento a una raccolta di <xref href=&quot;System.Data.DataTable&quot;> </xref> gli oggetti che sono stati aggiunti per il <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Una tabella di origine da cui ottenere lo schema non è stato trovato."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Configura lo schema dell&quot;oggetto specificato <xref href=&quot;System.Data.DataTable&quot;> </xref> in base all&quot;opzione <xref href=&quot;System.Data.SchemaType&quot;> </xref>, stringa, di comando e <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valori."
  remarks: "<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Consente di recuperare lo schema dall&quot;origine dati utilizzando <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> L&quot;oggetto connessione associato il <xref:System.Data.IDbDataAdapter.SelectCommand%2A>deve essere valido, ma non deve essere aperto.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Se la connessione viene chiusa prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>viene chiamato, verrà aperta per recuperare i dati, quindi chiusa.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>viene chiamato, rimane aperto.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Un&quot; <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operazione aggiunge una <xref:System.Data.DataTable>destinazione <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Aggiunge quindi le colonne per la <xref:System.Data.DataColumnCollection>del <xref:System.Data.DataTable>e configura gli elementi seguenti <xref:System.Data.DataColumn>proprietà, se sono presenti nell&quot;origine dati:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> È necessario impostare <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separatamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Configura anche il <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>proprietà secondo le regole seguenti: - se uno o più colonne chiave primaria vengono restituite da <xref:System.Data.IDbDataAdapter.SelectCommand%2A>vengono utilizzati come colonne chiave primaria per <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se viene restituita alcuna colonna di chiave primaria, ma sono colonne univoche, le colonne univoche vengono utilizzate come chiave primaria se e solo se tutte le colonne univoche sono ammessi valori null. Se una o più colonne ammettono valori null, un <xref:System.Data.UniqueConstraint>viene aggiunto per il <xref:System.Data.ConstraintCollection>, ma la <xref:System.Data.DataTable.PrimaryKey%2A>non è impostata.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se vengono restituite sia colonne chiave primaria che colonne univoche, le colonne chiave primaria vengono utilizzate come colonne chiave primaria per <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Si noti che le chiavi primarie e i vincoli unique vengono aggiunti il <xref:System.Data.ConstraintCollection>in base alle regole precedenti, ma altri vincoli non vengono aggiunti i tipi.</xref:System.Data.ConstraintCollection>       Se il cluster univoco viene definito l&quot;indice in una colonna o colonne in una tabella di SQL Server e il vincolo di chiave primaria è definito in un set diverso di colonne, quindi verranno restituiti i nomi delle colonne nell&quot;indice cluster. Per restituire il nome o i nomi delle colonne chiave primaria, utilizzare un hint per la query con l&quot;istruzione SELECT che specifica il nome dell&quot;indice di chiave primaria. Per ulteriori informazioni sulla specifica di hint per la query, vedere [Hint per la Query (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Se il <xref:System.Data.IDataAdapter>rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet> Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet>ogni set di risultati viene inserito in una tabella separata.</xref:System.Data.DataSet> Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; e così via.). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>non restituisce alcuna riga.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo per aggiungere righe a un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l&quot;implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A>con il <xref:System.Data.MissingSchemaAction>impostato su `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Quando si utilizza <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, il Provider di dati .NET Framework per SQL Server aggiunge una clausola FOR BROWSE all&quot;istruzione da eseguire.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> L&quot;utente deve essere consapevole dei potenziali effetti collaterali, ad esempio un&quot;interferenza con l&quot;utilizzo di istruzioni SET FMTONLY ON. Per ulteriori informazioni, vedere la documentazione Online di SQL Server."
  syntax:
    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Il <xref href=&quot;System.Data.DataTable&quot;> </xref> in cui inserire lo schema dall&quot;origine dati."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Uno del <xref href=&quot;System.Data.SchemaType&quot;> </xref> valori."
    - id: command
      type: System.Data.IDbCommand
      description: "L&quot;istruzione SQL SELECT utilizzata per recuperare le righe dall&quot;origine dati."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Uno del <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valori."
    return:
      type: System.Data.DataTable
      description: "Un oggetto di <xref href=&quot;System.Data.DataTable&quot;> </xref> oggetto che contiene informazioni sullo schema restituite dall&quot;origine dati."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiunge un <xref href=&quot;System.Data.DataTable&quot;> </xref> specificata <xref href=&quot;System.Data.DataSet&quot;> </xref> e configura lo schema in modo che corrisponda a quello nell&quot;origine dati in base all&quot;opzione <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Consente di recuperare lo schema dall&quot;origine dati utilizzando <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> L&quot;oggetto connessione associato il <xref:System.Data.IDbDataAdapter.SelectCommand%2A>deve essere valido, ma non deve essere aperto.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Se la connessione viene chiusa prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>viene chiamato, verrà aperta per recuperare i dati, quindi chiusa.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Se la connessione è aperta prima <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>viene chiamato, rimane aperto.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Un&quot; <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>operazione aggiunge una <xref:System.Data.DataTable>destinazione <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Aggiunge quindi le colonne per la <xref:System.Data.DataColumnCollection>del <xref:System.Data.DataTable>e configura gli elementi seguenti <xref:System.Data.DataColumn>proprietà, se sono presenti nell&quot;origine dati:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> È necessario impostare <xref:System.Data.DataColumn.AutoIncrementStep%2A>e <xref:System.Data.DataColumn.AutoIncrementSeed%2A>separatamente.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Configura anche il <xref:System.Data.DataTable.PrimaryKey%2A>e <xref:System.Data.DataTable.Constraints%2A>proprietà secondo le regole seguenti: - se uno o più colonne chiave primaria vengono restituite da <xref:System.Data.IDbDataAdapter.SelectCommand%2A>vengono utilizzati come colonne chiave primaria per <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Se viene restituita alcuna colonna di chiave primaria, ma sono colonne univoche, le colonne univoche vengono utilizzate come chiave primaria se e solo se tutte le colonne univoche sono ammessi valori null. Se una o più colonne ammettono valori null, un <xref:System.Data.UniqueConstraint>viene aggiunto per il <xref:System.Data.ConstraintCollection>, ma la <xref:System.Data.DataTable.PrimaryKey%2A>non è impostata.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Se vengono restituite sia colonne chiave primaria che colonne univoche, le colonne chiave primaria vengono utilizzate come colonne chiave primaria per <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Si noti che le chiavi primarie e i vincoli unique vengono aggiunti il <xref:System.Data.ConstraintCollection>in base alle regole precedenti, ma altri vincoli non vengono aggiunti i tipi.</xref:System.Data.ConstraintCollection>       Se il cluster univoco viene definito l&quot;indice in una colonna o colonne in una tabella di SQL Server e il vincolo di chiave primaria è definito in un set diverso di colonne, quindi verranno restituiti i nomi delle colonne nell&quot;indice cluster. Per restituire il nome o i nomi delle colonne chiave primaria, utilizzare un hint per la query con l&quot;istruzione SELECT che specifica il nome dell&quot;indice di chiave primaria. Per ulteriori informazioni sulla specifica di hint per la query, vedere [Hint per la Query (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Se il <xref:System.Data.IDataAdapter>rileva colonne duplicate durante la compilazione di un <xref:System.Data.DataTable>, genera nomi per le colonne successive, usando il modello &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3&quot; e così via.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Se i dati in ingresso contengano colonne senza nome, questi vengono collocati nel <xref:System.Data.DataSet>secondo il criterio &quot;Column1&quot;, &quot;Column2&quot; e così via.</xref:System.Data.DataSet> Quando più set di risultati vengono aggiunti per il <xref:System.Data.DataSet>ogni set di risultati viene inserito in una tabella separata.</xref:System.Data.DataSet> Set di risultati aggiuntivi sono denominati aggiungendo i valori integrali per il nome della tabella specificato (ad esempio, &quot;Table&quot;, &quot;Table1&quot;, &quot;Table2&quot; e così via.). Le applicazioni che utilizzano nomi di colonna e tabella è necessario assicurarsi che non si verifichino conflitti con questi modelli di denominazione.       Il <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>metodo supporta scenari in cui il <xref:System.Data.DataSet>contiene più <xref:System.Data.DataTable>oggetti i cui nomi differiscono solo dalle maiuscole o minuscole.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> In tali situazioni, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e crea una nuova tabella se non esiste alcuna corrispondenza esatta.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Se <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>viene chiamato e <xref:System.Data.DataSet>contiene solo <xref:System.Data.DataTable>il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable>viene aggiornato.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>non restituisce alcuna riga.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Utilizzare il <xref:System.Data.Common.DbDataAdapter.Fill%2A>metodo per aggiungere righe a un <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Quando si gestiscono istruzioni SQL batch che restituiscono più risultati, l&quot;implementazione di <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>per il Provider di dati .NET Framework per OLE DB consente di recuperare informazioni sullo schema solo per il primo risultato.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Per recuperare informazioni sullo schema per più risultati, utilizzare <xref:System.Data.Common.DbDataAdapter.Fill%2A>con il <xref:System.Data.MissingSchemaAction>impostato su `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Quando si utilizza <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, il Provider di dati .NET Framework per SQL Server aggiunge una clausola FOR BROWSE all&quot;istruzione da eseguire.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> L&quot;utente deve essere consapevole dei potenziali effetti collaterali, ad esempio un&quot;interferenza con l&quot;utilizzo di istruzioni SET FMTONLY ON. Per ulteriori informazioni, vedere la documentazione Online di SQL Server."
  syntax:
    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Il <xref href=&quot;System.Data.DataSet&quot;> </xref> in cui inserire lo schema dall&quot;origine dati."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Uno del <xref href=&quot;System.Data.SchemaType&quot;> </xref> valori."
    - id: command
      type: System.Data.IDbCommand
      description: "L&quot;istruzione SQL SELECT utilizzata per recuperare le righe dall&quot;origine dati."
    - id: srcTable
      type: System.String
      description: "Il nome della tabella di origine da utilizzare per il mapping di tabella."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Uno del <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> valori."
    return:
      type: System.Data.DataTable[]
      description: "Matrice di <xref href=&quot;System.Data.DataTable&quot;> </xref> oggetti che contengono informazioni sullo schema restituite dall&quot;origine dati."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  id: GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Restituisce un <xref href=&quot;System.Data.IDataParameter&quot;> </xref> da uno dei comandi nel batch corrente."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera un&quot;eccezione <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter>eseguire l&quot;override di questo metodo per fornire il supporto per i batch.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "L&quot;indice del comando per il parametro da recuperare."
    - id: parameterIndex
      type: System.Int32
      description: "L&quot;indice del parametro all&quot;interno del comando."
    return:
      type: System.Data.IDataParameter
      description: "Il <xref href=&quot;System.Data.IDataParameter&quot;> </xref> specificato."
  overload: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "L&quot;adapter non supporta i batch."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Restituisce informazioni su un tentativo di aggiornamento singolo all&quot;interno di un aggiornamento in batch più grande."
  remarks: "Provider di dati che supportano la logica di aggiornamento in batch devono eseguire l&quot;override di una serie di metodi virtuali sulla <xref:System.Data.Common.DbDataAdapter>classe.</xref:System.Data.Common.DbDataAdapter> `GetBatchedRecordsAffected`rappresenta uno di questi metodi virtuali. Il `DbDataAdapter` classe si basa su `GetBatchedRecordsAffected` per determinare l&quot;esito positivo o negativo dei tentativi di aggiornamento singolo all&quot;interno di un batch in modo da poter contrassegnare ogni corrispondente <xref:System.Data.DataRow>di conseguenza.</xref:System.Data.DataRow>"
  syntax:
    content: protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "Il numero ordinale di colonna in base zero del comando singoli all&quot;interno del batch."
    - id: recordsAffected
      type: System.Int32
      description: "Il numero di righe interessate nell&quot;archivio dati per il comando specificato all&quot;interno del batch."
    - id: error
      type: System.Exception
      description: "Un <xref:System.Exception>generata durante l&quot;esecuzione del comando specificato.</xref:System.Exception> Restituisce <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic) se viene generata alcuna eccezione."
    return:
      type: System.Boolean
      description: "Informazioni su un tentativo di aggiornamento singolo all&quot;interno di un aggiornamento in batch più grande."
  overload: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene i parametri impostati dall&quot;utente durante l&quot;esecuzione di un&quot;istruzione SQL SELECT."
  syntax:
    content: public override System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "Matrice di <xref href=&quot;System.Data.IDataParameter&quot;> </xref> gli oggetti che contiene i parametri impostati dall&quot;utente."
  overload: System.Data.Common.DbDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  id: InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Inizializza l&quot;invio in batch per il <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera un&quot;eccezione <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter>eseguire l&quot;override di questo metodo per fornire il supporto per i batch.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void InitializeBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.InitializeBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "L&quot;adapter non supporta i batch."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene o imposta un comando utilizzato per inserire nuovi record nell&quot;origine dati."
  remarks: "Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, se questa proprietà non è impostata e informazioni sulla chiave primarie è presente nel <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.InsertCommand%2A>verrà generato automaticamente.</xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand InsertCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Oggetto <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizzato durante <xref:System.Data.IDataAdapter.Update*>per inserire i record nell&quot;origine dati per le nuove righe nel set di dati.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Genera il <xref uid=&quot;langword_csharp_RowUpdated&quot; name=&quot;RowUpdated&quot; href=&quot;&quot;> </xref> evento di un provider di dati .NET Framework."
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "Oggetto <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Genera il <xref uid=&quot;langword_csharp_RowUpdating&quot; name=&quot;RowUpdating&quot; href=&quot;&quot;> </xref> evento di un provider di dati .NET Framework."
  remarks: 'Viene generato un evento richiama il gestore dell&quot;evento tramite un delegato. Per una panoramica, vedere [NIB: generazione di un evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "Un <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> che contiene i dati dell&quot;evento."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene o imposta un comando utilizzato per selezionare i record nell&quot;origine dati."
  remarks: ''
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_1_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_1_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand SelectCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Oggetto <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizzata durante l&quot;utilizzo <xref:System.Data.IDataAdapter.Update*>per selezionare i record dall&quot;origine dati per la selezione nel set di dati.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene o imposta un&quot;istruzione SQL per l&quot;eliminazione di record dal set di dati."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.Common.DbDataAdapter>esegue il cast dell&quot;istanza di un <xref:System.Data.IDbDataAdapter>interfaccia.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Per ulteriori informazioni, vedere <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Un <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizzato durante <xref:System.Data.Common.DbDataAdapter.Update*>per eliminare i record nell&quot;origine dati per le righe eliminate nel set di dati.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene o imposta un&quot;istruzione SQL utilizzata per inserire nuovi record nell&quot;origine dati."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.Common.DbDataAdapter>esegue il cast dell&quot;istanza di un <xref:System.Data.IDbDataAdapter>interfaccia.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Per ulteriori informazioni, vedere <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.</xref:System.Data.IDbDataAdapter.InsertCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Un <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizzato durante <xref:System.Data.Common.DbDataAdapter.Update*>per inserire i record nell&quot;origine dati per le nuove righe nel set di dati.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene o imposta un&quot;istruzione SQL utilizzata per selezionare i record nell&quot;origine dati."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.Common.DbDataAdapter>esegue il cast dell&quot;istanza di un <xref:System.Data.IDbDataAdapter>interfaccia.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Per ulteriori informazioni, vedere <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Un <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizzata durante l&quot;utilizzo <xref:System.Data.Common.DbDataAdapter.Update*>per selezionare i record dall&quot;origine dati per la selezione nel set di dati.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene o imposta un&quot;istruzione SQL utilizzata per aggiornare i record nell&quot;origine dati."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.Common.DbDataAdapter>esegue il cast dell&quot;istanza di un <xref:System.Data.IDbDataAdapter>interfaccia.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Per ulteriori informazioni, vedere <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Un <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizzato durante <xref:System.Data.Common.DbDataAdapter.Update*>per aggiornare i record nell&quot;origine dati per le righe modificate nel set di dati.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Crea un nuovo oggetto che è una copia dell&quot;istanza corrente."
  remarks: "Questo membro è un&quot;implementazione esplicita dell&quot;interfaccia di un membro. E può essere utilizzato solo quando il <xref:System.Data.Common.DbDataAdapter>esegue il cast dell&quot;istanza di un <xref:System.ICloneable>interfaccia.</xref:System.ICloneable> </xref:System.Data.Common.DbDataAdapter>       Per ulteriori informazioni, vedere <xref:System.ICloneable.Clone%2A?displayProperty=fullName>.</xref:System.ICloneable.Clone%2A?displayProperty=fullName>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Nuovo oggetto che è una copia di questa istanza."
  overload: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  id: TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Termina l&quot;esecuzione in batch per il <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>, questo metodo genera un&quot;eccezione <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Le classi che ereditano da <xref:System.Data.Common.DbDataAdapter>eseguire l&quot;override di questo metodo per fornire il supporto per i batch.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void TerminateBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.TerminateBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "L&quot;adapter non supporta i batch."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  id: Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiorna i valori del database eseguendo le rispettive istruzioni INSERT, UPDATE o DELETE per ogni inseriti, aggiornati o eliminati riga nella matrice specificata di <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Quando un&quot;applicazione chiama il <xref:System.Data.Common.DbDataAdapter.Update%2A>(metodo), il <xref:System.Data.Common.DbDataAdapter>esamina il <xref:System.Data.DataRow.RowState%2A>, proprietà ed esegue le istruzioni INSERT, UPDATE o DELETE necessarie in modo iterativo per ogni riga, in base all&quot;ordine degli indici configurati nella <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Ad esempio, <xref:System.Data.Common.DbDataAdapter.Update%2A>potrebbe eseguire un&quot;istruzione DELETE, seguita da un&quot;istruzione INSERT e quindi un&quot;altra istruzione DELETE, a causa di ordinamento delle righe in <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Si noti che queste istruzioni non vengono eseguite come un processo batch. ogni riga viene aggiornata singolarmente. Un&quot;applicazione può chiamare il <xref:System.Data.DataSet.GetChanges%2A>in situazioni in cui è necessario controllare la sequenza di tipi di istruzione (ad esempio, gli inserimenti prima degli aggiornamenti).</xref:System.Data.DataSet.GetChanges%2A> Per ulteriori informazioni, vedere [l&quot;aggiornamento di origini dati con DataAdapter](~/add/includes/ajax-current-ext-md.md).       Se le istruzioni INSERT, UPDATE o DELETE non sono state specificate, il <xref:System.Data.Common.DbDataAdapter.Update%2A>metodo genera un&quot;eccezione.</xref:System.Data.Common.DbDataAdapter.Update%2A> Tuttavia, è possibile creare un <xref:System.Data.SqlClient.SqlCommandBuilder>o <xref:System.Data.OleDb.OleDbCommandBuilder>oggetto per generare automaticamente le istruzioni SQL per gli aggiornamenti a tabella singola, se si imposta la `SelectCommand` proprietà di un provider di dati .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Quindi, generate da tutte le istruzioni SQL aggiuntive non si imposta la **CommandBuilder**. Questa logica di generazione richiede informazioni della colonna chiave deve essere presente in <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Per ulteriori informazioni vedere [la generazione di comandi tramite commandbuilders](~/add/includes/ajax-current-ext-md.md).       Il <xref:System.Data.Common.DbDataAdapter.Update%2A>che consente di recuperare le righe dalla tabella elencata nel primo mapping prima di eseguire un aggiornamento.</xref:System.Data.Common.DbDataAdapter.Update%2A> Il <xref:System.Data.Common.DbDataAdapter.Update%2A>quindi aggiorna la riga utilizzando il valore di <xref:System.Data.IDbCommand.UpdatedRowSource%2A>proprietà.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Tutte le eventuali righe restituite vengono ignorate.       Dopo che tutti i dati vengono caricati nuovamente il <xref:System.Data.DataSet>, il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>viene generato l&quot;evento, consentendo all&quot;utente di controllare il riconciliato <xref:System.Data.DataSet>riga e le eventuali parametri di output restituiti dal comando.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Dopo una riga viene aggiornata correttamente, vengono accettate le modifiche di tale riga.       Quando si utilizza <xref:System.Data.Common.DbDataAdapter.Update%2A>, l&quot;ordine di esecuzione è il seguente: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  I valori di <xref:System.Data.DataRow>vengono spostati i valori dei parametri.</xref:System.Data.DataRow>      2.  Il <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>viene generato l&quot;evento.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Esegue il comando.      4.  Se il comando è impostato su `FirstReturnedRecord`, il primo risultato restituito è inserito in <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se sono presenti parametri di output, vengono inseriti in <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  Il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>viene generato l&quot;evento.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>viene chiamato.</xref:System.Data.DataRow.AcceptChanges%2A>       Ogni comando associato <xref:System.Data.Common.DbDataAdapter>in genere è una raccolta di parametri associata a esso.</xref:System.Data.Common.DbDataAdapter> I parametri sono mappati alla riga corrente tramite il `SourceColumn` e `SourceVersion` le proprietà di un provider di dati .NET Framework `Parameter` classe. `SourceColumn`fa riferimento a un <xref:System.Data.DataTable>colonna che il <xref:System.Data.Common.DbDataAdapter>riferimenti per ottenere i valori dei parametri per la riga corrente.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`fa riferimento al nome della colonna non mappata prima i mapping delle tabelle sono stati applicati. Se `SourceColumn` fa riferimento a una colonna inesistente, l&quot;azione eseguita dipende da uno dei seguenti <xref:System.Data.MissingMappingAction>valori.</xref:System.Data.MissingMappingAction>      | Valore di enumerazione | Azione eseguita |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Utilizzare i nomi delle colonne di origine e i nomi delle tabelle di <xref:System.Data.DataSet>se è presente alcun mapping. |   | `MissingMappingAction.Ignore`| Oggetto <xref:System.SystemException>viene generato.</xref:System.SystemException> </xref:System.Data.DataSet> Quando i mapping sono impostate esplicitamente, un mapping mancante per un parametro di input è in genere il risultato di un errore. |   | `MissingMappingAction.Error`| Viene generato un <xref:System.SystemException>. |       Il `SourceColumn` proprietà viene utilizzata anche per il mapping del valore per l&quot;output o i parametri di input/output del `DataSet`.</xref:System.SystemException> Se fa riferimento a una colonna inesistente, viene generata un&quot;eccezione.       Il `SourceVersion` proprietà di un provider di dati .NET Framework `Parameter` classe determina se utilizzare la versione Original, Current o Proposed del valore della colonna. Questa funzionalità viene spesso utilizzata per includere i valori originali nella clausola WHERE di un&quot;istruzione UPDATE per verificare la presenza di eventuali violazioni alla concorrenza ottimistica.      > [!NOTE] > Se si verifica un errore durante l&quot;aggiornamento di una riga, viene generata un&quot;eccezione e l&quot;esecuzione dell&quot;aggiornamento non è più disponibile. Per continuare l&quot;operazione di aggiornamento senza generare eccezioni quando viene rilevato un errore, impostare il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>proprietà `true` prima di chiamare <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> È anche possibile rispondere agli errori in una riga all&quot;interno di `RowUpdated` evento di un oggetto DataAdapter. Per continuare l&quot;operazione di aggiornamento senza generare un&quot;eccezione all&quot;interno di `RowUpdated` evento, impostare la <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>proprietà del <xref:System.Data.Common.RowUpdatedEventArgs>per <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataRow[] dataRows);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref> gli oggetti usati per aggiornare l&quot;origine dati."
    return:
      type: System.Int32
      description: "Il numero di righe aggiornate correttamente dal <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Il <xref href=&quot;System.Data.DataSet&quot;> </xref> non è valido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La tabella di origine non è valida."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Non <xref href=&quot;System.Data.DataRow&quot;> </xref> presente da aggiornare.       - oppure - No <xref href=&quot;System.Data.DataTable&quot;> </xref> presente da aggiornare.       - oppure - No <xref href=&quot;System.Data.DataSet&quot;> </xref> esiste per l&quot;utilizzo come origine."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Un tentativo di eseguire un&quot;istruzione INSERT, UPDATE o DELETE ha effetto su alcun record."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiorna i valori del database eseguendo le rispettive istruzioni INSERT, UPDATE o DELETE per ogni inseriti, aggiornati o eliminati riga nell&quot;oggetto specificato <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Quando un&quot;applicazione chiama il metodo di aggiornamento, il <xref:System.Data.Common.DbDataAdapter>esamina il <xref:System.Data.DataRow.RowState%2A>, proprietà ed esegue le istruzioni INSERT, UPDATE o DELETE necessarie in modo iterativo per ogni riga, in base all&quot;ordine degli indici configurati nella <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> Ad esempio, aggiornamento potrebbe eseguire un&quot;istruzione DELETE, seguita da un&quot;istruzione INSERT e quindi un&quot;altra istruzione DELETE, a causa di ordinamento delle righe in <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Si noti che queste istruzioni non vengono eseguite come un processo batch. ogni riga viene aggiornata singolarmente. Un&quot;applicazione può chiamare il <xref:System.Data.DataSet.GetChanges%2A>in situazioni in cui è necessario controllare la sequenza di tipi di istruzione (ad esempio, gli inserimenti prima degli aggiornamenti).</xref:System.Data.DataSet.GetChanges%2A> Per ulteriori informazioni, vedere [l&quot;aggiornamento di origini dati con DataAdapter](~/add/includes/ajax-current-ext-md.md).       Se le istruzioni INSERT, UPDATE o DELETE non sono state specificate, il metodo Update genererà un&quot;eccezione. Tuttavia, è possibile creare un <xref:System.Data.SqlClient.SqlCommandBuilder>o <xref:System.Data.OleDb.OleDbCommandBuilder>oggetto per generare automaticamente le istruzioni SQL per gli aggiornamenti a tabella singola, se si imposta la `SelectCommand` proprietà di un provider di dati .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Quindi, generate da tutte le istruzioni SQL aggiuntive non si imposta la **CommandBuilder**. Questa logica di generazione richiede informazioni della colonna chiave deve essere presente in <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Per ulteriori informazioni vedere [la generazione di comandi tramite commandbuilders](~/add/includes/ajax-current-ext-md.md).       Il metodo Update recupera le righe dalla tabella elencata nel primo mapping prima di eseguire un aggiornamento. Aggiorna quindi la riga utilizzando il valore di <xref:System.Data.IDbCommand.UpdatedRowSource%2A>proprietà.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> Tutte le eventuali righe restituite vengono ignorate.       Dopo che tutti i dati vengono caricati nuovamente il <xref:System.Data.DataSet>, il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>viene generato l&quot;evento, consentendo all&quot;utente di controllare il riconciliato <xref:System.Data.DataSet>riga e le eventuali parametri di output restituiti dal comando.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Dopo una riga viene aggiornata correttamente, vengono accettate le modifiche di tale riga.       Quando si utilizza l&quot;aggiornamento, l&quot;ordine di esecuzione è il seguente: 1.  I valori di <xref:System.Data.DataRow>vengono spostati i valori dei parametri.</xref:System.Data.DataRow>      2.  Il <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>viene generato l&quot;evento.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Esegue il comando.      4.  Se il comando è impostato su `FirstReturnedRecord`, quindi il primo risultato restituito è inserito in <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se sono presenti parametri di output, vengono inseriti in <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  Il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>viene generato l&quot;evento.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>viene chiamato.</xref:System.Data.DataRow.AcceptChanges%2A>       Ogni comando associato <xref:System.Data.Common.DbDataAdapter>in genere è una raccolta di parametri associata a esso.</xref:System.Data.Common.DbDataAdapter> I parametri sono mappati alla riga corrente tramite il `SourceColumn` e `SourceVersion` le proprietà di un provider di dati .NET Framework `Parameter` classe. `SourceColumn`fa riferimento a un <xref:System.Data.DataTable>colonna che il <xref:System.Data.Common.DbDataAdapter>riferimenti per ottenere i valori dei parametri per la riga corrente.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`fa riferimento al nome della colonna non mappata prima i mapping delle tabelle sono stati applicati. Se `SourceColumn` fa riferimento a una colonna inesistente, l&quot;azione eseguita dipende da uno dei seguenti <xref:System.Data.MissingMappingAction>valori.</xref:System.Data.MissingMappingAction>      | Valore di enumerazione | Azione eseguita |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Utilizzare i nomi delle colonne di origine e i nomi delle tabelle di <xref:System.Data.DataSet>se è presente alcun mapping. |   | `MissingMappingAction.Ignore`| Oggetto <xref:System.SystemException>viene generato.</xref:System.SystemException> </xref:System.Data.DataSet> Quando i mapping sono impostate esplicitamente, un mapping mancante per un parametro di input è in genere il risultato di un errore. |   | `MissingMappingAction.Error`| Viene generato un <xref:System.SystemException>. |       Il `SourceColumn` proprietà viene utilizzata anche per il mapping del valore per l&quot;output o i parametri di input/output del `DataSet`.</xref:System.SystemException> Se fa riferimento a una colonna inesistente, viene generata un&quot;eccezione.       Il `SourceVersion` proprietà di un provider di dati .NET Framework `Parameter` classe determina se utilizzare la versione Original, Current o Proposed del valore della colonna. Questa funzionalità viene spesso utilizzata per includere i valori originali nella clausola WHERE di un&quot;istruzione UPDATE per verificare la presenza di eventuali violazioni alla concorrenza ottimistica.      > [!NOTE] > Se si verifica un errore durante l&quot;aggiornamento di una riga, viene generata un&quot;eccezione e l&quot;esecuzione dell&quot;aggiornamento non è più disponibile. Per continuare l&quot;operazione di aggiornamento senza generare eccezioni quando viene rilevato un errore, impostare il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>proprietà `true` prima di chiamare Update.</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> È anche possibile rispondere agli errori in una riga all&quot;interno di `RowUpdated` evento di un oggetto DataAdapter. Per continuare l&quot;operazione di aggiornamento senza generare un&quot;eccezione all&quot;interno di `RowUpdated` evento, impostare la <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>proprietà del <xref:System.Data.Common.RowUpdatedEventArgs>per <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_4_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_4_1.cs)]"
  syntax:
    content: public override int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Il <xref href=&quot;System.Data.DataSet&quot;> </xref> utilizzato per aggiornare l&quot;origine dati."
    return:
      type: System.Int32
      description: "Il numero di righe aggiornate correttamente dal <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La tabella di origine non è valida."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Un tentativo di eseguire un&quot;istruzione INSERT, UPDATE o DELETE ha effetto su alcun record."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  id: Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiorna i valori del database eseguendo le rispettive istruzioni INSERT, UPDATE o DELETE per ogni inseriti, aggiornati o eliminati riga nell&quot;oggetto specificato <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Quando un&quot;applicazione chiama il <xref:System.Data.Common.DbDataAdapter.Update%2A>(metodo), il <xref:System.Data.Common.DbDataAdapter>esamina il <xref:System.Data.DataRow.RowState%2A>, proprietà ed esegue le istruzioni INSERT, UPDATE o DELETE necessarie in modo iterativo per ogni riga, in base all&quot;ordine degli indici configurati nella <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Ad esempio, <xref:System.Data.Common.DbDataAdapter.Update%2A>potrebbe eseguire un&quot;istruzione DELETE, seguita da un&quot;istruzione INSERT e quindi un&quot;altra istruzione DELETE, a causa di ordinamento delle righe in <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Si noti che queste istruzioni non vengono eseguite come un processo batch. ogni riga viene aggiornata singolarmente. Un&quot;applicazione può chiamare il <xref:System.Data.DataSet.GetChanges%2A>in situazioni in cui è necessario controllare la sequenza di tipi di istruzione (ad esempio, gli inserimenti prima degli aggiornamenti).</xref:System.Data.DataSet.GetChanges%2A> Per ulteriori informazioni, vedere [l&quot;aggiornamento di origini dati con DataAdapter](~/add/includes/ajax-current-ext-md.md).       Se le istruzioni INSERT, UPDATE o DELETE non sono state specificate, il <xref:System.Data.Common.DbDataAdapter.Update%2A>metodo genera un&quot;eccezione.</xref:System.Data.Common.DbDataAdapter.Update%2A> Tuttavia, è possibile creare un <xref:System.Data.SqlClient.SqlCommandBuilder>o <xref:System.Data.OleDb.OleDbCommandBuilder>oggetto per generare automaticamente le istruzioni SQL per gli aggiornamenti a tabella singola, se si imposta la `SelectCommand` proprietà di un provider di dati .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Quindi, generate da tutte le istruzioni SQL aggiuntive non si imposta la **CommandBuilder**. Questa logica di generazione richiede informazioni della colonna chiave deve essere presente in <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Per ulteriori informazioni vedere [la generazione di comandi tramite commandbuilders](~/add/includes/ajax-current-ext-md.md).       Il <xref:System.Data.Common.DbDataAdapter.Update%2A>che consente di recuperare le righe dalla tabella elencata nel primo mapping prima di eseguire un aggiornamento.</xref:System.Data.Common.DbDataAdapter.Update%2A> Il <xref:System.Data.Common.DbDataAdapter.Update%2A>quindi aggiorna la riga utilizzando il valore di <xref:System.Data.IDbCommand.UpdatedRowSource%2A>proprietà.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Tutte le eventuali righe restituite vengono ignorate.       Dopo che tutti i dati vengono caricati nuovamente il <xref:System.Data.DataSet>, il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>viene generato l&quot;evento, consentendo all&quot;utente di controllare il riconciliato <xref:System.Data.DataSet>riga e le eventuali parametri di output restituiti dal comando.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Dopo una riga viene aggiornata correttamente, vengono accettate le modifiche di tale riga.       Quando si utilizza <xref:System.Data.Common.DbDataAdapter.Update%2A>, l&quot;ordine di esecuzione è il seguente: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  I valori di <xref:System.Data.DataRow>vengono spostati i valori dei parametri.</xref:System.Data.DataRow>      2.  Il <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>viene generato l&quot;evento.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Esegue il comando.      4.  Se il comando è impostato su `FirstReturnedRecord`, quindi il primo risultato restituito è inserito in <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se sono presenti parametri di output, vengono inseriti in <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  Il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>viene generato l&quot;evento.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>viene chiamato.</xref:System.Data.DataRow.AcceptChanges%2A>       Ogni comando associato <xref:System.Data.Common.DbDataAdapter>in genere è una raccolta di parametri associata a esso.</xref:System.Data.Common.DbDataAdapter> I parametri sono mappati alla riga corrente tramite il `SourceColumn` e `SourceVersion` le proprietà di un provider di dati .NET Framework `Parameter` classe. `SourceColumn`fa riferimento a un <xref:System.Data.DataTable>colonna che il <xref:System.Data.Common.DbDataAdapter>riferimenti per ottenere i valori dei parametri per la riga corrente.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`fa riferimento al nome della colonna non mappata prima i mapping delle tabelle sono stati applicati. Se `SourceColumn` fa riferimento a una colonna inesistente, l&quot;azione eseguita dipende da uno dei seguenti <xref:System.Data.MissingMappingAction>valori.</xref:System.Data.MissingMappingAction>      | Valore di enumerazione | Azione eseguita |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Utilizzare i nomi delle colonne di origine e i nomi delle tabelle di <xref:System.Data.DataSet>se è presente alcun mapping. |   | `MissingMappingAction.Ignore`| Oggetto <xref:System.SystemException>viene generato.</xref:System.SystemException> </xref:System.Data.DataSet> Quando i mapping sono impostate esplicitamente, un mapping mancante per un parametro di input è in genere il risultato di un errore. |   | `MissingMappingAction.Error`| Viene generato un <xref:System.SystemException>. |       Il `SourceColumn` proprietà viene utilizzata anche per il mapping del valore per l&quot;output o i parametri di input/output del `DataSet`.</xref:System.SystemException> Se fa riferimento a una colonna inesistente, viene generata un&quot;eccezione.       Il `SourceVersion` proprietà di un provider di dati .NET Framework `Parameter` classe determina se utilizzare la versione Original, Current o Proposed del valore della colonna. Questa funzionalità viene spesso utilizzata per includere i valori originali nella clausola WHERE di un&quot;istruzione UPDATE per verificare la presenza di eventuali violazioni alla concorrenza ottimistica.      > [!NOTE] > Se si verifica un errore durante l&quot;aggiornamento di una riga, viene generata un&quot;eccezione e l&quot;esecuzione dell&quot;aggiornamento non è più disponibile. Per continuare l&quot;operazione di aggiornamento senza generare eccezioni quando viene rilevato un errore, impostare il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>proprietà `true` prima di chiamare <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> È anche possibile rispondere agli errori in una riga all&quot;interno di `RowUpdated` evento di un oggetto DataAdapter. Per continuare l&quot;operazione di aggiornamento senza generare un&quot;eccezione all&quot;interno di `RowUpdated` evento, impostare la <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>proprietà del <xref:System.Data.Common.RowUpdatedEventArgs>per <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_1_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_1_1.cs)]"
  syntax:
    content: public int Update (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Il <xref href=&quot;System.Data.DataTable&quot;> </xref> utilizzato per aggiornare l&quot;origine dati."
    return:
      type: System.Int32
      description: "Il numero di righe aggiornate correttamente dal <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Il <xref href=&quot;System.Data.DataSet&quot;> </xref> non è valido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La tabella di origine non è valida."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Non <xref href=&quot;System.Data.DataRow&quot;> </xref> presente da aggiornare.       - oppure - No <xref href=&quot;System.Data.DataTable&quot;> </xref> presente da aggiornare.       - oppure - No <xref href=&quot;System.Data.DataSet&quot;> </xref> esiste per l&quot;utilizzo come origine."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Un tentativo di eseguire un&quot;istruzione INSERT, UPDATE o DELETE ha effetto su alcun record."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  id: Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiorna i valori del database eseguendo le rispettive istruzioni INSERT, UPDATE o DELETE per ogni inseriti, aggiornati o eliminati riga nella matrice specificata di <xref href=&quot;System.Data.DataSet&quot;> </xref> oggetti."
  remarks: "Quando un&quot;applicazione chiama il <xref:System.Data.Common.DbDataAdapter.Update%2A>(metodo), il <xref:System.Data.Common.DbDataAdapter>esamina il <xref:System.Data.DataRow.RowState%2A>, proprietà ed esegue le istruzioni INSERT, UPDATE o DELETE necessarie in modo iterativo per ogni riga, in base all&quot;ordine degli indici configurati nella <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Ad esempio, <xref:System.Data.Common.DbDataAdapter.Update%2A>potrebbe eseguire un&quot;istruzione DELETE, seguita da un&quot;istruzione INSERT e quindi un&quot;altra istruzione DELETE, a causa di ordinamento delle righe in <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Si noti che queste istruzioni non vengono eseguite come un processo batch. ogni riga viene aggiornata singolarmente. Un&quot;applicazione può chiamare il <xref:System.Data.DataSet.GetChanges%2A>in situazioni in cui è necessario controllare la sequenza di tipi di istruzione (ad esempio, gli inserimenti prima degli aggiornamenti).</xref:System.Data.DataSet.GetChanges%2A> Per ulteriori informazioni, vedere [l&quot;aggiornamento di origini dati con DataAdapter](~/add/includes/ajax-current-ext-md.md).       Se le istruzioni INSERT, UPDATE o DELETE non sono state specificate, il <xref:System.Data.Common.DbDataAdapter.Update%2A>metodo genera un&quot;eccezione.</xref:System.Data.Common.DbDataAdapter.Update%2A> Tuttavia, è possibile creare un <xref:System.Data.SqlClient.SqlCommandBuilder>o <xref:System.Data.OleDb.OleDbCommandBuilder>oggetto per generare automaticamente le istruzioni SQL per gli aggiornamenti a tabella singola, se si imposta la `SelectCommand` proprietà di un provider di dati .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Quindi, generate da tutte le istruzioni SQL aggiuntive non si imposta la **CommandBuilder**. Questa logica di generazione richiede informazioni della colonna chiave deve essere presente in <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Per ulteriori informazioni vedere [la generazione di comandi tramite commandbuilders](~/add/includes/ajax-current-ext-md.md).       Il <xref:System.Data.Common.DbDataAdapter.Update%2A>che consente di recuperare le righe dalla tabella elencata nel primo mapping prima di eseguire un aggiornamento.</xref:System.Data.Common.DbDataAdapter.Update%2A> Il <xref:System.Data.Common.DbDataAdapter.Update%2A>quindi aggiorna la riga utilizzando il valore di <xref:System.Data.IDbCommand.UpdatedRowSource%2A>proprietà.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Tutte le eventuali righe restituite vengono ignorate.       Dopo che tutti i dati vengono caricati nuovamente il <xref:System.Data.DataSet>, il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>viene generato l&quot;evento, consentendo all&quot;utente di controllare il riconciliato <xref:System.Data.DataSet>riga e le eventuali parametri di output restituiti dal comando.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Dopo una riga viene aggiornata correttamente, vengono accettate le modifiche di tale riga.       Quando si utilizza <xref:System.Data.Common.DbDataAdapter.Update%2A>, l&quot;ordine di esecuzione è il seguente: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  I valori di <xref:System.Data.DataRow>vengono spostati i valori dei parametri.</xref:System.Data.DataRow>      2.  Il <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>viene generato l&quot;evento.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Esegue il comando.      4.  Se il comando è impostato su `FirstReturnedRecord`, quindi il primo risultato restituito è inserito in <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se sono presenti parametri di output, vengono inseriti in <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  Il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>viene generato l&quot;evento.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>viene chiamato.</xref:System.Data.DataRow.AcceptChanges%2A>       Ogni comando associato <xref:System.Data.Common.DbDataAdapter>in genere è una raccolta di parametri associata a esso.</xref:System.Data.Common.DbDataAdapter> I parametri sono mappati alla riga corrente tramite il `SourceColumn` e `SourceVersion` le proprietà di un provider di dati .NET Framework `Parameter` classe. `SourceColumn`fa riferimento a un <xref:System.Data.DataTable>colonna che il <xref:System.Data.Common.DbDataAdapter>riferimenti per ottenere i valori dei parametri per la riga corrente.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`fa riferimento al nome della colonna non mappata prima i mapping delle tabelle sono stati applicati. Se `SourceColumn` fa riferimento a una colonna inesistente, l&quot;azione eseguita dipende da uno dei seguenti <xref:System.Data.MissingMappingAction>valori.</xref:System.Data.MissingMappingAction>      | Valore di enumerazione | Azione eseguita |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Utilizzare i nomi delle colonne di origine e i nomi delle tabelle di <xref:System.Data.DataSet>se è presente alcun mapping. |   | `MissingMappingAction.Ignore`| Oggetto <xref:System.SystemException>viene generato.</xref:System.SystemException> </xref:System.Data.DataSet> Quando i mapping sono impostate esplicitamente, un mapping mancante per un parametro di input è in genere il risultato di un errore. |   | `MissingMappingAction.Error`| Viene generato un <xref:System.SystemException>. |       Il `SourceColumn` proprietà viene utilizzata anche per il mapping del valore per l&quot;output o i parametri di input/output del `DataSet`.</xref:System.SystemException> Se fa riferimento a una colonna inesistente, viene generata un&quot;eccezione.       Il `SourceVersion` proprietà di un provider di dati .NET Framework `Parameter` classe determina se utilizzare la versione Original, Current o Proposed del valore della colonna. Questa funzionalità viene spesso utilizzata per includere i valori originali nella clausola WHERE di un&quot;istruzione UPDATE per verificare la presenza di eventuali violazioni alla concorrenza ottimistica.      > [!NOTE] > Se si verifica un errore durante l&quot;aggiornamento di una riga, viene generata un&quot;eccezione e l&quot;esecuzione dell&quot;aggiornamento non è più disponibile. Per continuare l&quot;operazione di aggiornamento senza generare eccezioni quando viene rilevato un errore, impostare il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>proprietà `true` prima di chiamare <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> È anche possibile rispondere agli errori in una riga all&quot;interno di `RowUpdated` evento di un oggetto DataAdapter. Per continuare l&quot;operazione di aggiornamento senza generare un&quot;eccezione all&quot;interno di `RowUpdated` evento, impostare la <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>proprietà del <xref:System.Data.Common.RowUpdatedEventArgs>per <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  syntax:
    content: protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Matrice di <xref href=&quot;System.Data.DataRow&quot;> </xref> gli oggetti usati per aggiornare l&quot;origine dati."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "Il <xref:System.Data.IDataAdapter.TableMappings*>raccolta da utilizzare.</xref:System.Data.IDataAdapter.TableMappings*>"
    return:
      type: System.Int32
      description: "Il numero di righe aggiornate correttamente dal <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Il <xref href=&quot;System.Data.DataSet&quot;> </xref> non è valido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La tabella di origine non è valida."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Non <xref href=&quot;System.Data.DataRow&quot;> </xref> presente da aggiornare.       - oppure - No <xref href=&quot;System.Data.DataTable&quot;> </xref> presente da aggiornare.       - oppure - No <xref href=&quot;System.Data.DataSet&quot;> </xref> esiste per l&quot;utilizzo come origine."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Un tentativo di eseguire un&quot;istruzione INSERT, UPDATE o DELETE ha effetto su alcun record."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  id: Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Aggiorna i valori del database eseguendo le rispettive istruzioni INSERT, UPDATE o DELETE per ogni inseriti, aggiornati o eliminati riga il <xref href=&quot;System.Data.DataSet&quot;> </xref> con l&quot;oggetto specificato <xref href=&quot;System.Data.DataTable&quot;> </xref> nome."
  remarks: "Quando un&quot;applicazione chiama il <xref:System.Data.Common.DbDataAdapter.Update%2A>(metodo), il <xref:System.Data.Common.DbDataAdapter>esamina il <xref:System.Data.DataRow.RowState%2A>, proprietà ed esegue le istruzioni INSERT, UPDATE o DELETE necessarie in modo iterativo per ogni riga, in base all&quot;ordine degli indici configurati nella <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Ad esempio, <xref:System.Data.Common.DbDataAdapter.Update%2A>potrebbe eseguire un&quot;istruzione DELETE, seguita da un&quot;istruzione INSERT e quindi un&quot;altra istruzione DELETE, a causa di ordinamento delle righe in <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Si noti che queste istruzioni non vengono eseguite come un processo batch. ogni riga viene aggiornata singolarmente. Un&quot;applicazione può chiamare il <xref:System.Data.DataSet.GetChanges%2A>in situazioni in cui è necessario controllare la sequenza di tipi di istruzione (ad esempio, inserire prima dell&quot;aggiornamento).</xref:System.Data.DataSet.GetChanges%2A> Per ulteriori informazioni, vedere [l&quot;aggiornamento di origini dati con DataAdapter](~/add/includes/ajax-current-ext-md.md).       Se le istruzioni INSERT, UPDATE o DELETE non sono state specificate, il <xref:System.Data.Common.DbDataAdapter.Update%2A>metodo genera un&quot;eccezione.</xref:System.Data.Common.DbDataAdapter.Update%2A> Tuttavia, è possibile creare un <xref:System.Data.SqlClient.SqlCommandBuilder>o <xref:System.Data.OleDb.OleDbCommandBuilder>oggetto per generare automaticamente le istruzioni SQL per gli aggiornamenti a tabella singola, se si imposta la `SelectCommand` proprietà di un provider di dati .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Quindi, generate da tutte le istruzioni SQL aggiuntive non si imposta la **CommandBuilder**. Questa logica di generazione richiede informazioni della colonna chiave deve essere presente in <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Per ulteriori informazioni vedere [la generazione di comandi tramite commandbuilders](~/add/includes/ajax-current-ext-md.md).       Il <xref:System.Data.Common.DbDataAdapter.Update%2A>metodo supporta scenari in cui il <xref:System.Data.DataSet>contiene più <xref:System.Data.DataTable>oggetti i cui nomi differiscono solo dalle maiuscole o minuscole.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> Quando sono presenti più tabelle con lo stesso nome ma con maiuscole/minuscole diverse, in un `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A>esegue un confronto tra maiuscole e minuscole per trovare la tabella corrispondente e genera un&quot;eccezione se non esiste alcuna corrispondenza esatta.</xref:System.Data.Common.DbDataAdapter.Update%2A> Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet ds = new DataSet();    ds.Tables.Add(&quot;aaa&quot;);    ds.Tables.Add(&quot;AAA&quot;);    adapter.Update(ds, &quot;aaa&quot;); // Updates &quot;aaa&quot;, which already exists in the DataSet.    adapter.Update(ds, &quot;AAA&quot;); // Updates &quot;AAA&quot;, which already exists in the DataSet.       adapter.Update(ds, &quot;Aaa&quot;); // Results in an exception.   ```Se <xref:System.Data.Common.DbDataAdapter.Update%2A>viene chiamato e <xref:System.Data.DataSet>contiene solo <xref:System.Data.DataTable>il cui nome è diverso solo dalle maiuscole o minuscole, che <xref:System.Data.DataTable>viene aggiornato.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> In questo scenario, il confronto viene fatta distinzione tra maiuscole e minuscole. Il codice c# seguente viene illustrato questo comportamento.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Update(dataset, &quot;AAA&quot;); // Updates table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Il <xref:System.Data.Common.DbDataAdapter.Update%2A>che consente di recuperare le righe dalla tabella elencata nel primo mapping prima di eseguire un aggiornamento.</xref:System.Data.Common.DbDataAdapter.Update%2A> Il <xref:System.Data.Common.DbDataAdapter.Update%2A>quindi aggiorna la riga utilizzando il valore di <xref:System.Data.IDbCommand.UpdatedRowSource%2A>proprietà.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Tutte le eventuali righe restituite vengono ignorate.       Dopo che tutti i dati vengono caricati nuovamente il <xref:System.Data.DataSet>, il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>viene generato l&quot;evento, consentendo all&quot;utente di controllare il riconciliato <xref:System.Data.DataSet>riga e le eventuali parametri di output restituiti dal comando.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Dopo una riga viene aggiornata correttamente, vengono accettate le modifiche di tale riga.       Quando si utilizza <xref:System.Data.Common.DbDataAdapter.Update%2A>, l&quot;ordine di esecuzione è il seguente: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  I valori di <xref:System.Data.DataRow>vengono spostati i valori dei parametri.</xref:System.Data.DataRow>      2.  Il <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>viene generato l&quot;evento.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Esegue il comando.      4.  Se il comando è impostato su `FirstReturnedRecord`, quindi il primo risultato restituito è inserito in <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Se sono presenti parametri di output, vengono inseriti in <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  Il <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>viene generato l&quot;evento.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>viene chiamato.</xref:System.Data.DataRow.AcceptChanges%2A>       Ogni comando associato <xref:System.Data.Common.DbDataAdapter>in genere è una raccolta di parametri associata a esso.</xref:System.Data.Common.DbDataAdapter> I parametri sono mappati alla riga corrente tramite il `SourceColumn` e `SourceVersion` le proprietà di un provider di dati .NET Framework `Parameter` classe. `SourceColumn`fa riferimento a un <xref:System.Data.DataTable>colonna che il <xref:System.Data.Common.DbDataAdapter>riferimenti per ottenere i valori dei parametri per la riga corrente.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`fa riferimento al nome della colonna non mappata prima i mapping delle tabelle sono stati applicati. Se `SourceColumn` fa riferimento a una colonna inesistente, l&quot;azione eseguita dipende da uno dei seguenti <xref:System.Data.MissingMappingAction>valori.</xref:System.Data.MissingMappingAction>      | Valore di enumerazione | Azione eseguita |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Utilizzare i nomi delle colonne di origine e i nomi delle tabelle di <xref:System.Data.DataSet>se è presente alcun mapping. |   | `MissingMappingAction.Ignore`| Oggetto <xref:System.SystemException>viene generato.</xref:System.SystemException> </xref:System.Data.DataSet> Quando i mapping sono impostate esplicitamente, un mapping mancante per un parametro di input è in genere il risultato di un errore. |   | `MissingMappingAction.Error`| Viene generato un <xref:System.SystemException>. |       Il `SourceColumn` proprietà viene utilizzata anche per il mapping del valore per l&quot;output o i parametri di input/output del `DataSet`.</xref:System.SystemException> Se fa riferimento a una colonna inesistente, viene generata un&quot;eccezione.       Il `SourceVersion` proprietà di un provider di dati .NET Framework `Parameter` classe determina se utilizzare la versione Original, Current o Proposed del valore della colonna. Questa funzionalità viene spesso utilizzata per includere i valori originali nella clausola WHERE di un&quot;istruzione UPDATE per verificare la presenza di eventuali violazioni alla concorrenza ottimistica.      > [!NOTE] > Se si verifica un errore durante l&quot;aggiornamento di una riga, viene generata un&quot;eccezione e l&quot;esecuzione dell&quot;aggiornamento non è più disponibile. Per continuare l&quot;operazione di aggiornamento senza generare eccezioni quando viene rilevato un errore, impostare il <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>proprietà `true` prima di chiamare <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> È anche possibile rispondere agli errori in una riga all&quot;interno di `RowUpdated` evento di un oggetto DataAdapter. Per continuare l&quot;operazione di aggiornamento senza generare un&quot;eccezione all&quot;interno di `RowUpdated` evento, impostare la <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>proprietà del <xref:System.Data.Common.RowUpdatedEventArgs>per <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/csharp/m-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Il <xref href=&quot;System.Data.DataSet&quot;> </xref> da utilizzare per aggiornare l&quot;origine dati."
    - id: srcTable
      type: System.String
      description: "Il nome della tabella di origine da utilizzare per il mapping di tabella."
    return:
      type: System.Int32
      description: "Il numero di righe aggiornate correttamente dal <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Il <xref href=&quot;System.Data.DataSet&quot;> </xref> non è valido."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "La tabella di origine non è valida."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Un tentativo di eseguire un&quot;istruzione INSERT, UPDATE o DELETE ha effetto su alcun record."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  id: UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene o imposta un valore che abilita o disabilita il supporto per l&quot;elaborazione batch e specifica il numero di comandi che possono essere eseguite in un batch."
  remarks: "Utilizzare la proprietà UpdateBatchSize per aggiornare un&quot;origine dati con le modifiche apportate da un <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Se il provider di dati supporta l&quot;elaborazione batch, questo può migliorare le prestazioni dell&quot;applicazione riducendo il numero di round trip al server. In ADO.NET 2.0, questa proprietà è supportata per i provider di dati .NET per SQL Server (SqlClient) e Oracle (OracleClient).       Se si esegue un batch di dimensioni estremamente grande, le prestazioni risulteranno ridotte. Pertanto, è consigliabile verificare per l&quot;impostazione della dimensione di batch ottimale prima di implementare l&quot;applicazione.       Un <xref:System.ArgumentOutOfRangeException>verrà generata un&quot;eccezione se il valore è impostato su un numero minore di zero.</xref:System.ArgumentOutOfRangeException>"
  syntax:
    content: public virtual int UpdateBatchSize { get; set; }
    return:
      type: System.Int32
      description: "Il numero di righe da elaborare per ogni batch.       <table><thead><tr><th> Valore è       </th><th> Effetto       </th></tr></thead><tbody><tr><td> 0       </td><td> Non sussiste alcun limite alla dimensione del batch.       </td></tr><tr><td> 1       </td><td> Disabilita l&quot;aggiornamento in batch.       </td></tr><tr><td> &gt; 1       </td><td> Le modifiche vengono inviate utilizzando i batch di operazioni UpdateBatchSize alla volta.       </td></tr></tbody></table>       Quando si imposta un valore diverso da 1, tutti i comandi associati il <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> deve avere i <> </> *> proprietà impostata su * *Nessuno* * o * *OutputParameters**. In caso contrario, verrà generata un&quot;eccezione."
  overload: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Ottiene o imposta un comando utilizzato per aggiornare i record nell&quot;origine dati."
  remarks: "Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, se questa proprietà non è impostata e informazioni sulla chiave primarie è presente nel <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>verrà generato automaticamente.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Oggetto <xref href=&quot;System.Data.IDbCommand&quot;> </xref> utilizzato durante <xref:System.Data.IDataAdapter.Update*>per aggiornare i record nell&quot;origine dati per le righe modificate nel set di dati.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.Common.DataAdapter
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.Common.DbDataAdapter.#ctor
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
- uid: System.Data.IDataParameter
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.#ctor*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch
  nameWithType: DbDataAdapter.AddToBatch
- uid: System.Data.Common.DbDataAdapter.ClearBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch
  nameWithType: DbDataAdapter.ClearBatch
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.Common.DbDataAdapter.DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.Dispose*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose
  nameWithType: DbDataAdapter.Dispose
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch
  nameWithType: DbDataAdapter.ExecuteBatch
- uid: System.Data.Common.DbDataAdapter.Fill*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: DbDataAdapter.Fill
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: DbDataAdapter.FillSchema
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter
  nameWithType: DbDataAdapter.GetBatchedParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected
- uid: System.Data.Common.DbDataAdapter.GetFillParameters*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: DbDataAdapter.GetFillParameters
- uid: System.Data.Common.DbDataAdapter.InitializeBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching
  nameWithType: DbDataAdapter.InitializeBatching
- uid: System.Data.Common.DbDataAdapter.InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: DbDataAdapter.OnRowUpdated
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: DbDataAdapter.OnRowUpdating
- uid: System.Data.Common.DbDataAdapter.SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: DbDataAdapter.System.ICloneable.Clone
- uid: System.Data.Common.DbDataAdapter.TerminateBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching
  nameWithType: DbDataAdapter.TerminateBatching
- uid: System.Data.Common.DbDataAdapter.Update*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update
  nameWithType: DbDataAdapter.Update
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
